
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fa58  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024a0  0801fc38  0801fc38  0002fc38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080220d8  080220d8  000401dc  2**0
                  CONTENTS
  4 .ARM          00000000  080220d8  080220d8  000401dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080220d8  080220d8  000401dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080220d8  080220d8  000320d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080220dc  080220dc  000320dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080220e0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001671c  200001dc  080222bc  000401dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200168f8  080222bc  000468f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000648de  00000000  00000000  0004024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009716  00000000  00000000  000a4b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d80  00000000  00000000  000ae248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000023d2  00000000  00000000  000b0fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bac  00000000  00000000  000b339a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b160  00000000  00000000  000dbf46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe12e  00000000  00000000  001170a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d054  00000000  00000000  002151d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00222228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801fc20 	.word	0x0801fc20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0801fc20 	.word	0x0801fc20

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f01c fbc7 	bl	801d498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d54:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d7a:	f004 fcfb 	bl	8005774 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f002 fcfd 	bl	8003782 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d94:	f006 fb8a 	bl	80074ac <HAL_ADCEx_MultiModeConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d9e:	f002 fcf0 	bl	8003782 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0x168>)
 8000da4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000da6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000db6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000dbc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dce:	f005 fe73 	bl	8006ab8 <HAL_ADC_AnalogWDGConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f002 fcd3 	bl	8003782 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	237f      	movs	r3, #127	; 0x7f
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dec:	2304      	movs	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dfa:	f005 fa1d 	bl	8006238 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000e04:	f002 fcbd 	bl	8003782 <Error_Handler>
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x170>)
 8000e0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000e0c:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000e12:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000e24:	f005 fe48 	bl	8006ab8 <HAL_ADC_AnalogWDGConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000e2e:	f002 fca8 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3748      	adds	r7, #72	; 0x48
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001f8 	.word	0x200001f8
 8000e40:	7dc00000 	.word	0x7dc00000
 8000e44:	b6902000 	.word	0xb6902000
 8000e48:	0017ffff 	.word	0x0017ffff

08000e4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f01c fb17 	bl	801d498 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_ADC3_Init+0xec>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eb2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed8:	f004 fc4c 	bl	8005774 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ee2:	f002 fc4e 	bl	8003782 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ef2:	f006 fadb 	bl	80074ac <HAL_ADCEx_MultiModeConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000efc:	f002 fc41 	bl	8003782 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_ADC3_Init+0xf0>)
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000f1e:	f005 f98b 	bl	8006238 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f28:	f002 fc2b 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000264 	.word	0x20000264
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	b6982000 	.word	0xb6982000

08000f40 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f01c faa3 	bl	801d498 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_ADC4_Init+0xc8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f9a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fc0:	f004 fbd8 	bl	8005774 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f002 fbda 	bl	8003782 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC4_Init+0xcc>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fec:	f005 f924 	bl	8006238 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000ff6:	f002 fbc4 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002d0 	.word	0x200002d0
 8001008:	50000500 	.word	0x50000500
 800100c:	c75a0000 	.word	0xc75a0000

08001010 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f01c fa3b 	bl	801d498 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_ADC5_Init+0xc8>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800106a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001090:	f004 fb70 	bl	8005774 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800109a:	f002 fb72 	bl	8003782 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC5_Init+0xcc>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC5_Init+0xc4>)
 80010bc:	f005 f8bc 	bl	8006238 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010c6:	f002 fb5c 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000033c 	.word	0x2000033c
 80010d8:	50000600 	.word	0x50000600
 80010dc:	8c900008 	.word	0x8c900008

080010e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f01c f9d1 	bl	801d498 <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d14f      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f008 fe01 	bl	8009d18 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800111c:	f002 fb31 	bl	8003782 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_ADC_MspInit+0x220>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001140:	2205      	movs	r2, #5
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001174:	f006 ff6c 	bl	8008050 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800117e:	f002 fb00 	bl	8003782 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f006 fb6d 	bl	8007872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f006 fb84 	bl	80078a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800119e:	e114      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_ADC_MspInit+0x224>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d150      	bne.n	800124c <HAL_ADC_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f008 fdac 	bl	8009d18 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0xea>
      Error_Handler();
 80011c6:	f002 fadc 	bl	8003782 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    hdma_adc3.Instance = DMA1_Channel5;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_ADC_MspInit+0x230>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011fc:	2225      	movs	r2, #37	; 0x25
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800122e:	4837      	ldr	r0, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001230:	f006 ff0e 	bl	8008050 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x15e>
      Error_Handler();
 800123a:	f002 faa2 	bl	8003782 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800124a:	e0be      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ADC_MspInit+0x234>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d164      	bne.n	8001320 <HAL_ADC_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800125c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f008 fd56 	bl	8009d18 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8001272:	f002 fa86 	bl	8003782 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_ADC_MspInit+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x1c0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel6;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_ADC_MspInit+0x23c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012dc:	f006 feb8 	bl	8008050 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 80012e6:	f002 fa4c 	bl	8003782 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012f6:	e068      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	200003a8 	.word	0x200003a8
 8001300:	4002001c 	.word	0x4002001c
 8001304:	50000400 	.word	0x50000400
 8001308:	20000528 	.word	0x20000528
 800130c:	20000408 	.word	0x20000408
 8001310:	40020058 	.word	0x40020058
 8001314:	50000500 	.word	0x50000500
 8001318:	20000468 	.word	0x20000468
 800131c:	4002006c 	.word	0x4002006c
  else if(adcHandle->Instance==ADC5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0x2f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14f      	bne.n	80013ca <HAL_ADC_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4618      	mov	r0, r3
 800133c:	f008 fcec 	bl	8009d18 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0x26a>
      Error_Handler();
 8001346:	f002 fa1c 	bl	8003782 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x294>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel7;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0x304>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800137c:	2227      	movs	r2, #39	; 0x27
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013b0:	f006 fe4e 	bl	8008050 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0x2de>
      Error_Handler();
 80013ba:	f002 f9e2 	bl	8003782 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	; 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50000600 	.word	0x50000600
 80013d8:	20000528 	.word	0x20000528
 80013dc:	40021000 	.word	0x40021000
 80013e0:	200004c8 	.word	0x200004c8
 80013e4:	40020080 	.word	0x40020080

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f01c f84f 	bl	801d498 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_DAC1_Init+0x80>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_DAC1_Init+0x84>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_DAC1_Init+0x80>)
 8001402:	f006 fa6a 	bl	80078da <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f002 f9b9 	bl	8003782 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001420:	2322      	movs	r3, #34	; 0x22
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_DAC1_Init+0x80>)
 800143c:	f006 fbd6 	bl	8007bec <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f002 f99c 	bl	8003782 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DAC1_Init+0x80>)
 8001452:	f006 fbcb 	bl	8007bec <HAL_DAC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800145c:	f002 f991 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000052c 	.word	0x2000052c
 800146c:	50000800 	.word	0x50000800

08001470 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f01c f80b 	bl	801d498 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DAC2_Init+0x6c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_DAC2_Init+0x70>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_DAC2_Init+0x6c>)
 800148a:	f006 fa26 	bl	80078da <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001494:	f002 f975 	bl	8003782 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC2_Init+0x6c>)
 80014c4:	f006 fb92 	bl	8007bec <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80014ce:	f002 f958 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000540 	.word	0x20000540
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DAC_MspInit+0x178>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d17b      	bne.n	80015fe <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	; 0x30
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f007 f8b2 	bl	80086b4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_DAC_MspInit+0x184>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001558:	2206      	movs	r2, #6
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800155e:	2210      	movs	r2, #16
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800158c:	f006 fd60 	bl	8008050 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001596:	f002 f8f4 	bl	8003782 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_DAC_MspInit+0x180>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015e2:	f006 fd35 	bl	8008050 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80015ec:	f002 f8c9 	bl	8003782 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015fc:	e029      	b.n	8001652 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_DAC_MspInit+0x190>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f007 f831 	bl	80086b4 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000800 	.word	0x50000800
 8001660:	40021000 	.word	0x40021000
 8001664:	20000554 	.word	0x20000554
 8001668:	40020030 	.word	0x40020030
 800166c:	200005b4 	.word	0x200005b4
 8001670:	40020044 	.word	0x40020044
 8001674:	50000c00 	.word	0x50000c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_DMA_Init+0xb0>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_DMA_Init+0xb0>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_DMA_Init+0xb0>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_DMA_Init+0xb0>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_DMA_Init+0xb0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_DMA_Init+0xb0>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f006 f8dd 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f006 f8f4 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200c      	movs	r0, #12
 80016c4:	f006 f8d5 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f006 f8ec 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f006 f8cd 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f006 f8e4 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f006 f8c5 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f006 f8dc 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200f      	movs	r0, #15
 80016f4:	f006 f8bd 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f006 f8d4 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2010      	movs	r0, #16
 8001704:	f006 f8b5 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f006 f8cc 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2011      	movs	r0, #17
 8001714:	f006 f8ad 	bl	8007872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f006 f8c4 	bl	80078a6 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f01b fead 	bl	801d498 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001740:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001744:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_FMC_Init+0xd0>)
 800174a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_FMC_Init+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_FMC_Init+0xcc>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001760:	2210      	movs	r2, #16
 8001762:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_FMC_Init+0xcc>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_FMC_Init+0xcc>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001792:	2200      	movs	r2, #0
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_FMC_Init+0xcc>)
 800179e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80017b8:	230f      	movs	r3, #15
 80017ba:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017bc:	230f      	movs	r3, #15
 80017be:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 15;
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017cc:	2310      	movs	r3, #16
 80017ce:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017d0:	2311      	movs	r3, #17
 80017d2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017e0:	f009 f90a 	bl	800a9f8 <HAL_SRAM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_FMC_Init+0xc2>
  {
    Error_Handler( );
 80017ea:	f001 ffca 	bl	8003782 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000614 	.word	0x20000614
 80017fc:	a0000104 	.word	0xa0000104

08001800 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d13f      	bne.n	800189c <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6513      	str	r3, [r2, #80]	; 0x50
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184c:	230c      	movs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <HAL_FMC_MspInit+0xac>)
 8001856:	f006 ff2d 	bl	80086b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800185a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800185e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186c:	230c      	movs	r3, #12
 800186e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_FMC_MspInit+0xb0>)
 8001876:	f006 ff1d 	bl	80086b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800187a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800187e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_FMC_MspInit+0xb4>)
 8001896:	f006 ff0d 	bl	80086b4 <HAL_GPIO_Init>
 800189a:	e000      	b.n	800189e <HAL_FMC_MspInit+0x9e>
    return;
 800189c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000066c 	.word	0x2000066c
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48001400 	.word	0x48001400
 80018b0:	48001000 	.word	0x48001000
 80018b4:	48000c00 	.word	0x48000c00

080018b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018c0:	f7ff ff9e 	bl	8001800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f248 3104 	movw	r1, #33540	; 0x8304
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f007 f81c 	bl	80089b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001980:	f248 3304 	movw	r3, #33540	; 0x8304
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f006 fe8a 	bl	80086b4 <HAL_GPIO_Init>

}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019d4:	e000      	b.n	80019d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f9      	beq.n	80019d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffc9 	bl	80019ac <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
    return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <text_width_f>:
}


#include "nuklear.h"
float text_width_f( nk_handle handle, float h, const char* t, int len )
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a3e:	6079      	str	r1, [r7, #4]
 8001a40:	603a      	str	r2, [r7, #0]
    return 8*len;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <lcd_config>:

void lcd_config( void );
void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color );

void lcd_config( void )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6c:	f006 ffa4 	bl	80089b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f006 ff9d 	bl	80089b8 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f003 fac8 	bl	8005014 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f006 ff93 	bl	80089b8 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001a92:	2064      	movs	r0, #100	; 0x64
 8001a94:	f003 fabe 	bl	8005014 <HAL_Delay>

	*addr_cmd = 0x01;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <lcd_config+0xa0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001aa0:	2064      	movs	r0, #100	; 0x64
 8001aa2:	f003 fab7 	bl	8005014 <HAL_Delay>
	*addr_cmd = 0x11;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <lcd_config+0xa0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2211      	movs	r2, #17
 8001aac:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f003 fab0 	bl	8005014 <HAL_Delay>
	*addr_cmd = 0x3A;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <lcd_config+0xa0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	223a      	movs	r2, #58	; 0x3a
 8001aba:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <lcd_config+0xa4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2206      	movs	r2, #6
 8001ac2:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x36;
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <lcd_config+0xa0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2236      	movs	r2, #54	; 0x36
 8001aca:	801a      	strh	r2, [r3, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <lcd_config+0xa4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	22e0      	movs	r2, #224	; 0xe0
 8001ad2:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <lcd_config+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2229      	movs	r2, #41	; 0x29
 8001ada:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001adc:	200a      	movs	r0, #10
 8001ade:	f003 fa99 	bl	8005014 <HAL_Delay>

	lcd_rect( 0, 0, 480, 320, 0x0000 );
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001aea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f867 	bl	8001bc4 <lcd_rect>
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000004 	.word	0x20000004

08001b04 <nk_colot_to_rgb666>:

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	uint32_t rgb666 = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

	color.r = (color.r*color.a)/256.0;
 8001b10:	793b      	ldrb	r3, [r7, #4]
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd2b 	bl	8000574 <__aeabi_i2d>
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <nk_colot_to_rgb666+0xbc>)
 8001b24:	f7fe feba 	bl	800089c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f862 	bl	8000bf8 <__aeabi_d2uiz>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	713b      	strb	r3, [r7, #4]
	color.g = (color.g*color.a)/256.0;
 8001b3a:	797b      	ldrb	r3, [r7, #5]
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd16 	bl	8000574 <__aeabi_i2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <nk_colot_to_rgb666+0xbc>)
 8001b4e:	f7fe fea5 	bl	800089c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f84d 	bl	8000bf8 <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	717b      	strb	r3, [r7, #5]
	color.b = (color.b*color.a)/256.0;
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fd01 	bl	8000574 <__aeabi_i2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <nk_colot_to_rgb666+0xbc>)
 8001b78:	f7fe fe90 	bl	800089c <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff f838 	bl	8000bf8 <__aeabi_d2uiz>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	71bb      	strb	r3, [r7, #6]

	color.r >>= 2;
 8001b8e:	793b      	ldrb	r3, [r7, #4]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	713b      	strb	r3, [r7, #4]
	color.g >>= 2;
 8001b96:	797b      	ldrb	r3, [r7, #5]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	717b      	strb	r3, [r7, #5]
	color.b >>= 2;
 8001b9e:	79bb      	ldrb	r3, [r7, #6]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	71bb      	strb	r3, [r7, #6]
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001ba6:	793b      	ldrb	r3, [r7, #4]
 8001ba8:	031a      	lsls	r2, r3, #12
 8001baa:	797b      	ldrb	r3, [r7, #5]
 8001bac:	019b      	lsls	r3, r3, #6
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	79ba      	ldrb	r2, [r7, #6]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
	return rgb666;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40700000 	.word	0x40700000

08001bc4 <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 8001bc4:	b490      	push	{r4, r7}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4604      	mov	r4, r0
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	80fb      	strh	r3, [r7, #6]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80bb      	strh	r3, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]
 8001bde:	4613      	mov	r3, r2
 8001be0:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y0 = y;
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t x1 = x + w - 1;
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y1 = y + h - 1;
 8001bf8:	88ba      	ldrh	r2, [r7, #4]
 8001bfa:	883b      	ldrh	r3, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	843b      	strh	r3, [r7, #32]

	if( x0 < 0 )
 8001c06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da02      	bge.n	8001c14 <lcd_rect+0x50>
	{
		x0 = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c12:	e007      	b.n	8001c24 <lcd_rect+0x60>
	}
	else if( x0 > 480 - 1 )
 8001c14:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c18:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c1c:	db02      	blt.n	8001c24 <lcd_rect+0x60>
	{
		x0 = 480 - 1;
 8001c1e:	f240 13df 	movw	r3, #479	; 0x1df
 8001c22:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	if( x1 < 0 )
 8001c24:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da02      	bge.n	8001c32 <lcd_rect+0x6e>
	{
		x1 = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c30:	e007      	b.n	8001c42 <lcd_rect+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001c32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c36:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c3a:	db02      	blt.n	8001c42 <lcd_rect+0x7e>
	{
		x1 = 480 - 1;
 8001c3c:	f240 13df 	movw	r3, #479	; 0x1df
 8001c40:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 < 0 )
 8001c42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da02      	bge.n	8001c50 <lcd_rect+0x8c>
	{
		y0 = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c4e:	e007      	b.n	8001c60 <lcd_rect+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001c50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c58:	db02      	blt.n	8001c60 <lcd_rect+0x9c>
	{
		y0 = 320 - 1;
 8001c5a:	f240 133f 	movw	r3, #319	; 0x13f
 8001c5e:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( y1 < 0 )
 8001c60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da02      	bge.n	8001c6e <lcd_rect+0xaa>
	{
		y1 = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	843b      	strh	r3, [r7, #32]
 8001c6c:	e007      	b.n	8001c7e <lcd_rect+0xba>
	}
	else if( y1 > 320 - 1 )
 8001c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c76:	db02      	blt.n	8001c7e <lcd_rect+0xba>
	{
		y1 = 320 - 1;
 8001c78:	f240 133f 	movw	r3, #319	; 0x13f
 8001c7c:	843b      	strh	r3, [r7, #32]
	}

	if( x0 > x1 )
 8001c7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001c82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dd06      	ble.n	8001c98 <lcd_rect+0xd4>
	{
		int tmp = x0;
 8001c8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c8e:	61bb      	str	r3, [r7, #24]
		x0 = x1;
 8001c90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c92:	84fb      	strh	r3, [r7, #38]	; 0x26
		x1 = tmp;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 > y1 )
 8001c98:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001c9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dd06      	ble.n	8001cb2 <lcd_rect+0xee>
	{
		int tmp = y0;
 8001ca4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001ca8:	617b      	str	r3, [r7, #20]
		y0 = y1;
 8001caa:	8c3b      	ldrh	r3, [r7, #32]
 8001cac:	84bb      	strh	r3, [r7, #36]	; 0x24
		y1 = tmp;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	843b      	strh	r3, [r7, #32]
	}

	w = x1 - x0 + 1;
 8001cb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001cb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001cc0:	8c3a      	ldrh	r2, [r7, #32]
 8001cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
	uint32_t n = w*h;
 8001cd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cd6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	613b      	str	r3, [r7, #16]

	uint16_t color_l = (color>>0)&0x1FF;
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce8:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cec:	0a5b      	lsrs	r3, r3, #9
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf4:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <lcd_rect+0x1dc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	222a      	movs	r2, #42	; 0x2a
 8001cfc:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001cfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <lcd_rect+0x1e0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0a12      	lsrs	r2, r2, #8
 8001d06:	b292      	uxth	r2, r2
 8001d08:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001d0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <lcd_rect+0x1e0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	b292      	uxth	r2, r2
 8001d14:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001d16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <lcd_rect+0x1e0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0a12      	lsrs	r2, r2, #8
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001d22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <lcd_rect+0x1e0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <lcd_rect+0x1dc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	222b      	movs	r2, #43	; 0x2b
 8001d34:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <lcd_rect+0x1e0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0a12      	lsrs	r2, r2, #8
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <lcd_rect+0x1e0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001d4e:	8c3a      	ldrh	r2, [r7, #32]
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <lcd_rect+0x1e0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0a12      	lsrs	r2, r2, #8
 8001d56:	b292      	uxth	r2, r2
 8001d58:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001d5a:	8c3a      	ldrh	r2, [r7, #32]
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <lcd_rect+0x1e0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	b292      	uxth	r2, r2
 8001d64:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <lcd_rect+0x1dc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	222c      	movs	r2, #44	; 0x2c
 8001d6c:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e00a      	b.n	8001d8a <lcd_rect+0x1c6>
	{
		*addr_data = color_l;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <lcd_rect+0x1e0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	89fa      	ldrh	r2, [r7, #14]
 8001d7a:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <lcd_rect+0x1e0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	89ba      	ldrh	r2, [r7, #12]
 8001d82:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3f0      	bcc.n	8001d74 <lcd_rect+0x1b0>
	}
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc90      	pop	{r4, r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	603a      	str	r2, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	460b      	mov	r3, r1
 8001db6:	80bb      	strh	r3, [r7, #4]
	int16_t x0 = x;
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	82fb      	strh	r3, [r7, #22]
	int16_t y0 = y;
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	82bb      	strh	r3, [r7, #20]
	int16_t x1 = x + 1;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	827b      	strh	r3, [r7, #18]
	int16_t y1 = y + 1;
 8001dc8:	88bb      	ldrh	r3, [r7, #4]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	823b      	strh	r3, [r7, #16]
	uint16_t color_l = (color>>0)&0x1FF;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd8:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	0a5b      	lsrs	r3, r3, #9
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de4:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <lcd_set_pixel+0xd4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	222a      	movs	r2, #42	; 0x2a
 8001dec:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001dee:	8afa      	ldrh	r2, [r7, #22]
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0a12      	lsrs	r2, r2, #8
 8001df6:	b292      	uxth	r2, r2
 8001df8:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001dfa:	8afa      	ldrh	r2, [r7, #22]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	b292      	uxth	r2, r2
 8001e04:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001e06:	8a7a      	ldrh	r2, [r7, #18]
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0a12      	lsrs	r2, r2, #8
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001e12:	8a7a      	ldrh	r2, [r7, #18]
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <lcd_set_pixel+0xd4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	222b      	movs	r2, #43	; 0x2b
 8001e24:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001e26:	8aba      	ldrh	r2, [r7, #20]
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0a12      	lsrs	r2, r2, #8
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001e32:	8aba      	ldrh	r2, [r7, #20]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001e3e:	8a3a      	ldrh	r2, [r7, #16]
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0a12      	lsrs	r2, r2, #8
 8001e46:	b292      	uxth	r2, r2
 8001e48:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001e4a:	8a3a      	ldrh	r2, [r7, #16]
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	b292      	uxth	r2, r2
 8001e54:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <lcd_set_pixel+0xd4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	222c      	movs	r2, #44	; 0x2c
 8001e5c:	801a      	strh	r2, [r3, #0]
	//for( int i = 0 ; i < n ; i++ )
	{
		*addr_data = color_l;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	89fa      	ldrh	r2, [r7, #14]
 8001e64:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <lcd_set_pixel+0xd8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	89ba      	ldrh	r2, [r7, #12]
 8001e6c:	801a      	strh	r2, [r3, #0]
	}
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 8001e84:	b490      	push	{r4, r7}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4623      	mov	r3, r4
 8001e94:	80fb      	strh	r3, [r7, #6]
 8001e96:	4603      	mov	r3, r0
 8001e98:	80bb      	strh	r3, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 8001ea6:	88bb      	ldrh	r3, [r7, #4]
 8001ea8:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + w - 1;
 8001eaa:	88fa      	ldrh	r2, [r7, #6]
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + h - 1;
 8001eb8:	88ba      	ldrh	r2, [r7, #4]
 8001eba:	883b      	ldrh	r3, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	833b      	strh	r3, [r7, #24]

	if( x0 < 0 )
 8001ec6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da02      	bge.n	8001ed4 <lcd_bmp+0x50>
	{
		x0 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	83fb      	strh	r3, [r7, #30]
 8001ed2:	e007      	b.n	8001ee4 <lcd_bmp+0x60>
	}
	else if( x0 > 480 - 1 )
 8001ed4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ed8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001edc:	db02      	blt.n	8001ee4 <lcd_bmp+0x60>
	{
		x0 = 480 - 1;
 8001ede:	f240 13df 	movw	r3, #479	; 0x1df
 8001ee2:	83fb      	strh	r3, [r7, #30]
	}

	if( x1 < 0 )
 8001ee4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da02      	bge.n	8001ef2 <lcd_bmp+0x6e>
	{
		x1 = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	837b      	strh	r3, [r7, #26]
 8001ef0:	e007      	b.n	8001f02 <lcd_bmp+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001ef2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ef6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001efa:	db02      	blt.n	8001f02 <lcd_bmp+0x7e>
	{
		x1 = 480 - 1;
 8001efc:	f240 13df 	movw	r3, #479	; 0x1df
 8001f00:	837b      	strh	r3, [r7, #26]
	}

	if( y0 < 0 )
 8001f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da02      	bge.n	8001f10 <lcd_bmp+0x8c>
	{
		y0 = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	83bb      	strh	r3, [r7, #28]
 8001f0e:	e007      	b.n	8001f20 <lcd_bmp+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001f10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f14:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f18:	db02      	blt.n	8001f20 <lcd_bmp+0x9c>
	{
		y0 = 320 - 1;
 8001f1a:	f240 133f 	movw	r3, #319	; 0x13f
 8001f1e:	83bb      	strh	r3, [r7, #28]
	}

	if( y1 < 0 )
 8001f20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	da02      	bge.n	8001f2e <lcd_bmp+0xaa>
	{
		y1 = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	833b      	strh	r3, [r7, #24]
 8001f2c:	e007      	b.n	8001f3e <lcd_bmp+0xba>
	}
	else if( y1 > 320 - 1 )
 8001f2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f36:	db02      	blt.n	8001f3e <lcd_bmp+0xba>
	{
		y1 = 320 - 1;
 8001f38:	f240 133f 	movw	r3, #319	; 0x13f
 8001f3c:	833b      	strh	r3, [r7, #24]
	}

	if( x0 > x1 )
 8001f3e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001f42:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dd06      	ble.n	8001f58 <lcd_bmp+0xd4>
	{
		int tmp = x0;
 8001f4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f4e:	613b      	str	r3, [r7, #16]
		x0 = x1;
 8001f50:	8b7b      	ldrh	r3, [r7, #26]
 8001f52:	83fb      	strh	r3, [r7, #30]
		x1 = tmp;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	837b      	strh	r3, [r7, #26]
	}

	if( y0 > y1 )
 8001f58:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001f5c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dd06      	ble.n	8001f72 <lcd_bmp+0xee>
	{
		int tmp = y0;
 8001f64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f68:	60fb      	str	r3, [r7, #12]
		y0 = y1;
 8001f6a:	8b3b      	ldrh	r3, [r7, #24]
 8001f6c:	83bb      	strh	r3, [r7, #28]
		y1 = tmp;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	833b      	strh	r3, [r7, #24]
	}

	w = x1 - x0 + 1;
 8001f72:	8b7a      	ldrh	r2, [r7, #26]
 8001f74:	8bfb      	ldrh	r3, [r7, #30]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001f80:	8b3a      	ldrh	r2, [r7, #24]
 8001f82:	8bbb      	ldrh	r3, [r7, #28]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
	uint32_t n = w*h;
 8001f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f96:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	60bb      	str	r3, [r7, #8]

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <lcd_bmp+0x1dc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	222a      	movs	r2, #42	; 0x2a
 8001fa6:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001fa8:	8bfa      	ldrh	r2, [r7, #30]
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <lcd_bmp+0x1e0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0a12      	lsrs	r2, r2, #8
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001fb4:	8bfa      	ldrh	r2, [r7, #30]
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <lcd_bmp+0x1e0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001fc0:	8b7a      	ldrh	r2, [r7, #26]
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <lcd_bmp+0x1e0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0a12      	lsrs	r2, r2, #8
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001fcc:	8b7a      	ldrh	r2, [r7, #26]
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <lcd_bmp+0x1e0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <lcd_bmp+0x1dc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	222b      	movs	r2, #43	; 0x2b
 8001fde:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001fe0:	8bba      	ldrh	r2, [r7, #28]
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <lcd_bmp+0x1e0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0a12      	lsrs	r2, r2, #8
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001fec:	8bba      	ldrh	r2, [r7, #28]
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <lcd_bmp+0x1e0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001ff8:	8b3a      	ldrh	r2, [r7, #24]
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <lcd_bmp+0x1e0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0a12      	lsrs	r2, r2, #8
 8002000:	b292      	uxth	r2, r2
 8002002:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8002004:	8b3a      	ldrh	r2, [r7, #24]
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <lcd_bmp+0x1e0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	b292      	uxth	r2, r2
 800200e:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <lcd_bmp+0x1dc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	222c      	movs	r2, #44	; 0x2c
 8002016:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e015      	b.n	800204a <lcd_bmp+0x1c6>
	{
		*addr_data = buf[2*i+1];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	3301      	adds	r3, #1
 8002024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002026:	4413      	add	r3, r2
 8002028:	781a      	ldrb	r2, [r3, #0]
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <lcd_bmp+0x1e0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b292      	uxth	r2, r2
 8002030:	801a      	strh	r2, [r3, #0]
		*addr_data = buf[2*i+0];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002038:	4413      	add	r3, r2
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <lcd_bmp+0x1e0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b292      	uxth	r2, r2
 8002042:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	d3e5      	bcc.n	800201e <lcd_bmp+0x19a>
	}
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bc90      	pop	{r4, r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <oscilloscope_process>:
    nk_bool draw_bg;
    int draw_signals;
};
int visible = 0;
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b0d6      	sub	sp, #344	; 0x158
 800206c:	af04      	add	r7, sp, #16
 800206e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002072:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002076:	6018      	str	r0, [r3, #0]
 8002078:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800207c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002080:	6019      	str	r1, [r3, #0]
	visible = 0;
 8002082:	4b6d      	ldr	r3, [pc, #436]	; (8002238 <oscilloscope_process+0x1d0>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 480, 320), NK_WINDOW_MINIMIZABLE ) )
 8002088:	eddf 1a6c 	vldr	s3, [pc, #432]	; 800223c <oscilloscope_process+0x1d4>
 800208c:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002240 <oscilloscope_process+0x1d8>
 8002090:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8002244 <oscilloscope_process+0x1dc>
 8002094:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002244 <oscilloscope_process+0x1dc>
 8002098:	f010 fac6 	bl	8012628 <nk_rect>
 800209c:	eeb0 6a40 	vmov.f32	s12, s0
 80020a0:	eef0 6a60 	vmov.f32	s13, s1
 80020a4:	eeb0 7a41 	vmov.f32	s14, s2
 80020a8:	eef0 7a61 	vmov.f32	s15, s3
 80020ac:	ed87 6a34 	vstr	s12, [r7, #208]	; 0xd0
 80020b0:	edc7 6a35 	vstr	s13, [r7, #212]	; 0xd4
 80020b4:	ed87 7a36 	vstr	s14, [r7, #216]	; 0xd8
 80020b8:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
 80020bc:	ed97 6a34 	vldr	s12, [r7, #208]	; 0xd0
 80020c0:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 80020c4:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 80020c8:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80020cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020d4:	2210      	movs	r2, #16
 80020d6:	eeb0 0a46 	vmov.f32	s0, s12
 80020da:	eef0 0a66 	vmov.f32	s1, s13
 80020de:	eeb0 1a47 	vmov.f32	s2, s14
 80020e2:	eef0 1a67 	vmov.f32	s3, s15
 80020e6:	4958      	ldr	r1, [pc, #352]	; (8002248 <oscilloscope_process+0x1e0>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	f019 fd68 	bl	801bbbe <nk_begin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 87be 	beq.w	8003072 <oscilloscope_process+0x100a>
	{
		visible = 1;
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <oscilloscope_process+0x1d0>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
        osc->draw_bg = nk_true;
 80020fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002100:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 800210c:	484f      	ldr	r0, [pc, #316]	; (800224c <oscilloscope_process+0x1e4>)
 800210e:	f018 ff13 	bl	801af38 <nk_strlen>
 8002112:	4603      	mov	r3, r0
 8002114:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002118:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 800211c:	f240 22f2 	movw	r2, #754	; 0x2f2
 8002120:	9202      	str	r2, [sp, #8]
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <oscilloscope_process+0x1e4>)
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	4a49      	ldr	r2, [pc, #292]	; (8002250 <oscilloscope_process+0x1e8>)
 800212c:	2101      	movs	r1, #1
 800212e:	6800      	ldr	r0, [r0, #0]
 8002130:	f018 fc54 	bl	801a9dc <nk_tree_push_hashed>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80ad 	beq.w	8002296 <oscilloscope_process+0x22e>
            osc->draw_bg = nk_false;
 800213c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002140:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <oscilloscope_process+0x1ec>)
 800214e:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002158:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800215c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002160:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002164:	2204      	movs	r2, #4
 8002166:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800216a:	2101      	movs	r1, #1
 800216c:	6800      	ldr	r0, [r0, #0]
 800216e:	f00f fd07 	bl	8011b80 <nk_layout_row>
            if (osc->acquire_run) {
 8002172:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002176:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d012      	beq.n	80021a8 <oscilloscope_process+0x140>
                if (nk_button_label(ctx, "Stop")) {
 8002182:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002186:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800218a:	4933      	ldr	r1, [pc, #204]	; (8002258 <oscilloscope_process+0x1f0>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	f00b fdcd 	bl	800dd2c <nk_button_label>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d019      	beq.n	80021cc <oscilloscope_process+0x164>
                    osc->acquire_run = nk_false;
 8002198:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800219c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e011      	b.n	80021cc <oscilloscope_process+0x164>
                }
            } else {
                if (nk_button_label(ctx, "Run")) {
 80021a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80021ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021b0:	492a      	ldr	r1, [pc, #168]	; (800225c <oscilloscope_process+0x1f4>)
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	f00b fdba 	bl	800dd2c <nk_button_label>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <oscilloscope_process+0x164>
                    osc->acquire_run = nk_true;
 80021be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80021c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
                }
            }

            if (nk_button_label(ctx, "Single")) {
 80021cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80021d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021d4:	4922      	ldr	r1, [pc, #136]	; (8002260 <oscilloscope_process+0x1f8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	f00b fda8 	bl	800dd2c <nk_button_label>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <oscilloscope_process+0x188>
                osc->acquire_single = nk_true;
 80021e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80021e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	605a      	str	r2, [r3, #4]
            }

            if (nk_button_label(ctx, "Draw")) {
 80021f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80021f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021f8:	491a      	ldr	r1, [pc, #104]	; (8002264 <oscilloscope_process+0x1fc>)
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	f00b fd96 	bl	800dd2c <nk_button_label>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d038      	beq.n	8002278 <oscilloscope_process+0x210>
                if (osc->draw_signals + 1 < 3) {
 8002206:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800220a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002214:	2b01      	cmp	r3, #1
 8002216:	dc27      	bgt.n	8002268 <oscilloscope_process+0x200>
                    osc->draw_signals += 1;
 8002218:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800221c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800222c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002236:	e01f      	b.n	8002278 <oscilloscope_process+0x210>
 8002238:	20000670 	.word	0x20000670
 800223c:	43a00000 	.word	0x43a00000
 8002240:	43f00000 	.word	0x43f00000
 8002244:	00000000 	.word	0x00000000
 8002248:	0801fc80 	.word	0x0801fc80
 800224c:	0801fd08 	.word	0x0801fd08
 8002250:	0801fca8 	.word	0x0801fca8
 8002254:	0801fe30 	.word	0x0801fe30
 8002258:	0801fcb4 	.word	0x0801fcb4
 800225c:	0801fcb0 	.word	0x0801fcb0
 8002260:	0801fcbc 	.word	0x0801fcbc
 8002264:	0801fcc4 	.word	0x0801fcc4
                } else {
                    osc->draw_signals = 0;
 8002268:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800226c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2200      	movs	r2, #0
 8002274:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                }
            }

            nk_button_label(ctx, "...");
 8002278:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800227c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002280:	49db      	ldr	r1, [pc, #876]	; (80025f0 <oscilloscope_process+0x588>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	f00b fd52 	bl	800dd2c <nk_button_label>
            nk_tree_pop(ctx);
 8002288:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800228c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f018 fbc0 	bl	801aa16 <nk_tree_pop>
        }

        {
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 8002296:	48d7      	ldr	r0, [pc, #860]	; (80025f4 <oscilloscope_process+0x58c>)
 8002298:	f018 fe4e 	bl	801af38 <nk_strlen>
 800229c:	4603      	mov	r3, r0
 800229e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80022a2:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 80022a6:	f44f 7244 	mov.w	r2, #784	; 0x310
 80022aa:	9202      	str	r2, [sp, #8]
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	4bd1      	ldr	r3, [pc, #836]	; (80025f4 <oscilloscope_process+0x58c>)
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2300      	movs	r3, #0
 80022b4:	4ad0      	ldr	r2, [pc, #832]	; (80025f8 <oscilloscope_process+0x590>)
 80022b6:	2101      	movs	r1, #1
 80022b8:	6800      	ldr	r0, [r0, #0]
 80022ba:	f018 fb8f 	bl	801a9dc <nk_tree_push_hashed>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d05a      	beq.n	800237a <oscilloscope_process+0x312>
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 80022c4:	4acd      	ldr	r2, [pc, #820]	; (80025fc <oscilloscope_process+0x594>)
 80022c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80022d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80022da:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 80022de:	2202      	movs	r2, #2
 80022e0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80022e4:	2101      	movs	r1, #1
 80022e6:	6800      	ldr	r0, [r0, #0]
 80022e8:	f00f fc4a 	bl	8011b80 <nk_layout_row>
                osc->horizontal_offset = nk_slider_float(ctx, -10.0f, &osc->horizontal_offset, 10.0f, 1.0f);
 80022ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80022f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80022fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002302:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002306:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800230a:	4611      	mov	r1, r2
 800230c:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f015 f93d 	bl	8017590 <nk_slider_float>
 8002316:	ee07 0a90 	vmov	s15, r0
 800231a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002322:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	edc3 7a02 	vstr	s15, [r3, #8]
                osc->horizontal_scale = nk_slider_float(ctx, 1.0f, &osc->horizontal_scale, 1000.0f, 1.0f);
 800232c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002330:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f103 020c 	add.w	r2, r3, #12
 800233a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800233e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002342:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002346:	eddf 0aae 	vldr	s1, [pc, #696]	; 8002600 <oscilloscope_process+0x598>
 800234a:	4611      	mov	r1, r2
 800234c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	f015 f91d 	bl	8017590 <nk_slider_float>
 8002356:	ee07 0a90 	vmov	s15, r0
 800235a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002362:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	edc3 7a03 	vstr	s15, [r3, #12]
                nk_tree_pop(ctx);
 800236c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002370:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f018 fb4e 	bl	801aa16 <nk_tree_pop>
            }

        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 800237a:	48a2      	ldr	r0, [pc, #648]	; (8002604 <oscilloscope_process+0x59c>)
 800237c:	f018 fddc 	bl	801af38 <nk_strlen>
 8002380:	4603      	mov	r3, r0
 8002382:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002386:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 800238a:	f240 3217 	movw	r2, #791	; 0x317
 800238e:	9202      	str	r2, [sp, #8]
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	4b9c      	ldr	r3, [pc, #624]	; (8002604 <oscilloscope_process+0x59c>)
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2300      	movs	r3, #0
 8002398:	4a9b      	ldr	r2, [pc, #620]	; (8002608 <oscilloscope_process+0x5a0>)
 800239a:	2101      	movs	r1, #1
 800239c:	6800      	ldr	r0, [r0, #0]
 800239e:	f018 fb1d 	bl	801a9dc <nk_tree_push_hashed>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8175 	beq.w	8002694 <oscilloscope_process+0x62c>
                osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 20, nk_vec2(60, 200));
 80023aa:	4b98      	ldr	r3, [pc, #608]	; (800260c <oscilloscope_process+0x5a4>)
 80023ac:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80023b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80023ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80023c2:	eddf 0a93 	vldr	s1, [pc, #588]	; 8002610 <oscilloscope_process+0x5a8>
 80023c6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8002614 <oscilloscope_process+0x5ac>
 80023ca:	f010 f9df 	bl	801278c <nk_vec2>
 80023ce:	eeb0 7a40 	vmov.f32	s14, s0
 80023d2:	eef0 7a60 	vmov.f32	s15, s1
 80023d6:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80023da:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80023de:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80023e2:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 80023e6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80023ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80023ee:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80023f2:	2314      	movs	r3, #20
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	eeb0 0a47 	vmov.f32	s0, s14
 80023fa:	eef0 0a67 	vmov.f32	s1, s15
 80023fe:	4623      	mov	r3, r4
 8002400:	2204      	movs	r2, #4
 8002402:	6800      	ldr	r0, [r0, #0]
 8002404:	f00c f980 	bl	800e708 <nk_combo>
 8002408:	4602      	mov	r2, r0
 800240a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800240e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8002416:	4a79      	ldr	r2, [pc, #484]	; (80025fc <oscilloscope_process+0x594>)
 8002418:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800241c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002420:	e883 0003 	stmia.w	r3, {r0, r1}
 8002424:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002428:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800242c:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002430:	2202      	movs	r2, #2
 8002432:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002436:	2101      	movs	r1, #1
 8002438:	6800      	ldr	r0, [r0, #0]
 800243a:	f00f fba1 	bl	8011b80 <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 20, nk_vec2(60, 200));
 800243e:	4a76      	ldr	r2, [pc, #472]	; (8002618 <oscilloscope_process+0x5b0>)
 8002440:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002448:	e883 0003 	stmia.w	r3, {r0, r1}
 800244c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002450:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800245c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3328      	adds	r3, #40	; 0x28
 800246e:	681d      	ldr	r5, [r3, #0]
 8002470:	eddf 0a67 	vldr	s1, [pc, #412]	; 8002610 <oscilloscope_process+0x5a8>
 8002474:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002614 <oscilloscope_process+0x5ac>
 8002478:	f010 f988 	bl	801278c <nk_vec2>
 800247c:	eeb0 7a40 	vmov.f32	s14, s0
 8002480:	eef0 7a60 	vmov.f32	s15, s1
 8002484:	ed87 7a3a 	vstr	s14, [r7, #232]	; 0xe8
 8002488:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
 800248c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002490:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002498:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 800249c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80024a0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80024a8:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80024ac:	2314      	movs	r3, #20
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	eeb0 0a47 	vmov.f32	s0, s14
 80024b4:	eef0 0a67 	vmov.f32	s1, s15
 80024b8:	462b      	mov	r3, r5
 80024ba:	2202      	movs	r2, #2
 80024bc:	6800      	ldr	r0, [r0, #0]
 80024be:	f00c f923 	bl	800e708 <nk_combo>
 80024c2:	4601      	mov	r1, r0
 80024c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80024c8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4623      	mov	r3, r4
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4423      	add	r3, r4
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3328      	adds	r3, #40	; 0x28
 80024da:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 20, nk_vec2(60, 200));
 80024dc:	4a4f      	ldr	r2, [pc, #316]	; (800261c <oscilloscope_process+0x5b4>)
 80024de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80024ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80024f8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	332c      	adds	r3, #44	; 0x2c
 800250a:	681d      	ldr	r5, [r3, #0]
 800250c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8002610 <oscilloscope_process+0x5a8>
 8002510:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002614 <oscilloscope_process+0x5ac>
 8002514:	f010 f93a 	bl	801278c <nk_vec2>
 8002518:	eeb0 7a40 	vmov.f32	s14, s0
 800251c:	eef0 7a60 	vmov.f32	s15, s1
 8002520:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002524:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002528:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800252c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002534:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 8002538:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 800253c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002540:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002544:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8002548:	2314      	movs	r3, #20
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	eeb0 0a47 	vmov.f32	s0, s14
 8002550:	eef0 0a67 	vmov.f32	s1, s15
 8002554:	462b      	mov	r3, r5
 8002556:	2203      	movs	r2, #3
 8002558:	6800      	ldr	r0, [r0, #0]
 800255a:	f00c f8d5 	bl	800e708 <nk_combo>
 800255e:	4601      	mov	r1, r0
 8002560:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002564:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4623      	mov	r3, r4
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4423      	add	r3, r4
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	332c      	adds	r3, #44	; 0x2c
 8002576:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].offset = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].offset, 10.0f, 1.0f);
 8002578:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800257c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002584:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002588:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	3330      	adds	r3, #48	; 0x30
 8002596:	680a      	ldr	r2, [r1, #0]
 8002598:	441a      	add	r2, r3
 800259a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800259e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025a2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80025a6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80025aa:	4611      	mov	r1, r2
 80025ac:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	f014 ffed 	bl	8017590 <nk_slider_float>
 80025b6:	ee07 0a90 	vmov	s15, r0
 80025ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3330      	adds	r3, #48	; 0x30
 80025e0:	edc3 7a00 	vstr	s15, [r3]
                osc->channels[osc->channel_selected].scale = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].scale, 10.0f, 1.0f);
 80025e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80025e8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025ec:	e018      	b.n	8002620 <oscilloscope_process+0x5b8>
 80025ee:	bf00      	nop
 80025f0:	0801fd20 	.word	0x0801fd20
 80025f4:	0801fd24 	.word	0x0801fd24
 80025f8:	0801fce4 	.word	0x0801fce4
 80025fc:	0801fe40 	.word	0x0801fe40
 8002600:	447a0000 	.word	0x447a0000
 8002604:	0801fd3c 	.word	0x0801fd3c
 8002608:	0801fd54 	.word	0x0801fd54
 800260c:	0801fe58 	.word	0x0801fe58
 8002610:	43480000 	.word	0x43480000
 8002614:	42700000 	.word	0x42700000
 8002618:	0801fe70 	.word	0x0801fe70
 800261c:	0801fe84 	.word	0x0801fe84
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002624:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002628:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	3330      	adds	r3, #48	; 0x30
 8002636:	680a      	ldr	r2, [r1, #0]
 8002638:	4413      	add	r3, r2
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002640:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002644:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002648:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800264c:	4611      	mov	r1, r2
 800264e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	f014 ff9c 	bl	8017590 <nk_slider_float>
 8002658:	ee07 0a90 	vmov	s15, r0
 800265c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002660:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002670:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3334      	adds	r3, #52	; 0x34
 8002682:	edc3 7a00 	vstr	s15, [r3]
                nk_tree_pop(ctx);
 8002686:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800268a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f018 f9c1 	bl	801aa16 <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 8002694:	48db      	ldr	r0, [pc, #876]	; (8002a04 <oscilloscope_process+0x99c>)
 8002696:	f018 fc4f 	bl	801af38 <nk_strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80026a0:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 80026a4:	f240 3221 	movw	r2, #801	; 0x321
 80026a8:	9202      	str	r2, [sp, #8]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	4bd5      	ldr	r3, [pc, #852]	; (8002a04 <oscilloscope_process+0x99c>)
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	4ad5      	ldr	r2, [pc, #852]	; (8002a08 <oscilloscope_process+0x9a0>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	6800      	ldr	r0, [r0, #0]
 80026b8:	f018 f990 	bl	801a9dc <nk_tree_push_hashed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80de 	beq.w	8002880 <oscilloscope_process+0x818>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 20, nk_vec2(60, 200));
 80026c4:	4bd1      	ldr	r3, [pc, #836]	; (8002a0c <oscilloscope_process+0x9a4>)
 80026c6:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80026ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80026d4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69dc      	ldr	r4, [r3, #28]
 80026dc:	eddf 0ad4 	vldr	s1, [pc, #848]	; 8002a30 <oscilloscope_process+0x9c8>
 80026e0:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8002a34 <oscilloscope_process+0x9cc>
 80026e4:	f010 f852 	bl	801278c <nk_vec2>
 80026e8:	eeb0 7a40 	vmov.f32	s14, s0
 80026ec:	eef0 7a60 	vmov.f32	s15, s1
 80026f0:	ed87 7a3e 	vstr	s14, [r7, #248]	; 0xf8
 80026f4:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
 80026f8:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 80026fc:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8002700:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002704:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002708:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800270c:	2314      	movs	r3, #20
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	eeb0 0a47 	vmov.f32	s0, s14
 8002714:	eef0 0a67 	vmov.f32	s1, s15
 8002718:	4623      	mov	r3, r4
 800271a:	2204      	movs	r2, #4
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	f00b fff3 	bl	800e708 <nk_combo>
 8002722:	4602      	mov	r2, r0
 8002724:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002728:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	61da      	str	r2, [r3, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8002730:	4ab7      	ldr	r2, [pc, #732]	; (8002a10 <oscilloscope_process+0x9a8>)
 8002732:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800273a:	e883 0003 	stmia.w	r3, {r0, r1}
 800273e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002742:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002746:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 800274a:	2202      	movs	r2, #2
 800274c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002750:	2101      	movs	r1, #1
 8002752:	6800      	ldr	r0, [r0, #0]
 8002754:	f00f fa14 	bl	8011b80 <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 20, nk_vec2(60, 200));
 8002758:	4aae      	ldr	r2, [pc, #696]	; (8002a14 <oscilloscope_process+0x9ac>)
 800275a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800275e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002762:	e883 0003 	stmia.w	r3, {r0, r1}
 8002766:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800276a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695c      	ldr	r4, [r3, #20]
 8002772:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8002a30 <oscilloscope_process+0x9c8>
 8002776:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8002a34 <oscilloscope_process+0x9cc>
 800277a:	f010 f807 	bl	801278c <nk_vec2>
 800277e:	eeb0 7a40 	vmov.f32	s14, s0
 8002782:	eef0 7a60 	vmov.f32	s15, s1
 8002786:	ed87 7a40 	vstr	s14, [r7, #256]	; 0x100
 800278a:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
 800278e:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8002792:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8002796:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800279a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800279e:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80027a2:	2314      	movs	r3, #20
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	eeb0 0a47 	vmov.f32	s0, s14
 80027aa:	eef0 0a67 	vmov.f32	s1, s15
 80027ae:	4623      	mov	r3, r4
 80027b0:	2202      	movs	r2, #2
 80027b2:	6800      	ldr	r0, [r0, #0]
 80027b4:	f00b ffa8 	bl	800e708 <nk_combo>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80027be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	615a      	str	r2, [r3, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 20, nk_vec2(60, 200));
 80027c6:	4a94      	ldr	r2, [pc, #592]	; (8002a18 <oscilloscope_process+0x9b0>)
 80027c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80027d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699c      	ldr	r4, [r3, #24]
 80027de:	eddf 0a94 	vldr	s1, [pc, #592]	; 8002a30 <oscilloscope_process+0x9c8>
 80027e2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002a34 <oscilloscope_process+0x9cc>
 80027e6:	f00f ffd1 	bl	801278c <nk_vec2>
 80027ea:	eeb0 7a40 	vmov.f32	s14, s0
 80027ee:	eef0 7a60 	vmov.f32	s15, s1
 80027f2:	ed87 7a42 	vstr	s14, [r7, #264]	; 0x108
 80027f6:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
 80027fa:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 80027fe:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8002802:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002806:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800280a:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800280e:	2314      	movs	r3, #20
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	eeb0 0a47 	vmov.f32	s0, s14
 8002816:	eef0 0a67 	vmov.f32	s1, s15
 800281a:	4623      	mov	r3, r4
 800281c:	2203      	movs	r2, #3
 800281e:	6800      	ldr	r0, [r0, #0]
 8002820:	f00b ff72 	bl	800e708 <nk_combo>
 8002824:	4602      	mov	r2, r0
 8002826:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800282a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	619a      	str	r2, [r3, #24]
                osc->trigger_offset = nk_slider_float(ctx, -10.0f, &osc->trigger_offset, 10.0f, 1.0f);
 8002832:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002836:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f103 0210 	add.w	r2, r3, #16
 8002840:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002844:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002848:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800284c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002850:	4611      	mov	r1, r2
 8002852:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	f014 fe9a 	bl	8017590 <nk_slider_float>
 800285c:	ee07 0a90 	vmov	s15, r0
 8002860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002864:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002868:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	edc3 7a04 	vstr	s15, [r3, #16]
                nk_tree_pop(ctx);
 8002872:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002876:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f018 f8cb 	bl	801aa16 <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 8002880:	4866      	ldr	r0, [pc, #408]	; (8002a1c <oscilloscope_process+0x9b4>)
 8002882:	f018 fb59 	bl	801af38 <nk_strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800288c:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002890:	f240 322a 	movw	r2, #810	; 0x32a
 8002894:	9202      	str	r2, [sp, #8]
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <oscilloscope_process+0x9b4>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <oscilloscope_process+0x9b8>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	f018 f89a 	bl	801a9dc <nk_tree_push_hashed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 81b9 	beq.w	8002c22 <oscilloscope_process+0xbba>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 20, nk_vec2(60, 200));
 80028b0:	4a5c      	ldr	r2, [pc, #368]	; (8002a24 <oscilloscope_process+0x9bc>)
 80028b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80028be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80028ca:	eddf 0a59 	vldr	s1, [pc, #356]	; 8002a30 <oscilloscope_process+0x9c8>
 80028ce:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8002a34 <oscilloscope_process+0x9cc>
 80028d2:	f00f ff5b 	bl	801278c <nk_vec2>
 80028d6:	eeb0 7a40 	vmov.f32	s14, s0
 80028da:	eef0 7a60 	vmov.f32	s15, s1
 80028de:	ed87 7a44 	vstr	s14, [r7, #272]	; 0x110
 80028e2:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
 80028e6:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 80028ea:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 80028ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80028f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80028f6:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80028fa:	2314      	movs	r3, #20
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002902:	eef0 0a67 	vmov.f32	s1, s15
 8002906:	4623      	mov	r3, r4
 8002908:	2202      	movs	r2, #2
 800290a:	6800      	ldr	r0, [r0, #0]
 800290c:	f00b fefc 	bl	800e708 <nk_combo>
 8002910:	4602      	mov	r2, r0
 8002912:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002916:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	679a      	str	r2, [r3, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 800291e:	4a3c      	ldr	r2, [pc, #240]	; (8002a10 <oscilloscope_process+0x9a8>)
 8002920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002928:	e883 0003 	stmia.w	r3, {r0, r1}
 800292c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002930:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002934:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002938:	2202      	movs	r2, #2
 800293a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800293e:	2101      	movs	r1, #1
 8002940:	6800      	ldr	r0, [r0, #0]
 8002942:	f00f f91d 	bl	8011b80 <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 20, nk_vec2(60, 200));
 8002946:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800294a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800294e:	4a36      	ldr	r2, [pc, #216]	; (8002a28 <oscilloscope_process+0x9c0>)
 8002950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002954:	e883 0003 	stmia.w	r3, {r0, r1}
 8002958:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800295c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002964:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002968:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	337c      	adds	r3, #124	; 0x7c
 800297a:	681d      	ldr	r5, [r3, #0]
 800297c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8002a30 <oscilloscope_process+0x9c8>
 8002980:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002a34 <oscilloscope_process+0x9cc>
 8002984:	f00f ff02 	bl	801278c <nk_vec2>
 8002988:	eeb0 7a40 	vmov.f32	s14, s0
 800298c:	eef0 7a60 	vmov.f32	s15, s1
 8002990:	ed87 7a46 	vstr	s14, [r7, #280]	; 0x118
 8002994:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
 8002998:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800299c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80029a4:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 80029a8:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80029ac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029b4:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 80029b8:	2314      	movs	r3, #20
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	eeb0 0a47 	vmov.f32	s0, s14
 80029c0:	eef0 0a67 	vmov.f32	s1, s15
 80029c4:	462b      	mov	r3, r5
 80029c6:	2202      	movs	r2, #2
 80029c8:	6800      	ldr	r0, [r0, #0]
 80029ca:	f00b fe9d 	bl	800e708 <nk_combo>
 80029ce:	4601      	mov	r1, r0
 80029d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029d4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4623      	mov	r3, r4
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4423      	add	r3, r4
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	337c      	adds	r3, #124	; 0x7c
 80029e6:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 20, nk_vec2(60, 200));
 80029e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80029ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <oscilloscope_process+0x9c4>)
 80029f2:	461c      	mov	r4, r3
 80029f4:	4615      	mov	r5, r2
 80029f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a02:	e019      	b.n	8002a38 <oscilloscope_process+0x9d0>
 8002a04:	0801fd60 	.word	0x0801fd60
 8002a08:	0801fd78 	.word	0x0801fd78
 8002a0c:	0801fe58 	.word	0x0801fe58
 8002a10:	0801fe40 	.word	0x0801fe40
 8002a14:	0801fea0 	.word	0x0801fea0
 8002a18:	0801fec0 	.word	0x0801fec0
 8002a1c:	0801fd80 	.word	0x0801fd80
 8002a20:	0801fd98 	.word	0x0801fd98
 8002a24:	0801fed4 	.word	0x0801fed4
 8002a28:	0801fe70 	.word	0x0801fe70
 8002a2c:	0801fefc 	.word	0x0801fefc
 8002a30:	43480000 	.word	0x43480000
 8002a34:	42700000 	.word	0x42700000
 8002a38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a3c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002a44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	3380      	adds	r3, #128	; 0x80
 8002a5a:	681d      	ldr	r5, [r3, #0]
 8002a5c:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8002a30 <oscilloscope_process+0x9c8>
 8002a60:	ed1f 0a0c 	vldr	s0, [pc, #-48]	; 8002a34 <oscilloscope_process+0x9cc>
 8002a64:	f00f fe92 	bl	801278c <nk_vec2>
 8002a68:	eeb0 7a40 	vmov.f32	s14, s0
 8002a6c:	eef0 7a60 	vmov.f32	s15, s1
 8002a70:	ed87 7a48 	vstr	s14, [r7, #288]	; 0x120
 8002a74:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
 8002a78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8002a84:	ed97 7a48 	vldr	s14, [r7, #288]	; 0x120
 8002a88:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8002a8c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a94:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8002a98:	2314      	movs	r3, #20
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa0:	eef0 0a67 	vmov.f32	s1, s15
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	2206      	movs	r2, #6
 8002aa8:	6800      	ldr	r0, [r0, #0]
 8002aaa:	f00b fe2d 	bl	800e708 <nk_combo>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ab4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4623      	mov	r3, r4
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4423      	add	r3, r4
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3380      	adds	r3, #128	; 0x80
 8002ac6:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].offset = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].offset, 10.0f, 1.0f);
 8002ac8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002acc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ad8:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	3380      	adds	r3, #128	; 0x80
 8002ae6:	680a      	ldr	r2, [r1, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002af0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002af4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002af8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002afc:	4611      	mov	r1, r2
 8002afe:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f014 fd44 	bl	8017590 <nk_slider_float>
 8002b08:	ee07 0a90 	vmov	s15, r0
 8002b0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b10:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b20:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3384      	adds	r3, #132	; 0x84
 8002b32:	edc3 7a00 	vstr	s15, [r3]
                osc->waveforms[osc->waveform_selected].scale = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].scale, 10.0f, 1.0f);
 8002b36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002b42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b46:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	3380      	adds	r3, #128	; 0x80
 8002b54:	680a      	ldr	r2, [r1, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	f103 0208 	add.w	r2, r3, #8
 8002b5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b64:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002b68:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	f014 fd0c 	bl	8017590 <nk_slider_float>
 8002b78:	ee07 0a90 	vmov	s15, r0
 8002b7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b80:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b90:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3388      	adds	r3, #136	; 0x88
 8002ba2:	edc3 7a00 	vstr	s15, [r3]
                osc->waveforms[osc->waveform_selected].duty_cycle = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].duty_cycle, 10.0f, 1.0f);
 8002ba6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002baa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002bb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002bb6:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	3388      	adds	r3, #136	; 0x88
 8002bc4:	680a      	ldr	r2, [r1, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	1d1a      	adds	r2, r3, #4
 8002bca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002bce:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bd2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002bd6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002bda:	4611      	mov	r1, r2
 8002bdc:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	f014 fcd5 	bl	8017590 <nk_slider_float>
 8002be6:	ee07 0a90 	vmov	s15, r0
 8002bea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002bee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002bfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	338c      	adds	r3, #140	; 0x8c
 8002c10:	edc3 7a00 	vstr	s15, [r3]
                nk_tree_pop(ctx);
 8002c14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	f017 fefa 	bl	801aa16 <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 8002c22:	48df      	ldr	r0, [pc, #892]	; (8002fa0 <oscilloscope_process+0xf38>)
 8002c24:	f018 f988 	bl	801af38 <nk_strlen>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002c2e:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002c32:	f240 3235 	movw	r2, #821	; 0x335
 8002c36:	9202      	str	r2, [sp, #8]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	4bd9      	ldr	r3, [pc, #868]	; (8002fa0 <oscilloscope_process+0xf38>)
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	4ad8      	ldr	r2, [pc, #864]	; (8002fa4 <oscilloscope_process+0xf3c>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	6800      	ldr	r0, [r0, #0]
 8002c46:	f017 fec9 	bl	801a9dc <nk_tree_push_hashed>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 816f 	beq.w	8002f30 <oscilloscope_process+0xec8>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(60, 200));
 8002c52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c5a:	4ad3      	ldr	r2, [pc, #844]	; (8002fa8 <oscilloscope_process+0xf40>)
 8002c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c60:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c68:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8002c72:	eddf 0ace 	vldr	s1, [pc, #824]	; 8002fac <oscilloscope_process+0xf44>
 8002c76:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8002fb0 <oscilloscope_process+0xf48>
 8002c7a:	f00f fd87 	bl	801278c <nk_vec2>
 8002c7e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c82:	eef0 7a60 	vmov.f32	s15, s1
 8002c86:	ed87 7a4a 	vstr	s14, [r7, #296]	; 0x128
 8002c8a:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
 8002c8e:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8002c92:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002c96:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002c9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002c9e:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8002ca2:	2314      	movs	r3, #20
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8002caa:	eef0 0a67 	vmov.f32	s1, s15
 8002cae:	4623      	mov	r3, r4
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	6800      	ldr	r0, [r0, #0]
 8002cb4:	f00b fd28 	bl	800e708 <nk_combo>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002cbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8002cc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ccc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cd0:	4ab8      	ldr	r2, [pc, #736]	; (8002fb4 <oscilloscope_process+0xf4c>)
 8002cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cda:	f107 0320 	add.w	r3, r7, #32
 8002cde:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002ce2:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002cec:	2101      	movs	r1, #1
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	f00e ff46 	bl	8011b80 <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 20, nk_vec2(60, 200));
 8002cf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002cfc:	4aae      	ldr	r2, [pc, #696]	; (8002fb8 <oscilloscope_process+0xf50>)
 8002cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d02:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002d14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	33b0      	adds	r3, #176	; 0xb0
 8002d2a:	681d      	ldr	r5, [r3, #0]
 8002d2c:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8002fac <oscilloscope_process+0xf44>
 8002d30:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8002fb0 <oscilloscope_process+0xf48>
 8002d34:	f00f fd2a 	bl	801278c <nk_vec2>
 8002d38:	eeb0 7a40 	vmov.f32	s14, s0
 8002d3c:	eef0 7a60 	vmov.f32	s15, s1
 8002d40:	ed87 7a4c 	vstr	s14, [r7, #304]	; 0x130
 8002d44:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
 8002d48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8002d56:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8002d5a:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8002d5e:	f107 0118 	add.w	r1, r7, #24
 8002d62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d66:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d72:	eef0 0a67 	vmov.f32	s1, s15
 8002d76:	462b      	mov	r3, r5
 8002d78:	2202      	movs	r2, #2
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	f00b fcc4 	bl	800e708 <nk_combo>
 8002d80:	4601      	mov	r1, r0
 8002d82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4623      	mov	r3, r4
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4423      	add	r3, r4
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	33b0      	adds	r3, #176	; 0xb0
 8002d98:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 20, nk_vec2(60, 200));
 8002d9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002da2:	4a86      	ldr	r2, [pc, #536]	; (8002fbc <oscilloscope_process+0xf54>)
 8002da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002da8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002db0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002dba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002dbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	33b4      	adds	r3, #180	; 0xb4
 8002dd0:	681d      	ldr	r5, [r3, #0]
 8002dd2:	eddf 0a76 	vldr	s1, [pc, #472]	; 8002fac <oscilloscope_process+0xf44>
 8002dd6:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002fb0 <oscilloscope_process+0xf48>
 8002dda:	f00f fcd7 	bl	801278c <nk_vec2>
 8002dde:	eeb0 7a40 	vmov.f32	s14, s0
 8002de2:	eef0 7a60 	vmov.f32	s15, s1
 8002de6:	ed87 7a4e 	vstr	s14, [r7, #312]	; 0x138
 8002dea:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
 8002dee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002df2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8002dfc:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8002e00:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8002e04:	f107 0110 	add.w	r1, r7, #16
 8002e08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e0c:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8002e10:	2314      	movs	r3, #20
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	eeb0 0a47 	vmov.f32	s0, s14
 8002e18:	eef0 0a67 	vmov.f32	s1, s15
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	2202      	movs	r2, #2
 8002e20:	6800      	ldr	r0, [r0, #0]
 8002e22:	f00b fc71 	bl	800e708 <nk_combo>
 8002e26:	4601      	mov	r1, r0
 8002e28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e2c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4623      	mov	r3, r4
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4423      	add	r3, r4
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	33b4      	adds	r3, #180	; 0xb4
 8002e3e:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].offset = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].offset, 10.0f, 1.0f);
 8002e40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e44:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002e4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e52:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	33b8      	adds	r3, #184	; 0xb8
 8002e60:	680a      	ldr	r2, [r1, #0]
 8002e62:	441a      	add	r2, r3
 8002e64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002e6c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e70:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002e74:	4611      	mov	r1, r2
 8002e76:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	f014 fb88 	bl	8017590 <nk_slider_float>
 8002e80:	ee07 0a90 	vmov	s15, r0
 8002e84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e88:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	33b8      	adds	r3, #184	; 0xb8
 8002eac:	edc3 7a00 	vstr	s15, [r3]
                osc->cursors[osc->cursor_selected].track = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].track, 10.0f, 1.0f);
 8002eb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002eb4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002ebe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002ec2:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	33b8      	adds	r3, #184	; 0xb8
 8002ed0:	680a      	ldr	r2, [r1, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	1d1a      	adds	r2, r3, #4
 8002ed6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002eda:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ede:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002ee2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	f014 fb4f 	bl	8017590 <nk_slider_float>
 8002ef2:	ee07 0a90 	vmov	s15, r0
 8002ef6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002efa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f0c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	33bc      	adds	r3, #188	; 0xbc
 8002f1e:	edc3 7a00 	vstr	s15, [r3]
                nk_tree_pop(ctx);
 8002f22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	f017 fd73 	bl	801aa16 <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 8002f30:	4823      	ldr	r0, [pc, #140]	; (8002fc0 <oscilloscope_process+0xf58>)
 8002f32:	f018 f801 	bl	801af38 <nk_strlen>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002f3c:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002f40:	f240 323f 	movw	r2, #831	; 0x33f
 8002f44:	9202      	str	r2, [sp, #8]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <oscilloscope_process+0xf58>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <oscilloscope_process+0xf5c>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	6800      	ldr	r0, [r0, #0]
 8002f54:	f017 fd42 	bl	801a9dc <nk_tree_push_hashed>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00f      	beq.n	8002f7e <oscilloscope_process+0xf16>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 8002f5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f62:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f66:	2211      	movs	r2, #17
 8002f68:	4917      	ldr	r1, [pc, #92]	; (8002fc8 <oscilloscope_process+0xf60>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	f017 f8f0 	bl	801a150 <nk_label>
                nk_tree_pop(ctx);
 8002f70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	f017 fd4c 	bl	801aa16 <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 8002f7e:	4813      	ldr	r0, [pc, #76]	; (8002fcc <oscilloscope_process+0xf64>)
 8002f80:	f017 ffda 	bl	801af38 <nk_strlen>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002f8a:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002f8e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <oscilloscope_process+0xf64>)
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e018      	b.n	8002fd0 <oscilloscope_process+0xf68>
 8002f9e:	bf00      	nop
 8002fa0:	0801fda4 	.word	0x0801fda4
 8002fa4:	0801fdbc 	.word	0x0801fdbc
 8002fa8:	0801ff1c 	.word	0x0801ff1c
 8002fac:	43480000 	.word	0x43480000
 8002fb0:	42700000 	.word	0x42700000
 8002fb4:	0801fe40 	.word	0x0801fe40
 8002fb8:	0801fe70 	.word	0x0801fe70
 8002fbc:	0801ff34 	.word	0x0801ff34
 8002fc0:	0801fdc4 	.word	0x0801fdc4
 8002fc4:	0801fddc 	.word	0x0801fddc
 8002fc8:	0801fdec 	.word	0x0801fdec
 8002fcc:	0801fdf4 	.word	0x0801fdf4
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	; (800308c <oscilloscope_process+0x1024>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	6800      	ldr	r0, [r0, #0]
 8002fd6:	f017 fd01 	bl	801a9dc <nk_tree_push_hashed>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d048      	beq.n	8003072 <oscilloscope_process+0x100a>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8002fe0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002fe4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002fe8:	4a29      	ldr	r2, [pc, #164]	; (8003090 <oscilloscope_process+0x1028>)
 8002fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fee:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002ffa:	f5a2 70a4 	sub.w	r0, r2, #328	; 0x148
 8002ffe:	2202      	movs	r2, #2
 8003000:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003004:	2101      	movs	r1, #1
 8003006:	6800      	ldr	r0, [r0, #0]
 8003008:	f00e fdba 	bl	8011b80 <nk_layout_row>

                float fps = 0.0f; // Calculate fps here
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 8003014:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003018:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800301c:	2211      	movs	r2, #17
 800301e:	491d      	ldr	r1, [pc, #116]	; (8003094 <oscilloscope_process+0x102c>)
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f017 f895 	bl	801a150 <nk_label>
                nk_label(ctx, "0.0000", NK_TEXT_LEFT); // Replace with actual fps
 8003026:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800302a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800302e:	2211      	movs	r2, #17
 8003030:	4919      	ldr	r1, [pc, #100]	; (8003098 <oscilloscope_process+0x1030>)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	f017 f88c 	bl	801a150 <nk_label>

                float ratio = 0.0f; // Calculate memory ratio here
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                nk_label(ctx, "Memory", NK_TEXT_LEFT);
 8003040:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003044:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003048:	2211      	movs	r2, #17
 800304a:	4914      	ldr	r1, [pc, #80]	; (800309c <oscilloscope_process+0x1034>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	f017 f87f 	bl	801a150 <nk_label>
                nk_label(ctx, "0.0000%", NK_TEXT_LEFT); // Replace with actual memory ratio
 8003052:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003056:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800305a:	2211      	movs	r2, #17
 800305c:	4910      	ldr	r1, [pc, #64]	; (80030a0 <oscilloscope_process+0x1038>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	f017 f876 	bl	801a150 <nk_label>

                nk_tree_pop(ctx);
 8003064:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003068:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	f017 fcd2 	bl	801aa16 <nk_tree_pop>
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 8003072:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003076:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	f019 fa10 	bl	801c4a0 <nk_end>
}
 8003080:	bf00      	nop
 8003082:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003086:	46bd      	mov	sp, r7
 8003088:	bdb0      	pop	{r4, r5, r7, pc}
 800308a:	bf00      	nop
 800308c:	0801fe0c 	.word	0x0801fe0c
 8003090:	0801fe40 	.word	0x0801fe40
 8003094:	0801fe14 	.word	0x0801fe14
 8003098:	0801fe18 	.word	0x0801fe18
 800309c:	0801fe20 	.word	0x0801fe20
 80030a0:	0801fe28 	.word	0x0801fe28

080030a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a8:	b0a8      	sub	sp, #160	; 0xa0
 80030aa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ac:	f001 ff41 	bl	8004f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030b0:	f000 fb1e 	bl	80036f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b4:	f7fe fc0a 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 80030b8:	f7fe fade 	bl	8001678 <MX_DMA_Init>
  MX_QUADSPI1_Init();
 80030bc:	f000 fce6 	bl	8003a8c <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 80030c0:	f7fd fe0a 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 80030c4:	f7fe f9d4 	bl	8001470 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80030c8:	f000 fb60 	bl	800378c <MX_OPAMP1_Init>
  MX_DAC1_Init();
 80030cc:	f7fe f98c 	bl	80013e8 <MX_DAC1_Init>
  MX_ADC3_Init();
 80030d0:	f7fd febc 	bl	8000e4c <MX_ADC3_Init>
  MX_ADC4_Init();
 80030d4:	f7fd ff34 	bl	8000f40 <MX_ADC4_Init>
  MX_ADC5_Init();
 80030d8:	f7fd ff9a 	bl	8001010 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 80030dc:	f000 fb82 	bl	80037e4 <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 80030e0:	f000 fbac 	bl	800383c <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80030e4:	f000 fbd6 	bl	8003894 <MX_OPAMP6_Init>
  MX_FMC_Init();
 80030e8:	f7fe fb20 	bl	800172c <MX_FMC_Init>
  MX_SPI3_Init();
 80030ec:	f001 fb92 	bl	8004814 <MX_SPI3_Init>
  MX_TIM1_Init();
 80030f0:	f001 fd96 	bl	8004c20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80030f4:	f001 fde6 	bl	8004cc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80030f8:	f001 fe58 	bl	8004dac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //test_framebuf();
  //test_scope();

  float ax = 250/989.0;
 80030fc:	4bb2      	ldr	r3, [pc, #712]	; (80033c8 <main+0x324>)
 80030fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  float bx = -15800/989.0;
 8003102:	4bb2      	ldr	r3, [pc, #712]	; (80033cc <main+0x328>)
 8003104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float ay = 250/1407.0;
 8003108:	4bb1      	ldr	r3, [pc, #708]	; (80033d0 <main+0x32c>)
 800310a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float by = -1150/67.0;
 800310e:	4bb1      	ldr	r3, [pc, #708]	; (80033d4 <main+0x330>)
 8003110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint16_t x, y;

#include "tsc2046.h"

  tTsc2046 tsc;
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by);
 8003114:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003118:	edd7 1a21 	vldr	s3, [r7, #132]	; 0x84
 800311c:	ed97 1a22 	vldr	s2, [r7, #136]	; 0x88
 8003120:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 8003124:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8003128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003130:	49a9      	ldr	r1, [pc, #676]	; (80033d8 <main+0x334>)
 8003132:	f019 fa91 	bl	801c658 <tsc2046_init>

  for( int qqq = 0 ; qqq < 100 ; qqq++ )
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800313c:	e00d      	b.n	800315a <main+0xb6>
  {
	  tsc2046_read( &tsc, &x, &y );
 800313e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003142:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8003146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800314a:	4618      	mov	r0, r3
 800314c:	f019 fb18 	bl	801c780 <tsc2046_read>
  for( int qqq = 0 ; qqq < 100 ; qqq++ )
 8003150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003154:	3301      	adds	r3, #1
 8003156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800315a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800315e:	2b63      	cmp	r3, #99	; 0x63
 8003160:	dded      	ble.n	800313e <main+0x9a>
	  //printf( "%d %d\n", x, y );
  }

  lcd_config();
 8003162:	f7fe fc7b 	bl	8001a5c <lcd_config>
  for( int qqq = 0 ; qqq < 16 ; qqq++ )
 8003166:	2300      	movs	r3, #0
 8003168:	67fb      	str	r3, [r7, #124]	; 0x7c
 800316a:	e012      	b.n	8003192 <main+0xee>
  {
	  lcd_rect( 10, qqq*20, 460, 5, 0x3FFFF );
 800316c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	b29b      	uxth	r3, r3
 800317a:	b219      	sxth	r1, r3
 800317c:	4b97      	ldr	r3, [pc, #604]	; (80033dc <main+0x338>)
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2305      	movs	r3, #5
 8003182:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003186:	200a      	movs	r0, #10
 8003188:	f7fe fd1c 	bl	8001bc4 <lcd_rect>
  for( int qqq = 0 ; qqq < 16 ; qqq++ )
 800318c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800318e:	3301      	adds	r3, #1
 8003190:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003194:	2b0f      	cmp	r3, #15
 8003196:	dde9      	ble.n	800316c <main+0xc8>
  }

  lcd_rect( 50, 50, 1, 1, 0x3FFFF );
 8003198:	4b90      	ldr	r3, [pc, #576]	; (80033dc <main+0x338>)
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2301      	movs	r3, #1
 800319e:	2201      	movs	r2, #1
 80031a0:	2132      	movs	r1, #50	; 0x32
 80031a2:	2032      	movs	r0, #50	; 0x32
 80031a4:	f7fe fd0e 	bl	8001bc4 <lcd_rect>
  lcd_rect( 300, 300, 1, 1, 0x0003F );
 80031a8:	233f      	movs	r3, #63	; 0x3f
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2301      	movs	r3, #1
 80031ae:	2201      	movs	r2, #1
 80031b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80031b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031b8:	f7fe fd04 	bl	8001bc4 <lcd_rect>
  for( int qqq = 0 ; qqq < 100 ; qqq++ )
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031c2:	e00d      	b.n	80031e0 <main+0x13c>
  {
	  tsc2046_read( &tsc, &x, &y );
 80031c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031c8:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 80031cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031d0:	4618      	mov	r0, r3
 80031d2:	f019 fad5 	bl	801c780 <tsc2046_read>
  for( int qqq = 0 ; qqq < 100 ; qqq++ )
 80031d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031da:	3301      	adds	r3, #1
 80031dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031e4:	2b63      	cmp	r3, #99	; 0x63
 80031e6:	dded      	ble.n	80031c4 <main+0x120>
	  //printf( "%d %d\n", x, y );
  }

  lcd_rect( 0, 0, 480, 320, 0x0000 );
 80031e8:	2300      	movs	r3, #0
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80031f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031f4:	2100      	movs	r1, #0
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fe fce4 	bl	8001bc4 <lcd_rect>
  static struct nk_buffer pool;
  static struct nk_user_font font;
  static uint8_t buf_cmds[1024*8] = {0};
  static uint8_t buf_pool[1024*8] = {0};

  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 80031fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003200:	4977      	ldr	r1, [pc, #476]	; (80033e0 <main+0x33c>)
 8003202:	4878      	ldr	r0, [pc, #480]	; (80033e4 <main+0x340>)
 8003204:	f009 fc3c 	bl	800ca80 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 8003208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800320c:	4976      	ldr	r1, [pc, #472]	; (80033e8 <main+0x344>)
 800320e:	4877      	ldr	r0, [pc, #476]	; (80033ec <main+0x348>)
 8003210:	f009 fc36 	bl	800ca80 <nk_buffer_init_fixed>

  font.height = 8;
 8003214:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <main+0x34c>)
 8003216:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800321a:	605a      	str	r2, [r3, #4]
  font.width = text_width_f;
 800321c:	4b74      	ldr	r3, [pc, #464]	; (80033f0 <main+0x34c>)
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <main+0x350>)
 8003220:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <main+0x34c>)
 8003224:	4a71      	ldr	r2, [pc, #452]	; (80033ec <main+0x348>)
 8003226:	496f      	ldr	r1, [pc, #444]	; (80033e4 <main+0x340>)
 8003228:	4873      	ldr	r0, [pc, #460]	; (80033f8 <main+0x354>)
 800322a:	f00b fb81 	bl	800e930 <nk_init_custom>
  int pressed = 1;
 800322e:	2301      	movs	r3, #1
 8003230:	67bb      	str	r3, [r7, #120]	; 0x78
  int pressed_bck = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	66fb      	str	r3, [r7, #108]	; 0x6c
  struct nk_colorf bg;
  bg.r = 0.10f, bg.g = 0.18f, bg.b = 0.24f, bg.a = 1.0f;
 8003236:	4b71      	ldr	r3, [pc, #452]	; (80033fc <main+0x358>)
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	4b71      	ldr	r3, [pc, #452]	; (8003400 <main+0x35c>)
 800323c:	623b      	str	r3, [r7, #32]
 800323e:	4b71      	ldr	r3, [pc, #452]	; (8003404 <main+0x360>)
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28


	static uint8_t fb_buf[480*40*2];
	tFramebuf fb;

	framebuf_init( &fb, 480, 40, fb_buf );
 8003248:	f107 0010 	add.w	r0, r7, #16
 800324c:	4b6e      	ldr	r3, [pc, #440]	; (8003408 <main+0x364>)
 800324e:	2228      	movs	r2, #40	; 0x28
 8003250:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003254:	f009 f919 	bl	800c48a <framebuf_init>
	lcd_config();
 8003258:	f7fe fc00 	bl	8001a5c <lcd_config>

	static struct Oscilloscope osc = {0};
  while( 1 )
  {

  tsc2046_read( &tsc, &x, &y );
 800325c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003260:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8003264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003268:	4618      	mov	r0, r3
 800326a:	f019 fa89 	bl	801c780 <tsc2046_read>

  pressed_bck = pressed;
 800326e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003270:	66fb      	str	r3, [r7, #108]	; 0x6c
  pressed = x != 0;
 8003272:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	67bb      	str	r3, [r7, #120]	; 0x78

  nk_input_begin( &ctx );
 8003282:	485d      	ldr	r0, [pc, #372]	; (80033f8 <main+0x354>)
 8003284:	f00d fe46 	bl	8010f14 <nk_input_begin>
  nk_input_motion( &ctx, x, y );
 8003288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800328c:	4619      	mov	r1, r3
 800328e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003292:	461a      	mov	r2, r3
 8003294:	4858      	ldr	r0, [pc, #352]	; (80033f8 <main+0x354>)
 8003296:	f00d fedd 	bl	8011054 <nk_input_motion>
  nk_input_button( &ctx, 0, x, y, x!=0 );
 800329a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800329e:	461a      	mov	r2, r3
 80032a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032a4:	4619      	mov	r1, r3
 80032a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	460b      	mov	r3, r1
 80032b8:	2100      	movs	r1, #0
 80032ba:	484f      	ldr	r0, [pc, #316]	; (80033f8 <main+0x354>)
 80032bc:	f00d ff10 	bl	80110e0 <nk_input_button>
  nk_input_end( &ctx );
 80032c0:	484d      	ldr	r0, [pc, #308]	; (80033f8 <main+0x354>)
 80032c2:	f00d fe8f 	bl	8010fe4 <nk_input_end>

  oscilloscope_process(&osc, &ctx);
 80032c6:	494c      	ldr	r1, [pc, #304]	; (80033f8 <main+0x354>)
 80032c8:	4850      	ldr	r0, [pc, #320]	; (800340c <main+0x368>)
 80032ca:	f7fe fecd 	bl	8002068 <oscilloscope_process>

  if( (pressed || pressed_bck) && (pressed != pressed_bck) )
 80032ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <main+0x236>
 80032d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <main+0x23e>
 80032da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032de:	429a      	cmp	r2, r3
 80032e0:	d105      	bne.n	80032ee <main+0x24a>
  {
	    //HAL_Delay( 1 );

	  //if( visible == 0 )
	  {
		  test_scope();
 80032e2:	f000 ffc5 	bl	8004270 <test_scope>
		  nk_clear(&ctx);
 80032e6:	4844      	ldr	r0, [pc, #272]	; (80033f8 <main+0x354>)
 80032e8:	f00b fb8a 	bl	800ea00 <nk_clear>
		  continue;
 80032ec:	e1f9      	b.n	80036e2 <main+0x63e>
	  }
  }

  for( int y0 = 0 ; y0 < 320 ; y0 += 40 )
 80032ee:	2300      	movs	r3, #0
 80032f0:	677b      	str	r3, [r7, #116]	; 0x74
 80032f2:	e1ec      	b.n	80036ce <main+0x62a>
  {
framebuf_fill( &fb, 0x00000000 );
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f009 f8e1 	bl	800c4c2 <framebuf_fill>

  //lcd_rect( 0, 0, 480, 320, 0x0000 );
  {
	  const struct nk_command *cmd = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	673b      	str	r3, [r7, #112]	; 0x70
	  nk_foreach(cmd, &ctx)
 8003304:	483c      	ldr	r0, [pc, #240]	; (80033f8 <main+0x354>)
 8003306:	f00b ff3b 	bl	800f180 <nk__begin>
 800330a:	6738      	str	r0, [r7, #112]	; 0x70
 800330c:	e1ce      	b.n	80036ac <main+0x608>
	  {
		  switch (cmd->type) {
 800330e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b11      	cmp	r3, #17
 8003314:	f200 81c4 	bhi.w	80036a0 <main+0x5fc>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <main+0x27c>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	080036a1 	.word	0x080036a1
 8003324:	08003369 	.word	0x08003369
 8003328:	0800336f 	.word	0x0800336f
 800332c:	080036a1 	.word	0x080036a1
 8003330:	080034b3 	.word	0x080034b3
 8003334:	080034f5 	.word	0x080034f5
 8003338:	080036a1 	.word	0x080036a1
 800333c:	0800353d 	.word	0x0800353d
 8003340:	080035b9 	.word	0x080035b9
 8003344:	080036a1 	.word	0x080036a1
 8003348:	080036a1 	.word	0x080036a1
 800334c:	080036a1 	.word	0x080036a1
 8003350:	080036a1 	.word	0x080036a1
 8003354:	080036a1 	.word	0x080036a1
 8003358:	080036a1 	.word	0x080036a1
 800335c:	080036a1 	.word	0x080036a1
 8003360:	0800362f 	.word	0x0800362f
 8003364:	08003669 	.word	0x08003669
		  case NK_COMMAND_NOP: break;
		  case NK_COMMAND_SCISSOR: {
			  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
 8003368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  } break;
 800336c:	e199      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_LINE: {
			  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
			  if( l->begin.y == l->end.y )
 8003372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003374:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800337e:	429a      	cmp	r2, r3
 8003380:	d146      	bne.n	8003410 <main+0x36c>
			  {
				  framebuf_hline( &fb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003388:	461e      	mov	r6, r3
 800338a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003390:	461a      	mov	r2, r3
 8003392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003394:	1ad4      	subs	r4, r2, r3
 8003396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003398:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800339c:	461a      	mov	r2, r3
 800339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80033a4:	1ad5      	subs	r5, r2, r3
 80033a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a8:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80033ac:	4613      	mov	r3, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fba8 	bl	8001b04 <nk_colot_to_rgb666>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f107 0010 	add.w	r0, r7, #16
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	462b      	mov	r3, r5
 80033be:	4622      	mov	r2, r4
 80033c0:	4631      	mov	r1, r6
 80033c2:	f009 f8ce 	bl	800c562 <framebuf_hline>
			  }
			  else
			  {
				  framebuf_line( &fb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
			  }
		  } break;
 80033c6:	e16c      	b.n	80036a2 <main+0x5fe>
 80033c8:	3e816c75 	.word	0x3e816c75
 80033cc:	c17f9c9a 	.word	0xc17f9c9a
 80033d0:	3e35f289 	.word	0x3e35f289
 80033d4:	c189503d 	.word	0xc189503d
 80033d8:	2001665c 	.word	0x2001665c
 80033dc:	0003ffff 	.word	0x0003ffff
 80033e0:	200006b0 	.word	0x200006b0
 80033e4:	20000674 	.word	0x20000674
 80033e8:	200026ec 	.word	0x200026ec
 80033ec:	200026b0 	.word	0x200026b0
 80033f0:	200046ec 	.word	0x200046ec
 80033f4:	08001a33 	.word	0x08001a33
 80033f8:	200046f8 	.word	0x200046f8
 80033fc:	3dcccccd 	.word	0x3dcccccd
 8003400:	3e3851ec 	.word	0x3e3851ec
 8003404:	3e75c28f 	.word	0x3e75c28f
 8003408:	20007d60 	.word	0x20007d60
 800340c:	20011360 	.word	0x20011360
			  else if( l->begin.x == l->end.x )
 8003410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003412:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003418:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800341c:	429a      	cmp	r2, r3
 800341e:	d122      	bne.n	8003466 <main+0x3c2>
				  framebuf_vline( &fb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 8003420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003422:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003426:	461e      	mov	r6, r3
 8003428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800342e:	461a      	mov	r2, r3
 8003430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003432:	1ad4      	subs	r4, r2, r3
 8003434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003436:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800343a:	461a      	mov	r2, r3
 800343c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003442:	1ad5      	subs	r5, r2, r3
 8003444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003446:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800344a:	4613      	mov	r3, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fb59 	bl	8001b04 <nk_colot_to_rgb666>
 8003452:	4603      	mov	r3, r0
 8003454:	f107 0010 	add.w	r0, r7, #16
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	462b      	mov	r3, r5
 800345c:	4622      	mov	r2, r4
 800345e:	4631      	mov	r1, r6
 8003460:	f009 f894 	bl	800c58c <framebuf_vline>
		  } break;
 8003464:	e11d      	b.n	80036a2 <main+0x5fe>
				  framebuf_line( &fb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 8003466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003468:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800346c:	461e      	mov	r6, r3
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003474:	461a      	mov	r2, r3
 8003476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003478:	1ad5      	subs	r5, r2, r3
 800347a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003480:	4698      	mov	r8, r3
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003488:	461a      	mov	r2, r3
 800348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348c:	1ad4      	subs	r4, r2, r3
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8003494:	4613      	mov	r3, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fb34 	bl	8001b04 <nk_colot_to_rgb666>
 800349c:	4603      	mov	r3, r0
 800349e:	f107 0010 	add.w	r0, r7, #16
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	9400      	str	r4, [sp, #0]
 80034a6:	4643      	mov	r3, r8
 80034a8:	462a      	mov	r2, r5
 80034aa:	4631      	mov	r1, r6
 80034ac:	f009 f973 	bl	800c796 <framebuf_line>
		  } break;
 80034b0:	e0f7      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_RECT: {
			  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
 80034b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b4:	657b      	str	r3, [r7, #84]	; 0x54
			  framebuf_rect( &fb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
 80034b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80034bc:	461e      	mov	r6, r3
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c8:	1ad4      	subs	r4, r2, r3
 80034ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034cc:	8a1b      	ldrh	r3, [r3, #16]
 80034ce:	4698      	mov	r8, r3
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	8a5b      	ldrh	r3, [r3, #18]
 80034d4:	461d      	mov	r5, r3
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	6958      	ldr	r0, [r3, #20]
 80034da:	f7fe fb13 	bl	8001b04 <nk_colot_to_rgb666>
 80034de:	4603      	mov	r3, r0
 80034e0:	f107 0010 	add.w	r0, r7, #16
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	9500      	str	r5, [sp, #0]
 80034e8:	4643      	mov	r3, r8
 80034ea:	4622      	mov	r2, r4
 80034ec:	4631      	mov	r1, r6
 80034ee:	f009 f862 	bl	800c5b6 <framebuf_rect>
		  } break;
 80034f2:	e0d6      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_RECT_FILLED: {
			  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
 80034f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f6:	65bb      	str	r3, [r7, #88]	; 0x58
			  framebuf_fill_rect( &fb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
 80034f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80034fe:	461e      	mov	r6, r3
 8003500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003502:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003506:	461a      	mov	r2, r3
 8003508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350a:	1ad4      	subs	r4, r2, r3
 800350c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350e:	89db      	ldrh	r3, [r3, #14]
 8003510:	4698      	mov	r8, r3
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	8a1b      	ldrh	r3, [r3, #16]
 8003516:	461d      	mov	r5, r3
 8003518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351a:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800351e:	4613      	mov	r3, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe faef 	bl	8001b04 <nk_colot_to_rgb666>
 8003526:	4603      	mov	r3, r0
 8003528:	f107 0010 	add.w	r0, r7, #16
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	9500      	str	r5, [sp, #0]
 8003530:	4643      	mov	r3, r8
 8003532:	4622      	mov	r2, r4
 8003534:	4631      	mov	r1, r6
 8003536:	f008 ffdc 	bl	800c4f2 <framebuf_fill_rect>
		  } break;
 800353a:	e0b2      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_CIRCLE: {
			  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
 800353c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800353e:	65fb      	str	r3, [r7, #92]	; 0x5c
			  framebuf_circle( &fb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8003540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003546:	461a      	mov	r2, r3
 8003548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354a:	89db      	ldrh	r3, [r3, #14]
 800354c:	4619      	mov	r1, r3
 800354e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003550:	8a1b      	ldrh	r3, [r3, #16]
 8003552:	440b      	add	r3, r1
 8003554:	2b00      	cmp	r3, #0
 8003556:	da00      	bge.n	800355a <main+0x4b6>
 8003558:	3303      	adds	r3, #3
 800355a:	109b      	asrs	r3, r3, #2
 800355c:	18d4      	adds	r4, r2, r3
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003564:	461a      	mov	r2, r3
 8003566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003568:	1ad2      	subs	r2, r2, r3
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	89db      	ldrh	r3, [r3, #14]
 800356e:	4619      	mov	r1, r3
 8003570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003572:	8a1b      	ldrh	r3, [r3, #16]
 8003574:	440b      	add	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	da00      	bge.n	800357c <main+0x4d8>
 800357a:	3303      	adds	r3, #3
 800357c:	109b      	asrs	r3, r3, #2
 800357e:	18d5      	adds	r5, r2, r3
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003582:	89db      	ldrh	r3, [r3, #14]
 8003584:	461a      	mov	r2, r3
 8003586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003588:	8a1b      	ldrh	r3, [r3, #16]
 800358a:	4413      	add	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	da00      	bge.n	8003592 <main+0x4ee>
 8003590:	3303      	adds	r3, #3
 8003592:	109b      	asrs	r3, r3, #2
 8003594:	461e      	mov	r6, r3
 8003596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003598:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800359c:	4613      	mov	r3, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fab0 	bl	8001b04 <nk_colot_to_rgb666>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f107 0010 	add.w	r0, r7, #16
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4633      	mov	r3, r6
 80035ae:	462a      	mov	r2, r5
 80035b0:	4621      	mov	r1, r4
 80035b2:	f009 f905 	bl	800c7c0 <framebuf_circle>
		  } break;
 80035b6:	e074      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_CIRCLE_FILLED: {
			  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
 80035b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ba:	663b      	str	r3, [r7, #96]	; 0x60
			  framebuf_fill_circle( &fb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 80035bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c6:	899b      	ldrh	r3, [r3, #12]
 80035c8:	4619      	mov	r1, r3
 80035ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035cc:	89db      	ldrh	r3, [r3, #14]
 80035ce:	440b      	add	r3, r1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da00      	bge.n	80035d6 <main+0x532>
 80035d4:	3303      	adds	r3, #3
 80035d6:	109b      	asrs	r3, r3, #2
 80035d8:	18d4      	adds	r4, r2, r3
 80035da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80035e0:	461a      	mov	r2, r3
 80035e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e4:	1ad2      	subs	r2, r2, r3
 80035e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e8:	899b      	ldrh	r3, [r3, #12]
 80035ea:	4619      	mov	r1, r3
 80035ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ee:	89db      	ldrh	r3, [r3, #14]
 80035f0:	440b      	add	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da00      	bge.n	80035f8 <main+0x554>
 80035f6:	3303      	adds	r3, #3
 80035f8:	109b      	asrs	r3, r3, #2
 80035fa:	18d5      	adds	r5, r2, r3
 80035fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035fe:	899b      	ldrh	r3, [r3, #12]
 8003600:	461a      	mov	r2, r3
 8003602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003604:	89db      	ldrh	r3, [r3, #14]
 8003606:	4413      	add	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	da00      	bge.n	800360e <main+0x56a>
 800360c:	3303      	adds	r3, #3
 800360e:	109b      	asrs	r3, r3, #2
 8003610:	461e      	mov	r6, r3
 8003612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003614:	6918      	ldr	r0, [r3, #16]
 8003616:	f7fe fa75 	bl	8001b04 <nk_colot_to_rgb666>
 800361a:	4603      	mov	r3, r0
 800361c:	f107 0010 	add.w	r0, r7, #16
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	4633      	mov	r3, r6
 8003624:	462a      	mov	r2, r5
 8003626:	4621      	mov	r1, r4
 8003628:	f009 f94c 	bl	800c8c4 <framebuf_fill_circle>
		  } break;
 800362c:	e039      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_TEXT: {
			  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
 800362e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003630:	667b      	str	r3, [r7, #100]	; 0x64
			  framebuf_text( &fb, t->x, t->y-y0, t->string, nk_colot_to_rgb666( t->foreground ) );
 8003632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003634:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003638:	461e      	mov	r6, r3
 800363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800363c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003640:	461a      	mov	r2, r3
 8003642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003644:	1ad4      	subs	r4, r2, r3
 8003646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003648:	f103 0524 	add.w	r5, r3, #36	; 0x24
 800364c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800364e:	6918      	ldr	r0, [r3, #16]
 8003650:	f7fe fa58 	bl	8001b04 <nk_colot_to_rgb666>
 8003654:	4603      	mov	r3, r0
 8003656:	f107 0010 	add.w	r0, r7, #16
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	462b      	mov	r3, r5
 800365e:	4622      	mov	r2, r4
 8003660:	4631      	mov	r1, r6
 8003662:	f009 f9ab 	bl	800c9bc <framebuf_text>
		  } break;
 8003666:	e01c      	b.n	80036a2 <main+0x5fe>
		  case NK_COMMAND_IMAGE: {
			  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
 8003668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800366a:	66bb      	str	r3, [r7, #104]	; 0x68
			  framebuf_fill_rect( &fb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 800366c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003672:	461c      	mov	r4, r3
 8003674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003676:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800367a:	461a      	mov	r2, r3
 800367c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003682:	899b      	ldrh	r3, [r3, #12]
 8003684:	461d      	mov	r5, r3
 8003686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003688:	89db      	ldrh	r3, [r3, #14]
 800368a:	4619      	mov	r1, r3
 800368c:	f107 0010 	add.w	r0, r7, #16
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <main+0x640>)
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	9100      	str	r1, [sp, #0]
 8003696:	462b      	mov	r3, r5
 8003698:	4621      	mov	r1, r4
 800369a:	f008 ff2a 	bl	800c4f2 <framebuf_fill_rect>
		  } break;
 800369e:	e000      	b.n	80036a2 <main+0x5fe>
		  default: break;
 80036a0:	bf00      	nop
	  nk_foreach(cmd, &ctx)
 80036a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80036a4:	4810      	ldr	r0, [pc, #64]	; (80036e8 <main+0x644>)
 80036a6:	f00b fdd7 	bl	800f258 <nk__next>
 80036aa:	6738      	str	r0, [r7, #112]	; 0x70
 80036ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f47f ae2d 	bne.w	800330e <main+0x26a>
		  }
	  }
  }

	lcd_bmp( 0, y0, 480, 40, fb_buf );
 80036b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b6:	b219      	sxth	r1, r3
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <main+0x648>)
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2328      	movs	r3, #40	; 0x28
 80036be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7fe fbde 	bl	8001e84 <lcd_bmp>
  for( int y0 = 0 ; y0 < 320 ; y0 += 40 )
 80036c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ca:	3328      	adds	r3, #40	; 0x28
 80036cc:	677b      	str	r3, [r7, #116]	; 0x74
 80036ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036d4:	f6ff ae0e 	blt.w	80032f4 <main+0x250>
  }

  nk_clear(&ctx);
 80036d8:	4803      	ldr	r0, [pc, #12]	; (80036e8 <main+0x644>)
 80036da:	f00b f991 	bl	800ea00 <nk_clear>

  test_scope();
 80036de:	f000 fdc7 	bl	8004270 <test_scope>
  {
 80036e2:	e5bb      	b.n	800325c <main+0x1b8>
 80036e4:	0003ffff 	.word	0x0003ffff
 80036e8:	200046f8 	.word	0x200046f8
 80036ec:	20007d60 	.word	0x20007d60

080036f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b094      	sub	sp, #80	; 0x50
 80036f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036f6:	f107 0318 	add.w	r3, r7, #24
 80036fa:	2238      	movs	r2, #56	; 0x38
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f019 feca 	bl	801d498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003704:	1d3b      	adds	r3, r7, #4
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003712:	2000      	movs	r0, #0
 8003714:	f005 fa6a 	bl	8008bec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003718:	2301      	movs	r3, #1
 800371a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800371c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003720:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003722:	2302      	movs	r3, #2
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003726:	2303      	movs	r3, #3
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800372a:	2306      	movs	r3, #6
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800372e:	2355      	movs	r3, #85	; 0x55
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003732:	2302      	movs	r3, #2
 8003734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003736:	2308      	movs	r3, #8
 8003738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800373a:	2302      	movs	r3, #2
 800373c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800373e:	f107 0318 	add.w	r3, r7, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f005 fde0 	bl	8009308 <HAL_RCC_OscConfig>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800374e:	f000 f818 	bl	8003782 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003752:	230f      	movs	r3, #15
 8003754:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003756:	2303      	movs	r3, #3
 8003758:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2104      	movs	r1, #4
 800376a:	4618      	mov	r0, r3
 800376c:	f006 f8e4 	bl	8009938 <HAL_RCC_ClockConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003776:	f000 f804 	bl	8003782 <Error_Handler>
  }
}
 800377a:	bf00      	nop
 800377c:	3750      	adds	r7, #80	; 0x50
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003786:	b672      	cpsid	i
}
 8003788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800378a:	e7fe      	b.n	800378a <Error_Handler+0x8>

0800378c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <MX_OPAMP1_Init+0x50>)
 8003792:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <MX_OPAMP1_Init+0x54>)
 8003794:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <MX_OPAMP1_Init+0x50>)
 8003798:	2200      	movs	r2, #0
 800379a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <MX_OPAMP1_Init+0x50>)
 800379e:	2240      	movs	r2, #64	; 0x40
 80037a0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037a4:	2208      	movs	r2, #8
 80037a6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037be:	2200      	movs	r2, #0
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <MX_OPAMP1_Init+0x50>)
 80037ca:	f005 f90d 	bl	80089e8 <HAL_OPAMP_Init>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 80037d4:	f7ff ffd5 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20011440 	.word	0x20011440
 80037e0:	40010300 	.word	0x40010300

080037e4 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <MX_OPAMP3_Init+0x50>)
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <MX_OPAMP3_Init+0x54>)
 80037ec:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <MX_OPAMP3_Init+0x50>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <MX_OPAMP3_Init+0x50>)
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <MX_OPAMP3_Init+0x50>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <MX_OPAMP3_Init+0x50>)
 8003802:	2201      	movs	r2, #1
 8003804:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <MX_OPAMP3_Init+0x50>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <MX_OPAMP3_Init+0x50>)
 800380e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003812:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <MX_OPAMP3_Init+0x50>)
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <MX_OPAMP3_Init+0x50>)
 800381c:	2200      	movs	r2, #0
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8003820:	4804      	ldr	r0, [pc, #16]	; (8003834 <MX_OPAMP3_Init+0x50>)
 8003822:	f005 f8e1 	bl	80089e8 <HAL_OPAMP_Init>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 800382c:	f7ff ffa9 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2001147c 	.word	0x2001147c
 8003838:	40010308 	.word	0x40010308

0800383c <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8003840:	4b12      	ldr	r3, [pc, #72]	; (800388c <MX_OPAMP5_Init+0x50>)
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <MX_OPAMP5_Init+0x54>)
 8003844:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <MX_OPAMP5_Init+0x50>)
 8003848:	2200      	movs	r2, #0
 800384a:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <MX_OPAMP5_Init+0x50>)
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <MX_OPAMP5_Init+0x50>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <MX_OPAMP5_Init+0x50>)
 800385a:	2201      	movs	r2, #1
 800385c:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <MX_OPAMP5_Init+0x50>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <MX_OPAMP5_Init+0x50>)
 8003866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <MX_OPAMP5_Init+0x50>)
 800386e:	2200      	movs	r2, #0
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <MX_OPAMP5_Init+0x50>)
 8003874:	2200      	movs	r2, #0
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8003878:	4804      	ldr	r0, [pc, #16]	; (800388c <MX_OPAMP5_Init+0x50>)
 800387a:	f005 f8b5 	bl	80089e8 <HAL_OPAMP_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_OPAMP5_Init+0x4c>
  {
    Error_Handler();
 8003884:	f7ff ff7d 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200114b8 	.word	0x200114b8
 8003890:	40010310 	.word	0x40010310

08003894 <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <MX_OPAMP6_Init+0x54>)
 800389c:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038ac:	2208      	movs	r2, #8
 80038ae:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80038d0:	4804      	ldr	r0, [pc, #16]	; (80038e4 <MX_OPAMP6_Init+0x50>)
 80038d2:	f005 f889 	bl	80089e8 <HAL_OPAMP_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 80038dc:	f7ff ff51 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200114f4 	.word	0x200114f4
 80038e8:	40010314 	.word	0x40010314

080038ec <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <HAL_OPAMP_MspInit+0x148>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d119      	bne.n	8003942 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	4a49      	ldr	r2, [pc, #292]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8003926:	2388      	movs	r3, #136	; 0x88
 8003928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800392a:	2303      	movs	r3, #3
 800392c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	4619      	mov	r1, r3
 8003938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800393c:	f004 feba 	bl	80086b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 8003940:	e073      	b.n	8003a2a <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP3)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3d      	ldr	r2, [pc, #244]	; (8003a3c <HAL_OPAMP_MspInit+0x150>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d118      	bne.n	800397e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394c:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003958:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8003964:	2305      	movs	r3, #5
 8003966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003968:	2303      	movs	r3, #3
 800396a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003970:	f107 031c 	add.w	r3, r7, #28
 8003974:	4619      	mov	r1, r3
 8003976:	4832      	ldr	r0, [pc, #200]	; (8003a40 <HAL_OPAMP_MspInit+0x154>)
 8003978:	f004 fe9c 	bl	80086b4 <HAL_GPIO_Init>
}
 800397c:	e055      	b.n	8003a2a <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP5)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <HAL_OPAMP_MspInit+0x158>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d119      	bne.n	80039bc <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80039a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a6:	2303      	movs	r3, #3
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ae:	f107 031c 	add.w	r3, r7, #28
 80039b2:	4619      	mov	r1, r3
 80039b4:	4822      	ldr	r0, [pc, #136]	; (8003a40 <HAL_OPAMP_MspInit+0x154>)
 80039b6:	f004 fe7d 	bl	80086b4 <HAL_GPIO_Init>
}
 80039ba:	e036      	b.n	8003a2a <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP6)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <HAL_OPAMP_MspInit+0x15c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d131      	bne.n	8003a2a <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	4a1b      	ldr	r2, [pc, #108]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <HAL_OPAMP_MspInit+0x14c>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039f6:	2302      	movs	r3, #2
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	4619      	mov	r1, r3
 8003a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a0c:	f004 fe52 	bl	80086b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a16:	2303      	movs	r3, #3
 8003a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	4619      	mov	r1, r3
 8003a24:	4806      	ldr	r0, [pc, #24]	; (8003a40 <HAL_OPAMP_MspInit+0x154>)
 8003a26:	f004 fe45 	bl	80086b4 <HAL_GPIO_Init>
}
 8003a2a:	bf00      	nop
 8003a2c:	3730      	adds	r7, #48	; 0x30
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40010300 	.word	0x40010300
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40010308 	.word	0x40010308
 8003a40:	48000400 	.word	0x48000400
 8003a44:	40010310 	.word	0x40010310
 8003a48:	40010314 	.word	0x40010314

08003a4c <HAL_QSPI_TxCpltCallback>:
    uint32_t SIOOMode,
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    TxCpltCallback = 1;
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <HAL_QSPI_TxCpltCallback+0x1c>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20011530 	.word	0x20011530

08003a6c <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
    RxCpltCallback = 1;
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_QSPI_RxCpltCallback+0x1c>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20011531 	.word	0x20011531

08003a8c <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <MX_QUADSPI1_Init+0x54>)
 8003a94:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 6;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003a98:	2206      	movs	r2, #6
 8003a9a:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003aaa:	2217      	movs	r2, #23
 8003aac:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <MX_QUADSPI1_Init+0x50>)
 8003ac8:	f005 f934 	bl	8008d34 <HAL_QSPI_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 8003ad2:	f7ff fe56 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20011534 	.word	0x20011534
 8003ae0:	a0001000 	.word	0xa0001000

08003ae4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b0a0      	sub	sp, #128	; 0x80
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003afc:	f107 0318 	add.w	r3, r7, #24
 8003b00:	2254      	movs	r2, #84	; 0x54
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f019 fcc7 	bl	801d498 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <HAL_QSPI_MspInit+0x17c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	f040 80a1 	bne.w	8003c58 <HAL_QSPI_MspInit+0x174>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8003b16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b20:	f107 0318 	add.w	r3, r7, #24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f006 f8f7 	bl	8009d18 <HAL_RCCEx_PeriphCLKConfig>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8003b30:	f7ff fe27 	bl	8003782 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003b34:	4b4b      	ldr	r3, [pc, #300]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	4a4a      	ldr	r2, [pc, #296]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b40:	4b48      	ldr	r3, [pc, #288]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	4a44      	ldr	r2, [pc, #272]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b58:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b64:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b6a:	f043 0302 	orr.w	r3, r3, #2
 8003b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b70:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7c:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_QSPI_MspInit+0x180>)
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> QUADSPI1_BK2_IO2
    PC4     ------> QUADSPI1_BK2_IO3
    PB10     ------> QUADSPI1_CLK
    PD3     ------> QUADSPI1_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003b94:	231e      	movs	r3, #30
 8003b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003ba4:	230a      	movs	r3, #10
 8003ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bac:	4619      	mov	r1, r3
 8003bae:	482e      	ldr	r0, [pc, #184]	; (8003c68 <HAL_QSPI_MspInit+0x184>)
 8003bb0:	f004 fd80 	bl	80086b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4826      	ldr	r0, [pc, #152]	; (8003c6c <HAL_QSPI_MspInit+0x188>)
 8003bd2:	f004 fd6f 	bl	80086b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	2300      	movs	r3, #0
 8003be4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003be6:	230a      	movs	r3, #10
 8003be8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bee:	4619      	mov	r1, r3
 8003bf0:	481f      	ldr	r0, [pc, #124]	; (8003c70 <HAL_QSPI_MspInit+0x18c>)
 8003bf2:	f004 fd5f 	bl	80086b4 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA1_Channel1;
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_QSPI_MspInit+0x194>)
 8003bfa:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003bfe:	2228      	movs	r2, #40	; 0x28
 8003c00:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c04:	2210      	movs	r2, #16
 8003c06:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c14:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 8003c2c:	4811      	ldr	r0, [pc, #68]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c2e:	f004 fa0f 	bl	8008050 <HAL_DMA_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_QSPI_MspInit+0x158>
    {
      Error_Handler();
 8003c38:	f7ff fda3 	bl	8003782 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c40:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <HAL_QSPI_MspInit+0x190>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	205f      	movs	r0, #95	; 0x5f
 8003c4e:	f003 fe10 	bl	8007872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003c52:	205f      	movs	r0, #95	; 0x5f
 8003c54:	f003 fe27 	bl	80078a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3780      	adds	r7, #128	; 0x80
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	a0001000 	.word	0xa0001000
 8003c64:	40021000 	.word	0x40021000
 8003c68:	48000800 	.word	0x48000800
 8003c6c:	48000400 	.word	0x48000400
 8003c70:	48000c00 	.word	0x48000c00
 8003c74:	20011580 	.word	0x20011580
 8003c78:	40020008 	.word	0x40020008

08003c7c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	605a      	str	r2, [r3, #4]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	605a      	str	r2, [r3, #4]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <scope_init>:
#include "scope.h"

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	813b      	strh	r3, [r7, #8]
	scope->trigger_level = trigger_level;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	897a      	ldrh	r2, [r7, #10]
 8003d12:	82da      	strh	r2, [r3, #22]
	scope->sample_rate = sample_rate;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	893a      	ldrh	r2, [r7, #8]
 8003d18:	805a      	strh	r2, [r3, #2]
	scope->buffer1 = buffer1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	605a      	str	r2, [r3, #4]
	scope->buffer2 = buffer2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	609a      	str	r2, [r3, #8]
	scope->buffer3 = buffer3;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	60da      	str	r2, [r3, #12]
	scope->buffer4 = buffer4;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	611a      	str	r2, [r3, #16]
	scope->len = len;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d36:	829a      	strh	r2, [r3, #20]
	scope->trigger_location = 0;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	831a      	strh	r2, [r3, #24]
	scope->state = SCOPE_STATE_RESET;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]

	_scope = scope;
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <scope_init+0x98>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6013      	str	r3, [r2, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <scope_init+0x9c>)
 8003d4e:	61da      	str	r2, [r3, #28]
	scope->hadc2 = &hadc3;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <scope_init+0xa0>)
 8003d54:	621a      	str	r2, [r3, #32]
	scope->hadc3 = &hadc5;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <scope_init+0xa4>)
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24
	scope->hadc4 = &hadc4;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <scope_init+0xa8>)
 8003d60:	629a      	str	r2, [r3, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <scope_init+0xac>)
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <scope_init+0xb0>)
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <scope_init+0xb4>)
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <scope_init+0xb8>)
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
	scope->htim1 = &htim1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <scope_init+0xbc>)
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
	scope->htim2 = &htim2;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <scope_init+0xc0>)
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	200115e0 	.word	0x200115e0
 8003d98:	200001f8 	.word	0x200001f8
 8003d9c:	20000264 	.word	0x20000264
 8003da0:	2000033c 	.word	0x2000033c
 8003da4:	200002d0 	.word	0x200002d0
 8003da8:	200003a8 	.word	0x200003a8
 8003dac:	20000408 	.word	0x20000408
 8003db0:	200004c8 	.word	0x200004c8
 8003db4:	20000468 	.word	0x20000468
 8003db8:	200166c4 	.word	0x200166c4
 8003dbc:	20016710 	.word	0x20016710

08003dc0 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 8003dc0:	b5b0      	push	{r4, r5, r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e009      	b.n	8003de2 <scope_start+0x22>
	{
		scope->CNDTRs[i] = 0;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	ddf2      	ble.n	8003dce <scope_start+0xe>
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 8003de8:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <scope_start+0x198>)
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <scope_start+0x198>)
 8003dee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003df2:	6113      	str	r3, [r2, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 8003df4:	4b58      	ldr	r3, [pc, #352]	; (8003f58 <scope_start+0x198>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a57      	ldr	r2, [pc, #348]	; (8003f58 <scope_start+0x198>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6093      	str	r3, [r2, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
 8003e00:	2303      	movs	r3, #3
 8003e02:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f7fc fbb5 	bl	8000574 <__aeabi_i2d>
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e12:	f7fc fd43 	bl	800089c <__aeabi_ddiv>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	68b8      	ldr	r0, [r7, #8]
 8003e20:	f7fc fba8 	bl	8000574 <__aeabi_i2d>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4620      	mov	r0, r4
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	f7fc fd36 	bl	800089c <__aeabi_ddiv>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	a345      	add	r3, pc, #276	; (adr r3, 8003f50 <scope_start+0x190>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc fc03 	bl	8000648 <__aeabi_dmul>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f7fc fed5 	bl	8000bf8 <__aeabi_d2uiz>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2200      	movs	r2, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	4841      	ldr	r0, [pc, #260]	; (8003f5c <scope_start+0x19c>)
 8003e56:	f003 fe83 	bl	8007b60 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	483f      	ldr	r0, [pc, #252]	; (8003f5c <scope_start+0x19c>)
 8003e5e:	f003 fd5e 	bl	800791e <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 8003e62:	483f      	ldr	r0, [pc, #252]	; (8003f60 <scope_start+0x1a0>)
 8003e64:	f004 fe90 	bl	8008b88 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8003e68:	483e      	ldr	r0, [pc, #248]	; (8003f64 <scope_start+0x1a4>)
 8003e6a:	f004 fe8d 	bl	8008b88 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 8003e6e:	483e      	ldr	r0, [pc, #248]	; (8003f68 <scope_start+0x1a8>)
 8003e70:	f004 fe8a 	bl	8008b88 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 8003e74:	483d      	ldr	r0, [pc, #244]	; (8003f6c <scope_start+0x1ac>)
 8003e76:	f004 fe87 	bl	8008b88 <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	217f      	movs	r1, #127	; 0x7f
 8003e80:	4618      	mov	r0, r3
 8003e82:	f003 fa89 	bl	8007398 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	217f      	movs	r1, #127	; 0x7f
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 fa83 	bl	8007398 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	217f      	movs	r1, #127	; 0x7f
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f003 fa7d 	bl	8007398 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	217f      	movs	r1, #127	; 0x7f
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 fa77 	bl	8007398 <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff03 	bl	8003cbc <LL_ADC_DisableIT_AWD1>
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff0d 	bl	8003cdc <LL_ADC_DisableIT_AWD2>
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed6:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69d8      	ldr	r0, [r3, #28]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8a9b      	ldrh	r3, [r3, #20]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f001 fdfd 	bl	8005af8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a18      	ldr	r0, [r3, #32]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8a9b      	ldrh	r3, [r3, #20]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f001 fdf4 	bl	8005af8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68d9      	ldr	r1, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8a9b      	ldrh	r3, [r3, #20]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f001 fdeb 	bl	8005af8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6919      	ldr	r1, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8a9b      	ldrh	r3, [r3, #20]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f001 fde2 	bl	8005af8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f006 fdfd 	bl	800ab38 <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4c:	f3af 8000 	nop.w
 8003f50:	00000000 	.word	0x00000000
 8003f54:	40affe00 	.word	0x40affe00
 8003f58:	e0042000 	.word	0xe0042000
 8003f5c:	20000540 	.word	0x20000540
 8003f60:	20011440 	.word	0x20011440
 8003f64:	2001147c 	.word	0x2001147c
 8003f68:	200114b8 	.word	0x200114b8
 8003f6c:	200114f4 	.word	0x200114f4

08003f70 <scope_stop>:

void scope_stop( tScope *scope )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop( scope->htim1 );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f006 fe4b 	bl	800ac18 <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f006 ff5b 	bl	800ae44 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f006 fe40 	bl	800ac18 <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fe7f 	bl	8005ca0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 fe7a 	bl	8005ca0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fe75 	bl	8005ca0 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fe70 	bl	8005ca0 <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	701a      	strb	r2, [r3, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <scope_is_busy>:

uint8_t scope_is_busy( tScope *scope )
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	return scope->state != SCOPE_STATE_DONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <scope_get_trigger>:

int32_t scope_get_trigger( tScope *scope )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8a9b      	ldrh	r3, [r3, #20]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	1ad3      	subs	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_ADC_ConvHalfCpltCallback>:

// ********************** IRQs ********************** //
int cndtr1 = 0;
int cndtr2 = 0;
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
	{
	}
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_ADC_ConvCpltCallback+0x60>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	d120      	bne.n	800407a <HAL_ADC_ConvCpltCallback+0x56>
	{
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_ADC_ConvCpltCallback+0x60>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d11b      	bne.n	800407a <HAL_ADC_ConvCpltCallback+0x56>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_ADC_ConvCpltCallback+0x60>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_ADC_ConvCpltCallback+0x60>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <HAL_ADC_ConvCpltCallback+0x64>)
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	64da      	str	r2, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_ADC_ConvCpltCallback+0x60>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	601a      	str	r2, [r3, #0]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 8004060:	4b08      	ldr	r3, [pc, #32]	; (8004084 <HAL_ADC_ConvCpltCallback+0x60>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fe07 	bl	8003c7c <LL_ADC_EnableIT_AWD1>
			cndtr1 = 0;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_ADC_ConvCpltCallback+0x64>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
			cndtr2 = 0;
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_ADC_ConvCpltCallback+0x68>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200115e0 	.word	0x200115e0
 8004088:	200115e4 	.word	0x200115e4
 800408c:	200115e8 	.word	0x200115e8

08004090 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8004098:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d125      	bne.n	80040f0 <HAL_ADC_LevelOutOfWindowCallback+0x60>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 80040a4:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d120      	bne.n	80040f0 <HAL_ADC_LevelOutOfWindowCallback+0x60>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2203      	movs	r2, #3
 80040b4:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	651a      	str	r2, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fdf4 	bl	8003cbc <LL_ADC_DisableIT_AWD1>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 80040d4:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fdd6 	bl	8003c9c <LL_ADC_EnableIT_AWD2>
		}
	}
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200115e0 	.word	0x200115e0

080040fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d14f      	bne.n	80041b0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 8004110:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d14a      	bne.n	80041b0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2204      	movs	r2, #4
 8004120:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 8004122:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a25      	ldr	r2, [pc, #148]	; (80041bc <HAL_ADCEx_LevelOutOfWindow2Callback+0xc0>)
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 800413a:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0204 	mvn.w	r2, #4
 8004146:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0201 	mvn.w	r2, #1
 8004154:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f06f 0202 	mvn.w	r2, #2
 8004162:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0204 	mvn.w	r2, #4
 8004170:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0201 	mvn.w	r2, #1
 800417e:	611a      	str	r2, [r3, #16]
			start_cpu = SysTick->VAL;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc4>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc8>)
 8004186:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4618      	mov	r0, r3
 8004190:	f006 fcd2 	bl	800ab38 <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f006 fdc3 	bl	800ad28 <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fd96 	bl	8003cdc <LL_ADC_DisableIT_AWD2>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200115e0 	.word	0x200115e0
 80041bc:	200115e4 	.word	0x200115e4
 80041c0:	e000e010 	.word	0xe000e010
 80041c4:	200115ec 	.word	0x200115ec

080041c8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	if( htim == _scope->htim2 ) // htim2
 80041d0:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d13c      	bne.n	8004256 <HAL_TIM_OC_DelayElapsedCallback+0x8e>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 80041dc:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d137      	bne.n	8004256 <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		{
			stop_cpu = SysTick->VAL;
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 80041ec:	6013      	str	r3, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2205      	movs	r2, #5
 80041f4:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 8004200:	4b17      	ldr	r3, [pc, #92]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	4618      	mov	r0, r3
 8004208:	f006 fd06 	bl	800ac18 <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4618      	mov	r0, r3
 8004214:	f001 fd44 	bl	8005ca0 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fd3e 	bl	8005ca0 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 8004224:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	4618      	mov	r0, r3
 800422c:	f001 fd38 	bl	8005ca0 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	4618      	mov	r0, r3
 8004238:	f001 fd32 	bl	8005ca0 <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f006 fdfd 	bl	800ae44 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	4618      	mov	r0, r3
 8004252:	f006 fce1 	bl	800ac18 <HAL_TIM_Base_Stop>
		}
	}
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200115e0 	.word	0x200115e0
 8004264:	e000e010 	.word	0xe000e010
 8004268:	200115f0 	.word	0x200115f0
 800426c:	200115e8 	.word	0x200115e8

08004270 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( void )
{
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b092      	sub	sp, #72	; 0x48
 8004274:	af04      	add	r7, sp, #16
	// test scope

	uint16_t start = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	84fb      	strh	r3, [r7, #38]	; 0x26


	if( _scope_init == 0 )
 800427a:	4ba7      	ldr	r3, [pc, #668]	; (8004518 <test_scope+0x2a8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d17b      	bne.n	800437a <test_scope+0x10a>
	{

		float freq = 3;
 8004282:	4ba6      	ldr	r3, [pc, #664]	; (800451c <test_scope+0x2ac>)
 8004284:	623b      	str	r3, [r7, #32]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8004286:	2300      	movs	r3, #0
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
 800428a:	e054      	b.n	8004336 <test_scope+0xc6>
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 800428c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004290:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004294:	ee17 0a90 	vmov	r0, s15
 8004298:	f7fc f97e 	bl	8000598 <__aeabi_f2d>
 800429c:	a39c      	add	r3, pc, #624	; (adr r3, 8004510 <test_scope+0x2a0>)
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f7fc f9d1 	bl	8000648 <__aeabi_dmul>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4614      	mov	r4, r2
 80042ac:	461d      	mov	r5, r3
 80042ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042b0:	f7fc f960 	bl	8000574 <__aeabi_i2d>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	f7fc f9c4 	bl	8000648 <__aeabi_dmul>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	4b94      	ldr	r3, [pc, #592]	; (8004520 <test_scope+0x2b0>)
 80042ce:	f7fc fae5 	bl	800089c <__aeabi_ddiv>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fcad 	bl	8000c38 <__aeabi_d2f>
 80042de:	4603      	mov	r3, r0
 80042e0:	ee00 3a10 	vmov	s0, r3
 80042e4:	f01a ff62 	bl	801f1ac <sinf>
 80042e8:	eef0 7a40 	vmov.f32	s15, s0
 80042ec:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8004524 <test_scope+0x2b4>
 80042f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f4:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004528 <test_scope+0x2b8>
 80042f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004300:	ee17 3a90 	vmov	r3, s15
 8004304:	b299      	uxth	r1, r3
 8004306:	4a89      	ldr	r2, [pc, #548]	; (800452c <test_scope+0x2bc>)
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+((i*8)%2048);
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	425a      	negs	r2, r3
 8004314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004318:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800431c:	bf58      	it	pl
 800431e:	4253      	negpl	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004326:	b299      	uxth	r1, r3
 8004328:	4a81      	ldr	r2, [pc, #516]	; (8004530 <test_scope+0x2c0>)
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	3301      	adds	r3, #1
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	dba6      	blt.n	800428c <test_scope+0x1c>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 800433e:	4b7d      	ldr	r3, [pc, #500]	; (8004534 <test_scope+0x2c4>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4a7c      	ldr	r2, [pc, #496]	; (8004534 <test_scope+0x2c4>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 800434a:	2300      	movs	r3, #0
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004352:	4a76      	ldr	r2, [pc, #472]	; (800452c <test_scope+0x2bc>)
 8004354:	2100      	movs	r1, #0
 8004356:	4878      	ldr	r0, [pc, #480]	; (8004538 <test_scope+0x2c8>)
 8004358:	f003 fb34 	bl	80079c4 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004364:	4a72      	ldr	r2, [pc, #456]	; (8004530 <test_scope+0x2c0>)
 8004366:	2110      	movs	r1, #16
 8004368:	4873      	ldr	r0, [pc, #460]	; (8004538 <test_scope+0x2c8>)
 800436a:	f003 fb2b 	bl	80079c4 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 800436e:	4873      	ldr	r0, [pc, #460]	; (800453c <test_scope+0x2cc>)
 8004370:	f006 fbe2 	bl	800ab38 <HAL_TIM_Base_Start>
		extern TIM_HandleTypeDef htim1;
		//htim1.Instance->PSC = 0x1;
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );
		_scope_init = 1;
 8004374:	4b68      	ldr	r3, [pc, #416]	; (8004518 <test_scope+0x2a8>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]
	  static int i = 0;

	{

		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 800437a:	4b71      	ldr	r3, [pc, #452]	; (8004540 <test_scope+0x2d0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <test_scope+0x11a>
 8004386:	486f      	ldr	r0, [pc, #444]	; (8004544 <test_scope+0x2d4>)
 8004388:	e000      	b.n	800438c <test_scope+0x11c>
 800438a:	486f      	ldr	r0, [pc, #444]	; (8004548 <test_scope+0x2d8>)
				(i&0x01)?buffer2:buffer6,
 800438c:	4b6c      	ldr	r3, [pc, #432]	; (8004540 <test_scope+0x2d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <test_scope+0x12c>
 8004398:	4b6c      	ldr	r3, [pc, #432]	; (800454c <test_scope+0x2dc>)
 800439a:	e000      	b.n	800439e <test_scope+0x12e>
 800439c:	4b6c      	ldr	r3, [pc, #432]	; (8004550 <test_scope+0x2e0>)
				(i&0x01)?buffer3:buffer7,
 800439e:	4a68      	ldr	r2, [pc, #416]	; (8004540 <test_scope+0x2d0>)
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	f002 0201 	and.w	r2, r2, #1
		scope_init( &scope, 2048, 1000000,
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	d001      	beq.n	80043ae <test_scope+0x13e>
 80043aa:	4a6a      	ldr	r2, [pc, #424]	; (8004554 <test_scope+0x2e4>)
 80043ac:	e000      	b.n	80043b0 <test_scope+0x140>
 80043ae:	4a6a      	ldr	r2, [pc, #424]	; (8004558 <test_scope+0x2e8>)
				(i&0x01)?buffer4:buffer8,
 80043b0:	4963      	ldr	r1, [pc, #396]	; (8004540 <test_scope+0x2d0>)
 80043b2:	6809      	ldr	r1, [r1, #0]
 80043b4:	f001 0101 	and.w	r1, r1, #1
		scope_init( &scope, 2048, 1000000,
 80043b8:	2900      	cmp	r1, #0
 80043ba:	d001      	beq.n	80043c0 <test_scope+0x150>
 80043bc:	4967      	ldr	r1, [pc, #412]	; (800455c <test_scope+0x2ec>)
 80043be:	e000      	b.n	80043c2 <test_scope+0x152>
 80043c0:	4967      	ldr	r1, [pc, #412]	; (8004560 <test_scope+0x2f0>)
 80043c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80043c6:	9403      	str	r4, [sp, #12]
 80043c8:	9102      	str	r1, [sp, #8]
 80043ca:	9201      	str	r2, [sp, #4]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4603      	mov	r3, r0
 80043d0:	f244 2240 	movw	r2, #16960	; 0x4240
 80043d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043d8:	4862      	ldr	r0, [pc, #392]	; (8004564 <test_scope+0x2f4>)
 80043da:	f7ff fc8f 	bl	8003cfc <scope_init>
				BUFFER_LEN );
		scope_start( &scope );
 80043de:	4861      	ldr	r0, [pc, #388]	; (8004564 <test_scope+0x2f4>)
 80043e0:	f7ff fcee 	bl	8003dc0 <scope_start>
		while( scope_is_busy( &scope ) );
 80043e4:	bf00      	nop
 80043e6:	485f      	ldr	r0, [pc, #380]	; (8004564 <test_scope+0x2f4>)
 80043e8:	f7ff fdf1 	bl	8003fce <scope_is_busy>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f9      	bne.n	80043e6 <test_scope+0x176>
		scope_stop( &scope );
 80043f2:	485c      	ldr	r0, [pc, #368]	; (8004564 <test_scope+0x2f4>)
 80043f4:	f7ff fdbc 	bl	8003f70 <scope_stop>




		int _x0 = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
		int x0 = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]
		int y0 = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
		int x1 = 480-1;
 8004404:	f240 13df 	movw	r3, #479	; 0x1df
 8004408:	613b      	str	r3, [r7, #16]
		int y1 = 320-1;
 800440a:	f240 133f 	movw	r3, #319	; 0x13f
 800440e:	60fb      	str	r3, [r7, #12]



		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 8004410:	4854      	ldr	r0, [pc, #336]	; (8004564 <test_scope+0x2f4>)
 8004412:	f7ff fded 	bl	8003ff0 <scope_get_trigger>
 8004416:	4603      	mov	r3, r0
 8004418:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800441c:	60bb      	str	r3, [r7, #8]




		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 800441e:	2300      	movs	r3, #0
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
 8004422:	e1d2      	b.n	80047ca <test_scope+0x55a>
		//for( int jj = 0; jj < BUFFER_LEN; jj++ )
		{
			int j = (jj*BUFFER_LEN)/480.0;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f8a3 	bl	8000574 <__aeabi_i2d>
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	4b4d      	ldr	r3, [pc, #308]	; (8004568 <test_scope+0x2f8>)
 8004434:	f7fc fa32 	bl	800089c <__aeabi_ddiv>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	f7fc fbb2 	bl	8000ba8 <__aeabi_d2iz>
 8004444:	4603      	mov	r3, r0
 8004446:	607b      	str	r3, [r7, #4]
			//int j = jj;
			int n = trigger + j;
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if( n < 0 )
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	2b00      	cmp	r3, #0
 8004454:	da04      	bge.n	8004460 <test_scope+0x1f0>
			{
				n += BUFFER_LEN;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445e:	e007      	b.n	8004470 <test_scope+0x200>
			}
			else if( n >= BUFFER_LEN )
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004466:	db03      	blt.n	8004470 <test_scope+0x200>
			{
				n -= BUFFER_LEN;
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			int n2 = trigger_bck + j;
 8004470:	4b3e      	ldr	r3, [pc, #248]	; (800456c <test_scope+0x2fc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
			if( n2 < 0 )
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	da04      	bge.n	800448a <test_scope+0x21a>
			{
				n2 += BUFFER_LEN;
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
 8004488:	e007      	b.n	800449a <test_scope+0x22a>
			}
			else if( n2 >= BUFFER_LEN )
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	db03      	blt.n	800449a <test_scope+0x22a>
			{
				n2 -= BUFFER_LEN;
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			//printf( "%d, ", buffer[n] );


			x0 = jj;//(j*480)/BUFFER_LEN;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	61bb      	str	r3, [r7, #24]
			y0 = (((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <test_scope+0x2d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <test_scope+0x258>
 80044aa:	4a27      	ldr	r2, [pc, #156]	; (8004548 <test_scope+0x2d8>)
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044b2:	461a      	mov	r2, r3
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da01      	bge.n	80044c4 <test_scope+0x254>
 80044c0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80044c4:	131b      	asrs	r3, r3, #12
 80044c6:	e00d      	b.n	80044e4 <test_scope+0x274>
 80044c8:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <test_scope+0x2d4>)
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da01      	bge.n	80044e2 <test_scope+0x272>
 80044de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80044e2:	131b      	asrs	r3, r3, #12
 80044e4:	617b      	str	r3, [r7, #20]
			y1 = (((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <test_scope+0x2d0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03e      	beq.n	8004570 <test_scope+0x300>
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <test_scope+0x2d4>)
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fa:	461a      	mov	r2, r3
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	019b      	lsls	r3, r3, #6
 8004504:	2b00      	cmp	r3, #0
 8004506:	da01      	bge.n	800450c <test_scope+0x29c>
 8004508:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800450c:	131b      	asrs	r3, r3, #12
 800450e:	e03d      	b.n	800458c <test_scope+0x31c>
 8004510:	54442d18 	.word	0x54442d18
 8004514:	400921fb 	.word	0x400921fb
 8004518:	200115f4 	.word	0x200115f4
 800451c:	40400000 	.word	0x40400000
 8004520:	40900000 	.word	0x40900000
 8004524:	447fc000 	.word	0x447fc000
 8004528:	45000000 	.word	0x45000000
 800452c:	200115f8 	.word	0x200115f8
 8004530:	20011df8 	.word	0x20011df8
 8004534:	e0042000 	.word	0xe0042000
 8004538:	2000052c 	.word	0x2000052c
 800453c:	2001675c 	.word	0x2001675c
 8004540:	20016654 	.word	0x20016654
 8004544:	200125f8 	.word	0x200125f8
 8004548:	200145f8 	.word	0x200145f8
 800454c:	20012df8 	.word	0x20012df8
 8004550:	20014df8 	.word	0x20014df8
 8004554:	200135f8 	.word	0x200135f8
 8004558:	200155f8 	.word	0x200155f8
 800455c:	20013df8 	.word	0x20013df8
 8004560:	20015df8 	.word	0x20015df8
 8004564:	200165f8 	.word	0x200165f8
 8004568:	407e0000 	.word	0x407e0000
 800456c:	20016658 	.word	0x20016658
 8004570:	4a9e      	ldr	r2, [pc, #632]	; (80047ec <test_scope+0x57c>)
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004578:	461a      	mov	r2, r3
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	019b      	lsls	r3, r3, #6
 8004582:	2b00      	cmp	r3, #0
 8004584:	da01      	bge.n	800458a <test_scope+0x31a>
 8004586:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800458a:	131b      	asrs	r3, r3, #12
 800458c:	60fb      	str	r3, [r7, #12]
			extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
			lcd_set_pixel( x0, y0, 0x00000000 );
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	b21b      	sxth	r3, r3
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	b211      	sxth	r1, r2
 8004596:	2200      	movs	r2, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f7fd fc05 	bl	8001da8 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x00003F00 );
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	b21b      	sxth	r3, r3
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	b211      	sxth	r1, r2
 80045a6:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fbfc 	bl	8001da8 <lcd_set_pixel>

			y0 = (((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 80045b0:	4b8f      	ldr	r3, [pc, #572]	; (80047f0 <test_scope+0x580>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <test_scope+0x36a>
 80045bc:	4a8d      	ldr	r2, [pc, #564]	; (80047f4 <test_scope+0x584>)
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da01      	bge.n	80045d6 <test_scope+0x366>
 80045d2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80045d6:	131b      	asrs	r3, r3, #12
 80045d8:	e00d      	b.n	80045f6 <test_scope+0x386>
 80045da:	4a87      	ldr	r2, [pc, #540]	; (80047f8 <test_scope+0x588>)
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	019b      	lsls	r3, r3, #6
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da01      	bge.n	80045f4 <test_scope+0x384>
 80045f0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80045f4:	131b      	asrs	r3, r3, #12
 80045f6:	617b      	str	r3, [r7, #20]
			y1 = (((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 80045f8:	4b7d      	ldr	r3, [pc, #500]	; (80047f0 <test_scope+0x580>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <test_scope+0x3b2>
 8004604:	4a7c      	ldr	r2, [pc, #496]	; (80047f8 <test_scope+0x588>)
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800460c:	461a      	mov	r2, r3
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	2b00      	cmp	r3, #0
 8004618:	da01      	bge.n	800461e <test_scope+0x3ae>
 800461a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800461e:	131b      	asrs	r3, r3, #12
 8004620:	e00d      	b.n	800463e <test_scope+0x3ce>
 8004622:	4a74      	ldr	r2, [pc, #464]	; (80047f4 <test_scope+0x584>)
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800462a:	461a      	mov	r2, r3
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	019b      	lsls	r3, r3, #6
 8004634:	2b00      	cmp	r3, #0
 8004636:	da01      	bge.n	800463c <test_scope+0x3cc>
 8004638:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800463c:	131b      	asrs	r3, r3, #12
 800463e:	60fb      	str	r3, [r7, #12]
			lcd_set_pixel( x0, y0, 0x00000000 );
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	b21b      	sxth	r3, r3
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	b211      	sxth	r1, r2
 8004648:	2200      	movs	r2, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fbac 	bl	8001da8 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x01C00007 );
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	b21b      	sxth	r3, r3
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	b211      	sxth	r1, r2
 8004658:	4a68      	ldr	r2, [pc, #416]	; (80047fc <test_scope+0x58c>)
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd fba4 	bl	8001da8 <lcd_set_pixel>

			y0 = (((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8004660:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <test_scope+0x580>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <test_scope+0x41a>
 800466c:	4a64      	ldr	r2, [pc, #400]	; (8004800 <test_scope+0x590>)
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004674:	461a      	mov	r2, r3
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	2b00      	cmp	r3, #0
 8004680:	da01      	bge.n	8004686 <test_scope+0x416>
 8004682:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004686:	131b      	asrs	r3, r3, #12
 8004688:	e00d      	b.n	80046a6 <test_scope+0x436>
 800468a:	4a5e      	ldr	r2, [pc, #376]	; (8004804 <test_scope+0x594>)
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004692:	461a      	mov	r2, r3
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	019b      	lsls	r3, r3, #6
 800469c:	2b00      	cmp	r3, #0
 800469e:	da01      	bge.n	80046a4 <test_scope+0x434>
 80046a0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80046a4:	131b      	asrs	r3, r3, #12
 80046a6:	617b      	str	r3, [r7, #20]
			y1 = (((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 80046a8:	4b51      	ldr	r3, [pc, #324]	; (80047f0 <test_scope+0x580>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <test_scope+0x462>
 80046b4:	4a53      	ldr	r2, [pc, #332]	; (8004804 <test_scope+0x594>)
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046bc:	461a      	mov	r2, r3
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da01      	bge.n	80046ce <test_scope+0x45e>
 80046ca:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80046ce:	131b      	asrs	r3, r3, #12
 80046d0:	e00d      	b.n	80046ee <test_scope+0x47e>
 80046d2:	4a4b      	ldr	r2, [pc, #300]	; (8004800 <test_scope+0x590>)
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046da:	461a      	mov	r2, r3
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	019b      	lsls	r3, r3, #6
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da01      	bge.n	80046ec <test_scope+0x47c>
 80046e8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80046ec:	131b      	asrs	r3, r3, #12
 80046ee:	60fb      	str	r3, [r7, #12]
			lcd_set_pixel( x0, y0, 0x00000000 );
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	b21b      	sxth	r3, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	b211      	sxth	r1, r2
 80046f8:	2200      	movs	r2, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fd fb54 	bl	8001da8 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x000001F8 );
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	b21b      	sxth	r3, r3
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	b211      	sxth	r1, r2
 8004708:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800470c:	4618      	mov	r0, r3
 800470e:	f7fd fb4b 	bl	8001da8 <lcd_set_pixel>

			y0 = (((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8004712:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <test_scope+0x580>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00e      	beq.n	800473c <test_scope+0x4cc>
 800471e:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <test_scope+0x598>)
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004726:	461a      	mov	r2, r3
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	019b      	lsls	r3, r3, #6
 8004730:	2b00      	cmp	r3, #0
 8004732:	da01      	bge.n	8004738 <test_scope+0x4c8>
 8004734:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004738:	131b      	asrs	r3, r3, #12
 800473a:	e00d      	b.n	8004758 <test_scope+0x4e8>
 800473c:	4a33      	ldr	r2, [pc, #204]	; (800480c <test_scope+0x59c>)
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004744:	461a      	mov	r2, r3
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	2b00      	cmp	r3, #0
 8004750:	da01      	bge.n	8004756 <test_scope+0x4e6>
 8004752:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004756:	131b      	asrs	r3, r3, #12
 8004758:	617b      	str	r3, [r7, #20]
			y1 = (((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 800475a:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <test_scope+0x580>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <test_scope+0x514>
 8004766:	4a29      	ldr	r2, [pc, #164]	; (800480c <test_scope+0x59c>)
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800476e:	461a      	mov	r2, r3
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	019b      	lsls	r3, r3, #6
 8004778:	2b00      	cmp	r3, #0
 800477a:	da01      	bge.n	8004780 <test_scope+0x510>
 800477c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004780:	131b      	asrs	r3, r3, #12
 8004782:	e00d      	b.n	80047a0 <test_scope+0x530>
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <test_scope+0x598>)
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800478c:	461a      	mov	r2, r3
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	2b00      	cmp	r3, #0
 8004798:	da01      	bge.n	800479e <test_scope+0x52e>
 800479a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800479e:	131b      	asrs	r3, r3, #12
 80047a0:	60fb      	str	r3, [r7, #12]
			lcd_set_pixel( x0, y0, 0x00000000 );
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	b21b      	sxth	r3, r3
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	b211      	sxth	r1, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fd fafb 	bl	8001da8 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	b21b      	sxth	r3, r3
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	b211      	sxth	r1, r2
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd faf2 	bl	8001da8 <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	3301      	adds	r3, #1
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80047d0:	f6ff ae28 	blt.w	8004424 <test_scope+0x1b4>

		}
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <test_scope+0x580>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <test_scope+0x580>)
 80047dc:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 80047de:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <test_scope+0x5a0>)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6013      	str	r3, [r2, #0]
		//HAL_Delay( 10 );
	}
}
 80047e4:	bf00      	nop
 80047e6:	3738      	adds	r7, #56	; 0x38
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bdb0      	pop	{r4, r5, r7, pc}
 80047ec:	200145f8 	.word	0x200145f8
 80047f0:	20016654 	.word	0x20016654
 80047f4:	20014df8 	.word	0x20014df8
 80047f8:	20012df8 	.word	0x20012df8
 80047fc:	01c00007 	.word	0x01c00007
 8004800:	200155f8 	.word	0x200155f8
 8004804:	200135f8 	.word	0x200135f8
 8004808:	20015df8 	.word	0x20015df8
 800480c:	20013df8 	.word	0x20013df8
 8004810:	20016658 	.word	0x20016658

08004814 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <MX_SPI3_Init+0x74>)
 800481a:	4a1c      	ldr	r2, [pc, #112]	; (800488c <MX_SPI3_Init+0x78>)
 800481c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <MX_SPI3_Init+0x74>)
 8004820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004824:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <MX_SPI3_Init+0x74>)
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800482c:	4b16      	ldr	r3, [pc, #88]	; (8004888 <MX_SPI3_Init+0x74>)
 800482e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004832:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <MX_SPI3_Init+0x74>)
 8004836:	2200      	movs	r2, #0
 8004838:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <MX_SPI3_Init+0x74>)
 800483c:	2200      	movs	r2, #0
 800483e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <MX_SPI3_Init+0x74>)
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <MX_SPI3_Init+0x74>)
 800484a:	2230      	movs	r2, #48	; 0x30
 800484c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800484e:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <MX_SPI3_Init+0x74>)
 8004850:	2200      	movs	r2, #0
 8004852:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <MX_SPI3_Init+0x74>)
 8004856:	2200      	movs	r2, #0
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <MX_SPI3_Init+0x74>)
 800485c:	2200      	movs	r2, #0
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <MX_SPI3_Init+0x74>)
 8004862:	2207      	movs	r2, #7
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <MX_SPI3_Init+0x74>)
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <MX_SPI3_Init+0x74>)
 800486e:	2200      	movs	r2, #0
 8004870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004872:	4805      	ldr	r0, [pc, #20]	; (8004888 <MX_SPI3_Init+0x74>)
 8004874:	f005 fc9e 	bl	800a1b4 <HAL_SPI_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800487e:	f7fe ff80 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2001665c 	.word	0x2001665c
 800488c:	40003c00 	.word	0x40003c00

08004890 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <HAL_SPI_MspInit+0x7c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d128      	bne.n	8004904 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80048b2:	4b17      	ldr	r3, [pc, #92]	; (8004910 <HAL_SPI_MspInit+0x80>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_SPI_MspInit+0x80>)
 80048b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048bc:	6593      	str	r3, [r2, #88]	; 0x58
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <HAL_SPI_MspInit+0x80>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_SPI_MspInit+0x80>)
 80048cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <HAL_SPI_MspInit+0x80>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <HAL_SPI_MspInit+0x80>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80048e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80048e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	2302      	movs	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80048f4:	2306      	movs	r3, #6
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4619      	mov	r1, r3
 80048fe:	4805      	ldr	r0, [pc, #20]	; (8004914 <HAL_SPI_MspInit+0x84>)
 8004900:	f003 fed8 	bl	80086b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004904:	bf00      	nop
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40003c00 	.word	0x40003c00
 8004910:	40021000 	.word	0x40021000
 8004914:	48000800 	.word	0x48000800

08004918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <HAL_MspInit+0x48>)
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <HAL_MspInit+0x48>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6613      	str	r3, [r2, #96]	; 0x60
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_MspInit+0x48>)
 800492c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_MspInit+0x48>)
 8004938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <HAL_MspInit+0x48>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004940:	6593      	str	r3, [r2, #88]	; 0x58
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_MspInit+0x48>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800494e:	f000 fb97 	bl	8005080 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8004952:	2002      	movs	r0, #2
 8004954:	f000 fb80 	bl	8005058 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000

08004964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004968:	e7fe      	b.n	8004968 <NMI_Handler+0x4>

0800496a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800496e:	e7fe      	b.n	800496e <HardFault_Handler+0x4>

08004970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004974:	e7fe      	b.n	8004974 <MemManage_Handler+0x4>

08004976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800497a:	e7fe      	b.n	800497a <BusFault_Handler+0x4>

0800497c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004980:	e7fe      	b.n	8004980 <UsageFault_Handler+0x4>

08004982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b0:	f000 fb12 	bl	8004fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <DMA1_Channel1_IRQHandler+0x10>)
 80049be:	f003 fd2a 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20011580 	.word	0x20011580

080049cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <DMA1_Channel2_IRQHandler+0x10>)
 80049d2:	f003 fd20 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200003a8 	.word	0x200003a8

080049e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80049e4:	4802      	ldr	r0, [pc, #8]	; (80049f0 <DMA1_Channel3_IRQHandler+0x10>)
 80049e6:	f003 fd16 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000554 	.word	0x20000554

080049f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80049f8:	4802      	ldr	r0, [pc, #8]	; (8004a04 <DMA1_Channel4_IRQHandler+0x10>)
 80049fa:	f003 fd0c 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200005b4 	.word	0x200005b4

08004a08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004a0c:	4802      	ldr	r0, [pc, #8]	; (8004a18 <DMA1_Channel5_IRQHandler+0x10>)
 8004a0e:	f003 fd02 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000408 	.word	0x20000408

08004a1c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <DMA1_Channel6_IRQHandler+0x10>)
 8004a22:	f003 fcf8 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000468 	.word	0x20000468

08004a30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004a34:	4802      	ldr	r0, [pc, #8]	; (8004a40 <DMA1_Channel7_IRQHandler+0x10>)
 8004a36:	f003 fcee 	bl	8008416 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200004c8 	.word	0x200004c8

08004a44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <ADC1_2_IRQHandler+0x1c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <ADC1_2_IRQHandler+0x20>)
 8004a52:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004a54:	4804      	ldr	r0, [pc, #16]	; (8004a68 <ADC1_2_IRQHandler+0x24>)
 8004a56:	f001 f985 	bl	8005d64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200003a8 	.word	0x200003a8
 8004a64:	200115e4 	.word	0x200115e4
 8004a68:	200001f8 	.word	0x200001f8

08004a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <TIM2_IRQHandler+0x1c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <TIM2_IRQHandler+0x20>)
 8004a7a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a7c:	4804      	ldr	r0, [pc, #16]	; (8004a90 <TIM2_IRQHandler+0x24>)
 8004a7e:	f006 fa79 	bl	800af74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200003a8 	.word	0x200003a8
 8004a8c:	200115e8 	.word	0x200115e8
 8004a90:	20016710 	.word	0x20016710

08004a94 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <QUADSPI_IRQHandler+0x10>)
 8004a9a:	f004 f9c7 	bl	8008e2c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20011534 	.word	0x20011534

08004aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return 1;
 8004aac:	2301      	movs	r3, #1
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <_kill>:

int _kill(int pid, int sig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ac2:	f018 fd3b 	bl	801d53c <__errno>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2216      	movs	r2, #22
 8004aca:	601a      	str	r2, [r3, #0]
  return -1;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_exit>:

void _exit (int status)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffe7 	bl	8004ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004aea:	e7fe      	b.n	8004aea <_exit+0x12>

08004aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e00a      	b.n	8004b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004afe:	f3af 8000 	nop.w
 8004b02:	4601      	mov	r1, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	60ba      	str	r2, [r7, #8]
 8004b0a:	b2ca      	uxtb	r2, r1
 8004b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3301      	adds	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	dbf0      	blt.n	8004afe <_read+0x12>
  }

  return len;
 8004b1c:	687b      	ldr	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <_isatty>:

int _isatty(int file)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b66:	2301      	movs	r3, #1
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b98:	4a14      	ldr	r2, [pc, #80]	; (8004bec <_sbrk+0x5c>)
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <_sbrk+0x60>)
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <_sbrk+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <_sbrk+0x64>)
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <_sbrk+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d207      	bcs.n	8004bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc0:	f018 fcbc 	bl	801d53c <__errno>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	e009      	b.n	8004be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <_sbrk+0x64>)
 8004be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20020000 	.word	0x20020000
 8004bf0:	00000400 	.word	0x00000400
 8004bf4:	200166c0 	.word	0x200166c0
 8004bf8:	200168f8 	.word	0x200168f8

08004bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <SystemInit+0x20>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <SystemInit+0x20>)
 8004c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000ed00 	.word	0xe000ed00

08004c20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c26:	f107 0310 	add.w	r3, r7, #16
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c3e:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <MX_TIM1_Init+0xa0>)
 8004c42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c46:	2254      	movs	r2, #84	; 0x54
 8004c48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c4a:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c56:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c5c:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c68:	4814      	ldr	r0, [pc, #80]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c6a:	f005 ff0d 	bl	800aa88 <HAL_TIM_Base_Init>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004c74:	f7fe fd85 	bl	8003782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c7e:	f107 0310 	add.w	r3, r7, #16
 8004c82:	4619      	mov	r1, r3
 8004c84:	480d      	ldr	r0, [pc, #52]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004c86:	f006 fb6f 	bl	800b368 <HAL_TIM_ConfigClockSource>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004c90:	f7fe fd77 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c94:	2320      	movs	r3, #32
 8004c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4805      	ldr	r0, [pc, #20]	; (8004cbc <MX_TIM1_Init+0x9c>)
 8004ca6:	f007 f927 	bl	800bef8 <HAL_TIMEx_MasterConfigSynchronization>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004cb0:	f7fe fd67 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004cb4:	bf00      	nop
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	200166c4 	.word	0x200166c4
 8004cc0:	40012c00 	.word	0x40012c00

08004cc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	609a      	str	r2, [r3, #8]
 8004cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd8:	f107 031c 	add.w	r3, r7, #28
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	611a      	str	r2, [r3, #16]
 8004cf2:	615a      	str	r2, [r3, #20]
 8004cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85-1;
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d00:	2254      	movs	r2, #84	; 0x54
 8004d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d04:	4b28      	ldr	r3, [pc, #160]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d12:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d18:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d1e:	4822      	ldr	r0, [pc, #136]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d20:	f005 feb2 	bl	800aa88 <HAL_TIM_Base_Init>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004d2a:	f7fe fd2a 	bl	8003782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d38:	4619      	mov	r1, r3
 8004d3a:	481b      	ldr	r0, [pc, #108]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d3c:	f006 fb14 	bl	800b368 <HAL_TIM_ConfigClockSource>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004d46:	f7fe fd1c 	bl	8003782 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8004d4a:	4817      	ldr	r0, [pc, #92]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d4c:	f005 ff8b 	bl	800ac66 <HAL_TIM_OC_Init>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004d56:	f7fe fd14 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d62:	f107 031c 	add.w	r3, r7, #28
 8004d66:	4619      	mov	r1, r3
 8004d68:	480f      	ldr	r0, [pc, #60]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d6a:	f007 f8c5 	bl	800bef8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004d74:	f7fe fd05 	bl	8003782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1023;
 8004d7c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004d80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4805      	ldr	r0, [pc, #20]	; (8004da8 <MX_TIM2_Init+0xe4>)
 8004d92:	f006 fa6f 	bl	800b274 <HAL_TIM_OC_ConfigChannel>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004d9c:	f7fe fcf1 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004da0:	bf00      	nop
 8004da2:	3738      	adds	r7, #56	; 0x38
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20016710 	.word	0x20016710

08004dac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004db2:	f107 0310 	add.w	r3, r7, #16
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dc0:	1d3b      	adds	r3, r7, #4
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004dca:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	; (8004e44 <MX_TIM3_Init+0x98>)
 8004dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85-1;
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004dd2:	2254      	movs	r2, #84	; 0x54
 8004dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004dde:	2201      	movs	r2, #1
 8004de0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004dee:	4814      	ldr	r0, [pc, #80]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004df0:	f005 fe4a 	bl	800aa88 <HAL_TIM_Base_Init>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004dfa:	f7fe fcc2 	bl	8003782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e04:	f107 0310 	add.w	r3, r7, #16
 8004e08:	4619      	mov	r1, r3
 8004e0a:	480d      	ldr	r0, [pc, #52]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004e0c:	f006 faac 	bl	800b368 <HAL_TIM_ConfigClockSource>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004e16:	f7fe fcb4 	bl	8003782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e22:	1d3b      	adds	r3, r7, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4806      	ldr	r0, [pc, #24]	; (8004e40 <MX_TIM3_Init+0x94>)
 8004e28:	f007 f866 	bl	800bef8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004e32:	f7fe fca6 	bl	8003782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004e36:	bf00      	nop
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2001675c 	.word	0x2001675c
 8004e44:	40000400 	.word	0x40000400

08004e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10c      	bne.n	8004e74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e64:	6613      	str	r3, [r2, #96]	; 0x60
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004e72:	e02a      	b.n	8004eca <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d114      	bne.n	8004ea8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6593      	str	r3, [r2, #88]	; 0x58
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e96:	2200      	movs	r2, #0
 8004e98:	2100      	movs	r1, #0
 8004e9a:	201c      	movs	r0, #28
 8004e9c:	f002 fce9 	bl	8007872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ea0:	201c      	movs	r0, #28
 8004ea2:	f002 fd00 	bl	80078a6 <HAL_NVIC_EnableIRQ>
}
 8004ea6:	e010      	b.n	8004eca <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <HAL_TIM_Base_MspInit+0x94>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10b      	bne.n	8004eca <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_TIM_Base_MspInit+0x90>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
}
 8004eca:	bf00      	nop
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	40000400 	.word	0x40000400

08004ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ee0:	480d      	ldr	r0, [pc, #52]	; (8004f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ee2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ee4:	480d      	ldr	r0, [pc, #52]	; (8004f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8004ee6:	490e      	ldr	r1, [pc, #56]	; (8004f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ee8:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <LoopForever+0xe>)
  movs r3, #0
 8004eea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004eec:	e002      	b.n	8004ef4 <LoopCopyDataInit>

08004eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ef2:	3304      	adds	r3, #4

08004ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ef8:	d3f9      	bcc.n	8004eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004efa:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004efc:	4c0b      	ldr	r4, [pc, #44]	; (8004f2c <LoopForever+0x16>)
  movs r3, #0
 8004efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f00:	e001      	b.n	8004f06 <LoopFillZerobss>

08004f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f04:	3204      	adds	r2, #4

08004f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f08:	d3fb      	bcc.n	8004f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f0a:	f7ff fe77 	bl	8004bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f0e:	f018 fb1b 	bl	801d548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f12:	f7fe f8c7 	bl	80030a4 <main>

08004f16 <LoopForever>:

LoopForever:
    b LoopForever
 8004f16:	e7fe      	b.n	8004f16 <LoopForever>
  ldr   r0, =_estack
 8004f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f20:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004f24:	080220e0 	.word	0x080220e0
  ldr r2, =_sbss
 8004f28:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004f2c:	200168f8 	.word	0x200168f8

08004f30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f30:	e7fe      	b.n	8004f30 <ADC3_IRQHandler>

08004f32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f3c:	2003      	movs	r0, #3
 8004f3e:	f002 fc8d 	bl	800785c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f42:	2000      	movs	r0, #0
 8004f44:	f000 f80e 	bl	8004f64 <HAL_InitTick>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	71fb      	strb	r3, [r7, #7]
 8004f52:	e001      	b.n	8004f58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f54:	f7ff fce0 	bl	8004918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f58:	79fb      	ldrb	r3, [r7, #7]

}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <HAL_InitTick+0x68>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d022      	beq.n	8004fbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004f78:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <HAL_InitTick+0x6c>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_InitTick+0x68>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f002 fc98 	bl	80078c2 <HAL_SYSTICK_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10f      	bne.n	8004fb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d809      	bhi.n	8004fb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	f002 fc64 	bl	8007872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <HAL_InitTick+0x70>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e007      	b.n	8004fc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e004      	b.n	8004fc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e001      	b.n	8004fc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000010 	.word	0x20000010
 8004fd0:	20000008 	.word	0x20000008
 8004fd4:	2000000c 	.word	0x2000000c

08004fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_IncTick+0x1c>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_IncTick+0x20>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4a03      	ldr	r2, [pc, #12]	; (8004ff4 <HAL_IncTick+0x1c>)
 8004fe8:	6013      	str	r3, [r2, #0]
}
 8004fea:	bf00      	nop
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	200167a8 	.word	0x200167a8
 8004ff8:	20000010 	.word	0x20000010

08004ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8005000:	4b03      	ldr	r3, [pc, #12]	; (8005010 <HAL_GetTick+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	200167a8 	.word	0x200167a8

08005014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800501c:	f7ff ffee 	bl	8004ffc <HAL_GetTick>
 8005020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d004      	beq.n	8005038 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <HAL_Delay+0x40>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005038:	bf00      	nop
 800503a:	f7ff ffdf 	bl	8004ffc <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	429a      	cmp	r2, r3
 8005048:	d8f7      	bhi.n	800503a <HAL_Delay+0x26>
  {
  }
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000010 	.word	0x20000010

08005058 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 0202 	bic.w	r2, r3, #2
 8005068:	4904      	ldr	r1, [pc, #16]	; (800507c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4313      	orrs	r3, r2
 800506e:	600b      	str	r3, [r1, #0]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40010030 	.word	0x40010030

08005080 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a04      	ldr	r2, [pc, #16]	; (800509c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010030 	.word	0x40010030

080050a0 <LL_ADC_SetCommonClock>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	609a      	str	r2, [r3, #8]
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LL_ADC_SetCommonPathInternalCh>:
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	609a      	str	r2, [r3, #8]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_ADC_GetCommonPathInternalCh>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_ADC_SetOffset>:
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3360      	adds	r3, #96	; 0x60
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <LL_ADC_SetOffset+0x44>)
 800512a:	4013      	ands	r3, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	4313      	orrs	r3, r2
 8005138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	03fff000 	.word	0x03fff000

08005150 <LL_ADC_GetOffsetChannel>:
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3360      	adds	r3, #96	; 0x60
 800515e:	461a      	mov	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_ADC_SetOffsetState>:
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3360      	adds	r3, #96	; 0x60
 800518c:	461a      	mov	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_ADC_SetOffsetSign>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3360      	adds	r3, #96	; 0x60
 80051c2:	461a      	mov	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <LL_ADC_SetOffsetSaturation>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3360      	adds	r3, #96	; 0x60
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	431a      	orrs	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	601a      	str	r2, [r3, #0]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	615a      	str	r2, [r3, #20]
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_ADC_REG_SetSequencerRanks>:
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3330      	adds	r3, #48	; 0x30
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	4413      	add	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	211f      	movs	r1, #31
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	401a      	ands	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0e9b      	lsrs	r3, r3, #26
 80052a2:	f003 011f 	and.w	r1, r3, #31
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	431a      	orrs	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_ADC_SetChannelSamplingTime>:
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3314      	adds	r3, #20
 80052f8:	461a      	mov	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0e5b      	lsrs	r3, r3, #25
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	0d1b      	lsrs	r3, r3, #20
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2107      	movs	r1, #7
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	43db      	mvns	r3, r3
 800531c:	401a      	ands	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	0d1b      	lsrs	r3, r3, #20
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	431a      	orrs	r2, r3
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <LL_ADC_SetChannelSingleDiff>:
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a0f      	ldr	r2, [pc, #60]	; (800538c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10a      	bne.n	800536a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005368:	e00a      	b.n	8005380 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005376:	43db      	mvns	r3, r3
 8005378:	401a      	ands	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	407f0000 	.word	0x407f0000

08005390 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	330c      	adds	r3, #12
 80053a0:	4618      	mov	r0, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0d1b      	lsrs	r3, r3, #20
 80053a6:	f003 0103 	and.w	r1, r3, #3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 0201 	and.w	r2, r3, #1
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4403      	add	r3, r0
 80053be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80053ca:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80053ce:	43db      	mvns	r3, r3
 80053d0:	401a      	ands	r2, r3
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	400b      	ands	r3, r1
 80053d8:	431a      	orrs	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <LL_ADC_ConfigAnalogWDThresholds>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	b087      	sub	sp, #28
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3320      	adds	r3, #32
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	0d1b      	lsrs	r3, r3, #20
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	4413      	add	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	0419      	lsls	r1, r3, #16
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	430b      	orrs	r3, r1
 800541c:	431a      	orrs	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_ADC_GetMultimode>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_ADC_GetMultiDMATransfer>:
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <LL_ADC_DisableDeepPowerDown>:
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005476:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6093      	str	r3, [r2, #8]
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <LL_ADC_IsDeepPowerDownEnabled>:
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800549a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549e:	d101      	bne.n	80054a4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <LL_ADC_EnableInternalRegulator>:
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80054c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <LL_ADC_IsInternalRegulatorEnabled>:
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ee:	d101      	bne.n	80054f4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <LL_ADC_Enable>:
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005512:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005516:	f043 0201 	orr.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <LL_ADC_Disable>:
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800553a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800553e:	f043 0202 	orr.w	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_ADC_IsEnabled>:
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <LL_ADC_IsEnabled+0x18>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <LL_ADC_IsEnabled+0x1a>
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_ADC_IsDisableOngoing>:
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d101      	bne.n	8005590 <LL_ADC_IsDisableOngoing+0x18>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <LL_ADC_IsDisableOngoing+0x1a>
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <LL_ADC_REG_StartConversion>:
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055b2:	f043 0204 	orr.w	r2, r3, #4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_ADC_REG_StopConversion>:
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055da:	f043 0210 	orr.w	r2, r3, #16
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_ADC_REG_IsConversionOngoing>:
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d101      	bne.n	8005606 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_ADC_INJ_StopConversion>:
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_ADC_INJ_IsConversionOngoing>:
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b08      	cmp	r3, #8
 800564e:	d101      	bne.n	8005654 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <LL_ADC_ClearFlag_AWD1>:
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	601a      	str	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <LL_ADC_ClearFlag_AWD2>:
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568a:	601a      	str	r2, [r3, #0]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_ADC_ClearFlag_AWD3>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <LL_ADC_EnableIT_AWD1>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_ADC_EnableIT_AWD2>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_ADC_EnableIT_AWD3>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <LL_ADC_DisableIT_AWD1>:
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	605a      	str	r2, [r3, #4]
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <LL_ADC_DisableIT_AWD2>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	605a      	str	r2, [r3, #4]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1af      	b.n	8005aee <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fb fc9f 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fe68 	bl	800548a <LL_ADC_IsDeepPowerDownEnabled>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fe4e 	bl	8005466 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff fe83 	bl	80054da <LL_ADC_IsInternalRegulatorEnabled>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d115      	bne.n	8005806 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fe67 	bl	80054b2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057e4:	4b9f      	ldr	r3, [pc, #636]	; (8005a64 <HAL_ADC_Init+0x2f0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	099b      	lsrs	r3, r3, #6
 80057ea:	4a9f      	ldr	r2, [pc, #636]	; (8005a68 <HAL_ADC_Init+0x2f4>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	099b      	lsrs	r3, r3, #6
 80057f2:	3301      	adds	r3, #1
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80057f8:	e002      	b.n	8005800 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f9      	bne.n	80057fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fe65 	bl	80054da <LL_ADC_IsInternalRegulatorEnabled>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10d      	bne.n	8005832 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581a:	f043 0210 	orr.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	f043 0201 	orr.w	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fed9 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 800583c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 8148 	bne.w	8005adc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 8144 	bne.w	8005adc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800585c:	f043 0202 	orr.w	r2, r3, #2
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fe72 	bl	8005552 <LL_ADC_IsEnabled>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d141      	bne.n	80058f8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800587c:	d004      	beq.n	8005888 <HAL_ADC_Init+0x114>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a7a      	ldr	r2, [pc, #488]	; (8005a6c <HAL_ADC_Init+0x2f8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10f      	bne.n	80058a8 <HAL_ADC_Init+0x134>
 8005888:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800588c:	f7ff fe61 	bl	8005552 <LL_ADC_IsEnabled>
 8005890:	4604      	mov	r4, r0
 8005892:	4876      	ldr	r0, [pc, #472]	; (8005a6c <HAL_ADC_Init+0x2f8>)
 8005894:	f7ff fe5d 	bl	8005552 <LL_ADC_IsEnabled>
 8005898:	4603      	mov	r3, r0
 800589a:	4323      	orrs	r3, r4
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e012      	b.n	80058ce <HAL_ADC_Init+0x15a>
 80058a8:	4871      	ldr	r0, [pc, #452]	; (8005a70 <HAL_ADC_Init+0x2fc>)
 80058aa:	f7ff fe52 	bl	8005552 <LL_ADC_IsEnabled>
 80058ae:	4604      	mov	r4, r0
 80058b0:	4870      	ldr	r0, [pc, #448]	; (8005a74 <HAL_ADC_Init+0x300>)
 80058b2:	f7ff fe4e 	bl	8005552 <LL_ADC_IsEnabled>
 80058b6:	4603      	mov	r3, r0
 80058b8:	431c      	orrs	r4, r3
 80058ba:	486f      	ldr	r0, [pc, #444]	; (8005a78 <HAL_ADC_Init+0x304>)
 80058bc:	f7ff fe49 	bl	8005552 <LL_ADC_IsEnabled>
 80058c0:	4603      	mov	r3, r0
 80058c2:	4323      	orrs	r3, r4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d012      	beq.n	80058f8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058da:	d004      	beq.n	80058e6 <HAL_ADC_Init+0x172>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a62      	ldr	r2, [pc, #392]	; (8005a6c <HAL_ADC_Init+0x2f8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_ADC_Init+0x176>
 80058e6:	4a65      	ldr	r2, [pc, #404]	; (8005a7c <HAL_ADC_Init+0x308>)
 80058e8:	e000      	b.n	80058ec <HAL_ADC_Init+0x178>
 80058ea:	4a65      	ldr	r2, [pc, #404]	; (8005a80 <HAL_ADC_Init+0x30c>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7ff fbd4 	bl	80050a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7f5b      	ldrb	r3, [r3, #29]
 80058fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005902:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005908:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800590e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005916:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005918:	4313      	orrs	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005922:	2b01      	cmp	r3, #1
 8005924:	d106      	bne.n	8005934 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	3b01      	subs	r3, #1
 800592c:	045b      	lsls	r3, r3, #17
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	4b4b      	ldr	r3, [pc, #300]	; (8005a84 <HAL_ADC_Init+0x310>)
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	69b9      	ldr	r1, [r7, #24]
 8005960:	430b      	orrs	r3, r1
 8005962:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fe35 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8005984:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fe56 	bl	800563c <LL_ADC_INJ_IsConversionOngoing>
 8005990:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d17f      	bne.n	8005a98 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d17c      	bne.n	8005a98 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ba:	f023 0302 	bic.w	r3, r3, #2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	69b9      	ldr	r1, [r7, #24]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d017      	beq.n	8005a00 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80059de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80059e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80059ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6911      	ldr	r1, [r2, #16]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80059fe:	e013      	b.n	8005a28 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d12a      	bne.n	8005a88 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a3c:	f023 0304 	bic.w	r3, r3, #4
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005a4e:	4311      	orrs	r1, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a54:	430a      	orrs	r2, r1
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0201 	orr.w	r2, r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	e019      	b.n	8005a98 <HAL_ADC_Init+0x324>
 8005a64:	20000008 	.word	0x20000008
 8005a68:	053e2d63 	.word	0x053e2d63
 8005a6c:	50000100 	.word	0x50000100
 8005a70:	50000400 	.word	0x50000400
 8005a74:	50000500 	.word	0x50000500
 8005a78:	50000600 	.word	0x50000600
 8005a7c:	50000300 	.word	0x50000300
 8005a80:	50000700 	.word	0x50000700
 8005a84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10c      	bne.n	8005aba <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	f023 010f 	bic.w	r1, r3, #15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ab8:	e007      	b.n	8005aca <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 020f 	bic.w	r2, r2, #15
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ada:	e007      	b.n	8005aec <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae0:	f043 0210 	orr.w	r2, r3, #16
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3724      	adds	r7, #36	; 0x24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd90      	pop	{r4, r7, pc}
 8005af6:	bf00      	nop

08005af8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b0c:	d004      	beq.n	8005b18 <HAL_ADC_Start_DMA+0x20>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a5a      	ldr	r2, [pc, #360]	; (8005c7c <HAL_ADC_Start_DMA+0x184>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_ADC_Start_DMA+0x24>
 8005b18:	4b59      	ldr	r3, [pc, #356]	; (8005c80 <HAL_ADC_Start_DMA+0x188>)
 8005b1a:	e000      	b.n	8005b1e <HAL_ADC_Start_DMA+0x26>
 8005b1c:	4b59      	ldr	r3, [pc, #356]	; (8005c84 <HAL_ADC_Start_DMA+0x18c>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fc85 	bl	800542e <LL_ADC_GetMultimode>
 8005b24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fd5f 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 809b 	bne.w	8005c6e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_ADC_Start_DMA+0x4e>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e096      	b.n	8005c74 <HAL_ADC_Start_DMA+0x17c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4d      	ldr	r2, [pc, #308]	; (8005c88 <HAL_ADC_Start_DMA+0x190>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d008      	beq.n	8005b6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d002      	beq.n	8005b6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	d17a      	bne.n	8005c60 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 fa6c 	bl	8007048 <ADC_Enable>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d16d      	bne.n	8005c56 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3a      	ldr	r2, [pc, #232]	; (8005c7c <HAL_ADC_Start_DMA+0x184>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_ADC_Start_DMA+0xb4>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <HAL_ADC_Start_DMA+0x194>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d002      	beq.n	8005ba8 <HAL_ADC_Start_DMA+0xb0>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	e003      	b.n	8005bb0 <HAL_ADC_Start_DMA+0xb8>
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <HAL_ADC_Start_DMA+0x198>)
 8005baa:	e001      	b.n	8005bb0 <HAL_ADC_Start_DMA+0xb8>
 8005bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d002      	beq.n	8005bbe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d006      	beq.n	8005be4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bda:	f023 0206 	bic.w	r2, r3, #6
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	661a      	str	r2, [r3, #96]	; 0x60
 8005be2:	e002      	b.n	8005bea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	4a29      	ldr	r2, [pc, #164]	; (8005c94 <HAL_ADC_Start_DMA+0x19c>)
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <HAL_ADC_Start_DMA+0x1a0>)
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <HAL_ADC_Start_DMA+0x1a4>)
 8005c00:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	221c      	movs	r2, #28
 8005c08:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0210 	orr.w	r2, r2, #16
 8005c20:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0201 	orr.w	r2, r2, #1
 8005c30:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3340      	adds	r3, #64	; 0x40
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f002 faad 	bl	80081a0 <HAL_DMA_Start_IT>
 8005c46:	4603      	mov	r3, r0
 8005c48:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fca5 	bl	800559e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c54:	e00d      	b.n	8005c72 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005c5e:	e008      	b.n	8005c72 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005c6c:	e001      	b.n	8005c72 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	50000100 	.word	0x50000100
 8005c80:	50000300 	.word	0x50000300
 8005c84:	50000700 	.word	0x50000700
 8005c88:	50000600 	.word	0x50000600
 8005c8c:	50000500 	.word	0x50000500
 8005c90:	50000400 	.word	0x50000400
 8005c94:	080071cb 	.word	0x080071cb
 8005c98:	080072a3 	.word	0x080072a3
 8005c9c:	080072bf 	.word	0x080072bf

08005ca0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADC_Stop_DMA+0x16>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e051      	b.n	8005d5a <HAL_ADC_Stop_DMA+0xba>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005cbe:	2103      	movs	r1, #3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 f905 	bl	8006ed0 <ADC_ConversionStop>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d13f      	bne.n	8005d50 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d10f      	bne.n	8005d0e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f002 facf 	bl	8008296 <HAL_DMA_Abort>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0210 	bic.w	r2, r2, #16
 8005d1c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f9f1 	bl	800710c <ADC_Disable>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e002      	b.n	8005d36 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f9eb 	bl	800710c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d88:	d004      	beq.n	8005d94 <HAL_ADC_IRQHandler+0x30>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a8e      	ldr	r2, [pc, #568]	; (8005fc8 <HAL_ADC_IRQHandler+0x264>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d101      	bne.n	8005d98 <HAL_ADC_IRQHandler+0x34>
 8005d94:	4b8d      	ldr	r3, [pc, #564]	; (8005fcc <HAL_ADC_IRQHandler+0x268>)
 8005d96:	e000      	b.n	8005d9a <HAL_ADC_IRQHandler+0x36>
 8005d98:	4b8d      	ldr	r3, [pc, #564]	; (8005fd0 <HAL_ADC_IRQHandler+0x26c>)
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fb47 	bl	800542e <LL_ADC_GetMultimode>
 8005da0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d017      	beq.n	8005ddc <HAL_ADC_IRQHandler+0x78>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d012      	beq.n	8005ddc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fb62 	bl	8007498 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <HAL_ADC_IRQHandler+0x8c>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8094 	beq.w	8005f24 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 808e 	beq.w	8005f24 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fa0d 	bl	8005244 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d072      	beq.n	8005f16 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a64      	ldr	r2, [pc, #400]	; (8005fc8 <HAL_ADC_IRQHandler+0x264>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_ADC_IRQHandler+0xea>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a65      	ldr	r2, [pc, #404]	; (8005fd4 <HAL_ADC_IRQHandler+0x270>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d002      	beq.n	8005e4a <HAL_ADC_IRQHandler+0xe6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	e003      	b.n	8005e52 <HAL_ADC_IRQHandler+0xee>
 8005e4a:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_ADC_IRQHandler+0x274>)
 8005e4c:	e001      	b.n	8005e52 <HAL_ADC_IRQHandler+0xee>
 8005e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d008      	beq.n	8005e6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d002      	beq.n	8005e6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b09      	cmp	r3, #9
 8005e6a:	d104      	bne.n	8005e76 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	e014      	b.n	8005ea0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a53      	ldr	r2, [pc, #332]	; (8005fc8 <HAL_ADC_IRQHandler+0x264>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_ADC_IRQHandler+0x130>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a53      	ldr	r2, [pc, #332]	; (8005fd4 <HAL_ADC_IRQHandler+0x270>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d002      	beq.n	8005e90 <HAL_ADC_IRQHandler+0x12c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	e003      	b.n	8005e98 <HAL_ADC_IRQHandler+0x134>
 8005e90:	4b51      	ldr	r3, [pc, #324]	; (8005fd8 <HAL_ADC_IRQHandler+0x274>)
 8005e92:	e001      	b.n	8005e98 <HAL_ADC_IRQHandler+0x134>
 8005e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e98:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d135      	bne.n	8005f16 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d12e      	bne.n	8005f16 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fb96 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11a      	bne.n	8005efe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 020c 	bic.w	r2, r2, #12
 8005ed6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d112      	bne.n	8005f16 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f043 0201 	orr.w	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	65da      	str	r2, [r3, #92]	; 0x5c
 8005efc:	e00b      	b.n	8005f16 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	f043 0210 	orr.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe f884 	bl	8004024 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	220c      	movs	r2, #12
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x1d4>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80b3 	beq.w	80060aa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80ad 	beq.w	80060aa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f9a8 	bl	80052c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005f72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff f963 	bl	8005244 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f7e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <HAL_ADC_IRQHandler+0x264>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x23a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <HAL_ADC_IRQHandler+0x270>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d002      	beq.n	8005f9a <HAL_ADC_IRQHandler+0x236>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	e003      	b.n	8005fa2 <HAL_ADC_IRQHandler+0x23e>
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <HAL_ADC_IRQHandler+0x274>)
 8005f9c:	e001      	b.n	8005fa2 <HAL_ADC_IRQHandler+0x23e>
 8005f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d008      	beq.n	8005fbc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d002      	beq.n	8005fbc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b07      	cmp	r3, #7
 8005fba:	d10f      	bne.n	8005fdc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	e01f      	b.n	8006006 <HAL_ADC_IRQHandler+0x2a2>
 8005fc6:	bf00      	nop
 8005fc8:	50000100 	.word	0x50000100
 8005fcc:	50000300 	.word	0x50000300
 8005fd0:	50000700 	.word	0x50000700
 8005fd4:	50000500 	.word	0x50000500
 8005fd8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a8b      	ldr	r2, [pc, #556]	; (8006210 <HAL_ADC_IRQHandler+0x4ac>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_ADC_IRQHandler+0x296>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a8a      	ldr	r2, [pc, #552]	; (8006214 <HAL_ADC_IRQHandler+0x4b0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d002      	beq.n	8005ff6 <HAL_ADC_IRQHandler+0x292>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	e003      	b.n	8005ffe <HAL_ADC_IRQHandler+0x29a>
 8005ff6:	4b88      	ldr	r3, [pc, #544]	; (8006218 <HAL_ADC_IRQHandler+0x4b4>)
 8005ff8:	e001      	b.n	8005ffe <HAL_ADC_IRQHandler+0x29a>
 8005ffa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ffe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d047      	beq.n	800609c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_ADC_IRQHandler+0x2c2>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d03f      	beq.n	800609c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d13a      	bne.n	800609c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d133      	bne.n	800609c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d12e      	bne.n	800609c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fafa 	bl	800563c <LL_ADC_INJ_IsConversionOngoing>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11a      	bne.n	8006084 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800605c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d112      	bne.n	800609c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607a:	f043 0201 	orr.w	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	65da      	str	r2, [r3, #92]	; 0x5c
 8006082:	e00b      	b.n	800609c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006088:	f043 0210 	orr.w	r2, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	f043 0201 	orr.w	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 f9dd 	bl	800745c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2260      	movs	r2, #96	; 0x60
 80060a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d011      	beq.n	80060d8 <HAL_ADC_IRQHandler+0x374>
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fd ffe0 	bl	8004090 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2280      	movs	r2, #128	; 0x80
 80060d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d012      	beq.n	8006108 <HAL_ADC_IRQHandler+0x3a4>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fd ffff 	bl	80040fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610e:	2b00      	cmp	r3, #0
 8006110:	d012      	beq.n	8006138 <HAL_ADC_IRQHandler+0x3d4>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00d      	beq.n	8006138 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f9ab 	bl	8007484 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d043      	beq.n	80061ca <HAL_ADC_IRQHandler+0x466>
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03e      	beq.n	80061ca <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8006154:	2301      	movs	r3, #1
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
 8006158:	e021      	b.n	800619e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d015      	beq.n	800618c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006168:	d004      	beq.n	8006174 <HAL_ADC_IRQHandler+0x410>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a28      	ldr	r2, [pc, #160]	; (8006210 <HAL_ADC_IRQHandler+0x4ac>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d101      	bne.n	8006178 <HAL_ADC_IRQHandler+0x414>
 8006174:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_ADC_IRQHandler+0x4b8>)
 8006176:	e000      	b.n	800617a <HAL_ADC_IRQHandler+0x416>
 8006178:	4b29      	ldr	r3, [pc, #164]	; (8006220 <HAL_ADC_IRQHandler+0x4bc>)
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f965 	bl	800544a <LL_ADC_GetMultiDMATransfer>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006186:	2301      	movs	r3, #1
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	e008      	b.n	800619e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800619a:	2301      	movs	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10e      	bne.n	80061c2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b4:	f043 0202 	orr.w	r2, r3, #2
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f831 	bl	8006224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2210      	movs	r2, #16
 80061c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d018      	beq.n	8006206 <HAL_ADC_IRQHandler+0x4a2>
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d013      	beq.n	8006206 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	f043 0208 	orr.w	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 f935 	bl	8007470 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006206:	bf00      	nop
 8006208:	3728      	adds	r7, #40	; 0x28
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	50000100 	.word	0x50000100
 8006214:	50000500 	.word	0x50000500
 8006218:	50000400 	.word	0x50000400
 800621c:	50000300 	.word	0x50000300
 8006220:	50000700 	.word	0x50000700

08006224 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b0b6      	sub	sp, #216	; 0xd8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006252:	2b01      	cmp	r3, #1
 8006254:	d102      	bne.n	800625c <HAL_ADC_ConfigChannel+0x24>
 8006256:	2302      	movs	r3, #2
 8006258:	f000 bc13 	b.w	8006a82 <HAL_ADC_ConfigChannel+0x84a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff f9c0 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 83f3 	bne.w	8006a5c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f7fe fff1 	bl	800526a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff f9ae 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8006292:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f9ce 	bl	800563c <LL_ADC_INJ_IsConversionOngoing>
 80062a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 81d9 	bne.w	8006660 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 81d4 	bne.w	8006660 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d10f      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	4619      	mov	r1, r3
 80062ce:	f7ff f80b 	bl	80052e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe ff9f 	bl	800521e <LL_ADC_SetSamplingTimeCommonConfig>
 80062e0:	e00e      	b.n	8006300 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6819      	ldr	r1, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fe fffa 	bl	80052e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe ff8f 	bl	800521e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	08db      	lsrs	r3, r3, #3
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b04      	cmp	r3, #4
 8006320:	d022      	beq.n	8006368 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6919      	ldr	r1, [r3, #16]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006332:	f7fe fee9 	bl	8005108 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6919      	ldr	r1, [r3, #16]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	461a      	mov	r2, r3
 8006344:	f7fe ff35 	bl	80051b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6919      	ldr	r1, [r3, #16]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	7f1b      	ldrb	r3, [r3, #28]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d102      	bne.n	800635e <HAL_ADC_ConfigChannel+0x126>
 8006358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800635c:	e000      	b.n	8006360 <HAL_ADC_ConfigChannel+0x128>
 800635e:	2300      	movs	r3, #0
 8006360:	461a      	mov	r2, r3
 8006362:	f7fe ff41 	bl	80051e8 <LL_ADC_SetOffsetSaturation>
 8006366:	e17b      	b.n	8006660 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe feee 	bl	8005150 <LL_ADC_GetOffsetChannel>
 8006374:	4603      	mov	r3, r0
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x15c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fee3 	bl	8005150 <LL_ADC_GetOffsetChannel>
 800638a:	4603      	mov	r3, r0
 800638c:	0e9b      	lsrs	r3, r3, #26
 800638e:	f003 021f 	and.w	r2, r3, #31
 8006392:	e01e      	b.n	80063d2 <HAL_ADC_ConfigChannel+0x19a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fed8 	bl	8005150 <LL_ADC_GetOffsetChannel>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063aa:	fa93 f3a3 	rbit	r3, r3
 80063ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80063c2:	2320      	movs	r3, #32
 80063c4:	e004      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80063c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063ca:	fab3 f383 	clz	r3, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x1b2>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	0e9b      	lsrs	r3, r3, #26
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	e018      	b.n	800641c <HAL_ADC_ConfigChannel+0x1e4>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80063fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006402:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800640e:	2320      	movs	r3, #32
 8006410:	e004      	b.n	800641c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006416:	fab3 f383 	clz	r3, r3
 800641a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800641c:	429a      	cmp	r2, r3
 800641e:	d106      	bne.n	800642e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe fea7 	bl	800517c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2101      	movs	r1, #1
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fe8b 	bl	8005150 <LL_ADC_GetOffsetChannel>
 800643a:	4603      	mov	r3, r0
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <HAL_ADC_ConfigChannel+0x222>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fe80 	bl	8005150 <LL_ADC_GetOffsetChannel>
 8006450:	4603      	mov	r3, r0
 8006452:	0e9b      	lsrs	r3, r3, #26
 8006454:	f003 021f 	and.w	r2, r3, #31
 8006458:	e01e      	b.n	8006498 <HAL_ADC_ConfigChannel+0x260>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2101      	movs	r1, #1
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe fe75 	bl	8005150 <LL_ADC_GetOffsetChannel>
 8006466:	4603      	mov	r3, r0
 8006468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006470:	fa93 f3a3 	rbit	r3, r3
 8006474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800647c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006488:	2320      	movs	r3, #32
 800648a:	e004      	b.n	8006496 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800648c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <HAL_ADC_ConfigChannel+0x278>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	0e9b      	lsrs	r3, r3, #26
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	e018      	b.n	80064e2 <HAL_ADC_ConfigChannel+0x2aa>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064bc:	fa93 f3a3 	rbit	r3, r3
 80064c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80064c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80064cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80064d4:	2320      	movs	r3, #32
 80064d6:	e004      	b.n	80064e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80064d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064dc:	fab3 f383 	clz	r3, r3
 80064e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d106      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fe44 	bl	800517c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2102      	movs	r1, #2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fe28 	bl	8005150 <LL_ADC_GetOffsetChannel>
 8006500:	4603      	mov	r3, r0
 8006502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x2e8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2102      	movs	r1, #2
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fe1d 	bl	8005150 <LL_ADC_GetOffsetChannel>
 8006516:	4603      	mov	r3, r0
 8006518:	0e9b      	lsrs	r3, r3, #26
 800651a:	f003 021f 	and.w	r2, r3, #31
 800651e:	e01e      	b.n	800655e <HAL_ADC_ConfigChannel+0x326>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fe12 	bl	8005150 <LL_ADC_GetOffsetChannel>
 800652c:	4603      	mov	r3, r0
 800652e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006536:	fa93 f3a3 	rbit	r3, r3
 800653a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800653e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800654e:	2320      	movs	r3, #32
 8006550:	e004      	b.n	800655c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006556:	fab3 f383 	clz	r3, r3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <HAL_ADC_ConfigChannel+0x33e>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	0e9b      	lsrs	r3, r3, #26
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	e016      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x36c>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006582:	fa93 f3a3 	rbit	r3, r3
 8006586:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800658a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800658e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006596:	2320      	movs	r3, #32
 8006598:	e004      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800659a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800659e:	fab3 f383 	clz	r3, r3
 80065a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d106      	bne.n	80065b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2200      	movs	r2, #0
 80065ae:	2102      	movs	r1, #2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fde3 	bl	800517c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2103      	movs	r1, #3
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe fdc7 	bl	8005150 <LL_ADC_GetOffsetChannel>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x3aa>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2103      	movs	r1, #3
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fdbc 	bl	8005150 <LL_ADC_GetOffsetChannel>
 80065d8:	4603      	mov	r3, r0
 80065da:	0e9b      	lsrs	r3, r3, #26
 80065dc:	f003 021f 	and.w	r2, r3, #31
 80065e0:	e017      	b.n	8006612 <HAL_ADC_ConfigChannel+0x3da>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2103      	movs	r1, #3
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe fdb1 	bl	8005150 <LL_ADC_GetOffsetChannel>
 80065ee:	4603      	mov	r3, r0
 80065f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80065fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80065fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006604:	2320      	movs	r3, #32
 8006606:	e003      	b.n	8006610 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800660a:	fab3 f383 	clz	r3, r3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <HAL_ADC_ConfigChannel+0x3f2>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	0e9b      	lsrs	r3, r3, #26
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	e011      	b.n	800664e <HAL_ADC_ConfigChannel+0x416>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006632:	fa93 f3a3 	rbit	r3, r3
 8006636:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800663a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006642:	2320      	movs	r3, #32
 8006644:	e003      	b.n	800664e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006648:	fab3 f383 	clz	r3, r3
 800664c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800664e:	429a      	cmp	r2, r3
 8006650:	d106      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	2103      	movs	r1, #3
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fd8e 	bl	800517c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe ff74 	bl	8005552 <LL_ADC_IsEnabled>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 813d 	bne.w	80068ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fe fe5e 	bl	8005340 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4aa2      	ldr	r2, [pc, #648]	; (8006914 <HAL_ADC_ConfigChannel+0x6dc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	f040 812e 	bne.w	80068ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x480>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	0e9b      	lsrs	r3, r3, #26
 80066a6:	3301      	adds	r3, #1
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2b09      	cmp	r3, #9
 80066ae:	bf94      	ite	ls
 80066b0:	2301      	movls	r3, #1
 80066b2:	2300      	movhi	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	e019      	b.n	80066ec <HAL_ADC_ConfigChannel+0x4b4>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c0:	fa93 f3a3 	rbit	r3, r3
 80066c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80066c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80066ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80066d0:	2320      	movs	r3, #32
 80066d2:	e003      	b.n	80066dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80066d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066d6:	fab3 f383 	clz	r3, r3
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	3301      	adds	r3, #1
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b09      	cmp	r3, #9
 80066e4:	bf94      	ite	ls
 80066e6:	2301      	movls	r3, #1
 80066e8:	2300      	movhi	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d079      	beq.n	80067e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <HAL_ADC_ConfigChannel+0x4d4>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	0e9b      	lsrs	r3, r3, #26
 8006702:	3301      	adds	r3, #1
 8006704:	069b      	lsls	r3, r3, #26
 8006706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800670a:	e015      	b.n	8006738 <HAL_ADC_ConfigChannel+0x500>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	fa93 f3a3 	rbit	r3, r3
 8006718:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800671a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006724:	2320      	movs	r3, #32
 8006726:	e003      	b.n	8006730 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	b2db      	uxtb	r3, r3
 8006730:	3301      	adds	r3, #1
 8006732:	069b      	lsls	r3, r3, #26
 8006734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x520>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	0e9b      	lsrs	r3, r3, #26
 800674a:	3301      	adds	r3, #1
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	e017      	b.n	8006788 <HAL_ADC_ConfigChannel+0x550>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	fa93 f3a3 	rbit	r3, r3
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006768:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800676a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006770:	2320      	movs	r3, #32
 8006772:	e003      	b.n	800677c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	3301      	adds	r3, #1
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	2101      	movs	r1, #1
 8006784:	fa01 f303 	lsl.w	r3, r1, r3
 8006788:	ea42 0103 	orr.w	r1, r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <HAL_ADC_ConfigChannel+0x576>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	0e9b      	lsrs	r3, r3, #26
 800679e:	3301      	adds	r3, #1
 80067a0:	f003 021f 	and.w	r2, r3, #31
 80067a4:	4613      	mov	r3, r2
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	4413      	add	r3, r2
 80067aa:	051b      	lsls	r3, r3, #20
 80067ac:	e018      	b.n	80067e0 <HAL_ADC_ConfigChannel+0x5a8>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	fa93 f3a3 	rbit	r3, r3
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80067c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80067c6:	2320      	movs	r3, #32
 80067c8:	e003      	b.n	80067d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	fab3 f383 	clz	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	3301      	adds	r3, #1
 80067d4:	f003 021f 	and.w	r2, r3, #31
 80067d8:	4613      	mov	r3, r2
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	4413      	add	r3, r2
 80067de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067e0:	430b      	orrs	r3, r1
 80067e2:	e07e      	b.n	80068e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d107      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x5c8>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	0e9b      	lsrs	r3, r3, #26
 80067f6:	3301      	adds	r3, #1
 80067f8:	069b      	lsls	r3, r3, #26
 80067fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067fe:	e015      	b.n	800682c <HAL_ADC_ConfigChannel+0x5f4>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006818:	2320      	movs	r3, #32
 800681a:	e003      	b.n	8006824 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	fab3 f383 	clz	r3, r3
 8006822:	b2db      	uxtb	r3, r3
 8006824:	3301      	adds	r3, #1
 8006826:	069b      	lsls	r3, r3, #26
 8006828:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <HAL_ADC_ConfigChannel+0x614>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	0e9b      	lsrs	r3, r3, #26
 800683e:	3301      	adds	r3, #1
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	e017      	b.n	800687c <HAL_ADC_ConfigChannel+0x644>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	fa93 f3a3 	rbit	r3, r3
 8006858:	61fb      	str	r3, [r7, #28]
  return result;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006864:	2320      	movs	r3, #32
 8006866:	e003      	b.n	8006870 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	fab3 f383 	clz	r3, r3
 800686e:	b2db      	uxtb	r3, r3
 8006870:	3301      	adds	r3, #1
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2101      	movs	r1, #1
 8006878:	fa01 f303 	lsl.w	r3, r1, r3
 800687c:	ea42 0103 	orr.w	r1, r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <HAL_ADC_ConfigChannel+0x670>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	0e9b      	lsrs	r3, r3, #26
 8006892:	3301      	adds	r3, #1
 8006894:	f003 021f 	and.w	r2, r3, #31
 8006898:	4613      	mov	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4413      	add	r3, r2
 800689e:	3b1e      	subs	r3, #30
 80068a0:	051b      	lsls	r3, r3, #20
 80068a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068a6:	e01b      	b.n	80068e0 <HAL_ADC_ConfigChannel+0x6a8>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	fa93 f3a3 	rbit	r3, r3
 80068b4:	613b      	str	r3, [r7, #16]
  return result;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80068c0:	2320      	movs	r3, #32
 80068c2:	e003      	b.n	80068cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	fab3 f383 	clz	r3, r3
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	3301      	adds	r3, #1
 80068ce:	f003 021f 	and.w	r2, r3, #31
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	3b1e      	subs	r3, #30
 80068da:	051b      	lsls	r3, r3, #20
 80068dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e0:	430b      	orrs	r3, r1
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	6892      	ldr	r2, [r2, #8]
 80068e6:	4619      	mov	r1, r3
 80068e8:	f7fe fcfe 	bl	80052e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b09      	ldr	r3, [pc, #36]	; (8006918 <HAL_ADC_ConfigChannel+0x6e0>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80be 	beq.w	8006a76 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006902:	d004      	beq.n	800690e <HAL_ADC_ConfigChannel+0x6d6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a04      	ldr	r2, [pc, #16]	; (800691c <HAL_ADC_ConfigChannel+0x6e4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d10a      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x6ec>
 800690e:	4b04      	ldr	r3, [pc, #16]	; (8006920 <HAL_ADC_ConfigChannel+0x6e8>)
 8006910:	e009      	b.n	8006926 <HAL_ADC_ConfigChannel+0x6ee>
 8006912:	bf00      	nop
 8006914:	407f0000 	.word	0x407f0000
 8006918:	80080000 	.word	0x80080000
 800691c:	50000100 	.word	0x50000100
 8006920:	50000300 	.word	0x50000300
 8006924:	4b59      	ldr	r3, [pc, #356]	; (8006a8c <HAL_ADC_ConfigChannel+0x854>)
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fbe0 	bl	80050ec <LL_ADC_GetCommonPathInternalCh>
 800692c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a56      	ldr	r2, [pc, #344]	; (8006a90 <HAL_ADC_ConfigChannel+0x858>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_ADC_ConfigChannel+0x70c>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a55      	ldr	r2, [pc, #340]	; (8006a94 <HAL_ADC_ConfigChannel+0x85c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d13a      	bne.n	80069ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d134      	bne.n	80069ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006958:	d005      	beq.n	8006966 <HAL_ADC_ConfigChannel+0x72e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a4e      	ldr	r2, [pc, #312]	; (8006a98 <HAL_ADC_ConfigChannel+0x860>)
 8006960:	4293      	cmp	r3, r2
 8006962:	f040 8085 	bne.w	8006a70 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800696e:	d004      	beq.n	800697a <HAL_ADC_ConfigChannel+0x742>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a49      	ldr	r2, [pc, #292]	; (8006a9c <HAL_ADC_ConfigChannel+0x864>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <HAL_ADC_ConfigChannel+0x746>
 800697a:	4a49      	ldr	r2, [pc, #292]	; (8006aa0 <HAL_ADC_ConfigChannel+0x868>)
 800697c:	e000      	b.n	8006980 <HAL_ADC_ConfigChannel+0x748>
 800697e:	4a43      	ldr	r2, [pc, #268]	; (8006a8c <HAL_ADC_ConfigChannel+0x854>)
 8006980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7fe fb9b 	bl	80050c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006990:	4b44      	ldr	r3, [pc, #272]	; (8006aa4 <HAL_ADC_ConfigChannel+0x86c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	099b      	lsrs	r3, r3, #6
 8006996:	4a44      	ldr	r2, [pc, #272]	; (8006aa8 <HAL_ADC_ConfigChannel+0x870>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	099b      	lsrs	r3, r3, #6
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	4613      	mov	r3, r2
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80069aa:	e002      	b.n	80069b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f9      	bne.n	80069ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069b8:	e05a      	b.n	8006a70 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3b      	ldr	r2, [pc, #236]	; (8006aac <HAL_ADC_ConfigChannel+0x874>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d125      	bne.n	8006a10 <HAL_ADC_ConfigChannel+0x7d8>
 80069c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11f      	bne.n	8006a10 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a31      	ldr	r2, [pc, #196]	; (8006a9c <HAL_ADC_ConfigChannel+0x864>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d104      	bne.n	80069e4 <HAL_ADC_ConfigChannel+0x7ac>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a34      	ldr	r2, [pc, #208]	; (8006ab0 <HAL_ADC_ConfigChannel+0x878>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d047      	beq.n	8006a74 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ec:	d004      	beq.n	80069f8 <HAL_ADC_ConfigChannel+0x7c0>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <HAL_ADC_ConfigChannel+0x864>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d101      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x7c4>
 80069f8:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <HAL_ADC_ConfigChannel+0x868>)
 80069fa:	e000      	b.n	80069fe <HAL_ADC_ConfigChannel+0x7c6>
 80069fc:	4a23      	ldr	r2, [pc, #140]	; (8006a8c <HAL_ADC_ConfigChannel+0x854>)
 80069fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe fb5c 	bl	80050c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a0e:	e031      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a27      	ldr	r2, [pc, #156]	; (8006ab4 <HAL_ADC_ConfigChannel+0x87c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d12d      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d127      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <HAL_ADC_ConfigChannel+0x864>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a38:	d004      	beq.n	8006a44 <HAL_ADC_ConfigChannel+0x80c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <HAL_ADC_ConfigChannel+0x864>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_ADC_ConfigChannel+0x810>
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <HAL_ADC_ConfigChannel+0x868>)
 8006a46:	e000      	b.n	8006a4a <HAL_ADC_ConfigChannel+0x812>
 8006a48:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <HAL_ADC_ConfigChannel+0x854>)
 8006a4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f7fe fb36 	bl	80050c6 <LL_ADC_SetCommonPathInternalCh>
 8006a5a:	e00c      	b.n	8006a76 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006a6e:	e002      	b.n	8006a76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a70:	bf00      	nop
 8006a72:	e000      	b.n	8006a76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006a7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	37d8      	adds	r7, #216	; 0xd8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	50000700 	.word	0x50000700
 8006a90:	c3210000 	.word	0xc3210000
 8006a94:	90c00010 	.word	0x90c00010
 8006a98:	50000600 	.word	0x50000600
 8006a9c:	50000100 	.word	0x50000100
 8006aa0:	50000300 	.word	0x50000300
 8006aa4:	20000008 	.word	0x20000008
 8006aa8:	053e2d63 	.word	0x053e2d63
 8006aac:	c7520000 	.word	0xc7520000
 8006ab0:	50000500 	.word	0x50000500
 8006ab4:	cb840000 	.word	0xcb840000

08006ab8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08e      	sub	sp, #56	; 0x38
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ad0:	d003      	beq.n	8006ada <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006ad6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_ADC_AnalogWDGConfig+0x30>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e1ea      	b.n	8006ebe <HAL_ADC_AnalogWDGConfig+0x406>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fd7a 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8006afa:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fd9b 	bl	800563c <LL_ADC_INJ_IsConversionOngoing>
 8006b06:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 8175 	bne.w	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 8171 	bne.w	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a90      	ldr	r2, [pc, #576]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	f040 808d 	bne.w	8006c3e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006b2c:	d034      	beq.n	8006b98 <HAL_ADC_AnalogWDGConfig+0xe0>
 8006b2e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006b32:	d856      	bhi.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b38:	d04b      	beq.n	8006bd2 <HAL_ADC_AnalogWDGConfig+0x11a>
 8006b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b3e:	d850      	bhi.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006b40:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006b44:	d01b      	beq.n	8006b7e <HAL_ADC_AnalogWDGConfig+0xc6>
 8006b46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006b4a:	d84a      	bhi.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b50:	d037      	beq.n	8006bc2 <HAL_ADC_AnalogWDGConfig+0x10a>
 8006b52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b56:	d844      	bhi.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8006b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b5c:	d029      	beq.n	8006bb2 <HAL_ADC_AnalogWDGConfig+0xfa>
 8006b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b62:	d13e      	bne.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006b70:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006b74:	461a      	mov	r2, r3
 8006b76:	497a      	ldr	r1, [pc, #488]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006b78:	f7fe fc0a 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006b7c:	e039      	b.n	8006bf2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006b8a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4973      	ldr	r1, [pc, #460]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006b92:	f7fe fbfd 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006b96:	e02c      	b.n	8006bf2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006ba4:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006ba8:	461a      	mov	r2, r3
 8006baa:	496d      	ldr	r1, [pc, #436]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006bac:	f7fe fbf0 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006bb0:	e01f      	b.n	8006bf2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a6b      	ldr	r2, [pc, #428]	; (8006d64 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8006bb8:	4969      	ldr	r1, [pc, #420]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fbe8 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006bc0:	e017      	b.n	8006bf2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a68      	ldr	r2, [pc, #416]	; (8006d68 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8006bc8:	4965      	ldr	r1, [pc, #404]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fbe0 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006bd0:	e00f      	b.n	8006bf2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a65      	ldr	r2, [pc, #404]	; (8006d6c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006bd8:	4961      	ldr	r1, [pc, #388]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fbd8 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006be0:	e007      	b.n	8006bf2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2200      	movs	r2, #0
 8006be8:	495d      	ldr	r1, [pc, #372]	; (8006d60 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fbd0 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006bf0:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe fd22 	bl	8005662 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	7b1b      	ldrb	r3, [r3, #12]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d105      	bne.n	8006c32 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fd42 	bl	80056b4 <LL_ADC_EnableIT_AWD1>
 8006c30:	e0e3      	b.n	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fd6c 	bl	8005714 <LL_ADC_DisableIT_AWD1>
 8006c3c:	e0dd      	b.n	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006c46:	d01d      	beq.n	8006c84 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006c48:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006c4c:	f200 8092 	bhi.w	8006d74 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c54:	d07b      	beq.n	8006d4e <HAL_ADC_AnalogWDGConfig+0x296>
 8006c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c5a:	f200 808b 	bhi.w	8006d74 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006c5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c62:	d00f      	beq.n	8006c84 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006c64:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c68:	f200 8084 	bhi.w	8006d74 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c70:	d06d      	beq.n	8006d4e <HAL_ADC_AnalogWDGConfig+0x296>
 8006c72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c76:	d87d      	bhi.n	8006d74 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8006c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c7c:	d067      	beq.n	8006d4e <HAL_ADC_AnalogWDGConfig+0x296>
 8006c7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c82:	d177      	bne.n	8006d74 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a39      	ldr	r2, [pc, #228]	; (8006d70 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d12f      	bne.n	8006cee <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d108      	bne.n	8006cac <HAL_ADC_AnalogWDGConfig+0x1f4>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	0e9b      	lsrs	r3, r3, #26
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	e016      	b.n	8006cda <HAL_ADC_AnalogWDGConfig+0x222>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	fa93 f3a3 	rbit	r3, r3
 8006cb8:	61bb      	str	r3, [r7, #24]
  return result;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8006cc4:	2320      	movs	r3, #32
 8006cc6:	e003      	b.n	8006cd0 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	fab3 f383 	clz	r3, r3
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006cec:	e04b      	b.n	8006d86 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d108      	bne.n	8006d0c <HAL_ADC_AnalogWDGConfig+0x254>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	0e9b      	lsrs	r3, r3, #26
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2201      	movs	r2, #1
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	e016      	b.n	8006d3a <HAL_ADC_AnalogWDGConfig+0x282>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	fa93 f3a3 	rbit	r3, r3
 8006d18:	60fb      	str	r3, [r7, #12]
  return result;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8006d24:	2320      	movs	r3, #32
 8006d26:	e003      	b.n	8006d30 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	fab3 f383 	clz	r3, r3
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2201      	movs	r2, #1
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	430b      	orrs	r3, r1
 8006d48:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8006d4c:	e01b      	b.n	8006d86 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a05      	ldr	r2, [pc, #20]	; (8006d6c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7fe fb19 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006d5e:	e012      	b.n	8006d86 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8006d60:	7dc00000 	.word	0x7dc00000
 8006d64:	0087ffff 	.word	0x0087ffff
 8006d68:	0107ffff 	.word	0x0107ffff
 8006d6c:	0187ffff 	.word	0x0187ffff
 8006d70:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f7fe fb06 	bl	8005390 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006d84:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a4f      	ldr	r2, [pc, #316]	; (8006ec8 <HAL_ADC_AnalogWDGConfig+0x410>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d11a      	bne.n	8006dc6 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d94:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fc6b 	bl	800567c <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	7b1b      	ldrb	r3, [r3, #12]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d105      	bne.n	8006dba <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fc8e 	bl	80056d4 <LL_ADC_EnableIT_AWD2>
 8006db8:	e01f      	b.n	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fcb8 	bl	8005734 <LL_ADC_DisableIT_AWD2>
 8006dc4:	e019      	b.n	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fc5e 	bl	8005698 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	7b1b      	ldrb	r3, [r3, #12]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fc83 	bl	80056f4 <LL_ADC_EnableIT_AWD3>
 8006dee:	e004      	b.n	8006dfa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fcad 	bl	8005754 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a33      	ldr	r2, [pc, #204]	; (8006ecc <HAL_ADC_AnalogWDGConfig+0x414>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d118      	bne.n	8006e36 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	08db      	lsrs	r3, r3, #3
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695a      	ldr	r2, [r3, #20]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	08db      	lsrs	r3, r3, #3
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
 8006e34:	e035      	b.n	8006ea2 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0318 	and.w	r3, r3, #24
 8006e40:	2b18      	cmp	r3, #24
 8006e42:	d00f      	beq.n	8006e64 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	08db      	lsrs	r3, r3, #3
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	f1c3 0302 	rsb	r3, r3, #2
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	f003 031e 	and.w	r3, r3, #30
 8006e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e62:	e002      	b.n	8006e6a <HAL_ADC_AnalogWDGConfig+0x3b2>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f003 0318 	and.w	r3, r3, #24
 8006e76:	2b18      	cmp	r3, #24
 8006e78:	d00f      	beq.n	8006e9a <HAL_ADC_AnalogWDGConfig+0x3e2>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	08db      	lsrs	r3, r3, #3
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	f1c3 0302 	rsb	r3, r3, #2
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	f003 031e 	and.w	r3, r3, #30
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	e002      	b.n	8006ea0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6819      	ldr	r1, [r3, #0]
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eae:	f7fe fa9c 	bl	80053ea <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3738      	adds	r7, #56	; 0x38
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	0017ffff 	.word	0x0017ffff
 8006ecc:	7dc00000 	.word	0x7dc00000

08006ed0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fb81 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8006eec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fba2 	bl	800563c <LL_ADC_INJ_IsConversionOngoing>
 8006ef8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8098 	beq.w	8007038 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d02a      	beq.n	8006f6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7f5b      	ldrb	r3, [r3, #29]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d126      	bne.n	8006f6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7f1b      	ldrb	r3, [r3, #28]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d122      	bne.n	8006f6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006f26:	2301      	movs	r3, #1
 8006f28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006f2a:	e014      	b.n	8006f56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4a45      	ldr	r2, [pc, #276]	; (8007044 <ADC_ConversionStop+0x174>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d90d      	bls.n	8006f50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f38:	f043 0210 	orr.w	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f44:	f043 0201 	orr.w	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e074      	b.n	800703a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	3301      	adds	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b40      	cmp	r3, #64	; 0x40
 8006f62:	d1e3      	bne.n	8006f2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2240      	movs	r2, #64	; 0x40
 8006f6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d014      	beq.n	8006f9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fb39 	bl	80055ee <LL_ADC_REG_IsConversionOngoing>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe faf6 	bl	8005578 <LL_ADC_IsDisableOngoing>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fb15 	bl	80055c6 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d014      	beq.n	8006fcc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fb48 	bl	800563c <LL_ADC_INJ_IsConversionOngoing>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00c      	beq.n	8006fcc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fade 	bl	8005578 <LL_ADC_IsDisableOngoing>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fb24 	bl	8005614 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d005      	beq.n	8006fde <ADC_ConversionStop+0x10e>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d105      	bne.n	8006fe4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006fd8:	230c      	movs	r3, #12
 8006fda:	617b      	str	r3, [r7, #20]
        break;
 8006fdc:	e005      	b.n	8006fea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006fde:	2308      	movs	r3, #8
 8006fe0:	617b      	str	r3, [r7, #20]
        break;
 8006fe2:	e002      	b.n	8006fea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	617b      	str	r3, [r7, #20]
        break;
 8006fe8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006fea:	f7fe f807 	bl	8004ffc <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006ff0:	e01b      	b.n	800702a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006ff2:	f7fe f803 	bl	8004ffc <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d914      	bls.n	800702a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4013      	ands	r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00d      	beq.n	800702a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007012:	f043 0210 	orr.w	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701e:	f043 0201 	orr.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e007      	b.n	800703a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4013      	ands	r3, r2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1dc      	bne.n	8006ff2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	a33fffff 	.word	0xa33fffff

08007048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fa7c 	bl	8005552 <LL_ADC_IsEnabled>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d14d      	bne.n	80070fc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	4b28      	ldr	r3, [pc, #160]	; (8007108 <ADC_Enable+0xc0>)
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00d      	beq.n	800708a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007072:	f043 0210 	orr.w	r2, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e039      	b.n	80070fe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fa37 	bl	8005502 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007094:	f7fd ffb2 	bl	8004ffc <HAL_GetTick>
 8007098:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800709a:	e028      	b.n	80070ee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fa56 	bl	8005552 <LL_ADC_IsEnabled>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fa26 	bl	8005502 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80070b6:	f7fd ffa1 	bl	8004ffc <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d914      	bls.n	80070ee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d00d      	beq.n	80070ee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d6:	f043 0210 	orr.w	r2, r3, #16
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e2:	f043 0201 	orr.w	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e007      	b.n	80070fe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d1cf      	bne.n	800709c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	8000003f 	.word	0x8000003f

0800710c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fa2d 	bl	8005578 <LL_ADC_IsDisableOngoing>
 800711e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fa14 	bl	8005552 <LL_ADC_IsEnabled>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d047      	beq.n	80071c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d144      	bne.n	80071c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 030d 	and.w	r3, r3, #13
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10c      	bne.n	800715e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe f9ee 	bl	800552a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2203      	movs	r2, #3
 8007154:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007156:	f7fd ff51 	bl	8004ffc <HAL_GetTick>
 800715a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800715c:	e029      	b.n	80071b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007162:	f043 0210 	orr.w	r2, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	f043 0201 	orr.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e023      	b.n	80071c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800717a:	f7fd ff3f 	bl	8004ffc <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d914      	bls.n	80071b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00d      	beq.n	80071b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	f043 0210 	orr.w	r2, r3, #16
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a6:	f043 0201 	orr.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e007      	b.n	80071c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1dc      	bne.n	800717a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d14b      	bne.n	800727c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d021      	beq.n	8007242 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f81e 	bl	8005244 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d032      	beq.n	8007274 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d12b      	bne.n	8007274 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d11f      	bne.n	8007274 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007238:	f043 0201 	orr.w	r2, r3, #1
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007240:	e018      	b.n	8007274 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d111      	bne.n	8007274 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	f043 0201 	orr.w	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7fc fed5 	bl	8004024 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800727a:	e00e      	b.n	800729a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7fe ffcb 	bl	8006224 <HAL_ADC_ErrorCallback>
}
 800728e:	e004      	b.n	800729a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7fc fead 	bl	8004010 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072dc:	f043 0204 	orr.w	r2, r3, #4
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7fe ff9d 	bl	8006224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <LL_ADC_IsEnabled>:
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <LL_ADC_IsEnabled+0x18>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <LL_ADC_IsEnabled+0x1a>
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <LL_ADC_StartCalibration>:
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800732a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007334:	4313      	orrs	r3, r2
 8007336:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <LL_ADC_IsCalibrationOnGoing>:
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800735a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800735e:	d101      	bne.n	8007364 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <LL_ADC_REG_IsConversionOngoing>:
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b04      	cmp	r3, #4
 8007384:	d101      	bne.n	800738a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e04d      	b.n	8007450 <HAL_ADCEx_Calibration_Start+0xb8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff fea5 	bl	800710c <ADC_Disable>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d136      	bne.n	800743a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073d4:	f023 0302 	bic.w	r3, r3, #2
 80073d8:	f043 0202 	orr.w	r2, r3, #2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff ff96 	bl	8007318 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80073ec:	e014      	b.n	8007418 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	3301      	adds	r3, #1
 80073f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4a18      	ldr	r2, [pc, #96]	; (8007458 <HAL_ADCEx_Calibration_Start+0xc0>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d90d      	bls.n	8007418 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007400:	f023 0312 	bic.w	r3, r3, #18
 8007404:	f043 0210 	orr.w	r2, r3, #16
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e01b      	b.n	8007450 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff ff94 	bl	800734a <LL_ADC_IsCalibrationOnGoing>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e2      	bne.n	80073ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742c:	f023 0303 	bic.w	r3, r3, #3
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	65da      	str	r2, [r3, #92]	; 0x5c
 8007438:	e005      	b.n	8007446 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743e:	f043 0210 	orr.w	r2, r3, #16
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	0004de01 	.word	0x0004de01

0800745c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b0a1      	sub	sp, #132	; 0x84
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e0e7      	b.n	800769a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80074d2:	2300      	movs	r3, #0
 80074d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80074d6:	2300      	movs	r3, #0
 80074d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074e2:	d102      	bne.n	80074ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80074e4:	4b6f      	ldr	r3, [pc, #444]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	e009      	b.n	80074fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a6e      	ldr	r2, [pc, #440]	; (80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d102      	bne.n	80074fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80074f4:	4b6d      	ldr	r3, [pc, #436]	; (80076ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	e001      	b.n	80074fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80074fa:	2300      	movs	r3, #0
 80074fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e0be      	b.n	800769a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ff27 	bl	8007372 <LL_ADC_REG_IsConversionOngoing>
 8007524:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff ff21 	bl	8007372 <LL_ADC_REG_IsConversionOngoing>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 80a0 	bne.w	8007678 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753a:	2b00      	cmp	r3, #0
 800753c:	f040 809c 	bne.w	8007678 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007548:	d004      	beq.n	8007554 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a55      	ldr	r2, [pc, #340]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d101      	bne.n	8007558 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007554:	4b56      	ldr	r3, [pc, #344]	; (80076b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007556:	e000      	b.n	800755a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007558:	4b56      	ldr	r3, [pc, #344]	; (80076b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800755a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d04b      	beq.n	80075fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007576:	035b      	lsls	r3, r3, #13
 8007578:	430b      	orrs	r3, r1
 800757a:	431a      	orrs	r2, r3
 800757c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007588:	d004      	beq.n	8007594 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a45      	ldr	r2, [pc, #276]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10f      	bne.n	80075b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007594:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007598:	f7ff feab 	bl	80072f2 <LL_ADC_IsEnabled>
 800759c:	4604      	mov	r4, r0
 800759e:	4841      	ldr	r0, [pc, #260]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075a0:	f7ff fea7 	bl	80072f2 <LL_ADC_IsEnabled>
 80075a4:	4603      	mov	r3, r0
 80075a6:	4323      	orrs	r3, r4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	e012      	b.n	80075da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80075b4:	483c      	ldr	r0, [pc, #240]	; (80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80075b6:	f7ff fe9c 	bl	80072f2 <LL_ADC_IsEnabled>
 80075ba:	4604      	mov	r4, r0
 80075bc:	483b      	ldr	r0, [pc, #236]	; (80076ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80075be:	f7ff fe98 	bl	80072f2 <LL_ADC_IsEnabled>
 80075c2:	4603      	mov	r3, r0
 80075c4:	431c      	orrs	r4, r3
 80075c6:	483c      	ldr	r0, [pc, #240]	; (80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80075c8:	f7ff fe93 	bl	80072f2 <LL_ADC_IsEnabled>
 80075cc:	4603      	mov	r3, r0
 80075ce:	4323      	orrs	r3, r4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d056      	beq.n	800768c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80075de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80075e6:	f023 030f 	bic.w	r3, r3, #15
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	6892      	ldr	r2, [r2, #8]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	431a      	orrs	r2, r3
 80075f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075fa:	e047      	b.n	800768c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80075fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007606:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007610:	d004      	beq.n	800761c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a23      	ldr	r2, [pc, #140]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d10f      	bne.n	800763c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800761c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007620:	f7ff fe67 	bl	80072f2 <LL_ADC_IsEnabled>
 8007624:	4604      	mov	r4, r0
 8007626:	481f      	ldr	r0, [pc, #124]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007628:	f7ff fe63 	bl	80072f2 <LL_ADC_IsEnabled>
 800762c:	4603      	mov	r3, r0
 800762e:	4323      	orrs	r3, r4
 8007630:	2b00      	cmp	r3, #0
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	e012      	b.n	8007662 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800763c:	481a      	ldr	r0, [pc, #104]	; (80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800763e:	f7ff fe58 	bl	80072f2 <LL_ADC_IsEnabled>
 8007642:	4604      	mov	r4, r0
 8007644:	4819      	ldr	r0, [pc, #100]	; (80076ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007646:	f7ff fe54 	bl	80072f2 <LL_ADC_IsEnabled>
 800764a:	4603      	mov	r3, r0
 800764c:	431c      	orrs	r4, r3
 800764e:	481a      	ldr	r0, [pc, #104]	; (80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007650:	f7ff fe4f 	bl	80072f2 <LL_ADC_IsEnabled>
 8007654:	4603      	mov	r3, r0
 8007656:	4323      	orrs	r3, r4
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d012      	beq.n	800768c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800766e:	f023 030f 	bic.w	r3, r3, #15
 8007672:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007674:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007676:	e009      	b.n	800768c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800768a:	e000      	b.n	800768e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800768c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007696:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800769a:	4618      	mov	r0, r3
 800769c:	3784      	adds	r7, #132	; 0x84
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd90      	pop	{r4, r7, pc}
 80076a2:	bf00      	nop
 80076a4:	50000100 	.word	0x50000100
 80076a8:	50000400 	.word	0x50000400
 80076ac:	50000500 	.word	0x50000500
 80076b0:	50000300 	.word	0x50000300
 80076b4:	50000700 	.word	0x50000700
 80076b8:	50000600 	.word	0x50000600

080076bc <__NVIC_SetPriorityGrouping>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076cc:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <__NVIC_SetPriorityGrouping+0x44>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076d8:	4013      	ands	r3, r2
 80076da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076ee:	4a04      	ldr	r2, [pc, #16]	; (8007700 <__NVIC_SetPriorityGrouping+0x44>)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	60d3      	str	r3, [r2, #12]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	e000ed00 	.word	0xe000ed00

08007704 <__NVIC_GetPriorityGrouping>:
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007708:	4b04      	ldr	r3, [pc, #16]	; (800771c <__NVIC_GetPriorityGrouping+0x18>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	f003 0307 	and.w	r3, r3, #7
}
 8007712:	4618      	mov	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <__NVIC_EnableIRQ>:
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800772a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772e:	2b00      	cmp	r3, #0
 8007730:	db0b      	blt.n	800774a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	f003 021f 	and.w	r2, r3, #31
 8007738:	4907      	ldr	r1, [pc, #28]	; (8007758 <__NVIC_EnableIRQ+0x38>)
 800773a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	2001      	movs	r0, #1
 8007742:	fa00 f202 	lsl.w	r2, r0, r2
 8007746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	e000e100 	.word	0xe000e100

0800775c <__NVIC_SetPriority>:
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	6039      	str	r1, [r7, #0]
 8007766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776c:	2b00      	cmp	r3, #0
 800776e:	db0a      	blt.n	8007786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	490c      	ldr	r1, [pc, #48]	; (80077a8 <__NVIC_SetPriority+0x4c>)
 8007776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800777a:	0112      	lsls	r2, r2, #4
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	440b      	add	r3, r1
 8007780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007784:	e00a      	b.n	800779c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	4908      	ldr	r1, [pc, #32]	; (80077ac <__NVIC_SetPriority+0x50>)
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	3b04      	subs	r3, #4
 8007794:	0112      	lsls	r2, r2, #4
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	440b      	add	r3, r1
 800779a:	761a      	strb	r2, [r3, #24]
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	e000e100 	.word	0xe000e100
 80077ac:	e000ed00 	.word	0xe000ed00

080077b0 <NVIC_EncodePriority>:
{
 80077b0:	b480      	push	{r7}
 80077b2:	b089      	sub	sp, #36	; 0x24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f1c3 0307 	rsb	r3, r3, #7
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	bf28      	it	cs
 80077ce:	2304      	movcs	r3, #4
 80077d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	3304      	adds	r3, #4
 80077d6:	2b06      	cmp	r3, #6
 80077d8:	d902      	bls.n	80077e0 <NVIC_EncodePriority+0x30>
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	3b03      	subs	r3, #3
 80077de:	e000      	b.n	80077e2 <NVIC_EncodePriority+0x32>
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077e4:	f04f 32ff 	mov.w	r2, #4294967295
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43da      	mvns	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	401a      	ands	r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077f8:	f04f 31ff 	mov.w	r1, #4294967295
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	43d9      	mvns	r1, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007808:	4313      	orrs	r3, r2
}
 800780a:	4618      	mov	r0, r3
 800780c:	3724      	adds	r7, #36	; 0x24
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <SysTick_Config>:
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3b01      	subs	r3, #1
 8007824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007828:	d301      	bcc.n	800782e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800782a:	2301      	movs	r3, #1
 800782c:	e00f      	b.n	800784e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800782e:	4a0a      	ldr	r2, [pc, #40]	; (8007858 <SysTick_Config+0x40>)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3b01      	subs	r3, #1
 8007834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007836:	210f      	movs	r1, #15
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	f7ff ff8e 	bl	800775c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <SysTick_Config+0x40>)
 8007842:	2200      	movs	r2, #0
 8007844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007846:	4b04      	ldr	r3, [pc, #16]	; (8007858 <SysTick_Config+0x40>)
 8007848:	2207      	movs	r2, #7
 800784a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	e000e010 	.word	0xe000e010

0800785c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff ff29 	bl	80076bc <__NVIC_SetPriorityGrouping>
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b086      	sub	sp, #24
 8007876:	af00      	add	r7, sp, #0
 8007878:	4603      	mov	r3, r0
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007880:	f7ff ff40 	bl	8007704 <__NVIC_GetPriorityGrouping>
 8007884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	6978      	ldr	r0, [r7, #20]
 800788c:	f7ff ff90 	bl	80077b0 <NVIC_EncodePriority>
 8007890:	4602      	mov	r2, r0
 8007892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff ff5f 	bl	800775c <__NVIC_SetPriority>
}
 800789e:	bf00      	nop
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	4603      	mov	r3, r0
 80078ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff ff33 	bl	8007720 <__NVIC_EnableIRQ>
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff ffa4 	bl	8007818 <SysTick_Config>
 80078d0:	4603      	mov	r3, r0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e014      	b.n	8007916 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7f9 fdf1 	bl	80014e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	795b      	ldrb	r3, [r3, #5]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_DAC_Start+0x16>
 8007930:	2302      	movs	r3, #2
 8007932:	e043      	b.n	80079bc <HAL_DAC_Start+0x9e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6819      	ldr	r1, [r3, #0]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2201      	movs	r2, #1
 800794e:	409a      	lsls	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8007958:	2001      	movs	r0, #1
 800795a:	f7fd fb5b 	bl	8005014 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10f      	bne.n	8007984 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800796e:	2b02      	cmp	r3, #2
 8007970:	d11d      	bne.n	80079ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e014      	b.n	80079ae <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2102      	movs	r1, #2
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	429a      	cmp	r2, r3
 800799c:	d107      	bne.n	80079ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0202 	orr.w	r2, r2, #2
 80079ac:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	795b      	ldrb	r3, [r3, #5]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_DAC_Start_DMA+0x1e>
 80079de:	2302      	movs	r3, #2
 80079e0:	e0ae      	b.n	8007b40 <HAL_DAC_Start_DMA+0x17c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2202      	movs	r2, #2
 80079ec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d12f      	bne.n	8007a54 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	4a53      	ldr	r2, [pc, #332]	; (8007b48 <HAL_DAC_Start_DMA+0x184>)
 80079fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	4a52      	ldr	r2, [pc, #328]	; (8007b4c <HAL_DAC_Start_DMA+0x188>)
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	4a51      	ldr	r2, [pc, #324]	; (8007b50 <HAL_DAC_Start_DMA+0x18c>)
 8007a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a1a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d013      	beq.n	8007a4a <HAL_DAC_Start_DMA+0x86>
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d845      	bhi.n	8007ab4 <HAL_DAC_Start_DMA+0xf0>
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_DAC_Start_DMA+0x72>
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d005      	beq.n	8007a40 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007a34:	e03e      	b.n	8007ab4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	613b      	str	r3, [r7, #16]
        break;
 8007a3e:	e03c      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	613b      	str	r3, [r7, #16]
        break;
 8007a48:	e037      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3310      	adds	r3, #16
 8007a50:	613b      	str	r3, [r7, #16]
        break;
 8007a52:	e032      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	4a3e      	ldr	r2, [pc, #248]	; (8007b54 <HAL_DAC_Start_DMA+0x190>)
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	4a3d      	ldr	r2, [pc, #244]	; (8007b58 <HAL_DAC_Start_DMA+0x194>)
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4a3c      	ldr	r2, [pc, #240]	; (8007b5c <HAL_DAC_Start_DMA+0x198>)
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a7a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d013      	beq.n	8007aaa <HAL_DAC_Start_DMA+0xe6>
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d817      	bhi.n	8007ab8 <HAL_DAC_Start_DMA+0xf4>
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_DAC_Start_DMA+0xd2>
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d005      	beq.n	8007aa0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007a94:	e010      	b.n	8007ab8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	613b      	str	r3, [r7, #16]
        break;
 8007a9e:	e00c      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3318      	adds	r3, #24
 8007aa6:	613b      	str	r3, [r7, #16]
        break;
 8007aa8:	e007      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	331c      	adds	r3, #28
 8007ab0:	613b      	str	r3, [r7, #16]
        break;
 8007ab2:	e002      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
        break;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <HAL_DAC_Start_DMA+0xf6>
        break;
 8007ab8:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d111      	bne.n	8007ae4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ace:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6898      	ldr	r0, [r3, #8]
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	f000 fb61 	bl	80081a0 <HAL_DMA_Start_IT>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
 8007ae2:	e010      	b.n	8007b06 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007af2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68d8      	ldr	r0, [r3, #12]
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	f000 fb4f 	bl	80081a0 <HAL_DMA_Start_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10f      	bne.n	8007b32 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2201      	movs	r2, #1
 8007b20:	409a      	lsls	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8007b2a:	2001      	movs	r0, #1
 8007b2c:	f7fd fa72 	bl	8005014 <HAL_Delay>
 8007b30:	e005      	b.n	8007b3e <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f043 0204 	orr.w	r2, r3, #4
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	08007f3d 	.word	0x08007f3d
 8007b4c:	08007f5f 	.word	0x08007f5f
 8007b50:	08007f7b 	.word	0x08007f7b
 8007b54:	08007fe5 	.word	0x08007fe5
 8007b58:	08008007 	.word	0x08008007
 8007b5c:	08008023 	.word	0x08008023

08007b60 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d105      	bne.n	8007b90 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4413      	add	r3, r2
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	e004      	b.n	8007b9a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	3314      	adds	r3, #20
 8007b98:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	795b      	ldrb	r3, [r3, #5]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_DAC_ConfigChannel+0x18>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e192      	b.n	8007f2a <HAL_DAC_ConfigChannel+0x33e>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2201      	movs	r2, #1
 8007c08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d174      	bne.n	8007d02 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007c18:	f7fd f9f0 	bl	8004ffc <HAL_GetTick>
 8007c1c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d134      	bne.n	8007c8e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007c24:	e011      	b.n	8007c4a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007c26:	f7fd f9e9 	bl	8004ffc <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d90a      	bls.n	8007c4a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f043 0208 	orr.w	r2, r3, #8
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2203      	movs	r2, #3
 8007c44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e16f      	b.n	8007f2a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8007c58:	2001      	movs	r0, #1
 8007c5a:	f7fd f9db 	bl	8005014 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40
 8007c68:	e01e      	b.n	8007ca8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007c6a:	f7fd f9c7 	bl	8004ffc <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d90a      	bls.n	8007c8e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f043 0208 	orr.w	r2, r3, #8
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2203      	movs	r2, #3
 8007c88:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e14d      	b.n	8007f2a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dbe8      	blt.n	8007c6a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f7fd f9bb 	bl	8005014 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ca6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	ea02 0103 	and.w	r1, r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	409a      	lsls	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	21ff      	movs	r1, #255	; 0xff
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	ea02 0103 	and.w	r1, r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	409a      	lsls	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d11d      	bne.n	8007d46 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	221f      	movs	r2, #31
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	4013      	ands	r3, r2
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f003 0310 	and.w	r3, r3, #16
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2207      	movs	r2, #7
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5e:	4013      	ands	r3, r2
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d102      	bne.n	8007d70 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	e00f      	b.n	8007d90 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d102      	bne.n	8007d7e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	623b      	str	r3, [r7, #32]
 8007d7c:	e008      	b.n	8007d90 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007d86:	2301      	movs	r3, #1
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	e001      	b.n	8007d90 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	43db      	mvns	r3, r3
 8007db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db2:	4013      	ands	r3, r2
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d102      	bne.n	8007dc4 <HAL_DAC_ConfigChannel+0x1d8>
 8007dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dc2:	e000      	b.n	8007dc6 <HAL_DAC_ConfigChannel+0x1da>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dde:	4013      	ands	r3, r2
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d102      	bne.n	8007df0 <HAL_DAC_ConfigChannel+0x204>
 8007dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dee:	e000      	b.n	8007df2 <HAL_DAC_ConfigChannel+0x206>
 8007df0:	2300      	movs	r3, #0
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d114      	bne.n	8007e32 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007e08:	f001 ff34 	bl	8009c74 <HAL_RCC_GetHCLKFreq>
 8007e0c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4a48      	ldr	r2, [pc, #288]	; (8007f34 <HAL_DAC_ConfigChannel+0x348>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d904      	bls.n	8007e20 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e1e:	e00f      	b.n	8007e40 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	4a45      	ldr	r2, [pc, #276]	; (8007f38 <HAL_DAC_ConfigChannel+0x34c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d90a      	bls.n	8007e3e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e30:	e006      	b.n	8007e40 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3c:	e000      	b.n	8007e40 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007e3e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43da      	mvns	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	400a      	ands	r2, r1
 8007e76:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e92:	4013      	ands	r3, r2
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6819      	ldr	r1, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	22c0      	movs	r2, #192	; 0xc0
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43da      	mvns	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	400a      	ands	r2, r1
 8007ed0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	089b      	lsrs	r3, r3, #2
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007f00:	fa01 f303 	lsl.w	r3, r1, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	ea02 0103 	and.w	r1, r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	409a      	lsls	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	09896800 	.word	0x09896800
 8007f38:	04c4b400 	.word	0x04c4b400

08007f3c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fe30 	bl	8007bb0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	711a      	strb	r2, [r3, #4]
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fe29 	bl	8007bc4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f043 0204 	orr.w	r2, r3, #4
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fe1f 	bl	8007bd8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	711a      	strb	r2, [r3, #4]
}
 8007fa0:	bf00      	nop
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff ffd8 	bl	8007fa8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	711a      	strb	r2, [r3, #4]
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff ffd1 	bl	8007fbc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f043 0204 	orr.w	r2, r3, #4
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff ffc7 	bl	8007fd0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	711a      	strb	r2, [r3, #4]
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e08d      	b.n	800817e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	4b47      	ldr	r3, [pc, #284]	; (8008188 <HAL_DMA_Init+0x138>)
 800806a:	429a      	cmp	r2, r3
 800806c:	d80f      	bhi.n	800808e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	4b45      	ldr	r3, [pc, #276]	; (800818c <HAL_DMA_Init+0x13c>)
 8008076:	4413      	add	r3, r2
 8008078:	4a45      	ldr	r2, [pc, #276]	; (8008190 <HAL_DMA_Init+0x140>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	009a      	lsls	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a42      	ldr	r2, [pc, #264]	; (8008194 <HAL_DMA_Init+0x144>)
 800808a:	641a      	str	r2, [r3, #64]	; 0x40
 800808c:	e00e      	b.n	80080ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	4b40      	ldr	r3, [pc, #256]	; (8008198 <HAL_DMA_Init+0x148>)
 8008096:	4413      	add	r3, r2
 8008098:	4a3d      	ldr	r2, [pc, #244]	; (8008190 <HAL_DMA_Init+0x140>)
 800809a:	fba2 2303 	umull	r2, r3, r2, r3
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	009a      	lsls	r2, r3, #2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a3c      	ldr	r2, [pc, #240]	; (800819c <HAL_DMA_Init+0x14c>)
 80080aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80080d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa76 	bl	80085f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800810c:	d102      	bne.n	8008114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008128:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d010      	beq.n	8008154 <HAL_DMA_Init+0x104>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b04      	cmp	r3, #4
 8008138:	d80c      	bhi.n	8008154 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa96 	bl	800866c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	e008      	b.n	8008166 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	40020407 	.word	0x40020407
 800818c:	bffdfff8 	.word	0xbffdfff8
 8008190:	cccccccd 	.word	0xcccccccd
 8008194:	40020000 	.word	0x40020000
 8008198:	bffdfbf8 	.word	0xbffdfbf8
 800819c:	40020400 	.word	0x40020400

080081a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_DMA_Start_IT+0x20>
 80081bc:	2302      	movs	r3, #2
 80081be:	e066      	b.n	800828e <HAL_DMA_Start_IT+0xee>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d155      	bne.n	8008280 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f9bb 	bl	8008574 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 020e 	orr.w	r2, r2, #14
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	e00f      	b.n	8008238 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0204 	bic.w	r2, r2, #4
 8008226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 020a 	orr.w	r2, r2, #10
 8008236:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008254:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800826c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e005      	b.n	800828c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d005      	beq.n	80082ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2204      	movs	r2, #4
 80082b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	73fb      	strb	r3, [r7, #15]
 80082b8:	e037      	b.n	800832a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 020e 	bic.w	r2, r2, #14
 80082c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0201 	bic.w	r2, r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ee:	f003 021f 	and.w	r2, r3, #31
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	2101      	movs	r1, #1
 80082f8:	fa01 f202 	lsl.w	r2, r1, r2
 80082fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008306:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800831e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008328:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d00d      	beq.n	800837c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2204      	movs	r2, #4
 8008364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
 800837a:	e047      	b.n	800840c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 020e 	bic.w	r2, r2, #14
 800838a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0201 	bic.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b0:	f003 021f 	and.w	r2, r3, #31
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	2101      	movs	r1, #1
 80083ba:	fa01 f202 	lsl.w	r2, r1, r2
 80083be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80083c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80083ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	4798      	blx	r3
    }
  }
  return status;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	2204      	movs	r2, #4
 8008438:	409a      	lsls	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4013      	ands	r3, r2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d026      	beq.n	8008490 <HAL_DMA_IRQHandler+0x7a>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d021      	beq.n	8008490 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d107      	bne.n	800846a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0204 	bic.w	r2, r2, #4
 8008468:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846e:	f003 021f 	and.w	r2, r3, #31
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	2104      	movs	r1, #4
 8008478:	fa01 f202 	lsl.w	r2, r1, r2
 800847c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	2b00      	cmp	r3, #0
 8008484:	d071      	beq.n	800856a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800848e:	e06c      	b.n	800856a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008494:	f003 031f 	and.w	r3, r3, #31
 8008498:	2202      	movs	r2, #2
 800849a:	409a      	lsls	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d02e      	beq.n	8008502 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d029      	beq.n	8008502 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 020a 	bic.w	r2, r2, #10
 80084ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d8:	f003 021f 	and.w	r2, r3, #31
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	2102      	movs	r1, #2
 80084e2:	fa01 f202 	lsl.w	r2, r1, r2
 80084e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d038      	beq.n	800856a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008500:	e033      	b.n	800856a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2208      	movs	r2, #8
 800850c:	409a      	lsls	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4013      	ands	r3, r2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d02a      	beq.n	800856c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d025      	beq.n	800856c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 020e 	bic.w	r2, r2, #14
 800852e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008534:	f003 021f 	and.w	r2, r3, #31
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	2101      	movs	r1, #1
 800853e:	fa01 f202 	lsl.w	r2, r1, r2
 8008542:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800856a:	bf00      	nop
 800856c:	bf00      	nop
}
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800858a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800859c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	f003 021f 	and.w	r2, r3, #31
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	2101      	movs	r1, #1
 80085ac:	fa01 f202 	lsl.w	r2, r1, r2
 80085b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d108      	bne.n	80085d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80085d2:	e007      	b.n	80085e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	60da      	str	r2, [r3, #12]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b16      	ldr	r3, [pc, #88]	; (8008658 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008600:	429a      	cmp	r2, r3
 8008602:	d802      	bhi.n	800860a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008604:	4b15      	ldr	r3, [pc, #84]	; (800865c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e001      	b.n	800860e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800860a:	4b15      	ldr	r3, [pc, #84]	; (8008660 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800860c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	3b08      	subs	r3, #8
 800861a:	4a12      	ldr	r2, [pc, #72]	; (8008664 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008628:	089b      	lsrs	r3, r3, #2
 800862a:	009a      	lsls	r2, r3, #2
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	4413      	add	r3, r2
 8008630:	461a      	mov	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a0b      	ldr	r2, [pc, #44]	; (8008668 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800863a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	2201      	movs	r2, #1
 8008644:	409a      	lsls	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	651a      	str	r2, [r3, #80]	; 0x50
}
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40020407 	.word	0x40020407
 800865c:	40020800 	.word	0x40020800
 8008660:	40020820 	.word	0x40020820
 8008664:	cccccccd 	.word	0xcccccccd
 8008668:	40020880 	.word	0x40020880

0800866c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a08      	ldr	r2, [pc, #32]	; (80086b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800868e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3b01      	subs	r3, #1
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	2201      	movs	r2, #1
 800869a:	409a      	lsls	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	1000823f 	.word	0x1000823f
 80086b0:	40020940 	.word	0x40020940

080086b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086be:	2300      	movs	r3, #0
 80086c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086c2:	e15a      	b.n	800897a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	2101      	movs	r1, #1
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	fa01 f303 	lsl.w	r3, r1, r3
 80086d0:	4013      	ands	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 814c 	beq.w	8008974 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d005      	beq.n	80086f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d130      	bne.n	8008756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	2203      	movs	r2, #3
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	43db      	mvns	r3, r3
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4013      	ands	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800872a:	2201      	movs	r2, #1
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	43db      	mvns	r3, r3
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4013      	ands	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	091b      	lsrs	r3, r3, #4
 8008740:	f003 0201 	and.w	r2, r3, #1
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	fa02 f303 	lsl.w	r3, r2, r3
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d017      	beq.n	8008792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	2203      	movs	r2, #3
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	43db      	mvns	r3, r3
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4013      	ands	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689a      	ldr	r2, [r3, #8]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	fa02 f303 	lsl.w	r3, r2, r3
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d123      	bne.n	80087e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	08da      	lsrs	r2, r3, #3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3208      	adds	r2, #8
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	220f      	movs	r2, #15
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	43db      	mvns	r3, r3
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4013      	ands	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f003 0307 	and.w	r3, r3, #7
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	08da      	lsrs	r2, r3, #3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3208      	adds	r2, #8
 80087e0:	6939      	ldr	r1, [r7, #16]
 80087e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	2203      	movs	r2, #3
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	43db      	mvns	r3, r3
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4013      	ands	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f003 0203 	and.w	r2, r3, #3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 80a6 	beq.w	8008974 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <HAL_GPIO_Init+0x2e4>)
 800882a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800882c:	4a5a      	ldr	r2, [pc, #360]	; (8008998 <HAL_GPIO_Init+0x2e4>)
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	6613      	str	r3, [r2, #96]	; 0x60
 8008834:	4b58      	ldr	r3, [pc, #352]	; (8008998 <HAL_GPIO_Init+0x2e4>)
 8008836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008840:	4a56      	ldr	r2, [pc, #344]	; (800899c <HAL_GPIO_Init+0x2e8>)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	089b      	lsrs	r3, r3, #2
 8008846:	3302      	adds	r3, #2
 8008848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	220f      	movs	r2, #15
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	43db      	mvns	r3, r3
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4013      	ands	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800886a:	d01f      	beq.n	80088ac <HAL_GPIO_Init+0x1f8>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a4c      	ldr	r2, [pc, #304]	; (80089a0 <HAL_GPIO_Init+0x2ec>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d019      	beq.n	80088a8 <HAL_GPIO_Init+0x1f4>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a4b      	ldr	r2, [pc, #300]	; (80089a4 <HAL_GPIO_Init+0x2f0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d013      	beq.n	80088a4 <HAL_GPIO_Init+0x1f0>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a4a      	ldr	r2, [pc, #296]	; (80089a8 <HAL_GPIO_Init+0x2f4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d00d      	beq.n	80088a0 <HAL_GPIO_Init+0x1ec>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a49      	ldr	r2, [pc, #292]	; (80089ac <HAL_GPIO_Init+0x2f8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <HAL_GPIO_Init+0x1e8>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a48      	ldr	r2, [pc, #288]	; (80089b0 <HAL_GPIO_Init+0x2fc>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d101      	bne.n	8008898 <HAL_GPIO_Init+0x1e4>
 8008894:	2305      	movs	r3, #5
 8008896:	e00a      	b.n	80088ae <HAL_GPIO_Init+0x1fa>
 8008898:	2306      	movs	r3, #6
 800889a:	e008      	b.n	80088ae <HAL_GPIO_Init+0x1fa>
 800889c:	2304      	movs	r3, #4
 800889e:	e006      	b.n	80088ae <HAL_GPIO_Init+0x1fa>
 80088a0:	2303      	movs	r3, #3
 80088a2:	e004      	b.n	80088ae <HAL_GPIO_Init+0x1fa>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e002      	b.n	80088ae <HAL_GPIO_Init+0x1fa>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <HAL_GPIO_Init+0x1fa>
 80088ac:	2300      	movs	r3, #0
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	f002 0203 	and.w	r2, r2, #3
 80088b4:	0092      	lsls	r2, r2, #2
 80088b6:	4093      	lsls	r3, r2
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088be:	4937      	ldr	r1, [pc, #220]	; (800899c <HAL_GPIO_Init+0x2e8>)
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	089b      	lsrs	r3, r3, #2
 80088c4:	3302      	adds	r3, #2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088cc:	4b39      	ldr	r3, [pc, #228]	; (80089b4 <HAL_GPIO_Init+0x300>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	43db      	mvns	r3, r3
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4013      	ands	r3, r2
 80088da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80088f0:	4a30      	ldr	r2, [pc, #192]	; (80089b4 <HAL_GPIO_Init+0x300>)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <HAL_GPIO_Init+0x300>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	43db      	mvns	r3, r3
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4013      	ands	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800891a:	4a26      	ldr	r2, [pc, #152]	; (80089b4 <HAL_GPIO_Init+0x300>)
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008920:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <HAL_GPIO_Init+0x300>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	43db      	mvns	r3, r3
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4013      	ands	r3, r2
 800892e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008944:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <HAL_GPIO_Init+0x300>)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800894a:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <HAL_GPIO_Init+0x300>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	43db      	mvns	r3, r3
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4013      	ands	r3, r2
 8008958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800896e:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <HAL_GPIO_Init+0x300>)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	fa22 f303 	lsr.w	r3, r2, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	f47f ae9d 	bne.w	80086c4 <HAL_GPIO_Init+0x10>
  }
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40021000 	.word	0x40021000
 800899c:	40010000 	.word	0x40010000
 80089a0:	48000400 	.word	0x48000400
 80089a4:	48000800 	.word	0x48000800
 80089a8:	48000c00 	.word	0x48000c00
 80089ac:	48001000 	.word	0x48001000
 80089b0:	48001400 	.word	0x48001400
 80089b4:	40010400 	.word	0x40010400

080089b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	807b      	strh	r3, [r7, #2]
 80089c4:	4613      	mov	r3, r2
 80089c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089c8:	787b      	ldrb	r3, [r7, #1]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80089ce:	887a      	ldrh	r2, [r7, #2]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80089d4:	e002      	b.n	80089dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80089d6:	887a      	ldrh	r2, [r7, #2]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e0bb      	b.n	8008b76 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d101      	bne.n	8008a0e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e0b3      	b.n	8008b76 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d101      	bne.n	8008a1e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e0ab      	b.n	8008b76 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a1e:	4b58      	ldr	r3, [pc, #352]	; (8008b80 <HAL_OPAMP_Init+0x198>)
 8008a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a22:	4a57      	ldr	r2, [pc, #348]	; (8008b80 <HAL_OPAMP_Init+0x198>)
 8008a24:	f043 0301 	orr.w	r3, r3, #1
 8008a28:	6613      	str	r3, [r2, #96]	; 0x60
 8008a2a:	4b55      	ldr	r3, [pc, #340]	; (8008b80 <HAL_OPAMP_Init+0x198>)
 8008a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fa ff4e 	bl	80038ec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d003      	beq.n	8008a60 <HAL_OPAMP_Init+0x78>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2b60      	cmp	r3, #96	; 0x60
 8008a5e:	d133      	bne.n	8008ac8 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f023 0110 	bic.w	r1, r3, #16
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <HAL_OPAMP_Init+0x19c>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6851      	ldr	r1, [r2, #4]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6892      	ldr	r2, [r2, #8]
 8008a88:	4311      	orrs	r1, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6912      	ldr	r2, [r2, #16]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	7d09      	ldrb	r1, [r1, #20]
 8008a94:	2901      	cmp	r1, #1
 8008a96:	d102      	bne.n	8008a9e <HAL_OPAMP_Init+0xb6>
 8008a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a9c:	e000      	b.n	8008aa0 <HAL_OPAMP_Init+0xb8>
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4311      	orrs	r1, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aa6:	4311      	orrs	r1, r2
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008aac:	4311      	orrs	r1, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ab2:	04d2      	lsls	r2, r2, #19
 8008ab4:	4311      	orrs	r1, r2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008aba:	0612      	lsls	r2, r2, #24
 8008abc:	4311      	orrs	r1, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	e035      	b.n	8008b34 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f023 0110 	bic.w	r1, r3, #16
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <HAL_OPAMP_Init+0x19c>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6851      	ldr	r1, [r2, #4]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6892      	ldr	r2, [r2, #8]
 8008af0:	4311      	orrs	r1, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	68d2      	ldr	r2, [r2, #12]
 8008af6:	4311      	orrs	r1, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6912      	ldr	r2, [r2, #16]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	7d09      	ldrb	r1, [r1, #20]
 8008b02:	2901      	cmp	r1, #1
 8008b04:	d102      	bne.n	8008b0c <HAL_OPAMP_Init+0x124>
 8008b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b0a:	e000      	b.n	8008b0e <HAL_OPAMP_Init+0x126>
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4311      	orrs	r1, r2
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b14:	4311      	orrs	r1, r2
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008b1a:	4311      	orrs	r1, r2
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b20:	04d2      	lsls	r2, r2, #19
 8008b22:	4311      	orrs	r1, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b28:	0612      	lsls	r2, r2, #24
 8008b2a:	4311      	orrs	r1, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	430b      	orrs	r3, r1
 8008b32:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	db10      	blt.n	8008b60 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699a      	ldr	r2, [r3, #24]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40021000 	.word	0x40021000
 8008b84:	e0003e11 	.word	0xe0003e11

08008b88 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
 8008b9e:	e01d      	b.n	8008bdc <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b05      	cmp	r3, #5
 8008baa:	d102      	bne.n	8008bb2 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
 8008bb0:	e014      	b.n	8008bdc <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008bd6:	e001      	b.n	8008bdc <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d141      	bne.n	8008c7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008bfa:	4b4b      	ldr	r3, [pc, #300]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c06:	d131      	bne.n	8008c6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c08:	4b47      	ldr	r3, [pc, #284]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c0e:	4a46      	ldr	r2, [pc, #280]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c18:	4b43      	ldr	r3, [pc, #268]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c20:	4a41      	ldr	r2, [pc, #260]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c28:	4b40      	ldr	r3, [pc, #256]	; (8008d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2232      	movs	r2, #50	; 0x32
 8008c2e:	fb02 f303 	mul.w	r3, r2, r3
 8008c32:	4a3f      	ldr	r2, [pc, #252]	; (8008d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c34:	fba2 2303 	umull	r2, r3, r2, r3
 8008c38:	0c9b      	lsrs	r3, r3, #18
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c3e:	e002      	b.n	8008c46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c46:	4b38      	ldr	r3, [pc, #224]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c52:	d102      	bne.n	8008c5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f2      	bne.n	8008c40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008c5a:	4b33      	ldr	r3, [pc, #204]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c66:	d158      	bne.n	8008d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e057      	b.n	8008d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c6c:	4b2e      	ldr	r3, [pc, #184]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c72:	4a2d      	ldr	r2, [pc, #180]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008c7c:	e04d      	b.n	8008d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d141      	bne.n	8008d0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c86:	4b28      	ldr	r3, [pc, #160]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c92:	d131      	bne.n	8008cf8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c94:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c9a:	4a23      	ldr	r2, [pc, #140]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ca4:	4b20      	ldr	r3, [pc, #128]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008cac:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	; (8008d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2232      	movs	r2, #50	; 0x32
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	4a1c      	ldr	r2, [pc, #112]	; (8008d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc4:	0c9b      	lsrs	r3, r3, #18
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008cca:	e002      	b.n	8008cd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cde:	d102      	bne.n	8008ce6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f2      	bne.n	8008ccc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf2:	d112      	bne.n	8008d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e011      	b.n	8008d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cfe:	4a0a      	ldr	r2, [pc, #40]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008d08:	e007      	b.n	8008d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d12:	4a05      	ldr	r2, [pc, #20]	; (8008d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40007000 	.word	0x40007000
 8008d2c:	20000008 	.word	0x20000008
 8008d30:	431bde83 	.word	0x431bde83

08008d34 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008d3c:	f7fc f95e 	bl	8004ffc <HAL_GetTick>
 8008d40:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e069      	b.n	8008e20 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7fa febf 	bl	8003ae4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008d66:	f241 3188 	movw	r1, #5000	; 0x1388
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa54 	bl	8009218 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	021a      	lsls	r2, r3, #8
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	2120      	movs	r1, #32
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa7f 	bl	800929a <QSPI_WaitFlagStateUntilTimeout>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d137      	bne.n	8008e16 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008db0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6852      	ldr	r2, [r2, #4]
 8008db8:	0611      	lsls	r1, r2, #24
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	68d2      	ldr	r2, [r2, #12]
 8008dbe:	4311      	orrs	r1, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	69d2      	ldr	r2, [r2, #28]
 8008dc4:	4311      	orrs	r1, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6a12      	ldr	r2, [r2, #32]
 8008dca:	4311      	orrs	r1, r2
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6812      	ldr	r2, [r2, #0]
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	4b13      	ldr	r3, [pc, #76]	; (8008e28 <HAL_QSPI_Init+0xf4>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6912      	ldr	r2, [r2, #16]
 8008de2:	0411      	lsls	r1, r2, #16
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6952      	ldr	r2, [r2, #20]
 8008de8:	4311      	orrs	r1, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6992      	ldr	r2, [r2, #24]
 8008dee:	4311      	orrs	r1, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6812      	ldr	r2, [r2, #0]
 8008df4:	430b      	orrs	r3, r1
 8008df6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	ffe0f8fe 	.word	0xffe0f8fe

08008e2c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f003 0304 	and.w	r3, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d064      	beq.n	8008f18 <HAL_QSPI_IRQHandler+0xec>
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d05f      	beq.n	8008f18 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3320      	adds	r3, #32
 8008e5e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b12      	cmp	r3, #18
 8008e6a:	d125      	bne.n	8008eb8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008e6c:	e01c      	b.n	8008ea8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00f      	beq.n	8008e96 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8008e94:	e008      	b.n	8008ea8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ea4:	601a      	str	r2, [r3, #0]
          break;
 8008ea6:	e033      	b.n	8008f10 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1db      	bne.n	8008e6e <HAL_QSPI_IRQHandler+0x42>
 8008eb6:	e02b      	b.n	8008f10 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b22      	cmp	r3, #34	; 0x22
 8008ec2:	d125      	bne.n	8008f10 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008ec4:	e01d      	b.n	8008f02 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	7812      	ldrb	r2, [r2, #0]
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	1e5a      	subs	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	639a      	str	r2, [r3, #56]	; 0x38
 8008eee:	e008      	b.n	8008f02 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008efe:	601a      	str	r2, [r3, #0]
          break;
 8008f00:	e006      	b.n	8008f10 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1da      	bne.n	8008ec6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f963 	bl	80091dc <HAL_QSPI_FifoThresholdCallback>
 8008f16:	e13c      	b.n	8009192 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80b0 	beq.w	8009084 <HAL_QSPI_IRQHandler+0x258>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 80aa 	beq.w	8009084 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2202      	movs	r2, #2
 8008f36:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008f46:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b12      	cmp	r3, #18
 8008f52:	d120      	bne.n	8008f96 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d011      	beq.n	8008f86 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0204 	bic.w	r2, r2, #4
 8008f70:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0201 	bic.w	r2, r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7fa fd5c 	bl	8003a4c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8008f94:	e0fa      	b.n	800918c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b22      	cmp	r3, #34	; 0x22
 8008fa0:	d143      	bne.n	800902a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d012      	beq.n	8008fd6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 0204 	bic.w	r2, r2, #4
 8008fbe:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e021      	b.n	800901a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3320      	adds	r3, #32
 8008fdc:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8008fde:	e013      	b.n	8009008 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d017      	beq.n	8009018 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	7812      	ldrb	r2, [r2, #0]
 8008ff0:	b2d2      	uxtb	r2, r2
 8008ff2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	1e5a      	subs	r2, r3, #1
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e4      	bne.n	8008fe0 <HAL_QSPI_IRQHandler+0x1b4>
 8009016:	e000      	b.n	800901a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8009018:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fa fd22 	bl	8003a6c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009028:	e0b0      	b.n	800918c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b02      	cmp	r3, #2
 8009034:	d107      	bne.n	8009046 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f8c2 	bl	80091c8 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009044:	e0a2      	b.n	800918c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b08      	cmp	r3, #8
 8009050:	f040 809c 	bne.w	800918c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	695a      	ldr	r2, [r3, #20]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009062:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f89d 	bl	80091b4 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800907a:	e087      	b.n	800918c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f88f 	bl	80091a0 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009082:	e083      	b.n	800918c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f003 0308 	and.w	r3, r3, #8
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01f      	beq.n	80090ce <HAL_QSPI_IRQHandler+0x2a2>
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d01a      	beq.n	80090ce <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2208      	movs	r2, #8
 800909e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80090bc:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f892 	bl	80091f0 <HAL_QSPI_StatusMatchCallback>
 80090cc:	e061      	b.n	8009192 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d047      	beq.n	8009168 <HAL_QSPI_IRQHandler+0x33c>
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d042      	beq.n	8009168 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2201      	movs	r2, #1
 80090e8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80090f8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	f043 0202 	orr.w	r2, r3, #2
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d021      	beq.n	8009158 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0204 	bic.w	r2, r2, #4
 8009122:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009128:	4a1c      	ldr	r2, [pc, #112]	; (800919c <HAL_QSPI_IRQHandler+0x370>)
 800912a:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff f909 	bl	8008348 <HAL_DMA_Abort_IT>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d029      	beq.n	8009190 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009140:	f043 0204 	orr.w	r2, r3, #4
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f825 	bl	80091a0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009156:	e01b      	b.n	8009190 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f81d 	bl	80091a0 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009166:	e013      	b.n	8009190 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f003 0310 	and.w	r3, r3, #16
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00f      	beq.n	8009192 <HAL_QSPI_IRQHandler+0x366>
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2210      	movs	r2, #16
 8009182:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f83d 	bl	8009204 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800918a:	e002      	b.n	8009192 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800918c:	bf00      	nop
 800918e:	e000      	b.n	8009192 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009190:	bf00      	nop
}
 8009192:	bf00      	nop
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	08009235 	.word	0x08009235

080091a0 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b08      	cmp	r3, #8
 8009258:	d114      	bne.n	8009284 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2202      	movs	r2, #2
 8009260:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009270:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f042 0202 	orr.w	r2, r2, #2
 8009280:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8009282:	e006      	b.n	8009292 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff ff87 	bl	80091a0 <HAL_QSPI_ErrorCallback>
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	603b      	str	r3, [r7, #0]
 80092a6:	4613      	mov	r3, r2
 80092a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80092aa:	e01a      	b.n	80092e2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d016      	beq.n	80092e2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b4:	f7fb fea2 	bl	8004ffc <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d302      	bcc.n	80092ca <QSPI_WaitFlagStateUntilTimeout+0x30>
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2204      	movs	r2, #4
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d6:	f043 0201 	orr.w	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e00e      	b.n	8009300 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bf14      	ite	ne
 80092f0:	2301      	movne	r3, #1
 80092f2:	2300      	moveq	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	461a      	mov	r2, r3
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d1d6      	bne.n	80092ac <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e306      	b.n	8009928 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d075      	beq.n	8009412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009326:	4b97      	ldr	r3, [pc, #604]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 030c 	and.w	r3, r3, #12
 800932e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009330:	4b94      	ldr	r3, [pc, #592]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b0c      	cmp	r3, #12
 800933e:	d102      	bne.n	8009346 <HAL_RCC_OscConfig+0x3e>
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b03      	cmp	r3, #3
 8009344:	d002      	beq.n	800934c <HAL_RCC_OscConfig+0x44>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b08      	cmp	r3, #8
 800934a:	d10b      	bne.n	8009364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800934c:	4b8d      	ldr	r3, [pc, #564]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d05b      	beq.n	8009410 <HAL_RCC_OscConfig+0x108>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d157      	bne.n	8009410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e2e1      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800936c:	d106      	bne.n	800937c <HAL_RCC_OscConfig+0x74>
 800936e:	4b85      	ldr	r3, [pc, #532]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a84      	ldr	r2, [pc, #528]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	e01d      	b.n	80093b8 <HAL_RCC_OscConfig+0xb0>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009384:	d10c      	bne.n	80093a0 <HAL_RCC_OscConfig+0x98>
 8009386:	4b7f      	ldr	r3, [pc, #508]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a7e      	ldr	r2, [pc, #504]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800938c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	4b7c      	ldr	r3, [pc, #496]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a7b      	ldr	r2, [pc, #492]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	e00b      	b.n	80093b8 <HAL_RCC_OscConfig+0xb0>
 80093a0:	4b78      	ldr	r3, [pc, #480]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a77      	ldr	r2, [pc, #476]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80093a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	4b75      	ldr	r3, [pc, #468]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a74      	ldr	r2, [pc, #464]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80093b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d013      	beq.n	80093e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c0:	f7fb fe1c 	bl	8004ffc <HAL_GetTick>
 80093c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093c8:	f7fb fe18 	bl	8004ffc <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b64      	cmp	r3, #100	; 0x64
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e2a6      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093da:	4b6a      	ldr	r3, [pc, #424]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f0      	beq.n	80093c8 <HAL_RCC_OscConfig+0xc0>
 80093e6:	e014      	b.n	8009412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e8:	f7fb fe08 	bl	8004ffc <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093f0:	f7fb fe04 	bl	8004ffc <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b64      	cmp	r3, #100	; 0x64
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e292      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009402:	4b60      	ldr	r3, [pc, #384]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1f0      	bne.n	80093f0 <HAL_RCC_OscConfig+0xe8>
 800940e:	e000      	b.n	8009412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d075      	beq.n	800950a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800941e:	4b59      	ldr	r3, [pc, #356]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 030c 	and.w	r3, r3, #12
 8009426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009428:	4b56      	ldr	r3, [pc, #344]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	2b0c      	cmp	r3, #12
 8009436:	d102      	bne.n	800943e <HAL_RCC_OscConfig+0x136>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d002      	beq.n	8009444 <HAL_RCC_OscConfig+0x13c>
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b04      	cmp	r3, #4
 8009442:	d11f      	bne.n	8009484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009444:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_RCC_OscConfig+0x154>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e265      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800945c:	4b49      	ldr	r3, [pc, #292]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	061b      	lsls	r3, r3, #24
 800946a:	4946      	ldr	r1, [pc, #280]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800946c:	4313      	orrs	r3, r2
 800946e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009470:	4b45      	ldr	r3, [pc, #276]	; (8009588 <HAL_RCC_OscConfig+0x280>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4618      	mov	r0, r3
 8009476:	f7fb fd75 	bl	8004f64 <HAL_InitTick>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d043      	beq.n	8009508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e251      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d023      	beq.n	80094d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800948c:	4b3d      	ldr	r3, [pc, #244]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a3c      	ldr	r2, [pc, #240]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009498:	f7fb fdb0 	bl	8004ffc <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094a0:	f7fb fdac 	bl	8004ffc <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e23a      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094b2:	4b34      	ldr	r3, [pc, #208]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0f0      	beq.n	80094a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094be:	4b31      	ldr	r3, [pc, #196]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	061b      	lsls	r3, r3, #24
 80094cc:	492d      	ldr	r1, [pc, #180]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	604b      	str	r3, [r1, #4]
 80094d2:	e01a      	b.n	800950a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094d4:	4b2b      	ldr	r3, [pc, #172]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80094da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e0:	f7fb fd8c 	bl	8004ffc <HAL_GetTick>
 80094e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094e8:	f7fb fd88 	bl	8004ffc <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e216      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094fa:	4b22      	ldr	r3, [pc, #136]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f0      	bne.n	80094e8 <HAL_RCC_OscConfig+0x1e0>
 8009506:	e000      	b.n	800950a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b00      	cmp	r3, #0
 8009514:	d041      	beq.n	800959a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d01c      	beq.n	8009558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800951e:	4b19      	ldr	r3, [pc, #100]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009524:	4a17      	ldr	r2, [pc, #92]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800952e:	f7fb fd65 	bl	8004ffc <HAL_GetTick>
 8009532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009534:	e008      	b.n	8009548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009536:	f7fb fd61 	bl	8004ffc <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d901      	bls.n	8009548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e1ef      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009548:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800954a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0ef      	beq.n	8009536 <HAL_RCC_OscConfig+0x22e>
 8009556:	e020      	b.n	800959a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 800955a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <HAL_RCC_OscConfig+0x27c>)
 8009560:	f023 0301 	bic.w	r3, r3, #1
 8009564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009568:	f7fb fd48 	bl	8004ffc <HAL_GetTick>
 800956c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800956e:	e00d      	b.n	800958c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009570:	f7fb fd44 	bl	8004ffc <HAL_GetTick>
 8009574:	4602      	mov	r2, r0
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	2b02      	cmp	r3, #2
 800957c:	d906      	bls.n	800958c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e1d2      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
 8009582:	bf00      	nop
 8009584:	40021000 	.word	0x40021000
 8009588:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800958c:	4b8c      	ldr	r3, [pc, #560]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 800958e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1ea      	bne.n	8009570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80a6 	beq.w	80096f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095a8:	2300      	movs	r3, #0
 80095aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80095ac:	4b84      	ldr	r3, [pc, #528]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80095ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <HAL_RCC_OscConfig+0x2b4>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <HAL_RCC_OscConfig+0x2b6>
 80095bc:	2300      	movs	r3, #0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00d      	beq.n	80095de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095c2:	4b7f      	ldr	r3, [pc, #508]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80095c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c6:	4a7e      	ldr	r2, [pc, #504]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80095c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095cc:	6593      	str	r3, [r2, #88]	; 0x58
 80095ce:	4b7c      	ldr	r3, [pc, #496]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80095d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80095da:	2301      	movs	r3, #1
 80095dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095de:	4b79      	ldr	r3, [pc, #484]	; (80097c4 <HAL_RCC_OscConfig+0x4bc>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d118      	bne.n	800961c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095ea:	4b76      	ldr	r3, [pc, #472]	; (80097c4 <HAL_RCC_OscConfig+0x4bc>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a75      	ldr	r2, [pc, #468]	; (80097c4 <HAL_RCC_OscConfig+0x4bc>)
 80095f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095f6:	f7fb fd01 	bl	8004ffc <HAL_GetTick>
 80095fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80095fc:	e008      	b.n	8009610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095fe:	f7fb fcfd 	bl	8004ffc <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	d901      	bls.n	8009610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e18b      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009610:	4b6c      	ldr	r3, [pc, #432]	; (80097c4 <HAL_RCC_OscConfig+0x4bc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0f0      	beq.n	80095fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d108      	bne.n	8009636 <HAL_RCC_OscConfig+0x32e>
 8009624:	4b66      	ldr	r3, [pc, #408]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962a:	4a65      	ldr	r2, [pc, #404]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 800962c:	f043 0301 	orr.w	r3, r3, #1
 8009630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009634:	e024      	b.n	8009680 <HAL_RCC_OscConfig+0x378>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	2b05      	cmp	r3, #5
 800963c:	d110      	bne.n	8009660 <HAL_RCC_OscConfig+0x358>
 800963e:	4b60      	ldr	r3, [pc, #384]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009644:	4a5e      	ldr	r2, [pc, #376]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009646:	f043 0304 	orr.w	r3, r3, #4
 800964a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800964e:	4b5c      	ldr	r3, [pc, #368]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009654:	4a5a      	ldr	r2, [pc, #360]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800965e:	e00f      	b.n	8009680 <HAL_RCC_OscConfig+0x378>
 8009660:	4b57      	ldr	r3, [pc, #348]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009666:	4a56      	ldr	r2, [pc, #344]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009670:	4b53      	ldr	r3, [pc, #332]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009676:	4a52      	ldr	r2, [pc, #328]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009678:	f023 0304 	bic.w	r3, r3, #4
 800967c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d016      	beq.n	80096b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009688:	f7fb fcb8 	bl	8004ffc <HAL_GetTick>
 800968c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800968e:	e00a      	b.n	80096a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009690:	f7fb fcb4 	bl	8004ffc <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	f241 3288 	movw	r2, #5000	; 0x1388
 800969e:	4293      	cmp	r3, r2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e140      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096a6:	4b46      	ldr	r3, [pc, #280]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80096a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0ed      	beq.n	8009690 <HAL_RCC_OscConfig+0x388>
 80096b4:	e015      	b.n	80096e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096b6:	f7fb fca1 	bl	8004ffc <HAL_GetTick>
 80096ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096bc:	e00a      	b.n	80096d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096be:	f7fb fc9d 	bl	8004ffc <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e129      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80096d4:	4b3a      	ldr	r3, [pc, #232]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1ed      	bne.n	80096be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80096e2:	7ffb      	ldrb	r3, [r7, #31]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d105      	bne.n	80096f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096e8:	4b35      	ldr	r3, [pc, #212]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80096ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ec:	4a34      	ldr	r2, [pc, #208]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80096ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d03c      	beq.n	800977a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01c      	beq.n	8009742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009708:	4b2d      	ldr	r3, [pc, #180]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 800970a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800970e:	4a2c      	ldr	r2, [pc, #176]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009710:	f043 0301 	orr.w	r3, r3, #1
 8009714:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009718:	f7fb fc70 	bl	8004ffc <HAL_GetTick>
 800971c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800971e:	e008      	b.n	8009732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009720:	f7fb fc6c 	bl	8004ffc <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b02      	cmp	r3, #2
 800972c:	d901      	bls.n	8009732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e0fa      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009732:	4b23      	ldr	r3, [pc, #140]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0ef      	beq.n	8009720 <HAL_RCC_OscConfig+0x418>
 8009740:	e01b      	b.n	800977a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009742:	4b1f      	ldr	r3, [pc, #124]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009748:	4a1d      	ldr	r2, [pc, #116]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 800974a:	f023 0301 	bic.w	r3, r3, #1
 800974e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009752:	f7fb fc53 	bl	8004ffc <HAL_GetTick>
 8009756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009758:	e008      	b.n	800976c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800975a:	f7fb fc4f 	bl	8004ffc <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	d901      	bls.n	800976c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e0dd      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800976c:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 800976e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1ef      	bne.n	800975a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 80d1 	beq.w	8009926 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009784:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f003 030c 	and.w	r3, r3, #12
 800978c:	2b0c      	cmp	r3, #12
 800978e:	f000 808b 	beq.w	80098a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d15e      	bne.n	8009858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a08      	ldr	r2, [pc, #32]	; (80097c0 <HAL_RCC_OscConfig+0x4b8>)
 80097a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a6:	f7fb fc29 	bl	8004ffc <HAL_GetTick>
 80097aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097ac:	e00c      	b.n	80097c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097ae:	f7fb fc25 	bl	8004ffc <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d905      	bls.n	80097c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e0b3      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
 80097c0:	40021000 	.word	0x40021000
 80097c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80097c8:	4b59      	ldr	r3, [pc, #356]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1ec      	bne.n	80097ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097d4:	4b56      	ldr	r3, [pc, #344]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	4b56      	ldr	r3, [pc, #344]	; (8009934 <HAL_RCC_OscConfig+0x62c>)
 80097da:	4013      	ands	r3, r2
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	6a11      	ldr	r1, [r2, #32]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097e4:	3a01      	subs	r2, #1
 80097e6:	0112      	lsls	r2, r2, #4
 80097e8:	4311      	orrs	r1, r2
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80097ee:	0212      	lsls	r2, r2, #8
 80097f0:	4311      	orrs	r1, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097f6:	0852      	lsrs	r2, r2, #1
 80097f8:	3a01      	subs	r2, #1
 80097fa:	0552      	lsls	r2, r2, #21
 80097fc:	4311      	orrs	r1, r2
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009802:	0852      	lsrs	r2, r2, #1
 8009804:	3a01      	subs	r2, #1
 8009806:	0652      	lsls	r2, r2, #25
 8009808:	4311      	orrs	r1, r2
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800980e:	06d2      	lsls	r2, r2, #27
 8009810:	430a      	orrs	r2, r1
 8009812:	4947      	ldr	r1, [pc, #284]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 8009814:	4313      	orrs	r3, r2
 8009816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009818:	4b45      	ldr	r3, [pc, #276]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a44      	ldr	r2, [pc, #272]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800981e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009824:	4b42      	ldr	r3, [pc, #264]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	4a41      	ldr	r2, [pc, #260]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800982a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800982e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009830:	f7fb fbe4 	bl	8004ffc <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009838:	f7fb fbe0 	bl	8004ffc <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e06e      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800984a:	4b39      	ldr	r3, [pc, #228]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f0      	beq.n	8009838 <HAL_RCC_OscConfig+0x530>
 8009856:	e066      	b.n	8009926 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009858:	4b35      	ldr	r3, [pc, #212]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a34      	ldr	r2, [pc, #208]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800985e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009862:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009864:	4b32      	ldr	r3, [pc, #200]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	4a31      	ldr	r2, [pc, #196]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800986a:	f023 0303 	bic.w	r3, r3, #3
 800986e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009870:	4b2f      	ldr	r3, [pc, #188]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4a2e      	ldr	r2, [pc, #184]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 8009876:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800987a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800987e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009880:	f7fb fbbc 	bl	8004ffc <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009888:	f7fb fbb8 	bl	8004ffc <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e046      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800989a:	4b25      	ldr	r3, [pc, #148]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f0      	bne.n	8009888 <HAL_RCC_OscConfig+0x580>
 80098a6:	e03e      	b.n	8009926 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d101      	bne.n	80098b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e039      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80098b4:	4b1e      	ldr	r3, [pc, #120]	; (8009930 <HAL_RCC_OscConfig+0x628>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f003 0203 	and.w	r2, r3, #3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d12c      	bne.n	8009922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	3b01      	subs	r3, #1
 80098d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d123      	bne.n	8009922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d11b      	bne.n	8009922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d113      	bne.n	8009922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009904:	085b      	lsrs	r3, r3, #1
 8009906:	3b01      	subs	r3, #1
 8009908:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800990a:	429a      	cmp	r2, r3
 800990c:	d109      	bne.n	8009922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	3b01      	subs	r3, #1
 800991c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800991e:	429a      	cmp	r2, r3
 8009920:	d001      	beq.n	8009926 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	40021000 	.word	0x40021000
 8009934:	019f800c 	.word	0x019f800c

08009938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e11e      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009950:	4b91      	ldr	r3, [pc, #580]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d910      	bls.n	8009980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800995e:	4b8e      	ldr	r3, [pc, #568]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f023 020f 	bic.w	r2, r3, #15
 8009966:	498c      	ldr	r1, [pc, #560]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	4313      	orrs	r3, r2
 800996c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800996e:	4b8a      	ldr	r3, [pc, #552]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d001      	beq.n	8009980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e106      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d073      	beq.n	8009a74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2b03      	cmp	r3, #3
 8009992:	d129      	bne.n	80099e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009994:	4b81      	ldr	r3, [pc, #516]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e0f4      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80099a4:	f000 f972 	bl	8009c8c <RCC_GetSysClockFreqFromPLLSource>
 80099a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	4a7c      	ldr	r2, [pc, #496]	; (8009ba0 <HAL_RCC_ClockConfig+0x268>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d93f      	bls.n	8009a32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80099b2:	4b7a      	ldr	r3, [pc, #488]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d009      	beq.n	80099d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d033      	beq.n	8009a32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d12f      	bne.n	8009a32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80099d2:	4b72      	ldr	r3, [pc, #456]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099da:	4a70      	ldr	r2, [pc, #448]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 80099dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80099e2:	2380      	movs	r3, #128	; 0x80
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e024      	b.n	8009a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d107      	bne.n	8009a00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099f0:	4b6a      	ldr	r3, [pc, #424]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e0c6      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a00:	4b66      	ldr	r3, [pc, #408]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e0be      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009a10:	f000 f8ce 	bl	8009bb0 <HAL_RCC_GetSysClockFreq>
 8009a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	4a61      	ldr	r2, [pc, #388]	; (8009ba0 <HAL_RCC_ClockConfig+0x268>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d909      	bls.n	8009a32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a1e:	4b5f      	ldr	r3, [pc, #380]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a26:	4a5d      	ldr	r2, [pc, #372]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009a2e:	2380      	movs	r3, #128	; 0x80
 8009a30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a32:	4b5a      	ldr	r3, [pc, #360]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f023 0203 	bic.w	r2, r3, #3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	4957      	ldr	r1, [pc, #348]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a40:	4313      	orrs	r3, r2
 8009a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a44:	f7fb fada 	bl	8004ffc <HAL_GetTick>
 8009a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a4a:	e00a      	b.n	8009a62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a4c:	f7fb fad6 	bl	8004ffc <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d901      	bls.n	8009a62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e095      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a62:	4b4e      	ldr	r3, [pc, #312]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f003 020c 	and.w	r2, r3, #12
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d1eb      	bne.n	8009a4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d023      	beq.n	8009ac8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a8c:	4b43      	ldr	r3, [pc, #268]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	4a42      	ldr	r2, [pc, #264]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009a96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0308 	and.w	r3, r3, #8
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009aa4:	4b3d      	ldr	r3, [pc, #244]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009aac:	4a3b      	ldr	r2, [pc, #236]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ab4:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	4936      	ldr	r1, [pc, #216]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	608b      	str	r3, [r1, #8]
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2b80      	cmp	r3, #128	; 0x80
 8009acc:	d105      	bne.n	8009ada <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009ace:	4b33      	ldr	r3, [pc, #204]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	4a32      	ldr	r2, [pc, #200]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ad8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ada:	4b2f      	ldr	r3, [pc, #188]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d21d      	bcs.n	8009b24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae8:	4b2b      	ldr	r3, [pc, #172]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f023 020f 	bic.w	r2, r3, #15
 8009af0:	4929      	ldr	r1, [pc, #164]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009af8:	f7fb fa80 	bl	8004ffc <HAL_GetTick>
 8009afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009afe:	e00a      	b.n	8009b16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b00:	f7fb fa7c 	bl	8004ffc <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e03b      	b.n	8009b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b16:	4b20      	ldr	r3, [pc, #128]	; (8009b98 <HAL_RCC_ClockConfig+0x260>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d1ed      	bne.n	8009b00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d008      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b30:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4917      	ldr	r1, [pc, #92]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d009      	beq.n	8009b62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b4e:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	490f      	ldr	r1, [pc, #60]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b62:	f000 f825 	bl	8009bb0 <HAL_RCC_GetSysClockFreq>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <HAL_RCC_ClockConfig+0x264>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	091b      	lsrs	r3, r3, #4
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	490c      	ldr	r1, [pc, #48]	; (8009ba4 <HAL_RCC_ClockConfig+0x26c>)
 8009b74:	5ccb      	ldrb	r3, [r1, r3]
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7e:	4a0a      	ldr	r2, [pc, #40]	; (8009ba8 <HAL_RCC_ClockConfig+0x270>)
 8009b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009b82:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <HAL_RCC_ClockConfig+0x274>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fb f9ec 	bl	8004f64 <HAL_InitTick>
 8009b8c:	4603      	mov	r3, r0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	40022000 	.word	0x40022000
 8009b9c:	40021000 	.word	0x40021000
 8009ba0:	04c4b400 	.word	0x04c4b400
 8009ba4:	08020fcc 	.word	0x08020fcc
 8009ba8:	20000008 	.word	0x20000008
 8009bac:	2000000c 	.word	0x2000000c

08009bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009bb6:	4b2c      	ldr	r3, [pc, #176]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f003 030c 	and.w	r3, r3, #12
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d102      	bne.n	8009bc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009bc2:	4b2a      	ldr	r3, [pc, #168]	; (8009c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009bc4:	613b      	str	r3, [r7, #16]
 8009bc6:	e047      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009bc8:	4b27      	ldr	r3, [pc, #156]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 030c 	and.w	r3, r3, #12
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d102      	bne.n	8009bda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009bd4:	4b26      	ldr	r3, [pc, #152]	; (8009c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009bd6:	613b      	str	r3, [r7, #16]
 8009bd8:	e03e      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f003 030c 	and.w	r3, r3, #12
 8009be2:	2b0c      	cmp	r3, #12
 8009be4:	d136      	bne.n	8009c54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009be6:	4b20      	ldr	r3, [pc, #128]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009bf0:	4b1d      	ldr	r3, [pc, #116]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	091b      	lsrs	r3, r3, #4
 8009bf6:	f003 030f 	and.w	r3, r3, #15
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d10c      	bne.n	8009c1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c04:	4a1a      	ldr	r2, [pc, #104]	; (8009c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0c:	4a16      	ldr	r2, [pc, #88]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c0e:	68d2      	ldr	r2, [r2, #12]
 8009c10:	0a12      	lsrs	r2, r2, #8
 8009c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c16:	fb02 f303 	mul.w	r3, r2, r3
 8009c1a:	617b      	str	r3, [r7, #20]
      break;
 8009c1c:	e00c      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c1e:	4a13      	ldr	r2, [pc, #76]	; (8009c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c26:	4a10      	ldr	r2, [pc, #64]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c28:	68d2      	ldr	r2, [r2, #12]
 8009c2a:	0a12      	lsrs	r2, r2, #8
 8009c2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c30:	fb02 f303 	mul.w	r3, r2, r3
 8009c34:	617b      	str	r3, [r7, #20]
      break;
 8009c36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009c38:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	0e5b      	lsrs	r3, r3, #25
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	3301      	adds	r3, #1
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	e001      	b.n	8009c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009c58:	693b      	ldr	r3, [r7, #16]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	40021000 	.word	0x40021000
 8009c6c:	00f42400 	.word	0x00f42400
 8009c70:	016e3600 	.word	0x016e3600

08009c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c74:	b480      	push	{r7}
 8009c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c78:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20000008 	.word	0x20000008

08009c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c92:	4b1e      	ldr	r3, [pc, #120]	; (8009d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	091b      	lsrs	r3, r3, #4
 8009ca2:	f003 030f 	and.w	r3, r3, #15
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d10c      	bne.n	8009cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cb0:	4a17      	ldr	r2, [pc, #92]	; (8009d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb8:	4a14      	ldr	r2, [pc, #80]	; (8009d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cba:	68d2      	ldr	r2, [r2, #12]
 8009cbc:	0a12      	lsrs	r2, r2, #8
 8009cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cc2:	fb02 f303 	mul.w	r3, r2, r3
 8009cc6:	617b      	str	r3, [r7, #20]
    break;
 8009cc8:	e00c      	b.n	8009ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009cca:	4a12      	ldr	r2, [pc, #72]	; (8009d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd2:	4a0e      	ldr	r2, [pc, #56]	; (8009d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cd4:	68d2      	ldr	r2, [r2, #12]
 8009cd6:	0a12      	lsrs	r2, r2, #8
 8009cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cdc:	fb02 f303 	mul.w	r3, r2, r3
 8009ce0:	617b      	str	r3, [r7, #20]
    break;
 8009ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ce4:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	0e5b      	lsrs	r3, r3, #25
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	3301      	adds	r3, #1
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009cfe:	687b      	ldr	r3, [r7, #4]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	40021000 	.word	0x40021000
 8009d10:	016e3600 	.word	0x016e3600
 8009d14:	00f42400 	.word	0x00f42400

08009d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d20:	2300      	movs	r3, #0
 8009d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d24:	2300      	movs	r3, #0
 8009d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 8098 	beq.w	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d36:	2300      	movs	r3, #0
 8009d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d3a:	4b43      	ldr	r3, [pc, #268]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10d      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d46:	4b40      	ldr	r3, [pc, #256]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4a:	4a3f      	ldr	r2, [pc, #252]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d50:	6593      	str	r3, [r2, #88]	; 0x58
 8009d52:	4b3d      	ldr	r3, [pc, #244]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5a:	60bb      	str	r3, [r7, #8]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d62:	4b3a      	ldr	r3, [pc, #232]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a39      	ldr	r2, [pc, #228]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d6e:	f7fb f945 	bl	8004ffc <HAL_GetTick>
 8009d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d74:	e009      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d76:	f7fb f941 	bl	8004ffc <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d902      	bls.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	74fb      	strb	r3, [r7, #19]
        break;
 8009d88:	e005      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d8a:	4b30      	ldr	r3, [pc, #192]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0ef      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009d96:	7cfb      	ldrb	r3, [r7, #19]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d159      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d9c:	4b2a      	ldr	r3, [pc, #168]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01e      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d019      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009db8:	4b23      	ldr	r3, [pc, #140]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dc4:	4b20      	ldr	r3, [pc, #128]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dca:	4a1f      	ldr	r2, [pc, #124]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dd4:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dda:	4a1b      	ldr	r2, [pc, #108]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009de4:	4a18      	ldr	r2, [pc, #96]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d016      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df6:	f7fb f901 	bl	8004ffc <HAL_GetTick>
 8009dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dfc:	e00b      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dfe:	f7fb f8fd 	bl	8004ffc <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d902      	bls.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	74fb      	strb	r3, [r7, #19]
            break;
 8009e14:	e006      	b.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e16:	4b0c      	ldr	r3, [pc, #48]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0ec      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009e24:	7cfb      	ldrb	r3, [r7, #19]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e2a:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e38:	4903      	ldr	r1, [pc, #12]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009e40:	e008      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e42:	7cfb      	ldrb	r3, [r7, #19]
 8009e44:	74bb      	strb	r3, [r7, #18]
 8009e46:	e005      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009e48:	40021000 	.word	0x40021000
 8009e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e50:	7cfb      	ldrb	r3, [r7, #19]
 8009e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e54:	7c7b      	ldrb	r3, [r7, #17]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d105      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e5a:	4ba7      	ldr	r3, [pc, #668]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5e:	4aa6      	ldr	r2, [pc, #664]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e72:	4ba1      	ldr	r3, [pc, #644]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	f023 0203 	bic.w	r2, r3, #3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	499d      	ldr	r1, [pc, #628]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00a      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e94:	4b98      	ldr	r3, [pc, #608]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9a:	f023 020c 	bic.w	r2, r3, #12
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	4995      	ldr	r1, [pc, #596]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 0304 	and.w	r3, r3, #4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009eb6:	4b90      	ldr	r3, [pc, #576]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	498c      	ldr	r1, [pc, #560]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0308 	and.w	r3, r3, #8
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ed8:	4b87      	ldr	r3, [pc, #540]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	4984      	ldr	r1, [pc, #528]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0310 	and.w	r3, r3, #16
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009efa:	4b7f      	ldr	r3, [pc, #508]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	497b      	ldr	r1, [pc, #492]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0320 	and.w	r3, r3, #32
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f1c:	4b76      	ldr	r3, [pc, #472]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	4973      	ldr	r1, [pc, #460]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f3e:	4b6e      	ldr	r3, [pc, #440]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	496a      	ldr	r1, [pc, #424]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f60:	4b65      	ldr	r3, [pc, #404]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	4962      	ldr	r1, [pc, #392]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f82:	4b5d      	ldr	r3, [pc, #372]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	4959      	ldr	r1, [pc, #356]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00a      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009fa4:	4b54      	ldr	r3, [pc, #336]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009faa:	f023 0203 	bic.w	r2, r3, #3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb2:	4951      	ldr	r1, [pc, #324]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fc6:	4b4c      	ldr	r3, [pc, #304]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4948      	ldr	r1, [pc, #288]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d015      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009fe8:	4b43      	ldr	r3, [pc, #268]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff6:	4940      	ldr	r1, [pc, #256]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a006:	d105      	bne.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a008:	4b3b      	ldr	r3, [pc, #236]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	4a3a      	ldr	r2, [pc, #232]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a00e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a012:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d015      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a020:	4b35      	ldr	r3, [pc, #212]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02e:	4932      	ldr	r1, [pc, #200]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a030:	4313      	orrs	r3, r2
 800a032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a03e:	d105      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a040:	4b2d      	ldr	r3, [pc, #180]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	4a2c      	ldr	r2, [pc, #176]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a04a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d015      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a058:	4b27      	ldr	r3, [pc, #156]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a066:	4924      	ldr	r1, [pc, #144]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a072:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a076:	d105      	bne.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a078:	4b1f      	ldr	r3, [pc, #124]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	4a1e      	ldr	r2, [pc, #120]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a07e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a082:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d015      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a090:	4b19      	ldr	r3, [pc, #100]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09e:	4916      	ldr	r1, [pc, #88]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0ae:	d105      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0b0:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	4a10      	ldr	r2, [pc, #64]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d019      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	4908      	ldr	r1, [pc, #32]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0e6:	d109      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	4a02      	ldr	r2, [pc, #8]	; (800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f2:	60d3      	str	r3, [r2, #12]
 800a0f4:	e002      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a0f6:	bf00      	nop
 800a0f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d015      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a108:	4b29      	ldr	r3, [pc, #164]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a116:	4926      	ldr	r1, [pc, #152]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a126:	d105      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a128:	4b21      	ldr	r3, [pc, #132]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	4a20      	ldr	r2, [pc, #128]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a12e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a132:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d015      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a140:	4b1b      	ldr	r3, [pc, #108]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a146:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a14e:	4918      	ldr	r1, [pc, #96]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a150:	4313      	orrs	r3, r2
 800a152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15e:	d105      	bne.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a160:	4b13      	ldr	r3, [pc, #76]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	4a12      	ldr	r2, [pc, #72]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a16a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d015      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a178:	4b0d      	ldr	r3, [pc, #52]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a17a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a17e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	490a      	ldr	r1, [pc, #40]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a196:	d105      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	4a04      	ldr	r2, [pc, #16]	; (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a19e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a1a4:	7cbb      	ldrb	r3, [r7, #18]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	40021000 	.word	0x40021000

0800a1b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e09d      	b.n	800a302 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d108      	bne.n	800a1e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1d6:	d009      	beq.n	800a1ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	61da      	str	r2, [r3, #28]
 800a1de:	e005      	b.n	800a1ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fa fb42 	bl	8004890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a222:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a22c:	d902      	bls.n	800a234 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e002      	b.n	800a23a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a238:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a242:	d007      	beq.n	800a254 <HAL_SPI_Init+0xa0>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a24c:	d002      	beq.n	800a254 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a264:	431a      	orrs	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	431a      	orrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	431a      	orrs	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a28c:	431a      	orrs	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a296:	ea42 0103 	orr.w	r1, r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	0c1b      	lsrs	r3, r3, #16
 800a2b0:	f003 0204 	and.w	r2, r3, #4
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	f003 0310 	and.w	r3, r3, #16
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a2d0:	ea42 0103 	orr.w	r1, r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b08a      	sub	sp, #40	; 0x28
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
 800a316:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a318:	2301      	movs	r3, #1
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_SPI_TransmitReceive+0x26>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e1fb      	b.n	800a728 <HAL_SPI_TransmitReceive+0x41e>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a338:	f7fa fe60 	bl	8004ffc <HAL_GetTick>
 800a33c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a344:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a34c:	887b      	ldrh	r3, [r7, #2]
 800a34e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a350:	887b      	ldrh	r3, [r7, #2]
 800a352:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a354:	7efb      	ldrb	r3, [r7, #27]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d00e      	beq.n	800a378 <HAL_SPI_TransmitReceive+0x6e>
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a360:	d106      	bne.n	800a370 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <HAL_SPI_TransmitReceive+0x66>
 800a36a:	7efb      	ldrb	r3, [r7, #27]
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d003      	beq.n	800a378 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a370:	2302      	movs	r3, #2
 800a372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a376:	e1cd      	b.n	800a714 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <HAL_SPI_TransmitReceive+0x80>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <HAL_SPI_TransmitReceive+0x80>
 800a384:	887b      	ldrh	r3, [r7, #2]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a390:	e1c0      	b.n	800a714 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d003      	beq.n	800a3a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2205      	movs	r2, #5
 800a3a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	887a      	ldrh	r2, [r7, #2]
 800a3b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	887a      	ldrh	r2, [r7, #2]
 800a3be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	887a      	ldrh	r2, [r7, #2]
 800a3cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	887a      	ldrh	r2, [r7, #2]
 800a3d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a3e8:	d802      	bhi.n	800a3f0 <HAL_SPI_TransmitReceive+0xe6>
 800a3ea:	8a3b      	ldrh	r3, [r7, #16]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d908      	bls.n	800a402 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3fe:	605a      	str	r2, [r3, #4]
 800a400:	e007      	b.n	800a412 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a410:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b40      	cmp	r3, #64	; 0x40
 800a41e:	d007      	beq.n	800a430 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a42e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a438:	d97c      	bls.n	800a534 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <HAL_SPI_TransmitReceive+0x13e>
 800a442:	8a7b      	ldrh	r3, [r7, #18]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d169      	bne.n	800a51c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44c:	881a      	ldrh	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	1c9a      	adds	r2, r3, #2
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a462:	b29b      	uxth	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a46c:	e056      	b.n	800a51c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d11b      	bne.n	800a4b4 <HAL_SPI_TransmitReceive+0x1aa>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a480:	b29b      	uxth	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d016      	beq.n	800a4b4 <HAL_SPI_TransmitReceive+0x1aa>
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d113      	bne.n	800a4b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	881a      	ldrh	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49c:	1c9a      	adds	r2, r3, #2
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d11c      	bne.n	800a4fc <HAL_SPI_TransmitReceive+0x1f2>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d016      	beq.n	800a4fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	b292      	uxth	r2, r2
 800a4da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	1c9a      	adds	r2, r3, #2
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a4fc:	f7fa fd7e 	bl	8004ffc <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a508:	429a      	cmp	r2, r3
 800a50a:	d807      	bhi.n	800a51c <HAL_SPI_TransmitReceive+0x212>
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d003      	beq.n	800a51c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a51a:	e0fb      	b.n	800a714 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a520:	b29b      	uxth	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1a3      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x164>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d19d      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x164>
 800a532:	e0df      	b.n	800a6f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <HAL_SPI_TransmitReceive+0x23a>
 800a53c:	8a7b      	ldrh	r3, [r7, #18]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	f040 80cb 	bne.w	800a6da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a548:	b29b      	uxth	r3, r3
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d912      	bls.n	800a574 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a552:	881a      	ldrh	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	1c9a      	adds	r2, r3, #2
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a568:	b29b      	uxth	r3, r3
 800a56a:	3b02      	subs	r3, #2
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a572:	e0b2      	b.n	800a6da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	330c      	adds	r3, #12
 800a57e:	7812      	ldrb	r2, [r2, #0]
 800a580:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a590:	b29b      	uxth	r3, r3
 800a592:	3b01      	subs	r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a59a:	e09e      	b.n	800a6da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 0302 	and.w	r3, r3, #2
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d134      	bne.n	800a614 <HAL_SPI_TransmitReceive+0x30a>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d02f      	beq.n	800a614 <HAL_SPI_TransmitReceive+0x30a>
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d12c      	bne.n	800a614 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d912      	bls.n	800a5ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	881a      	ldrh	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	1c9a      	adds	r2, r3, #2
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3b02      	subs	r3, #2
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a5e8:	e012      	b.n	800a610 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	330c      	adds	r3, #12
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a606:	b29b      	uxth	r3, r3
 800a608:	3b01      	subs	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d148      	bne.n	800a6b4 <HAL_SPI_TransmitReceive+0x3aa>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a628:	b29b      	uxth	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d042      	beq.n	800a6b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a634:	b29b      	uxth	r3, r3
 800a636:	2b01      	cmp	r3, #1
 800a638:	d923      	bls.n	800a682 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	b292      	uxth	r2, r2
 800a646:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64c:	1c9a      	adds	r2, r3, #2
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a658:	b29b      	uxth	r3, r3
 800a65a:	3b02      	subs	r3, #2
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d81f      	bhi.n	800a6b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a67e:	605a      	str	r2, [r3, #4]
 800a680:	e016      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f103 020c 	add.w	r2, r3, #12
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	7812      	ldrb	r2, [r2, #0]
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a6b4:	f7fa fca2 	bl	8004ffc <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d803      	bhi.n	800a6cc <HAL_SPI_TransmitReceive+0x3c2>
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d102      	bne.n	800a6d2 <HAL_SPI_TransmitReceive+0x3c8>
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d103      	bne.n	800a6da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a6d8:	e01c      	b.n	800a714 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f47f af5b 	bne.w	800a59c <HAL_SPI_TransmitReceive+0x292>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f47f af54 	bne.w	800a59c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f937 	bl	800a96c <SPI_EndRxTxTransaction>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2220      	movs	r2, #32
 800a70e:	661a      	str	r2, [r3, #96]	; 0x60
 800a710:	e000      	b.n	800a714 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3728      	adds	r7, #40	; 0x28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	4613      	mov	r3, r2
 800a73e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a740:	f7fa fc5c 	bl	8004ffc <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	1a9b      	subs	r3, r3, r2
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	4413      	add	r3, r2
 800a74e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a750:	f7fa fc54 	bl	8004ffc <HAL_GetTick>
 800a754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a756:	4b39      	ldr	r3, [pc, #228]	; (800a83c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	015b      	lsls	r3, r3, #5
 800a75c:	0d1b      	lsrs	r3, r3, #20
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a766:	e054      	b.n	800a812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76e:	d050      	beq.n	800a812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a770:	f7fa fc44 	bl	8004ffc <HAL_GetTick>
 800a774:	4602      	mov	r2, r0
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d902      	bls.n	800a786 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d13d      	bne.n	800a802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a79e:	d111      	bne.n	800a7c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a8:	d004      	beq.n	800a7b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b2:	d107      	bne.n	800a7c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7cc:	d10f      	bne.n	800a7ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e017      	b.n	800a832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3b01      	subs	r3, #1
 800a810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4013      	ands	r3, r2
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	bf0c      	ite	eq
 800a822:	2301      	moveq	r3, #1
 800a824:	2300      	movne	r3, #0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	461a      	mov	r2, r3
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d19b      	bne.n	800a768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3720      	adds	r7, #32
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000008 	.word	0x20000008

0800a840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	; 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a852:	f7fa fbd3 	bl	8004ffc <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	4413      	add	r3, r2
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a862:	f7fa fbcb 	bl	8004ffc <HAL_GetTick>
 800a866:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	330c      	adds	r3, #12
 800a86e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a870:	4b3d      	ldr	r3, [pc, #244]	; (800a968 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	00da      	lsls	r2, r3, #3
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	0d1b      	lsrs	r3, r3, #20
 800a880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a882:	fb02 f303 	mul.w	r3, r2, r3
 800a886:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a888:	e060      	b.n	800a94c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a890:	d107      	bne.n	800a8a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d050      	beq.n	800a94c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8aa:	f7fa fba7 	bl	8004ffc <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d902      	bls.n	800a8c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d13d      	bne.n	800a93c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8d8:	d111      	bne.n	800a8fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8e2:	d004      	beq.n	800a8ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ec:	d107      	bne.n	800a8fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a906:	d10f      	bne.n	800a928 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a926:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e010      	b.n	800a95e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	3b01      	subs	r3, #1
 800a94a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689a      	ldr	r2, [r3, #8]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	4013      	ands	r3, r2
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d196      	bne.n	800a88a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3728      	adds	r7, #40	; 0x28
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000008 	.word	0x20000008

0800a96c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af02      	add	r7, sp, #8
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2200      	movs	r2, #0
 800a980:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7ff ff5b 	bl	800a840 <SPI_WaitFifoStateUntilTimeout>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a994:	f043 0220 	orr.w	r2, r3, #32
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e027      	b.n	800a9f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2180      	movs	r1, #128	; 0x80
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f7ff fec0 	bl	800a730 <SPI_WaitFlagStateUntilTimeout>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d007      	beq.n	800a9c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ba:	f043 0220 	orr.w	r2, r3, #32
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e014      	b.n	800a9f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff ff34 	bl	800a840 <SPI_WaitFifoStateUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9e2:	f043 0220 	orr.w	r2, r3, #32
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e000      	b.n	800a9f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e038      	b.n	800aa80 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7f6 ff48 	bl	80018b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f001 fb3c 	bl	800c0b0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	461a      	mov	r2, r3
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	f001 fc02 	bl	800c24c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6858      	ldr	r0, [r3, #4]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	f001 fc4b 	bl	800c2f0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	6892      	ldr	r2, [r2, #8]
 800aa62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	6892      	ldr	r2, [r2, #8]
 800aa6e:	f041 0101 	orr.w	r1, r1, #1
 800aa72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e049      	b.n	800ab2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7fa f9ca 	bl	8004e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4619      	mov	r1, r3
 800aac6:	4610      	mov	r0, r2
 800aac8:	f000 fd82 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d001      	beq.n	800ab50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e04c      	b.n	800abea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <HAL_TIM_Base_Start+0xc0>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d022      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab6a:	d01d      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a22      	ldr	r2, [pc, #136]	; (800abfc <HAL_TIM_Base_Start+0xc4>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d018      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a21      	ldr	r2, [pc, #132]	; (800ac00 <HAL_TIM_Base_Start+0xc8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d013      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a1f      	ldr	r2, [pc, #124]	; (800ac04 <HAL_TIM_Base_Start+0xcc>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00e      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <HAL_TIM_Base_Start+0xd0>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d009      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a1c      	ldr	r2, [pc, #112]	; (800ac0c <HAL_TIM_Base_Start+0xd4>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d004      	beq.n	800aba8 <HAL_TIM_Base_Start+0x70>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a1b      	ldr	r2, [pc, #108]	; (800ac10 <HAL_TIM_Base_Start+0xd8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d115      	bne.n	800abd4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	4b19      	ldr	r3, [pc, #100]	; (800ac14 <HAL_TIM_Base_Start+0xdc>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2b06      	cmp	r3, #6
 800abb8:	d015      	beq.n	800abe6 <HAL_TIM_Base_Start+0xae>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc0:	d011      	beq.n	800abe6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f042 0201 	orr.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd2:	e008      	b.n	800abe6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	e000      	b.n	800abe8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	40012c00 	.word	0x40012c00
 800abfc:	40000400 	.word	0x40000400
 800ac00:	40000800 	.word	0x40000800
 800ac04:	40000c00 	.word	0x40000c00
 800ac08:	40013400 	.word	0x40013400
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40015000 	.word	0x40015000
 800ac14:	00010007 	.word	0x00010007

0800ac18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6a1a      	ldr	r2, [r3, #32]
 800ac26:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10f      	bne.n	800ac50 <HAL_TIM_Base_Stop+0x38>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6a1a      	ldr	r2, [r3, #32]
 800ac36:	f244 4344 	movw	r3, #17476	; 0x4444
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d107      	bne.n	800ac50 <HAL_TIM_Base_Stop+0x38>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0201 	bic.w	r2, r2, #1
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e049      	b.n	800ad0c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d106      	bne.n	800ac92 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f841 	bl	800ad14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2202      	movs	r2, #2
 800ac96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3304      	adds	r3, #4
 800aca2:	4619      	mov	r1, r3
 800aca4:	4610      	mov	r0, r2
 800aca6:	f000 fc93 	bl	800b5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad50:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d108      	bne.n	800ad6a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d105      	bne.n	800ad6a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad5e:	7b7b      	ldrb	r3, [r7, #13]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d102      	bne.n	800ad6a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad64:	7b3b      	ldrb	r3, [r7, #12]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d001      	beq.n	800ad6e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e059      	b.n	800ae22 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2202      	movs	r2, #2
 800ad72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2202      	movs	r2, #2
 800ad7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2202      	movs	r2, #2
 800ad82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f042 0202 	orr.w	r2, r2, #2
 800ad9c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0204 	orr.w	r2, r2, #4
 800adac:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2201      	movs	r2, #1
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 f878 	bl	800beac <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2201      	movs	r2, #1
 800adc2:	2104      	movs	r1, #4
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 f871 	bl	800beac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a17      	ldr	r2, [pc, #92]	; (800ae2c <HAL_TIM_OnePulse_Start_IT+0x104>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d018      	beq.n	800ae06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a15      	ldr	r2, [pc, #84]	; (800ae30 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d013      	beq.n	800ae06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a14      	ldr	r2, [pc, #80]	; (800ae34 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d00e      	beq.n	800ae06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a12      	ldr	r2, [pc, #72]	; (800ae38 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d009      	beq.n	800ae06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a11      	ldr	r2, [pc, #68]	; (800ae3c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d004      	beq.n	800ae06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0f      	ldr	r2, [pc, #60]	; (800ae40 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d101      	bne.n	800ae0a <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e000      	b.n	800ae0c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d007      	beq.n	800ae20 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	40012c00 	.word	0x40012c00
 800ae30:	40013400 	.word	0x40013400
 800ae34:	40014000 	.word	0x40014000
 800ae38:	40014400 	.word	0x40014400
 800ae3c:	40014800 	.word	0x40014800
 800ae40:	40015000 	.word	0x40015000

0800ae44 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0202 	bic.w	r2, r2, #2
 800ae5c:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68da      	ldr	r2, [r3, #12]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 0204 	bic.w	r2, r2, #4
 800ae6c:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	2100      	movs	r1, #0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 f818 	bl	800beac <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2200      	movs	r2, #0
 800ae82:	2104      	movs	r1, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f001 f811 	bl	800beac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a33      	ldr	r2, [pc, #204]	; (800af5c <HAL_TIM_OnePulse_Stop_IT+0x118>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d018      	beq.n	800aec6 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a31      	ldr	r2, [pc, #196]	; (800af60 <HAL_TIM_OnePulse_Stop_IT+0x11c>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d013      	beq.n	800aec6 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a30      	ldr	r2, [pc, #192]	; (800af64 <HAL_TIM_OnePulse_Stop_IT+0x120>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d00e      	beq.n	800aec6 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a2e      	ldr	r2, [pc, #184]	; (800af68 <HAL_TIM_OnePulse_Stop_IT+0x124>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d009      	beq.n	800aec6 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a2d      	ldr	r2, [pc, #180]	; (800af6c <HAL_TIM_OnePulse_Stop_IT+0x128>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d004      	beq.n	800aec6 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a2b      	ldr	r2, [pc, #172]	; (800af70 <HAL_TIM_OnePulse_Stop_IT+0x12c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_OnePulse_Stop_IT+0x86>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <HAL_TIM_OnePulse_Stop_IT+0x88>
 800aeca:	2300      	movs	r3, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d017      	beq.n	800af00 <HAL_TIM_OnePulse_Stop_IT+0xbc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6a1a      	ldr	r2, [r3, #32]
 800aed6:	f241 1311 	movw	r3, #4369	; 0x1111
 800aeda:	4013      	ands	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10f      	bne.n	800af00 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6a1a      	ldr	r2, [r3, #32]
 800aee6:	f244 4344 	movw	r3, #17476	; 0x4444
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aefe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6a1a      	ldr	r2, [r3, #32]
 800af06:	f241 1311 	movw	r3, #4369	; 0x1111
 800af0a:	4013      	ands	r3, r2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10f      	bne.n	800af30 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6a1a      	ldr	r2, [r3, #32]
 800af16:	f244 4344 	movw	r3, #17476	; 0x4444
 800af1a:	4013      	ands	r3, r2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d107      	bne.n	800af30 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f022 0201 	bic.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	40012c00 	.word	0x40012c00
 800af60:	40013400 	.word	0x40013400
 800af64:	40014000 	.word	0x40014000
 800af68:	40014400 	.word	0x40014400
 800af6c:	40014800 	.word	0x40014800
 800af70:	40015000 	.word	0x40015000

0800af74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b02      	cmp	r3, #2
 800af88:	d122      	bne.n	800afd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f003 0302 	and.w	r3, r3, #2
 800af94:	2b02      	cmp	r3, #2
 800af96:	d11b      	bne.n	800afd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f06f 0202 	mvn.w	r2, #2
 800afa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 faec 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800afbc:	e005      	b.n	800afca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f9 f902 	bl	80041c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 faef 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d122      	bne.n	800b024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d11b      	bne.n	800b024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f06f 0204 	mvn.w	r2, #4
 800aff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2202      	movs	r2, #2
 800affa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fac2 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800b010:	e005      	b.n	800b01e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7f9 f8d8 	bl	80041c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fac5 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	f003 0308 	and.w	r3, r3, #8
 800b02e:	2b08      	cmp	r3, #8
 800b030:	d122      	bne.n	800b078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f003 0308 	and.w	r3, r3, #8
 800b03c:	2b08      	cmp	r3, #8
 800b03e:	d11b      	bne.n	800b078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f06f 0208 	mvn.w	r2, #8
 800b048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2204      	movs	r2, #4
 800b04e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fa98 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800b064:	e005      	b.n	800b072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7f9 f8ae 	bl	80041c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fa9b 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	f003 0310 	and.w	r3, r3, #16
 800b082:	2b10      	cmp	r3, #16
 800b084:	d122      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f003 0310 	and.w	r3, r3, #16
 800b090:	2b10      	cmp	r3, #16
 800b092:	d11b      	bne.n	800b0cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f06f 0210 	mvn.w	r2, #16
 800b09c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa6e 	bl	800b594 <HAL_TIM_IC_CaptureCallback>
 800b0b8:	e005      	b.n	800b0c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f9 f884 	bl	80041c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fa71 	bl	800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d10e      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d107      	bne.n	800b0f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f06f 0201 	mvn.w	r2, #1
 800b0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fa44 	bl	800b580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b102:	2b80      	cmp	r3, #128	; 0x80
 800b104:	d10e      	bne.n	800b124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b110:	2b80      	cmp	r3, #128	; 0x80
 800b112:	d107      	bne.n	800b124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 ff8a 	bl	800c038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b132:	d10e      	bne.n	800b152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13e:	2b80      	cmp	r3, #128	; 0x80
 800b140:	d107      	bne.n	800b152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 ff7d 	bl	800c04c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15c:	2b40      	cmp	r3, #64	; 0x40
 800b15e:	d10e      	bne.n	800b17e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16a:	2b40      	cmp	r3, #64	; 0x40
 800b16c:	d107      	bne.n	800b17e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fa1f 	bl	800b5bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	f003 0320 	and.w	r3, r3, #32
 800b188:	2b20      	cmp	r3, #32
 800b18a:	d10e      	bne.n	800b1aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b20      	cmp	r3, #32
 800b198:	d107      	bne.n	800b1aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f06f 0220 	mvn.w	r2, #32
 800b1a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 ff3d 	bl	800c024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1b8:	d10f      	bne.n	800b1da <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1c8:	d107      	bne.n	800b1da <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 ff43 	bl	800c060 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1e8:	d10f      	bne.n	800b20a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1f8:	d107      	bne.n	800b20a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 ff35 	bl	800c074 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b218:	d10f      	bne.n	800b23a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b228:	d107      	bne.n	800b23a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 ff27 	bl	800c088 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b248:	d10f      	bne.n	800b26a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b258:	d107      	bne.n	800b26a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 ff19 	bl	800c09c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b28e:	2302      	movs	r3, #2
 800b290:	e066      	b.n	800b360 <HAL_TIM_OC_ConfigChannel+0xec>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b14      	cmp	r3, #20
 800b29e:	d857      	bhi.n	800b350 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2fd 	.word	0x0800b2fd
 800b2ac:	0800b351 	.word	0x0800b351
 800b2b0:	0800b351 	.word	0x0800b351
 800b2b4:	0800b351 	.word	0x0800b351
 800b2b8:	0800b30b 	.word	0x0800b30b
 800b2bc:	0800b351 	.word	0x0800b351
 800b2c0:	0800b351 	.word	0x0800b351
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b319 	.word	0x0800b319
 800b2cc:	0800b351 	.word	0x0800b351
 800b2d0:	0800b351 	.word	0x0800b351
 800b2d4:	0800b351 	.word	0x0800b351
 800b2d8:	0800b327 	.word	0x0800b327
 800b2dc:	0800b351 	.word	0x0800b351
 800b2e0:	0800b351 	.word	0x0800b351
 800b2e4:	0800b351 	.word	0x0800b351
 800b2e8:	0800b335 	.word	0x0800b335
 800b2ec:	0800b351 	.word	0x0800b351
 800b2f0:	0800b351 	.word	0x0800b351
 800b2f4:	0800b351 	.word	0x0800b351
 800b2f8:	0800b343 	.word	0x0800b343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fa0c 	bl	800b720 <TIM_OC1_SetConfig>
      break;
 800b308:	e025      	b.n	800b356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fa9f 	bl	800b854 <TIM_OC2_SetConfig>
      break;
 800b316:	e01e      	b.n	800b356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68b9      	ldr	r1, [r7, #8]
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fb2c 	bl	800b97c <TIM_OC3_SetConfig>
      break;
 800b324:	e017      	b.n	800b356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fbb7 	bl	800baa0 <TIM_OC4_SetConfig>
      break;
 800b332:	e010      	b.n	800b356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68b9      	ldr	r1, [r7, #8]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 fc44 	bl	800bbc8 <TIM_OC5_SetConfig>
      break;
 800b340:	e009      	b.n	800b356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fca7 	bl	800bc9c <TIM_OC6_SetConfig>
      break;
 800b34e:	e002      	b.n	800b356 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]
      break;
 800b354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_TIM_ConfigClockSource+0x1c>
 800b380:	2302      	movs	r3, #2
 800b382:	e0ee      	b.n	800b562 <HAL_TIM_ConfigClockSource+0x1fa>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2202      	movs	r2, #2
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b3a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a6b      	ldr	r2, [pc, #428]	; (800b56c <HAL_TIM_ConfigClockSource+0x204>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f000 80b9 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b3c4:	4a69      	ldr	r2, [pc, #420]	; (800b56c <HAL_TIM_ConfigClockSource+0x204>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f200 80be 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b3cc:	4a68      	ldr	r2, [pc, #416]	; (800b570 <HAL_TIM_ConfigClockSource+0x208>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	f000 80b1 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b3d4:	4a66      	ldr	r2, [pc, #408]	; (800b570 <HAL_TIM_ConfigClockSource+0x208>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	f200 80b6 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b3dc:	4a65      	ldr	r2, [pc, #404]	; (800b574 <HAL_TIM_ConfigClockSource+0x20c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	f000 80a9 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b3e4:	4a63      	ldr	r2, [pc, #396]	; (800b574 <HAL_TIM_ConfigClockSource+0x20c>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	f200 80ae 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b3ec:	4a62      	ldr	r2, [pc, #392]	; (800b578 <HAL_TIM_ConfigClockSource+0x210>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	f000 80a1 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b3f4:	4a60      	ldr	r2, [pc, #384]	; (800b578 <HAL_TIM_ConfigClockSource+0x210>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	f200 80a6 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b3fc:	4a5f      	ldr	r2, [pc, #380]	; (800b57c <HAL_TIM_ConfigClockSource+0x214>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	f000 8099 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b404:	4a5d      	ldr	r2, [pc, #372]	; (800b57c <HAL_TIM_ConfigClockSource+0x214>)
 800b406:	4293      	cmp	r3, r2
 800b408:	f200 809e 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b40c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b410:	f000 8091 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b414:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b418:	f200 8096 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b41c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b420:	f000 8089 	beq.w	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b428:	f200 808e 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b430:	d03e      	beq.n	800b4b0 <HAL_TIM_ConfigClockSource+0x148>
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b436:	f200 8087 	bhi.w	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43e:	f000 8086 	beq.w	800b54e <HAL_TIM_ConfigClockSource+0x1e6>
 800b442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b446:	d87f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b448:	2b70      	cmp	r3, #112	; 0x70
 800b44a:	d01a      	beq.n	800b482 <HAL_TIM_ConfigClockSource+0x11a>
 800b44c:	2b70      	cmp	r3, #112	; 0x70
 800b44e:	d87b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b450:	2b60      	cmp	r3, #96	; 0x60
 800b452:	d050      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x18e>
 800b454:	2b60      	cmp	r3, #96	; 0x60
 800b456:	d877      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b458:	2b50      	cmp	r3, #80	; 0x50
 800b45a:	d03c      	beq.n	800b4d6 <HAL_TIM_ConfigClockSource+0x16e>
 800b45c:	2b50      	cmp	r3, #80	; 0x50
 800b45e:	d873      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d058      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x1ae>
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d86f      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b468:	2b30      	cmp	r3, #48	; 0x30
 800b46a:	d064      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b46c:	2b30      	cmp	r3, #48	; 0x30
 800b46e:	d86b      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b470:	2b20      	cmp	r3, #32
 800b472:	d060      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b474:	2b20      	cmp	r3, #32
 800b476:	d867      	bhi.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d05c      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d05a      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x1ce>
 800b480:	e062      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6899      	ldr	r1, [r3, #8]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	f000 fceb 	bl	800be6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	609a      	str	r2, [r3, #8]
      break;
 800b4ae:	e04f      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	6899      	ldr	r1, [r3, #8]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f000 fcd4 	bl	800be6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4d2:	609a      	str	r2, [r3, #8]
      break;
 800b4d4:	e03c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6859      	ldr	r1, [r3, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f000 fc46 	bl	800bd74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2150      	movs	r1, #80	; 0x50
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 fc9f 	bl	800be32 <TIM_ITRx_SetConfig>
      break;
 800b4f4:	e02c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	6859      	ldr	r1, [r3, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	461a      	mov	r2, r3
 800b504:	f000 fc65 	bl	800bdd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2160      	movs	r1, #96	; 0x60
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 fc8f 	bl	800be32 <TIM_ITRx_SetConfig>
      break;
 800b514:	e01c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6859      	ldr	r1, [r3, #4]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	461a      	mov	r2, r3
 800b524:	f000 fc26 	bl	800bd74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2140      	movs	r1, #64	; 0x40
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 fc7f 	bl	800be32 <TIM_ITRx_SetConfig>
      break;
 800b534:	e00c      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f000 fc76 	bl	800be32 <TIM_ITRx_SetConfig>
      break;
 800b546:	e003      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
      break;
 800b54c:	e000      	b.n	800b550 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800b54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	00100070 	.word	0x00100070
 800b570:	00100050 	.word	0x00100050
 800b574:	00100040 	.word	0x00100040
 800b578:	00100030 	.word	0x00100030
 800b57c:	00100020 	.word	0x00100020

0800b580 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a46      	ldr	r2, [pc, #280]	; (800b6fc <TIM_Base_SetConfig+0x12c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d017      	beq.n	800b618 <TIM_Base_SetConfig+0x48>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ee:	d013      	beq.n	800b618 <TIM_Base_SetConfig+0x48>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a43      	ldr	r2, [pc, #268]	; (800b700 <TIM_Base_SetConfig+0x130>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d00f      	beq.n	800b618 <TIM_Base_SetConfig+0x48>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a42      	ldr	r2, [pc, #264]	; (800b704 <TIM_Base_SetConfig+0x134>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d00b      	beq.n	800b618 <TIM_Base_SetConfig+0x48>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a41      	ldr	r2, [pc, #260]	; (800b708 <TIM_Base_SetConfig+0x138>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d007      	beq.n	800b618 <TIM_Base_SetConfig+0x48>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a40      	ldr	r2, [pc, #256]	; (800b70c <TIM_Base_SetConfig+0x13c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d003      	beq.n	800b618 <TIM_Base_SetConfig+0x48>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a3f      	ldr	r2, [pc, #252]	; (800b710 <TIM_Base_SetConfig+0x140>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d108      	bne.n	800b62a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a33      	ldr	r2, [pc, #204]	; (800b6fc <TIM_Base_SetConfig+0x12c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d023      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b638:	d01f      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a30      	ldr	r2, [pc, #192]	; (800b700 <TIM_Base_SetConfig+0x130>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d01b      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a2f      	ldr	r2, [pc, #188]	; (800b704 <TIM_Base_SetConfig+0x134>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d017      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a2e      	ldr	r2, [pc, #184]	; (800b708 <TIM_Base_SetConfig+0x138>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d013      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a2d      	ldr	r2, [pc, #180]	; (800b70c <TIM_Base_SetConfig+0x13c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d00f      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a2d      	ldr	r2, [pc, #180]	; (800b714 <TIM_Base_SetConfig+0x144>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00b      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2c      	ldr	r2, [pc, #176]	; (800b718 <TIM_Base_SetConfig+0x148>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d007      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a2b      	ldr	r2, [pc, #172]	; (800b71c <TIM_Base_SetConfig+0x14c>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d003      	beq.n	800b67a <TIM_Base_SetConfig+0xaa>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a26      	ldr	r2, [pc, #152]	; (800b710 <TIM_Base_SetConfig+0x140>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d108      	bne.n	800b68c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a12      	ldr	r2, [pc, #72]	; (800b6fc <TIM_Base_SetConfig+0x12c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d013      	beq.n	800b6e0 <TIM_Base_SetConfig+0x110>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a14      	ldr	r2, [pc, #80]	; (800b70c <TIM_Base_SetConfig+0x13c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d00f      	beq.n	800b6e0 <TIM_Base_SetConfig+0x110>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a14      	ldr	r2, [pc, #80]	; (800b714 <TIM_Base_SetConfig+0x144>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00b      	beq.n	800b6e0 <TIM_Base_SetConfig+0x110>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a13      	ldr	r2, [pc, #76]	; (800b718 <TIM_Base_SetConfig+0x148>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d007      	beq.n	800b6e0 <TIM_Base_SetConfig+0x110>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a12      	ldr	r2, [pc, #72]	; (800b71c <TIM_Base_SetConfig+0x14c>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <TIM_Base_SetConfig+0x110>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a0d      	ldr	r2, [pc, #52]	; (800b710 <TIM_Base_SetConfig+0x140>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d103      	bne.n	800b6e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	615a      	str	r2, [r3, #20]
}
 800b6ee:	bf00      	nop
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	40012c00 	.word	0x40012c00
 800b700:	40000400 	.word	0x40000400
 800b704:	40000800 	.word	0x40000800
 800b708:	40000c00 	.word	0x40000c00
 800b70c:	40013400 	.word	0x40013400
 800b710:	40015000 	.word	0x40015000
 800b714:	40014000 	.word	0x40014000
 800b718:	40014400 	.word	0x40014400
 800b71c:	40014800 	.word	0x40014800

0800b720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	f023 0201 	bic.w	r2, r3, #1
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b74e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f023 0303 	bic.w	r3, r3, #3
 800b75a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	4313      	orrs	r3, r2
 800b764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f023 0302 	bic.w	r3, r3, #2
 800b76c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4313      	orrs	r3, r2
 800b776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a30      	ldr	r2, [pc, #192]	; (800b83c <TIM_OC1_SetConfig+0x11c>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d013      	beq.n	800b7a8 <TIM_OC1_SetConfig+0x88>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a2f      	ldr	r2, [pc, #188]	; (800b840 <TIM_OC1_SetConfig+0x120>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d00f      	beq.n	800b7a8 <TIM_OC1_SetConfig+0x88>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a2e      	ldr	r2, [pc, #184]	; (800b844 <TIM_OC1_SetConfig+0x124>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d00b      	beq.n	800b7a8 <TIM_OC1_SetConfig+0x88>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a2d      	ldr	r2, [pc, #180]	; (800b848 <TIM_OC1_SetConfig+0x128>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d007      	beq.n	800b7a8 <TIM_OC1_SetConfig+0x88>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a2c      	ldr	r2, [pc, #176]	; (800b84c <TIM_OC1_SetConfig+0x12c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d003      	beq.n	800b7a8 <TIM_OC1_SetConfig+0x88>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a2b      	ldr	r2, [pc, #172]	; (800b850 <TIM_OC1_SetConfig+0x130>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d10c      	bne.n	800b7c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f023 0308 	bic.w	r3, r3, #8
 800b7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f023 0304 	bic.w	r3, r3, #4
 800b7c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1d      	ldr	r2, [pc, #116]	; (800b83c <TIM_OC1_SetConfig+0x11c>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d013      	beq.n	800b7f2 <TIM_OC1_SetConfig+0xd2>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1c      	ldr	r2, [pc, #112]	; (800b840 <TIM_OC1_SetConfig+0x120>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d00f      	beq.n	800b7f2 <TIM_OC1_SetConfig+0xd2>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1b      	ldr	r2, [pc, #108]	; (800b844 <TIM_OC1_SetConfig+0x124>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d00b      	beq.n	800b7f2 <TIM_OC1_SetConfig+0xd2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <TIM_OC1_SetConfig+0x128>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d007      	beq.n	800b7f2 <TIM_OC1_SetConfig+0xd2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a19      	ldr	r2, [pc, #100]	; (800b84c <TIM_OC1_SetConfig+0x12c>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d003      	beq.n	800b7f2 <TIM_OC1_SetConfig+0xd2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a18      	ldr	r2, [pc, #96]	; (800b850 <TIM_OC1_SetConfig+0x130>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d111      	bne.n	800b816 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4313      	orrs	r3, r2
 800b814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	621a      	str	r2, [r3, #32]
}
 800b830:	bf00      	nop
 800b832:	371c      	adds	r7, #28
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	40012c00 	.word	0x40012c00
 800b840:	40013400 	.word	0x40013400
 800b844:	40014000 	.word	0x40014000
 800b848:	40014400 	.word	0x40014400
 800b84c:	40014800 	.word	0x40014800
 800b850:	40015000 	.word	0x40015000

0800b854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	f023 0210 	bic.w	r2, r3, #16
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	021b      	lsls	r3, r3, #8
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	f023 0320 	bic.w	r3, r3, #32
 800b8a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	011b      	lsls	r3, r3, #4
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a2c      	ldr	r2, [pc, #176]	; (800b964 <TIM_OC2_SetConfig+0x110>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d007      	beq.n	800b8c8 <TIM_OC2_SetConfig+0x74>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a2b      	ldr	r2, [pc, #172]	; (800b968 <TIM_OC2_SetConfig+0x114>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d003      	beq.n	800b8c8 <TIM_OC2_SetConfig+0x74>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a2a      	ldr	r2, [pc, #168]	; (800b96c <TIM_OC2_SetConfig+0x118>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d10d      	bne.n	800b8e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	011b      	lsls	r3, r3, #4
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a1f      	ldr	r2, [pc, #124]	; (800b964 <TIM_OC2_SetConfig+0x110>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d013      	beq.n	800b914 <TIM_OC2_SetConfig+0xc0>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a1e      	ldr	r2, [pc, #120]	; (800b968 <TIM_OC2_SetConfig+0x114>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d00f      	beq.n	800b914 <TIM_OC2_SetConfig+0xc0>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <TIM_OC2_SetConfig+0x11c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d00b      	beq.n	800b914 <TIM_OC2_SetConfig+0xc0>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <TIM_OC2_SetConfig+0x120>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d007      	beq.n	800b914 <TIM_OC2_SetConfig+0xc0>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a1c      	ldr	r2, [pc, #112]	; (800b978 <TIM_OC2_SetConfig+0x124>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d003      	beq.n	800b914 <TIM_OC2_SetConfig+0xc0>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a17      	ldr	r2, [pc, #92]	; (800b96c <TIM_OC2_SetConfig+0x118>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d113      	bne.n	800b93c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b91a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	4313      	orrs	r3, r2
 800b93a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	621a      	str	r2, [r3, #32]
}
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	40012c00 	.word	0x40012c00
 800b968:	40013400 	.word	0x40013400
 800b96c:	40015000 	.word	0x40015000
 800b970:	40014000 	.word	0x40014000
 800b974:	40014400 	.word	0x40014400
 800b978:	40014800 	.word	0x40014800

0800b97c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f023 0303 	bic.w	r3, r3, #3
 800b9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a2b      	ldr	r2, [pc, #172]	; (800ba88 <TIM_OC3_SetConfig+0x10c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d007      	beq.n	800b9ee <TIM_OC3_SetConfig+0x72>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a2a      	ldr	r2, [pc, #168]	; (800ba8c <TIM_OC3_SetConfig+0x110>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d003      	beq.n	800b9ee <TIM_OC3_SetConfig+0x72>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a29      	ldr	r2, [pc, #164]	; (800ba90 <TIM_OC3_SetConfig+0x114>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d10d      	bne.n	800ba0a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <TIM_OC3_SetConfig+0x10c>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d013      	beq.n	800ba3a <TIM_OC3_SetConfig+0xbe>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a1d      	ldr	r2, [pc, #116]	; (800ba8c <TIM_OC3_SetConfig+0x110>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00f      	beq.n	800ba3a <TIM_OC3_SetConfig+0xbe>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a1d      	ldr	r2, [pc, #116]	; (800ba94 <TIM_OC3_SetConfig+0x118>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00b      	beq.n	800ba3a <TIM_OC3_SetConfig+0xbe>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a1c      	ldr	r2, [pc, #112]	; (800ba98 <TIM_OC3_SetConfig+0x11c>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d007      	beq.n	800ba3a <TIM_OC3_SetConfig+0xbe>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a1b      	ldr	r2, [pc, #108]	; (800ba9c <TIM_OC3_SetConfig+0x120>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d003      	beq.n	800ba3a <TIM_OC3_SetConfig+0xbe>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a16      	ldr	r2, [pc, #88]	; (800ba90 <TIM_OC3_SetConfig+0x114>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d113      	bne.n	800ba62 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	011b      	lsls	r3, r3, #4
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	621a      	str	r2, [r3, #32]
}
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	40012c00 	.word	0x40012c00
 800ba8c:	40013400 	.word	0x40013400
 800ba90:	40015000 	.word	0x40015000
 800ba94:	40014000 	.word	0x40014000
 800ba98:	40014400 	.word	0x40014400
 800ba9c:	40014800 	.word	0x40014800

0800baa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b087      	sub	sp, #28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800baee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	031b      	lsls	r3, r3, #12
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a2c      	ldr	r2, [pc, #176]	; (800bbb0 <TIM_OC4_SetConfig+0x110>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d007      	beq.n	800bb14 <TIM_OC4_SetConfig+0x74>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a2b      	ldr	r2, [pc, #172]	; (800bbb4 <TIM_OC4_SetConfig+0x114>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d003      	beq.n	800bb14 <TIM_OC4_SetConfig+0x74>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a2a      	ldr	r2, [pc, #168]	; (800bbb8 <TIM_OC4_SetConfig+0x118>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d10d      	bne.n	800bb30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	031b      	lsls	r3, r3, #12
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a1f      	ldr	r2, [pc, #124]	; (800bbb0 <TIM_OC4_SetConfig+0x110>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d013      	beq.n	800bb60 <TIM_OC4_SetConfig+0xc0>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a1e      	ldr	r2, [pc, #120]	; (800bbb4 <TIM_OC4_SetConfig+0x114>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d00f      	beq.n	800bb60 <TIM_OC4_SetConfig+0xc0>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a1e      	ldr	r2, [pc, #120]	; (800bbbc <TIM_OC4_SetConfig+0x11c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00b      	beq.n	800bb60 <TIM_OC4_SetConfig+0xc0>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a1d      	ldr	r2, [pc, #116]	; (800bbc0 <TIM_OC4_SetConfig+0x120>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d007      	beq.n	800bb60 <TIM_OC4_SetConfig+0xc0>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a1c      	ldr	r2, [pc, #112]	; (800bbc4 <TIM_OC4_SetConfig+0x124>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d003      	beq.n	800bb60 <TIM_OC4_SetConfig+0xc0>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a17      	ldr	r2, [pc, #92]	; (800bbb8 <TIM_OC4_SetConfig+0x118>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d113      	bne.n	800bb88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	019b      	lsls	r3, r3, #6
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	019b      	lsls	r3, r3, #6
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	621a      	str	r2, [r3, #32]
}
 800bba2:	bf00      	nop
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	40012c00 	.word	0x40012c00
 800bbb4:	40013400 	.word	0x40013400
 800bbb8:	40015000 	.word	0x40015000
 800bbbc:	40014000 	.word	0x40014000
 800bbc0:	40014400 	.word	0x40014400
 800bbc4:	40014800 	.word	0x40014800

0800bbc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	041b      	lsls	r3, r3, #16
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a19      	ldr	r2, [pc, #100]	; (800bc84 <TIM_OC5_SetConfig+0xbc>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d013      	beq.n	800bc4a <TIM_OC5_SetConfig+0x82>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a18      	ldr	r2, [pc, #96]	; (800bc88 <TIM_OC5_SetConfig+0xc0>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d00f      	beq.n	800bc4a <TIM_OC5_SetConfig+0x82>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <TIM_OC5_SetConfig+0xc4>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d00b      	beq.n	800bc4a <TIM_OC5_SetConfig+0x82>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <TIM_OC5_SetConfig+0xc8>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d007      	beq.n	800bc4a <TIM_OC5_SetConfig+0x82>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a15      	ldr	r2, [pc, #84]	; (800bc94 <TIM_OC5_SetConfig+0xcc>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d003      	beq.n	800bc4a <TIM_OC5_SetConfig+0x82>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a14      	ldr	r2, [pc, #80]	; (800bc98 <TIM_OC5_SetConfig+0xd0>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d109      	bne.n	800bc5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	621a      	str	r2, [r3, #32]
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	40012c00 	.word	0x40012c00
 800bc88:	40013400 	.word	0x40013400
 800bc8c:	40014000 	.word	0x40014000
 800bc90:	40014400 	.word	0x40014400
 800bc94:	40014800 	.word	0x40014800
 800bc98:	40015000 	.word	0x40015000

0800bc9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	051b      	lsls	r3, r3, #20
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a1a      	ldr	r2, [pc, #104]	; (800bd5c <TIM_OC6_SetConfig+0xc0>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d013      	beq.n	800bd20 <TIM_OC6_SetConfig+0x84>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a19      	ldr	r2, [pc, #100]	; (800bd60 <TIM_OC6_SetConfig+0xc4>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d00f      	beq.n	800bd20 <TIM_OC6_SetConfig+0x84>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a18      	ldr	r2, [pc, #96]	; (800bd64 <TIM_OC6_SetConfig+0xc8>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d00b      	beq.n	800bd20 <TIM_OC6_SetConfig+0x84>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <TIM_OC6_SetConfig+0xcc>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d007      	beq.n	800bd20 <TIM_OC6_SetConfig+0x84>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a16      	ldr	r2, [pc, #88]	; (800bd6c <TIM_OC6_SetConfig+0xd0>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d003      	beq.n	800bd20 <TIM_OC6_SetConfig+0x84>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <TIM_OC6_SetConfig+0xd4>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d109      	bne.n	800bd34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	029b      	lsls	r3, r3, #10
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	621a      	str	r2, [r3, #32]
}
 800bd4e:	bf00      	nop
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	40012c00 	.word	0x40012c00
 800bd60:	40013400 	.word	0x40013400
 800bd64:	40014000 	.word	0x40014000
 800bd68:	40014400 	.word	0x40014400
 800bd6c:	40014800 	.word	0x40014800
 800bd70:	40015000 	.word	0x40015000

0800bd74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	f023 0201 	bic.w	r2, r3, #1
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	693a      	ldr	r2, [r7, #16]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f023 030a 	bic.w	r3, r3, #10
 800bdb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	621a      	str	r2, [r3, #32]
}
 800bdc6:	bf00      	nop
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b087      	sub	sp, #28
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	60f8      	str	r0, [r7, #12]
 800bdda:	60b9      	str	r1, [r7, #8]
 800bddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	f023 0210 	bic.w	r2, r3, #16
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	031b      	lsls	r3, r3, #12
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	4313      	orrs	r3, r2
 800be06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	011b      	lsls	r3, r3, #4
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	4313      	orrs	r3, r2
 800be18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	697a      	ldr	r2, [r7, #20]
 800be1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	621a      	str	r2, [r3, #32]
}
 800be26:	bf00      	nop
 800be28:	371c      	adds	r7, #28
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be32:	b480      	push	{r7}
 800be34:	b085      	sub	sp, #20
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800be48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4313      	orrs	r3, r2
 800be54:	f043 0307 	orr.w	r3, r3, #7
 800be58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	609a      	str	r2, [r3, #8]
}
 800be60:	bf00      	nop
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	021a      	lsls	r2, r3, #8
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	431a      	orrs	r2, r3
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4313      	orrs	r3, r2
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	4313      	orrs	r3, r2
 800be98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	609a      	str	r2, [r3, #8]
}
 800bea0:	bf00      	nop
 800bea2:	371c      	adds	r7, #28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	f003 031f 	and.w	r3, r3, #31
 800bebe:	2201      	movs	r2, #1
 800bec0:	fa02 f303 	lsl.w	r3, r2, r3
 800bec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6a1a      	ldr	r2, [r3, #32]
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	43db      	mvns	r3, r3
 800bece:	401a      	ands	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6a1a      	ldr	r2, [r3, #32]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f003 031f 	and.w	r3, r3, #31
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	fa01 f303 	lsl.w	r3, r1, r3
 800bee4:	431a      	orrs	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	621a      	str	r2, [r3, #32]
}
 800beea:	bf00      	nop
 800beec:	371c      	adds	r7, #28
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
	...

0800bef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d101      	bne.n	800bf10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	e074      	b.n	800bffa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a34      	ldr	r2, [pc, #208]	; (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d009      	beq.n	800bf4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a33      	ldr	r2, [pc, #204]	; (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d004      	beq.n	800bf4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a31      	ldr	r2, [pc, #196]	; (800c010 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d108      	bne.n	800bf60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bf66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a21      	ldr	r2, [pc, #132]	; (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d022      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf90:	d01d      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a1f      	ldr	r2, [pc, #124]	; (800c014 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d018      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a1d      	ldr	r2, [pc, #116]	; (800c018 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d013      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a1c      	ldr	r2, [pc, #112]	; (800c01c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d00e      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a15      	ldr	r2, [pc, #84]	; (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d009      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a18      	ldr	r2, [pc, #96]	; (800c020 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d004      	beq.n	800bfce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a11      	ldr	r2, [pc, #68]	; (800c010 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d10c      	bne.n	800bfe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	40012c00 	.word	0x40012c00
 800c00c:	40013400 	.word	0x40013400
 800c010:	40015000 	.word	0x40015000
 800c014:	40000400 	.word	0x40000400
 800c018:	40000800 	.word	0x40000800
 800c01c:	40000c00 	.word	0x40000c00
 800c020:	40014000 	.word	0x40014000

0800c024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	6812      	ldr	r2, [r2, #0]
 800c0c8:	f023 0101 	bic.w	r1, r3, #1
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	2b08      	cmp	r3, #8
 800c0d8:	d102      	bne.n	800c0e0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c0da:	2340      	movs	r3, #64	; 0x40
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e001      	b.n	800c0e4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800c0f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800c0f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800c0fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800c102:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800c108:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800c10e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800c114:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800c11a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800c120:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800c126:	4313      	orrs	r3, r2
 800c128:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	4313      	orrs	r3, r2
 800c132:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	4313      	orrs	r3, r2
 800c146:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	4313      	orrs	r3, r2
 800c150:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800c152:	4b3d      	ldr	r3, [pc, #244]	; (800c248 <FMC_NORSRAM_Init+0x198>)
 800c154:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c15c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c164:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800c16c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800c174:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	43db      	mvns	r3, r3
 800c184:	ea02 0103 	and.w	r1, r2, r3
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	4319      	orrs	r1, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c19e:	d10c      	bne.n	800c1ba <FMC_NORSRAM_Init+0x10a>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d008      	beq.n	800c1ba <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d006      	beq.n	800c1d0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d12f      	bne.n	800c23a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	0c1b      	lsrs	r3, r3, #16
 800c1e0:	041b      	lsls	r3, r3, #16
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c1e6:	431a      	orrs	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d014      	beq.n	800c21e <FMC_NORSRAM_Init+0x16e>
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d819      	bhi.n	800c22c <FMC_NORSRAM_Init+0x17c>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <FMC_NORSRAM_Init+0x152>
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d007      	beq.n	800c210 <FMC_NORSRAM_Init+0x160>
 800c200:	e014      	b.n	800c22c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	621a      	str	r2, [r3, #32]
        break;
 800c20e:	e014      	b.n	800c23a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a1b      	ldr	r3, [r3, #32]
 800c214:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	621a      	str	r2, [r3, #32]
        break;
 800c21c:	e00d      	b.n	800c23a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	621a      	str	r2, [r3, #32]
        break;
 800c22a:	e006      	b.n	800c23a <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	621a      	str	r2, [r3, #32]
        break;
 800c238:	bf00      	nop
    }
  }

  return HAL_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	0008fb7f 	.word	0x0008fb7f

0800c24c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	011b      	lsls	r3, r3, #4
 800c26c:	431a      	orrs	r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	021b      	lsls	r3, r3, #8
 800c274:	431a      	orrs	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	431a      	orrs	r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	041b      	lsls	r3, r3, #16
 800c284:	431a      	orrs	r2, r3
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	051b      	lsls	r3, r3, #20
 800c28e:	431a      	orrs	r2, r3
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	3b02      	subs	r3, #2
 800c296:	061b      	lsls	r3, r3, #24
 800c298:	ea42 0103 	orr.w	r1, r2, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	4319      	orrs	r1, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2b8:	d113      	bne.n	800c2e2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c2c2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	695b      	ldr	r3, [r3, #20]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	051b      	lsls	r3, r3, #20
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
 800c2fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c304:	d121      	bne.n	800c34a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	6819      	ldr	r1, [r3, #0]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	4319      	orrs	r1, r3
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	021b      	lsls	r3, r3, #8
 800c324:	4319      	orrs	r1, r3
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	079b      	lsls	r3, r3, #30
 800c32c:	4319      	orrs	r1, r3
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	4319      	orrs	r1, r3
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	041b      	lsls	r3, r3, #16
 800c33a:	430b      	orrs	r3, r1
 800c33c:	ea42 0103 	orr.w	r1, r2, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c348:	e005      	b.n	800c356 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <setpixel>:
#include "framebuf.h"

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	891b      	ldrh	r3, [r3, #8]
 800c37a:	4619      	mov	r1, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	fb03 f101 	mul.w	r1, r3, r1
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	440b      	add	r3, r1
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	4413      	add	r3, r2
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	b292      	uxth	r2, r2
 800c38e:	801a      	strh	r2, [r3, #0]
}
 800c390:	bf00      	nop
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 800c39c:	b480      	push	{r7}
 800c39e:	b089      	sub	sp, #36	; 0x24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dd66      	ble.n	800c47e <fill_rect+0xe2>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dd63      	ble.n	800c47e <fill_rect+0xe2>
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dd5e      	ble.n	800c47e <fill_rect+0xe2>
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	4413      	add	r3, r2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	dd59      	ble.n	800c47e <fill_rect+0xe2>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	88db      	ldrh	r3, [r3, #6]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	da53      	bge.n	800c47e <fill_rect+0xe2>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	889b      	ldrh	r3, [r3, #4]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	da4d      	bge.n	800c47e <fill_rect+0xe2>
        // No operation needed.
        return;
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	8892      	ldrh	r2, [r2, #4]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	bfa8      	it	ge
 800c3f0:	4613      	movge	r3, r2
 800c3f2:	617b      	str	r3, [r7, #20]
    int yend = MIN(fb->height, y + h);
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	4413      	add	r3, r2
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	88d2      	ldrh	r2, [r2, #6]
 800c3fe:	4293      	cmp	r3, r2
 800c400:	bfa8      	it	ge
 800c402:	4613      	movge	r3, r2
 800c404:	613b      	str	r3, [r7, #16]
    x = MAX(x, 0);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c40c:	60bb      	str	r3, [r7, #8]
    y = MAX(y, 0);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c414:	607b      	str	r3, [r7, #4]

    w = xend - x;
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	603b      	str	r3, [r7, #0]
    h = yend - y;
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	891b      	ldrh	r3, [r3, #8]
 800c42e:	4619      	mov	r1, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	fb03 f101 	mul.w	r1, r3, r1
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	440b      	add	r3, r1
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800c440:	e017      	b.n	800c472 <fill_rect+0xd6>
        for (unsigned int ww = w; ww; --ww) {
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	61bb      	str	r3, [r7, #24]
 800c446:	e008      	b.n	800c45a <fill_rect+0xbe>
            *b++ = col;
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	1c9a      	adds	r2, r3, #2
 800c44c:	61fa      	str	r2, [r7, #28]
 800c44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c450:	b292      	uxth	r2, r2
 800c452:	801a      	strh	r2, [r3, #0]
        for (unsigned int ww = w; ww; --ww) {
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	3b01      	subs	r3, #1
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1f3      	bne.n	800c448 <fill_rect+0xac>
        }
        b += fb->stride - w;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	891b      	ldrh	r3, [r3, #8]
 800c464:	461a      	mov	r2, r3
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	69fa      	ldr	r2, [r7, #28]
 800c46e:	4413      	add	r3, r2
 800c470:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c474:	1e5a      	subs	r2, r3, #1
 800c476:	62ba      	str	r2, [r7, #40]	; 0x28
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1e2      	bne.n	800c442 <fill_rect+0xa6>
 800c47c:	e000      	b.n	800c480 <fill_rect+0xe4>
        return;
 800c47e:	bf00      	nop
    }

}
 800c480:	3724      	adds	r7, #36	; 0x24
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
 800c48a:	b480      	push	{r7}
 800c48c:	b085      	sub	sp, #20
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	607b      	str	r3, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	817b      	strh	r3, [r7, #10]
 800c498:	4613      	mov	r3, r2
 800c49a:	813b      	strh	r3, [r7, #8]
    fb->width = width;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	897a      	ldrh	r2, [r7, #10]
 800c4a0:	809a      	strh	r2, [r3, #4]
    fb->height = height;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	893a      	ldrh	r2, [r7, #8]
 800c4a6:	80da      	strh	r2, [r3, #6]
	fb->buf = buf;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
	fb->stride = fb->width;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	889a      	ldrh	r2, [r3, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	811a      	strh	r2, [r3, #8]
}
 800c4b6:	bf00      	nop
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b084      	sub	sp, #16
 800c4c6:	af02      	add	r7, sp, #8
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	889b      	ldrh	r3, [r3, #4]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	88db      	ldrh	r3, [r3, #6]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	9200      	str	r2, [sp, #0]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff ff59 	bl	800c39c <fill_rect>
}
 800c4ea:	bf00      	nop
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b086      	sub	sp, #24
 800c4f6:	af02      	add	r7, sp, #8
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	603b      	str	r3, [r7, #0]
    fill_rect( fb, x, y, w, h, col );
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	68b9      	ldr	r1, [r7, #8]
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f7ff ff44 	bl	800c39c <fill_rect>
}
 800c514:	bf00      	nop
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
 800c528:	603b      	str	r3, [r7, #0]
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	db14      	blt.n	800c55a <framebuf_pixel+0x3e>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	889b      	ldrh	r3, [r3, #4]
 800c534:	461a      	mov	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	4293      	cmp	r3, r2
 800c53a:	da0e      	bge.n	800c55a <framebuf_pixel+0x3e>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	db0b      	blt.n	800c55a <framebuf_pixel+0x3e>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	88db      	ldrh	r3, [r3, #6]
 800c546:	461a      	mov	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4293      	cmp	r3, r2
 800c54c:	da05      	bge.n	800c55a <framebuf_pixel+0x3e>
		setpixel( fb, x, y,  col );
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f7ff ff05 	bl	800c364 <setpixel>
    }
}
 800c55a:	bf00      	nop
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 800c562:	b580      	push	{r7, lr}
 800c564:	b086      	sub	sp, #24
 800c566:	af02      	add	r7, sp, #8
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
 800c56e:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	2301      	movs	r3, #1
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7ff ff0c 	bl	800c39c <fill_rect>
}
 800c584:	bf00      	nop
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af02      	add	r7, sp, #8
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, 1, h, col );
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f7ff fef7 	bl	800c39c <fill_rect>
}
 800c5ae:	bf00      	nop
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <framebuf_rect>:

void framebuf_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b086      	sub	sp, #24
 800c5ba:	af02      	add	r7, sp, #8
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff fee2 	bl	800c39c <fill_rect>
	fill_rect( fb, x, y + h - 1, w, 1, col );
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	4413      	add	r3, r2
 800c5de:	1e5a      	subs	r2, r3, #1
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff fed5 	bl	800c39c <fill_rect>
	fill_rect( fb, x, y, 1, h, col );
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	68b9      	ldr	r1, [r7, #8]
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f7ff fecb 	bl	800c39c <fill_rect>
	fill_rect( fb, x + w - 1, y, 1, h, col );
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	4413      	add	r3, r2
 800c60c:	1e59      	subs	r1, r3, #1
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	2301      	movs	r3, #1
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f7ff febe 	bl	800c39c <fill_rect>
}
 800c620:	bf00      	nop
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <line>:

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800c628:	b580      	push	{r7, lr}
 800c62a:	b08c      	sub	sp, #48	; 0x30
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
 800c634:	603b      	str	r3, [r7, #0]
	int dx = x2 - x1;
 800c636:	683a      	ldr	r2, [r7, #0]
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sx;
    if (dx > 0) {
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	2b00      	cmp	r3, #0
 800c642:	dd02      	ble.n	800c64a <line+0x22>
        sx = 1;
 800c644:	2301      	movs	r3, #1
 800c646:	62bb      	str	r3, [r7, #40]	; 0x28
 800c648:	e005      	b.n	800c656 <line+0x2e>
    } else {
        dx = -dx;
 800c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64c:	425b      	negs	r3, r3
 800c64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sx = -1;
 800c650:	f04f 33ff 	mov.w	r3, #4294967295
 800c654:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int dy = y2 - y1;
 800c656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	627b      	str	r3, [r7, #36]	; 0x24
    int sy;
    if (dy > 0) {
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	2b00      	cmp	r3, #0
 800c662:	dd02      	ble.n	800c66a <line+0x42>
        sy = 1;
 800c664:	2301      	movs	r3, #1
 800c666:	623b      	str	r3, [r7, #32]
 800c668:	e005      	b.n	800c676 <line+0x4e>
    } else {
        dy = -dy;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	425b      	negs	r3, r3
 800c66e:	627b      	str	r3, [r7, #36]	; 0x24
        sy = -1;
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
 800c674:	623b      	str	r3, [r7, #32]
    }

    int steep;
    if (dy > dx) {
 800c676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	dd14      	ble.n	800c6a8 <line+0x80>
        int temp;
        temp = x1;
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	613b      	str	r3, [r7, #16]
        x1 = y1;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	60bb      	str	r3, [r7, #8]
        y1 = temp;
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	607b      	str	r3, [r7, #4]
        temp = dx;
 800c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68c:	613b      	str	r3, [r7, #16]
        dx = dy;
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	62fb      	str	r3, [r7, #44]	; 0x2c
        dy = temp;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	627b      	str	r3, [r7, #36]	; 0x24
        temp = sx;
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	613b      	str	r3, [r7, #16]
        sx = sy;
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	62bb      	str	r3, [r7, #40]	; 0x28
        sy = temp;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	623b      	str	r3, [r7, #32]
        steep = 1;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	61fb      	str	r3, [r7, #28]
 800c6a6:	e001      	b.n	800c6ac <line+0x84>
    } else {
        steep = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	61fb      	str	r3, [r7, #28]
    }

    int e = 2 * dy - dx;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	005a      	lsls	r2, r3, #1
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e04c      	b.n	800c756 <line+0x12e>
        if (steep) {
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d018      	beq.n	800c6f4 <line+0xcc>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	db37      	blt.n	800c738 <line+0x110>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	889b      	ldrh	r3, [r3, #4]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	da31      	bge.n	800c738 <line+0x110>
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db2e      	blt.n	800c738 <line+0x110>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	88db      	ldrh	r3, [r3, #6]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	da28      	bge.n	800c738 <line+0x110>
                setpixel(fb, y1, x1, col);
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7ff fe39 	bl	800c364 <setpixel>
 800c6f2:	e021      	b.n	800c738 <line+0x110>
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	db1e      	blt.n	800c738 <line+0x110>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	889b      	ldrh	r3, [r3, #4]
 800c6fe:	461a      	mov	r2, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4293      	cmp	r3, r2
 800c704:	da18      	bge.n	800c738 <line+0x110>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	db15      	blt.n	800c738 <line+0x110>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	88db      	ldrh	r3, [r3, #6]
 800c710:	461a      	mov	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4293      	cmp	r3, r2
 800c716:	da0f      	bge.n	800c738 <line+0x110>
                setpixel(fb, x1, y1, col);
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7ff fe20 	bl	800c364 <setpixel>
            }
        }
        while (e >= 0) {
 800c724:	e008      	b.n	800c738 <line+0x110>
            y1 += sy;
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	4413      	add	r3, r2
 800c72c:	607b      	str	r3, [r7, #4]
            e -= 2 * dx;
 800c72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	69ba      	ldr	r2, [r7, #24]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	61bb      	str	r3, [r7, #24]
        while (e >= 0) {
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	daf3      	bge.n	800c726 <line+0xfe>
        }
        x1 += sx;
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	4413      	add	r3, r2
 800c744:	60bb      	str	r3, [r7, #8]
        e += 2 * dy;
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	4413      	add	r3, r2
 800c74e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	3301      	adds	r3, #1
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75a:	429a      	cmp	r2, r3
 800c75c:	dbae      	blt.n	800c6bc <line+0x94>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	db14      	blt.n	800c78e <line+0x166>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	889b      	ldrh	r3, [r3, #4]
 800c768:	461a      	mov	r2, r3
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	4293      	cmp	r3, r2
 800c76e:	da0e      	bge.n	800c78e <line+0x166>
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	2b00      	cmp	r3, #0
 800c774:	db0b      	blt.n	800c78e <line+0x166>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	88db      	ldrh	r3, [r3, #6]
 800c77a:	461a      	mov	r2, r3
 800c77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77e:	4293      	cmp	r3, r2
 800c780:	da05      	bge.n	800c78e <line+0x166>
        setpixel(fb, x2, y2, col);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7ff fdeb 	bl	800c364 <setpixel>
    }
}
 800c78e:	bf00      	nop
 800c790:	3730      	adds	r7, #48	; 0x30
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800c796:	b580      	push	{r7, lr}
 800c798:	b086      	sub	sp, #24
 800c79a:	af02      	add	r7, sp, #8
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
 800c7a2:	603b      	str	r3, [r7, #0]
    line( fb, x1, y1, x2, y2, col );
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	68b9      	ldr	r1, [r7, #8]
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f7ff ff38 	bl	800c628 <line>
}
 800c7b8:	bf00      	nop
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b088      	sub	sp, #32
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
    int x = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	f1c3 0303 	rsb	r3, r3, #3
 800c7de:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800c7e0:	e067      	b.n	800c8b2 <framebuf_circle+0xf2>
        framebuf_pixel(fb, xc + x, yc + y, col);
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	18d1      	adds	r1, r2, r3
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	441a      	add	r2, r3
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7ff fe93 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	1ad1      	subs	r1, r2, r3
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	441a      	add	r2, r3
 800c802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff fe89 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	18d1      	adds	r1, r2, r3
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	1ad2      	subs	r2, r2, r3
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7ff fe7f 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	1ad1      	subs	r1, r2, r3
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	1ad2      	subs	r2, r2, r3
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f7ff fe75 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	18d1      	adds	r1, r2, r3
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	441a      	add	r2, r3
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f7ff fe6b 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	1ad1      	subs	r1, r2, r3
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	441a      	add	r2, r3
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7ff fe61 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	18d1      	adds	r1, r2, r3
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	1ad2      	subs	r2, r2, r3
 800c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7ff fe57 	bl	800c51c <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	1ad1      	subs	r1, r2, r3
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	1ad2      	subs	r2, r2, r3
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f7ff fe4d 	bl	800c51c <framebuf_pixel>

        if (d < 0) {
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2b00      	cmp	r3, #0
 800c886:	da06      	bge.n	800c896 <framebuf_circle+0xd6>
            d = d + 4 * x + 6;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	009a      	lsls	r2, r3, #2
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	4413      	add	r3, r2
 800c890:	3306      	adds	r3, #6
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	e00a      	b.n	800c8ac <framebuf_circle+0xec>
        } else {
            d = d + 4 * (x - y) + 10;
 800c896:	69fa      	ldr	r2, [r7, #28]
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	009a      	lsls	r2, r3, #2
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	330a      	adds	r3, #10
 800c8a4:	617b      	str	r3, [r7, #20]
            y--;
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800c8b2:	69fa      	ldr	r2, [r7, #28]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	dd93      	ble.n	800c7e2 <framebuf_circle+0x22>
    }
}
 800c8ba:	bf00      	nop
 800c8bc:	bf00      	nop
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	; 0x28
 800c8c8:	af02      	add	r7, sp, #8
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	1ad1      	subs	r1, r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	005a      	lsls	r2, r3, #1
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7ff fe3c 	bl	800c562 <framebuf_hline>

    int x = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	f1c3 0303 	rsb	r3, r3, #3
 800c8fa:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800c8fc:	e055      	b.n	800c9aa <framebuf_fill_circle+0xe6>
        if (y > 0) {
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	dd1b      	ble.n	800c93c <framebuf_fill_circle+0x78>
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	1ad1      	subs	r1, r2, r3
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	0058      	lsls	r0, r3, #1
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	4603      	mov	r3, r0
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff fe21 	bl	800c562 <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	1ad1      	subs	r1, r2, r3
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	441a      	add	r2, r3
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	0058      	lsls	r0, r3, #1
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	4603      	mov	r3, r0
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff fe13 	bl	800c562 <framebuf_hline>
        }

        if (x > 0) {
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	dd1b      	ble.n	800c97a <framebuf_fill_circle+0xb6>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	1ad1      	subs	r1, r2, r3
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	1ad2      	subs	r2, r2, r3
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	0058      	lsls	r0, r3, #1
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	4603      	mov	r3, r0
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff fe02 	bl	800c562 <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	1ad1      	subs	r1, r2, r3
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	441a      	add	r2, r3
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	0058      	lsls	r0, r3, #1
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	4603      	mov	r3, r0
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f7ff fdf4 	bl	800c562 <framebuf_hline>
        }

        if (d < 0) {
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	da06      	bge.n	800c98e <framebuf_fill_circle+0xca>
            d = d + 4 * x + 6;
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	009a      	lsls	r2, r3, #2
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	4413      	add	r3, r2
 800c988:	3306      	adds	r3, #6
 800c98a:	617b      	str	r3, [r7, #20]
 800c98c:	e00a      	b.n	800c9a4 <framebuf_fill_circle+0xe0>
        } else {
            d = d + 4 * (x - y) + 10;
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	009a      	lsls	r2, r3, #2
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	4413      	add	r3, r2
 800c99a:	330a      	adds	r3, #10
 800c99c:	617b      	str	r3, [r7, #20]
            y--;
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	dda5      	ble.n	800c8fe <framebuf_fill_circle+0x3a>
    }
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	3720      	adds	r7, #32
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <framebuf_text>:
extern const uint8_t font_petme128_8x8[];

void framebuf_text( const tFramebuf *fb, int x0, int y0, char *str, uint32_t col ) {
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08a      	sub	sp, #40	; 0x28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
    // loop over chars
    for (; *str; ++str) {
 800c9ca:	e04d      	b.n	800ca68 <framebuf_text+0xac>
        // get char and make sure its in range of font
        int chr = *(uint8_t *)str;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	627b      	str	r3, [r7, #36]	; 0x24
        if (chr < 32 || chr > 127) {
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	2b1f      	cmp	r3, #31
 800c9d6:	dd02      	ble.n	800c9de <framebuf_text+0x22>
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	2b7f      	cmp	r3, #127	; 0x7f
 800c9dc:	dd01      	ble.n	800c9e2 <framebuf_text+0x26>
            chr = 127;
 800c9de:	237f      	movs	r3, #127	; 0x7f
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        // get char data
        const uint8_t *chr_data = &font_petme128_8x8[(chr - 32) * 8];
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	3b20      	subs	r3, #32
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	4a24      	ldr	r2, [pc, #144]	; (800ca7c <framebuf_text+0xc0>)
 800c9ea:	4413      	add	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]
        // loop over char data
        for (int j = 0; j < 8; j++, x0++) {
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	623b      	str	r3, [r7, #32]
 800c9f2:	e033      	b.n	800ca5c <framebuf_text+0xa0>
            if (0 <= x0 && x0 < fb->width) { // clip x
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	db2a      	blt.n	800ca50 <framebuf_text+0x94>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	889b      	ldrh	r3, [r3, #4]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	4293      	cmp	r3, r2
 800ca04:	da24      	bge.n	800ca50 <framebuf_text+0x94>
                unsigned int vline_data = chr_data[j]; // each byte is a column of 8 pixels, LSB at top
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	61fb      	str	r3, [r7, #28]
                for (int y = y0; vline_data; vline_data >>= 1, y++) { // scan over vertical column
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	61bb      	str	r3, [r7, #24]
 800ca14:	e019      	b.n	800ca4a <framebuf_text+0x8e>
                    if (vline_data & 1) { // only draw if pixel set
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00e      	beq.n	800ca3e <framebuf_text+0x82>
                        if (0 <= y && y < fb->height) { // clip y
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	db0b      	blt.n	800ca3e <framebuf_text+0x82>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	88db      	ldrh	r3, [r3, #6]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	da05      	bge.n	800ca3e <framebuf_text+0x82>
                            setpixel(fb, x0, y, col);
 800ca32:	68b9      	ldr	r1, [r7, #8]
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff fc93 	bl	800c364 <setpixel>
                for (int y = y0; vline_data; vline_data >>= 1, y++) { // scan over vertical column
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	085b      	lsrs	r3, r3, #1
 800ca42:	61fb      	str	r3, [r7, #28]
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	3301      	adds	r3, #1
 800ca48:	61bb      	str	r3, [r7, #24]
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1e2      	bne.n	800ca16 <framebuf_text+0x5a>
        for (int j = 0; j < 8; j++, x0++) {
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	3301      	adds	r3, #1
 800ca54:	623b      	str	r3, [r7, #32]
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	60bb      	str	r3, [r7, #8]
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	2b07      	cmp	r3, #7
 800ca60:	ddc8      	ble.n	800c9f4 <framebuf_text+0x38>
    for (; *str; ++str) {
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1ad      	bne.n	800c9cc <framebuf_text+0x10>
                    }
                }
            }
        }
    }
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	3728      	adds	r7, #40	; 0x28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	08020fdc 	.word	0x08020fdc

0800ca80 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
    NK_ASSERT(b);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <nk_buffer_init_fixed+0x1e>
 800ca92:	4b1b      	ldr	r3, [pc, #108]	; (800cb00 <nk_buffer_init_fixed+0x80>)
 800ca94:	4a1b      	ldr	r2, [pc, #108]	; (800cb04 <nk_buffer_init_fixed+0x84>)
 800ca96:	2136      	movs	r1, #54	; 0x36
 800ca98:	481b      	ldr	r0, [pc, #108]	; (800cb08 <nk_buffer_init_fixed+0x88>)
 800ca9a:	f00f fedf 	bl	801c85c <__assert_func>
    NK_ASSERT(m);
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d105      	bne.n	800cab0 <nk_buffer_init_fixed+0x30>
 800caa4:	4b19      	ldr	r3, [pc, #100]	; (800cb0c <nk_buffer_init_fixed+0x8c>)
 800caa6:	4a17      	ldr	r2, [pc, #92]	; (800cb04 <nk_buffer_init_fixed+0x84>)
 800caa8:	2137      	movs	r1, #55	; 0x37
 800caaa:	4817      	ldr	r0, [pc, #92]	; (800cb08 <nk_buffer_init_fixed+0x88>)
 800caac:	f00f fed6 	bl	801c85c <__assert_func>
    NK_ASSERT(size);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d105      	bne.n	800cac2 <nk_buffer_init_fixed+0x42>
 800cab6:	4b16      	ldr	r3, [pc, #88]	; (800cb10 <nk_buffer_init_fixed+0x90>)
 800cab8:	4a12      	ldr	r2, [pc, #72]	; (800cb04 <nk_buffer_init_fixed+0x84>)
 800caba:	2138      	movs	r1, #56	; 0x38
 800cabc:	4812      	ldr	r0, [pc, #72]	; (800cb08 <nk_buffer_init_fixed+0x88>)
 800cabe:	f00f fecd 	bl	801c85c <__assert_func>
    if (!b || !m || !size) return;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d016      	beq.n	800caf6 <nk_buffer_init_fixed+0x76>
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d013      	beq.n	800caf6 <nk_buffer_init_fixed+0x76>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d010      	beq.n	800caf6 <nk_buffer_init_fixed+0x76>

    nk_zero(b, sizeof(*b));
 800cad4:	213c      	movs	r1, #60	; 0x3c
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f00e fa10 	bl	801aefc <nk_zero>
    b->type = NK_BUFFER_FIXED;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	771a      	strb	r2, [r3, #28]
    b->memory.ptr = m;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	621a      	str	r2, [r3, #32]
    b->memory.size = size;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	625a      	str	r2, [r3, #36]	; 0x24
    b->size = size;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	639a      	str	r2, [r3, #56]	; 0x38
 800caf4:	e000      	b.n	800caf8 <nk_buffer_init_fixed+0x78>
    if (!b || !m || !size) return;
 800caf6:	bf00      	nop
}
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	0801ff48 	.word	0x0801ff48
 800cb04:	080212dc 	.word	0x080212dc
 800cb08:	0801ff4c 	.word	0x0801ff4c
 800cb0c:	0801ff7c 	.word	0x0801ff7c
 800cb10:	0801ff80 	.word	0x0801ff80

0800cb14 <nk_buffer_align>:
NK_LIB void*
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
 800cb20:	70fb      	strb	r3, [r7, #3]
    void *memory = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
    switch (type) {
 800cb26:	78fb      	ldrb	r3, [r7, #3]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d018      	beq.n	800cb5e <nk_buffer_align+0x4a>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00f      	beq.n	800cb52 <nk_buffer_align+0x3e>
            memory = NK_ALIGN_PTR(unaligned, align);
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	4413      	add	r3, r2
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	425b      	negs	r3, r3
 800cb40:	4013      	ands	r3, r2
 800cb42:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800cb50:	e01a      	b.n	800cb88 <nk_buffer_align+0x74>
            memory = unaligned;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	601a      	str	r2, [r3, #0]
        break;
 800cb5c:	e014      	b.n	800cb88 <nk_buffer_align+0x74>
    case NK_BUFFER_BACK:
        if (align) {
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00b      	beq.n	800cb7c <nk_buffer_align+0x68>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	425a      	negs	r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	461a      	mov	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800cb7a:	e004      	b.n	800cb86 <nk_buffer_align+0x72>
            memory = unaligned;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	601a      	str	r2, [r3, #0]
        break;
 800cb86:	bf00      	nop
    }
    return memory;
 800cb88:	697b      	ldr	r3, [r7, #20]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
	...

0800cb98 <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b08a      	sub	sp, #40	; 0x28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d105      	bne.n	800cbb6 <nk_buffer_realloc+0x1e>
 800cbaa:	4b3c      	ldr	r3, [pc, #240]	; (800cc9c <nk_buffer_realloc+0x104>)
 800cbac:	4a3c      	ldr	r2, [pc, #240]	; (800cca0 <nk_buffer_realloc+0x108>)
 800cbae:	2165      	movs	r1, #101	; 0x65
 800cbb0:	483c      	ldr	r0, [pc, #240]	; (800cca4 <nk_buffer_realloc+0x10c>)
 800cbb2:	f00f fe53 	bl	801c85c <__assert_func>
    NK_ASSERT(size);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d105      	bne.n	800cbc8 <nk_buffer_realloc+0x30>
 800cbbc:	4b3a      	ldr	r3, [pc, #232]	; (800cca8 <nk_buffer_realloc+0x110>)
 800cbbe:	4a38      	ldr	r2, [pc, #224]	; (800cca0 <nk_buffer_realloc+0x108>)
 800cbc0:	2166      	movs	r1, #102	; 0x66
 800cbc2:	4838      	ldr	r0, [pc, #224]	; (800cca4 <nk_buffer_realloc+0x10c>)
 800cbc4:	f00f fe4a 	bl	801c85c <__assert_func>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <nk_buffer_realloc+0x4c>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d007      	beq.n	800cbe4 <nk_buffer_realloc+0x4c>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <nk_buffer_realloc+0x4c>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	699b      	ldr	r3, [r3, #24]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <nk_buffer_realloc+0x50>
        return 0;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e054      	b.n	800cc92 <nk_buffer_realloc+0xfa>

    buffer_size = b->memory.size;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbec:	627b      	str	r3, [r7, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	6a11      	ldr	r1, [r2, #32]
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	6900      	ldr	r0, [r0, #16]
 800cbfc:	4798      	blx	r3
 800cbfe:	6238      	str	r0, [r7, #32]
    NK_ASSERT(temp);
 800cc00:	6a3b      	ldr	r3, [r7, #32]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d105      	bne.n	800cc12 <nk_buffer_realloc+0x7a>
 800cc06:	4b29      	ldr	r3, [pc, #164]	; (800ccac <nk_buffer_realloc+0x114>)
 800cc08:	4a25      	ldr	r2, [pc, #148]	; (800cca0 <nk_buffer_realloc+0x108>)
 800cc0a:	216c      	movs	r1, #108	; 0x6c
 800cc0c:	4825      	ldr	r0, [pc, #148]	; (800cca4 <nk_buffer_realloc+0x10c>)
 800cc0e:	f00f fe25 	bl	801c85c <__assert_func>
    if (!temp) return 0;
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <nk_buffer_realloc+0x84>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	e03a      	b.n	800cc92 <nk_buffer_realloc+0xfa>

    *size = capacity;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	601a      	str	r2, [r3, #0]
    if (temp != b->memory.ptr) {
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	6a3a      	ldr	r2, [r7, #32]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d00d      	beq.n	800cc48 <nk_buffer_realloc+0xb0>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc32:	4619      	mov	r1, r3
 800cc34:	6a38      	ldr	r0, [r7, #32]
 800cc36:	f00e f811 	bl	801ac5c <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	6a11      	ldr	r1, [r2, #32]
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	6910      	ldr	r0, [r2, #16]
 800cc46:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d104      	bne.n	800cc5c <nk_buffer_realloc+0xc4>
        /* no back buffer so just set correct size */
        b->size = capacity;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	639a      	str	r2, [r3, #56]	; 0x38
        return temp;
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	e01a      	b.n	800cc92 <nk_buffer_realloc+0xfa>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	61fb      	str	r3, [r7, #28]
        dst = nk_ptr_add(void, temp, capacity - back_size);
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	6a3a      	ldr	r2, [r7, #32]
 800cc6e:	4413      	add	r3, r2
 800cc70:	61bb      	str	r3, [r7, #24]
        src = nk_ptr_add(void, temp, b->size);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc76:	6a3a      	ldr	r2, [r7, #32]
 800cc78:	4413      	add	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]
        NK_MEMCPY(dst, src, back_size);
 800cc7c:	69fa      	ldr	r2, [r7, #28]
 800cc7e:	6979      	ldr	r1, [r7, #20]
 800cc80:	69b8      	ldr	r0, [r7, #24]
 800cc82:	f00d ffeb 	bl	801ac5c <nk_memcopy>
        b->size = capacity - back_size;
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	1ad2      	subs	r2, r2, r3
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return temp;
 800cc90:	6a3b      	ldr	r3, [r7, #32]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3728      	adds	r7, #40	; 0x28
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	0801ff48 	.word	0x0801ff48
 800cca0:	080212f4 	.word	0x080212f4
 800cca4:	0801ff4c 	.word	0x0801ff4c
 800cca8:	0801ff80 	.word	0x0801ff80
 800ccac:	0801ff88 	.word	0x0801ff88

0800ccb0 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08a      	sub	sp, #40	; 0x28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	607a      	str	r2, [r7, #4]
 800ccba:	603b      	str	r3, [r7, #0]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	72fb      	strb	r3, [r7, #11]
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <nk_buffer_alloc+0x22>
 800ccc6:	4b7a      	ldr	r3, [pc, #488]	; (800ceb0 <nk_buffer_alloc+0x200>)
 800ccc8:	4a7a      	ldr	r2, [pc, #488]	; (800ceb4 <nk_buffer_alloc+0x204>)
 800ccca:	218e      	movs	r1, #142	; 0x8e
 800cccc:	487a      	ldr	r0, [pc, #488]	; (800ceb8 <nk_buffer_alloc+0x208>)
 800ccce:	f00f fdc5 	bl	801c85c <__assert_func>
    NK_ASSERT(size);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d105      	bne.n	800cce4 <nk_buffer_alloc+0x34>
 800ccd8:	4b78      	ldr	r3, [pc, #480]	; (800cebc <nk_buffer_alloc+0x20c>)
 800ccda:	4a76      	ldr	r2, [pc, #472]	; (800ceb4 <nk_buffer_alloc+0x204>)
 800ccdc:	218f      	movs	r1, #143	; 0x8f
 800ccde:	4876      	ldr	r0, [pc, #472]	; (800ceb8 <nk_buffer_alloc+0x208>)
 800cce0:	f00f fdbc 	bl	801c85c <__assert_func>
    if (!b || !size) return 0;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <nk_buffer_alloc+0x40>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d101      	bne.n	800ccf4 <nk_buffer_alloc+0x44>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	e0d9      	b.n	800cea8 <nk_buffer_alloc+0x1f8>
    b->needed += size;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	441a      	add	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	631a      	str	r2, [r3, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 800cd00:	7afb      	ldrb	r3, [r7, #11]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d106      	bne.n	800cd14 <nk_buffer_alloc+0x64>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6a1a      	ldr	r2, [r3, #32]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0e:	4413      	add	r3, r2
 800cd10:	623b      	str	r3, [r7, #32]
 800cd12:	e007      	b.n	800cd24 <nk_buffer_alloc+0x74>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6a1a      	ldr	r2, [r3, #32]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	1acb      	subs	r3, r1, r3
 800cd20:	4413      	add	r3, r2
 800cd22:	623b      	str	r3, [r7, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	f107 0214 	add.w	r2, r7, #20
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6a38      	ldr	r0, [r7, #32]
 800cd2e:	f7ff fef1 	bl	800cb14 <nk_buffer_align>
 800cd32:	61f8      	str	r0, [r7, #28]

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
 800cd34:	7afb      	ldrb	r3, [r7, #11]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10e      	bne.n	800cd58 <nk_buffer_alloc+0xa8>
        full = ((b->allocated + size + alignment) > b->size);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	441a      	add	r2, r3
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	441a      	add	r2, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	bf8c      	ite	hi
 800cd4e:	2301      	movhi	r3, #1
 800cd50:	2300      	movls	r3, #0
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
 800cd56:	e012      	b.n	800cd7e <nk_buffer_alloc+0xce>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd5c:	6979      	ldr	r1, [r7, #20]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4419      	add	r1, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	428b      	cmp	r3, r1
 800cd68:	bf28      	it	cs
 800cd6a:	460b      	movcs	r3, r1
 800cd6c:	1ad2      	subs	r2, r2, r3
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd72:	429a      	cmp	r2, r3
 800cd74:	bf94      	ite	ls
 800cd76:	2301      	movls	r3, #1
 800cd78:	2300      	movhi	r3, #0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24

    if (full) {
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d071      	beq.n	800ce68 <nk_buffer_alloc+0x1b8>
        nk_size capacity;
        if (b->type != NK_BUFFER_DYNAMIC)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	7f1b      	ldrb	r3, [r3, #28]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d001      	beq.n	800cd90 <nk_buffer_alloc+0xe0>
            return 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	e08b      	b.n	800cea8 <nk_buffer_alloc+0x1f8>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d003      	beq.n	800cda0 <nk_buffer_alloc+0xf0>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d105      	bne.n	800cdac <nk_buffer_alloc+0xfc>
 800cda0:	4b47      	ldr	r3, [pc, #284]	; (800cec0 <nk_buffer_alloc+0x210>)
 800cda2:	4a44      	ldr	r2, [pc, #272]	; (800ceb4 <nk_buffer_alloc+0x204>)
 800cda4:	21a2      	movs	r1, #162	; 0xa2
 800cda6:	4844      	ldr	r0, [pc, #272]	; (800ceb8 <nk_buffer_alloc+0x208>)
 800cda8:	f00f fd58 	bl	801c85c <__assert_func>
        if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	7f1b      	ldrb	r3, [r3, #28]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d107      	bne.n	800cdc4 <nk_buffer_alloc+0x114>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <nk_buffer_alloc+0x114>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <nk_buffer_alloc+0x118>
            return 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e06f      	b.n	800cea8 <nk_buffer_alloc+0x1f8>

        /* buffer is full so allocate bigger buffer if dynamic */
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdcc:	ee07 3a90 	vmov	s15, r3
 800cdd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cdda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde2:	ee17 3a90 	vmov	r3, s15
 800cde6:	61bb      	str	r3, [r7, #24]
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4413      	add	r3, r2
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f005 fbef 	bl	80125d4 <nk_round_up_pow2>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d208      	bcs.n	800ce10 <nk_buffer_alloc+0x160>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f005 fbe4 	bl	80125d4 <nk_round_up_pow2>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	e000      	b.n	800ce12 <nk_buffer_alloc+0x162>
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	61bb      	str	r3, [r7, #24]
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3324      	adds	r3, #36	; 0x24
 800ce18:	461a      	mov	r2, r3
 800ce1a:	69b9      	ldr	r1, [r7, #24]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7ff febb 	bl	800cb98 <nk_buffer_realloc>
 800ce22:	4602      	mov	r2, r0
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	621a      	str	r2, [r3, #32]
        if (!b->memory.ptr) return 0;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d101      	bne.n	800ce34 <nk_buffer_alloc+0x184>
 800ce30:	2300      	movs	r3, #0
 800ce32:	e039      	b.n	800cea8 <nk_buffer_alloc+0x1f8>

        /* align newly allocated pointer */
        if (type == NK_BUFFER_FRONT)
 800ce34:	7afb      	ldrb	r3, [r7, #11]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <nk_buffer_alloc+0x198>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	6a1a      	ldr	r2, [r3, #32]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce42:	4413      	add	r3, r2
 800ce44:	623b      	str	r3, [r7, #32]
 800ce46:	e007      	b.n	800ce58 <nk_buffer_alloc+0x1a8>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6a1a      	ldr	r2, [r3, #32]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	1acb      	subs	r3, r1, r3
 800ce54:	4413      	add	r3, r2
 800ce56:	623b      	str	r3, [r7, #32]
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800ce58:	7afb      	ldrb	r3, [r7, #11]
 800ce5a:	f107 0214 	add.w	r2, r7, #20
 800ce5e:	6839      	ldr	r1, [r7, #0]
 800ce60:	6a38      	ldr	r0, [r7, #32]
 800ce62:	f7ff fe57 	bl	800cb14 <nk_buffer_align>
 800ce66:	61f8      	str	r0, [r7, #28]
    }
    if (type == NK_BUFFER_FRONT)
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d108      	bne.n	800ce80 <nk_buffer_alloc+0x1d0>
        b->allocated += size + alignment;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce72:	6979      	ldr	r1, [r7, #20]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	440b      	add	r3, r1
 800ce78:	441a      	add	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce7e:	e007      	b.n	800ce90 <nk_buffer_alloc+0x1e0>
    else b->size -= (size + alignment);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce84:	6979      	ldr	r1, [r7, #20]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	440b      	add	r3, r1
 800ce8a:	1ad2      	subs	r2, r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	639a      	str	r2, [r3, #56]	; 0x38
    b->needed += alignment;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	441a      	add	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	631a      	str	r2, [r3, #48]	; 0x30
    b->calls++;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	635a      	str	r2, [r3, #52]	; 0x34
    return memory;
 800cea6:	69fb      	ldr	r3, [r7, #28]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3728      	adds	r7, #40	; 0x28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	0801ff48 	.word	0x0801ff48
 800ceb4:	08021308 	.word	0x08021308
 800ceb8:	0801ff4c 	.word	0x0801ff4c
 800cebc:	0801ff80 	.word	0x0801ff80
 800cec0:	0801ff90 	.word	0x0801ff90

0800cec4 <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	460b      	mov	r3, r1
 800cece:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(buffer);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d105      	bne.n	800cee2 <nk_buffer_reset+0x1e>
 800ced6:	4b2c      	ldr	r3, [pc, #176]	; (800cf88 <nk_buffer_reset+0xc4>)
 800ced8:	4a2c      	ldr	r2, [pc, #176]	; (800cf8c <nk_buffer_reset+0xc8>)
 800ceda:	21ce      	movs	r1, #206	; 0xce
 800cedc:	482c      	ldr	r0, [pc, #176]	; (800cf90 <nk_buffer_reset+0xcc>)
 800cede:	f00f fcbd 	bl	801c85c <__assert_func>
    if (!buffer) return;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d04b      	beq.n	800cf80 <nk_buffer_reset+0xbc>
    if (type == NK_BUFFER_BACK) {
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d124      	bne.n	800cf38 <nk_buffer_reset+0x74>
        /* reset back buffer either back to marker or empty */
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef2:	78fb      	ldrb	r3, [r7, #3]
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	440b      	add	r3, r1
 800cefa:	6859      	ldr	r1, [r3, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf00:	1acb      	subs	r3, r1, r3
 800cf02:	441a      	add	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800cf08:	78fa      	ldrb	r2, [r7, #3]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d007      	beq.n	800cf24 <nk_buffer_reset+0x60>
            buffer->size = buffer->marker[type].offset;
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	4413      	add	r3, r2
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	639a      	str	r2, [r3, #56]	; 0x38
 800cf22:	e003      	b.n	800cf2c <nk_buffer_reset+0x68>
        else buffer->size = buffer->memory.size;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 800cf2c:	78fa      	ldrb	r2, [r7, #3]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2100      	movs	r1, #0
 800cf32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800cf36:	e024      	b.n	800cf82 <nk_buffer_reset+0xbe>
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	440b      	add	r3, r1
 800cf44:	6859      	ldr	r1, [r3, #4]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4a:	1acb      	subs	r3, r1, r3
 800cf4c:	441a      	add	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800cf52:	78fa      	ldrb	r2, [r7, #3]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d007      	beq.n	800cf6e <nk_buffer_reset+0xaa>
            buffer->allocated = buffer->marker[type].offset;
 800cf5e:	78fb      	ldrb	r3, [r7, #3]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	4413      	add	r3, r2
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	62da      	str	r2, [r3, #44]	; 0x2c
 800cf6c:	e002      	b.n	800cf74 <nk_buffer_reset+0xb0>
        else buffer->allocated = 0;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	62da      	str	r2, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 800cf74:	78fa      	ldrb	r2, [r7, #3]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2100      	movs	r1, #0
 800cf7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800cf7e:	e000      	b.n	800cf82 <nk_buffer_reset+0xbe>
    if (!buffer) return;
 800cf80:	bf00      	nop
    }
}
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	0801ffb0 	.word	0x0801ffb0
 800cf8c:	08021318 	.word	0x08021318
 800cf90:	0801ff4c 	.word	0x0801ff4c

0800cf94 <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d105      	bne.n	800cfae <nk_buffer_clear+0x1a>
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <nk_buffer_clear+0x44>)
 800cfa4:	4a0d      	ldr	r2, [pc, #52]	; (800cfdc <nk_buffer_clear+0x48>)
 800cfa6:	21e3      	movs	r1, #227	; 0xe3
 800cfa8:	480d      	ldr	r0, [pc, #52]	; (800cfe0 <nk_buffer_clear+0x4c>)
 800cfaa:	f00f fc57 	bl	801c85c <__assert_func>
    if (!b) return;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00d      	beq.n	800cfd0 <nk_buffer_clear+0x3c>
    b->allocated = 0;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	62da      	str	r2, [r3, #44]	; 0x2c
    b->size = b->memory.size;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	639a      	str	r2, [r3, #56]	; 0x38
    b->calls = 0;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	635a      	str	r2, [r3, #52]	; 0x34
    b->needed = 0;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	631a      	str	r2, [r3, #48]	; 0x30
 800cfce:	e000      	b.n	800cfd2 <nk_buffer_clear+0x3e>
    if (!b) return;
 800cfd0:	bf00      	nop
}
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	0801ff48 	.word	0x0801ff48
 800cfdc:	08021328 	.word	0x08021328
 800cfe0:	0801ff4c 	.word	0x0801ff4c

0800cfe4 <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b0a0      	sub	sp, #128	; 0x80
 800cfe8:	af02      	add	r7, sp, #8
 800cfea:	6278      	str	r0, [r7, #36]	; 0x24
 800cfec:	eeb0 6a40 	vmov.f32	s12, s0
 800cff0:	eef0 6a60 	vmov.f32	s13, s1
 800cff4:	eeb0 7a41 	vmov.f32	s14, s2
 800cff8:	eef0 7a61 	vmov.f32	s15, s3
 800cffc:	60fa      	str	r2, [r7, #12]
 800cffe:	60bb      	str	r3, [r7, #8]
 800d000:	ed87 2a01 	vstr	s4, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d00a:	ed87 6a04 	vstr	s12, [r7, #16]
 800d00e:	edc7 6a05 	vstr	s13, [r7, #20]
 800d012:	ed87 7a06 	vstr	s14, [r7, #24]
 800d016:	edc7 7a07 	vstr	s15, [r7, #28]
    switch (type) {
 800d01a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d01e:	3b01      	subs	r3, #1
 800d020:	2b0b      	cmp	r3, #11
 800d022:	f200 815e 	bhi.w	800d2e2 <nk_draw_symbol+0x2fe>
 800d026:	a201      	add	r2, pc, #4	; (adr r2, 800d02c <nk_draw_symbol+0x48>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d05d 	.word	0x0800d05d
 800d030:	0800d05d 	.word	0x0800d05d
 800d034:	0800d0e5 	.word	0x0800d0e5
 800d038:	0800d0e5 	.word	0x0800d0e5
 800d03c:	0800d0e5 	.word	0x0800d0e5
 800d040:	0800d0e5 	.word	0x0800d0e5
 800d044:	0800d247 	.word	0x0800d247
 800d048:	0800d247 	.word	0x0800d247
 800d04c:	0800d247 	.word	0x0800d247
 800d050:	0800d247 	.word	0x0800d247
 800d054:	0800d05d 	.word	0x0800d05d
 800d058:	0800d05d 	.word	0x0800d05d
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 800d05c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d060:	2b01      	cmp	r3, #1
 800d062:	d00d      	beq.n	800d080 <nk_draw_symbol+0x9c>
 800d064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d007      	beq.n	800d07c <nk_draw_symbol+0x98>
 800d06c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d070:	2b0b      	cmp	r3, #11
 800d072:	d101      	bne.n	800d078 <nk_draw_symbol+0x94>
 800d074:	4b9e      	ldr	r3, [pc, #632]	; (800d2f0 <nk_draw_symbol+0x30c>)
 800d076:	e004      	b.n	800d082 <nk_draw_symbol+0x9e>
 800d078:	4b9e      	ldr	r3, [pc, #632]	; (800d2f4 <nk_draw_symbol+0x310>)
 800d07a:	e002      	b.n	800d082 <nk_draw_symbol+0x9e>
 800d07c:	4b9e      	ldr	r3, [pc, #632]	; (800d2f8 <nk_draw_symbol+0x314>)
 800d07e:	e000      	b.n	800d082 <nk_draw_symbol+0x9e>
 800d080:	4b9e      	ldr	r3, [pc, #632]	; (800d2fc <nk_draw_symbol+0x318>)
 800d082:	673b      	str	r3, [r7, #112]	; 0x70
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 800d084:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800d300 <nk_draw_symbol+0x31c>
 800d088:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800d300 <nk_draw_symbol+0x31c>
 800d08c:	f005 fb7e 	bl	801278c <nk_vec2>
 800d090:	eeb0 7a40 	vmov.f32	s14, s0
 800d094:	eef0 7a60 	vmov.f32	s15, s1
 800d098:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800d09c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        text.background = background;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	64bb      	str	r3, [r7, #72]	; 0x48
        text.text = foreground;
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	64fb      	str	r3, [r7, #76]	; 0x4c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 800d0a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d0ac:	ed97 6a04 	vldr	s12, [r7, #16]
 800d0b0:	edd7 6a05 	vldr	s13, [r7, #20]
 800d0b4:	ed97 7a06 	vldr	s14, [r7, #24]
 800d0b8:	edd7 7a07 	vldr	s15, [r7, #28]
 800d0bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	2312      	movs	r3, #18
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d0cc:	eeb0 0a46 	vmov.f32	s0, s12
 800d0d0:	eef0 0a66 	vmov.f32	s1, s13
 800d0d4:	eeb0 1a47 	vmov.f32	s2, s14
 800d0d8:	eef0 1a67 	vmov.f32	s3, s15
 800d0dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0de:	f00c fd53 	bl	8019b88 <nk_widget_text>
    } break;
 800d0e2:	e101      	b.n	800d2e8 <nk_draw_symbol+0x304>
    case NK_SYMBOL_CIRCLE_SOLID:
    case NK_SYMBOL_CIRCLE_OUTLINE:
    case NK_SYMBOL_RECT_SOLID:
    case NK_SYMBOL_RECT_OUTLINE: {
        /* simple empty/filled shapes */
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 800d0e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0e8:	2b05      	cmp	r3, #5
 800d0ea:	d003      	beq.n	800d0f4 <nk_draw_symbol+0x110>
 800d0ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0f0:	2b06      	cmp	r3, #6
 800d0f2:	d155      	bne.n	800d1a0 <nk_draw_symbol+0x1bc>
            nk_fill_rect(out, content,  0, foreground);
 800d0f4:	ed97 6a04 	vldr	s12, [r7, #16]
 800d0f8:	edd7 6a05 	vldr	s13, [r7, #20]
 800d0fc:	ed97 7a06 	vldr	s14, [r7, #24]
 800d100:	edd7 7a07 	vldr	s15, [r7, #28]
 800d104:	68b9      	ldr	r1, [r7, #8]
 800d106:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800d300 <nk_draw_symbol+0x31c>
 800d10a:	eeb0 0a46 	vmov.f32	s0, s12
 800d10e:	eef0 0a66 	vmov.f32	s1, s13
 800d112:	eeb0 1a47 	vmov.f32	s2, s14
 800d116:	eef0 1a67 	vmov.f32	s3, s15
 800d11a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d11c:	f002 fd28 	bl	800fb70 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800d120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d124:	2b06      	cmp	r3, #6
 800d126:	f040 808d 	bne.w	800d244 <nk_draw_symbol+0x260>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800d12a:	ed97 6a04 	vldr	s12, [r7, #16]
 800d12e:	edd7 6a05 	vldr	s13, [r7, #20]
 800d132:	ed97 7a06 	vldr	s14, [r7, #24]
 800d136:	edd7 7a07 	vldr	s15, [r7, #28]
 800d13a:	ed97 2a01 	vldr	s4, [r7, #4]
 800d13e:	eeb0 0a46 	vmov.f32	s0, s12
 800d142:	eef0 0a66 	vmov.f32	s1, s13
 800d146:	eeb0 1a47 	vmov.f32	s2, s14
 800d14a:	eef0 1a67 	vmov.f32	s3, s15
 800d14e:	f005 fa9d 	bl	801268c <nk_shrink_rect>
 800d152:	eeb0 6a40 	vmov.f32	s12, s0
 800d156:	eef0 6a60 	vmov.f32	s13, s1
 800d15a:	eeb0 7a41 	vmov.f32	s14, s2
 800d15e:	eef0 7a61 	vmov.f32	s15, s3
 800d162:	ed87 6a14 	vstr	s12, [r7, #80]	; 0x50
 800d166:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 800d16a:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 800d16e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800d172:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800d176:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800d17a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d17e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d182:	68f9      	ldr	r1, [r7, #12]
 800d184:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800d300 <nk_draw_symbol+0x31c>
 800d188:	eeb0 0a46 	vmov.f32	s0, s12
 800d18c:	eef0 0a66 	vmov.f32	s1, s13
 800d190:	eeb0 1a47 	vmov.f32	s2, s14
 800d194:	eef0 1a67 	vmov.f32	s3, s15
 800d198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d19a:	f002 fce9 	bl	800fb70 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800d19e:	e051      	b.n	800d244 <nk_draw_symbol+0x260>
        } else {
            nk_fill_circle(out, content, foreground);
 800d1a0:	ed97 6a04 	vldr	s12, [r7, #16]
 800d1a4:	edd7 6a05 	vldr	s13, [r7, #20]
 800d1a8:	ed97 7a06 	vldr	s14, [r7, #24]
 800d1ac:	edd7 7a07 	vldr	s15, [r7, #28]
 800d1b0:	68b9      	ldr	r1, [r7, #8]
 800d1b2:	eeb0 0a46 	vmov.f32	s0, s12
 800d1b6:	eef0 0a66 	vmov.f32	s1, s13
 800d1ba:	eeb0 1a47 	vmov.f32	s2, s14
 800d1be:	eef0 1a67 	vmov.f32	s3, s15
 800d1c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1c4:	f002 fdca 	bl	800fd5c <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 800d1c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	f040 808a 	bne.w	800d2e6 <nk_draw_symbol+0x302>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 800d1d2:	ed97 6a04 	vldr	s12, [r7, #16]
 800d1d6:	edd7 6a05 	vldr	s13, [r7, #20]
 800d1da:	ed97 7a06 	vldr	s14, [r7, #24]
 800d1de:	edd7 7a07 	vldr	s15, [r7, #28]
 800d1e2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800d1e6:	eeb0 0a46 	vmov.f32	s0, s12
 800d1ea:	eef0 0a66 	vmov.f32	s1, s13
 800d1ee:	eeb0 1a47 	vmov.f32	s2, s14
 800d1f2:	eef0 1a67 	vmov.f32	s3, s15
 800d1f6:	f005 fa49 	bl	801268c <nk_shrink_rect>
 800d1fa:	eeb0 6a40 	vmov.f32	s12, s0
 800d1fe:	eef0 6a60 	vmov.f32	s13, s1
 800d202:	eeb0 7a41 	vmov.f32	s14, s2
 800d206:	eef0 7a61 	vmov.f32	s15, s3
 800d20a:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 800d20e:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 800d212:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 800d216:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800d21a:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800d21e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800d222:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800d226:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d22a:	68f9      	ldr	r1, [r7, #12]
 800d22c:	eeb0 0a46 	vmov.f32	s0, s12
 800d230:	eef0 0a66 	vmov.f32	s1, s13
 800d234:	eeb0 1a47 	vmov.f32	s2, s14
 800d238:	eef0 1a67 	vmov.f32	s3, s15
 800d23c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d23e:	f002 fd8d 	bl	800fd5c <nk_fill_circle>
        }
    } break;
 800d242:	e050      	b.n	800d2e6 <nk_draw_symbol+0x302>
 800d244:	e04f      	b.n	800d2e6 <nk_draw_symbol+0x302>
    case NK_SYMBOL_TRIANGLE_DOWN:
    case NK_SYMBOL_TRIANGLE_LEFT:
    case NK_SYMBOL_TRIANGLE_RIGHT: {
        enum nk_heading heading;
        struct nk_vec2 points[3];
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 800d246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d24a:	2b0a      	cmp	r3, #10
 800d24c:	d00d      	beq.n	800d26a <nk_draw_symbol+0x286>
 800d24e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d252:	2b09      	cmp	r3, #9
 800d254:	d007      	beq.n	800d266 <nk_draw_symbol+0x282>
 800d256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d25a:	2b07      	cmp	r3, #7
 800d25c:	d101      	bne.n	800d262 <nk_draw_symbol+0x27e>
 800d25e:	2300      	movs	r3, #0
 800d260:	e004      	b.n	800d26c <nk_draw_symbol+0x288>
 800d262:	2302      	movs	r3, #2
 800d264:	e002      	b.n	800d26c <nk_draw_symbol+0x288>
 800d266:	2303      	movs	r3, #3
 800d268:	e000      	b.n	800d26c <nk_draw_symbol+0x288>
 800d26a:	2301      	movs	r3, #1
 800d26c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
            (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;
        nk_triangle_from_direction(points, content, 0, 0, heading);
 800d270:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800d274:	ed97 6a04 	vldr	s12, [r7, #16]
 800d278:	edd7 6a05 	vldr	s13, [r7, #20]
 800d27c:	ed97 7a06 	vldr	s14, [r7, #24]
 800d280:	edd7 7a07 	vldr	s15, [r7, #28]
 800d284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d288:	4611      	mov	r1, r2
 800d28a:	eddf 2a1d 	vldr	s5, [pc, #116]	; 800d300 <nk_draw_symbol+0x31c>
 800d28e:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800d300 <nk_draw_symbol+0x31c>
 800d292:	eeb0 0a46 	vmov.f32	s0, s12
 800d296:	eef0 0a66 	vmov.f32	s1, s13
 800d29a:	eeb0 1a47 	vmov.f32	s2, s14
 800d29e:	eef0 1a67 	vmov.f32	s3, s15
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f005 fb44 	bl	8012930 <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 800d2a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d2b0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800d2b4:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800d2b8:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800d2bc:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	eef0 2a45 	vmov.f32	s5, s10
 800d2c6:	eeb0 2a65 	vmov.f32	s4, s11
 800d2ca:	eef0 1a46 	vmov.f32	s3, s12
 800d2ce:	eeb0 1a66 	vmov.f32	s2, s13
 800d2d2:	eef0 0a47 	vmov.f32	s1, s14
 800d2d6:	eeb0 0a67 	vmov.f32	s0, s15
 800d2da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2dc:	f002 fe28 	bl	800ff30 <nk_fill_triangle>
            points[2].x, points[2].y, foreground);
    } break;
 800d2e0:	e002      	b.n	800d2e8 <nk_draw_symbol+0x304>
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
 800d2e2:	bf00      	nop
 800d2e4:	e000      	b.n	800d2e8 <nk_draw_symbol+0x304>
    } break;
 800d2e6:	bf00      	nop
    }
}
 800d2e8:	bf00      	nop
 800d2ea:	3778      	adds	r7, #120	; 0x78
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	0801ffcc 	.word	0x0801ffcc
 800d2f4:	0801ffd0 	.word	0x0801ffd0
 800d2f8:	0801ffd4 	.word	0x0801ffd4
 800d2fc:	0801ffd8 	.word	0x0801ffd8
 800d300:	00000000 	.word	0x00000000

0800d304 <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	; 0x28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	61f8      	str	r0, [r7, #28]
 800d30c:	eeb0 6a40 	vmov.f32	s12, s0
 800d310:	eef0 6a60 	vmov.f32	s13, s1
 800d314:	eeb0 7a41 	vmov.f32	s14, s2
 800d318:	eef0 7a61 	vmov.f32	s15, s3
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4613      	mov	r3, r2
 800d320:	ed87 6a03 	vstr	s12, [r7, #12]
 800d324:	edc7 6a04 	vstr	s13, [r7, #16]
 800d328:	ed87 7a05 	vstr	s14, [r7, #20]
 800d32c:	edc7 7a06 	vstr	s15, [r7, #24]
 800d330:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	627b      	str	r3, [r7, #36]	; 0x24
    nk_widget_state_reset(state);
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0302 	and.w	r3, r3, #2
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d003      	beq.n	800d34a <nk_button_behavior+0x46>
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	2206      	movs	r2, #6
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	e002      	b.n	800d350 <nk_button_behavior+0x4c>
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	2204      	movs	r2, #4
 800d34e:	601a      	str	r2, [r3, #0]
    if (!i) return 0;
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <nk_button_behavior+0x56>
 800d356:	2300      	movs	r3, #0
 800d358:	e088      	b.n	800d46c <nk_button_behavior+0x168>
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 800d35a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d35e:	edd7 6a04 	vldr	s13, [r7, #16]
 800d362:	ed97 7a05 	vldr	s14, [r7, #20]
 800d366:	edd7 7a06 	vldr	s15, [r7, #24]
 800d36a:	eeb0 0a46 	vmov.f32	s0, s12
 800d36e:	eef0 0a66 	vmov.f32	s1, s13
 800d372:	eeb0 1a47 	vmov.f32	s2, s14
 800d376:	eef0 1a67 	vmov.f32	s3, s15
 800d37a:	68b8      	ldr	r0, [r7, #8]
 800d37c:	f004 f839 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d032      	beq.n	800d3ec <nk_button_behavior+0xe8>
        *state = NK_WIDGET_STATE_HOVERED;
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	2212      	movs	r2, #18
 800d38a:	601a      	str	r2, [r3, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 800d38c:	2100      	movs	r1, #0
 800d38e:	68b8      	ldr	r0, [r7, #8]
 800d390:	f004 f8d3 	bl	801153a <nk_input_is_mouse_down>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d002      	beq.n	800d3a0 <nk_button_behavior+0x9c>
            *state = NK_WIDGET_STATE_ACTIVE;
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	2222      	movs	r2, #34	; 0x22
 800d39e:	601a      	str	r2, [r3, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 800d3a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3a4:	edd7 6a04 	vldr	s13, [r7, #16]
 800d3a8:	ed97 7a05 	vldr	s14, [r7, #20]
 800d3ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800d3b0:	eeb0 0a46 	vmov.f32	s0, s12
 800d3b4:	eef0 0a66 	vmov.f32	s1, s13
 800d3b8:	eeb0 1a47 	vmov.f32	s2, s14
 800d3bc:	eef0 1a67 	vmov.f32	s3, s15
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	68b8      	ldr	r0, [r7, #8]
 800d3c4:	f003 ff53 	bl	801126e <nk_input_has_mouse_click_in_button_rect>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00e      	beq.n	800d3ec <nk_button_behavior+0xe8>
            ret = (behavior != NK_BUTTON_DEFAULT) ?
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 800d3ce:	79fb      	ldrb	r3, [r7, #7]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <nk_button_behavior+0xdc>
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	68b8      	ldr	r0, [r7, #8]
 800d3d8:	f004 f8af 	bl	801153a <nk_input_is_mouse_down>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	e004      	b.n	800d3ea <nk_button_behavior+0xe6>
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
                nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	68b8      	ldr	r0, [r7, #8]
 800d3e4:	f004 f8c1 	bl	801156a <nk_input_is_mouse_pressed>
 800d3e8:	4603      	mov	r3, r0
            ret = (behavior != NK_BUTTON_DEFAULT) ?
 800d3ea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 0310 	and.w	r3, r3, #16
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01c      	beq.n	800d432 <nk_button_behavior+0x12e>
 800d3f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3fc:	edd7 6a04 	vldr	s13, [r7, #16]
 800d400:	ed97 7a05 	vldr	s14, [r7, #20]
 800d404:	edd7 7a06 	vldr	s15, [r7, #24]
 800d408:	eeb0 0a46 	vmov.f32	s0, s12
 800d40c:	eef0 0a66 	vmov.f32	s1, s13
 800d410:	eeb0 1a47 	vmov.f32	s2, s14
 800d414:	eef0 1a67 	vmov.f32	s3, s15
 800d418:	68b8      	ldr	r0, [r7, #8]
 800d41a:	f004 f83c 	bl	8011496 <nk_input_is_mouse_prev_hovering_rect>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d106      	bne.n	800d432 <nk_button_behavior+0x12e>
        *state |= NK_WIDGET_STATE_ENTERED;
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f043 0208 	orr.w	r2, r3, #8
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	e01b      	b.n	800d46a <nk_button_behavior+0x166>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800d432:	ed97 6a03 	vldr	s12, [r7, #12]
 800d436:	edd7 6a04 	vldr	s13, [r7, #16]
 800d43a:	ed97 7a05 	vldr	s14, [r7, #20]
 800d43e:	edd7 7a06 	vldr	s15, [r7, #24]
 800d442:	eeb0 0a46 	vmov.f32	s0, s12
 800d446:	eef0 0a66 	vmov.f32	s1, s13
 800d44a:	eeb0 1a47 	vmov.f32	s2, s14
 800d44e:	eef0 1a67 	vmov.f32	s3, s15
 800d452:	68b8      	ldr	r0, [r7, #8]
 800d454:	f004 f81f 	bl	8011496 <nk_input_is_mouse_prev_hovering_rect>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d005      	beq.n	800d46a <nk_button_behavior+0x166>
        *state |= NK_WIDGET_STATE_LEFT;
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	601a      	str	r2, [r3, #0]
    return ret;
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3728      	adds	r7, #40	; 0x28
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
 800d480:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f003 0310 	and.w	r3, r3, #16
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <nk_draw_button+0x20>
        background = &style->hover;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	331c      	adds	r3, #28
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	e00a      	b.n	800d4aa <nk_draw_button+0x36>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <nk_draw_button+0x32>
        background = &style->active;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	3338      	adds	r3, #56	; 0x38
 800d4a2:	617b      	str	r3, [r7, #20]
 800d4a4:	e001      	b.n	800d4aa <nk_draw_button+0x36>
    else background = &style->normal;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	617b      	str	r3, [r7, #20]

    switch(background->type) {
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d01e      	beq.n	800d4f0 <nk_draw_button+0x7c>
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	dc71      	bgt.n	800d59a <nk_draw_button+0x126>
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d033      	beq.n	800d522 <nk_draw_button+0xae>
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d16d      	bne.n	800d59a <nk_draw_button+0x126>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	1d19      	adds	r1, r3, #4
 800d4c2:	4a38      	ldr	r2, [pc, #224]	; (800d5a4 <nk_draw_button+0x130>)
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	ed93 6a00 	vldr	s12, [r3]
 800d4ca:	edd3 6a01 	vldr	s13, [r3, #4]
 800d4ce:	ed93 7a02 	vldr	s14, [r3, #8]
 800d4d2:	edd3 7a03 	vldr	s15, [r3, #12]
 800d4d6:	6812      	ldr	r2, [r2, #0]
 800d4d8:	eeb0 0a46 	vmov.f32	s0, s12
 800d4dc:	eef0 0a66 	vmov.f32	s1, s13
 800d4e0:	eeb0 1a47 	vmov.f32	s2, s14
 800d4e4:	eef0 1a67 	vmov.f32	s3, s15
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f002 fe9b 	bl	8010224 <nk_draw_image>
            break;
 800d4ee:	e054      	b.n	800d59a <nk_draw_button+0x126>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	1d19      	adds	r1, r3, #4
 800d4f4:	4a2b      	ldr	r2, [pc, #172]	; (800d5a4 <nk_draw_button+0x130>)
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	ed93 6a00 	vldr	s12, [r3]
 800d4fc:	edd3 6a01 	vldr	s13, [r3, #4]
 800d500:	ed93 7a02 	vldr	s14, [r3, #8]
 800d504:	edd3 7a03 	vldr	s15, [r3, #12]
 800d508:	6812      	ldr	r2, [r2, #0]
 800d50a:	eeb0 0a46 	vmov.f32	s0, s12
 800d50e:	eef0 0a66 	vmov.f32	s1, s13
 800d512:	eeb0 1a47 	vmov.f32	s2, s14
 800d516:	eef0 1a67 	vmov.f32	s3, s15
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f002 ff74 	bl	8010408 <nk_draw_nine_slice>
            break;
 800d520:	e03b      	b.n	800d59a <nk_draw_button+0x126>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	ed93 6a00 	vldr	s12, [r3]
 800d530:	edd3 6a01 	vldr	s13, [r3, #4]
 800d534:	ed93 7a02 	vldr	s14, [r3, #8]
 800d538:	edd3 7a03 	vldr	s15, [r3, #12]
 800d53c:	6851      	ldr	r1, [r2, #4]
 800d53e:	eeb0 2a65 	vmov.f32	s4, s11
 800d542:	eeb0 0a46 	vmov.f32	s0, s12
 800d546:	eef0 0a66 	vmov.f32	s1, s13
 800d54a:	eeb0 1a47 	vmov.f32	s2, s14
 800d54e:	eef0 1a67 	vmov.f32	s3, s15
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f002 fb0c 	bl	800fb70 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	ed93 6a00 	vldr	s12, [r3]
 800d56c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d570:	ed93 7a02 	vldr	s14, [r3, #8]
 800d574:	edd3 7a03 	vldr	s15, [r3, #12]
 800d578:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800d57a:	eef0 2a45 	vmov.f32	s5, s10
 800d57e:	eeb0 2a65 	vmov.f32	s4, s11
 800d582:	eeb0 0a46 	vmov.f32	s0, s12
 800d586:	eef0 0a66 	vmov.f32	s1, s13
 800d58a:	eeb0 1a47 	vmov.f32	s2, s14
 800d58e:	eef0 1a67 	vmov.f32	s3, s15
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f002 f9e4 	bl	800f960 <nk_stroke_rect>
            break;
 800d598:	bf00      	nop
    }
    return background;
 800d59a:	697b      	ldr	r3, [r7, #20]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	08021338 	.word	0x08021338

0800d5a8 <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08c      	sub	sp, #48	; 0x30
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	61f8      	str	r0, [r7, #28]
 800d5b0:	61b9      	str	r1, [r7, #24]
 800d5b2:	eeb0 6a40 	vmov.f32	s12, s0
 800d5b6:	eef0 6a60 	vmov.f32	s13, s1
 800d5ba:	eeb0 7a41 	vmov.f32	s14, s2
 800d5be:	eef0 7a61 	vmov.f32	s15, s3
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	ed87 6a02 	vstr	s12, [r7, #8]
 800d5ca:	edc7 6a03 	vstr	s13, [r7, #12]
 800d5ce:	ed87 7a04 	vstr	s14, [r7, #16]
 800d5d2:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect bounds;
    NK_ASSERT(style);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d105      	bne.n	800d5e8 <nk_do_button+0x40>
 800d5dc:	4b5d      	ldr	r3, [pc, #372]	; (800d754 <nk_do_button+0x1ac>)
 800d5de:	4a5e      	ldr	r2, [pc, #376]	; (800d758 <nk_do_button+0x1b0>)
 800d5e0:	2179      	movs	r1, #121	; 0x79
 800d5e2:	485e      	ldr	r0, [pc, #376]	; (800d75c <nk_do_button+0x1b4>)
 800d5e4:	f00f f93a 	bl	801c85c <__assert_func>
    NK_ASSERT(state);
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d105      	bne.n	800d5fa <nk_do_button+0x52>
 800d5ee:	4b5c      	ldr	r3, [pc, #368]	; (800d760 <nk_do_button+0x1b8>)
 800d5f0:	4a59      	ldr	r2, [pc, #356]	; (800d758 <nk_do_button+0x1b0>)
 800d5f2:	217a      	movs	r1, #122	; 0x7a
 800d5f4:	4859      	ldr	r0, [pc, #356]	; (800d75c <nk_do_button+0x1b4>)
 800d5f6:	f00f f931 	bl	801c85c <__assert_func>
    NK_ASSERT(out);
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d105      	bne.n	800d60c <nk_do_button+0x64>
 800d600:	4b58      	ldr	r3, [pc, #352]	; (800d764 <nk_do_button+0x1bc>)
 800d602:	4a55      	ldr	r2, [pc, #340]	; (800d758 <nk_do_button+0x1b0>)
 800d604:	217b      	movs	r1, #123	; 0x7b
 800d606:	4855      	ldr	r0, [pc, #340]	; (800d75c <nk_do_button+0x1b4>)
 800d608:	f00f f928 	bl	801c85c <__assert_func>
    if (!out || !style)
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <nk_do_button+0x70>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <nk_do_button+0x74>
        return nk_false;
 800d618:	2300      	movs	r3, #0
 800d61a:	e097      	b.n	800d74c <nk_do_button+0x1a4>

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800d61c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800d626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d630:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800d63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d640:	edc3 7a00 	vstr	s15, [r3]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 800d644:	ed97 7a03 	vldr	s14, [r7, #12]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800d64e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800d662:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d668:	edc3 7a01 	vstr	s15, [r3, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 800d66c:	ed97 7a04 	vldr	s14, [r7, #16]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800d676:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d680:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800d68a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d692:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d698:	edc3 7a02 	vstr	s15, [r3, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 800d69c:	ed97 7a05 	vldr	s14, [r7, #20]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800d6a6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800d6b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800d6ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c8:	edc3 7a03 	vstr	s15, [r3, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 800d6cc:	ed97 7a02 	vldr	s14, [r7, #8]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d6d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6da:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.y = r.y - style->touch_padding.y;
 800d6de:	ed97 7a03 	vldr	s14, [r7, #12]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800d6e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = r.w + 2 * style->touch_padding.x;
 800d6f0:	ed97 7a04 	vldr	s14, [r7, #16]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800d6fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d6fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d702:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    bounds.h = r.h + 2 * style->touch_padding.y;
 800d706:	ed97 7a05 	vldr	s14, [r7, #20]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800d710:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d718:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return nk_button_behavior(state, bounds, in, behavior);
 800d71c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d720:	ed97 6a08 	vldr	s12, [r7, #32]
 800d724:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d728:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d72c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d730:	461a      	mov	r2, r3
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	eeb0 0a46 	vmov.f32	s0, s12
 800d738:	eef0 0a66 	vmov.f32	s1, s13
 800d73c:	eeb0 1a47 	vmov.f32	s2, s14
 800d740:	eef0 1a67 	vmov.f32	s3, s15
 800d744:	69f8      	ldr	r0, [r7, #28]
 800d746:	f7ff fddd 	bl	800d304 <nk_button_behavior>
 800d74a:	4603      	mov	r3, r0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3730      	adds	r7, #48	; 0x30
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	0801ffdc 	.word	0x0801ffdc
 800d758:	0802133c 	.word	0x0802133c
 800d75c:	0801ffe4 	.word	0x0801ffe4
 800d760:	08020000 	.word	0x08020000
 800d764:	08020008 	.word	0x08020008

0800d768 <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08c      	sub	sp, #48	; 0x30
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	68b9      	ldr	r1, [r7, #8]
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f7ff fe79 	bl	800d474 <nk_draw_button>
 800d782:	6278      	str	r0, [r7, #36]	; 0x24

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 800d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d103      	bne.n	800d794 <nk_draw_button_text+0x2c>
        text.background = background->data.color;
 800d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	61fb      	str	r3, [r7, #28]
 800d792:	e002      	b.n	800d79a <nk_draw_button_text+0x32>
    else text.background = style->text_background;
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d798:	61fb      	str	r3, [r7, #28]
    if (state & NK_WIDGET_STATE_HOVER)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	f003 0310 	and.w	r3, r3, #16
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d003      	beq.n	800d7ac <nk_draw_button_text+0x44>
        text.text = style->text_hover;
 800d7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7a8:	623b      	str	r3, [r7, #32]
 800d7aa:	e00b      	b.n	800d7c4 <nk_draw_button_text+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	f003 0320 	and.w	r3, r3, #32
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <nk_draw_button_text+0x56>
        text.text = style->text_active;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7ba:	623b      	str	r3, [r7, #32]
 800d7bc:	e002      	b.n	800d7c4 <nk_draw_button_text+0x5c>
    else text.text = style->text_normal;
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7c2:	623b      	str	r3, [r7, #32]

    text.padding = nk_vec2(0,0);
 800d7c4:	eddf 0a17 	vldr	s1, [pc, #92]	; 800d824 <nk_draw_button_text+0xbc>
 800d7c8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800d824 <nk_draw_button_text+0xbc>
 800d7cc:	f004 ffde 	bl	801278c <nk_vec2>
 800d7d0:	eeb0 7a40 	vmov.f32	s14, s0
 800d7d4:	eef0 7a60 	vmov.f32	s15, s1
 800d7d8:	ed87 7a05 	vstr	s14, [r7, #20]
 800d7dc:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800d7e0:	f107 0214 	add.w	r2, r7, #20
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	ed93 6a00 	vldr	s12, [r3]
 800d7ea:	edd3 6a01 	vldr	s13, [r3, #4]
 800d7ee:	ed93 7a02 	vldr	s14, [r3, #8]
 800d7f2:	edd3 7a03 	vldr	s15, [r3, #12]
 800d7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7f8:	9301      	str	r3, [sp, #4]
 800d7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	4613      	mov	r3, r2
 800d800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d802:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d804:	eeb0 0a46 	vmov.f32	s0, s12
 800d808:	eef0 0a66 	vmov.f32	s1, s13
 800d80c:	eeb0 1a47 	vmov.f32	s2, s14
 800d810:	eef0 1a67 	vmov.f32	s3, s15
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f00c f9b7 	bl	8019b88 <nk_widget_text>
}
 800d81a:	bf00      	nop
 800d81c:	3728      	adds	r7, #40	; 0x28
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	00000000 	.word	0x00000000

0800d828 <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b094      	sub	sp, #80	; 0x50
 800d82c:	af06      	add	r7, sp, #24
 800d82e:	61f8      	str	r0, [r7, #28]
 800d830:	61b9      	str	r1, [r7, #24]
 800d832:	eeb0 6a40 	vmov.f32	s12, s0
 800d836:	eef0 6a60 	vmov.f32	s13, s1
 800d83a:	eeb0 7a41 	vmov.f32	s14, s2
 800d83e:	eef0 7a61 	vmov.f32	s15, s3
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]
 800d846:	ed87 6a02 	vstr	s12, [r7, #8]
 800d84a:	edc7 6a03 	vstr	s13, [r7, #12]
 800d84e:	ed87 7a04 	vstr	s14, [r7, #16]
 800d852:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect content;
    int ret = nk_false;
 800d856:	2300      	movs	r3, #0
 800d858:	637b      	str	r3, [r7, #52]	; 0x34

    NK_ASSERT(state);
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d105      	bne.n	800d86c <nk_do_button_text+0x44>
 800d860:	4b43      	ldr	r3, [pc, #268]	; (800d970 <nk_do_button_text+0x148>)
 800d862:	4a44      	ldr	r2, [pc, #272]	; (800d974 <nk_do_button_text+0x14c>)
 800d864:	21ad      	movs	r1, #173	; 0xad
 800d866:	4844      	ldr	r0, [pc, #272]	; (800d978 <nk_do_button_text+0x150>)
 800d868:	f00e fff8 	bl	801c85c <__assert_func>
    NK_ASSERT(style);
 800d86c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d105      	bne.n	800d87e <nk_do_button_text+0x56>
 800d872:	4b42      	ldr	r3, [pc, #264]	; (800d97c <nk_do_button_text+0x154>)
 800d874:	4a3f      	ldr	r2, [pc, #252]	; (800d974 <nk_do_button_text+0x14c>)
 800d876:	21ae      	movs	r1, #174	; 0xae
 800d878:	483f      	ldr	r0, [pc, #252]	; (800d978 <nk_do_button_text+0x150>)
 800d87a:	f00e ffef 	bl	801c85c <__assert_func>
    NK_ASSERT(out);
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d105      	bne.n	800d890 <nk_do_button_text+0x68>
 800d884:	4b3e      	ldr	r3, [pc, #248]	; (800d980 <nk_do_button_text+0x158>)
 800d886:	4a3b      	ldr	r2, [pc, #236]	; (800d974 <nk_do_button_text+0x14c>)
 800d888:	21af      	movs	r1, #175	; 0xaf
 800d88a:	483b      	ldr	r0, [pc, #236]	; (800d978 <nk_do_button_text+0x150>)
 800d88c:	f00e ffe6 	bl	801c85c <__assert_func>
    NK_ASSERT(string);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d105      	bne.n	800d8a2 <nk_do_button_text+0x7a>
 800d896:	4b3b      	ldr	r3, [pc, #236]	; (800d984 <nk_do_button_text+0x15c>)
 800d898:	4a36      	ldr	r2, [pc, #216]	; (800d974 <nk_do_button_text+0x14c>)
 800d89a:	21b0      	movs	r1, #176	; 0xb0
 800d89c:	4836      	ldr	r0, [pc, #216]	; (800d978 <nk_do_button_text+0x150>)
 800d89e:	f00e ffdd 	bl	801c85c <__assert_func>
    NK_ASSERT(font);
 800d8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d105      	bne.n	800d8b4 <nk_do_button_text+0x8c>
 800d8a8:	4b37      	ldr	r3, [pc, #220]	; (800d988 <nk_do_button_text+0x160>)
 800d8aa:	4a32      	ldr	r2, [pc, #200]	; (800d974 <nk_do_button_text+0x14c>)
 800d8ac:	21b1      	movs	r1, #177	; 0xb1
 800d8ae:	4832      	ldr	r0, [pc, #200]	; (800d978 <nk_do_button_text+0x150>)
 800d8b0:	f00e ffd4 	bl	801c85c <__assert_func>
    if (!out || !style || !font || !string)
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d008      	beq.n	800d8cc <nk_do_button_text+0xa4>
 800d8ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d005      	beq.n	800d8cc <nk_do_button_text+0xa4>
 800d8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <nk_do_button_text+0xa4>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d101      	bne.n	800d8d0 <nk_do_button_text+0xa8>
        return nk_false;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	e04b      	b.n	800d968 <nk_do_button_text+0x140>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800d8d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8d4:	edd7 6a03 	vldr	s13, [r7, #12]
 800d8d8:	ed97 7a04 	vldr	s14, [r7, #16]
 800d8dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8f0:	eeb0 0a46 	vmov.f32	s0, s12
 800d8f4:	eef0 0a66 	vmov.f32	s1, s13
 800d8f8:	eeb0 1a47 	vmov.f32	s2, s14
 800d8fc:	eef0 1a67 	vmov.f32	s3, s15
 800d900:	69b9      	ldr	r1, [r7, #24]
 800d902:	69f8      	ldr	r0, [r7, #28]
 800d904:	f7ff fe50 	bl	800d5a8 <nk_do_button>
 800d908:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800d90a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d910:	2b00      	cmp	r3, #0
 800d912:	d007      	beq.n	800d924 <nk_do_button_text+0xfc>
 800d914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d91a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d91c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800d920:	69b8      	ldr	r0, [r7, #24]
 800d922:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	6818      	ldr	r0, [r3, #0]
 800d928:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d92c:	f107 0108 	add.w	r1, r7, #8
 800d930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d932:	9304      	str	r3, [sp, #16]
 800d934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d936:	9303      	str	r3, [sp, #12]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	9302      	str	r3, [sp, #8]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	4603      	mov	r3, r0
 800d946:	69b8      	ldr	r0, [r7, #24]
 800d948:	f7ff ff0e 	bl	800d768 <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800d94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d94e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d952:	2b00      	cmp	r3, #0
 800d954:	d007      	beq.n	800d966 <nk_do_button_text+0x13e>
 800d956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d95c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d95e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800d962:	69b8      	ldr	r0, [r7, #24]
 800d964:	4798      	blx	r3
    return ret;
 800d966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3738      	adds	r7, #56	; 0x38
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	08020000 	.word	0x08020000
 800d974:	0802134c 	.word	0x0802134c
 800d978:	0801ffe4 	.word	0x0801ffe4
 800d97c:	0801ffdc 	.word	0x0801ffdc
 800d980:	08020008 	.word	0x08020008
 800d984:	0802000c 	.word	0x0802000c
 800d988:	08020014 	.word	0x08020014

0800d98c <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08a      	sub	sp, #40	; 0x28
 800d990:	af02      	add	r7, sp, #8
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 800d99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99c:	683a      	ldr	r2, [r7, #0]
 800d99e:	68b9      	ldr	r1, [r7, #8]
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f7ff fd67 	bl	800d474 <nk_draw_button>
 800d9a6:	61f8      	str	r0, [r7, #28]
    if (background->type == NK_STYLE_ITEM_COLOR)
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <nk_draw_button_symbol+0x2c>
        bg = background->data.color;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e002      	b.n	800d9be <nk_draw_button_symbol+0x32>
    else bg = style->text_background;
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9bc:	617b      	str	r3, [r7, #20]

    if (state & NK_WIDGET_STATE_HOVER)
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	f003 0310 	and.w	r3, r3, #16
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d003      	beq.n	800d9d0 <nk_draw_button_symbol+0x44>
        sym = style->text_hover;
 800d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9cc:	61bb      	str	r3, [r7, #24]
 800d9ce:	e00b      	b.n	800d9e8 <nk_draw_button_symbol+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	f003 0320 	and.w	r3, r3, #32
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <nk_draw_button_symbol+0x56>
        sym = style->text_active;
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9de:	61bb      	str	r3, [r7, #24]
 800d9e0:	e002      	b.n	800d9e8 <nk_draw_button_symbol+0x5c>
    else sym = style->text_normal;
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9e6:	61bb      	str	r3, [r7, #24]
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	ed93 6a00 	vldr	s12, [r3]
 800d9ee:	edd3 6a01 	vldr	s13, [r3, #4]
 800d9f2:	ed93 7a02 	vldr	s14, [r3, #8]
 800d9f6:	edd3 7a03 	vldr	s15, [r3, #12]
 800d9fa:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	eeb0 0a46 	vmov.f32	s0, s12
 800da0e:	eef0 0a66 	vmov.f32	s1, s13
 800da12:	eeb0 1a47 	vmov.f32	s2, s14
 800da16:	eef0 1a67 	vmov.f32	s3, s15
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f7ff fae2 	bl	800cfe4 <nk_draw_symbol>
}
 800da20:	bf00      	nop
 800da22:	3720      	adds	r7, #32
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b092      	sub	sp, #72	; 0x48
 800da2c:	af04      	add	r7, sp, #16
 800da2e:	61f8      	str	r0, [r7, #28]
 800da30:	61b9      	str	r1, [r7, #24]
 800da32:	eeb0 6a40 	vmov.f32	s12, s0
 800da36:	eef0 6a60 	vmov.f32	s13, s1
 800da3a:	eeb0 7a41 	vmov.f32	s14, s2
 800da3e:	eef0 7a61 	vmov.f32	s15, s3
 800da42:	4611      	mov	r1, r2
 800da44:	461a      	mov	r2, r3
 800da46:	ed87 6a02 	vstr	s12, [r7, #8]
 800da4a:	edc7 6a03 	vstr	s13, [r7, #12]
 800da4e:	ed87 7a04 	vstr	s14, [r7, #16]
 800da52:	edc7 7a05 	vstr	s15, [r7, #20]
 800da56:	460b      	mov	r3, r1
 800da58:	71fb      	strb	r3, [r7, #7]
 800da5a:	4613      	mov	r3, r2
 800da5c:	71bb      	strb	r3, [r7, #6]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d105      	bne.n	800da70 <nk_do_button_symbol+0x48>
 800da64:	4b3c      	ldr	r3, [pc, #240]	; (800db58 <nk_do_button_symbol+0x130>)
 800da66:	4a3d      	ldr	r2, [pc, #244]	; (800db5c <nk_do_button_symbol+0x134>)
 800da68:	21db      	movs	r1, #219	; 0xdb
 800da6a:	483d      	ldr	r0, [pc, #244]	; (800db60 <nk_do_button_symbol+0x138>)
 800da6c:	f00e fef6 	bl	801c85c <__assert_func>
    NK_ASSERT(style);
 800da70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da72:	2b00      	cmp	r3, #0
 800da74:	d105      	bne.n	800da82 <nk_do_button_symbol+0x5a>
 800da76:	4b3b      	ldr	r3, [pc, #236]	; (800db64 <nk_do_button_symbol+0x13c>)
 800da78:	4a38      	ldr	r2, [pc, #224]	; (800db5c <nk_do_button_symbol+0x134>)
 800da7a:	21dc      	movs	r1, #220	; 0xdc
 800da7c:	4838      	ldr	r0, [pc, #224]	; (800db60 <nk_do_button_symbol+0x138>)
 800da7e:	f00e feed 	bl	801c85c <__assert_func>
    NK_ASSERT(font);
 800da82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da84:	2b00      	cmp	r3, #0
 800da86:	d105      	bne.n	800da94 <nk_do_button_symbol+0x6c>
 800da88:	4b37      	ldr	r3, [pc, #220]	; (800db68 <nk_do_button_symbol+0x140>)
 800da8a:	4a34      	ldr	r2, [pc, #208]	; (800db5c <nk_do_button_symbol+0x134>)
 800da8c:	21dd      	movs	r1, #221	; 0xdd
 800da8e:	4834      	ldr	r0, [pc, #208]	; (800db60 <nk_do_button_symbol+0x138>)
 800da90:	f00e fee4 	bl	801c85c <__assert_func>
    NK_ASSERT(out);
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d105      	bne.n	800daa6 <nk_do_button_symbol+0x7e>
 800da9a:	4b34      	ldr	r3, [pc, #208]	; (800db6c <nk_do_button_symbol+0x144>)
 800da9c:	4a2f      	ldr	r2, [pc, #188]	; (800db5c <nk_do_button_symbol+0x134>)
 800da9e:	21de      	movs	r1, #222	; 0xde
 800daa0:	482f      	ldr	r0, [pc, #188]	; (800db60 <nk_do_button_symbol+0x138>)
 800daa2:	f00e fedb 	bl	801c85c <__assert_func>
    if (!out || !style || !font || !state)
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d008      	beq.n	800dabe <nk_do_button_symbol+0x96>
 800daac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d005      	beq.n	800dabe <nk_do_button_symbol+0x96>
 800dab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <nk_do_button_symbol+0x96>
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <nk_do_button_symbol+0x9a>
        return nk_false;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e046      	b.n	800db50 <nk_do_button_symbol+0x128>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800dac2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dac6:	edd7 6a03 	vldr	s13, [r7, #12]
 800daca:	ed97 7a04 	vldr	s14, [r7, #16]
 800dace:	edd7 7a05 	vldr	s15, [r7, #20]
 800dad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	79bb      	ldrb	r3, [r7, #6]
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dae0:	eeb0 0a46 	vmov.f32	s0, s12
 800dae4:	eef0 0a66 	vmov.f32	s1, s13
 800dae8:	eeb0 1a47 	vmov.f32	s2, s14
 800daec:	eef0 1a67 	vmov.f32	s3, s15
 800daf0:	69b9      	ldr	r1, [r7, #24]
 800daf2:	69f8      	ldr	r0, [r7, #28]
 800daf4:	f7ff fd58 	bl	800d5a8 <nk_do_button>
 800daf8:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800dafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db00:	2b00      	cmp	r3, #0
 800db02:	d007      	beq.n	800db14 <nk_do_button_symbol+0xec>
 800db04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db0c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800db10:	69b8      	ldr	r0, [r7, #24]
 800db12:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800db1c:	f107 0108 	add.w	r1, r7, #8
 800db20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db22:	9302      	str	r3, [sp, #8]
 800db24:	79fb      	ldrb	r3, [r7, #7]
 800db26:	9301      	str	r3, [sp, #4]
 800db28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	4603      	mov	r3, r0
 800db2e:	69b8      	ldr	r0, [r7, #24]
 800db30:	f7ff ff2c 	bl	800d98c <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800db34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d007      	beq.n	800db4e <nk_do_button_symbol+0x126>
 800db3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800db44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db46:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800db4a:	69b8      	ldr	r0, [r7, #24]
 800db4c:	4798      	blx	r3
    return ret;
 800db4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db50:	4618      	mov	r0, r3
 800db52:	3738      	adds	r7, #56	; 0x38
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	08020000 	.word	0x08020000
 800db5c:	08021360 	.word	0x08021360
 800db60:	0801ffe4 	.word	0x0801ffe4
 800db64:	0801ffdc 	.word	0x0801ffdc
 800db68:	08020014 	.word	0x08020014
 800db6c:	08020008 	.word	0x08020008

0800db70 <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 800db70:	b590      	push	{r4, r7, lr}
 800db72:	b093      	sub	sp, #76	; 0x4c
 800db74:	af06      	add	r7, sp, #24
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d106      	bne.n	800db92 <nk_button_text_styled+0x22>
 800db84:	4b4f      	ldr	r3, [pc, #316]	; (800dcc4 <nk_button_text_styled+0x154>)
 800db86:	4a50      	ldr	r2, [pc, #320]	; (800dcc8 <nk_button_text_styled+0x158>)
 800db88:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800db8c:	484f      	ldr	r0, [pc, #316]	; (800dccc <nk_button_text_styled+0x15c>)
 800db8e:	f00e fe65 	bl	801c85c <__assert_func>
    NK_ASSERT(style);
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d106      	bne.n	800dba6 <nk_button_text_styled+0x36>
 800db98:	4b4d      	ldr	r3, [pc, #308]	; (800dcd0 <nk_button_text_styled+0x160>)
 800db9a:	4a4b      	ldr	r2, [pc, #300]	; (800dcc8 <nk_button_text_styled+0x158>)
 800db9c:	f240 11c1 	movw	r1, #449	; 0x1c1
 800dba0:	484a      	ldr	r0, [pc, #296]	; (800dccc <nk_button_text_styled+0x15c>)
 800dba2:	f00e fe5b 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dbac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d106      	bne.n	800dbc2 <nk_button_text_styled+0x52>
 800dbb4:	4b47      	ldr	r3, [pc, #284]	; (800dcd4 <nk_button_text_styled+0x164>)
 800dbb6:	4a44      	ldr	r2, [pc, #272]	; (800dcc8 <nk_button_text_styled+0x158>)
 800dbb8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800dbbc:	4843      	ldr	r0, [pc, #268]	; (800dccc <nk_button_text_styled+0x15c>)
 800dbbe:	f00e fe4d 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dbc8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dbcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d106      	bne.n	800dbe2 <nk_button_text_styled+0x72>
 800dbd4:	4b40      	ldr	r3, [pc, #256]	; (800dcd8 <nk_button_text_styled+0x168>)
 800dbd6:	4a3c      	ldr	r2, [pc, #240]	; (800dcc8 <nk_button_text_styled+0x158>)
 800dbd8:	f240 11c3 	movw	r1, #451	; 0x1c3
 800dbdc:	483b      	ldr	r0, [pc, #236]	; (800dccc <nk_button_text_styled+0x15c>)
 800dbde:	f00e fe3d 	bl	801c85c <__assert_func>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d012      	beq.n	800dc0e <nk_button_text_styled+0x9e>
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00f      	beq.n	800dc0e <nk_button_text_styled+0x9e>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dbf4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d008      	beq.n	800dc0e <nk_button_text_styled+0x9e>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc02:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dc06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d101      	bne.n	800dc12 <nk_button_text_styled+0xa2>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e054      	b.n	800dcbc <nk_button_text_styled+0x14c>

    win = ctx->current;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc18:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc24:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800dc26:	f107 0310 	add.w	r3, r7, #16
 800dc2a:	68f9      	ldr	r1, [r7, #12]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f00d fb75 	bl	801b31c <nk_widget>
 800dc32:	4603      	mov	r3, r0
 800dc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!state) return 0;
 800dc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <nk_button_text_styled+0xd4>
 800dc40:	2300      	movs	r3, #0
 800dc42:	e03b      	b.n	800dcbc <nk_button_text_styled+0x14c>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800dc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d007      	beq.n	800dc5c <nk_button_text_styled+0xec>
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d101      	bne.n	800dc5c <nk_button_text_styled+0xec>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	e000      	b.n	800dc5e <nk_button_text_styled+0xee>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800dc66:	3014      	adds	r0, #20
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6a:	f103 0464 	add.w	r4, r3, #100	; 0x64
                    title, len, style->text_alignment, ctx->button_behavior,
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800dc78:	f892 2ad8 	ldrb.w	r2, [r2, #2776]	; 0xad8
 800dc7c:	68f9      	ldr	r1, [r7, #12]
 800dc7e:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 800dc82:	ed97 6a04 	vldr	s12, [r7, #16]
 800dc86:	edd7 6a05 	vldr	s13, [r7, #20]
 800dc8a:	ed97 7a06 	vldr	s14, [r7, #24]
 800dc8e:	edd7 7a07 	vldr	s15, [r7, #28]
 800dc92:	9104      	str	r1, [sp, #16]
 800dc94:	6a39      	ldr	r1, [r7, #32]
 800dc96:	9103      	str	r1, [sp, #12]
 800dc98:	68b9      	ldr	r1, [r7, #8]
 800dc9a:	9102      	str	r1, [sp, #8]
 800dc9c:	9201      	str	r2, [sp, #4]
 800dc9e:	9300      	str	r3, [sp, #0]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	eeb0 0a46 	vmov.f32	s0, s12
 800dca8:	eef0 0a66 	vmov.f32	s1, s13
 800dcac:	eeb0 1a47 	vmov.f32	s2, s14
 800dcb0:	eef0 1a67 	vmov.f32	s3, s15
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f7ff fdb7 	bl	800d828 <nk_do_button_text>
 800dcba:	4603      	mov	r3, r0
                    style, in, ctx->style.font);
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3734      	adds	r7, #52	; 0x34
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd90      	pop	{r4, r7, pc}
 800dcc4:	0802001c 	.word	0x0802001c
 800dcc8:	08021374 	.word	0x08021374
 800dccc:	0801ffe4 	.word	0x0801ffe4
 800dcd0:	0801ffdc 	.word	0x0801ffdc
 800dcd4:	08020098 	.word	0x08020098
 800dcd8:	080200a8 	.word	0x080200a8

0800dcdc <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
    NK_ASSERT(ctx);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d106      	bne.n	800dcfc <nk_button_text+0x20>
 800dcee:	4b0c      	ldr	r3, [pc, #48]	; (800dd20 <nk_button_text+0x44>)
 800dcf0:	4a0c      	ldr	r2, [pc, #48]	; (800dd24 <nk_button_text+0x48>)
 800dcf2:	f240 11d3 	movw	r1, #467	; 0x1d3
 800dcf6:	480c      	ldr	r0, [pc, #48]	; (800dd28 <nk_button_text+0x4c>)
 800dcf8:	f00e fdb0 	bl	801c85c <__assert_func>
    if (!ctx) return 0;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <nk_button_text+0x2a>
 800dd02:	2300      	movs	r3, #0
 800dd04:	e008      	b.n	800dd18 <nk_button_text+0x3c>
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff ff2d 	bl	800db70 <nk_button_text_styled>
 800dd16:	4603      	mov	r3, r0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	0802001c 	.word	0x0802001c
 800dd24:	0802138c 	.word	0x0802138c
 800dd28:	0801ffe4 	.word	0x0801ffe4

0800dd2c <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
    return nk_button_text(ctx, title, nk_strlen(title));
 800dd36:	6838      	ldr	r0, [r7, #0]
 800dd38:	f00d f8fe 	bl	801af38 <nk_strlen>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	461a      	mov	r2, r3
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7ff ffca 	bl	800dcdc <nk_button_text>
 800dd48:	4603      	mov	r3, r0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 800dd52:	b480      	push	{r7}
 800dd54:	b087      	sub	sp, #28
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	607a      	str	r2, [r7, #4]
 800dd5e:	603b      	str	r3, [r7, #0]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	db07      	blt.n	800dd76 <nk_rgba+0x24>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2bfe      	cmp	r3, #254	; 0xfe
 800dd6a:	dc02      	bgt.n	800dd72 <nk_rgba+0x20>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	e002      	b.n	800dd78 <nk_rgba+0x26>
 800dd72:	23ff      	movs	r3, #255	; 0xff
 800dd74:	e000      	b.n	800dd78 <nk_rgba+0x26>
 800dd76:	2300      	movs	r3, #0
 800dd78:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	db07      	blt.n	800dd90 <nk_rgba+0x3e>
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	2bfe      	cmp	r3, #254	; 0xfe
 800dd84:	dc02      	bgt.n	800dd8c <nk_rgba+0x3a>
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	e002      	b.n	800dd92 <nk_rgba+0x40>
 800dd8c:	23ff      	movs	r3, #255	; 0xff
 800dd8e:	e000      	b.n	800dd92 <nk_rgba+0x40>
 800dd90:	2300      	movs	r3, #0
 800dd92:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	db07      	blt.n	800ddaa <nk_rgba+0x58>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2bfe      	cmp	r3, #254	; 0xfe
 800dd9e:	dc02      	bgt.n	800dda6 <nk_rgba+0x54>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	e002      	b.n	800ddac <nk_rgba+0x5a>
 800dda6:	23ff      	movs	r3, #255	; 0xff
 800dda8:	e000      	b.n	800ddac <nk_rgba+0x5a>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	db07      	blt.n	800ddc4 <nk_rgba+0x72>
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2bfe      	cmp	r3, #254	; 0xfe
 800ddb8:	dc02      	bgt.n	800ddc0 <nk_rgba+0x6e>
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	e002      	b.n	800ddc6 <nk_rgba+0x74>
 800ddc0:	23ff      	movs	r3, #255	; 0xff
 800ddc2:	e000      	b.n	800ddc6 <nk_rgba+0x74>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	74fb      	strb	r3, [r7, #19]
    return ret;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	7d3a      	ldrb	r2, [r7, #20]
 800ddd0:	f362 0307 	bfi	r3, r2, #0, #8
 800ddd4:	7d7a      	ldrb	r2, [r7, #21]
 800ddd6:	f362 230f 	bfi	r3, r2, #8, #8
 800ddda:	7dba      	ldrb	r2, [r7, #22]
 800dddc:	f362 4317 	bfi	r3, r2, #16, #8
 800dde0:	7dfa      	ldrb	r2, [r7, #23]
 800dde2:	f362 631f 	bfi	r3, r2, #24, #8
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	371c      	adds	r7, #28
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b087      	sub	sp, #28
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	60f8      	str	r0, [r7, #12]
 800ddfa:	60b9      	str	r1, [r7, #8]
 800ddfc:	607a      	str	r2, [r7, #4]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	db07      	blt.n	800de14 <nk_rgb+0x22>
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2bfe      	cmp	r3, #254	; 0xfe
 800de08:	dc02      	bgt.n	800de10 <nk_rgb+0x1e>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	e002      	b.n	800de16 <nk_rgb+0x24>
 800de10:	23ff      	movs	r3, #255	; 0xff
 800de12:	e000      	b.n	800de16 <nk_rgb+0x24>
 800de14:	2300      	movs	r3, #0
 800de16:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	db07      	blt.n	800de2e <nk_rgb+0x3c>
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2bfe      	cmp	r3, #254	; 0xfe
 800de22:	dc02      	bgt.n	800de2a <nk_rgb+0x38>
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	b2db      	uxtb	r3, r3
 800de28:	e002      	b.n	800de30 <nk_rgb+0x3e>
 800de2a:	23ff      	movs	r3, #255	; 0xff
 800de2c:	e000      	b.n	800de30 <nk_rgb+0x3e>
 800de2e:	2300      	movs	r3, #0
 800de30:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	db07      	blt.n	800de48 <nk_rgb+0x56>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2bfe      	cmp	r3, #254	; 0xfe
 800de3c:	dc02      	bgt.n	800de44 <nk_rgb+0x52>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	b2db      	uxtb	r3, r3
 800de42:	e002      	b.n	800de4a <nk_rgb+0x58>
 800de44:	23ff      	movs	r3, #255	; 0xff
 800de46:	e000      	b.n	800de4a <nk_rgb+0x58>
 800de48:	2300      	movs	r3, #0
 800de4a:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)255;
 800de4c:	23ff      	movs	r3, #255	; 0xff
 800de4e:	74fb      	strb	r3, [r7, #19]
    return ret;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	617b      	str	r3, [r7, #20]
 800de54:	2300      	movs	r3, #0
 800de56:	7d3a      	ldrb	r2, [r7, #20]
 800de58:	f362 0307 	bfi	r3, r2, #0, #8
 800de5c:	7d7a      	ldrb	r2, [r7, #21]
 800de5e:	f362 230f 	bfi	r3, r2, #8, #8
 800de62:	7dba      	ldrb	r2, [r7, #22]
 800de64:	f362 4317 	bfi	r3, r2, #16, #8
 800de68:	7dfa      	ldrb	r2, [r7, #23]
 800de6a:	f362 631f 	bfi	r3, r2, #24, #8
}
 800de6e:	4618      	mov	r0, r3
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
	...

0800de7c <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b097      	sub	sp, #92	; 0x5c
 800de80:	af00      	add	r7, sp, #0
 800de82:	6278      	str	r0, [r7, #36]	; 0x24
 800de84:	6239      	str	r1, [r7, #32]
 800de86:	eeb0 5a40 	vmov.f32	s10, s0
 800de8a:	eef0 5a60 	vmov.f32	s11, s1
 800de8e:	617a      	str	r2, [r7, #20]
 800de90:	eeb0 6a41 	vmov.f32	s12, s2
 800de94:	eef0 6a61 	vmov.f32	s13, s3
 800de98:	eeb0 7a42 	vmov.f32	s14, s4
 800de9c:	eef0 7a62 	vmov.f32	s15, s5
 800dea0:	ed87 5a06 	vstr	s10, [r7, #24]
 800dea4:	edc7 5a07 	vstr	s11, [r7, #28]
 800dea8:	ed87 6a01 	vstr	s12, [r7, #4]
 800deac:	edc7 6a02 	vstr	s13, [r7, #8]
 800deb0:	ed87 7a03 	vstr	s14, [r7, #12]
 800deb4:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *popup;
    int is_open = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	657b      	str	r3, [r7, #84]	; 0x54
    int is_active = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	653b      	str	r3, [r7, #80]	; 0x50
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d105      	bne.n	800ded2 <nk_combo_begin+0x56>
 800dec6:	4b75      	ldr	r3, [pc, #468]	; (800e09c <nk_combo_begin+0x220>)
 800dec8:	4a75      	ldr	r2, [pc, #468]	; (800e0a0 <nk_combo_begin+0x224>)
 800deca:	2113      	movs	r1, #19
 800decc:	4875      	ldr	r0, [pc, #468]	; (800e0a4 <nk_combo_begin+0x228>)
 800dece:	f00e fcc5 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ded8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d105      	bne.n	800deec <nk_combo_begin+0x70>
 800dee0:	4b71      	ldr	r3, [pc, #452]	; (800e0a8 <nk_combo_begin+0x22c>)
 800dee2:	4a6f      	ldr	r2, [pc, #444]	; (800e0a0 <nk_combo_begin+0x224>)
 800dee4:	2114      	movs	r1, #20
 800dee6:	486f      	ldr	r0, [pc, #444]	; (800e0a4 <nk_combo_begin+0x228>)
 800dee8:	f00e fcb8 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800def2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800def6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d105      	bne.n	800df0a <nk_combo_begin+0x8e>
 800defe:	4b6b      	ldr	r3, [pc, #428]	; (800e0ac <nk_combo_begin+0x230>)
 800df00:	4a67      	ldr	r2, [pc, #412]	; (800e0a0 <nk_combo_begin+0x224>)
 800df02:	2115      	movs	r1, #21
 800df04:	4867      	ldr	r0, [pc, #412]	; (800e0a4 <nk_combo_begin+0x228>)
 800df06:	f00e fca9 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00f      	beq.n	800df30 <nk_combo_begin+0xb4>
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800df16:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d008      	beq.n	800df30 <nk_combo_begin+0xb4>
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800df24:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800df28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <nk_combo_begin+0xb8>
        return 0;
 800df30:	2300      	movs	r3, #0
 800df32:	e0af      	b.n	800e094 <nk_combo_begin+0x218>

    popup = win->popup.win;
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800df3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    body.x = header.x;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	62bb      	str	r3, [r7, #40]	; 0x28
    body.w = size.x;
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	633b      	str	r3, [r7, #48]	; 0x30
    body.y = header.y + header.h-ctx->style.window.combo_border;
 800df44:	ed97 7a02 	vldr	s14, [r7, #8]
 800df48:	edd7 7a04 	vldr	s15, [r7, #16]
 800df4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df56:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 800df5a:	edd3 7a00 	vldr	s15, [r3]
 800df5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    body.h = size.y;
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	637b      	str	r3, [r7, #52]	; 0x34

    hash = win->popup.combo_count++;
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800df70:	1c59      	adds	r1, r3, #1
 800df72:	6a3a      	ldr	r2, [r7, #32]
 800df74:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800df78:	64bb      	str	r3, [r7, #72]	; 0x48
    is_open = (popup) ? nk_true:nk_false;
 800df7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bf14      	ite	ne
 800df80:	2301      	movne	r3, #1
 800df82:	2300      	moveq	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	657b      	str	r3, [r7, #84]	; 0x54
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 800df88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00c      	beq.n	800dfa8 <nk_combo_begin+0x12c>
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800df94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df96:	429a      	cmp	r2, r3
 800df98:	d106      	bne.n	800dfa8 <nk_combo_begin+0x12c>
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800dfa0:	2b20      	cmp	r3, #32
 800dfa2:	d101      	bne.n	800dfa8 <nk_combo_begin+0x12c>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e000      	b.n	800dfaa <nk_combo_begin+0x12e>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	653b      	str	r3, [r7, #80]	; 0x50
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d005      	beq.n	800dfbe <nk_combo_begin+0x142>
 800dfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <nk_combo_begin+0x142>
 800dfb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00e      	beq.n	800dfdc <nk_combo_begin+0x160>
 800dfbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <nk_combo_begin+0x14e>
 800dfc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d008      	beq.n	800dfdc <nk_combo_begin+0x160>
 800dfca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d107      	bne.n	800dfe0 <nk_combo_begin+0x164>
        (!is_open && !is_active && !is_clicked)) return 0;
 800dfd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d104      	bne.n	800dfe0 <nk_combo_begin+0x164>
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d101      	bne.n	800dfe0 <nk_combo_begin+0x164>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e059      	b.n	800e094 <nk_combo_begin+0x218>
    if (!nk_nonblock_begin(ctx, 0, body,
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d01d      	beq.n	800e022 <nk_combo_begin+0x1a6>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800dfe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d01a      	beq.n	800e022 <nk_combo_begin+0x1a6>
 800dfec:	eddf 1a30 	vldr	s3, [pc, #192]	; 800e0b0 <nk_combo_begin+0x234>
 800dff0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800e0b0 <nk_combo_begin+0x234>
 800dff4:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800e0b0 <nk_combo_begin+0x234>
 800dff8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e0b0 <nk_combo_begin+0x234>
 800dffc:	f004 fb14 	bl	8012628 <nk_rect>
 800e000:	eeb0 6a40 	vmov.f32	s12, s0
 800e004:	eef0 6a60 	vmov.f32	s13, s1
 800e008:	eeb0 7a41 	vmov.f32	s14, s2
 800e00c:	eef0 7a61 	vmov.f32	s15, s3
 800e010:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800e014:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800e018:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800e01c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    if (!nk_nonblock_begin(ctx, 0, body,
 800e020:	e005      	b.n	800e02e <nk_combo_begin+0x1b2>
 800e022:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800e026:	1d3b      	adds	r3, r7, #4
 800e028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e02a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e02e:	ed97 4a0e 	vldr	s8, [r7, #56]	; 0x38
 800e032:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800e036:	ed97 5a10 	vldr	s10, [r7, #64]	; 0x40
 800e03a:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800e03e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e042:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e046:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e04a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e04e:	2220      	movs	r2, #32
 800e050:	eeb0 2a44 	vmov.f32	s4, s8
 800e054:	eef0 2a64 	vmov.f32	s5, s9
 800e058:	eeb0 3a45 	vmov.f32	s6, s10
 800e05c:	eef0 3a65 	vmov.f32	s7, s11
 800e060:	eeb0 0a46 	vmov.f32	s0, s12
 800e064:	eef0 0a66 	vmov.f32	s1, s13
 800e068:	eeb0 1a47 	vmov.f32	s2, s14
 800e06c:	eef0 1a67 	vmov.f32	s3, s15
 800e070:	2100      	movs	r1, #0
 800e072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e074:	f007 f93a 	bl	80152ec <nk_nonblock_begin>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <nk_combo_begin+0x206>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	e008      	b.n	800e094 <nk_combo_begin+0x218>

    win->popup.type = NK_PANEL_COMBO;
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	2220      	movs	r2, #32
 800e086:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    win->popup.name = hash;
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e08e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    return 1;
 800e092:	2301      	movs	r3, #1
}
 800e094:	4618      	mov	r0, r3
 800e096:	375c      	adds	r7, #92	; 0x5c
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd90      	pop	{r4, r7, pc}
 800e09c:	080200c0 	.word	0x080200c0
 800e0a0:	080213a0 	.word	0x080213a0
 800e0a4:	080200c4 	.word	0x080200c4
 800e0a8:	080200e0 	.word	0x080200e0
 800e0ac:	080200f0 	.word	0x080200f0
 800e0b0:	00000000 	.word	0x00000000

0800e0b4 <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 800e0b4:	b5b0      	push	{r4, r5, r7, lr}
 800e0b6:	b0a6      	sub	sp, #152	; 0x98
 800e0b8:	af04      	add	r7, sp, #16
 800e0ba:	6178      	str	r0, [r7, #20]
 800e0bc:	6139      	str	r1, [r7, #16]
 800e0be:	60fa      	str	r2, [r7, #12]
 800e0c0:	eeb0 7a40 	vmov.f32	s14, s0
 800e0c4:	eef0 7a60 	vmov.f32	s15, s1
 800e0c8:	ed87 7a01 	vstr	s14, [r7, #4]
 800e0cc:	edc7 7a02 	vstr	s15, [r7, #8]
    const struct nk_input *in;
    struct nk_window *win;
    struct nk_style *style;

    enum nk_widget_layout_states s;
    int is_clicked = nk_false;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d105      	bne.n	800e0e8 <nk_combo_begin_text+0x34>
 800e0dc:	4bc3      	ldr	r3, [pc, #780]	; (800e3ec <nk_combo_begin_text+0x338>)
 800e0de:	4ac4      	ldr	r2, [pc, #784]	; (800e3f0 <nk_combo_begin_text+0x33c>)
 800e0e0:	2139      	movs	r1, #57	; 0x39
 800e0e2:	48c4      	ldr	r0, [pc, #784]	; (800e3f4 <nk_combo_begin_text+0x340>)
 800e0e4:	f00e fbba 	bl	801c85c <__assert_func>
    NK_ASSERT(selected);
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d105      	bne.n	800e0fa <nk_combo_begin_text+0x46>
 800e0ee:	4bc2      	ldr	r3, [pc, #776]	; (800e3f8 <nk_combo_begin_text+0x344>)
 800e0f0:	4abf      	ldr	r2, [pc, #764]	; (800e3f0 <nk_combo_begin_text+0x33c>)
 800e0f2:	213a      	movs	r1, #58	; 0x3a
 800e0f4:	48bf      	ldr	r0, [pc, #764]	; (800e3f4 <nk_combo_begin_text+0x340>)
 800e0f6:	f00e fbb1 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e100:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e104:	2b00      	cmp	r3, #0
 800e106:	d105      	bne.n	800e114 <nk_combo_begin_text+0x60>
 800e108:	4bbc      	ldr	r3, [pc, #752]	; (800e3fc <nk_combo_begin_text+0x348>)
 800e10a:	4ab9      	ldr	r2, [pc, #740]	; (800e3f0 <nk_combo_begin_text+0x33c>)
 800e10c:	213b      	movs	r1, #59	; 0x3b
 800e10e:	48b9      	ldr	r0, [pc, #740]	; (800e3f4 <nk_combo_begin_text+0x340>)
 800e110:	f00e fba4 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e11a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e122:	2b00      	cmp	r3, #0
 800e124:	d105      	bne.n	800e132 <nk_combo_begin_text+0x7e>
 800e126:	4bb6      	ldr	r3, [pc, #728]	; (800e400 <nk_combo_begin_text+0x34c>)
 800e128:	4ab1      	ldr	r2, [pc, #708]	; (800e3f0 <nk_combo_begin_text+0x33c>)
 800e12a:	213c      	movs	r1, #60	; 0x3c
 800e12c:	48b1      	ldr	r0, [pc, #708]	; (800e3f4 <nk_combo_begin_text+0x340>)
 800e12e:	f00e fb95 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d012      	beq.n	800e15e <nk_combo_begin_text+0xaa>
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e13e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <nk_combo_begin_text+0xaa>
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e14c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <nk_combo_begin_text+0xaa>
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d101      	bne.n	800e162 <nk_combo_begin_text+0xae>
        return 0;
 800e15e:	2300      	movs	r3, #0
 800e160:	e28f      	b.n	800e682 <nk_combo_begin_text+0x5ce>

    win = ctx->current;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e168:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e16c:	67bb      	str	r3, [r7, #120]	; 0x78
    style = &ctx->style;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e174:	677b      	str	r3, [r7, #116]	; 0x74
    s = nk_widget(&header, ctx);
 800e176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e17a:	6979      	ldr	r1, [r7, #20]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f00d f8cd 	bl	801b31c <nk_widget>
 800e182:	4603      	mov	r3, r0
 800e184:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if (s == NK_WIDGET_INVALID)
 800e188:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <nk_combo_begin_text+0xe0>
        return 0;
 800e190:	2300      	movs	r3, #0
 800e192:	e276      	b.n	800e682 <nk_combo_begin_text+0x5ce>

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 800e194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d105      	bne.n	800e1b0 <nk_combo_begin_text+0xfc>
 800e1a4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d001      	beq.n	800e1b0 <nk_combo_begin_text+0xfc>
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	e000      	b.n	800e1b2 <nk_combo_begin_text+0xfe>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 800e1ba:	3314      	adds	r3, #20
 800e1bc:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800e1c0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e1c4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800e1c8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e1d0:	eeb0 0a46 	vmov.f32	s0, s12
 800e1d4:	eef0 0a66 	vmov.f32	s1, s13
 800e1d8:	eeb0 1a47 	vmov.f32	s2, s14
 800e1dc:	eef0 1a67 	vmov.f32	s3, s15
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7ff f88f 	bl	800d304 <nk_button_behavior>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <nk_combo_begin_text+0x13e>
        is_clicked = nk_true;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1f8:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800e1fc:	f003 0320 	and.w	r3, r3, #32
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00c      	beq.n	800e21e <nk_combo_begin_text+0x16a>
        background = &style->combo.active;
 800e204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e206:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 800e20a:	3318      	adds	r3, #24
 800e20c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_active;
 800e210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e216:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800e21a:	657b      	str	r3, [r7, #84]	; 0x54
 800e21c:	e020      	b.n	800e260 <nk_combo_begin_text+0x1ac>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e224:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800e228:	f003 0310 	and.w	r3, r3, #16
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00c      	beq.n	800e24a <nk_combo_begin_text+0x196>
        background = &style->combo.hover;
 800e230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e232:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800e236:	331c      	adds	r3, #28
 800e238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_hover;
 800e23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e242:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 800e246:	657b      	str	r3, [r7, #84]	; 0x54
 800e248:	e00a      	b.n	800e260 <nk_combo_begin_text+0x1ac>
    } else {
        background = &style->combo.normal;
 800e24a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e24c:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800e250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_normal;
 800e254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e25a:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 800e25e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    switch(background->type) {
 800e260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b02      	cmp	r3, #2
 800e268:	d02b      	beq.n	800e2c2 <nk_combo_begin_text+0x20e>
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	f300 80a1 	bgt.w	800e3b2 <nk_combo_begin_text+0x2fe>
 800e270:	2b00      	cmp	r3, #0
 800e272:	d04a      	beq.n	800e30a <nk_combo_begin_text+0x256>
 800e274:	2b01      	cmp	r3, #1
 800e276:	f040 809c 	bne.w	800e3b2 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 800e27a:	2300      	movs	r3, #0
 800e27c:	2200      	movs	r2, #0
 800e27e:	2100      	movs	r1, #0
 800e280:	2000      	movs	r0, #0
 800e282:	f7ff fd66 	bl	800dd52 <nk_rgba>
 800e286:	4603      	mov	r3, r0
 800e288:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 800e28a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e28c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800e290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e294:	3304      	adds	r3, #4
 800e296:	4a5b      	ldr	r2, [pc, #364]	; (800e404 <nk_combo_begin_text+0x350>)
 800e298:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800e29c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e2a0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800e2a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e2a8:	6812      	ldr	r2, [r2, #0]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	eeb0 0a46 	vmov.f32	s0, s12
 800e2b0:	eef0 0a66 	vmov.f32	s1, s13
 800e2b4:	eeb0 1a47 	vmov.f32	s2, s14
 800e2b8:	eef0 1a67 	vmov.f32	s3, s15
 800e2bc:	f001 ffb2 	bl	8010224 <nk_draw_image>
            break;
 800e2c0:	e077      	b.n	800e3b2 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	f7ff fd42 	bl	800dd52 <nk_rgba>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 800e2d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2d4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800e2d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2dc:	3304      	adds	r3, #4
 800e2de:	4a49      	ldr	r2, [pc, #292]	; (800e404 <nk_combo_begin_text+0x350>)
 800e2e0:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800e2e4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e2e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800e2ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e2f0:	6812      	ldr	r2, [r2, #0]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	eeb0 0a46 	vmov.f32	s0, s12
 800e2f8:	eef0 0a66 	vmov.f32	s1, s13
 800e2fc:	eeb0 1a47 	vmov.f32	s2, s14
 800e300:	eef0 1a67 	vmov.f32	s3, s15
 800e304:	f002 f880 	bl	8010408 <nk_draw_nine_slice>
            break;
 800e308:	e053      	b.n	800e3b2 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 800e30a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	653b      	str	r3, [r7, #80]	; 0x50
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 800e312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e314:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800e318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e31a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e31e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800e322:	edd3 5a00 	vldr	s11, [r3]
 800e326:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e32a:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800e32e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e332:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800e336:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e33a:	6859      	ldr	r1, [r3, #4]
 800e33c:	eeb0 2a65 	vmov.f32	s4, s11
 800e340:	eeb0 0a46 	vmov.f32	s0, s12
 800e344:	eef0 0a66 	vmov.f32	s1, s13
 800e348:	eeb0 1a47 	vmov.f32	s2, s14
 800e34c:	eef0 1a67 	vmov.f32	s3, s15
 800e350:	4610      	mov	r0, r2
 800e352:	f001 fc0d 	bl	800fb70 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 800e356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e358:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800e35c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e362:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800e366:	edd3 5a00 	vldr	s11, [r3]
 800e36a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e36c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e370:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800e374:	ed93 5a00 	vldr	s10, [r3]
 800e378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e37a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e37e:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800e382:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800e386:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800e38a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e38e:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	; 0x5d4
 800e392:	eef0 2a45 	vmov.f32	s5, s10
 800e396:	eeb0 2a65 	vmov.f32	s4, s11
 800e39a:	eeb0 0a46 	vmov.f32	s0, s12
 800e39e:	eef0 0a66 	vmov.f32	s1, s13
 800e3a2:	eeb0 1a47 	vmov.f32	s2, s14
 800e3a6:	eef0 1a67 	vmov.f32	s3, s15
 800e3aa:	4610      	mov	r0, r2
 800e3ac:	f001 fad8 	bl	800f960 <nk_stroke_rect>
            break;
 800e3b0:	bf00      	nop
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3b8:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800e3bc:	f003 0310 	and.w	r3, r3, #16
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d007      	beq.n	800e3d4 <nk_combo_begin_text+0x320>
            sym = style->combo.sym_hover;
 800e3c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ca:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 800e3ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e3d2:	e022      	b.n	800e41a <nk_combo_begin_text+0x366>
        else if (is_clicked)
 800e3d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d017      	beq.n	800e40c <nk_combo_begin_text+0x358>
            sym = style->combo.sym_active;
 800e3dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e2:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 800e3e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e3ea:	e016      	b.n	800e41a <nk_combo_begin_text+0x366>
 800e3ec:	080200c0 	.word	0x080200c0
 800e3f0:	080213b0 	.word	0x080213b0
 800e3f4:	080200c4 	.word	0x080200c4
 800e3f8:	08020108 	.word	0x08020108
 800e3fc:	080200e0 	.word	0x080200e0
 800e400:	080200f0 	.word	0x080200f0
 800e404:	0802139c 	.word	0x0802139c
 800e408:	00000000 	.word	0x00000000
        else
            sym = style->combo.sym_normal;
 800e40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e412:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 800e416:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;
 800e41a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bf14      	ite	ne
 800e422:	2301      	movne	r3, #1
 800e424:	2300      	moveq	r3, #0
 800e426:	b2db      	uxtb	r3, r3
 800e428:	66bb      	str	r3, [r7, #104]	; 0x68

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 800e42a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800e42e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e434:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800e438:	edd3 7a00 	vldr	s15, [r3]
 800e43c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e440:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e444:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 800e448:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800e44c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e450:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e454:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e462:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 800e466:	edd3 7a00 	vldr	s15, [r3]
 800e46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e46e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        button.y = header.y + style->combo.button_padding.y;
 800e472:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800e476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e47c:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800e480:	edd3 7a00 	vldr	s15, [r3]
 800e484:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e488:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        button.h = button.w;
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	637b      	str	r3, [r7, #52]	; 0x34

        content.x = button.x + style->combo.button.padding.x;
 800e490:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e49a:	f203 6364 	addw	r3, r3, #1636	; 0x664
 800e49e:	edd3 7a00 	vldr	s15, [r3]
 800e4a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4a6:	edc7 7a06 	vstr	s15, [r7, #24]
        content.y = button.y + style->combo.button.padding.y;
 800e4aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e4ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4b4:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800e4b8:	edd3 7a00 	vldr	s15, [r3]
 800e4bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4c0:	edc7 7a07 	vstr	s15, [r7, #28]
        content.w = button.w - 2 * style->combo.button.padding.x;
 800e4c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ce:	f203 6364 	addw	r3, r3, #1636	; 0x664
 800e4d2:	edd3 7a00 	vldr	s15, [r3]
 800e4d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e4da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4de:	edc7 7a08 	vstr	s15, [r7, #32]
        content.h = button.h - 2 * style->combo.button.padding.y;
 800e4e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e4e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ec:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800e4f0:	edd3 7a00 	vldr	s15, [r3]
 800e4f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e4f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 800e500:	ed5f 0a3f 	vldr	s1, [pc, #-252]	; 800e408 <nk_combo_begin_text+0x354>
 800e504:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 800e408 <nk_combo_begin_text+0x354>
 800e508:	f004 f940 	bl	801278c <nk_vec2>
 800e50c:	eeb0 7a40 	vmov.f32	s14, s0
 800e510:	eef0 7a60 	vmov.f32	s15, s1
 800e514:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800e518:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        label.x = header.x + style->combo.content_padding.x;
 800e51c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800e520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e526:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800e52a:	edd3 7a00 	vldr	s15, [r3]
 800e52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e532:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.y = header.y + style->combo.content_padding.y;
 800e536:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800e53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e540:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800e544:	edd3 7a00 	vldr	s15, [r3]
 800e548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e54c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.h = header.h - 2 * style->combo.content_padding.y;
 800e550:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800e554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e55a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800e55e:	edd3 7a00 	vldr	s15, [r3]
 800e562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e56a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        if (draw_button_symbol)
 800e56e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e570:	2b00      	cmp	r3, #0
 800e572:	d01a      	beq.n	800e5aa <nk_combo_begin_text+0x4f6>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 800e574:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e57e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800e582:	edd3 6a00 	vldr	s13, [r3]
 800e586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e58c:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800e590:	edd3 7a00 	vldr	s15, [r3]
 800e594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e59c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e5a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5a4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800e5a8:	e00e      	b.n	800e5c8 <nk_combo_begin_text+0x514>
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
 800e5aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800e5ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5b4:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800e5b8:	edd3 7a00 	vldr	s15, [r3]
 800e5bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e5c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        nk_widget_text(&win->buffer, label, selected, len, &text,
 800e5c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5ca:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800e5d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e5d8:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800e5dc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800e5e0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800e5e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	2311      	movs	r3, #17
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	6939      	ldr	r1, [r7, #16]
 800e5f4:	eeb0 0a46 	vmov.f32	s0, s12
 800e5f8:	eef0 0a66 	vmov.f32	s1, s13
 800e5fc:	eeb0 1a47 	vmov.f32	s2, s14
 800e600:	eef0 1a67 	vmov.f32	s3, s15
 800e604:	f00b fac0 	bl	8019b88 <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
 800e608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d01a      	beq.n	800e644 <nk_combo_begin_text+0x590>
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800e60e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e610:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e61a:	f8d3 5ad4 	ldr.w	r5, [r3, #2772]	; 0xad4
                &ctx->style.combo.button, sym, style->font);
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 800e624:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800e626:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e628:	6812      	ldr	r2, [r2, #0]
 800e62a:	f107 0418 	add.w	r4, r7, #24
 800e62e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e632:	9202      	str	r2, [sp, #8]
 800e634:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800e638:	9201      	str	r2, [sp, #4]
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	462b      	mov	r3, r5
 800e63e:	4622      	mov	r2, r4
 800e640:	f7ff f9a4 	bl	800d98c <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 800e644:	ed97 5a16 	vldr	s10, [r7, #88]	; 0x58
 800e648:	edd7 5a17 	vldr	s11, [r7, #92]	; 0x5c
 800e64c:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800e650:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800e654:	ed97 7a01 	vldr	s14, [r7, #4]
 800e658:	edd7 7a02 	vldr	s15, [r7, #8]
 800e65c:	eeb0 1a45 	vmov.f32	s2, s10
 800e660:	eef0 1a65 	vmov.f32	s3, s11
 800e664:	eeb0 2a46 	vmov.f32	s4, s12
 800e668:	eef0 2a66 	vmov.f32	s5, s13
 800e66c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e670:	eeb0 0a47 	vmov.f32	s0, s14
 800e674:	eef0 0a67 	vmov.f32	s1, s15
 800e678:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e67a:	6978      	ldr	r0, [r7, #20]
 800e67c:	f7ff fbfe 	bl	800de7c <nk_combo_begin>
 800e680:	4603      	mov	r3, r0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3788      	adds	r7, #136	; 0x88
 800e686:	46bd      	mov	sp, r7
 800e688:	bdb0      	pop	{r4, r5, r7, pc}
 800e68a:	bf00      	nop

0800e68c <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	eeb0 7a40 	vmov.f32	s14, s0
 800e69a:	eef0 7a60 	vmov.f32	s15, s1
 800e69e:	ed87 7a00 	vstr	s14, [r7]
 800e6a2:	edc7 7a01 	vstr	s15, [r7, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 800e6a6:	68b8      	ldr	r0, [r7, #8]
 800e6a8:	f00c fc46 	bl	801af38 <nk_strlen>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	ed97 7a00 	vldr	s14, [r7]
 800e6b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800e6b6:	eeb0 0a47 	vmov.f32	s0, s14
 800e6ba:	eef0 0a67 	vmov.f32	s1, s15
 800e6be:	461a      	mov	r2, r3
 800e6c0:	68b9      	ldr	r1, [r7, #8]
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f7ff fcf6 	bl	800e0b4 <nk_combo_begin_text>
 800e6c8:	4603      	mov	r3, r0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <nk_combo_item_label>:
{
    return nk_contextual_item_text(ctx, text, len, align);
}
NK_API nk_bool
nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b084      	sub	sp, #16
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	60b9      	str	r1, [r7, #8]
 800e6dc:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_label(ctx, label, align);
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	68b9      	ldr	r1, [r7, #8]
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f000 feaa 	bl	800f43c <nk_contextual_item_label>
 800e6e8:	4603      	mov	r3, r0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <nk_combo_end>:
    const char *label, nk_flags alignment)
{
    return nk_contextual_item_symbol_label(ctx, sym, label, alignment);
}
NK_API void nk_combo_end(struct nk_context *ctx)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
    nk_contextual_end(ctx);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 ff00 	bl	800f500 <nk_contextual_end>
}
 800e700:	bf00      	nop
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b08c      	sub	sp, #48	; 0x30
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6178      	str	r0, [r7, #20]
 800e710:	6139      	str	r1, [r7, #16]
 800e712:	60fa      	str	r2, [r7, #12]
 800e714:	60bb      	str	r3, [r7, #8]
 800e716:	eeb0 7a40 	vmov.f32	s14, s0
 800e71a:	eef0 7a60 	vmov.f32	s15, s1
 800e71e:	ed87 7a00 	vstr	s14, [r7]
 800e722:	edc7 7a01 	vstr	s15, [r7, #4]
    int i = 0;
 800e726:	2300      	movs	r3, #0
 800e728:	62fb      	str	r3, [r7, #44]	; 0x2c
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d106      	bne.n	800e73e <nk_combo+0x36>
 800e730:	4b61      	ldr	r3, [pc, #388]	; (800e8b8 <nk_combo+0x1b0>)
 800e732:	4a62      	ldr	r2, [pc, #392]	; (800e8bc <nk_combo+0x1b4>)
 800e734:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800e738:	4861      	ldr	r0, [pc, #388]	; (800e8c0 <nk_combo+0x1b8>)
 800e73a:	f00e f88f 	bl	801c85c <__assert_func>
    NK_ASSERT(items);
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d106      	bne.n	800e752 <nk_combo+0x4a>
 800e744:	4b5f      	ldr	r3, [pc, #380]	; (800e8c4 <nk_combo+0x1bc>)
 800e746:	4a5d      	ldr	r2, [pc, #372]	; (800e8bc <nk_combo+0x1b4>)
 800e748:	f240 21c1 	movw	r1, #705	; 0x2c1
 800e74c:	485c      	ldr	r0, [pc, #368]	; (800e8c0 <nk_combo+0x1b8>)
 800e74e:	f00e f885 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e758:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d106      	bne.n	800e76e <nk_combo+0x66>
 800e760:	4b59      	ldr	r3, [pc, #356]	; (800e8c8 <nk_combo+0x1c0>)
 800e762:	4a56      	ldr	r2, [pc, #344]	; (800e8bc <nk_combo+0x1b4>)
 800e764:	f240 21c2 	movw	r1, #706	; 0x2c2
 800e768:	4855      	ldr	r0, [pc, #340]	; (800e8c0 <nk_combo+0x1b8>)
 800e76a:	f00e f877 	bl	801c85c <__assert_func>
    if (!ctx || !items ||!count)
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <nk_combo+0x78>
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d002      	beq.n	800e780 <nk_combo+0x78>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <nk_combo+0x7c>
        return selected;
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	e094      	b.n	800e8ae <nk_combo+0x1a6>

    item_spacing = ctx->style.window.spacing;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e78a:	461a      	mov	r2, r3
 800e78c:	f107 0320 	add.w	r3, r7, #32
 800e790:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 800e794:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e798:	e883 0003 	stmia.w	r3, {r0, r1}
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e7a8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800e7ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	f004 fba3 	bl	8012f00 <nk_panel_get_padding>
 800e7ba:	eeb0 7a40 	vmov.f32	s14, s0
 800e7be:	eef0 7a60 	vmov.f32	s15, s1
 800e7c2:	ed87 7a06 	vstr	s14, [r7, #24]
 800e7c6:	edc7 7a07 	vstr	s15, [r7, #28]
    max_height = count * item_height + count * (int)item_spacing.y;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7ce:	fb03 f202 	mul.w	r2, r3, r2
 800e7d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e7d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7da:	ee17 1a90 	vmov	r1, s15
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	fb01 f303 	mul.w	r3, r1, r3
 800e7e4:	4413      	add	r3, r2
 800e7e6:	62bb      	str	r3, [r7, #40]	; 0x28
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 800e7e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e7ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7f0:	ee17 2a90 	vmov	r2, s15
 800e7f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800e7f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7fc:	ee17 3a90 	vmov	r3, s15
 800e800:	4413      	add	r3, r2
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e806:	4413      	add	r3, r2
 800e808:	62bb      	str	r3, [r7, #40]	; 0x28
    size.y = NK_MIN(size.y, (float)max_height);
 800e80a:	ed97 7a01 	vldr	s14, [r7, #4]
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	ee07 3a90 	vmov	s15, r3
 800e814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e820:	d502      	bpl.n	800e828 <nk_combo+0x120>
 800e822:	edd7 7a01 	vldr	s15, [r7, #4]
 800e826:	e004      	b.n	800e832 <nk_combo+0x12a>
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	ee07 3a90 	vmov	s15, r3
 800e82e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e832:	edc7 7a01 	vstr	s15, [r7, #4]
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	693a      	ldr	r2, [r7, #16]
 800e83c:	4413      	add	r3, r2
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	ed97 7a00 	vldr	s14, [r7]
 800e844:	edd7 7a01 	vldr	s15, [r7, #4]
 800e848:	eeb0 0a47 	vmov.f32	s0, s14
 800e84c:	eef0 0a67 	vmov.f32	s1, s15
 800e850:	4619      	mov	r1, r3
 800e852:	6978      	ldr	r0, [r7, #20]
 800e854:	f7ff ff1a 	bl	800e68c <nk_combo_begin_label>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d026      	beq.n	800e8ac <nk_combo+0x1a4>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 800e85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e860:	ee07 3a90 	vmov	s15, r3
 800e864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e868:	2101      	movs	r1, #1
 800e86a:	eeb0 0a67 	vmov.f32	s0, s15
 800e86e:	6978      	ldr	r0, [r7, #20]
 800e870:	f003 f972 	bl	8011b58 <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 800e874:	2300      	movs	r3, #0
 800e876:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e878:	e011      	b.n	800e89e <nk_combo+0x196>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	4413      	add	r3, r2
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2211      	movs	r2, #17
 800e886:	4619      	mov	r1, r3
 800e888:	6978      	ldr	r0, [r7, #20]
 800e88a:	f7ff ff22 	bl	800e6d2 <nk_combo_item_label>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <nk_combo+0x190>
                selected = i;
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < count; ++i) {
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	3301      	adds	r3, #1
 800e89c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	dbe9      	blt.n	800e87a <nk_combo+0x172>
        }
        nk_combo_end(ctx);
 800e8a6:	6978      	ldr	r0, [r7, #20]
 800e8a8:	f7ff ff23 	bl	800e6f2 <nk_combo_end>
    }
    return selected;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3730      	adds	r7, #48	; 0x30
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	080200c0 	.word	0x080200c0
 800e8bc:	080213c4 	.word	0x080213c4
 800e8c0:	080200c4 	.word	0x080200c4
 800e8c4:	08020114 	.word	0x08020114
 800e8c8:	080200e0 	.word	0x080200e0

0800e8cc <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d105      	bne.n	800e8e8 <nk_setup+0x1c>
 800e8dc:	4b11      	ldr	r3, [pc, #68]	; (800e924 <nk_setup+0x58>)
 800e8de:	4a12      	ldr	r2, [pc, #72]	; (800e928 <nk_setup+0x5c>)
 800e8e0:	210c      	movs	r1, #12
 800e8e2:	4812      	ldr	r0, [pc, #72]	; (800e92c <nk_setup+0x60>)
 800e8e4:	f00d ffba 	bl	801c85c <__assert_func>
    if (!ctx) return;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d016      	beq.n	800e91c <nk_setup+0x50>
    nk_zero_struct(*ctx);
 800e8ee:	f243 6168 	movw	r1, #13928	; 0x3668
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f00c fb02 	bl	801aefc <nk_zero>
    nk_style_default(ctx);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f008 ff1b 	bl	8017734 <nk_style_default>
    ctx->seq = 1;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e904:	461a      	mov	r2, r3
 800e906:	2301      	movs	r3, #1
 800e908:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
    if (font) ctx->style.font = font;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d005      	beq.n	800e91e <nk_setup+0x52>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	683a      	ldr	r2, [r7, #0]
 800e916:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800e91a:	e000      	b.n	800e91e <nk_setup+0x52>
    if (!ctx) return;
 800e91c:	bf00      	nop
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	08020148 	.word	0x08020148
 800e928:	080213e4 	.word	0x080213e4
 800e92c:	0802014c 	.word	0x0802014c

0800e930 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 800e930:	b5b0      	push	{r4, r5, r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
 800e93c:	603b      	str	r3, [r7, #0]
    NK_ASSERT(cmds);
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d105      	bne.n	800e950 <nk_init_custom+0x20>
 800e944:	4b2a      	ldr	r3, [pc, #168]	; (800e9f0 <nk_init_custom+0xc0>)
 800e946:	4a2b      	ldr	r2, [pc, #172]	; (800e9f4 <nk_init_custom+0xc4>)
 800e948:	2130      	movs	r1, #48	; 0x30
 800e94a:	482b      	ldr	r0, [pc, #172]	; (800e9f8 <nk_init_custom+0xc8>)
 800e94c:	f00d ff86 	bl	801c85c <__assert_func>
    NK_ASSERT(pool);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d105      	bne.n	800e962 <nk_init_custom+0x32>
 800e956:	4b29      	ldr	r3, [pc, #164]	; (800e9fc <nk_init_custom+0xcc>)
 800e958:	4a26      	ldr	r2, [pc, #152]	; (800e9f4 <nk_init_custom+0xc4>)
 800e95a:	2131      	movs	r1, #49	; 0x31
 800e95c:	4826      	ldr	r0, [pc, #152]	; (800e9f8 <nk_init_custom+0xc8>)
 800e95e:	f00d ff7d 	bl	801c85c <__assert_func>
    if (!cmds || !pool) return 0;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <nk_init_custom+0x3e>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <nk_init_custom+0x42>
 800e96e:	2300      	movs	r3, #0
 800e970:	e039      	b.n	800e9e6 <nk_init_custom+0xb6>

    nk_setup(ctx, font);
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7ff ffa9 	bl	800e8cc <nk_setup>
    ctx->memory = *cmds;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e980:	461a      	mov	r2, r3
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f602 248c 	addw	r4, r2, #2700	; 0xa8c
 800e988:	461d      	mov	r5, r3
 800e98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e98e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e99a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	7f1b      	ldrb	r3, [r3, #28]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d10b      	bne.n	800e9be <nk_init_custom+0x8e>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800e9ac:	3324      	adds	r3, #36	; 0x24
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	6a11      	ldr	r1, [r2, #32]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f006 fbf4 	bl	80151a4 <nk_pool_init_fixed>
 800e9bc:	e00b      	b.n	800e9d6 <nk_init_custom+0xa6>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3310      	adds	r3, #16
 800e9c2:	617b      	str	r3, [r7, #20]
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800e9ca:	3324      	adds	r3, #36	; 0x24
 800e9cc:	2210      	movs	r2, #16
 800e9ce:	6979      	ldr	r1, [r7, #20]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f006 fbbb 	bl	801514c <nk_pool_init>
    }
    ctx->use_pool = nk_true;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800e9dc:	461a      	mov	r2, r3
 800e9de:	2301      	movs	r3, #1
 800e9e0:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
    return 1;
 800e9e4:	2301      	movs	r3, #1
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	08020174 	.word	0x08020174
 800e9f4:	080213f0 	.word	0x080213f0
 800e9f8:	0802014c 	.word	0x0802014c
 800e9fc:	0802017c 	.word	0x0802017c

0800ea00 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d105      	bne.n	800ea1a <nk_clear+0x1a>
 800ea0e:	4b96      	ldr	r3, [pc, #600]	; (800ec68 <nk_clear+0x268>)
 800ea10:	4a96      	ldr	r2, [pc, #600]	; (800ec6c <nk_clear+0x26c>)
 800ea12:	2172      	movs	r1, #114	; 0x72
 800ea14:	4896      	ldr	r0, [pc, #600]	; (800ec70 <nk_clear+0x270>)
 800ea16:	f00d ff21 	bl	801c85c <__assert_func>

    if (!ctx) return;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 811e 	beq.w	800ec5e <nk_clear+0x25e>
    if (ctx->use_pool)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ea28:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d007      	beq.n	800ea40 <nk_clear+0x40>
        nk_buffer_clear(&ctx->memory);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800ea36:	330c      	adds	r3, #12
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fe faab 	bl	800cf94 <nk_buffer_clear>
 800ea3e:	e007      	b.n	800ea50 <nk_clear+0x50>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800ea46:	330c      	adds	r3, #12
 800ea48:	2100      	movs	r1, #0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe fa3a 	bl	800cec4 <nk_buffer_reset>

    ctx->build = 0;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ea56:	461a      	mov	r2, r3
 800ea58:	2300      	movs	r3, #0
 800ea5a:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    ctx->memory.calls = 0;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea64:	461a      	mov	r2, r3
 800ea66:	2300      	movs	r3, #0
 800ea68:	f8c2 3ac0 	str.w	r3, [r2, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea72:	461a      	mov	r2, r3
 800ea74:	2300      	movs	r3, #0
 800ea76:	f8c2 3ad4 	str.w	r3, [r2, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 800ea8c:	3334      	adds	r3, #52	; 0x34
 800ea8e:	2228      	movs	r2, #40	; 0x28
 800ea90:	2100      	movs	r1, #0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f00c f9c1 	bl	801ae1a <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ea9e:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 800eaa2:	617b      	str	r3, [r7, #20]
    while (iter) {
 800eaa4:	e0cb      	b.n	800ec3e <nk_clear+0x23e>
        /* make sure valid minimized windows do not get removed */
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eaaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d013      	beq.n	800eada <nk_clear+0xda>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10d      	bne.n	800eada <nk_clear+0xda>
            iter->seq == ctx->seq) {
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eac8:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
            !(iter->flags & NK_WINDOW_CLOSED) &&
 800eacc:	429a      	cmp	r2, r3
 800eace:	d104      	bne.n	800eada <nk_clear+0xda>
            iter = iter->next;
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800ead6:	617b      	str	r3, [r7, #20]
            continue;
 800ead8:	e0b1      	b.n	800ec3e <nk_clear+0x23e>
        }
        /* remove hotness from hidden or closed windows*/
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d105      	bne.n	800eaf2 <nk_clear+0xf2>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eaea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d03a      	beq.n	800eb68 <nk_clear+0x168>
            iter == ctx->active) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eaf8:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
            (iter->flags & NK_WINDOW_CLOSED)) &&
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d132      	bne.n	800eb68 <nk_clear+0x168>
            ctx->active = iter->prev;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800eb0e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = iter->prev;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800eb1e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (!ctx->end)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb28:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d106      	bne.n	800eb3e <nk_clear+0x13e>
                ctx->begin = 0;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb36:	461a      	mov	r2, r3
 800eb38:	2300      	movs	r3, #0
 800eb3a:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (ctx->active)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb44:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00d      	beq.n	800eb68 <nk_clear+0x168>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb52:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800eb56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb5e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800eb62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb66:	649a      	str	r2, [r3, #72]	; 0x48
        }
        /* free unused popup windows */
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d015      	beq.n	800eb9e <nk_clear+0x19e>
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb80:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d00a      	beq.n	800eb9e <nk_clear+0x19e>
            nk_free_window(ctx, iter->popup.win);
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f00c fde4 	bl	801b75e <nk_free_window>
            iter->popup.win = 0;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800eba4:	613b      	str	r3, [r7, #16]
        while (it) {
 800eba6:	e025      	b.n	800ebf4 <nk_clear+0x1f4>
            n = it->next;
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800ebae:	60bb      	str	r3, [r7, #8]
            if (it->seq != ctx->seq) {
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ebba:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d016      	beq.n	800ebf0 <nk_clear+0x1f0>
                nk_remove_table(iter, it);
 800ebc2:	6939      	ldr	r1, [r7, #16]
 800ebc4:	6978      	ldr	r0, [r7, #20]
 800ebc6:	f00a fef0 	bl	80199aa <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 800ebca:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800ebce:	6938      	ldr	r0, [r7, #16]
 800ebd0:	f00c f994 	bl	801aefc <nk_zero>
                nk_free_table(ctx, it);
 800ebd4:	6939      	ldr	r1, [r7, #16]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f00a fe95 	bl	8019906 <nk_free_table>
                if (it == iter->tables)
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d103      	bne.n	800ebf0 <nk_clear+0x1f0>
                    iter->tables = n;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
            } it = n;
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	613b      	str	r3, [r7, #16]
        while (it) {
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d1d6      	bne.n	800eba8 <nk_clear+0x1a8>
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ec04:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d105      	bne.n	800ec18 <nk_clear+0x218>
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00e      	beq.n	800ec36 <nk_clear+0x236>
            next = iter->next;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800ec1e:	60fb      	str	r3, [r7, #12]
            nk_remove_window(ctx, iter);
 800ec20:	6979      	ldr	r1, [r7, #20]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f00c ff1c 	bl	801ba60 <nk_remove_window>
            nk_free_window(ctx, iter);
 800ec28:	6979      	ldr	r1, [r7, #20]
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f00c fd97 	bl	801b75e <nk_free_window>
            iter = next;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	617b      	str	r3, [r7, #20]
 800ec34:	e003      	b.n	800ec3e <nk_clear+0x23e>
        } else iter = iter->next;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800ec3c:	617b      	str	r3, [r7, #20]
    while (iter) {
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f47f af30 	bne.w	800eaa6 <nk_clear+0xa6>
    }
    ctx->seq++;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ec4c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800ec50:	3301      	adds	r3, #1
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800ec58:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
 800ec5c:	e000      	b.n	800ec60 <nk_clear+0x260>
    if (!ctx) return;
 800ec5e:	bf00      	nop
}
 800ec60:	3718      	adds	r7, #24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	08020148 	.word	0x08020148
 800ec6c:	08021400 	.word	0x08021400
 800ec70:	0802014c 	.word	0x0802014c

0800ec74 <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 800ec74:	b590      	push	{r4, r7, lr}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d105      	bne.n	800ec90 <nk_start_buffer+0x1c>
 800ec84:	4b17      	ldr	r3, [pc, #92]	; (800ece4 <nk_start_buffer+0x70>)
 800ec86:	4a18      	ldr	r2, [pc, #96]	; (800ece8 <nk_start_buffer+0x74>)
 800ec88:	21b2      	movs	r1, #178	; 0xb2
 800ec8a:	4818      	ldr	r0, [pc, #96]	; (800ecec <nk_start_buffer+0x78>)
 800ec8c:	f00d fde6 	bl	801c85c <__assert_func>
    NK_ASSERT(buffer);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d105      	bne.n	800eca2 <nk_start_buffer+0x2e>
 800ec96:	4b16      	ldr	r3, [pc, #88]	; (800ecf0 <nk_start_buffer+0x7c>)
 800ec98:	4a13      	ldr	r2, [pc, #76]	; (800ece8 <nk_start_buffer+0x74>)
 800ec9a:	21b3      	movs	r1, #179	; 0xb3
 800ec9c:	4813      	ldr	r0, [pc, #76]	; (800ecec <nk_start_buffer+0x78>)
 800ec9e:	f00d fddd 	bl	801c85c <__assert_func>
    if (!ctx || !buffer) return;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d019      	beq.n	800ecdc <nk_start_buffer+0x68>
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d016      	beq.n	800ecdc <nk_start_buffer+0x68>
    buffer->begin = ctx->memory.allocated;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ecb4:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	61da      	str	r2, [r3, #28]
    buffer->end = buffer->begin;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	69da      	ldr	r2, [r3, #28]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	621a      	str	r2, [r3, #32]
    buffer->last = buffer->begin;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	69da      	ldr	r2, [r3, #28]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->clip = nk_null_rect;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	4a09      	ldr	r2, [pc, #36]	; (800ecf4 <nk_start_buffer+0x80>)
 800ecd0:	1d1c      	adds	r4, r3, #4
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ecda:	e000      	b.n	800ecde <nk_start_buffer+0x6a>
    if (!ctx || !buffer) return;
 800ecdc:	bf00      	nop
}
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd90      	pop	{r4, r7, pc}
 800ece4:	08020148 	.word	0x08020148
 800ece8:	0802140c 	.word	0x0802140c
 800ecec:	0802014c 	.word	0x0802014c
 800ecf0:	0802018c 	.word	0x0802018c
 800ecf4:	080213d0 	.word	0x080213d0

0800ecf8 <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d105      	bne.n	800ed14 <nk_start+0x1c>
 800ed08:	4b0c      	ldr	r3, [pc, #48]	; (800ed3c <nk_start+0x44>)
 800ed0a:	4a0d      	ldr	r2, [pc, #52]	; (800ed40 <nk_start+0x48>)
 800ed0c:	21bd      	movs	r1, #189	; 0xbd
 800ed0e:	480d      	ldr	r0, [pc, #52]	; (800ed44 <nk_start+0x4c>)
 800ed10:	f00d fda4 	bl	801c85c <__assert_func>
    NK_ASSERT(win);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <nk_start+0x2e>
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	; (800ed48 <nk_start+0x50>)
 800ed1c:	4a08      	ldr	r2, [pc, #32]	; (800ed40 <nk_start+0x48>)
 800ed1e:	21be      	movs	r1, #190	; 0xbe
 800ed20:	4808      	ldr	r0, [pc, #32]	; (800ed44 <nk_start+0x4c>)
 800ed22:	f00d fd9b 	bl	801c85c <__assert_func>
    nk_start_buffer(ctx, &win->buffer);
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	3364      	adds	r3, #100	; 0x64
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff ffa1 	bl	800ec74 <nk_start_buffer>
}
 800ed32:	bf00      	nop
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	08020148 	.word	0x08020148
 800ed40:	0802141c 	.word	0x0802141c
 800ed44:	0802014c 	.word	0x0802014c
 800ed48:	08020194 	.word	0x08020194

0800ed4c <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d105      	bne.n	800ed68 <nk_start_popup+0x1c>
 800ed5c:	4b19      	ldr	r3, [pc, #100]	; (800edc4 <nk_start_popup+0x78>)
 800ed5e:	4a1a      	ldr	r2, [pc, #104]	; (800edc8 <nk_start_popup+0x7c>)
 800ed60:	21c5      	movs	r1, #197	; 0xc5
 800ed62:	481a      	ldr	r0, [pc, #104]	; (800edcc <nk_start_popup+0x80>)
 800ed64:	f00d fd7a 	bl	801c85c <__assert_func>
    NK_ASSERT(win);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d105      	bne.n	800ed7a <nk_start_popup+0x2e>
 800ed6e:	4b18      	ldr	r3, [pc, #96]	; (800edd0 <nk_start_popup+0x84>)
 800ed70:	4a15      	ldr	r2, [pc, #84]	; (800edc8 <nk_start_popup+0x7c>)
 800ed72:	21c6      	movs	r1, #198	; 0xc6
 800ed74:	4815      	ldr	r0, [pc, #84]	; (800edcc <nk_start_popup+0x80>)
 800ed76:	f00d fd71 	bl	801c85c <__assert_func>
    if (!ctx || !win) return;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d01d      	beq.n	800edbc <nk_start_popup+0x70>
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d01a      	beq.n	800edbc <nk_start_popup+0x70>

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800ed8c:	60fb      	str	r3, [r7, #12]
    buf->begin = win->buffer.end;
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	601a      	str	r2, [r3, #0]
    buf->end = win->buffer.end;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	60da      	str	r2, [r3, #12]
    buf->parent = win->buffer.last;
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	605a      	str	r2, [r3, #4]
    buf->last = buf->begin;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	609a      	str	r2, [r3, #8]
    buf->active = nk_true;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2201      	movs	r2, #1
 800edb8:	611a      	str	r2, [r3, #16]
 800edba:	e000      	b.n	800edbe <nk_start_popup+0x72>
    if (!ctx || !win) return;
 800edbc:	bf00      	nop
}
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	08020148 	.word	0x08020148
 800edc8:	08021428 	.word	0x08021428
 800edcc:	0802014c 	.word	0x0802014c
 800edd0:	08020194 	.word	0x08020194

0800edd4 <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d105      	bne.n	800edf0 <nk_finish_popup+0x1c>
 800ede4:	4b13      	ldr	r3, [pc, #76]	; (800ee34 <nk_finish_popup+0x60>)
 800ede6:	4a14      	ldr	r2, [pc, #80]	; (800ee38 <nk_finish_popup+0x64>)
 800ede8:	21d5      	movs	r1, #213	; 0xd5
 800edea:	4814      	ldr	r0, [pc, #80]	; (800ee3c <nk_finish_popup+0x68>)
 800edec:	f00d fd36 	bl	801c85c <__assert_func>
    NK_ASSERT(win);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d105      	bne.n	800ee02 <nk_finish_popup+0x2e>
 800edf6:	4b12      	ldr	r3, [pc, #72]	; (800ee40 <nk_finish_popup+0x6c>)
 800edf8:	4a0f      	ldr	r2, [pc, #60]	; (800ee38 <nk_finish_popup+0x64>)
 800edfa:	21d6      	movs	r1, #214	; 0xd6
 800edfc:	480f      	ldr	r0, [pc, #60]	; (800ee3c <nk_finish_popup+0x68>)
 800edfe:	f00d fd2d 	bl	801c85c <__assert_func>
    if (!ctx || !win) return;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d011      	beq.n	800ee2c <nk_finish_popup+0x58>
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00e      	beq.n	800ee2c <nk_finish_popup+0x58>

    buf = &win->popup.buf;
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800ee14:	60fb      	str	r3, [r7, #12]
    buf->last = win->buffer.last;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	609a      	str	r2, [r3, #8]
    buf->end = win->buffer.end;
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	60da      	str	r2, [r3, #12]
 800ee2a:	e000      	b.n	800ee2e <nk_finish_popup+0x5a>
    if (!ctx || !win) return;
 800ee2c:	bf00      	nop
}
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	08020148 	.word	0x08020148
 800ee38:	08021438 	.word	0x08021438
 800ee3c:	0802014c 	.word	0x0802014c
 800ee40:	08020194 	.word	0x08020194

0800ee44 <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d105      	bne.n	800ee60 <nk_finish_buffer+0x1c>
 800ee54:	4b10      	ldr	r3, [pc, #64]	; (800ee98 <nk_finish_buffer+0x54>)
 800ee56:	4a11      	ldr	r2, [pc, #68]	; (800ee9c <nk_finish_buffer+0x58>)
 800ee58:	21e0      	movs	r1, #224	; 0xe0
 800ee5a:	4811      	ldr	r0, [pc, #68]	; (800eea0 <nk_finish_buffer+0x5c>)
 800ee5c:	f00d fcfe 	bl	801c85c <__assert_func>
    NK_ASSERT(buffer);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d105      	bne.n	800ee72 <nk_finish_buffer+0x2e>
 800ee66:	4b0f      	ldr	r3, [pc, #60]	; (800eea4 <nk_finish_buffer+0x60>)
 800ee68:	4a0c      	ldr	r2, [pc, #48]	; (800ee9c <nk_finish_buffer+0x58>)
 800ee6a:	21e1      	movs	r1, #225	; 0xe1
 800ee6c:	480c      	ldr	r0, [pc, #48]	; (800eea0 <nk_finish_buffer+0x5c>)
 800ee6e:	f00d fcf5 	bl	801c85c <__assert_func>
    if (!ctx || !buffer) return;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00a      	beq.n	800ee8e <nk_finish_buffer+0x4a>
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d007      	beq.n	800ee8e <nk_finish_buffer+0x4a>
    buffer->end = ctx->memory.allocated;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee84:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	621a      	str	r2, [r3, #32]
 800ee8c:	e000      	b.n	800ee90 <nk_finish_buffer+0x4c>
    if (!ctx || !buffer) return;
 800ee8e:	bf00      	nop
}
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	08020148 	.word	0x08020148
 800ee9c:	08021448 	.word	0x08021448
 800eea0:	0802014c 	.word	0x0802014c
 800eea4:	0802018c 	.word	0x0802018c

0800eea8 <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d105      	bne.n	800eec4 <nk_finish+0x1c>
 800eeb8:	4b1c      	ldr	r3, [pc, #112]	; (800ef2c <nk_finish+0x84>)
 800eeba:	4a1d      	ldr	r2, [pc, #116]	; (800ef30 <nk_finish+0x88>)
 800eebc:	21ec      	movs	r1, #236	; 0xec
 800eebe:	481d      	ldr	r0, [pc, #116]	; (800ef34 <nk_finish+0x8c>)
 800eec0:	f00d fccc 	bl	801c85c <__assert_func>
    NK_ASSERT(win);
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d105      	bne.n	800eed6 <nk_finish+0x2e>
 800eeca:	4b1b      	ldr	r3, [pc, #108]	; (800ef38 <nk_finish+0x90>)
 800eecc:	4a18      	ldr	r2, [pc, #96]	; (800ef30 <nk_finish+0x88>)
 800eece:	21ed      	movs	r1, #237	; 0xed
 800eed0:	4818      	ldr	r0, [pc, #96]	; (800ef34 <nk_finish+0x8c>)
 800eed2:	f00d fcc3 	bl	801c85c <__assert_func>
    if (!ctx || !win) return;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d021      	beq.n	800ef20 <nk_finish+0x78>
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d01e      	beq.n	800ef20 <nk_finish+0x78>
    nk_finish_buffer(ctx, &win->buffer);
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	3364      	adds	r3, #100	; 0x64
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f7ff ffab 	bl	800ee44 <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d015      	beq.n	800ef24 <nk_finish+0x7c>

    buf = &win->popup.buf;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800eefe:	617b      	str	r3, [r7, #20]
    memory = ctx->memory.memory.ptr;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef06:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800ef0a:	613b      	str	r3, [r7, #16]
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	693a      	ldr	r2, [r7, #16]
 800ef12:	4413      	add	r3, r2
 800ef14:	60fb      	str	r3, [r7, #12]
    parent_last->next = buf->end;
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	68da      	ldr	r2, [r3, #12]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	605a      	str	r2, [r3, #4]
 800ef1e:	e002      	b.n	800ef26 <nk_finish+0x7e>
    if (!ctx || !win) return;
 800ef20:	bf00      	nop
 800ef22:	e000      	b.n	800ef26 <nk_finish+0x7e>
    if (!win->popup.buf.active) return;
 800ef24:	bf00      	nop
}
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	08020148 	.word	0x08020148
 800ef30:	0802145c 	.word	0x0802145c
 800ef34:	0802014c 	.word	0x0802014c
 800ef38:	08020194 	.word	0x08020194

0800ef3c <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08e      	sub	sp, #56	; 0x38
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
    struct nk_window *it = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command *cmd = 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	633b      	str	r3, [r7, #48]	; 0x30
    nk_byte *buffer = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d105      	bne.n	800ef66 <nk_build+0x2a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d05d      	beq.n	800f02c <nk_build+0xf0>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d158      	bne.n	800f02c <nk_build+0xf0>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d053      	beq.n	800f02c <nk_build+0xf0>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 800ef92:	3334      	adds	r3, #52	; 0x34
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	f502 51d4 	add.w	r1, r2, #6784	; 0x1a80
 800ef9a:	310c      	adds	r1, #12
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 fb94 	bl	800f6cc <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 800efaa:	3334      	adds	r3, #52	; 0x34
 800efac:	4619      	mov	r1, r3
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7ff fe60 	bl	800ec74 <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 800efba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbc:	edd3 7a06 	vldr	s15, [r3, #24]
 800efc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efc4:	edc7 7a03 	vstr	s15, [r7, #12]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 800efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd0:	edd3 7a07 	vldr	s15, [r3, #28]
 800efd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efd8:	edc7 7a04 	vstr	s15, [r7, #16]
        mouse_bounds.w = cursor->size.x;
 800efdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efde:	691b      	ldr	r3, [r3, #16]
 800efe0:	617b      	str	r3, [r7, #20]
        mouse_bounds.h = cursor->size.y;
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	695b      	ldr	r3, [r3, #20]
 800efe6:	61bb      	str	r3, [r7, #24]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 800efee:	3334      	adds	r3, #52	; 0x34
 800eff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eff2:	4a62      	ldr	r2, [pc, #392]	; (800f17c <nk_build+0x240>)
 800eff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800eff8:	edd7 6a04 	vldr	s13, [r7, #16]
 800effc:	ed97 7a05 	vldr	s14, [r7, #20]
 800f000:	edd7 7a06 	vldr	s15, [r7, #24]
 800f004:	6812      	ldr	r2, [r2, #0]
 800f006:	eeb0 0a46 	vmov.f32	s0, s12
 800f00a:	eef0 0a66 	vmov.f32	s1, s13
 800f00e:	eeb0 1a47 	vmov.f32	s2, s14
 800f012:	eef0 1a67 	vmov.f32	s3, s15
 800f016:	4618      	mov	r0, r3
 800f018:	f001 f904 	bl	8010224 <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 800f022:	3334      	adds	r3, #52	; 0x34
 800f024:	4619      	mov	r1, r3
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7ff ff0c 	bl	800ee44 <nk_finish_buffer>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f032:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 800f036:	637b      	str	r3, [r7, #52]	; 0x34
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f03e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800f042:	62bb      	str	r3, [r7, #40]	; 0x28
    while (it != 0) {
 800f044:	e04d      	b.n	800f0e2 <nk_build+0x1a6>
        struct nk_window *next = it->next;
 800f046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f048:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f04c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 800f04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f050:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d03c      	beq.n	800f0d8 <nk_build+0x19c>
 800f05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f066:	2b00      	cmp	r3, #0
 800f068:	d136      	bne.n	800f0d8 <nk_build+0x19c>
            it->seq != ctx->seq)
 800f06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f074:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 800f078:	429a      	cmp	r2, r3
 800f07a:	d12d      	bne.n	800f0d8 <nk_build+0x19c>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 800f07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f084:	4413      	add	r3, r2
 800f086:	633b      	str	r3, [r7, #48]	; 0x30
        while (next && ((next->buffer.last == next->buffer.begin) ||
 800f088:	e003      	b.n	800f092 <nk_build+0x156>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f090:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (next && ((next->buffer.last == next->buffer.begin) ||
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	2b00      	cmp	r3, #0
 800f096:	d016      	beq.n	800f0c6 <nk_build+0x18a>
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d0f0      	beq.n	800f08a <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        while (next && ((next->buffer.last == next->buffer.begin) ||
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1ea      	bne.n	800f08a <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f0be:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d1e1      	bne.n	800f08a <nk_build+0x14e>

        if (next) cmd->next = next->buffer.begin;
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d007      	beq.n	800f0dc <nk_build+0x1a0>
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	605a      	str	r2, [r3, #4]
 800f0d6:	e002      	b.n	800f0de <nk_build+0x1a2>
            goto cont;
 800f0d8:	bf00      	nop
 800f0da:	e000      	b.n	800f0de <nk_build+0x1a2>
        cont: it = next;
 800f0dc:	bf00      	nop
 800f0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e0:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 800f0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1ae      	bne.n	800f046 <nk_build+0x10a>
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f0ee:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 800f0f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 800f0f4:	e01c      	b.n	800f130 <nk_build+0x1f4>
        struct nk_window *next = it->next;
 800f0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0f8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f0fc:	623b      	str	r3, [r7, #32]
        struct nk_popup_buffer *buf;
        if (!it->popup.buf.active)
 800f0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f100:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f104:	2b00      	cmp	r3, #0
 800f106:	d010      	beq.n	800f12a <nk_build+0x1ee>
            goto skip;

        buf = &it->popup.buf;
 800f108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800f10e:	61fb      	str	r3, [r7, #28]
        cmd->next = buf->begin;
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	605a      	str	r2, [r3, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f11e:	4413      	add	r3, r2
 800f120:	633b      	str	r3, [r7, #48]	; 0x30
        buf->active = nk_false;
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2200      	movs	r2, #0
 800f126:	611a      	str	r2, [r3, #16]
 800f128:	e000      	b.n	800f12c <nk_build+0x1f0>
            goto skip;
 800f12a:	bf00      	nop
        skip: it = next;
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 800f130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1df      	bne.n	800f0f6 <nk_build+0x1ba>
    }
    if (cmd) {
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d01a      	beq.n	800f172 <nk_build+0x236>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f142:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f14c:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 800f150:	429a      	cmp	r2, r3
 800f152:	d007      	beq.n	800f164 <nk_build+0x228>
            cmd->next = ctx->overlay.begin;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f15a:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	605a      	str	r2, [r3, #4]
        else cmd->next = ctx->memory.allocated;
    }
}
 800f162:	e006      	b.n	800f172 <nk_build+0x236>
        else cmd->next = ctx->memory.allocated;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f16a:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	605a      	str	r2, [r3, #4]
}
 800f172:	bf00      	nop
 800f174:	3738      	adds	r7, #56	; 0x38
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	080213e0 	.word	0x080213e0

0800f180 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d106      	bne.n	800f19c <nk__begin+0x1c>
 800f18e:	4b2f      	ldr	r3, [pc, #188]	; (800f24c <nk__begin+0xcc>)
 800f190:	4a2f      	ldr	r2, [pc, #188]	; (800f250 <nk__begin+0xd0>)
 800f192:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800f196:	482f      	ldr	r0, [pc, #188]	; (800f254 <nk__begin+0xd4>)
 800f198:	f00d fb60 	bl	801c85c <__assert_func>
    if (!ctx) return 0;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <nk__begin+0x26>
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e04e      	b.n	800f244 <nk__begin+0xc4>
    if (!ctx->count) return 0;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1ac:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d101      	bne.n	800f1b8 <nk__begin+0x38>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	e045      	b.n	800f244 <nk__begin+0xc4>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f1be:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800f1c2:	60bb      	str	r3, [r7, #8]
    if (!ctx->build) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1ca:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <nk__begin+0x66>
        nk_build(ctx);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7ff feb2 	bl	800ef3c <nk_build>
        ctx->build = nk_true;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1de:	461a      	mov	r2, r3
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    }
    iter = ctx->begin;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1ec:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 800f1f0:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 800f1f2:	e003      	b.n	800f1fc <nk__begin+0x7c>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
        iter = iter->next;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800f1fa:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d016      	beq.n	800f230 <nk__begin+0xb0>
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f20e:	429a      	cmp	r2, r3
 800f210:	d0f0      	beq.n	800f1f4 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1ea      	bne.n	800f1f4 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f228:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d1e1      	bne.n	800f1f4 <nk__begin+0x74>
    if (!iter) return 0;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d101      	bne.n	800f23a <nk__begin+0xba>
 800f236:	2300      	movs	r3, #0
 800f238:	e004      	b.n	800f244 <nk__begin+0xc4>
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	4413      	add	r3, r2
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	08020148 	.word	0x08020148
 800f250:	08021468 	.word	0x08021468
 800f254:	0802014c 	.word	0x0802014c

0800f258 <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <nk__next+0x1e>
 800f268:	4b18      	ldr	r3, [pc, #96]	; (800f2cc <nk__next+0x74>)
 800f26a:	4a19      	ldr	r2, [pc, #100]	; (800f2d0 <nk__next+0x78>)
 800f26c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800f270:	4818      	ldr	r0, [pc, #96]	; (800f2d4 <nk__next+0x7c>)
 800f272:	f00d faf3 	bl	801c85c <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d009      	beq.n	800f290 <nk__next+0x38>
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d006      	beq.n	800f290 <nk__next+0x38>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f288:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d101      	bne.n	800f294 <nk__next+0x3c>
 800f290:	2300      	movs	r3, #0
 800f292:	e016      	b.n	800f2c2 <nk__next+0x6a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	685a      	ldr	r2, [r3, #4]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f29e:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d301      	bcc.n	800f2aa <nk__next+0x52>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	e00b      	b.n	800f2c2 <nk__next+0x6a>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2b0:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800f2b4:	60fb      	str	r3, [r7, #12]
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	68fa      	ldr	r2, [r7, #12]
 800f2bc:	4413      	add	r3, r2
 800f2be:	60bb      	str	r3, [r7, #8]
    return next;
 800f2c0:	68bb      	ldr	r3, [r7, #8]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	08020148 	.word	0x08020148
 800f2d0:	08021474 	.word	0x08021474
 800f2d4:	0802014c 	.word	0x0802014c

0800f2d8 <nk_contextual_item_text>:
    return ret;
}
NK_API nk_bool
nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,
    nk_flags alignment)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b092      	sub	sp, #72	; 0x48
 800f2dc:	af06      	add	r7, sp, #24
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
 800f2e4:	603b      	str	r3, [r7, #0]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d105      	bne.n	800f2f8 <nk_contextual_item_text+0x20>
 800f2ec:	4b4e      	ldr	r3, [pc, #312]	; (800f428 <nk_contextual_item_text+0x150>)
 800f2ee:	4a4f      	ldr	r2, [pc, #316]	; (800f42c <nk_contextual_item_text+0x154>)
 800f2f0:	214f      	movs	r1, #79	; 0x4f
 800f2f2:	484f      	ldr	r0, [pc, #316]	; (800f430 <nk_contextual_item_text+0x158>)
 800f2f4:	f00d fab2 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f2fe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f302:	2b00      	cmp	r3, #0
 800f304:	d105      	bne.n	800f312 <nk_contextual_item_text+0x3a>
 800f306:	4b4b      	ldr	r3, [pc, #300]	; (800f434 <nk_contextual_item_text+0x15c>)
 800f308:	4a48      	ldr	r2, [pc, #288]	; (800f42c <nk_contextual_item_text+0x154>)
 800f30a:	2150      	movs	r1, #80	; 0x50
 800f30c:	4848      	ldr	r0, [pc, #288]	; (800f430 <nk_contextual_item_text+0x158>)
 800f30e:	f00d faa5 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f318:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f320:	2b00      	cmp	r3, #0
 800f322:	d105      	bne.n	800f330 <nk_contextual_item_text+0x58>
 800f324:	4b44      	ldr	r3, [pc, #272]	; (800f438 <nk_contextual_item_text+0x160>)
 800f326:	4a41      	ldr	r2, [pc, #260]	; (800f42c <nk_contextual_item_text+0x154>)
 800f328:	2151      	movs	r1, #81	; 0x51
 800f32a:	4841      	ldr	r0, [pc, #260]	; (800f430 <nk_contextual_item_text+0x158>)
 800f32c:	f00d fa96 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00f      	beq.n	800f356 <nk_contextual_item_text+0x7e>
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f33c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f340:	2b00      	cmp	r3, #0
 800f342:	d008      	beq.n	800f356 <nk_contextual_item_text+0x7e>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f34a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f352:	2b00      	cmp	r3, #0
 800f354:	d101      	bne.n	800f35a <nk_contextual_item_text+0x82>
        return 0;
 800f356:	2300      	movs	r3, #0
 800f358:	e061      	b.n	800f41e <nk_contextual_item_text+0x146>

    win = ctx->current;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f360:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
    style = &ctx->style;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f36c:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 800f374:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800f378:	f107 0310 	add.w	r3, r7, #16
 800f37c:	eeb0 0a47 	vmov.f32	s0, s14
 800f380:	eef0 0a67 	vmov.f32	s1, s15
 800f384:	68f9      	ldr	r1, [r7, #12]
 800f386:	4618      	mov	r0, r3
 800f388:	f00c f974 	bl	801b674 <nk_widget_fitting>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return nk_false;
 800f392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f396:	2b00      	cmp	r3, #0
 800f398:	d101      	bne.n	800f39e <nk_contextual_item_text+0xc6>
 800f39a:	2300      	movs	r3, #0
 800f39c:	e03f      	b.n	800f41e <nk_contextual_item_text+0x146>

    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800f39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	d009      	beq.n	800f3ba <nk_contextual_item_text+0xe2>
 800f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d101      	bne.n	800f3ba <nk_contextual_item_text+0xe2>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	e000      	b.n	800f3bc <nk_contextual_item_text+0xe4>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	623b      	str	r3, [r7, #32]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800f3c4:	3014      	adds	r0, #20
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	33d0      	adds	r3, #208	; 0xd0
        text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {
 800f3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d2:	6812      	ldr	r2, [r2, #0]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800f3d4:	ed97 6a04 	vldr	s12, [r7, #16]
 800f3d8:	edd7 6a05 	vldr	s13, [r7, #20]
 800f3dc:	ed97 7a06 	vldr	s14, [r7, #24]
 800f3e0:	edd7 7a07 	vldr	s15, [r7, #28]
 800f3e4:	9204      	str	r2, [sp, #16]
 800f3e6:	6a3a      	ldr	r2, [r7, #32]
 800f3e8:	9203      	str	r2, [sp, #12]
 800f3ea:	9302      	str	r3, [sp, #8]
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	9300      	str	r3, [sp, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	eeb0 0a46 	vmov.f32	s0, s12
 800f3fc:	eef0 0a66 	vmov.f32	s1, s13
 800f400:	eeb0 1a47 	vmov.f32	s2, s14
 800f404:	eef0 1a67 	vmov.f32	s3, s15
 800f408:	f7fe fa0e 	bl	800d828 <nk_do_button_text>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d004      	beq.n	800f41c <nk_contextual_item_text+0x144>
        nk_contextual_close(ctx);
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f000 f826 	bl	800f464 <nk_contextual_close>
        return nk_true;
 800f418:	2301      	movs	r3, #1
 800f41a:	e000      	b.n	800f41e <nk_contextual_item_text+0x146>
    }
    return nk_false;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3730      	adds	r7, #48	; 0x30
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	08020198 	.word	0x08020198
 800f42c:	08021480 	.word	0x08021480
 800f430:	0802019c 	.word	0x0802019c
 800f434:	080201bc 	.word	0x080201bc
 800f438:	080201cc 	.word	0x080201cc

0800f43c <nk_contextual_item_label>:
NK_API nk_bool
nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 800f448:	68b8      	ldr	r0, [r7, #8]
 800f44a:	f00b fd75 	bl	801af38 <nk_strlen>
 800f44e:	4602      	mov	r2, r0
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68b9      	ldr	r1, [r7, #8]
 800f454:	68f8      	ldr	r0, [r7, #12]
 800f456:	f7ff ff3f 	bl	800f2d8 <nk_contextual_item_text>
 800f45a:	4603      	mov	r3, r0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3710      	adds	r7, #16
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d105      	bne.n	800f47e <nk_contextual_close+0x1a>
 800f472:	4b1e      	ldr	r3, [pc, #120]	; (800f4ec <nk_contextual_close+0x88>)
 800f474:	4a1e      	ldr	r2, [pc, #120]	; (800f4f0 <nk_contextual_close+0x8c>)
 800f476:	21b2      	movs	r1, #178	; 0xb2
 800f478:	481e      	ldr	r0, [pc, #120]	; (800f4f4 <nk_contextual_close+0x90>)
 800f47a:	f00d f9ef 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f484:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d105      	bne.n	800f498 <nk_contextual_close+0x34>
 800f48c:	4b1a      	ldr	r3, [pc, #104]	; (800f4f8 <nk_contextual_close+0x94>)
 800f48e:	4a18      	ldr	r2, [pc, #96]	; (800f4f0 <nk_contextual_close+0x8c>)
 800f490:	21b3      	movs	r1, #179	; 0xb3
 800f492:	4818      	ldr	r0, [pc, #96]	; (800f4f4 <nk_contextual_close+0x90>)
 800f494:	f00d f9e2 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f49e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f4a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d105      	bne.n	800f4b6 <nk_contextual_close+0x52>
 800f4aa:	4b14      	ldr	r3, [pc, #80]	; (800f4fc <nk_contextual_close+0x98>)
 800f4ac:	4a10      	ldr	r2, [pc, #64]	; (800f4f0 <nk_contextual_close+0x8c>)
 800f4ae:	21b4      	movs	r1, #180	; 0xb4
 800f4b0:	4810      	ldr	r0, [pc, #64]	; (800f4f4 <nk_contextual_close+0x90>)
 800f4b2:	f00d f9d3 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d013      	beq.n	800f4e4 <nk_contextual_close+0x80>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f4c2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00c      	beq.n	800f4e4 <nk_contextual_close+0x80>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f4d0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d003      	beq.n	800f4e4 <nk_contextual_close+0x80>
    nk_popup_close(ctx);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f006 f8b3 	bl	8015648 <nk_popup_close>
 800f4e2:	e000      	b.n	800f4e6 <nk_contextual_close+0x82>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 800f4e4:	bf00      	nop
}
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	08020198 	.word	0x08020198
 800f4f0:	08021498 	.word	0x08021498
 800f4f4:	0802019c 	.word	0x0802019c
 800f4f8:	080201bc 	.word	0x080201bc
 800f4fc:	080201cc 	.word	0x080201cc

0800f500 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 800f500:	b590      	push	{r4, r7, lr}
 800f502:	b08d      	sub	sp, #52	; 0x34
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d105      	bne.n	800f51a <nk_contextual_end+0x1a>
 800f50e:	4b69      	ldr	r3, [pc, #420]	; (800f6b4 <nk_contextual_end+0x1b4>)
 800f510:	4a69      	ldr	r2, [pc, #420]	; (800f6b8 <nk_contextual_end+0x1b8>)
 800f512:	21bd      	movs	r1, #189	; 0xbd
 800f514:	4869      	ldr	r0, [pc, #420]	; (800f6bc <nk_contextual_end+0x1bc>)
 800f516:	f00d f9a1 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f520:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f524:	2b00      	cmp	r3, #0
 800f526:	d105      	bne.n	800f534 <nk_contextual_end+0x34>
 800f528:	4b65      	ldr	r3, [pc, #404]	; (800f6c0 <nk_contextual_end+0x1c0>)
 800f52a:	4a63      	ldr	r2, [pc, #396]	; (800f6b8 <nk_contextual_end+0x1b8>)
 800f52c:	21be      	movs	r1, #190	; 0xbe
 800f52e:	4863      	ldr	r0, [pc, #396]	; (800f6bc <nk_contextual_end+0x1bc>)
 800f530:	f00d f994 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current) return;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f000 80b8 	beq.w	800f6ac <nk_contextual_end+0x1ac>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f542:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f546:	2b00      	cmp	r3, #0
 800f548:	f000 80b0 	beq.w	800f6ac <nk_contextual_end+0x1ac>

    popup = ctx->current;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f552:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f556:	62fb      	str	r3, [r7, #44]	; 0x2c
    panel = popup->layout;
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f55e:	62bb      	str	r3, [r7, #40]	; 0x28
    NK_ASSERT(popup->parent);
 800f560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f562:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800f566:	2b00      	cmp	r3, #0
 800f568:	d105      	bne.n	800f576 <nk_contextual_end+0x76>
 800f56a:	4b56      	ldr	r3, [pc, #344]	; (800f6c4 <nk_contextual_end+0x1c4>)
 800f56c:	4a52      	ldr	r2, [pc, #328]	; (800f6b8 <nk_contextual_end+0x1b8>)
 800f56e:	21c3      	movs	r1, #195	; 0xc3
 800f570:	4852      	ldr	r0, [pc, #328]	; (800f6bc <nk_contextual_end+0x1bc>)
 800f572:	f00d f973 	bl	801c85c <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d105      	bne.n	800f58e <nk_contextual_end+0x8e>
 800f582:	4b51      	ldr	r3, [pc, #324]	; (800f6c8 <nk_contextual_end+0x1c8>)
 800f584:	4a4c      	ldr	r2, [pc, #304]	; (800f6b8 <nk_contextual_end+0x1b8>)
 800f586:	21c4      	movs	r1, #196	; 0xc4
 800f588:	484c      	ldr	r0, [pc, #304]	; (800f6bc <nk_contextual_end+0x1bc>)
 800f58a:	f00d f967 	bl	801c85c <__assert_func>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f596:	2b00      	cmp	r3, #0
 800f598:	d07b      	beq.n	800f692 <nk_contextual_end+0x192>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 800f59a:	f107 0310 	add.w	r3, r7, #16
 800f59e:	2200      	movs	r2, #0
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	605a      	str	r2, [r3, #4]
 800f5a4:	609a      	str	r2, [r3, #8]
 800f5a6:	60da      	str	r2, [r3, #12]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 800f5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b0:	edd3 6a03 	vldr	s13, [r3, #12]
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	edd3 7a05 	vldr	s15, [r3, #20]
 800f5ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c6:	d53d      	bpl.n	800f644 <nk_contextual_end+0x144>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800f5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	f003 fc93 	bl	8012f00 <nk_panel_get_padding>
 800f5da:	eeb0 7a40 	vmov.f32	s14, s0
 800f5de:	eef0 7a60 	vmov.f32	s15, s1
 800f5e2:	ed87 7a02 	vstr	s14, [r7, #8]
 800f5e6:	edc7 7a03 	vstr	s15, [r7, #12]
            body = panel->bounds;
 800f5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ec:	f107 0410 	add.w	r4, r7, #16
 800f5f0:	3308      	adds	r3, #8
 800f5f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f5f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 800f5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f600:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f604:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f60e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f612:	edd7 7a03 	vldr	s15, [r7, #12]
 800f616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f620:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f624:	edc7 7a05 	vstr	s15, [r7, #20]
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 800f628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62a:	ed93 7a03 	vldr	s14, [r3, #12]
 800f62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f630:	edd3 7a05 	vldr	s15, [r3, #20]
 800f634:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f638:	edd7 7a05 	vldr	s15, [r7, #20]
 800f63c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f640:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2100      	movs	r1, #0
 800f648:	4618      	mov	r0, r3
 800f64a:	f001 ff8e 	bl	801156a <nk_input_is_mouse_pressed>
 800f64e:	6278      	str	r0, [r7, #36]	; 0x24
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	ed97 6a04 	vldr	s12, [r7, #16]
 800f656:	edd7 6a05 	vldr	s13, [r7, #20]
 800f65a:	ed97 7a06 	vldr	s14, [r7, #24]
 800f65e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f662:	eeb0 0a46 	vmov.f32	s0, s12
 800f666:	eef0 0a66 	vmov.f32	s1, s13
 800f66a:	eeb0 1a47 	vmov.f32	s2, s14
 800f66e:	eef0 1a67 	vmov.f32	s3, s15
 800f672:	4618      	mov	r0, r3
 800f674:	f001 febd 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 800f678:	6238      	str	r0, [r7, #32]
        if (pressed && in_body)
 800f67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d008      	beq.n	800f692 <nk_contextual_end+0x192>
 800f680:	6a3b      	ldr	r3, [r7, #32]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d005      	beq.n	800f692 <nk_contextual_end+0x192>
            popup->flags |= NK_WINDOW_HIDDEN;
 800f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f68a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800f68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f690:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 800f692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d002      	beq.n	800f6a4 <nk_contextual_end+0x1a4>
        popup->seq = 0;
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]
    nk_popup_end(ctx);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f006 f81b 	bl	80156e0 <nk_popup_end>
    return;
 800f6aa:	e000      	b.n	800f6ae <nk_contextual_end+0x1ae>
    if (!ctx || !ctx->current) return;
 800f6ac:	bf00      	nop
}
 800f6ae:	3734      	adds	r7, #52	; 0x34
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd90      	pop	{r4, r7, pc}
 800f6b4:	08020198 	.word	0x08020198
 800f6b8:	080214ac 	.word	0x080214ac
 800f6bc:	0802019c 	.word	0x0802019c
 800f6c0:	080201bc 	.word	0x080201bc
 800f6c4:	080201e4 	.word	0x080201e4
 800f6c8:	080201f4 	.word	0x080201f4

0800f6cc <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(cb);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d105      	bne.n	800f6ec <nk_command_buffer_init+0x20>
 800f6e0:	4b15      	ldr	r3, [pc, #84]	; (800f738 <nk_command_buffer_init+0x6c>)
 800f6e2:	4a16      	ldr	r2, [pc, #88]	; (800f73c <nk_command_buffer_init+0x70>)
 800f6e4:	210d      	movs	r1, #13
 800f6e6:	4816      	ldr	r0, [pc, #88]	; (800f740 <nk_command_buffer_init+0x74>)
 800f6e8:	f00d f8b8 	bl	801c85c <__assert_func>
    NK_ASSERT(b);
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d105      	bne.n	800f6fe <nk_command_buffer_init+0x32>
 800f6f2:	4b14      	ldr	r3, [pc, #80]	; (800f744 <nk_command_buffer_init+0x78>)
 800f6f4:	4a11      	ldr	r2, [pc, #68]	; (800f73c <nk_command_buffer_init+0x70>)
 800f6f6:	210e      	movs	r1, #14
 800f6f8:	4811      	ldr	r0, [pc, #68]	; (800f740 <nk_command_buffer_init+0x74>)
 800f6fa:	f00d f8af 	bl	801c85c <__assert_func>
    if (!cb || !b) return;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d015      	beq.n	800f730 <nk_command_buffer_init+0x64>
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d012      	beq.n	800f730 <nk_command_buffer_init+0x64>
    cb->base = b;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	601a      	str	r2, [r3, #0]
    cb->use_clipping = (int)clip;
 800f710:	79fa      	ldrb	r2, [r7, #7]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	615a      	str	r2, [r3, #20]
    cb->begin = b->allocated;
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	61da      	str	r2, [r3, #28]
    cb->end = b->allocated;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	621a      	str	r2, [r3, #32]
    cb->last = b->allocated;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	625a      	str	r2, [r3, #36]	; 0x24
 800f72e:	e000      	b.n	800f732 <nk_command_buffer_init+0x66>
    if (!cb || !b) return;
 800f730:	bf00      	nop
}
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	08020218 	.word	0x08020218
 800f73c:	080214d0 	.word	0x080214d0
 800f740:	0802021c 	.word	0x0802021c
 800f744:	08020238 	.word	0x08020238

0800f748 <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d105      	bne.n	800f762 <nk_command_buffer_reset+0x1a>
 800f756:	4b0f      	ldr	r3, [pc, #60]	; (800f794 <nk_command_buffer_reset+0x4c>)
 800f758:	4a0f      	ldr	r2, [pc, #60]	; (800f798 <nk_command_buffer_reset+0x50>)
 800f75a:	2119      	movs	r1, #25
 800f75c:	480f      	ldr	r0, [pc, #60]	; (800f79c <nk_command_buffer_reset+0x54>)
 800f75e:	f00d f87d 	bl	801c85c <__assert_func>
    if (!b) return;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d010      	beq.n	800f78a <nk_command_buffer_reset+0x42>
    b->begin = 0;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	61da      	str	r2, [r3, #28]
    b->end = 0;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	621a      	str	r2, [r3, #32]
    b->last = 0;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	625a      	str	r2, [r3, #36]	; 0x24
    b->clip = nk_null_rect;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a08      	ldr	r2, [pc, #32]	; (800f7a0 <nk_command_buffer_reset+0x58>)
 800f77e:	1d1c      	adds	r4, r3, #4
 800f780:	4613      	mov	r3, r2
 800f782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f788:	e000      	b.n	800f78c <nk_command_buffer_reset+0x44>
    if (!b) return;
 800f78a:	bf00      	nop
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 800f78c:	370c      	adds	r7, #12
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd90      	pop	{r4, r7, pc}
 800f792:	bf00      	nop
 800f794:	08020238 	.word	0x08020238
 800f798:	080214e8 	.word	0x080214e8
 800f79c:	0802021c 	.word	0x0802021c
 800f7a0:	080214c0 	.word	0x080214c0

0800f7a4 <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	72fb      	strb	r3, [r7, #11]
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d105      	bne.n	800f7c4 <nk_command_buffer_push+0x20>
 800f7b8:	4b28      	ldr	r3, [pc, #160]	; (800f85c <nk_command_buffer_push+0xb8>)
 800f7ba:	4a29      	ldr	r2, [pc, #164]	; (800f860 <nk_command_buffer_push+0xbc>)
 800f7bc:	212d      	movs	r1, #45	; 0x2d
 800f7be:	4829      	ldr	r0, [pc, #164]	; (800f864 <nk_command_buffer_push+0xc0>)
 800f7c0:	f00d f84c 	bl	801c85c <__assert_func>
    NK_ASSERT(b->base);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d105      	bne.n	800f7d8 <nk_command_buffer_push+0x34>
 800f7cc:	4b26      	ldr	r3, [pc, #152]	; (800f868 <nk_command_buffer_push+0xc4>)
 800f7ce:	4a24      	ldr	r2, [pc, #144]	; (800f860 <nk_command_buffer_push+0xbc>)
 800f7d0:	212e      	movs	r1, #46	; 0x2e
 800f7d2:	4824      	ldr	r0, [pc, #144]	; (800f864 <nk_command_buffer_push+0xc0>)
 800f7d4:	f00d f842 	bl	801c85c <__assert_func>
    if (!b) return 0;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d101      	bne.n	800f7e2 <nk_command_buffer_push+0x3e>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e037      	b.n	800f852 <nk_command_buffer_push+0xae>
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6818      	ldr	r0, [r3, #0]
 800f7e6:	4b21      	ldr	r3, [pc, #132]	; (800f86c <nk_command_buffer_push+0xc8>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	f7fd fa5f 	bl	800ccb0 <nk_buffer_alloc>
 800f7f2:	61f8      	str	r0, [r7, #28]
    if (!cmd) return 0;
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <nk_command_buffer_push+0x5a>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	e029      	b.n	800f852 <nk_command_buffer_push+0xae>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	69fa      	ldr	r2, [r7, #28]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	461a      	mov	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	625a      	str	r2, [r3, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 800f80e:	69fa      	ldr	r2, [r7, #28]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4413      	add	r3, r2
 800f814:	61bb      	str	r3, [r7, #24]
    memory = NK_ALIGN_PTR(unaligned, align);
 800f816:	4b15      	ldr	r3, [pc, #84]	; (800f86c <nk_command_buffer_push+0xc8>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3b01      	subs	r3, #1
 800f81c:	69ba      	ldr	r2, [r7, #24]
 800f81e:	4413      	add	r3, r2
 800f820:	461a      	mov	r2, r3
 800f822:	4b12      	ldr	r3, [pc, #72]	; (800f86c <nk_command_buffer_push+0xc8>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	425b      	negs	r3, r3
 800f828:	4013      	ands	r3, r2
 800f82a:	617b      	str	r3, [r7, #20]
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800f82c:	697a      	ldr	r2, [r7, #20]
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	613b      	str	r3, [r7, #16]
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	7afa      	ldrb	r2, [r7, #11]
 800f838:	701a      	strb	r2, [r3, #0]
    cmd->next = b->base->allocated + alignment;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	441a      	add	r2, r3
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	605a      	str	r2, [r3, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	621a      	str	r2, [r3, #32]
    return cmd;
 800f850:	69fb      	ldr	r3, [r7, #28]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3720      	adds	r7, #32
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	08020238 	.word	0x08020238
 800f860:	08021500 	.word	0x08021500
 800f864:	0802021c 	.word	0x0802021c
 800f868:	0802023c 	.word	0x0802023c
 800f86c:	08021518 	.word	0x08021518

0800f870 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b088      	sub	sp, #32
 800f874:	af00      	add	r7, sp, #0
 800f876:	6178      	str	r0, [r7, #20]
 800f878:	eeb0 6a40 	vmov.f32	s12, s0
 800f87c:	eef0 6a60 	vmov.f32	s13, s1
 800f880:	eeb0 7a41 	vmov.f32	s14, s2
 800f884:	eef0 7a61 	vmov.f32	s15, s3
 800f888:	ed87 6a01 	vstr	s12, [r7, #4]
 800f88c:	edc7 6a02 	vstr	s13, [r7, #8]
 800f890:	ed87 7a03 	vstr	s14, [r7, #12]
 800f894:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <nk_push_scissor+0x3a>
 800f89e:	4b2d      	ldr	r3, [pc, #180]	; (800f954 <nk_push_scissor+0xe4>)
 800f8a0:	4a2d      	ldr	r2, [pc, #180]	; (800f958 <nk_push_scissor+0xe8>)
 800f8a2:	2148      	movs	r1, #72	; 0x48
 800f8a4:	482d      	ldr	r0, [pc, #180]	; (800f95c <nk_push_scissor+0xec>)
 800f8a6:	f00c ffd9 	bl	801c85c <__assert_func>
    if (!b) return;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d04b      	beq.n	800f948 <nk_push_scissor+0xd8>

    b->clip.x = r.x;
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	605a      	str	r2, [r3, #4]
    b->clip.y = r.y;
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	609a      	str	r2, [r3, #8]
    b->clip.w = r.w;
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	60da      	str	r2, [r3, #12]
    b->clip.h = r.h;
 800f8c2:	693a      	ldr	r2, [r7, #16]
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	611a      	str	r2, [r3, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 800f8c8:	2210      	movs	r2, #16
 800f8ca:	2101      	movs	r1, #1
 800f8cc:	6978      	ldr	r0, [r7, #20]
 800f8ce:	f7ff ff69 	bl	800f7a4 <nk_command_buffer_push>
 800f8d2:	61f8      	str	r0, [r7, #28]

    if (!cmd) return;
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d038      	beq.n	800f94c <nk_push_scissor+0xdc>
    cmd->x = (short)r.x;
 800f8da:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8e2:	ee17 3a90 	vmov	r3, s15
 800f8e6:	b21a      	sxth	r2, r3
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 800f8ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800f8f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8f4:	ee17 3a90 	vmov	r3, s15
 800f8f8:	b21a      	sxth	r2, r3
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 800f8fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800f902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90a:	dd07      	ble.n	800f91c <nk_push_scissor+0xac>
 800f90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800f910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f914:	ee17 3a90 	vmov	r3, s15
 800f918:	b29a      	uxth	r2, r3
 800f91a:	e000      	b.n	800f91e <nk_push_scissor+0xae>
 800f91c:	2200      	movs	r2, #0
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 800f922:	edd7 7a04 	vldr	s15, [r7, #16]
 800f926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92e:	dd07      	ble.n	800f940 <nk_push_scissor+0xd0>
 800f930:	edd7 7a04 	vldr	s15, [r7, #16]
 800f934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f938:	ee17 3a90 	vmov	r3, s15
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	e000      	b.n	800f942 <nk_push_scissor+0xd2>
 800f940:	2200      	movs	r2, #0
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	81da      	strh	r2, [r3, #14]
 800f946:	e002      	b.n	800f94e <nk_push_scissor+0xde>
    if (!b) return;
 800f948:	bf00      	nop
 800f94a:	e000      	b.n	800f94e <nk_push_scissor+0xde>
    if (!cmd) return;
 800f94c:	bf00      	nop
}
 800f94e:	3720      	adds	r7, #32
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	08020238 	.word	0x08020238
 800f958:	0802151c 	.word	0x0802151c
 800f95c:	0802021c 	.word	0x0802021c

0800f960 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08a      	sub	sp, #40	; 0x28
 800f964:	af00      	add	r7, sp, #0
 800f966:	61f8      	str	r0, [r7, #28]
 800f968:	eeb0 6a40 	vmov.f32	s12, s0
 800f96c:	eef0 6a60 	vmov.f32	s13, s1
 800f970:	eeb0 7a41 	vmov.f32	s14, s2
 800f974:	eef0 7a61 	vmov.f32	s15, s3
 800f978:	ed87 2a02 	vstr	s4, [r7, #8]
 800f97c:	edc7 2a01 	vstr	s5, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
 800f982:	ed87 6a03 	vstr	s12, [r7, #12]
 800f986:	edc7 6a04 	vstr	s13, [r7, #16]
 800f98a:	ed87 7a05 	vstr	s14, [r7, #20]
 800f98e:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d105      	bne.n	800f9a4 <nk_stroke_rect+0x44>
 800f998:	4b72      	ldr	r3, [pc, #456]	; (800fb64 <nk_stroke_rect+0x204>)
 800f99a:	4a73      	ldr	r2, [pc, #460]	; (800fb68 <nk_stroke_rect+0x208>)
 800f99c:	2185      	movs	r1, #133	; 0x85
 800f99e:	4873      	ldr	r0, [pc, #460]	; (800fb6c <nk_stroke_rect+0x20c>)
 800f9a0:	f00c ff5c 	bl	801c85c <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f000 80d4 	beq.w	800fb54 <nk_stroke_rect+0x1f4>
 800f9ac:	78fb      	ldrb	r3, [r7, #3]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f000 80d0 	beq.w	800fb54 <nk_stroke_rect+0x1f4>
 800f9b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800f9b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c0:	f000 80c8 	beq.w	800fb54 <nk_stroke_rect+0x1f4>
 800f9c4:	edd7 7a06 	vldr	s15, [r7, #24]
 800f9c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d0:	f000 80c0 	beq.w	800fb54 <nk_stroke_rect+0x1f4>
 800f9d4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f9d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	f240 80b8 	bls.w	800fb54 <nk_stroke_rect+0x1f4>
    if (b->use_clipping) {
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	695b      	ldr	r3, [r3, #20]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d05e      	beq.n	800faaa <nk_stroke_rect+0x14a>
        const struct nk_rect *clip = &b->clip;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	3304      	adds	r3, #4
 800f9f0:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f4:	ed93 7a00 	vldr	s14, [r3]
 800f9f8:	edd7 6a03 	vldr	s13, [r7, #12]
 800f9fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800fa00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0c:	bf4c      	ite	mi
 800fa0e:	2301      	movmi	r3, #1
 800fa10:	2300      	movpl	r3, #0
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	f083 0301 	eor.w	r3, r3, #1
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f040 809c 	bne.w	800fb58 <nk_stroke_rect+0x1f8>
 800fa20:	ed97 7a03 	vldr	s14, [r7, #12]
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	edd3 6a00 	vldr	s13, [r3]
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2c:	edd3 7a02 	vldr	s15, [r3, #8]
 800fa30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3c:	bf4c      	ite	mi
 800fa3e:	2301      	movmi	r3, #1
 800fa40:	2300      	movpl	r3, #0
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f083 0301 	eor.w	r3, r3, #1
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f040 8084 	bne.w	800fb58 <nk_stroke_rect+0x1f8>
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	ed93 7a01 	vldr	s14, [r3, #4]
 800fa56:	edd7 6a04 	vldr	s13, [r7, #16]
 800fa5a:	edd7 7a06 	vldr	s15, [r7, #24]
 800fa5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6a:	bf4c      	ite	mi
 800fa6c:	2301      	movmi	r3, #1
 800fa6e:	2300      	movpl	r3, #0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f083 0301 	eor.w	r3, r3, #1
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d16d      	bne.n	800fb58 <nk_stroke_rect+0x1f8>
 800fa7c:	ed97 7a04 	vldr	s14, [r7, #16]
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	edd3 6a01 	vldr	s13, [r3, #4]
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	edd3 7a03 	vldr	s15, [r3, #12]
 800fa8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa98:	bf4c      	ite	mi
 800fa9a:	2301      	movmi	r3, #1
 800fa9c:	2300      	movpl	r3, #0
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	f083 0301 	eor.w	r3, r3, #1
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d156      	bne.n	800fb58 <nk_stroke_rect+0x1f8>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 800faaa:	2218      	movs	r2, #24
 800faac:	2104      	movs	r1, #4
 800faae:	69f8      	ldr	r0, [r7, #28]
 800fab0:	f7ff fe78 	bl	800f7a4 <nk_command_buffer_push>
 800fab4:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d04f      	beq.n	800fb5c <nk_stroke_rect+0x1fc>
    cmd->rounding = (unsigned short)rounding;
 800fabc:	edd7 7a02 	vldr	s15, [r7, #8]
 800fac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fac4:	ee17 3a90 	vmov	r3, s15
 800fac8:	b29a      	uxth	r2, r3
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	811a      	strh	r2, [r3, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 800face:	edd7 7a01 	vldr	s15, [r7, #4]
 800fad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fad6:	ee17 3a90 	vmov	r3, s15
 800fada:	b29a      	uxth	r2, r3
 800fadc:	6a3b      	ldr	r3, [r7, #32]
 800fade:	815a      	strh	r2, [r3, #10]
    cmd->x = (short)rect.x;
 800fae0:	edd7 7a03 	vldr	s15, [r7, #12]
 800fae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fae8:	ee17 3a90 	vmov	r3, s15
 800faec:	b21a      	sxth	r2, r3
 800faee:	6a3b      	ldr	r3, [r7, #32]
 800faf0:	819a      	strh	r2, [r3, #12]
    cmd->y = (short)rect.y;
 800faf2:	edd7 7a04 	vldr	s15, [r7, #16]
 800faf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fafa:	ee17 3a90 	vmov	r3, s15
 800fafe:	b21a      	sxth	r2, r3
 800fb00:	6a3b      	ldr	r3, [r7, #32]
 800fb02:	81da      	strh	r2, [r3, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 800fb04:	edd7 7a05 	vldr	s15, [r7, #20]
 800fb08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb10:	dd07      	ble.n	800fb22 <nk_stroke_rect+0x1c2>
 800fb12:	edd7 7a05 	vldr	s15, [r7, #20]
 800fb16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb1a:	ee17 3a90 	vmov	r3, s15
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	e000      	b.n	800fb24 <nk_stroke_rect+0x1c4>
 800fb22:	2200      	movs	r2, #0
 800fb24:	6a3b      	ldr	r3, [r7, #32]
 800fb26:	821a      	strh	r2, [r3, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 800fb28:	edd7 7a06 	vldr	s15, [r7, #24]
 800fb2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	dd07      	ble.n	800fb46 <nk_stroke_rect+0x1e6>
 800fb36:	edd7 7a06 	vldr	s15, [r7, #24]
 800fb3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb3e:	ee17 3a90 	vmov	r3, s15
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	e000      	b.n	800fb48 <nk_stroke_rect+0x1e8>
 800fb46:	2200      	movs	r2, #0
 800fb48:	6a3b      	ldr	r3, [r7, #32]
 800fb4a:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 800fb4c:	6a3b      	ldr	r3, [r7, #32]
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	615a      	str	r2, [r3, #20]
 800fb52:	e004      	b.n	800fb5e <nk_stroke_rect+0x1fe>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 800fb54:	bf00      	nop
 800fb56:	e002      	b.n	800fb5e <nk_stroke_rect+0x1fe>
            clip->x, clip->y, clip->w, clip->h)) return;
 800fb58:	bf00      	nop
 800fb5a:	e000      	b.n	800fb5e <nk_stroke_rect+0x1fe>
    if (!cmd) return;
 800fb5c:	bf00      	nop
}
 800fb5e:	3728      	adds	r7, #40	; 0x28
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	08020238 	.word	0x08020238
 800fb68:	0802152c 	.word	0x0802152c
 800fb6c:	0802021c 	.word	0x0802021c

0800fb70 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b08a      	sub	sp, #40	; 0x28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	61f8      	str	r0, [r7, #28]
 800fb78:	eeb0 6a40 	vmov.f32	s12, s0
 800fb7c:	eef0 6a60 	vmov.f32	s13, s1
 800fb80:	eeb0 7a41 	vmov.f32	s14, s2
 800fb84:	eef0 7a61 	vmov.f32	s15, s3
 800fb88:	ed87 2a02 	vstr	s4, [r7, #8]
 800fb8c:	6079      	str	r1, [r7, #4]
 800fb8e:	ed87 6a03 	vstr	s12, [r7, #12]
 800fb92:	edc7 6a04 	vstr	s13, [r7, #16]
 800fb96:	ed87 7a05 	vstr	s14, [r7, #20]
 800fb9a:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d105      	bne.n	800fbb0 <nk_fill_rect+0x40>
 800fba4:	4b6a      	ldr	r3, [pc, #424]	; (800fd50 <nk_fill_rect+0x1e0>)
 800fba6:	4a6b      	ldr	r2, [pc, #428]	; (800fd54 <nk_fill_rect+0x1e4>)
 800fba8:	219c      	movs	r1, #156	; 0x9c
 800fbaa:	486b      	ldr	r0, [pc, #428]	; (800fd58 <nk_fill_rect+0x1e8>)
 800fbac:	f00c fe56 	bl	801c85c <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f000 80c4 	beq.w	800fd40 <nk_fill_rect+0x1d0>
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 80c0 	beq.w	800fd40 <nk_fill_rect+0x1d0>
 800fbc0:	edd7 7a05 	vldr	s15, [r7, #20]
 800fbc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbcc:	f000 80b8 	beq.w	800fd40 <nk_fill_rect+0x1d0>
 800fbd0:	edd7 7a06 	vldr	s15, [r7, #24]
 800fbd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbdc:	f000 80b0 	beq.w	800fd40 <nk_fill_rect+0x1d0>
    if (b->use_clipping) {
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	695b      	ldr	r3, [r3, #20]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d05d      	beq.n	800fca4 <nk_fill_rect+0x134>
        const struct nk_rect *clip = &b->clip;
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	3304      	adds	r3, #4
 800fbec:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	ed93 7a00 	vldr	s14, [r3]
 800fbf4:	edd7 6a03 	vldr	s13, [r7, #12]
 800fbf8:	edd7 7a05 	vldr	s15, [r7, #20]
 800fbfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc08:	bf4c      	ite	mi
 800fc0a:	2301      	movmi	r3, #1
 800fc0c:	2300      	movpl	r3, #0
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	f083 0301 	eor.w	r3, r3, #1
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f040 8094 	bne.w	800fd44 <nk_fill_rect+0x1d4>
 800fc1c:	ed97 7a03 	vldr	s14, [r7, #12]
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	edd3 6a00 	vldr	s13, [r3]
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	edd3 7a02 	vldr	s15, [r3, #8]
 800fc2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc38:	bf4c      	ite	mi
 800fc3a:	2301      	movmi	r3, #1
 800fc3c:	2300      	movpl	r3, #0
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	f083 0301 	eor.w	r3, r3, #1
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d17c      	bne.n	800fd44 <nk_fill_rect+0x1d4>
 800fc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4c:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc50:	edd7 6a04 	vldr	s13, [r7, #16]
 800fc54:	edd7 7a06 	vldr	s15, [r7, #24]
 800fc58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc64:	bf4c      	ite	mi
 800fc66:	2301      	movmi	r3, #1
 800fc68:	2300      	movpl	r3, #0
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	f083 0301 	eor.w	r3, r3, #1
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d166      	bne.n	800fd44 <nk_fill_rect+0x1d4>
 800fc76:	ed97 7a04 	vldr	s14, [r7, #16]
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7c:	edd3 6a01 	vldr	s13, [r3, #4]
 800fc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc82:	edd3 7a03 	vldr	s15, [r3, #12]
 800fc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc92:	bf4c      	ite	mi
 800fc94:	2301      	movmi	r3, #1
 800fc96:	2300      	movpl	r3, #0
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	f083 0301 	eor.w	r3, r3, #1
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d14f      	bne.n	800fd44 <nk_fill_rect+0x1d4>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 800fca4:	2218      	movs	r2, #24
 800fca6:	2105      	movs	r1, #5
 800fca8:	69f8      	ldr	r0, [r7, #28]
 800fcaa:	f7ff fd7b 	bl	800f7a4 <nk_command_buffer_push>
 800fcae:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 800fcb0:	6a3b      	ldr	r3, [r7, #32]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d048      	beq.n	800fd48 <nk_fill_rect+0x1d8>
    cmd->rounding = (unsigned short)rounding;
 800fcb6:	edd7 7a02 	vldr	s15, [r7, #8]
 800fcba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcbe:	ee17 3a90 	vmov	r3, s15
 800fcc2:	b29a      	uxth	r2, r3
 800fcc4:	6a3b      	ldr	r3, [r7, #32]
 800fcc6:	811a      	strh	r2, [r3, #8]
    cmd->x = (short)rect.x;
 800fcc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800fccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcd0:	ee17 3a90 	vmov	r3, s15
 800fcd4:	b21a      	sxth	r2, r3
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	815a      	strh	r2, [r3, #10]
    cmd->y = (short)rect.y;
 800fcda:	edd7 7a04 	vldr	s15, [r7, #16]
 800fcde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fce2:	ee17 3a90 	vmov	r3, s15
 800fce6:	b21a      	sxth	r2, r3
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	819a      	strh	r2, [r3, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 800fcec:	edd7 7a05 	vldr	s15, [r7, #20]
 800fcf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf8:	dd07      	ble.n	800fd0a <nk_fill_rect+0x19a>
 800fcfa:	edd7 7a05 	vldr	s15, [r7, #20]
 800fcfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd02:	ee17 3a90 	vmov	r3, s15
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	e000      	b.n	800fd0c <nk_fill_rect+0x19c>
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	6a3b      	ldr	r3, [r7, #32]
 800fd0e:	81da      	strh	r2, [r3, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 800fd10:	edd7 7a06 	vldr	s15, [r7, #24]
 800fd14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1c:	dd07      	ble.n	800fd2e <nk_fill_rect+0x1be>
 800fd1e:	edd7 7a06 	vldr	s15, [r7, #24]
 800fd22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd26:	ee17 3a90 	vmov	r3, s15
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	e000      	b.n	800fd30 <nk_fill_rect+0x1c0>
 800fd2e:	2200      	movs	r2, #0
 800fd30:	6a3b      	ldr	r3, [r7, #32]
 800fd32:	821a      	strh	r2, [r3, #16]
    cmd->color = c;
 800fd34:	6a3b      	ldr	r3, [r7, #32]
 800fd36:	3312      	adds	r3, #18
 800fd38:	1d3a      	adds	r2, r7, #4
 800fd3a:	6810      	ldr	r0, [r2, #0]
 800fd3c:	6018      	str	r0, [r3, #0]
 800fd3e:	e004      	b.n	800fd4a <nk_fill_rect+0x1da>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 800fd40:	bf00      	nop
 800fd42:	e002      	b.n	800fd4a <nk_fill_rect+0x1da>
            clip->x, clip->y, clip->w, clip->h)) return;
 800fd44:	bf00      	nop
 800fd46:	e000      	b.n	800fd4a <nk_fill_rect+0x1da>
    if (!cmd) return;
 800fd48:	bf00      	nop
}
 800fd4a:	3728      	adds	r7, #40	; 0x28
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	08020238 	.word	0x08020238
 800fd54:	0802153c 	.word	0x0802153c
 800fd58:	0802021c 	.word	0x0802021c

0800fd5c <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b088      	sub	sp, #32
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6178      	str	r0, [r7, #20]
 800fd64:	eeb0 6a40 	vmov.f32	s12, s0
 800fd68:	eef0 6a60 	vmov.f32	s13, s1
 800fd6c:	eeb0 7a41 	vmov.f32	s14, s2
 800fd70:	eef0 7a61 	vmov.f32	s15, s3
 800fd74:	6039      	str	r1, [r7, #0]
 800fd76:	ed87 6a01 	vstr	s12, [r7, #4]
 800fd7a:	edc7 6a02 	vstr	s13, [r7, #8]
 800fd7e:	ed87 7a03 	vstr	s14, [r7, #12]
 800fd82:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d105      	bne.n	800fd98 <nk_fill_circle+0x3c>
 800fd8c:	4b65      	ldr	r3, [pc, #404]	; (800ff24 <nk_fill_circle+0x1c8>)
 800fd8e:	4a66      	ldr	r2, [pc, #408]	; (800ff28 <nk_fill_circle+0x1cc>)
 800fd90:	21e2      	movs	r1, #226	; 0xe2
 800fd92:	4866      	ldr	r0, [pc, #408]	; (800ff2c <nk_fill_circle+0x1d0>)
 800fd94:	f00c fd62 	bl	801c85c <__assert_func>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	f000 80b9 	beq.w	800ff12 <nk_fill_circle+0x1b6>
 800fda0:	78fb      	ldrb	r3, [r7, #3]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 80b5 	beq.w	800ff12 <nk_fill_circle+0x1b6>
 800fda8:	edd7 7a03 	vldr	s15, [r7, #12]
 800fdac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb4:	f000 80ad 	beq.w	800ff12 <nk_fill_circle+0x1b6>
 800fdb8:	edd7 7a04 	vldr	s15, [r7, #16]
 800fdbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc4:	f000 80a5 	beq.w	800ff12 <nk_fill_circle+0x1b6>
    if (b->use_clipping) {
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	695b      	ldr	r3, [r3, #20]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d05d      	beq.n	800fe8c <nk_fill_circle+0x130>
        const struct nk_rect *clip = &b->clip;
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	3304      	adds	r3, #4
 800fdd4:	61fb      	str	r3, [r7, #28]
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	ed93 7a00 	vldr	s14, [r3]
 800fddc:	edd7 6a01 	vldr	s13, [r7, #4]
 800fde0:	edd7 7a03 	vldr	s15, [r7, #12]
 800fde4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fde8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf0:	bf4c      	ite	mi
 800fdf2:	2301      	movmi	r3, #1
 800fdf4:	2300      	movpl	r3, #0
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	f083 0301 	eor.w	r3, r3, #1
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f040 8089 	bne.w	800ff16 <nk_fill_circle+0x1ba>
 800fe04:	ed97 7a01 	vldr	s14, [r7, #4]
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	edd3 6a00 	vldr	s13, [r3]
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe20:	bf4c      	ite	mi
 800fe22:	2301      	movmi	r3, #1
 800fe24:	2300      	movpl	r3, #0
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	f083 0301 	eor.w	r3, r3, #1
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d171      	bne.n	800ff16 <nk_fill_circle+0x1ba>
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe38:	edd7 6a02 	vldr	s13, [r7, #8]
 800fe3c:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4c:	bf4c      	ite	mi
 800fe4e:	2301      	movmi	r3, #1
 800fe50:	2300      	movpl	r3, #0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	f083 0301 	eor.w	r3, r3, #1
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d15b      	bne.n	800ff16 <nk_fill_circle+0x1ba>
 800fe5e:	ed97 7a02 	vldr	s14, [r7, #8]
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	edd3 6a01 	vldr	s13, [r3, #4]
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	edd3 7a03 	vldr	s15, [r3, #12]
 800fe6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7a:	bf4c      	ite	mi
 800fe7c:	2301      	movmi	r3, #1
 800fe7e:	2300      	movpl	r3, #0
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	f083 0301 	eor.w	r3, r3, #1
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d144      	bne.n	800ff16 <nk_fill_circle+0x1ba>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 800fe8c:	2214      	movs	r2, #20
 800fe8e:	2108      	movs	r1, #8
 800fe90:	6978      	ldr	r0, [r7, #20]
 800fe92:	f7ff fc87 	bl	800f7a4 <nk_command_buffer_push>
 800fe96:	61b8      	str	r0, [r7, #24]
    if (!cmd) return;
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d03d      	beq.n	800ff1a <nk_fill_circle+0x1be>
    cmd->x = (short)r.x;
 800fe9e:	edd7 7a01 	vldr	s15, [r7, #4]
 800fea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fea6:	ee17 3a90 	vmov	r3, s15
 800feaa:	b21a      	sxth	r2, r3
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 800feb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800feb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800feb8:	ee17 3a90 	vmov	r3, s15
 800febc:	b21a      	sxth	r2, r3
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 800fec2:	edd7 7a03 	vldr	s15, [r7, #12]
 800fec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800feca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fece:	d501      	bpl.n	800fed4 <nk_fill_circle+0x178>
 800fed0:	2200      	movs	r2, #0
 800fed2:	e006      	b.n	800fee2 <nk_fill_circle+0x186>
 800fed4:	edd7 7a03 	vldr	s15, [r7, #12]
 800fed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fedc:	ee17 3a90 	vmov	r3, s15
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 800fee6:	edd7 7a04 	vldr	s15, [r7, #16]
 800feea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800feee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef2:	d501      	bpl.n	800fef8 <nk_fill_circle+0x19c>
 800fef4:	2200      	movs	r2, #0
 800fef6:	e006      	b.n	800ff06 <nk_fill_circle+0x1aa>
 800fef8:	edd7 7a04 	vldr	s15, [r7, #16]
 800fefc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff00:	ee17 3a90 	vmov	r3, s15
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	81da      	strh	r2, [r3, #14]
    cmd->color = c;
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	683a      	ldr	r2, [r7, #0]
 800ff0e:	611a      	str	r2, [r3, #16]
 800ff10:	e004      	b.n	800ff1c <nk_fill_circle+0x1c0>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 800ff12:	bf00      	nop
 800ff14:	e002      	b.n	800ff1c <nk_fill_circle+0x1c0>
            return;
 800ff16:	bf00      	nop
 800ff18:	e000      	b.n	800ff1c <nk_fill_circle+0x1c0>
    if (!cmd) return;
 800ff1a:	bf00      	nop
}
 800ff1c:	3720      	adds	r7, #32
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	08020238 	.word	0x08020238
 800ff28:	0802154c 	.word	0x0802154c
 800ff2c:	0802021c 	.word	0x0802021c

0800ff30 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b08a      	sub	sp, #40	; 0x28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	61f8      	str	r0, [r7, #28]
 800ff38:	ed87 0a06 	vstr	s0, [r7, #24]
 800ff3c:	edc7 0a05 	vstr	s1, [r7, #20]
 800ff40:	ed87 1a04 	vstr	s2, [r7, #16]
 800ff44:	edc7 1a03 	vstr	s3, [r7, #12]
 800ff48:	ed87 2a02 	vstr	s4, [r7, #8]
 800ff4c:	edc7 2a01 	vstr	s5, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d106      	bne.n	800ff66 <nk_fill_triangle+0x36>
 800ff58:	4baf      	ldr	r3, [pc, #700]	; (8010218 <nk_fill_triangle+0x2e8>)
 800ff5a:	4ab0      	ldr	r2, [pc, #704]	; (801021c <nk_fill_triangle+0x2ec>)
 800ff5c:	f240 1135 	movw	r1, #309	; 0x135
 800ff60:	48af      	ldr	r0, [pc, #700]	; (8010220 <nk_fill_triangle+0x2f0>)
 800ff62:	f00c fc7b 	bl	801c85c <__assert_func>
    if (!b || c.a == 0) return;
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	f000 814b 	beq.w	8010204 <nk_fill_triangle+0x2d4>
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f000 8147 	beq.w	8010204 <nk_fill_triangle+0x2d4>
    if (!b) return;
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 8145 	beq.w	8010208 <nk_fill_triangle+0x2d8>
    if (b->use_clipping) {
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	695b      	ldr	r3, [r3, #20]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f000 80fb 	beq.w	801017e <nk_fill_triangle+0x24e>
        const struct nk_rect *clip = &b->clip;
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	3304      	adds	r3, #4
 800ff8c:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	edd3 7a00 	vldr	s15, [r3]
 800ff94:	ed97 7a06 	vldr	s14, [r7, #24]
 800ff98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa0:	bfac      	ite	ge
 800ffa2:	2301      	movge	r3, #1
 800ffa4:	2300      	movlt	r3, #0
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	f083 0301 	eor.w	r3, r3, #1
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d140      	bne.n	8010034 <nk_fill_triangle+0x104>
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb4:	ed93 7a00 	vldr	s14, [r3]
 800ffb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffba:	edd3 7a02 	vldr	s15, [r3, #8]
 800ffbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffc2:	ed97 7a06 	vldr	s14, [r7, #24]
 800ffc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ffca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffce:	bf4c      	ite	mi
 800ffd0:	2301      	movmi	r3, #1
 800ffd2:	2300      	movpl	r3, #0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f083 0301 	eor.w	r3, r3, #1
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d129      	bne.n	8010034 <nk_fill_triangle+0x104>
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	edd3 7a01 	vldr	s15, [r3, #4]
 800ffe6:	ed97 7a05 	vldr	s14, [r7, #20]
 800ffea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ffee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff2:	bfac      	ite	ge
 800fff4:	2301      	movge	r3, #1
 800fff6:	2300      	movlt	r3, #0
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	f083 0301 	eor.w	r3, r3, #1
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	d117      	bne.n	8010034 <nk_fill_triangle+0x104>
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	ed93 7a01 	vldr	s14, [r3, #4]
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	edd3 7a03 	vldr	s15, [r3, #12]
 8010010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010014:	ed97 7a05 	vldr	s14, [r7, #20]
 8010018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801001c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010020:	bf4c      	ite	mi
 8010022:	2301      	movmi	r3, #1
 8010024:	2300      	movpl	r3, #0
 8010026:	b2db      	uxtb	r3, r3
 8010028:	f083 0301 	eor.w	r3, r3, #1
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	f000 80a5 	beq.w	801017e <nk_fill_triangle+0x24e>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	edd3 7a00 	vldr	s15, [r3]
 801003a:	ed97 7a04 	vldr	s14, [r7, #16]
 801003e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010046:	bfac      	ite	ge
 8010048:	2301      	movge	r3, #1
 801004a:	2300      	movlt	r3, #0
 801004c:	b2db      	uxtb	r3, r3
 801004e:	f083 0301 	eor.w	r3, r3, #1
 8010052:	b2db      	uxtb	r3, r3
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8010054:	2b00      	cmp	r3, #0
 8010056:	d13f      	bne.n	80100d8 <nk_fill_triangle+0x1a8>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8010058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005a:	ed93 7a00 	vldr	s14, [r3]
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	edd3 7a02 	vldr	s15, [r3, #8]
 8010064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010068:	ed97 7a04 	vldr	s14, [r7, #16]
 801006c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010074:	bf4c      	ite	mi
 8010076:	2301      	movmi	r3, #1
 8010078:	2300      	movpl	r3, #0
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f083 0301 	eor.w	r3, r3, #1
 8010080:	b2db      	uxtb	r3, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	d128      	bne.n	80100d8 <nk_fill_triangle+0x1a8>
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	edd3 7a01 	vldr	s15, [r3, #4]
 801008c:	ed97 7a03 	vldr	s14, [r7, #12]
 8010090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010098:	bfac      	ite	ge
 801009a:	2301      	movge	r3, #1
 801009c:	2300      	movlt	r3, #0
 801009e:	b2db      	uxtb	r3, r3
 80100a0:	f083 0301 	eor.w	r3, r3, #1
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d116      	bne.n	80100d8 <nk_fill_triangle+0x1a8>
 80100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80100b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80100be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c6:	bf4c      	ite	mi
 80100c8:	2301      	movmi	r3, #1
 80100ca:	2300      	movpl	r3, #0
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	f083 0301 	eor.w	r3, r3, #1
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d052      	beq.n	801017e <nk_fill_triangle+0x24e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 80100d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100da:	edd3 7a00 	vldr	s15, [r3]
 80100de:	ed97 7a02 	vldr	s14, [r7, #8]
 80100e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ea:	bfac      	ite	ge
 80100ec:	2301      	movge	r3, #1
 80100ee:	2300      	movlt	r3, #0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	f083 0301 	eor.w	r3, r3, #1
 80100f6:	b2db      	uxtb	r3, r3
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f040 8087 	bne.w	801020c <nk_fill_triangle+0x2dc>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 80100fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010100:	ed93 7a00 	vldr	s14, [r3]
 8010104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010106:	edd3 7a02 	vldr	s15, [r3, #8]
 801010a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801010e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011a:	bf4c      	ite	mi
 801011c:	2301      	movmi	r3, #1
 801011e:	2300      	movpl	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	f083 0301 	eor.w	r3, r3, #1
 8010126:	b2db      	uxtb	r3, r3
 8010128:	2b00      	cmp	r3, #0
 801012a:	d16f      	bne.n	801020c <nk_fill_triangle+0x2dc>
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010132:	ed97 7a01 	vldr	s14, [r7, #4]
 8010136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801013a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013e:	bfac      	ite	ge
 8010140:	2301      	movge	r3, #1
 8010142:	2300      	movlt	r3, #0
 8010144:	b2db      	uxtb	r3, r3
 8010146:	f083 0301 	eor.w	r3, r3, #1
 801014a:	b2db      	uxtb	r3, r3
 801014c:	2b00      	cmp	r3, #0
 801014e:	d15d      	bne.n	801020c <nk_fill_triangle+0x2dc>
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010152:	ed93 7a01 	vldr	s14, [r3, #4]
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010158:	edd3 7a03 	vldr	s15, [r3, #12]
 801015c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010160:	ed97 7a01 	vldr	s14, [r7, #4]
 8010164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016c:	bf4c      	ite	mi
 801016e:	2301      	movmi	r3, #1
 8010170:	2300      	movpl	r3, #0
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f083 0301 	eor.w	r3, r3, #1
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d146      	bne.n	801020c <nk_fill_triangle+0x2dc>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 801017e:	2218      	movs	r2, #24
 8010180:	210c      	movs	r1, #12
 8010182:	69f8      	ldr	r0, [r7, #28]
 8010184:	f7ff fb0e 	bl	800f7a4 <nk_command_buffer_push>
 8010188:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 801018a:	6a3b      	ldr	r3, [r7, #32]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d03f      	beq.n	8010210 <nk_fill_triangle+0x2e0>
    cmd->a.x = (short)x0;
 8010190:	edd7 7a06 	vldr	s15, [r7, #24]
 8010194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010198:	ee17 3a90 	vmov	r3, s15
 801019c:	b21a      	sxth	r2, r3
 801019e:	6a3b      	ldr	r3, [r7, #32]
 80101a0:	811a      	strh	r2, [r3, #8]
    cmd->a.y = (short)y0;
 80101a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80101a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101aa:	ee17 3a90 	vmov	r3, s15
 80101ae:	b21a      	sxth	r2, r3
 80101b0:	6a3b      	ldr	r3, [r7, #32]
 80101b2:	815a      	strh	r2, [r3, #10]
    cmd->b.x = (short)x1;
 80101b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80101b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101bc:	ee17 3a90 	vmov	r3, s15
 80101c0:	b21a      	sxth	r2, r3
 80101c2:	6a3b      	ldr	r3, [r7, #32]
 80101c4:	819a      	strh	r2, [r3, #12]
    cmd->b.y = (short)y1;
 80101c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80101ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101ce:	ee17 3a90 	vmov	r3, s15
 80101d2:	b21a      	sxth	r2, r3
 80101d4:	6a3b      	ldr	r3, [r7, #32]
 80101d6:	81da      	strh	r2, [r3, #14]
    cmd->c.x = (short)x2;
 80101d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80101dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101e0:	ee17 3a90 	vmov	r3, s15
 80101e4:	b21a      	sxth	r2, r3
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	821a      	strh	r2, [r3, #16]
    cmd->c.y = (short)y2;
 80101ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80101ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101f2:	ee17 3a90 	vmov	r3, s15
 80101f6:	b21a      	sxth	r2, r3
 80101f8:	6a3b      	ldr	r3, [r7, #32]
 80101fa:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	615a      	str	r2, [r3, #20]
 8010202:	e006      	b.n	8010212 <nk_fill_triangle+0x2e2>
    if (!b || c.a == 0) return;
 8010204:	bf00      	nop
 8010206:	e004      	b.n	8010212 <nk_fill_triangle+0x2e2>
    if (!b) return;
 8010208:	bf00      	nop
 801020a:	e002      	b.n	8010212 <nk_fill_triangle+0x2e2>
            return;
 801020c:	bf00      	nop
 801020e:	e000      	b.n	8010212 <nk_fill_triangle+0x2e2>
    if (!cmd) return;
 8010210:	bf00      	nop
}
 8010212:	3728      	adds	r7, #40	; 0x28
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	08020238 	.word	0x08020238
 801021c:	0802155c 	.word	0x0802155c
 8010220:	0802021c 	.word	0x0802021c

08010224 <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 8010224:	b590      	push	{r4, r7, lr}
 8010226:	b08b      	sub	sp, #44	; 0x2c
 8010228:	af00      	add	r7, sp, #0
 801022a:	61f8      	str	r0, [r7, #28]
 801022c:	eeb0 6a40 	vmov.f32	s12, s0
 8010230:	eef0 6a60 	vmov.f32	s13, s1
 8010234:	eeb0 7a41 	vmov.f32	s14, s2
 8010238:	eef0 7a61 	vmov.f32	s15, s3
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	607a      	str	r2, [r7, #4]
 8010240:	ed87 6a03 	vstr	s12, [r7, #12]
 8010244:	edc7 6a04 	vstr	s13, [r7, #16]
 8010248:	ed87 7a05 	vstr	s14, [r7, #20]
 801024c:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <nk_draw_image+0x40>
 8010256:	4b69      	ldr	r3, [pc, #420]	; (80103fc <nk_draw_image+0x1d8>)
 8010258:	4a69      	ldr	r2, [pc, #420]	; (8010400 <nk_draw_image+0x1dc>)
 801025a:	f240 118f 	movw	r1, #399	; 0x18f
 801025e:	4869      	ldr	r0, [pc, #420]	; (8010404 <nk_draw_image+0x1e0>)
 8010260:	f00c fafc 	bl	801c85c <__assert_func>
    if (!b) return;
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	2b00      	cmp	r3, #0
 8010268:	f000 80bf 	beq.w	80103ea <nk_draw_image+0x1c6>
    if (b->use_clipping) {
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	695b      	ldr	r3, [r3, #20]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d06f      	beq.n	8010354 <nk_draw_image+0x130>
        const struct nk_rect *c = &b->clip;
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	3304      	adds	r3, #4
 8010278:	627b      	str	r3, [r7, #36]	; 0x24
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010280:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010288:	f000 80b1 	beq.w	80103ee <nk_draw_image+0x1ca>
 801028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801029a:	f000 80a8 	beq.w	80103ee <nk_draw_image+0x1ca>
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	ed93 7a00 	vldr	s14, [r3]
 80102a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80102a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80102ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b8:	bf4c      	ite	mi
 80102ba:	2301      	movmi	r3, #1
 80102bc:	2300      	movpl	r3, #0
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	f083 0301 	eor.w	r3, r3, #1
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f040 8091 	bne.w	80103ee <nk_draw_image+0x1ca>
 80102cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	edd3 6a00 	vldr	s13, [r3]
 80102d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80102dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e8:	bf4c      	ite	mi
 80102ea:	2301      	movmi	r3, #1
 80102ec:	2300      	movpl	r3, #0
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	f083 0301 	eor.w	r3, r3, #1
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d179      	bne.n	80103ee <nk_draw_image+0x1ca>
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8010300:	edd7 6a04 	vldr	s13, [r7, #16]
 8010304:	edd7 7a06 	vldr	s15, [r7, #24]
 8010308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801030c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010314:	bf4c      	ite	mi
 8010316:	2301      	movmi	r3, #1
 8010318:	2300      	movpl	r3, #0
 801031a:	b2db      	uxtb	r3, r3
 801031c:	f083 0301 	eor.w	r3, r3, #1
 8010320:	b2db      	uxtb	r3, r3
 8010322:	2b00      	cmp	r3, #0
 8010324:	d163      	bne.n	80103ee <nk_draw_image+0x1ca>
 8010326:	ed97 7a04 	vldr	s14, [r7, #16]
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010332:	edd3 7a03 	vldr	s15, [r3, #12]
 8010336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801033a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	bf4c      	ite	mi
 8010344:	2301      	movmi	r3, #1
 8010346:	2300      	movpl	r3, #0
 8010348:	b2db      	uxtb	r3, r3
 801034a:	f083 0301 	eor.w	r3, r3, #1
 801034e:	b2db      	uxtb	r3, r3
 8010350:	2b00      	cmp	r3, #0
 8010352:	d14c      	bne.n	80103ee <nk_draw_image+0x1ca>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 8010354:	2224      	movs	r2, #36	; 0x24
 8010356:	2111      	movs	r1, #17
 8010358:	69f8      	ldr	r0, [r7, #28]
 801035a:	f7ff fa23 	bl	800f7a4 <nk_command_buffer_push>
 801035e:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d045      	beq.n	80103f2 <nk_draw_image+0x1ce>
    cmd->x = (short)r.x;
 8010366:	edd7 7a03 	vldr	s15, [r7, #12]
 801036a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801036e:	ee17 3a90 	vmov	r3, s15
 8010372:	b21a      	sxth	r2, r3
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8010378:	edd7 7a04 	vldr	s15, [r7, #16]
 801037c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010380:	ee17 3a90 	vmov	r3, s15
 8010384:	b21a      	sxth	r2, r3
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 801038a:	edd7 7a05 	vldr	s15, [r7, #20]
 801038e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010396:	dd07      	ble.n	80103a8 <nk_draw_image+0x184>
 8010398:	edd7 7a05 	vldr	s15, [r7, #20]
 801039c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103a0:	ee17 3a90 	vmov	r3, s15
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	e000      	b.n	80103aa <nk_draw_image+0x186>
 80103a8:	2200      	movs	r2, #0
 80103aa:	6a3b      	ldr	r3, [r7, #32]
 80103ac:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 80103ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80103b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80103b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ba:	dd07      	ble.n	80103cc <nk_draw_image+0x1a8>
 80103bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80103c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80103c4:	ee17 3a90 	vmov	r3, s15
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	e000      	b.n	80103ce <nk_draw_image+0x1aa>
 80103cc:	2200      	movs	r2, #0
 80103ce:	6a3b      	ldr	r3, [r7, #32]
 80103d0:	81da      	strh	r2, [r3, #14]
    cmd->img = *img;
 80103d2:	6a3b      	ldr	r3, [r7, #32]
 80103d4:	68ba      	ldr	r2, [r7, #8]
 80103d6:	f103 0410 	add.w	r4, r3, #16
 80103da:	4613      	mov	r3, r2
 80103dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmd->col = col;
 80103e2:	6a3b      	ldr	r3, [r7, #32]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	621a      	str	r2, [r3, #32]
 80103e8:	e004      	b.n	80103f4 <nk_draw_image+0x1d0>
    if (!b) return;
 80103ea:	bf00      	nop
 80103ec:	e002      	b.n	80103f4 <nk_draw_image+0x1d0>
            return;
 80103ee:	bf00      	nop
 80103f0:	e000      	b.n	80103f4 <nk_draw_image+0x1d0>
    if (!cmd) return;
 80103f2:	bf00      	nop
}
 80103f4:	372c      	adds	r7, #44	; 0x2c
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd90      	pop	{r4, r7, pc}
 80103fa:	bf00      	nop
 80103fc:	08020238 	.word	0x08020238
 8010400:	08021570 	.word	0x08021570
 8010404:	0802021c 	.word	0x0802021c

08010408 <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b0b4      	sub	sp, #208	; 0xd0
 801040c:	af00      	add	r7, sp, #0
 801040e:	61f8      	str	r0, [r7, #28]
 8010410:	eeb0 6a40 	vmov.f32	s12, s0
 8010414:	eef0 6a60 	vmov.f32	s13, s1
 8010418:	eeb0 7a41 	vmov.f32	s14, s2
 801041c:	eef0 7a61 	vmov.f32	s15, s3
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	ed87 6a03 	vstr	s12, [r7, #12]
 8010428:	edc7 6a04 	vstr	s13, [r7, #16]
 801042c:	ed87 7a05 	vstr	s14, [r7, #20]
 8010430:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 801043a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801043e:	891b      	ldrh	r3, [r3, #8]
 8010440:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    rgnY = slcimg->region[1];
 8010444:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010448:	895b      	ldrh	r3, [r3, #10]
 801044a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    rgnW = slcimg->region[2];
 801044e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010452:	899b      	ldrh	r3, [r3, #12]
 8010454:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    rgnH = slcimg->region[3];
 8010458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801045c:	89db      	ldrh	r3, [r3, #14]
 801045e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

    /* top-left */
    img.handle = slcimg->handle;
 8010462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	627b      	str	r3, [r7, #36]	; 0x24
    img.w = slcimg->w;
 801046a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801046e:	889b      	ldrh	r3, [r3, #4]
 8010470:	853b      	strh	r3, [r7, #40]	; 0x28
    img.h = slcimg->h;
 8010472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010476:	88db      	ldrh	r3, [r3, #6]
 8010478:	857b      	strh	r3, [r7, #42]	; 0x2a
    img.region[0] = rgnX;
 801047a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801047e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    img.region[1] = rgnY;
 8010480:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8010484:	85fb      	strh	r3, [r7, #46]	; 0x2e
    img.region[2] = slc->l;
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	8a1b      	ldrh	r3, [r3, #16]
 801048a:	863b      	strh	r3, [r7, #48]	; 0x30
    img.region[3] = slc->t;
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	8a5b      	ldrh	r3, [r3, #18]
 8010490:	867b      	strh	r3, [r7, #50]	; 0x32

    nk_draw_image(b,
 8010492:	edd7 7a03 	vldr	s15, [r7, #12]
 8010496:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 801049e:	ee06 3a90 	vmov	s13, r3
 80104a2:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80104aa:	ee06 3a10 	vmov	s12, r3
 80104ae:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80104b2:	eef0 1a46 	vmov.f32	s3, s12
 80104b6:	eeb0 1a66 	vmov.f32	s2, s13
 80104ba:	eef0 0a47 	vmov.f32	s1, s14
 80104be:	eeb0 0a67 	vmov.f32	s0, s15
 80104c2:	f002 f8b1 	bl	8012628 <nk_rect>
 80104c6:	eeb0 6a40 	vmov.f32	s12, s0
 80104ca:	eef0 6a60 	vmov.f32	s13, s1
 80104ce:	eeb0 7a41 	vmov.f32	s14, s2
 80104d2:	eef0 7a61 	vmov.f32	s15, s3
 80104d6:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 80104da:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80104de:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80104e2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80104e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104ea:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80104ee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80104f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80104f6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	4619      	mov	r1, r3
 80104fe:	eeb0 0a46 	vmov.f32	s0, s12
 8010502:	eef0 0a66 	vmov.f32	s1, s13
 8010506:	eeb0 1a47 	vmov.f32	s2, s14
 801050a:	eef0 1a67 	vmov.f32	s3, s15
 801050e:	69f8      	ldr	r0, [r7, #28]
 8010510:	f7ff fe88 	bl	8010224 <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	8a1a      	ldrh	r2, [r3, #16]
 8010518:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801051c:	4413      	add	r3, r2
 801051e:	b29b      	uxth	r3, r3
 8010520:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010522:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8010526:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	8a1b      	ldrh	r3, [r3, #16]
 801052c:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	b29a      	uxth	r2, r3
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	8a9b      	ldrh	r3, [r3, #20]
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	b29b      	uxth	r3, r3
 801053c:	863b      	strh	r3, [r7, #48]	; 0x30
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	8a5b      	ldrh	r3, [r3, #18]
 8010542:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8010544:	ed97 7a03 	vldr	s14, [r7, #12]
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	8a1b      	ldrh	r3, [r3, #16]
 801054c:	ee07 3a90 	vmov	s15, r3
 8010550:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8010554:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010558:	ed97 6a04 	vldr	s12, [r7, #16]
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 801055c:	ed97 7a05 	vldr	s14, [r7, #20]
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	8a1b      	ldrh	r3, [r3, #16]
 8010564:	ee07 3a90 	vmov	s15, r3
 8010568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801056c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	8a9b      	ldrh	r3, [r3, #20]
 8010574:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8010578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801057c:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8010584:	ee07 3a10 	vmov	s14, r3
 8010588:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801058c:	eef0 1a47 	vmov.f32	s3, s14
 8010590:	eeb0 1a67 	vmov.f32	s2, s15
 8010594:	eef0 0a46 	vmov.f32	s1, s12
 8010598:	eeb0 0a66 	vmov.f32	s0, s13
 801059c:	f002 f844 	bl	8012628 <nk_rect>
 80105a0:	eeb0 6a40 	vmov.f32	s12, s0
 80105a4:	eef0 6a60 	vmov.f32	s13, s1
 80105a8:	eeb0 7a41 	vmov.f32	s14, s2
 80105ac:	eef0 7a61 	vmov.f32	s15, s3
 80105b0:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 80105b4:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 80105b8:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 80105bc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80105c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105c4:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80105c8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80105cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80105d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	4619      	mov	r1, r3
 80105d8:	eeb0 0a46 	vmov.f32	s0, s12
 80105dc:	eef0 0a66 	vmov.f32	s1, s13
 80105e0:	eeb0 1a47 	vmov.f32	s2, s14
 80105e4:	eef0 1a67 	vmov.f32	s3, s15
 80105e8:	69f8      	ldr	r0, [r7, #28]
 80105ea:	f7ff fe1b 	bl	8010224 <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 80105ee:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80105f2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80105f6:	4413      	add	r3, r2
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	8a9b      	ldrh	r3, [r3, #20]
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	b29b      	uxth	r3, r3
 8010602:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010604:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8010608:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	8a9b      	ldrh	r3, [r3, #20]
 801060e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	8a5b      	ldrh	r3, [r3, #18]
 8010614:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8010616:	ed97 7a03 	vldr	s14, [r7, #12]
 801061a:	edd7 7a05 	vldr	s15, [r7, #20]
 801061e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	8a9b      	ldrh	r3, [r3, #20]
 8010626:	ee07 3a90 	vmov	s15, r3
 801062a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801062e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010632:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 801063a:	ee06 3a90 	vmov	s13, r3
 801063e:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8010646:	ee06 3a10 	vmov	s12, r3
 801064a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801064e:	eef0 1a46 	vmov.f32	s3, s12
 8010652:	eeb0 1a66 	vmov.f32	s2, s13
 8010656:	eef0 0a47 	vmov.f32	s1, s14
 801065a:	eeb0 0a67 	vmov.f32	s0, s15
 801065e:	f001 ffe3 	bl	8012628 <nk_rect>
 8010662:	eeb0 6a40 	vmov.f32	s12, s0
 8010666:	eef0 6a60 	vmov.f32	s13, s1
 801066a:	eeb0 7a41 	vmov.f32	s14, s2
 801066e:	eef0 7a61 	vmov.f32	s15, s3
 8010672:	ed87 6a15 	vstr	s12, [r7, #84]	; 0x54
 8010676:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 801067a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 801067e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8010682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010686:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 801068a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801068e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010692:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	4619      	mov	r1, r3
 801069a:	eeb0 0a46 	vmov.f32	s0, s12
 801069e:	eef0 0a66 	vmov.f32	s1, s13
 80106a2:	eeb0 1a47 	vmov.f32	s2, s14
 80106a6:	eef0 1a67 	vmov.f32	s3, s15
 80106aa:	69f8      	ldr	r0, [r7, #28]
 80106ac:	f7ff fdba 	bl	8010224 <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 80106b0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80106b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	8a5a      	ldrh	r2, [r3, #18]
 80106ba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80106be:	4413      	add	r3, r2
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	8a1b      	ldrh	r3, [r3, #16]
 80106c8:	863b      	strh	r3, [r7, #48]	; 0x30
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	8a5b      	ldrh	r3, [r3, #18]
 80106ce:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	8adb      	ldrh	r3, [r3, #22]
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	b29b      	uxth	r3, r3
 80106de:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 80106e0:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 80106e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	8a5b      	ldrh	r3, [r3, #18]
 80106ec:	ee07 3a90 	vmov	s15, r3
 80106f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80106f4:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80106fc:	ee07 3a90 	vmov	s15, r3
 8010700:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8010704:	ed97 7a06 	vldr	s14, [r7, #24]
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	8a5b      	ldrh	r3, [r3, #18]
 801070c:	ee07 3a90 	vmov	s15, r3
 8010710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	8adb      	ldrh	r3, [r3, #22]
 801071c:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8010720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010728:	eef0 1a67 	vmov.f32	s3, s15
 801072c:	eeb0 1a65 	vmov.f32	s2, s11
 8010730:	eef0 0a46 	vmov.f32	s1, s12
 8010734:	eeb0 0a66 	vmov.f32	s0, s13
 8010738:	f001 ff76 	bl	8012628 <nk_rect>
 801073c:	eeb0 6a40 	vmov.f32	s12, s0
 8010740:	eef0 6a60 	vmov.f32	s13, s1
 8010744:	eeb0 7a41 	vmov.f32	s14, s2
 8010748:	eef0 7a61 	vmov.f32	s15, s3
 801074c:	ed87 6a19 	vstr	s12, [r7, #100]	; 0x64
 8010750:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8010754:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8010758:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010760:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8010764:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8010768:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801076c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4619      	mov	r1, r3
 8010774:	eeb0 0a46 	vmov.f32	s0, s12
 8010778:	eef0 0a66 	vmov.f32	s1, s13
 801077c:	eeb0 1a47 	vmov.f32	s2, s14
 8010780:	eef0 1a67 	vmov.f32	s3, s15
 8010784:	69f8      	ldr	r0, [r7, #28]
 8010786:	f7ff fd4d 	bl	8010224 <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	8a1a      	ldrh	r2, [r3, #16]
 801078e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8010792:	4413      	add	r3, r2
 8010794:	b29b      	uxth	r3, r3
 8010796:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	8a5a      	ldrh	r2, [r3, #18]
 801079c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80107a0:	4413      	add	r3, r2
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	8a1b      	ldrh	r3, [r3, #16]
 80107aa:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	b29a      	uxth	r2, r3
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	8a9b      	ldrh	r3, [r3, #20]
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	863b      	strh	r3, [r7, #48]	; 0x30
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	8a5b      	ldrh	r3, [r3, #18]
 80107c0:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	8adb      	ldrh	r3, [r3, #22]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 80107d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	8a1b      	ldrh	r3, [r3, #16]
 80107da:	ee07 3a90 	vmov	s15, r3
 80107de:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80107e2:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 80107e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	8a5b      	ldrh	r3, [r3, #18]
 80107ee:	ee07 3a90 	vmov	s15, r3
 80107f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80107f6:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 80107fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	8a1b      	ldrh	r3, [r3, #16]
 8010802:	ee07 3a90 	vmov	s15, r3
 8010806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801080a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	8a9b      	ldrh	r3, [r3, #20]
 8010812:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8010816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801081a:	ee77 5a67 	vsub.f32	s11, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801081e:	ed97 7a06 	vldr	s14, [r7, #24]
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	8a5b      	ldrh	r3, [r3, #18]
 8010826:	ee07 3a90 	vmov	s15, r3
 801082a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801082e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	8adb      	ldrh	r3, [r3, #22]
 8010836:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801083a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801083e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010842:	eef0 1a67 	vmov.f32	s3, s15
 8010846:	eeb0 1a65 	vmov.f32	s2, s11
 801084a:	eef0 0a46 	vmov.f32	s1, s12
 801084e:	eeb0 0a66 	vmov.f32	s0, s13
 8010852:	f001 fee9 	bl	8012628 <nk_rect>
 8010856:	eeb0 6a40 	vmov.f32	s12, s0
 801085a:	eef0 6a60 	vmov.f32	s13, s1
 801085e:	eeb0 7a41 	vmov.f32	s14, s2
 8010862:	eef0 7a61 	vmov.f32	s15, s3
 8010866:	ed87 6a1d 	vstr	s12, [r7, #116]	; 0x74
 801086a:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 801086e:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 8010872:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 8010876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801087a:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 801087e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8010882:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8010886:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	4619      	mov	r1, r3
 801088e:	eeb0 0a46 	vmov.f32	s0, s12
 8010892:	eef0 0a66 	vmov.f32	s1, s13
 8010896:	eeb0 1a47 	vmov.f32	s2, s14
 801089a:	eef0 1a67 	vmov.f32	s3, s15
 801089e:	69f8      	ldr	r0, [r7, #28]
 80108a0:	f7ff fcc0 	bl	8010224 <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 80108a4:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80108a8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80108ac:	4413      	add	r3, r2
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	8a9b      	ldrh	r3, [r3, #20]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	8a5a      	ldrh	r2, [r3, #18]
 80108be:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80108c2:	4413      	add	r3, r2
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	8a9b      	ldrh	r3, [r3, #20]
 80108cc:	863b      	strh	r3, [r7, #48]	; 0x30
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	8a5b      	ldrh	r3, [r3, #18]
 80108d2:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	b29a      	uxth	r2, r3
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	8adb      	ldrh	r3, [r3, #22]
 80108de:	1ad3      	subs	r3, r2, r3
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80108e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80108e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80108ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	8a9b      	ldrh	r3, [r3, #20]
 80108f4:	ee07 3a90 	vmov	s15, r3
 80108f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80108fc:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8010900:	ed97 7a04 	vldr	s14, [r7, #16]
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	8a5b      	ldrh	r3, [r3, #18]
 8010908:	ee07 3a90 	vmov	s15, r3
 801090c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8010910:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8010918:	ee07 3a90 	vmov	s15, r3
 801091c:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8010920:	ed97 7a06 	vldr	s14, [r7, #24]
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	8a5b      	ldrh	r3, [r3, #18]
 8010928:	ee07 3a90 	vmov	s15, r3
 801092c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	8adb      	ldrh	r3, [r3, #22]
 8010938:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801093c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010944:	eef0 1a67 	vmov.f32	s3, s15
 8010948:	eeb0 1a65 	vmov.f32	s2, s11
 801094c:	eef0 0a46 	vmov.f32	s1, s12
 8010950:	eeb0 0a66 	vmov.f32	s0, s13
 8010954:	f001 fe68 	bl	8012628 <nk_rect>
 8010958:	eeb0 6a40 	vmov.f32	s12, s0
 801095c:	eef0 6a60 	vmov.f32	s13, s1
 8010960:	eeb0 7a41 	vmov.f32	s14, s2
 8010964:	eef0 7a61 	vmov.f32	s15, s3
 8010968:	ed87 6a21 	vstr	s12, [r7, #132]	; 0x84
 801096c:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 8010970:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 8010974:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 8010978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801097c:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8010980:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8010984:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8010988:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	4619      	mov	r1, r3
 8010990:	eeb0 0a46 	vmov.f32	s0, s12
 8010994:	eef0 0a66 	vmov.f32	s1, s13
 8010998:	eeb0 1a47 	vmov.f32	s2, s14
 801099c:	eef0 1a67 	vmov.f32	s3, s15
 80109a0:	69f8      	ldr	r0, [r7, #28]
 80109a2:	f7ff fc3f 	bl	8010224 <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 80109a6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80109aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80109ac:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80109b0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80109b4:	4413      	add	r3, r2
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	8adb      	ldrh	r3, [r3, #22]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	b29b      	uxth	r3, r3
 80109c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	8a1b      	ldrh	r3, [r3, #16]
 80109c6:	863b      	strh	r3, [r7, #48]	; 0x30
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	8adb      	ldrh	r3, [r3, #22]
 80109cc:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 80109ce:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 80109d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80109d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80109da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	8adb      	ldrh	r3, [r3, #22]
 80109e2:	ee07 3a90 	vmov	s15, r3
 80109e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80109ea:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80109f2:	ee07 3a10 	vmov	s14, r3
 80109f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 80109fe:	ee06 3a10 	vmov	s12, r3
 8010a02:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8010a06:	eef0 1a46 	vmov.f32	s3, s12
 8010a0a:	eeb0 1a47 	vmov.f32	s2, s14
 8010a0e:	eef0 0a67 	vmov.f32	s1, s15
 8010a12:	eeb0 0a66 	vmov.f32	s0, s13
 8010a16:	f001 fe07 	bl	8012628 <nk_rect>
 8010a1a:	eeb0 6a40 	vmov.f32	s12, s0
 8010a1e:	eef0 6a60 	vmov.f32	s13, s1
 8010a22:	eeb0 7a41 	vmov.f32	s14, s2
 8010a26:	eef0 7a61 	vmov.f32	s15, s3
 8010a2a:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 8010a2e:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8010a32:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8010a36:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8010a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a3e:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8010a42:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8010a46:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8010a4a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	4619      	mov	r1, r3
 8010a52:	eeb0 0a46 	vmov.f32	s0, s12
 8010a56:	eef0 0a66 	vmov.f32	s1, s13
 8010a5a:	eeb0 1a47 	vmov.f32	s2, s14
 8010a5e:	eef0 1a67 	vmov.f32	s3, s15
 8010a62:	69f8      	ldr	r0, [r7, #28]
 8010a64:	f7ff fbde 	bl	8010224 <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	8a1a      	ldrh	r2, [r3, #16]
 8010a6c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8010a70:	4413      	add	r3, r2
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010a76:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8010a7a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8010a7e:	4413      	add	r3, r2
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	8adb      	ldrh	r3, [r3, #22]
 8010a86:	1ad3      	subs	r3, r2, r3
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	8a1b      	ldrh	r3, [r3, #16]
 8010a90:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010a94:	1ad3      	subs	r3, r2, r3
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	8a9b      	ldrh	r3, [r3, #20]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	863b      	strh	r3, [r7, #48]	; 0x30
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	8adb      	ldrh	r3, [r3, #22]
 8010aa6:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8010aa8:	ed97 7a03 	vldr	s14, [r7, #12]
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	8a1b      	ldrh	r3, [r3, #16]
 8010ab0:	ee07 3a90 	vmov	s15, r3
 8010ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8010ab8:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8010abc:	ed97 7a04 	vldr	s14, [r7, #16]
 8010ac0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	8adb      	ldrh	r3, [r3, #22]
 8010acc:	ee07 3a90 	vmov	s15, r3
 8010ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8010ad4:	ee37 6a67 	vsub.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8010ad8:	ed97 7a05 	vldr	s14, [r7, #20]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	8a1b      	ldrh	r3, [r3, #16]
 8010ae0:	ee07 3a90 	vmov	s15, r3
 8010ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	8a9b      	ldrh	r3, [r3, #20]
 8010af0:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8010af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010af8:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8010b00:	ee07 3a10 	vmov	s14, r3
 8010b04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010b08:	eef0 1a47 	vmov.f32	s3, s14
 8010b0c:	eeb0 1a67 	vmov.f32	s2, s15
 8010b10:	eef0 0a46 	vmov.f32	s1, s12
 8010b14:	eeb0 0a66 	vmov.f32	s0, s13
 8010b18:	f001 fd86 	bl	8012628 <nk_rect>
 8010b1c:	eeb0 6a40 	vmov.f32	s12, s0
 8010b20:	eef0 6a60 	vmov.f32	s13, s1
 8010b24:	eeb0 7a41 	vmov.f32	s14, s2
 8010b28:	eef0 7a61 	vmov.f32	s15, s3
 8010b2c:	ed87 6a29 	vstr	s12, [r7, #164]	; 0xa4
 8010b30:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 8010b34:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 8010b38:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8010b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b40:	ed97 6a29 	vldr	s12, [r7, #164]	; 0xa4
 8010b44:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8010b48:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8010b4c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	4619      	mov	r1, r3
 8010b54:	eeb0 0a46 	vmov.f32	s0, s12
 8010b58:	eef0 0a66 	vmov.f32	s1, s13
 8010b5c:	eeb0 1a47 	vmov.f32	s2, s14
 8010b60:	eef0 1a67 	vmov.f32	s3, s15
 8010b64:	69f8      	ldr	r0, [r7, #28]
 8010b66:	f7ff fb5d 	bl	8010224 <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 8010b6a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8010b6e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8010b72:	4413      	add	r3, r2
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	8a9b      	ldrh	r3, [r3, #20]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010b80:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8010b84:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8010b88:	4413      	add	r3, r2
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	8adb      	ldrh	r3, [r3, #22]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	8a9b      	ldrh	r3, [r3, #20]
 8010b9a:	863b      	strh	r3, [r7, #48]	; 0x30
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	8adb      	ldrh	r3, [r3, #22]
 8010ba0:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8010ba2:	ed97 7a03 	vldr	s14, [r7, #12]
 8010ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8010baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	8a9b      	ldrh	r3, [r3, #20]
 8010bb2:	ee07 3a90 	vmov	s15, r3
 8010bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8010bba:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8010bbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8010bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8010bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	8adb      	ldrh	r3, [r3, #22]
 8010bce:	ee07 3a90 	vmov	s15, r3
 8010bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8010bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8010bde:	ee07 3a10 	vmov	s14, r3
 8010be2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8010bea:	ee06 3a10 	vmov	s12, r3
 8010bee:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8010bf2:	eef0 1a46 	vmov.f32	s3, s12
 8010bf6:	eeb0 1a47 	vmov.f32	s2, s14
 8010bfa:	eef0 0a67 	vmov.f32	s1, s15
 8010bfe:	eeb0 0a66 	vmov.f32	s0, s13
 8010c02:	f001 fd11 	bl	8012628 <nk_rect>
 8010c06:	eeb0 6a40 	vmov.f32	s12, s0
 8010c0a:	eef0 6a60 	vmov.f32	s13, s1
 8010c0e:	eeb0 7a41 	vmov.f32	s14, s2
 8010c12:	eef0 7a61 	vmov.f32	s15, s3
 8010c16:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8010c1a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8010c1e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8010c22:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8010c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c2a:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8010c2e:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8010c32:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8010c36:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	eeb0 0a46 	vmov.f32	s0, s12
 8010c42:	eef0 0a66 	vmov.f32	s1, s13
 8010c46:	eeb0 1a47 	vmov.f32	s2, s14
 8010c4a:	eef0 1a67 	vmov.f32	s3, s15
 8010c4e:	69f8      	ldr	r0, [r7, #28]
 8010c50:	f7ff fae8 	bl	8010224 <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 8010c54:	bf00      	nop
 8010c56:	37d0      	adds	r7, #208	; 0xd0
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b092      	sub	sp, #72	; 0x48
 8010c60:	af04      	add	r7, sp, #16
 8010c62:	61f8      	str	r0, [r7, #28]
 8010c64:	eeb0 6a40 	vmov.f32	s12, s0
 8010c68:	eef0 6a60 	vmov.f32	s13, s1
 8010c6c:	eeb0 7a41 	vmov.f32	s14, s2
 8010c70:	eef0 7a61 	vmov.f32	s15, s3
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	607a      	str	r2, [r7, #4]
 8010c78:	603b      	str	r3, [r7, #0]
 8010c7a:	ed87 6a03 	vstr	s12, [r7, #12]
 8010c7e:	edc7 6a04 	vstr	s13, [r7, #16]
 8010c82:	ed87 7a05 	vstr	s14, [r7, #20]
 8010c86:	edc7 7a06 	vstr	s15, [r7, #24]
    float text_width = 0;
 8010c8a:	f04f 0300 	mov.w	r3, #0
 8010c8e:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 8010c90:	69fb      	ldr	r3, [r7, #28]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d106      	bne.n	8010ca4 <nk_draw_text+0x48>
 8010c96:	4b93      	ldr	r3, [pc, #588]	; (8010ee4 <nk_draw_text+0x288>)
 8010c98:	4a93      	ldr	r2, [pc, #588]	; (8010ee8 <nk_draw_text+0x28c>)
 8010c9a:	f240 210d 	movw	r1, #525	; 0x20d
 8010c9e:	4893      	ldr	r0, [pc, #588]	; (8010eec <nk_draw_text+0x290>)
 8010ca0:	f00b fddc 	bl	801c85c <__assert_func>
    NK_ASSERT(font);
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <nk_draw_text+0x5c>
 8010caa:	4b91      	ldr	r3, [pc, #580]	; (8010ef0 <nk_draw_text+0x294>)
 8010cac:	4a8e      	ldr	r2, [pc, #568]	; (8010ee8 <nk_draw_text+0x28c>)
 8010cae:	f240 210e 	movw	r1, #526	; 0x20e
 8010cb2:	488e      	ldr	r0, [pc, #568]	; (8010eec <nk_draw_text+0x290>)
 8010cb4:	f00b fdd2 	bl	801c85c <__assert_func>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 8107 	beq.w	8010ece <nk_draw_text+0x272>
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f000 8103 	beq.w	8010ece <nk_draw_text+0x272>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f000 80ff 	beq.w	8010ece <nk_draw_text+0x272>
 8010cd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d104      	bne.n	8010ce2 <nk_draw_text+0x86>
 8010cd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 80f6 	beq.w	8010ece <nk_draw_text+0x272>
    if (b->use_clipping) {
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	695b      	ldr	r3, [r3, #20]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d072      	beq.n	8010dd0 <nk_draw_text+0x174>
        const struct nk_rect *c = &b->clip;
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	3304      	adds	r3, #4
 8010cee:	633b      	str	r3, [r7, #48]	; 0x30
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8010cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8010cf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	f000 80e8 	beq.w	8010ed2 <nk_draw_text+0x276>
 8010d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d04:	edd3 7a03 	vldr	s15, [r3, #12]
 8010d08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d10:	f000 80df 	beq.w	8010ed2 <nk_draw_text+0x276>
 8010d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d16:	ed93 7a00 	vldr	s14, [r3]
 8010d1a:	edd7 6a03 	vldr	s13, [r7, #12]
 8010d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2e:	bf4c      	ite	mi
 8010d30:	2301      	movmi	r3, #1
 8010d32:	2300      	movpl	r3, #0
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	f083 0301 	eor.w	r3, r3, #1
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f040 80c8 	bne.w	8010ed2 <nk_draw_text+0x276>
 8010d42:	ed97 7a03 	vldr	s14, [r7, #12]
 8010d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d48:	edd3 6a00 	vldr	s13, [r3]
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5e:	bf4c      	ite	mi
 8010d60:	2301      	movmi	r3, #1
 8010d62:	2300      	movpl	r3, #0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	f083 0301 	eor.w	r3, r3, #1
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f040 80b0 	bne.w	8010ed2 <nk_draw_text+0x276>
 8010d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d74:	ed93 7a01 	vldr	s14, [r3, #4]
 8010d78:	edd7 6a04 	vldr	s13, [r7, #16]
 8010d7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8c:	bf4c      	ite	mi
 8010d8e:	2301      	movmi	r3, #1
 8010d90:	2300      	movpl	r3, #0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	f083 0301 	eor.w	r3, r3, #1
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f040 8099 	bne.w	8010ed2 <nk_draw_text+0x276>
 8010da0:	ed97 7a04 	vldr	s14, [r7, #16]
 8010da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da6:	edd3 6a01 	vldr	s13, [r3, #4]
 8010daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dac:	edd3 7a03 	vldr	s15, [r3, #12]
 8010db0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dbc:	bf4c      	ite	mi
 8010dbe:	2301      	movmi	r3, #1
 8010dc0:	2300      	movpl	r3, #0
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	f083 0301 	eor.w	r3, r3, #1
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f040 8081 	bne.w	8010ed2 <nk_draw_text+0x276>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	edd2 7a01 	vldr	s15, [r2, #4]
 8010dda:	6838      	ldr	r0, [r7, #0]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	68b9      	ldr	r1, [r7, #8]
 8010de0:	eeb0 0a67 	vmov.f32	s0, s15
 8010de4:	6800      	ldr	r0, [r0, #0]
 8010de6:	4798      	blx	r3
 8010de8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    if (text_width > r.w){
 8010dec:	edd7 7a05 	vldr	s15, [r7, #20]
 8010df0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfc:	dd17      	ble.n	8010e2e <nk_draw_text+0x1d2>
        int glyphs = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	62bb      	str	r3, [r7, #40]	; 0x28
        float txt_width = (float)text_width;
 8010e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e04:	627b      	str	r3, [r7, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 8010e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8010e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e0e:	2300      	movs	r3, #0
 8010e10:	9302      	str	r3, [sp, #8]
 8010e12:	2300      	movs	r3, #0
 8010e14:	9301      	str	r3, [sp, #4]
 8010e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	68b9      	ldr	r1, [r7, #8]
 8010e26:	6838      	ldr	r0, [r7, #0]
 8010e28:	f00a f9d4 	bl	801b1d4 <nk_text_clamp>
 8010e2c:	6078      	str	r0, [r7, #4]
    }

    if (!length) return;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d050      	beq.n	8010ed6 <nk_draw_text+0x27a>
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3329      	adds	r3, #41	; 0x29
 8010e38:	461a      	mov	r2, r3
 8010e3a:	2110      	movs	r1, #16
 8010e3c:	69f8      	ldr	r0, [r7, #28]
 8010e3e:	f7fe fcb1 	bl	800f7a4 <nk_command_buffer_push>
 8010e42:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (!cmd) return;
 8010e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d047      	beq.n	8010eda <nk_draw_text+0x27e>
    cmd->x = (short)r.x;
 8010e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8010e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e52:	ee17 3a90 	vmov	r3, s15
 8010e56:	b21a      	sxth	r2, r3
 8010e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5a:	829a      	strh	r2, [r3, #20]
    cmd->y = (short)r.y;
 8010e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e64:	ee17 3a90 	vmov	r3, s15
 8010e68:	b21a      	sxth	r2, r3
 8010e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6c:	82da      	strh	r2, [r3, #22]
    cmd->w = (unsigned short)r.w;
 8010e6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e76:	ee17 3a90 	vmov	r3, s15
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7e:	831a      	strh	r2, [r3, #24]
    cmd->h = (unsigned short)r.h;
 8010e80:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e88:	ee17 3a90 	vmov	r3, s15
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e90:	835a      	strh	r2, [r3, #26]
    cmd->background = bg;
 8010e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010e96:	60da      	str	r2, [r3, #12]
    cmd->foreground = fg;
 8010e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e9c:	611a      	str	r2, [r3, #16]
    cmd->font = font;
 8010e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea0:	683a      	ldr	r2, [r7, #0]
 8010ea2:	609a      	str	r2, [r3, #8]
    cmd->length = length;
 8010ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	621a      	str	r2, [r3, #32]
    cmd->height = font->height;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	685a      	ldr	r2, [r3, #4]
 8010eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb0:	61da      	str	r2, [r3, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 8010eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb4:	3324      	adds	r3, #36	; 0x24
 8010eb6:	687a      	ldr	r2, [r7, #4]
 8010eb8:	68b9      	ldr	r1, [r7, #8]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f009 fece 	bl	801ac5c <nk_memcopy>
    cmd->string[length] = '\0';
 8010ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	3324      	adds	r3, #36	; 0x24
 8010ec8:	2200      	movs	r2, #0
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	e006      	b.n	8010edc <nk_draw_text+0x280>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8010ece:	bf00      	nop
 8010ed0:	e004      	b.n	8010edc <nk_draw_text+0x280>
            return;
 8010ed2:	bf00      	nop
 8010ed4:	e002      	b.n	8010edc <nk_draw_text+0x280>
    if (!length) return;
 8010ed6:	bf00      	nop
 8010ed8:	e000      	b.n	8010edc <nk_draw_text+0x280>
    if (!cmd) return;
 8010eda:	bf00      	nop
}
 8010edc:	3738      	adds	r7, #56	; 0x38
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	08020238 	.word	0x08020238
 8010ee8:	08021580 	.word	0x08021580
 8010eec:	0802021c 	.word	0x0802021c
 8010ef0:	08020244 	.word	0x08020244

08010ef4 <nk_handle_ptr>:
 *                          IMAGE
 *
 * ===============================================================*/
NK_API nk_handle
nk_handle_ptr(void *ptr)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
    nk_handle handle = {0};
 8010efc:	2300      	movs	r3, #0
 8010efe:	60fb      	str	r3, [r7, #12]
    handle.ptr = ptr;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	60fb      	str	r3, [r7, #12]
    return handle;
 8010f04:	68fb      	ldr	r3, [r7, #12]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3714      	adds	r7, #20
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr
	...

08010f14 <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 8010f14:	b590      	push	{r4, r7, lr}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d105      	bne.n	8010f2e <nk_input_begin+0x1a>
 8010f22:	4b2c      	ldr	r3, [pc, #176]	; (8010fd4 <nk_input_begin+0xc0>)
 8010f24:	4a2c      	ldr	r2, [pc, #176]	; (8010fd8 <nk_input_begin+0xc4>)
 8010f26:	210e      	movs	r1, #14
 8010f28:	482c      	ldr	r0, [pc, #176]	; (8010fdc <nk_input_begin+0xc8>)
 8010f2a:	f00b fc97 	bl	801c85c <__assert_func>
    if (!ctx) return;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d04b      	beq.n	8010fcc <nk_input_begin+0xb8>
    in = &ctx->input;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]
 8010f3c:	e00a      	b.n	8010f54 <nk_input_begin+0x40>
        in->mouse.buttons[i].clicked = 0;
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	3310      	adds	r3, #16
 8010f44:	011b      	lsls	r3, r3, #4
 8010f46:	4413      	add	r3, r2
 8010f48:	3308      	adds	r3, #8
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	3301      	adds	r3, #1
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2b03      	cmp	r3, #3
 8010f58:	ddf1      	ble.n	8010f3e <nk_input_begin+0x2a>

    in->keyboard.text_len = 0;
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 8010f62:	68bc      	ldr	r4, [r7, #8]
 8010f64:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8010fe0 <nk_input_begin+0xcc>
 8010f68:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8010fe0 <nk_input_begin+0xcc>
 8010f6c:	f001 fc0e 	bl	801278c <nk_vec2>
 8010f70:	eeb0 7a40 	vmov.f32	s14, s0
 8010f74:	eef0 7a60 	vmov.f32	s15, s1
 8010f78:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
 8010f7c:	edc4 7a58 	vstr	s15, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    in->mouse.delta.x = 0;
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	f04f 0200 	mov.w	r2, #0
 8010f9e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    in->mouse.delta.y = 0;
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	f04f 0200 	mov.w	r2, #0
 8010fa8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 8010fac:	2300      	movs	r3, #0
 8010fae:	60fb      	str	r3, [r7, #12]
 8010fb0:	e008      	b.n	8010fc4 <nk_input_begin+0xb0>
        in->keyboard.keys[i].clicked = 0;
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	4413      	add	r3, r2
 8010fba:	2200      	movs	r2, #0
 8010fbc:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	60fb      	str	r3, [r7, #12]
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2b1d      	cmp	r3, #29
 8010fc8:	ddf3      	ble.n	8010fb2 <nk_input_begin+0x9e>
 8010fca:	e000      	b.n	8010fce <nk_input_begin+0xba>
    if (!ctx) return;
 8010fcc:	bf00      	nop
}
 8010fce:	3714      	adds	r7, #20
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd90      	pop	{r4, r7, pc}
 8010fd4:	0802024c 	.word	0x0802024c
 8010fd8:	08021590 	.word	0x08021590
 8010fdc:	08020250 	.word	0x08020250
 8010fe0:	00000000 	.word	0x00000000

08010fe4 <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d105      	bne.n	8010ffe <nk_input_end+0x1a>
 8010ff2:	4b15      	ldr	r3, [pc, #84]	; (8011048 <nk_input_end+0x64>)
 8010ff4:	4a15      	ldr	r2, [pc, #84]	; (801104c <nk_input_end+0x68>)
 8010ff6:	2121      	movs	r1, #33	; 0x21
 8010ff8:	4815      	ldr	r0, [pc, #84]	; (8011050 <nk_input_end+0x6c>)
 8010ffa:	f00b fc2f 	bl	801c85c <__assert_func>
    if (!ctx) return;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d01c      	beq.n	801103e <nk_input_end+0x5a>
    in = &ctx->input;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	60fb      	str	r3, [r7, #12]
    if (in->mouse.grab)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 801100e:	2b00      	cmp	r3, #0
 8011010:	d003      	beq.n	801101a <nk_input_end+0x36>
        in->mouse.grab = 0;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2200      	movs	r2, #0
 8011016:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    if (in->mouse.ungrab) {
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00d      	beq.n	8011040 <nk_input_end+0x5c>
        in->mouse.grabbed = 0;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2200      	movs	r2, #0
 8011028:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2200      	movs	r2, #0
 8011030:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2200      	movs	r2, #0
 8011038:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 801103c:	e000      	b.n	8011040 <nk_input_end+0x5c>
    if (!ctx) return;
 801103e:	bf00      	nop
    }
}
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	0802024c 	.word	0x0802024c
 801104c:	080215a0 	.word	0x080215a0
 8011050:	08020250 	.word	0x08020250

08011054 <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d105      	bne.n	8011072 <nk_input_motion+0x1e>
 8011066:	4b1b      	ldr	r3, [pc, #108]	; (80110d4 <nk_input_motion+0x80>)
 8011068:	4a1b      	ldr	r2, [pc, #108]	; (80110d8 <nk_input_motion+0x84>)
 801106a:	2130      	movs	r1, #48	; 0x30
 801106c:	481b      	ldr	r0, [pc, #108]	; (80110dc <nk_input_motion+0x88>)
 801106e:	f00b fbf5 	bl	801c85c <__assert_func>
    if (!ctx) return;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d028      	beq.n	80110ca <nk_input_motion+0x76>
    in = &ctx->input;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	617b      	str	r3, [r7, #20]
    in->mouse.pos.x = (float)x;
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	ee07 3a90 	vmov	s15, r3
 8011082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	ee07 3a90 	vmov	s15, r3
 8011092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80110a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80110be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
 80110c8:	e000      	b.n	80110cc <nk_input_motion+0x78>
    if (!ctx) return;
 80110ca:	bf00      	nop
}
 80110cc:	3718      	adds	r7, #24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	0802024c 	.word	0x0802024c
 80110d8:	080215b0 	.word	0x080215b0
 80110dc:	08020250 	.word	0x08020250

080110e0 <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	460b      	mov	r3, r1
 80110ee:	72fb      	strb	r3, [r7, #11]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d105      	bne.n	8011102 <nk_input_button+0x22>
 80110f6:	4b1d      	ldr	r3, [pc, #116]	; (801116c <nk_input_button+0x8c>)
 80110f8:	4a1d      	ldr	r2, [pc, #116]	; (8011170 <nk_input_button+0x90>)
 80110fa:	214c      	movs	r1, #76	; 0x4c
 80110fc:	481d      	ldr	r0, [pc, #116]	; (8011174 <nk_input_button+0x94>)
 80110fe:	f00b fbad 	bl	801c85c <__assert_func>
    if (!ctx) return;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d02b      	beq.n	8011160 <nk_input_button+0x80>
    in = &ctx->input;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	617b      	str	r3, [r7, #20]
    if (in->mouse.buttons[id].down == down) return;
 801110c:	7afb      	ldrb	r3, [r7, #11]
 801110e:	697a      	ldr	r2, [r7, #20]
 8011110:	3310      	adds	r3, #16
 8011112:	011b      	lsls	r3, r3, #4
 8011114:	4413      	add	r3, r2
 8011116:	3304      	adds	r3, #4
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6a3a      	ldr	r2, [r7, #32]
 801111c:	429a      	cmp	r2, r3
 801111e:	d021      	beq.n	8011164 <nk_input_button+0x84>

    btn = &in->mouse.buttons[id];
 8011120:	7afb      	ldrb	r3, [r7, #11]
 8011122:	3310      	adds	r3, #16
 8011124:	011b      	lsls	r3, r3, #4
 8011126:	697a      	ldr	r2, [r7, #20]
 8011128:	4413      	add	r3, r2
 801112a:	3304      	adds	r3, #4
 801112c:	613b      	str	r3, [r7, #16]
    btn->clicked_pos.x = (float)x;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	ee07 3a90 	vmov	s15, r3
 8011134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	edc3 7a02 	vstr	s15, [r3, #8]
    btn->clicked_pos.y = (float)y;
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	ee07 3a90 	vmov	s15, r3
 8011144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	edc3 7a03 	vstr	s15, [r3, #12]
    btn->down = down;
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	6a3a      	ldr	r2, [r7, #32]
 8011152:	601a      	str	r2, [r3, #0]
    btn->clicked++;
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	685b      	ldr	r3, [r3, #4]
 8011158:	1c5a      	adds	r2, r3, #1
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	605a      	str	r2, [r3, #4]
 801115e:	e002      	b.n	8011166 <nk_input_button+0x86>
    if (!ctx) return;
 8011160:	bf00      	nop
 8011162:	e000      	b.n	8011166 <nk_input_button+0x86>
    if (in->mouse.buttons[id].down == down) return;
 8011164:	bf00      	nop
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 8011166:	3718      	adds	r7, #24
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	0802024c 	.word	0x0802024c
 8011170:	080215c0 	.word	0x080215c0
 8011174:	08020250 	.word	0x08020250

08011178 <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8011178:	b480      	push	{r7}
 801117a:	b089      	sub	sp, #36	; 0x24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6178      	str	r0, [r7, #20]
 8011180:	460b      	mov	r3, r1
 8011182:	eeb0 6a40 	vmov.f32	s12, s0
 8011186:	eef0 6a60 	vmov.f32	s13, s1
 801118a:	eeb0 7a41 	vmov.f32	s14, s2
 801118e:	eef0 7a61 	vmov.f32	s15, s3
 8011192:	74fb      	strb	r3, [r7, #19]
 8011194:	ed87 6a00 	vstr	s12, [r7]
 8011198:	edc7 6a01 	vstr	s13, [r7, #4]
 801119c:	ed87 7a02 	vstr	s14, [r7, #8]
 80111a0:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d101      	bne.n	80111ae <nk_input_has_mouse_click_in_rect+0x36>
 80111aa:	2300      	movs	r3, #0
 80111ac:	e059      	b.n	8011262 <nk_input_has_mouse_click_in_rect+0xea>
    btn = &i->mouse.buttons[id];
 80111ae:	7cfb      	ldrb	r3, [r7, #19]
 80111b0:	3310      	adds	r3, #16
 80111b2:	011b      	lsls	r3, r3, #4
 80111b4:	697a      	ldr	r2, [r7, #20]
 80111b6:	4413      	add	r3, r2
 80111b8:	3304      	adds	r3, #4
 80111ba:	61fb      	str	r3, [r7, #28]
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 80111bc:	ed97 7a00 	vldr	s14, [r7]
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80111c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	bf94      	ite	ls
 80111d0:	2301      	movls	r3, #1
 80111d2:	2300      	movhi	r3, #0
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	f083 0301 	eor.w	r3, r3, #1
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d13d      	bne.n	801125c <nk_input_has_mouse_click_in_rect+0xe4>
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80111e6:	edd7 6a00 	vldr	s13, [r7]
 80111ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80111ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fa:	bf4c      	ite	mi
 80111fc:	2301      	movmi	r3, #1
 80111fe:	2300      	movpl	r3, #0
 8011200:	b2db      	uxtb	r3, r3
 8011202:	f083 0301 	eor.w	r3, r3, #1
 8011206:	b2db      	uxtb	r3, r3
 8011208:	2b00      	cmp	r3, #0
 801120a:	d127      	bne.n	801125c <nk_input_has_mouse_click_in_rect+0xe4>
 801120c:	ed97 7a01 	vldr	s14, [r7, #4]
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	edd3 7a03 	vldr	s15, [r3, #12]
 8011216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121e:	bf94      	ite	ls
 8011220:	2301      	movls	r3, #1
 8011222:	2300      	movhi	r3, #0
 8011224:	b2db      	uxtb	r3, r3
 8011226:	f083 0301 	eor.w	r3, r3, #1
 801122a:	b2db      	uxtb	r3, r3
 801122c:	2b00      	cmp	r3, #0
 801122e:	d115      	bne.n	801125c <nk_input_has_mouse_click_in_rect+0xe4>
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	ed93 7a03 	vldr	s14, [r3, #12]
 8011236:	edd7 6a01 	vldr	s13, [r7, #4]
 801123a:	edd7 7a03 	vldr	s15, [r7, #12]
 801123e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124a:	bf4c      	ite	mi
 801124c:	2301      	movmi	r3, #1
 801124e:	2300      	movpl	r3, #0
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f083 0301 	eor.w	r3, r3, #1
 8011256:	b2db      	uxtb	r3, r3
 8011258:	2b00      	cmp	r3, #0
 801125a:	d001      	beq.n	8011260 <nk_input_has_mouse_click_in_rect+0xe8>
        return nk_false;
 801125c:	2300      	movs	r3, #0
 801125e:	e000      	b.n	8011262 <nk_input_has_mouse_click_in_rect+0xea>
    return nk_true;
 8011260:	2301      	movs	r3, #1
}
 8011262:	4618      	mov	r0, r3
 8011264:	3724      	adds	r7, #36	; 0x24
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr

0801126e <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 801126e:	b480      	push	{r7}
 8011270:	b089      	sub	sp, #36	; 0x24
 8011272:	af00      	add	r7, sp, #0
 8011274:	6178      	str	r0, [r7, #20]
 8011276:	460b      	mov	r3, r1
 8011278:	eeb0 6a40 	vmov.f32	s12, s0
 801127c:	eef0 6a60 	vmov.f32	s13, s1
 8011280:	eeb0 7a41 	vmov.f32	s14, s2
 8011284:	eef0 7a61 	vmov.f32	s15, s3
 8011288:	74fb      	strb	r3, [r7, #19]
 801128a:	ed87 6a00 	vstr	s12, [r7]
 801128e:	edc7 6a01 	vstr	s13, [r7, #4]
 8011292:	ed87 7a02 	vstr	s14, [r7, #8]
 8011296:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <nk_input_has_mouse_click_in_button_rect+0x36>
 80112a0:	2300      	movs	r3, #0
 80112a2:	e059      	b.n	8011358 <nk_input_has_mouse_click_in_button_rect+0xea>
    btn = &i->mouse.buttons[id];
 80112a4:	7cfb      	ldrb	r3, [r7, #19]
 80112a6:	3310      	adds	r3, #16
 80112a8:	011b      	lsls	r3, r3, #4
 80112aa:	697a      	ldr	r2, [r7, #20]
 80112ac:	4413      	add	r3, r2
 80112ae:	3304      	adds	r3, #4
 80112b0:	61fb      	str	r3, [r7, #28]
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 80112b2:	ed97 7a00 	vldr	s14, [r7]
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80112bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c4:	bf94      	ite	ls
 80112c6:	2301      	movls	r3, #1
 80112c8:	2300      	movhi	r3, #0
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	f083 0301 	eor.w	r3, r3, #1
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d13d      	bne.n	8011352 <nk_input_has_mouse_click_in_button_rect+0xe4>
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80112dc:	edd7 6a00 	vldr	s13, [r7]
 80112e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80112e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f0:	bf4c      	ite	mi
 80112f2:	2301      	movmi	r3, #1
 80112f4:	2300      	movpl	r3, #0
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	f083 0301 	eor.w	r3, r3, #1
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d127      	bne.n	8011352 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8011302:	ed97 7a01 	vldr	s14, [r7, #4]
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	edd3 7a03 	vldr	s15, [r3, #12]
 801130c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011314:	bf94      	ite	ls
 8011316:	2301      	movls	r3, #1
 8011318:	2300      	movhi	r3, #0
 801131a:	b2db      	uxtb	r3, r3
 801131c:	f083 0301 	eor.w	r3, r3, #1
 8011320:	b2db      	uxtb	r3, r3
 8011322:	2b00      	cmp	r3, #0
 8011324:	d115      	bne.n	8011352 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	ed93 7a03 	vldr	s14, [r3, #12]
 801132c:	edd7 6a01 	vldr	s13, [r7, #4]
 8011330:	edd7 7a03 	vldr	s15, [r7, #12]
 8011334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011340:	bf4c      	ite	mi
 8011342:	2301      	movmi	r3, #1
 8011344:	2300      	movpl	r3, #0
 8011346:	b2db      	uxtb	r3, r3
 8011348:	f083 0301 	eor.w	r3, r3, #1
 801134c:	b2db      	uxtb	r3, r3
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <nk_input_has_mouse_click_in_button_rect+0xe8>
#endif
        return nk_false;
 8011352:	2300      	movs	r3, #0
 8011354:	e000      	b.n	8011358 <nk_input_has_mouse_click_in_button_rect+0xea>
    return nk_true;
 8011356:	2301      	movs	r3, #1
}
 8011358:	4618      	mov	r0, r3
 801135a:	3724      	adds	r7, #36	; 0x24
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr

08011364 <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b08a      	sub	sp, #40	; 0x28
 8011368:	af00      	add	r7, sp, #0
 801136a:	61f8      	str	r0, [r7, #28]
 801136c:	460b      	mov	r3, r1
 801136e:	eeb0 6a40 	vmov.f32	s12, s0
 8011372:	eef0 6a60 	vmov.f32	s13, s1
 8011376:	eeb0 7a41 	vmov.f32	s14, s2
 801137a:	eef0 7a61 	vmov.f32	s15, s3
 801137e:	607a      	str	r2, [r7, #4]
 8011380:	76fb      	strb	r3, [r7, #27]
 8011382:	ed87 6a02 	vstr	s12, [r7, #8]
 8011386:	edc7 6a03 	vstr	s13, [r7, #12]
 801138a:	ed87 7a04 	vstr	s14, [r7, #16]
 801138e:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d101      	bne.n	801139c <nk_input_has_mouse_click_down_in_rect+0x38>
 8011398:	2300      	movs	r3, #0
 801139a:	e026      	b.n	80113ea <nk_input_has_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 801139c:	7efb      	ldrb	r3, [r7, #27]
 801139e:	3310      	adds	r3, #16
 80113a0:	011b      	lsls	r3, r3, #4
 80113a2:	69fa      	ldr	r2, [r7, #28]
 80113a4:	4413      	add	r3, r2
 80113a6:	3304      	adds	r3, #4
 80113a8:	627b      	str	r3, [r7, #36]	; 0x24
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 80113aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80113ae:	edd7 6a03 	vldr	s13, [r7, #12]
 80113b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80113b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80113ba:	7efb      	ldrb	r3, [r7, #27]
 80113bc:	eeb0 0a46 	vmov.f32	s0, s12
 80113c0:	eef0 0a66 	vmov.f32	s1, s13
 80113c4:	eeb0 1a47 	vmov.f32	s2, s14
 80113c8:	eef0 1a67 	vmov.f32	s3, s15
 80113cc:	4619      	mov	r1, r3
 80113ce:	69f8      	ldr	r0, [r7, #28]
 80113d0:	f7ff fed2 	bl	8011178 <nk_input_has_mouse_click_in_rect>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d006      	beq.n	80113e8 <nk_input_has_mouse_click_down_in_rect+0x84>
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d101      	bne.n	80113e8 <nk_input_has_mouse_click_down_in_rect+0x84>
 80113e4:	2301      	movs	r3, #1
 80113e6:	e000      	b.n	80113ea <nk_input_has_mouse_click_down_in_rect+0x86>
 80113e8:	2300      	movs	r3, #0
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3728      	adds	r7, #40	; 0x28
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}

080113f2 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 80113f2:	b480      	push	{r7}
 80113f4:	b087      	sub	sp, #28
 80113f6:	af00      	add	r7, sp, #0
 80113f8:	6178      	str	r0, [r7, #20]
 80113fa:	eeb0 6a40 	vmov.f32	s12, s0
 80113fe:	eef0 6a60 	vmov.f32	s13, s1
 8011402:	eeb0 7a41 	vmov.f32	s14, s2
 8011406:	eef0 7a61 	vmov.f32	s15, s3
 801140a:	ed87 6a01 	vstr	s12, [r7, #4]
 801140e:	edc7 6a02 	vstr	s13, [r7, #8]
 8011412:	ed87 7a03 	vstr	s14, [r7, #12]
 8011416:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d101      	bne.n	8011424 <nk_input_is_mouse_hovering_rect+0x32>
 8011420:	2300      	movs	r3, #0
 8011422:	e032      	b.n	801148a <nk_input_is_mouse_hovering_rect+0x98>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 8011424:	ed97 7a01 	vldr	s14, [r7, #4]
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801142e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011436:	d827      	bhi.n	8011488 <nk_input_is_mouse_hovering_rect+0x96>
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801143e:	edd7 6a01 	vldr	s13, [r7, #4]
 8011442:	edd7 7a03 	vldr	s15, [r7, #12]
 8011446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011452:	d519      	bpl.n	8011488 <nk_input_is_mouse_hovering_rect+0x96>
 8011454:	ed97 7a02 	vldr	s14, [r7, #8]
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801145e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011466:	d80f      	bhi.n	8011488 <nk_input_is_mouse_hovering_rect+0x96>
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801146e:	edd7 6a02 	vldr	s13, [r7, #8]
 8011472:	edd7 7a04 	vldr	s15, [r7, #16]
 8011476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801147a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011482:	d501      	bpl.n	8011488 <nk_input_is_mouse_hovering_rect+0x96>
 8011484:	2301      	movs	r3, #1
 8011486:	e000      	b.n	801148a <nk_input_is_mouse_hovering_rect+0x98>
 8011488:	2300      	movs	r3, #0
}
 801148a:	4618      	mov	r0, r3
 801148c:	371c      	adds	r7, #28
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8011496:	b480      	push	{r7}
 8011498:	b087      	sub	sp, #28
 801149a:	af00      	add	r7, sp, #0
 801149c:	6178      	str	r0, [r7, #20]
 801149e:	eeb0 6a40 	vmov.f32	s12, s0
 80114a2:	eef0 6a60 	vmov.f32	s13, s1
 80114a6:	eeb0 7a41 	vmov.f32	s14, s2
 80114aa:	eef0 7a61 	vmov.f32	s15, s3
 80114ae:	ed87 6a01 	vstr	s12, [r7, #4]
 80114b2:	edc7 6a02 	vstr	s13, [r7, #8]
 80114b6:	ed87 7a03 	vstr	s14, [r7, #12]
 80114ba:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d101      	bne.n	80114c8 <nk_input_is_mouse_prev_hovering_rect+0x32>
 80114c4:	2300      	movs	r3, #0
 80114c6:	e032      	b.n	801152e <nk_input_is_mouse_prev_hovering_rect+0x98>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 80114c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80114d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114da:	d827      	bhi.n	801152c <nk_input_is_mouse_prev_hovering_rect+0x96>
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 80114e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80114e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80114ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f6:	d519      	bpl.n	801152c <nk_input_is_mouse_prev_hovering_rect+0x96>
 80114f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8011502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150a:	d80f      	bhi.n	801152c <nk_input_is_mouse_prev_hovering_rect+0x96>
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8011512:	edd7 6a02 	vldr	s13, [r7, #8]
 8011516:	edd7 7a04 	vldr	s15, [r7, #16]
 801151a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801151e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	d501      	bpl.n	801152c <nk_input_is_mouse_prev_hovering_rect+0x96>
 8011528:	2301      	movs	r3, #1
 801152a:	e000      	b.n	801152e <nk_input_is_mouse_prev_hovering_rect+0x98>
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	371c      	adds	r7, #28
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr

0801153a <nk_input_is_mouse_down>:
    if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
 801153a:	b480      	push	{r7}
 801153c:	b083      	sub	sp, #12
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
 8011542:	460b      	mov	r3, r1
 8011544:	70fb      	strb	r3, [r7, #3]
    if (!i) return nk_false;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d101      	bne.n	8011550 <nk_input_is_mouse_down+0x16>
 801154c:	2300      	movs	r3, #0
 801154e:	e006      	b.n	801155e <nk_input_is_mouse_down+0x24>
    return i->mouse.buttons[id].down;
 8011550:	78fb      	ldrb	r3, [r7, #3]
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	3310      	adds	r3, #16
 8011556:	011b      	lsls	r3, r3, #4
 8011558:	4413      	add	r3, r2
 801155a:	3304      	adds	r3, #4
 801155c:	681b      	ldr	r3, [r3, #0]
}
 801155e:	4618      	mov	r0, r3
 8011560:	370c      	adds	r7, #12
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
 801156a:	b480      	push	{r7}
 801156c:	b085      	sub	sp, #20
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	460b      	mov	r3, r1
 8011574:	70fb      	strb	r3, [r7, #3]
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <nk_input_is_mouse_pressed+0x16>
 801157c:	2300      	movs	r3, #0
 801157e:	e011      	b.n	80115a4 <nk_input_is_mouse_pressed+0x3a>
    b = &i->mouse.buttons[id];
 8011580:	78fb      	ldrb	r3, [r7, #3]
 8011582:	3310      	adds	r3, #16
 8011584:	011b      	lsls	r3, r3, #4
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	4413      	add	r3, r2
 801158a:	3304      	adds	r3, #4
 801158c:	60fb      	str	r3, [r7, #12]
    if (b->down && b->clicked)
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d005      	beq.n	80115a2 <nk_input_is_mouse_pressed+0x38>
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d001      	beq.n	80115a2 <nk_input_is_mouse_pressed+0x38>
        return nk_true;
 801159e:	2301      	movs	r3, #1
 80115a0:	e000      	b.n	80115a4 <nk_input_is_mouse_pressed+0x3a>
    return nk_false;
 80115a2:	2300      	movs	r3, #0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3714      	adds	r7, #20
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr

080115b0 <nk_input_is_key_pressed>:
    if (!i) return nk_false;
    return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b085      	sub	sp, #20
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
    const struct nk_key *k;
    if (!i) return nk_false;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d101      	bne.n	80115c6 <nk_input_is_key_pressed+0x16>
 80115c2:	2300      	movs	r3, #0
 80115c4:	e017      	b.n	80115f6 <nk_input_is_key_pressed+0x46>
    k = &i->keyboard.keys[key];
 80115c6:	78fb      	ldrb	r3, [r7, #3]
 80115c8:	00db      	lsls	r3, r3, #3
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	4413      	add	r3, r2
 80115ce:	60fb      	str	r3, [r7, #12]
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <nk_input_is_key_pressed+0x30>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d107      	bne.n	80115f0 <nk_input_is_key_pressed+0x40>
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d105      	bne.n	80115f4 <nk_input_is_key_pressed+0x44>
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d901      	bls.n	80115f4 <nk_input_is_key_pressed+0x44>
        return nk_true;
 80115f0:	2301      	movs	r3, #1
 80115f2:	e000      	b.n	80115f6 <nk_input_is_key_pressed+0x46>
    return nk_false;
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
	...

08011604 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	ed87 0a00 	vstr	s0, [r7]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d105      	bne.n	8011622 <nk_layout_set_min_row_height+0x1e>
 8011616:	4b23      	ldr	r3, [pc, #140]	; (80116a4 <nk_layout_set_min_row_height+0xa0>)
 8011618:	4a23      	ldr	r2, [pc, #140]	; (80116a8 <nk_layout_set_min_row_height+0xa4>)
 801161a:	210f      	movs	r1, #15
 801161c:	4823      	ldr	r0, [pc, #140]	; (80116ac <nk_layout_set_min_row_height+0xa8>)
 801161e:	f00b f91d 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011628:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801162c:	2b00      	cmp	r3, #0
 801162e:	d105      	bne.n	801163c <nk_layout_set_min_row_height+0x38>
 8011630:	4b1f      	ldr	r3, [pc, #124]	; (80116b0 <nk_layout_set_min_row_height+0xac>)
 8011632:	4a1d      	ldr	r2, [pc, #116]	; (80116a8 <nk_layout_set_min_row_height+0xa4>)
 8011634:	2110      	movs	r1, #16
 8011636:	481d      	ldr	r0, [pc, #116]	; (80116ac <nk_layout_set_min_row_height+0xa8>)
 8011638:	f00b f910 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011642:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801164a:	2b00      	cmp	r3, #0
 801164c:	d105      	bne.n	801165a <nk_layout_set_min_row_height+0x56>
 801164e:	4b19      	ldr	r3, [pc, #100]	; (80116b4 <nk_layout_set_min_row_height+0xb0>)
 8011650:	4a15      	ldr	r2, [pc, #84]	; (80116a8 <nk_layout_set_min_row_height+0xa4>)
 8011652:	2111      	movs	r1, #17
 8011654:	4815      	ldr	r0, [pc, #84]	; (80116ac <nk_layout_set_min_row_height+0xa8>)
 8011656:	f00b f901 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d01d      	beq.n	801169c <nk_layout_set_min_row_height+0x98>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011666:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801166a:	2b00      	cmp	r3, #0
 801166c:	d016      	beq.n	801169c <nk_layout_set_min_row_height+0x98>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011674:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00d      	beq.n	801169c <nk_layout_set_min_row_height+0x98>
        return;

    win = ctx->current;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011686:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801168a:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011692:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = height;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	671a      	str	r2, [r3, #112]	; 0x70
 801169a:	e000      	b.n	801169e <nk_layout_set_min_row_height+0x9a>
        return;
 801169c:	bf00      	nop
}
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	0802026c 	.word	0x0802026c
 80116a8:	080215d0 	.word	0x080215d0
 80116ac:	08020270 	.word	0x08020270
 80116b0:	0802028c 	.word	0x0802028c
 80116b4:	0802029c 	.word	0x0802029c

080116b8 <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d105      	bne.n	80116d2 <nk_layout_reset_min_row_height+0x1a>
 80116c6:	4b34      	ldr	r3, [pc, #208]	; (8011798 <nk_layout_reset_min_row_height+0xe0>)
 80116c8:	4a34      	ldr	r2, [pc, #208]	; (801179c <nk_layout_reset_min_row_height+0xe4>)
 80116ca:	211f      	movs	r1, #31
 80116cc:	4834      	ldr	r0, [pc, #208]	; (80117a0 <nk_layout_reset_min_row_height+0xe8>)
 80116ce:	f00b f8c5 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80116d8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d105      	bne.n	80116ec <nk_layout_reset_min_row_height+0x34>
 80116e0:	4b30      	ldr	r3, [pc, #192]	; (80117a4 <nk_layout_reset_min_row_height+0xec>)
 80116e2:	4a2e      	ldr	r2, [pc, #184]	; (801179c <nk_layout_reset_min_row_height+0xe4>)
 80116e4:	2120      	movs	r1, #32
 80116e6:	482e      	ldr	r0, [pc, #184]	; (80117a0 <nk_layout_reset_min_row_height+0xe8>)
 80116e8:	f00b f8b8 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80116f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80116f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d105      	bne.n	801170a <nk_layout_reset_min_row_height+0x52>
 80116fe:	4b2a      	ldr	r3, [pc, #168]	; (80117a8 <nk_layout_reset_min_row_height+0xf0>)
 8011700:	4a26      	ldr	r2, [pc, #152]	; (801179c <nk_layout_reset_min_row_height+0xe4>)
 8011702:	2121      	movs	r1, #33	; 0x21
 8011704:	4826      	ldr	r0, [pc, #152]	; (80117a0 <nk_layout_reset_min_row_height+0xe8>)
 8011706:	f00b f8a9 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d03e      	beq.n	801178e <nk_layout_reset_min_row_height+0xd6>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011716:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801171a:	2b00      	cmp	r3, #0
 801171c:	d037      	beq.n	801178e <nk_layout_reset_min_row_height+0xd6>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011724:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d02e      	beq.n	801178e <nk_layout_reset_min_row_height+0xd6>
        return;

    win = ctx->current;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011736:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801173a:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011742:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = ctx->style.font->height;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	671a      	str	r2, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 801175c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011776:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 801177a:	edd3 7a00 	vldr	s15, [r3]
 801177e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 801178c:	e000      	b.n	8011790 <nk_layout_reset_min_row_height+0xd8>
        return;
 801178e:	bf00      	nop
}
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	0802026c 	.word	0x0802026c
 801179c:	080215f0 	.word	0x080215f0
 80117a0:	08020270 	.word	0x08020270
 80117a4:	0802028c 	.word	0x0802028c
 80117a8:	0802029c 	.word	0x0802029c

080117ac <nk_layout_row_calculate_usable_space>:
NK_LIB float
nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,
    float total_space, int columns)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b089      	sub	sp, #36	; 0x24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	460b      	mov	r3, r1
 80117b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80117ba:	603a      	str	r2, [r7, #0]
 80117bc:	72fb      	strb	r3, [r7, #11]

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117c4:	461a      	mov	r2, r3
 80117c6:	f107 0310 	add.w	r3, r7, #16
 80117ca:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 80117ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117d2:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	dd06      	ble.n	80117ea <nk_layout_row_calculate_usable_space+0x3e>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	3b01      	subs	r3, #1
 80117e0:	ee07 3a90 	vmov	s15, r3
 80117e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117e8:	e001      	b.n	80117ee <nk_layout_row_calculate_usable_space+0x42>
 80117ea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011820 <nk_layout_row_calculate_usable_space+0x74>
 80117ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80117f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117f6:	edc7 7a07 	vstr	s15, [r7, #28]
    panel_space  = total_space - panel_spacing;
 80117fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80117fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8011802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011806:	edc7 7a06 	vstr	s15, [r7, #24]
    return panel_space;
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	ee07 3a90 	vmov	s15, r3
}
 8011810:	eeb0 0a67 	vmov.f32	s0, s15
 8011814:	3724      	adds	r7, #36	; 0x24
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	00000000 	.word	0x00000000

08011824 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b08e      	sub	sp, #56	; 0x38
 8011828:	af00      	add	r7, sp, #0
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	ed87 0a01 	vstr	s0, [r7, #4]
 8011832:	603a      	str	r2, [r7, #0]
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d105      	bne.n	8011846 <nk_panel_layout+0x22>
 801183a:	4b78      	ldr	r3, [pc, #480]	; (8011a1c <nk_panel_layout+0x1f8>)
 801183c:	4a78      	ldr	r2, [pc, #480]	; (8011a20 <nk_panel_layout+0x1fc>)
 801183e:	2148      	movs	r1, #72	; 0x48
 8011840:	4878      	ldr	r0, [pc, #480]	; (8011a24 <nk_panel_layout+0x200>)
 8011842:	f00b f80b 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801184c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011850:	2b00      	cmp	r3, #0
 8011852:	d105      	bne.n	8011860 <nk_panel_layout+0x3c>
 8011854:	4b74      	ldr	r3, [pc, #464]	; (8011a28 <nk_panel_layout+0x204>)
 8011856:	4a72      	ldr	r2, [pc, #456]	; (8011a20 <nk_panel_layout+0x1fc>)
 8011858:	2149      	movs	r1, #73	; 0x49
 801185a:	4872      	ldr	r0, [pc, #456]	; (8011a24 <nk_panel_layout+0x200>)
 801185c:	f00a fffe 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011866:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801186a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801186e:	2b00      	cmp	r3, #0
 8011870:	d105      	bne.n	801187e <nk_panel_layout+0x5a>
 8011872:	4b6e      	ldr	r3, [pc, #440]	; (8011a2c <nk_panel_layout+0x208>)
 8011874:	4a6a      	ldr	r2, [pc, #424]	; (8011a20 <nk_panel_layout+0x1fc>)
 8011876:	214a      	movs	r1, #74	; 0x4a
 8011878:	486a      	ldr	r0, [pc, #424]	; (8011a24 <nk_panel_layout+0x200>)
 801187a:	f00a ffef 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2b00      	cmp	r3, #0
 8011882:	f000 80c6 	beq.w	8011a12 <nk_panel_layout+0x1ee>
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801188c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011890:	2b00      	cmp	r3, #0
 8011892:	f000 80be 	beq.w	8011a12 <nk_panel_layout+0x1ee>
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801189c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80118a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f000 80b4 	beq.w	8011a12 <nk_panel_layout+0x1ee>
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118b0:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80118b8:	633b      	str	r3, [r7, #48]	; 0x30
    out = &win->buffer;
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	3364      	adds	r3, #100	; 0x64
 80118be:	62fb      	str	r3, [r7, #44]	; 0x2c
    color = style->window.background;
 80118c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118c6:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 80118ca:	623b      	str	r3, [r7, #32]
    item_spacing = style->window.spacing;
 80118cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80118d2:	461a      	mov	r2, r3
 80118d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118d8:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 80118dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118e0:	e883 0003 	stmia.w	r3, {r0, r1}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 80118e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d005      	beq.n	80118fc <nk_panel_layout+0xd8>
 80118f0:	4b4f      	ldr	r3, [pc, #316]	; (8011a30 <nk_panel_layout+0x20c>)
 80118f2:	4a4b      	ldr	r2, [pc, #300]	; (8011a20 <nk_panel_layout+0x1fc>)
 80118f4:	215a      	movs	r1, #90	; 0x5a
 80118f6:	484b      	ldr	r0, [pc, #300]	; (8011a24 <nk_panel_layout+0x200>)
 80118f8:	f00a ffb0 	bl	801c85c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 80118fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011904:	2b00      	cmp	r3, #0
 8011906:	d005      	beq.n	8011914 <nk_panel_layout+0xf0>
 8011908:	4b4a      	ldr	r3, [pc, #296]	; (8011a34 <nk_panel_layout+0x210>)
 801190a:	4a45      	ldr	r2, [pc, #276]	; (8011a20 <nk_panel_layout+0x1fc>)
 801190c:	215b      	movs	r1, #91	; 0x5b
 801190e:	4845      	ldr	r0, [pc, #276]	; (8011a24 <nk_panel_layout+0x200>)
 8011910:	f00a ffa4 	bl	801c85c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 8011914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801191c:	2b00      	cmp	r3, #0
 801191e:	d005      	beq.n	801192c <nk_panel_layout+0x108>
 8011920:	4b45      	ldr	r3, [pc, #276]	; (8011a38 <nk_panel_layout+0x214>)
 8011922:	4a3f      	ldr	r2, [pc, #252]	; (8011a20 <nk_panel_layout+0x1fc>)
 8011924:	215c      	movs	r1, #92	; 0x5c
 8011926:	483f      	ldr	r0, [pc, #252]	; (8011a24 <nk_panel_layout+0x200>)
 8011928:	f00a ff98 	bl	801c85c <__assert_func>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 801192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192e:	2200      	movs	r2, #0
 8011930:	669a      	str	r2, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 8011932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011934:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8011938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801193a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 801193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011944:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    layout->row.columns = cols;
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 801194e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011952:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195a:	d117      	bne.n	801198c <nk_panel_layout+0x168>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8011962:	ed97 7a01 	vldr	s14, [r7, #4]
 8011966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	d503      	bpl.n	8011978 <nk_panel_layout+0x154>
 8011970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011972:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8011976:	e001      	b.n	801197c <nk_panel_layout+0x158>
 8011978:	edd7 7a01 	vldr	s15, [r7, #4]
 801197c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011986:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801198a:	e008      	b.n	801199e <nk_panel_layout+0x17a>
    else layout->row.height = height + item_spacing.y;
 801198c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011990:	edd7 7a01 	vldr	s15, [r7, #4]
 8011994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801199a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    layout->row.item_offset = 0;
 801199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a0:	f04f 0200 	mov.w	r2, #0
 80119a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 80119a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d02f      	beq.n	8011a14 <nk_panel_layout+0x1f0>
        /* draw background for dynamic panels */
        struct nk_rect background;
        background.x = win->bounds.x;
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119b8:	613b      	str	r3, [r7, #16]
        background.w = win->bounds.w;
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119be:	61bb      	str	r3, [r7, #24]
        background.y = layout->at_y - 1.0f;
 80119c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80119c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80119ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119ce:	edc7 7a05 	vstr	s15, [r7, #20]
        background.h = layout->row.height + 1.0f;
 80119d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80119d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80119dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80119e0:	edc7 7a07 	vstr	s15, [r7, #28]
        nk_fill_rect(out, background, 0, color);
 80119e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80119e8:	edd7 6a05 	vldr	s13, [r7, #20]
 80119ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80119f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80119f4:	6a39      	ldr	r1, [r7, #32]
 80119f6:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8011a3c <nk_panel_layout+0x218>
 80119fa:	eeb0 0a46 	vmov.f32	s0, s12
 80119fe:	eef0 0a66 	vmov.f32	s1, s13
 8011a02:	eeb0 1a47 	vmov.f32	s2, s14
 8011a06:	eef0 1a67 	vmov.f32	s3, s15
 8011a0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a0c:	f7fe f8b0 	bl	800fb70 <nk_fill_rect>
 8011a10:	e000      	b.n	8011a14 <nk_panel_layout+0x1f0>
        return;
 8011a12:	bf00      	nop
    }
}
 8011a14:	3738      	adds	r7, #56	; 0x38
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	0802026c 	.word	0x0802026c
 8011a20:	08021610 	.word	0x08021610
 8011a24:	08020270 	.word	0x08020270
 8011a28:	0802028c 	.word	0x0802028c
 8011a2c:	0802029c 	.word	0x0802029c
 8011a30:	080202b4 	.word	0x080202b4
 8011a34:	080202dc 	.word	0x080202dc
 8011a38:	08020300 	.word	0x08020300
 8011a3c:	00000000 	.word	0x00000000

08011a40 <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b088      	sub	sp, #32
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6178      	str	r0, [r7, #20]
 8011a48:	ed87 0a03 	vstr	s0, [r7, #12]
 8011a4c:	60ba      	str	r2, [r7, #8]
 8011a4e:	607b      	str	r3, [r7, #4]
 8011a50:	460b      	mov	r3, r1
 8011a52:	74fb      	strb	r3, [r7, #19]
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d105      	bne.n	8011a66 <nk_row_layout+0x26>
 8011a5a:	4b3a      	ldr	r3, [pc, #232]	; (8011b44 <nk_row_layout+0x104>)
 8011a5c:	4a3a      	ldr	r2, [pc, #232]	; (8011b48 <nk_row_layout+0x108>)
 8011a5e:	2177      	movs	r1, #119	; 0x77
 8011a60:	483a      	ldr	r0, [pc, #232]	; (8011b4c <nk_row_layout+0x10c>)
 8011a62:	f00a fefb 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011a6c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d105      	bne.n	8011a80 <nk_row_layout+0x40>
 8011a74:	4b36      	ldr	r3, [pc, #216]	; (8011b50 <nk_row_layout+0x110>)
 8011a76:	4a34      	ldr	r2, [pc, #208]	; (8011b48 <nk_row_layout+0x108>)
 8011a78:	2178      	movs	r1, #120	; 0x78
 8011a7a:	4834      	ldr	r0, [pc, #208]	; (8011b4c <nk_row_layout+0x10c>)
 8011a7c:	f00a feee 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011a86:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d105      	bne.n	8011a9e <nk_row_layout+0x5e>
 8011a92:	4b30      	ldr	r3, [pc, #192]	; (8011b54 <nk_row_layout+0x114>)
 8011a94:	4a2c      	ldr	r2, [pc, #176]	; (8011b48 <nk_row_layout+0x108>)
 8011a96:	2179      	movs	r1, #121	; 0x79
 8011a98:	482c      	ldr	r0, [pc, #176]	; (8011b4c <nk_row_layout+0x10c>)
 8011a9a:	f00a fedf 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d04a      	beq.n	8011b3a <nk_row_layout+0xfa>
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011aaa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d043      	beq.n	8011b3a <nk_row_layout+0xfa>
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011ab8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d03a      	beq.n	8011b3a <nk_row_layout+0xfa>
        return;

    win = ctx->current;
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011aca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011ace:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8011ad0:	68ba      	ldr	r2, [r7, #8]
 8011ad2:	ed97 0a03 	vldr	s0, [r7, #12]
 8011ad6:	69f9      	ldr	r1, [r7, #28]
 8011ad8:	6978      	ldr	r0, [r7, #20]
 8011ada:	f7ff fea3 	bl	8011824 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 8011ade:	7cfb      	ldrb	r3, [r7, #19]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d106      	bne.n	8011af2 <nk_row_layout+0xb2>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011aea:	2200      	movs	r2, #0
 8011aec:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011af0:	e005      	b.n	8011afe <nk_row_layout+0xbe>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011af8:	2204      	movs	r2, #4
 8011afa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    win->layout->row.ratio = 0;
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b04:	2200      	movs	r2, #0
 8011b06:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b0e:	f04f 0200 	mov.w	r2, #0
 8011b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    win->layout->row.item_offset = 0;
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b1c:	f04f 0200 	mov.w	r2, #0
 8011b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b2a:	687a      	ldr	r2, [r7, #4]
 8011b2c:	ee07 2a90 	vmov	s15, r2
 8011b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b34:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8011b38:	e000      	b.n	8011b3c <nk_row_layout+0xfc>
        return;
 8011b3a:	bf00      	nop
}
 8011b3c:	3720      	adds	r7, #32
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	0802026c 	.word	0x0802026c
 8011b48:	08021620 	.word	0x08021620
 8011b4c:	08020270 	.word	0x08020270
 8011b50:	0802028c 	.word	0x0802028c
 8011b54:	0802029c 	.word	0x0802029c

08011b58 <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8011b64:	6079      	str	r1, [r7, #4]
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 8011b66:	2300      	movs	r3, #0
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8011b6e:	2100      	movs	r1, #0
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f7ff ff65 	bl	8011a40 <nk_row_layout>
}
 8011b76:	bf00      	nop
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
	...

08011b80 <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b08c      	sub	sp, #48	; 0x30
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6178      	str	r0, [r7, #20]
 8011b88:	ed87 0a03 	vstr	s0, [r7, #12]
 8011b8c:	60ba      	str	r2, [r7, #8]
 8011b8e:	607b      	str	r3, [r7, #4]
 8011b90:	460b      	mov	r3, r1
 8011b92:	74fb      	strb	r3, [r7, #19]
    int i;
    int n_undef = 0;
 8011b94:	2300      	movs	r3, #0
 8011b96:	62bb      	str	r3, [r7, #40]	; 0x28
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d105      	bne.n	8011baa <nk_layout_row+0x2a>
 8011b9e:	4b73      	ldr	r3, [pc, #460]	; (8011d6c <nk_layout_row+0x1ec>)
 8011ba0:	4a73      	ldr	r2, [pc, #460]	; (8011d70 <nk_layout_row+0x1f0>)
 8011ba2:	21ed      	movs	r1, #237	; 0xed
 8011ba4:	4873      	ldr	r0, [pc, #460]	; (8011d74 <nk_layout_row+0x1f4>)
 8011ba6:	f00a fe59 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011bb0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d105      	bne.n	8011bc4 <nk_layout_row+0x44>
 8011bb8:	4b6f      	ldr	r3, [pc, #444]	; (8011d78 <nk_layout_row+0x1f8>)
 8011bba:	4a6d      	ldr	r2, [pc, #436]	; (8011d70 <nk_layout_row+0x1f0>)
 8011bbc:	21ee      	movs	r1, #238	; 0xee
 8011bbe:	486d      	ldr	r0, [pc, #436]	; (8011d74 <nk_layout_row+0x1f4>)
 8011bc0:	f00a fe4c 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011bca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d105      	bne.n	8011be2 <nk_layout_row+0x62>
 8011bd6:	4b69      	ldr	r3, [pc, #420]	; (8011d7c <nk_layout_row+0x1fc>)
 8011bd8:	4a65      	ldr	r2, [pc, #404]	; (8011d70 <nk_layout_row+0x1f0>)
 8011bda:	21ef      	movs	r1, #239	; 0xef
 8011bdc:	4865      	ldr	r0, [pc, #404]	; (8011d74 <nk_layout_row+0x1f4>)
 8011bde:	f00a fe3d 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f000 80bd 	beq.w	8011d64 <nk_layout_row+0x1e4>
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011bf0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f000 80b5 	beq.w	8011d64 <nk_layout_row+0x1e4>
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011c00:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f000 80ab 	beq.w	8011d64 <nk_layout_row+0x1e4>
        return;

    win = ctx->current;
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011c14:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011c18:	623b      	str	r3, [r7, #32]
    layout = win->layout;
 8011c1a:	6a3b      	ldr	r3, [r7, #32]
 8011c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c20:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8011c28:	6a39      	ldr	r1, [r7, #32]
 8011c2a:	6978      	ldr	r0, [r7, #20]
 8011c2c:	f7ff fdfa 	bl	8011824 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 8011c30:	7cfb      	ldrb	r3, [r7, #19]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d17b      	bne.n	8011d2e <nk_layout_row+0x1ae>
        /* calculate width of undefined widget ratios */
        float r = 0;
 8011c36:	f04f 0300 	mov.w	r3, #0
 8011c3a:	627b      	str	r3, [r7, #36]	; 0x24
        layout->row.ratio = ratio;
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	679a      	str	r2, [r3, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 8011c42:	2300      	movs	r3, #0
 8011c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c46:	e01d      	b.n	8011c84 <nk_layout_row+0x104>
            if (ratio[i] < 0.0f)
 8011c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	4413      	add	r3, r2
 8011c50:	edd3 7a00 	vldr	s15, [r3]
 8011c54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5c:	d503      	bpl.n	8011c66 <nk_layout_row+0xe6>
                n_undef++;
 8011c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c60:	3301      	adds	r3, #1
 8011c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c64:	e00b      	b.n	8011c7e <nk_layout_row+0xfe>
            else r += ratio[i];
 8011c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	edd3 7a00 	vldr	s15, [r3]
 8011c72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (i = 0; i < cols; ++i) {
 8011c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c80:	3301      	adds	r3, #1
 8011c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	dbdd      	blt.n	8011c48 <nk_layout_row+0xc8>
        }
        r = NK_SATURATE(1.0f - r);
 8011c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca4:	dc0a      	bgt.n	8011cbc <nk_layout_row+0x13c>
 8011ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011caa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cba:	dd16      	ble.n	8011cea <nk_layout_row+0x16a>
 8011cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011cc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd4:	dd02      	ble.n	8011cdc <nk_layout_row+0x15c>
 8011cd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011cda:	e008      	b.n	8011cee <nk_layout_row+0x16e>
 8011cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011ce0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ce8:	e001      	b.n	8011cee <nk_layout_row+0x16e>
 8011cea:	eddf 7a25 	vldr	s15, [pc, #148]	; 8011d80 <nk_layout_row+0x200>
 8011cee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        layout->row.type = NK_LAYOUT_DYNAMIC;
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	2203      	movs	r2, #3
 8011cf6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 8011cfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d06:	dd0c      	ble.n	8011d22 <nk_layout_row+0x1a2>
 8011d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	dd09      	ble.n	8011d22 <nk_layout_row+0x1a2>
 8011d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d10:	ee07 3a90 	vmov	s15, r3
 8011d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011d18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8011d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d20:	e001      	b.n	8011d26 <nk_layout_row+0x1a6>
 8011d22:	eddf 7a17 	vldr	s15, [pc, #92]	; 8011d80 <nk_layout_row+0x200>
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8011d2c:	e00f      	b.n	8011d4e <nk_layout_row+0x1ce>
    } else {
        layout->row.ratio = ratio;
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	679a      	str	r2, [r3, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	2207      	movs	r2, #7
 8011d38:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = 0;
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	f04f 0200 	mov.w	r2, #0
 8011d42:	67da      	str	r2, [r3, #124]	; 0x7c
        layout->row.item_offset = 0;
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	f04f 0200 	mov.w	r2, #0
 8011d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }
    layout->row.item_offset = 0;
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	f04f 0200 	mov.w	r2, #0
 8011d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    layout->row.filled = 0;
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	f04f 0200 	mov.w	r2, #0
 8011d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8011d62:	e000      	b.n	8011d66 <nk_layout_row+0x1e6>
        return;
 8011d64:	bf00      	nop
}
 8011d66:	3730      	adds	r7, #48	; 0x30
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	0802026c 	.word	0x0802026c
 8011d70:	08021630 	.word	0x08021630
 8011d74:	08020270 	.word	0x08020270
 8011d78:	0802028c 	.word	0x0802028c
 8011d7c:	0802029c 	.word	0x0802029c
 8011d80:	00000000 	.word	0x00000000

08011d84 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
    struct nk_panel *layout = win->layout;
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d94:	617b      	str	r3, [r7, #20]
    struct nk_vec2 spacing = ctx->style.window.spacing;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	f107 0308 	add.w	r3, r7, #8
 8011da2:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 8011da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011daa:	e883 0003 	stmia.w	r3, {r0, r1}
    const float row_height = layout->row.height - spacing.y;
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8011db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8011db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dbc:	edc7 7a04 	vstr	s15, [r7, #16]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	ed97 0a04 	vldr	s0, [r7, #16]
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f7ff fd29 	bl	8011824 <nk_panel_layout>
}
 8011dd2:	bf00      	nop
 8011dd4:	3718      	adds	r7, #24
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
	...

08011ddc <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b092      	sub	sp, #72	; 0x48
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
 8011de8:	603b      	str	r3, [r7, #0]
    struct nk_panel *layout;
    const struct nk_style *style;

    struct nk_vec2 spacing;

    float item_offset = 0;
 8011dea:	f04f 0300 	mov.w	r3, #0
 8011dee:	647b      	str	r3, [r7, #68]	; 0x44
    float item_width = 0;
 8011df0:	f04f 0300 	mov.w	r3, #0
 8011df4:	643b      	str	r3, [r7, #64]	; 0x40
    float item_spacing = 0;
 8011df6:	f04f 0300 	mov.w	r3, #0
 8011dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    float panel_space = 0;
 8011dfc:	f04f 0300 	mov.w	r3, #0
 8011e00:	63bb      	str	r3, [r7, #56]	; 0x38

    NK_ASSERT(ctx);
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d106      	bne.n	8011e16 <nk_layout_widget_space+0x3a>
 8011e08:	4bc4      	ldr	r3, [pc, #784]	; (801211c <nk_layout_widget_space+0x340>)
 8011e0a:	4ac5      	ldr	r2, [pc, #788]	; (8012120 <nk_layout_widget_space+0x344>)
 8011e0c:	f240 214d 	movw	r1, #589	; 0x24d
 8011e10:	48c4      	ldr	r0, [pc, #784]	; (8012124 <nk_layout_widget_space+0x348>)
 8011e12:	f00a fd23 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011e1c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d106      	bne.n	8011e32 <nk_layout_widget_space+0x56>
 8011e24:	4bc0      	ldr	r3, [pc, #768]	; (8012128 <nk_layout_widget_space+0x34c>)
 8011e26:	4abe      	ldr	r2, [pc, #760]	; (8012120 <nk_layout_widget_space+0x344>)
 8011e28:	f240 214e 	movw	r1, #590	; 0x24e
 8011e2c:	48bd      	ldr	r0, [pc, #756]	; (8012124 <nk_layout_widget_space+0x348>)
 8011e2e:	f00a fd15 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011e38:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d106      	bne.n	8011e52 <nk_layout_widget_space+0x76>
 8011e44:	4bb9      	ldr	r3, [pc, #740]	; (801212c <nk_layout_widget_space+0x350>)
 8011e46:	4ab6      	ldr	r2, [pc, #728]	; (8012120 <nk_layout_widget_space+0x344>)
 8011e48:	f240 214f 	movw	r1, #591	; 0x24f
 8011e4c:	48b5      	ldr	r0, [pc, #724]	; (8012124 <nk_layout_widget_space+0x348>)
 8011e4e:	f00a fd05 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	f000 8340 	beq.w	80124da <nk_layout_widget_space+0x6fe>
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011e60:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 8338 	beq.w	80124da <nk_layout_widget_space+0x6fe>
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011e70:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f000 832e 	beq.w	80124da <nk_layout_widget_space+0x6fe>
        return;

    win = ctx->current;
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011e84:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011e88:	607b      	str	r3, [r7, #4]
    layout = win->layout;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e90:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011e98:	633b      	str	r3, [r7, #48]	; 0x30
    NK_ASSERT(bounds);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d106      	bne.n	8011eae <nk_layout_widget_space+0xd2>
 8011ea0:	4ba3      	ldr	r3, [pc, #652]	; (8012130 <nk_layout_widget_space+0x354>)
 8011ea2:	4a9f      	ldr	r2, [pc, #636]	; (8012120 <nk_layout_widget_space+0x344>)
 8011ea4:	f240 2156 	movw	r1, #598	; 0x256
 8011ea8:	489e      	ldr	r0, [pc, #632]	; (8012124 <nk_layout_widget_space+0x348>)
 8011eaa:	f00a fcd7 	bl	801c85c <__assert_func>

    spacing = style->window.spacing;
 8011eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	f107 0314 	add.w	r3, r7, #20
 8011eba:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8011ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ec2:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8011ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ece:	7819      	ldrb	r1, [r3, #0]
 8011ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ed2:	edd3 7a04 	vldr	s15, [r3, #16]
 8011ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eda:	461a      	mov	r2, r3
 8011edc:	eeb0 0a67 	vmov.f32	s0, s15
 8011ee0:	f7ff fc64 	bl	80117ac <nk_layout_row_calculate_usable_space>
 8011ee4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 8011ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eea:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8011eee:	2b08      	cmp	r3, #8
 8011ef0:	f200 828b 	bhi.w	801240a <nk_layout_widget_space+0x62e>
 8011ef4:	a201      	add	r2, pc, #4	; (adr r2, 8011efc <nk_layout_widget_space+0x120>)
 8011ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011efa:	bf00      	nop
 8011efc:	08011f21 	.word	0x08011f21
 8011f00:	08011fa3 	.word	0x08011fa3
 8011f04:	08012025 	.word	0x08012025
 8011f08:	08012107 	.word	0x08012107
 8011f0c:	080121eb 	.word	0x080121eb
 8011f10:	08012223 	.word	0x08012223
 8011f14:	08012267 	.word	0x08012267
 8011f18:	08012321 	.word	0x08012321
 8011f1c:	0801236d 	.word	0x0801236d
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 8011f20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f30:	dd02      	ble.n	8011f38 <nk_layout_widget_space+0x15c>
 8011f32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011f36:	e001      	b.n	8011f3c <nk_layout_widget_space+0x160>
 8011f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f40:	ee07 3a10 	vmov	s14, r3
 8011f44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011f48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011f4c:	ed87 7a07 	vstr	s14, [r7, #28]
        item_offset = (float)layout->row.index * w;
 8011f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f54:	ee07 3a90 	vmov	s15, r3
 8011f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8011f68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f74:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f84:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8011f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f8c:	ee07 3a90 	vmov	s15, r3
 8011f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011f94:	edd7 7a05 	vldr	s15, [r7, #20]
 8011f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f9c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8011fa0:	e243      	b.n	801242a <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_DYNAMIC_ROW: {
        /* scaling single ratio widget width */
        float w = layout->row.item_width * panel_space;
 8011fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8011fa8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fb0:	edc7 7a08 	vstr	s15, [r7, #32]
        item_offset = layout->row.item_offset;
 8011fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fba:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8011fbc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fc8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fd0:	ed97 7a08 	vldr	s14, [r7, #32]
 8011fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fd8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = 0;
 8011fdc:	f04f 0300 	mov.w	r3, #0
 8011fe0:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (modify) {
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f000 8217 	beq.w	8012418 <nk_layout_widget_space+0x63c>
            layout->row.item_offset += w + spacing.x;
 8011fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fec:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8011ff0:	edd7 6a05 	vldr	s13, [r7, #20]
 8011ff4:	edd7 7a08 	vldr	s15, [r7, #32]
 8011ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012002:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 8012006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012008:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 801200c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801200e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8012012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012018:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            layout->row.index = 0;
 801201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801201e:	2200      	movs	r2, #0
 8012020:	669a      	str	r2, [r3, #104]	; 0x68
        }
    } break;
 8012022:	e1f9      	b.n	8012418 <nk_layout_widget_space+0x63c>
    case NK_LAYOUT_DYNAMIC_FREE: {
        /* panel width depended free widget placing */
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 8012024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012026:	ed93 7a08 	vldr	s14, [r3, #32]
 801202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202c:	edd3 6a04 	vldr	s13, [r3, #16]
 8012030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012032:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8012036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	edc3 7a00 	vstr	s15, [r3]
        bounds->x -= (float)*layout->offset_x;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	ed93 7a00 	vldr	s14, [r3]
 801204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204c:	699b      	ldr	r3, [r3, #24]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	ee07 3a90 	vmov	s15, r3
 8012054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 8012062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012064:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8012068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801206a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 801206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012070:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8012074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012078:	ee77 7a27 	vadd.f32	s15, s14, s15
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	ed93 7a01 	vldr	s14, [r3, #4]
 8012088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801208a:	69db      	ldr	r3, [r3, #28]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	ee07 3a90 	vmov	s15, r3
 8012092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012096:	ee77 7a67 	vsub.f32	s15, s14, s15
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 80120a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80120a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a8:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80120ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	edd3 6a00 	vldr	s13, [r3]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	edd3 7a00 	vldr	s15, [r3]
 80120bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80120c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	edc3 7a02 	vstr	s15, [r3, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 80120d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80120d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120da:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80120de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80120ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80120fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 8012104:	e1ea      	b.n	80124dc <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_DYNAMIC: {
        /* scaling arrays of panel width ratios for every widget */
        float ratio, w;
        NK_ASSERT(layout->row.ratio);
 8012106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801210a:	2b00      	cmp	r3, #0
 801210c:	d114      	bne.n	8012138 <nk_layout_widget_space+0x35c>
 801210e:	4b09      	ldr	r3, [pc, #36]	; (8012134 <nk_layout_widget_space+0x358>)
 8012110:	4a03      	ldr	r2, [pc, #12]	; (8012120 <nk_layout_widget_space+0x344>)
 8012112:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012116:	4803      	ldr	r0, [pc, #12]	; (8012124 <nk_layout_widget_space+0x348>)
 8012118:	f00a fba0 	bl	801c85c <__assert_func>
 801211c:	0802026c 	.word	0x0802026c
 8012120:	08021640 	.word	0x08021640
 8012124:	08020270 	.word	0x08020270
 8012128:	0802028c 	.word	0x0802028c
 801212c:	0802029c 	.word	0x0802029c
 8012130:	080203cc 	.word	0x080203cc
 8012134:	080203d4 	.word	0x080203d4
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 8012138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801213e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	4413      	add	r3, r2
 8012144:	edd3 7a00 	vldr	s15, [r3]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 8012148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012150:	d502      	bpl.n	8012158 <nk_layout_widget_space+0x37c>
 8012152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012156:	e006      	b.n	8012166 <nk_layout_widget_space+0x38a>
 8012158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801215a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801215c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801215e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	4413      	add	r3, r2
 8012164:	681b      	ldr	r3, [r3, #0]
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 8012166:	62bb      	str	r3, [r7, #40]	; 0x28

        w = (ratio * panel_space);
 8012168:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801216c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012174:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        item_spacing = (float)layout->row.index * spacing.x;
 8012178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801217c:	ee07 3a90 	vmov	s15, r3
 8012180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012184:	edd7 7a05 	vldr	s15, [r7, #20]
 8012188:	ee67 7a27 	vmul.f32	s15, s14, s15
 801218c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_offset = layout->row.item_offset;
 8012190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012196:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8012198:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801219c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121a4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80121a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80121b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121b4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

        if (modify) {
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f000 812e 	beq.w	801241c <nk_layout_widget_space+0x640>
            layout->row.item_offset += w;
 80121c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80121c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80121ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += ratio;
 80121d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d6:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80121da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80121de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e4:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
        }
    } break;
 80121e8:	e118      	b.n	801241c <nk_layout_widget_space+0x640>
    case NK_LAYOUT_STATIC_FIXED: {
        /* non-scaling fixed widgets item width */
        item_width = layout->row.item_width;
 80121ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121ee:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = (float)layout->row.index * item_width;
 80121f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121f4:	ee07 3a90 	vmov	s15, r3
 80121f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121fc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012204:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 8012208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801220a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801220c:	ee07 3a90 	vmov	s15, r3
 8012210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012214:	edd7 7a05 	vldr	s15, [r7, #20]
 8012218:	ee67 7a27 	vmul.f32	s15, s14, s15
 801221c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8012220:	e103      	b.n	801242a <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_STATIC_ROW: {
        /* scaling single ratio widget width */
        item_width = layout->row.item_width;
 8012222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012226:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 8012228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801222e:	647b      	str	r3, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 8012230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012234:	ee07 3a90 	vmov	s15, r3
 8012238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801223c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012244:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += item_width;
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	f000 80e8 	beq.w	8012420 <nk_layout_widget_space+0x644>
 8012250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012252:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8012256:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012260:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8012264:	e0dc      	b.n	8012420 <nk_layout_widget_space+0x644>
    case NK_LAYOUT_STATIC_FREE: {
        /* free widget placing */
        bounds->x = layout->at_x + layout->row.item.x;
 8012266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012268:	ed93 7a08 	vldr	s14, [r3, #32]
 801226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8012272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	edc3 7a00 	vstr	s15, [r3]
        bounds->w = layout->row.item.w;
 801227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801227e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	609a      	str	r2, [r3, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	ed93 7a00 	vldr	s14, [r3]
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012292:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012298:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801229c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a4:	dd0d      	ble.n	80122c2 <nk_layout_widget_space+0x4e6>
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00a      	beq.n	80122c2 <nk_layout_widget_space+0x4e6>
            layout->max_x = (bounds->x + bounds->w);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	ed93 7a00 	vldr	s14, [r3]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80122b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	ed93 7a00 	vldr	s14, [r3]
 80122c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ca:	699b      	ldr	r3, [r3, #24]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	ee07 3a90 	vmov	s15, r3
 80122d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + layout->row.item.y;
 80122e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80122e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e8:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80122ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80122fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fe:	69db      	ldr	r3, [r3, #28]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	ee07 3a90 	vmov	s15, r3
 8012306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801230a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->h = layout->row.item.h;
 8012314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012316:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	60da      	str	r2, [r3, #12]
        return;
 801231e:	e0dd      	b.n	80124dc <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_STATIC: {
        /* non-scaling array of panel pixel width for every widget */
        item_spacing = (float)layout->row.index * spacing.x;
 8012320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012324:	ee07 3a90 	vmov	s15, r3
 8012328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801232c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012334:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_width = layout->row.ratio[layout->row.index];
 8012338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801233a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801233e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	4413      	add	r3, r2
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 8012348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801234e:	647b      	str	r3, [r7, #68]	; 0x44
        if (modify) layout->row.item_offset += item_width;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d066      	beq.n	8012424 <nk_layout_widget_space+0x648>
 8012356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012358:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801235c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012366:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 801236a:	e05b      	b.n	8012424 <nk_layout_widget_space+0x648>
    case NK_LAYOUT_TEMPLATE: {
        /* stretchy row layout with combined dynamic/static widget width*/
        float w;
        NK_ASSERT(layout->row.index < layout->row.columns);
 801236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801236e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012374:	429a      	cmp	r2, r3
 8012376:	db06      	blt.n	8012386 <nk_layout_widget_space+0x5aa>
 8012378:	4b5a      	ldr	r3, [pc, #360]	; (80124e4 <nk_layout_widget_space+0x708>)
 801237a:	4a5b      	ldr	r2, [pc, #364]	; (80124e8 <nk_layout_widget_space+0x70c>)
 801237c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8012380:	485a      	ldr	r0, [pc, #360]	; (80124ec <nk_layout_widget_space+0x710>)
 8012382:	f00a fa6b 	bl	801c85c <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 8012386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801238a:	2b0f      	cmp	r3, #15
 801238c:	dd06      	ble.n	801239c <nk_layout_widget_space+0x5c0>
 801238e:	4b58      	ldr	r3, [pc, #352]	; (80124f0 <nk_layout_widget_space+0x714>)
 8012390:	4a55      	ldr	r2, [pc, #340]	; (80124e8 <nk_layout_widget_space+0x70c>)
 8012392:	f240 21b2 	movw	r1, #690	; 0x2b2
 8012396:	4855      	ldr	r0, [pc, #340]	; (80124ec <nk_layout_widget_space+0x710>)
 8012398:	f00a fa60 	bl	801c85c <__assert_func>
        w = layout->row.templates[layout->row.index];
 801239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801239e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123a2:	3326      	adds	r3, #38	; 0x26
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	4413      	add	r3, r2
 80123a8:	3308      	adds	r3, #8
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        item_offset = layout->row.item_offset;
 80123ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123b4:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 80123b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80123ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123c2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80123c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80123ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123d2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 80123d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123da:	ee07 3a90 	vmov	s15, r3
 80123de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80123e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80123e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += w;
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d019      	beq.n	8012428 <nk_layout_widget_space+0x64c>
 80123f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80123fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80123fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012404:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8012408:	e00e      	b.n	8012428 <nk_layout_widget_space+0x64c>
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
 801240a:	4b3a      	ldr	r3, [pc, #232]	; (80124f4 <nk_layout_widget_space+0x718>)
 801240c:	4a36      	ldr	r2, [pc, #216]	; (80124e8 <nk_layout_widget_space+0x70c>)
 801240e:	f240 21ba 	movw	r1, #698	; 0x2ba
 8012412:	4836      	ldr	r0, [pc, #216]	; (80124ec <nk_layout_widget_space+0x710>)
 8012414:	f00a fa22 	bl	801c85c <__assert_func>
    } break;
 8012418:	bf00      	nop
 801241a:	e006      	b.n	801242a <nk_layout_widget_space+0x64e>
    } break;
 801241c:	bf00      	nop
 801241e:	e004      	b.n	801242a <nk_layout_widget_space+0x64e>
    } break;
 8012420:	bf00      	nop
 8012422:	e002      	b.n	801242a <nk_layout_widget_space+0x64e>
    } break;
 8012424:	bf00      	nop
 8012426:	e000      	b.n	801242a <nk_layout_widget_space+0x64e>
    } break;
 8012428:	bf00      	nop
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801242e:	609a      	str	r2, [r3, #8]
    bounds->h = layout->row.height - spacing.y;
 8012430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012432:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8012436:	edd7 7a06 	vldr	s15, [r7, #24]
 801243a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	edc3 7a03 	vstr	s15, [r3, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 8012444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012446:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244c:	69db      	ldr	r3, [r3, #28]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	ee07 3a90 	vmov	s15, r3
 8012454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012458:	ee77 7a67 	vsub.f32	s15, s14, s15
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 8012462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012464:	ed93 7a08 	vldr	s14, [r3, #32]
 8012468:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801246c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012470:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	edc3 7a00 	vstr	s15, [r3]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	ed93 7a00 	vldr	s14, [r3]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	edd3 7a02 	vldr	s15, [r3, #8]
 801248a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801248e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012490:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249c:	dd0d      	ble.n	80124ba <nk_layout_widget_space+0x6de>
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00a      	beq.n	80124ba <nk_layout_widget_space+0x6de>
        layout->max_x = bounds->x + bounds->w;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	ed93 7a00 	vldr	s14, [r3]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80124b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	ed93 7a00 	vldr	s14, [r3]
 80124c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124c2:	699b      	ldr	r3, [r3, #24]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	ee07 3a90 	vmov	s15, r3
 80124ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	edc3 7a00 	vstr	s15, [r3]
 80124d8:	e000      	b.n	80124dc <nk_layout_widget_space+0x700>
        return;
 80124da:	bf00      	nop
}
 80124dc:	3748      	adds	r7, #72	; 0x48
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	080203e8 	.word	0x080203e8
 80124e8:	08021640 	.word	0x08021640
 80124ec:	08020270 	.word	0x08020270
 80124f0:	08020410 	.word	0x08020410
 80124f4:	08020428 	.word	0x08020428

080124f8 <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d106      	bne.n	8012516 <nk_panel_alloc_space+0x1e>
 8012508:	4b2d      	ldr	r3, [pc, #180]	; (80125c0 <nk_panel_alloc_space+0xc8>)
 801250a:	4a2e      	ldr	r2, [pc, #184]	; (80125c4 <nk_panel_alloc_space+0xcc>)
 801250c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8012510:	482d      	ldr	r0, [pc, #180]	; (80125c8 <nk_panel_alloc_space+0xd0>)
 8012512:	f00a f9a3 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801251c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012520:	2b00      	cmp	r3, #0
 8012522:	d106      	bne.n	8012532 <nk_panel_alloc_space+0x3a>
 8012524:	4b29      	ldr	r3, [pc, #164]	; (80125cc <nk_panel_alloc_space+0xd4>)
 8012526:	4a27      	ldr	r2, [pc, #156]	; (80125c4 <nk_panel_alloc_space+0xcc>)
 8012528:	f240 21cd 	movw	r1, #717	; 0x2cd
 801252c:	4826      	ldr	r0, [pc, #152]	; (80125c8 <nk_panel_alloc_space+0xd0>)
 801252e:	f00a f995 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012538:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801253c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012540:	2b00      	cmp	r3, #0
 8012542:	d106      	bne.n	8012552 <nk_panel_alloc_space+0x5a>
 8012544:	4b22      	ldr	r3, [pc, #136]	; (80125d0 <nk_panel_alloc_space+0xd8>)
 8012546:	4a1f      	ldr	r2, [pc, #124]	; (80125c4 <nk_panel_alloc_space+0xcc>)
 8012548:	f240 21ce 	movw	r1, #718	; 0x2ce
 801254c:	481e      	ldr	r0, [pc, #120]	; (80125c8 <nk_panel_alloc_space+0xd0>)
 801254e:	f00a f985 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d02f      	beq.n	80125b8 <nk_panel_alloc_space+0xc0>
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801255e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012562:	2b00      	cmp	r3, #0
 8012564:	d028      	beq.n	80125b8 <nk_panel_alloc_space+0xc0>
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801256c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012574:	2b00      	cmp	r3, #0
 8012576:	d01f      	beq.n	80125b8 <nk_panel_alloc_space+0xc0>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801257e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012582:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801258a:	60bb      	str	r3, [r7, #8]
    if (layout->row.index >= layout->row.columns)
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012594:	429a      	cmp	r2, r3
 8012596:	db03      	blt.n	80125a0 <nk_panel_alloc_space+0xa8>
        nk_panel_alloc_row(ctx, win);
 8012598:	68f9      	ldr	r1, [r7, #12]
 801259a:	6838      	ldr	r0, [r7, #0]
 801259c:	f7ff fbf2 	bl	8011d84 <nk_panel_alloc_row>

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 80125a0:	2301      	movs	r3, #1
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7ff fc18 	bl	8011ddc <nk_layout_widget_space>
    layout->row.index++;
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125b0:	1c5a      	adds	r2, r3, #1
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	669a      	str	r2, [r3, #104]	; 0x68
 80125b6:	e000      	b.n	80125ba <nk_panel_alloc_space+0xc2>
        return;
 80125b8:	bf00      	nop
}
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	0802026c 	.word	0x0802026c
 80125c4:	08021658 	.word	0x08021658
 80125c8:	08020270 	.word	0x08020270
 80125cc:	0802028c 	.word	0x0802028c
 80125d0:	0802029c 	.word	0x0802029c

080125d4 <nk_round_up_pow2>:
    return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*(a7 + x*a8)))))));
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
    v--;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	3b01      	subs	r3, #1
 80125e0:	607b      	str	r3, [r7, #4]
    v |= v >> 1;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	085b      	lsrs	r3, r3, #1
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	4313      	orrs	r3, r2
 80125ea:	607b      	str	r3, [r7, #4]
    v |= v >> 2;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	089b      	lsrs	r3, r3, #2
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	4313      	orrs	r3, r2
 80125f4:	607b      	str	r3, [r7, #4]
    v |= v >> 4;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	091b      	lsrs	r3, r3, #4
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	4313      	orrs	r3, r2
 80125fe:	607b      	str	r3, [r7, #4]
    v |= v >> 8;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	0a1b      	lsrs	r3, r3, #8
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	4313      	orrs	r3, r2
 8012608:	607b      	str	r3, [r7, #4]
    v |= v >> 16;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	0c1b      	lsrs	r3, r3, #16
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	4313      	orrs	r3, r2
 8012612:	607b      	str	r3, [r7, #4]
    v++;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	3301      	adds	r3, #1
 8012618:	607b      	str	r3, [r7, #4]
    return v;
 801261a:	687b      	ldr	r3, [r7, #4]
}
 801261c:	4618      	mov	r0, r3
 801261e:	370c      	adds	r7, #12
 8012620:	46bd      	mov	sp, r7
 8012622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012626:	4770      	bx	lr

08012628 <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 8012628:	b490      	push	{r4, r7}
 801262a:	b090      	sub	sp, #64	; 0x40
 801262c:	af00      	add	r7, sp, #0
 801262e:	ed87 0a07 	vstr	s0, [r7, #28]
 8012632:	edc7 0a06 	vstr	s1, [r7, #24]
 8012636:	ed87 1a05 	vstr	s2, [r7, #20]
 801263a:	edc7 1a04 	vstr	s3, [r7, #16]
    struct nk_rect r;
    r.x = x; r.y = y;
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	623b      	str	r3, [r7, #32]
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	627b      	str	r3, [r7, #36]	; 0x24
    r.w = w; r.h = h;
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	62bb      	str	r3, [r7, #40]	; 0x28
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 801264e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8012652:	f107 0320 	add.w	r3, r7, #32
 8012656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801265c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801265e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012664:	ee06 0a10 	vmov	s12, r0
 8012668:	ee06 1a90 	vmov	s13, r1
 801266c:	ee07 2a10 	vmov	s14, r2
 8012670:	ee07 3a90 	vmov	s15, r3
}
 8012674:	eeb0 0a46 	vmov.f32	s0, s12
 8012678:	eef0 0a66 	vmov.f32	s1, s13
 801267c:	eeb0 1a47 	vmov.f32	s2, s14
 8012680:	eef0 1a67 	vmov.f32	s3, s15
 8012684:	3740      	adds	r7, #64	; 0x40
 8012686:	46bd      	mov	sp, r7
 8012688:	bc90      	pop	{r4, r7}
 801268a:	4770      	bx	lr

0801268c <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 801268c:	b490      	push	{r4, r7}
 801268e:	b092      	sub	sp, #72	; 0x48
 8012690:	af00      	add	r7, sp, #0
 8012692:	eeb0 6a40 	vmov.f32	s12, s0
 8012696:	eef0 6a60 	vmov.f32	s13, s1
 801269a:	eeb0 7a41 	vmov.f32	s14, s2
 801269e:	eef0 7a61 	vmov.f32	s15, s3
 80126a2:	ed87 2a05 	vstr	s4, [r7, #20]
 80126a6:	ed87 6a06 	vstr	s12, [r7, #24]
 80126aa:	edc7 6a07 	vstr	s13, [r7, #28]
 80126ae:	ed87 7a08 	vstr	s14, [r7, #32]
 80126b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 80126b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80126ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80126be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80126c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ca:	d504      	bpl.n	80126d6 <nk_shrink_rect+0x4a>
 80126cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80126d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80126d4:	e001      	b.n	80126da <nk_shrink_rect+0x4e>
 80126d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80126da:	edc7 7a08 	vstr	s15, [r7, #32]
    r.h = NK_MAX(r.h, 2 * amount);
 80126de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80126e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80126e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80126ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f2:	d504      	bpl.n	80126fe <nk_shrink_rect+0x72>
 80126f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80126f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80126fc:	e001      	b.n	8012702 <nk_shrink_rect+0x76>
 80126fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012702:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    res.x = r.x + amount;
 8012706:	ed97 7a06 	vldr	s14, [r7, #24]
 801270a:	edd7 7a05 	vldr	s15, [r7, #20]
 801270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012712:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    res.y = r.y + amount;
 8012716:	ed97 7a07 	vldr	s14, [r7, #28]
 801271a:	edd7 7a05 	vldr	s15, [r7, #20]
 801271e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012722:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    res.w = r.w - 2 * amount;
 8012726:	ed97 7a08 	vldr	s14, [r7, #32]
 801272a:	edd7 7a05 	vldr	s15, [r7, #20]
 801272e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012736:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    res.h = r.h - 2 * amount;
 801273a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801273e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012742:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012746:	ee77 7a67 	vsub.f32	s15, s14, s15
 801274a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return res;
 801274e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8012752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801275c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801275e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012764:	ee06 0a10 	vmov	s12, r0
 8012768:	ee06 1a90 	vmov	s13, r1
 801276c:	ee07 2a10 	vmov	s14, r2
 8012770:	ee07 3a90 	vmov	s15, r3
}
 8012774:	eeb0 0a46 	vmov.f32	s0, s12
 8012778:	eef0 0a66 	vmov.f32	s1, s13
 801277c:	eeb0 1a47 	vmov.f32	s2, s14
 8012780:	eef0 1a67 	vmov.f32	s3, s15
 8012784:	3748      	adds	r7, #72	; 0x48
 8012786:	46bd      	mov	sp, r7
 8012788:	bc90      	pop	{r4, r7}
 801278a:	4770      	bx	lr

0801278c <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 801278c:	b480      	push	{r7}
 801278e:	b089      	sub	sp, #36	; 0x24
 8012790:	af00      	add	r7, sp, #0
 8012792:	ed87 0a03 	vstr	s0, [r7, #12]
 8012796:	edc7 0a02 	vstr	s1, [r7, #8]
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	613b      	str	r3, [r7, #16]
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	617b      	str	r3, [r7, #20]
    return ret;
 80127a2:	f107 0318 	add.w	r3, r7, #24
 80127a6:	f107 0210 	add.w	r2, r7, #16
 80127aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	ee07 2a10 	vmov	s14, r2
 80127ba:	ee07 3a90 	vmov	s15, r3
}
 80127be:	eeb0 0a47 	vmov.f32	s0, s14
 80127c2:	eef0 0a67 	vmov.f32	s1, s15
 80127c6:	3724      	adds	r7, #36	; 0x24
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6178      	str	r0, [r7, #20]
 80127d8:	6139      	str	r1, [r7, #16]
 80127da:	ed87 0a03 	vstr	s0, [r7, #12]
 80127de:	edc7 0a02 	vstr	s1, [r7, #8]
 80127e2:	ed87 1a01 	vstr	s2, [r7, #4]
 80127e6:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(a);
 80127ea:	693b      	ldr	r3, [r7, #16]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d106      	bne.n	80127fe <nk_unify+0x2e>
 80127f0:	4b4b      	ldr	r3, [pc, #300]	; (8012920 <nk_unify+0x150>)
 80127f2:	4a4c      	ldr	r2, [pc, #304]	; (8012924 <nk_unify+0x154>)
 80127f4:	f240 1101 	movw	r1, #257	; 0x101
 80127f8:	484b      	ldr	r0, [pc, #300]	; (8012928 <nk_unify+0x158>)
 80127fa:	f00a f82f 	bl	801c85c <__assert_func>
    NK_ASSERT(clip);
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d106      	bne.n	8012812 <nk_unify+0x42>
 8012804:	4b49      	ldr	r3, [pc, #292]	; (801292c <nk_unify+0x15c>)
 8012806:	4a47      	ldr	r2, [pc, #284]	; (8012924 <nk_unify+0x154>)
 8012808:	f44f 7181 	mov.w	r1, #258	; 0x102
 801280c:	4846      	ldr	r0, [pc, #280]	; (8012928 <nk_unify+0x158>)
 801280e:	f00a f825 	bl	801c85c <__assert_func>
    clip->x = NK_MAX(a->x, x0);
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	edd3 7a00 	vldr	s15, [r3]
 8012818:	ed97 7a03 	vldr	s14, [r7, #12]
 801281c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012824:	dd01      	ble.n	801282a <nk_unify+0x5a>
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	e001      	b.n	801282e <nk_unify+0x5e>
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	697a      	ldr	r2, [r7, #20]
 8012830:	6013      	str	r3, [r2, #0]
    clip->y = NK_MAX(a->y, y0);
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	edd3 7a01 	vldr	s15, [r3, #4]
 8012838:	ed97 7a02 	vldr	s14, [r7, #8]
 801283c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012844:	dd01      	ble.n	801284a <nk_unify+0x7a>
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	e001      	b.n	801284e <nk_unify+0x7e>
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	697a      	ldr	r2, [r7, #20]
 8012850:	6053      	str	r3, [r2, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	ed93 7a00 	vldr	s14, [r3]
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	edd3 7a02 	vldr	s15, [r3, #8]
 801285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012862:	ed97 7a01 	vldr	s14, [r7, #4]
 8012866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286e:	dd08      	ble.n	8012882 <nk_unify+0xb2>
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	ed93 7a00 	vldr	s14, [r3]
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	edd3 7a02 	vldr	s15, [r3, #8]
 801287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012880:	e001      	b.n	8012886 <nk_unify+0xb6>
 8012882:	edd7 7a01 	vldr	s15, [r7, #4]
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	ed93 7a00 	vldr	s14, [r3]
 801288c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	edc3 7a02 	vstr	s15, [r3, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	ed93 7a01 	vldr	s14, [r3, #4]
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	edd3 7a03 	vldr	s15, [r3, #12]
 80128a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128a6:	ed97 7a00 	vldr	s14, [r7]
 80128aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b2:	dd08      	ble.n	80128c6 <nk_unify+0xf6>
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80128c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128c4:	e001      	b.n	80128ca <nk_unify+0xfa>
 80128c6:	edd7 7a00 	vldr	s15, [r7]
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80128d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	edc3 7a03 	vstr	s15, [r3, #12]
    clip->w = NK_MAX(0, clip->w);
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80128e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e8:	dd02      	ble.n	80128f0 <nk_unify+0x120>
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	e001      	b.n	80128f4 <nk_unify+0x124>
 80128f0:	f04f 0300 	mov.w	r3, #0
 80128f4:	697a      	ldr	r2, [r7, #20]
 80128f6:	6093      	str	r3, [r2, #8]
    clip->h = NK_MAX(0, clip->h);
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80128fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012906:	dd02      	ble.n	801290e <nk_unify+0x13e>
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	e001      	b.n	8012912 <nk_unify+0x142>
 801290e:	f04f 0300 	mov.w	r3, #0
 8012912:	697a      	ldr	r2, [r7, #20]
 8012914:	60d3      	str	r3, [r2, #12]
}
 8012916:	bf00      	nop
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	0802042c 	.word	0x0802042c
 8012924:	08021670 	.word	0x08021670
 8012928:	08020430 	.word	0x08020430
 801292c:	0802044c 	.word	0x0802044c

08012930 <nk_triangle_from_direction>:

NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
 8012930:	b590      	push	{r4, r7, lr}
 8012932:	b08b      	sub	sp, #44	; 0x2c
 8012934:	af00      	add	r7, sp, #0
 8012936:	61f8      	str	r0, [r7, #28]
 8012938:	eeb0 6a40 	vmov.f32	s12, s0
 801293c:	eef0 6a60 	vmov.f32	s13, s1
 8012940:	eeb0 7a41 	vmov.f32	s14, s2
 8012944:	eef0 7a61 	vmov.f32	s15, s3
 8012948:	ed87 2a02 	vstr	s4, [r7, #8]
 801294c:	edc7 2a01 	vstr	s5, [r7, #4]
 8012950:	460b      	mov	r3, r1
 8012952:	ed87 6a03 	vstr	s12, [r7, #12]
 8012956:	edc7 6a04 	vstr	s13, [r7, #16]
 801295a:	ed87 7a05 	vstr	s14, [r7, #20]
 801295e:	edc7 7a06 	vstr	s15, [r7, #24]
 8012962:	70fb      	strb	r3, [r7, #3]
    float w_half, h_half;
    NK_ASSERT(result);
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d106      	bne.n	8012978 <nk_triangle_from_direction+0x48>
 801296a:	4bcf      	ldr	r3, [pc, #828]	; (8012ca8 <nk_triangle_from_direction+0x378>)
 801296c:	4acf      	ldr	r2, [pc, #828]	; (8012cac <nk_triangle_from_direction+0x37c>)
 801296e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8012972:	48cf      	ldr	r0, [pc, #828]	; (8012cb0 <nk_triangle_from_direction+0x380>)
 8012974:	f009 ff72 	bl	801c85c <__assert_func>

    r.w = NK_MAX(2 * pad_x, r.w);
 8012978:	edd7 7a02 	vldr	s15, [r7, #8]
 801297c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8012980:	edd7 7a05 	vldr	s15, [r7, #20]
 8012984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298c:	d502      	bpl.n	8012994 <nk_triangle_from_direction+0x64>
 801298e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012992:	e003      	b.n	801299c <nk_triangle_from_direction+0x6c>
 8012994:	edd7 7a02 	vldr	s15, [r7, #8]
 8012998:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801299c:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = NK_MAX(2 * pad_y, r.h);
 80129a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80129a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80129a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80129ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b4:	d502      	bpl.n	80129bc <nk_triangle_from_direction+0x8c>
 80129b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80129ba:	e003      	b.n	80129c4 <nk_triangle_from_direction+0x94>
 80129bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80129c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80129c4:	edc7 7a06 	vstr	s15, [r7, #24]
    r.w = r.w - 2 * pad_x;
 80129c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80129cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80129d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80129d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129d8:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = r.h - 2 * pad_y;
 80129dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80129e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80129e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80129e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129ec:	edc7 7a06 	vstr	s15, [r7, #24]

    r.x = r.x + pad_x;
 80129f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80129f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80129f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129fc:	edc7 7a03 	vstr	s15, [r7, #12]
    r.y = r.y + pad_y;
 8012a00:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8012a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a0c:	edc7 7a04 	vstr	s15, [r7, #16]

    w_half = r.w / 2.0f;
 8012a10:	ed97 7a05 	vldr	s14, [r7, #20]
 8012a14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012a1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    h_half = r.h / 2.0f;
 8012a20:	ed97 7a06 	vldr	s14, [r7, #24]
 8012a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012a2c:	edc7 7a08 	vstr	s15, [r7, #32]

    if (direction == NK_UP) {
 8012a30:	78fb      	ldrb	r3, [r7, #3]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d14d      	bne.n	8012ad2 <nk_triangle_from_direction+0x1a2>
        result[0] = nk_vec2(r.x + w_half, r.y);
 8012a36:	ed97 7a03 	vldr	s14, [r7, #12]
 8012a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a42:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a46:	eef0 0a47 	vmov.f32	s1, s14
 8012a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8012a4e:	f7ff fe9d 	bl	801278c <nk_vec2>
 8012a52:	eeb0 7a40 	vmov.f32	s14, s0
 8012a56:	eef0 7a60 	vmov.f32	s15, s1
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	ed83 7a00 	vstr	s14, [r3]
 8012a60:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 8012a64:	ed97 7a03 	vldr	s14, [r7, #12]
 8012a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8012a6c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012a70:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a74:	edd7 7a06 	vldr	s15, [r7, #24]
 8012a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a7c:	69fb      	ldr	r3, [r7, #28]
 8012a7e:	f103 0408 	add.w	r4, r3, #8
 8012a82:	eef0 0a67 	vmov.f32	s1, s15
 8012a86:	eeb0 0a66 	vmov.f32	s0, s13
 8012a8a:	f7ff fe7f 	bl	801278c <nk_vec2>
 8012a8e:	eeb0 7a40 	vmov.f32	s14, s0
 8012a92:	eef0 7a60 	vmov.f32	s15, s1
 8012a96:	ed84 7a00 	vstr	s14, [r4]
 8012a9a:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8012a9e:	edd7 6a03 	vldr	s13, [r7, #12]
 8012aa2:	ed97 7a04 	vldr	s14, [r7, #16]
 8012aa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8012aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	f103 0410 	add.w	r4, r3, #16
 8012ab4:	eef0 0a67 	vmov.f32	s1, s15
 8012ab8:	eeb0 0a66 	vmov.f32	s0, s13
 8012abc:	f7ff fe66 	bl	801278c <nk_vec2>
 8012ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8012ac4:	eef0 7a60 	vmov.f32	s15, s1
 8012ac8:	ed84 7a00 	vstr	s14, [r4]
 8012acc:	edc4 7a01 	vstr	s15, [r4, #4]
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
    }
}
 8012ad0:	e0e6      	b.n	8012ca0 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_RIGHT) {
 8012ad2:	78fb      	ldrb	r3, [r7, #3]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d149      	bne.n	8012b6c <nk_triangle_from_direction+0x23c>
        result[0] = nk_vec2(r.x, r.y);
 8012ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8012adc:	ed97 7a04 	vldr	s14, [r7, #16]
 8012ae0:	eef0 0a47 	vmov.f32	s1, s14
 8012ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8012ae8:	f7ff fe50 	bl	801278c <nk_vec2>
 8012aec:	eeb0 7a40 	vmov.f32	s14, s0
 8012af0:	eef0 7a60 	vmov.f32	s15, s1
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	ed83 7a00 	vstr	s14, [r3]
 8012afa:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 8012afe:	ed97 7a03 	vldr	s14, [r7, #12]
 8012b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8012b06:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012b0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8012b0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8012b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b16:	69fb      	ldr	r3, [r7, #28]
 8012b18:	f103 0408 	add.w	r4, r3, #8
 8012b1c:	eef0 0a67 	vmov.f32	s1, s15
 8012b20:	eeb0 0a66 	vmov.f32	s0, s13
 8012b24:	f7ff fe32 	bl	801278c <nk_vec2>
 8012b28:	eeb0 7a40 	vmov.f32	s14, s0
 8012b2c:	eef0 7a60 	vmov.f32	s15, s1
 8012b30:	ed84 7a00 	vstr	s14, [r4]
 8012b34:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8012b38:	edd7 6a03 	vldr	s13, [r7, #12]
 8012b3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8012b40:	edd7 7a06 	vldr	s15, [r7, #24]
 8012b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b48:	69fb      	ldr	r3, [r7, #28]
 8012b4a:	f103 0410 	add.w	r4, r3, #16
 8012b4e:	eef0 0a67 	vmov.f32	s1, s15
 8012b52:	eeb0 0a66 	vmov.f32	s0, s13
 8012b56:	f7ff fe19 	bl	801278c <nk_vec2>
 8012b5a:	eeb0 7a40 	vmov.f32	s14, s0
 8012b5e:	eef0 7a60 	vmov.f32	s15, s1
 8012b62:	ed84 7a00 	vstr	s14, [r4]
 8012b66:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8012b6a:	e099      	b.n	8012ca0 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_DOWN) {
 8012b6c:	78fb      	ldrb	r3, [r7, #3]
 8012b6e:	2b02      	cmp	r3, #2
 8012b70:	d149      	bne.n	8012c06 <nk_triangle_from_direction+0x2d6>
        result[0] = nk_vec2(r.x, r.y);
 8012b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b76:	ed97 7a04 	vldr	s14, [r7, #16]
 8012b7a:	eef0 0a47 	vmov.f32	s1, s14
 8012b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8012b82:	f7ff fe03 	bl	801278c <nk_vec2>
 8012b86:	eeb0 7a40 	vmov.f32	s14, s0
 8012b8a:	eef0 7a60 	vmov.f32	s15, s1
 8012b8e:	69fb      	ldr	r3, [r7, #28]
 8012b90:	ed83 7a00 	vstr	s14, [r3]
 8012b94:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8012b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8012b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ba4:	ed97 7a04 	vldr	s14, [r7, #16]
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	f103 0408 	add.w	r4, r3, #8
 8012bae:	eef0 0a47 	vmov.f32	s1, s14
 8012bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8012bb6:	f7ff fde9 	bl	801278c <nk_vec2>
 8012bba:	eeb0 7a40 	vmov.f32	s14, s0
 8012bbe:	eef0 7a60 	vmov.f32	s15, s1
 8012bc2:	ed84 7a00 	vstr	s14, [r4]
 8012bc6:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 8012bca:	ed97 7a03 	vldr	s14, [r7, #12]
 8012bce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012bd2:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012bd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8012bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8012bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	f103 0410 	add.w	r4, r3, #16
 8012be8:	eef0 0a67 	vmov.f32	s1, s15
 8012bec:	eeb0 0a66 	vmov.f32	s0, s13
 8012bf0:	f7ff fdcc 	bl	801278c <nk_vec2>
 8012bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8012bf8:	eef0 7a60 	vmov.f32	s15, s1
 8012bfc:	ed84 7a00 	vstr	s14, [r4]
 8012c00:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8012c04:	e04c      	b.n	8012ca0 <nk_triangle_from_direction+0x370>
        result[0] = nk_vec2(r.x, r.y + h_half);
 8012c06:	edd7 6a03 	vldr	s13, [r7, #12]
 8012c0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8012c0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8012c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c16:	eef0 0a67 	vmov.f32	s1, s15
 8012c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8012c1e:	f7ff fdb5 	bl	801278c <nk_vec2>
 8012c22:	eeb0 7a40 	vmov.f32	s14, s0
 8012c26:	eef0 7a60 	vmov.f32	s15, s1
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	ed83 7a00 	vstr	s14, [r3]
 8012c30:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8012c34:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c40:	ed97 7a04 	vldr	s14, [r7, #16]
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	f103 0408 	add.w	r4, r3, #8
 8012c4a:	eef0 0a47 	vmov.f32	s1, s14
 8012c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8012c52:	f7ff fd9b 	bl	801278c <nk_vec2>
 8012c56:	eeb0 7a40 	vmov.f32	s14, s0
 8012c5a:	eef0 7a60 	vmov.f32	s15, s1
 8012c5e:	ed84 7a00 	vstr	s14, [r4]
 8012c62:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 8012c66:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8012c72:	ed97 7a04 	vldr	s14, [r7, #16]
 8012c76:	edd7 7a06 	vldr	s15, [r7, #24]
 8012c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	f103 0410 	add.w	r4, r3, #16
 8012c84:	eef0 0a67 	vmov.f32	s1, s15
 8012c88:	eeb0 0a66 	vmov.f32	s0, s13
 8012c8c:	f7ff fd7e 	bl	801278c <nk_vec2>
 8012c90:	eeb0 7a40 	vmov.f32	s14, s0
 8012c94:	eef0 7a60 	vmov.f32	s15, s1
 8012c98:	ed84 7a00 	vstr	s14, [r4]
 8012c9c:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8012ca0:	bf00      	nop
 8012ca2:	372c      	adds	r7, #44	; 0x2c
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd90      	pop	{r4, r7, pc}
 8012ca8:	08020454 	.word	0x08020454
 8012cac:	0802167c 	.word	0x0802167c
 8012cb0:	08020430 	.word	0x08020430

08012cb4 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    if (ctx->freelist) {
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012cc2:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d00e      	beq.n	8012ce8 <nk_create_page_element+0x34>
        /* unlink page element from free list */
        elem = ctx->freelist;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012cd0:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8012cd4:	60fb      	str	r3, [r7, #12]
        ctx->freelist = elem->next;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8012ce2:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
 8012ce6:	e036      	b.n	8012d56 <nk_create_page_element+0xa2>
    } else if (ctx->use_pool) {
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012cee:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d015      	beq.n	8012d22 <nk_create_page_element+0x6e>
        /* allocate page element from memory pool */
        elem = nk_pool_alloc(&ctx->pool);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8012cfc:	3324      	adds	r3, #36	; 0x24
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f002 fa88 	bl	8015214 <nk_pool_alloc>
 8012d04:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d105      	bne.n	8012d18 <nk_create_page_element+0x64>
 8012d0c:	4b1b      	ldr	r3, [pc, #108]	; (8012d7c <nk_create_page_element+0xc8>)
 8012d0e:	4a1c      	ldr	r2, [pc, #112]	; (8012d80 <nk_create_page_element+0xcc>)
 8012d10:	2114      	movs	r1, #20
 8012d12:	481c      	ldr	r0, [pc, #112]	; (8012d84 <nk_create_page_element+0xd0>)
 8012d14:	f009 fda2 	bl	801c85c <__assert_func>
        if (!elem) return 0;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d11b      	bne.n	8012d56 <nk_create_page_element+0xa2>
 8012d1e:	2300      	movs	r3, #0
 8012d20:	e027      	b.n	8012d72 <nk_create_page_element+0xbe>
    } else {
        /* allocate new page element from back of fixed size memory buffer */
        NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
 8012d28:	300c      	adds	r0, #12
 8012d2a:	4b17      	ldr	r3, [pc, #92]	; (8012d88 <nk_create_page_element+0xd4>)
 8012d2c:	681a      	ldr	r2, [r3, #0]
 8012d2e:	4b17      	ldr	r3, [pc, #92]	; (8012d8c <nk_create_page_element+0xd8>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2101      	movs	r1, #1
 8012d34:	f7f9 ffbc 	bl	800ccb0 <nk_buffer_alloc>
 8012d38:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d105      	bne.n	8012d4c <nk_create_page_element+0x98>
 8012d40:	4b0e      	ldr	r3, [pc, #56]	; (8012d7c <nk_create_page_element+0xc8>)
 8012d42:	4a0f      	ldr	r2, [pc, #60]	; (8012d80 <nk_create_page_element+0xcc>)
 8012d44:	211b      	movs	r1, #27
 8012d46:	480f      	ldr	r0, [pc, #60]	; (8012d84 <nk_create_page_element+0xd0>)
 8012d48:	f009 fd88 	bl	801c85c <__assert_func>
        if (!elem) return 0;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d101      	bne.n	8012d56 <nk_create_page_element+0xa2>
 8012d52:	2300      	movs	r3, #0
 8012d54:	e00d      	b.n	8012d72 <nk_create_page_element+0xbe>
    }
    nk_zero_struct(*elem);
 8012d56:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f008 f8ce 	bl	801aefc <nk_zero>
    elem->next = 0;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	2200      	movs	r2, #0
 8012d64:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    elem->prev = 0;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    return elem;
 8012d70:	68fb      	ldr	r3, [r7, #12]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	0802045c 	.word	0x0802045c
 8012d80:	08021698 	.word	0x08021698
 8012d84:	08020464 	.word	0x08020464
 8012d88:	080216b0 	.word	0x080216b0
 8012d8c:	080216b4 	.word	0x080216b4

08012d90 <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
    /* link table into freelist */
    if (!ctx->freelist) {
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012da0:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d107      	bne.n	8012db8 <nk_link_page_element_into_freelist+0x28>
        ctx->freelist = elem;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012dae:	461a      	mov	r2, r3
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
    } else {
        elem->next = ctx->freelist;
        ctx->freelist = elem;
    }
}
 8012db6:	e00e      	b.n	8012dd6 <nk_link_page_element_into_freelist+0x46>
        elem->next = ctx->freelist;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012dbe:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        ctx->freelist = elem;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012dce:	461a      	mov	r2, r3
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
}
 8012dd6:	bf00      	nop
 8012dd8:	370c      	adds	r7, #12
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr

08012de2 <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b084      	sub	sp, #16
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	6078      	str	r0, [r7, #4]
 8012dea:	6039      	str	r1, [r7, #0]
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012df2:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d004      	beq.n	8012e04 <nk_free_page_element+0x22>
        nk_link_page_element_into_freelist(ctx, elem);
 8012dfa:	6839      	ldr	r1, [r7, #0]
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7ff ffc7 	bl	8012d90 <nk_link_page_element_into_freelist>
        return;
 8012e02:	e024      	b.n	8012e4e <nk_free_page_element+0x6c>
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012e0a:	60fb      	str	r3, [r7, #12]
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e12:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e1c:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8012e20:	4413      	add	r3, r2
 8012e22:	60bb      	str	r3, [r7, #8]
    if (elem_end == buffer_end)
 8012e24:	68fa      	ldr	r2, [r7, #12]
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d10c      	bne.n	8012e46 <nk_free_page_element+0x64>
        ctx->memory.size -= sizeof(struct nk_page_element);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e32:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8012e36:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012e40:	f8c2 3ac4 	str.w	r3, [r2, #2756]	; 0xac4
 8012e44:	e003      	b.n	8012e4e <nk_free_page_element+0x6c>
    else nk_link_page_element_into_freelist(ctx, elem);}
 8012e46:	6839      	ldr	r1, [r7, #0]
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7ff ffa1 	bl	8012d90 <nk_link_page_element_into_freelist>
}
 8012e4e:	3710      	adds	r7, #16
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff ff29 	bl	8012cb4 <nk_create_page_element>
 8012e62:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d101      	bne.n	8012e6e <nk_create_panel+0x1a>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	e005      	b.n	8012e7a <nk_create_panel+0x26>
    nk_zero_struct(*elem);
 8012e6e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8012e72:	68f8      	ldr	r0, [r7, #12]
 8012e74:	f008 f842 	bl	801aefc <nk_zero>
    return &elem->data.pan;
 8012e78:	68fb      	ldr	r3, [r7, #12]
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3710      	adds	r7, #16
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}

08012e82 <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b084      	sub	sp, #16
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
 8012e8a:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 8012e94:	68b9      	ldr	r1, [r7, #8]
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7ff ffa3 	bl	8012de2 <nk_free_page_element>
}
 8012e9c:	bf00      	nop
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
    nk_bool active = 0;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	60fb      	str	r3, [r7, #12]
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f003 0318 	and.w	r3, r3, #24
 8012eb8:	60fb      	str	r3, [r7, #12]
    active = active || (flags & NK_WINDOW_TITLE);
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d104      	bne.n	8012eca <nk_panel_has_header+0x26>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d001      	beq.n	8012ece <nk_panel_has_header+0x2a>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e000      	b.n	8012ed0 <nk_panel_has_header+0x2c>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	60fb      	str	r3, [r7, #12]
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d009      	beq.n	8012eec <nk_panel_has_header+0x48>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d104      	bne.n	8012eec <nk_panel_has_header+0x48>
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d001      	beq.n	8012eec <nk_panel_has_header+0x48>
 8012ee8:	2301      	movs	r3, #1
 8012eea:	e000      	b.n	8012eee <nk_panel_has_header+0x4a>
 8012eec:	2300      	movs	r3, #0
 8012eee:	60fb      	str	r3, [r7, #12]
    return active;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3714      	adds	r7, #20
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efc:	4770      	bx	lr
	...

08012f00 <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b087      	sub	sp, #28
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	460b      	mov	r3, r1
 8012f0a:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8012f0c:	7afb      	ldrb	r3, [r7, #11]
 8012f0e:	2b80      	cmp	r3, #128	; 0x80
 8012f10:	f000 809a 	beq.w	8013048 <nk_panel_get_padding+0x148>
 8012f14:	2b80      	cmp	r3, #128	; 0x80
 8012f16:	dc49      	bgt.n	8012fac <nk_panel_get_padding+0xac>
 8012f18:	2b20      	cmp	r3, #32
 8012f1a:	dc45      	bgt.n	8012fa8 <nk_panel_get_padding+0xa8>
 8012f1c:	2b02      	cmp	r3, #2
 8012f1e:	db45      	blt.n	8012fac <nk_panel_get_padding+0xac>
 8012f20:	3b02      	subs	r3, #2
 8012f22:	2b1e      	cmp	r3, #30
 8012f24:	d842      	bhi.n	8012fac <nk_panel_get_padding+0xac>
 8012f26:	a201      	add	r2, pc, #4	; (adr r2, 8012f2c <nk_panel_get_padding+0x2c>)
 8012f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f2c:	08012fc7 	.word	0x08012fc7
 8012f30:	08012fad 	.word	0x08012fad
 8012f34:	08012fe1 	.word	0x08012fe1
 8012f38:	08012fad 	.word	0x08012fad
 8012f3c:	08012fad 	.word	0x08012fad
 8012f40:	08012fad 	.word	0x08012fad
 8012f44:	08012fad 	.word	0x08012fad
 8012f48:	08012fad 	.word	0x08012fad
 8012f4c:	08012fad 	.word	0x08012fad
 8012f50:	08012fad 	.word	0x08012fad
 8012f54:	08012fad 	.word	0x08012fad
 8012f58:	08012fad 	.word	0x08012fad
 8012f5c:	08012fad 	.word	0x08012fad
 8012f60:	08012fad 	.word	0x08012fad
 8012f64:	08012ffb 	.word	0x08012ffb
 8012f68:	08012fad 	.word	0x08012fad
 8012f6c:	08012fad 	.word	0x08012fad
 8012f70:	08012fad 	.word	0x08012fad
 8012f74:	08012fad 	.word	0x08012fad
 8012f78:	08012fad 	.word	0x08012fad
 8012f7c:	08012fad 	.word	0x08012fad
 8012f80:	08012fad 	.word	0x08012fad
 8012f84:	08012fad 	.word	0x08012fad
 8012f88:	08012fad 	.word	0x08012fad
 8012f8c:	08012fad 	.word	0x08012fad
 8012f90:	08012fad 	.word	0x08012fad
 8012f94:	08012fad 	.word	0x08012fad
 8012f98:	08012fad 	.word	0x08012fad
 8012f9c:	08012fad 	.word	0x08012fad
 8012fa0:	08012fad 	.word	0x08012fad
 8012fa4:	08013015 	.word	0x08013015
 8012fa8:	2b40      	cmp	r3, #64	; 0x40
 8012faa:	d040      	beq.n	801302e <nk_panel_get_padding+0x12e>
    default:
    case NK_PANEL_WINDOW: return style->window.padding;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	f107 0310 	add.w	r3, r7, #16
 8012fb8:	f602 02ec 	addw	r2, r2, #2284	; 0x8ec
 8012fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fc4:	e04c      	b.n	8013060 <nk_panel_get_padding+0x160>
    case NK_PANEL_GROUP: return style->window.group_padding;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fcc:	461a      	mov	r2, r3
 8012fce:	f107 0310 	add.w	r3, r7, #16
 8012fd2:	f602 02f4 	addw	r2, r2, #2292	; 0x8f4
 8012fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fda:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fde:	e03f      	b.n	8013060 <nk_panel_get_padding+0x160>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	f107 0310 	add.w	r3, r7, #16
 8012fec:	f602 02fc 	addw	r2, r2, #2300	; 0x8fc
 8012ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ff4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ff8:	e032      	b.n	8013060 <nk_panel_get_padding+0x160>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013000:	461a      	mov	r2, r3
 8013002:	f107 0310 	add.w	r3, r7, #16
 8013006:	f602 120c 	addw	r2, r2, #2316	; 0x90c
 801300a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801300e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013012:	e025      	b.n	8013060 <nk_panel_get_padding+0x160>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801301a:	461a      	mov	r2, r3
 801301c:	f107 0310 	add.w	r3, r7, #16
 8013020:	f602 1204 	addw	r2, r2, #2308	; 0x904
 8013024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013028:	e883 0003 	stmia.w	r3, {r0, r1}
 801302c:	e018      	b.n	8013060 <nk_panel_get_padding+0x160>
    case NK_PANEL_MENU: return style->window.menu_padding;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013034:	461a      	mov	r2, r3
 8013036:	f107 0310 	add.w	r3, r7, #16
 801303a:	f602 1214 	addw	r2, r2, #2324	; 0x914
 801303e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013042:	e883 0003 	stmia.w	r3, {r0, r1}
 8013046:	e00b      	b.n	8013060 <nk_panel_get_padding+0x160>
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801304e:	461a      	mov	r2, r3
 8013050:	f107 0310 	add.w	r3, r7, #16
 8013054:	f602 1214 	addw	r2, r2, #2324	; 0x914
 8013058:	e892 0003 	ldmia.w	r2, {r0, r1}
 801305c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	ee07 2a10 	vmov	s14, r2
 8013068:	ee07 3a90 	vmov	s15, r3
 801306c:	eeb0 0a47 	vmov.f32	s0, s14
 8013070:	eef0 0a67 	vmov.f32	s1, s15
 8013074:	371c      	adds	r7, #28
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop

08013080 <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
 8013080:	b480      	push	{r7}
 8013082:	b085      	sub	sp, #20
 8013084:	af00      	add	r7, sp, #0
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	60b9      	str	r1, [r7, #8]
 801308a:	4613      	mov	r3, r2
 801308c:	71fb      	strb	r3, [r7, #7]
    if (flags & NK_WINDOW_BORDER) {
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	f003 0301 	and.w	r3, r3, #1
 8013094:	2b00      	cmp	r3, #0
 8013096:	f000 8080 	beq.w	801319a <nk_panel_get_border+0x11a>
        switch (type) {
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	2b80      	cmp	r3, #128	; 0x80
 801309e:	d075      	beq.n	801318c <nk_panel_get_border+0x10c>
 80130a0:	2b80      	cmp	r3, #128	; 0x80
 80130a2:	dc49      	bgt.n	8013138 <nk_panel_get_border+0xb8>
 80130a4:	2b20      	cmp	r3, #32
 80130a6:	dc45      	bgt.n	8013134 <nk_panel_get_border+0xb4>
 80130a8:	2b02      	cmp	r3, #2
 80130aa:	db45      	blt.n	8013138 <nk_panel_get_border+0xb8>
 80130ac:	3b02      	subs	r3, #2
 80130ae:	2b1e      	cmp	r3, #30
 80130b0:	d842      	bhi.n	8013138 <nk_panel_get_border+0xb8>
 80130b2:	a201      	add	r2, pc, #4	; (adr r2, 80130b8 <nk_panel_get_border+0x38>)
 80130b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130b8:	08013147 	.word	0x08013147
 80130bc:	08013139 	.word	0x08013139
 80130c0:	08013155 	.word	0x08013155
 80130c4:	08013139 	.word	0x08013139
 80130c8:	08013139 	.word	0x08013139
 80130cc:	08013139 	.word	0x08013139
 80130d0:	08013139 	.word	0x08013139
 80130d4:	08013139 	.word	0x08013139
 80130d8:	08013139 	.word	0x08013139
 80130dc:	08013139 	.word	0x08013139
 80130e0:	08013139 	.word	0x08013139
 80130e4:	08013139 	.word	0x08013139
 80130e8:	08013139 	.word	0x08013139
 80130ec:	08013139 	.word	0x08013139
 80130f0:	08013163 	.word	0x08013163
 80130f4:	08013139 	.word	0x08013139
 80130f8:	08013139 	.word	0x08013139
 80130fc:	08013139 	.word	0x08013139
 8013100:	08013139 	.word	0x08013139
 8013104:	08013139 	.word	0x08013139
 8013108:	08013139 	.word	0x08013139
 801310c:	08013139 	.word	0x08013139
 8013110:	08013139 	.word	0x08013139
 8013114:	08013139 	.word	0x08013139
 8013118:	08013139 	.word	0x08013139
 801311c:	08013139 	.word	0x08013139
 8013120:	08013139 	.word	0x08013139
 8013124:	08013139 	.word	0x08013139
 8013128:	08013139 	.word	0x08013139
 801312c:	08013139 	.word	0x08013139
 8013130:	08013171 	.word	0x08013171
 8013134:	2b40      	cmp	r3, #64	; 0x40
 8013136:	d022      	beq.n	801317e <nk_panel_get_border+0xfe>
        default:
        case NK_PANEL_WINDOW: return style->window.border;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801313e:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	e02b      	b.n	801319e <nk_panel_get_border+0x11e>
        case NK_PANEL_GROUP: return style->window.group_border;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801314c:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	e024      	b.n	801319e <nk_panel_get_border+0x11e>
        case NK_PANEL_POPUP: return style->window.popup_border;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801315a:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	e01d      	b.n	801319e <nk_panel_get_border+0x11e>
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013168:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	e016      	b.n	801319e <nk_panel_get_border+0x11e>
        case NK_PANEL_COMBO: return style->window.combo_border;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013176:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	e00f      	b.n	801319e <nk_panel_get_border+0x11e>
        case NK_PANEL_MENU: return style->window.menu_border;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013184:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	e008      	b.n	801319e <nk_panel_get_border+0x11e>
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013192:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	e001      	b.n	801319e <nk_panel_get_border+0x11e>
    }} else return 0;
 801319a:	f04f 0300 	mov.w	r3, #0
}
 801319e:	ee07 3a90 	vmov	s15, r3
 80131a2:	eeb0 0a67 	vmov.f32	s0, s15
 80131a6:	3714      	adds	r7, #20
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b085      	sub	sp, #20
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 80131bc:	78fb      	ldrb	r3, [r7, #3]
 80131be:	2b80      	cmp	r3, #128	; 0x80
 80131c0:	d076      	beq.n	80132b0 <nk_panel_get_border_color+0x100>
 80131c2:	2b80      	cmp	r3, #128	; 0x80
 80131c4:	dc4a      	bgt.n	801325c <nk_panel_get_border_color+0xac>
 80131c6:	2b20      	cmp	r3, #32
 80131c8:	dc46      	bgt.n	8013258 <nk_panel_get_border_color+0xa8>
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	db46      	blt.n	801325c <nk_panel_get_border_color+0xac>
 80131ce:	3b02      	subs	r3, #2
 80131d0:	2b1e      	cmp	r3, #30
 80131d2:	d843      	bhi.n	801325c <nk_panel_get_border_color+0xac>
 80131d4:	a201      	add	r2, pc, #4	; (adr r2, 80131dc <nk_panel_get_border_color+0x2c>)
 80131d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131da:	bf00      	nop
 80131dc:	0801326b 	.word	0x0801326b
 80131e0:	0801325d 	.word	0x0801325d
 80131e4:	08013279 	.word	0x08013279
 80131e8:	0801325d 	.word	0x0801325d
 80131ec:	0801325d 	.word	0x0801325d
 80131f0:	0801325d 	.word	0x0801325d
 80131f4:	0801325d 	.word	0x0801325d
 80131f8:	0801325d 	.word	0x0801325d
 80131fc:	0801325d 	.word	0x0801325d
 8013200:	0801325d 	.word	0x0801325d
 8013204:	0801325d 	.word	0x0801325d
 8013208:	0801325d 	.word	0x0801325d
 801320c:	0801325d 	.word	0x0801325d
 8013210:	0801325d 	.word	0x0801325d
 8013214:	08013287 	.word	0x08013287
 8013218:	0801325d 	.word	0x0801325d
 801321c:	0801325d 	.word	0x0801325d
 8013220:	0801325d 	.word	0x0801325d
 8013224:	0801325d 	.word	0x0801325d
 8013228:	0801325d 	.word	0x0801325d
 801322c:	0801325d 	.word	0x0801325d
 8013230:	0801325d 	.word	0x0801325d
 8013234:	0801325d 	.word	0x0801325d
 8013238:	0801325d 	.word	0x0801325d
 801323c:	0801325d 	.word	0x0801325d
 8013240:	0801325d 	.word	0x0801325d
 8013244:	0801325d 	.word	0x0801325d
 8013248:	0801325d 	.word	0x0801325d
 801324c:	0801325d 	.word	0x0801325d
 8013250:	0801325d 	.word	0x0801325d
 8013254:	08013295 	.word	0x08013295
 8013258:	2b40      	cmp	r3, #64	; 0x40
 801325a:	d022      	beq.n	80132a2 <nk_panel_get_border_color+0xf2>
    default:
    case NK_PANEL_WINDOW: return style->window.border_color;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013262:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 8013266:	60fb      	str	r3, [r7, #12]
 8013268:	e028      	b.n	80132bc <nk_panel_get_border_color+0x10c>
    case NK_PANEL_GROUP: return style->window.group_border_color;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013270:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8013274:	60fb      	str	r3, [r7, #12]
 8013276:	e021      	b.n	80132bc <nk_panel_get_border_color+0x10c>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801327e:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 8013282:	60fb      	str	r3, [r7, #12]
 8013284:	e01a      	b.n	80132bc <nk_panel_get_border_color+0x10c>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801328c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8013290:	60fb      	str	r3, [r7, #12]
 8013292:	e013      	b.n	80132bc <nk_panel_get_border_color+0x10c>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801329a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 801329e:	60fb      	str	r3, [r7, #12]
 80132a0:	e00c      	b.n	80132bc <nk_panel_get_border_color+0x10c>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80132a8:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 80132ac:	60fb      	str	r3, [r7, #12]
 80132ae:	e005      	b.n	80132bc <nk_panel_get_border_color+0x10c>
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80132b6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 80132ba:	60fb      	str	r3, [r7, #12]
}
 80132bc:	2300      	movs	r3, #0
 80132be:	7b3a      	ldrb	r2, [r7, #12]
 80132c0:	f362 0307 	bfi	r3, r2, #0, #8
 80132c4:	7b7a      	ldrb	r2, [r7, #13]
 80132c6:	f362 230f 	bfi	r3, r2, #8, #8
 80132ca:	7bba      	ldrb	r2, [r7, #14]
 80132cc:	f362 4317 	bfi	r3, r2, #16, #8
 80132d0:	7bfa      	ldrb	r2, [r7, #15]
 80132d2:	f362 631f 	bfi	r3, r2, #24, #8
 80132d6:	4618      	mov	r0, r3
 80132d8:	3714      	adds	r7, #20
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr
 80132e2:	bf00      	nop

080132e4 <nk_panel_is_sub>:
NK_LIB nk_bool
nk_panel_is_sub(enum nk_panel_type type)
{
 80132e4:	b480      	push	{r7}
 80132e6:	b083      	sub	sp, #12
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	4603      	mov	r3, r0
 80132ec:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_SUB)?1:0;
 80132ee:	79fb      	ldrb	r3, [r7, #7]
 80132f0:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	bf14      	ite	ne
 80132f8:	2301      	movne	r3, #1
 80132fa:	2300      	moveq	r3, #0
 80132fc:	b2db      	uxtb	r3, r3
}
 80132fe:	4618      	mov	r0, r3
 8013300:	370c      	adds	r7, #12
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr

0801330a <nk_panel_is_nonblock>:
NK_LIB nk_bool
nk_panel_is_nonblock(enum nk_panel_type type)
{
 801330a:	b480      	push	{r7}
 801330c:	b083      	sub	sp, #12
 801330e:	af00      	add	r7, sp, #0
 8013310:	4603      	mov	r3, r0
 8013312:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
 8013314:	79fb      	ldrb	r3, [r7, #7]
 8013316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801331a:	2b00      	cmp	r3, #0
 801331c:	bf14      	ite	ne
 801331e:	2301      	movne	r3, #1
 8013320:	2300      	moveq	r3, #0
 8013322:	b2db      	uxtb	r3, r3
}
 8013324:	4618      	mov	r0, r3
 8013326:	370c      	adds	r7, #12
 8013328:	46bd      	mov	sp, r7
 801332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332e:	4770      	bx	lr

08013330 <nk_panel_begin>:
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 8013330:	b590      	push	{r4, r7, lr}
 8013332:	b0b7      	sub	sp, #220	; 0xdc
 8013334:	af04      	add	r7, sp, #16
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	4613      	mov	r3, r2
 801333c:	71fb      	strb	r3, [r7, #7]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d105      	bne.n	8013350 <nk_panel_begin+0x20>
 8013344:	4b7e      	ldr	r3, [pc, #504]	; (8013540 <nk_panel_begin+0x210>)
 8013346:	4a7f      	ldr	r2, [pc, #508]	; (8013544 <nk_panel_begin+0x214>)
 8013348:	2163      	movs	r1, #99	; 0x63
 801334a:	487f      	ldr	r0, [pc, #508]	; (8013548 <nk_panel_begin+0x218>)
 801334c:	f009 fa86 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013356:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801335a:	2b00      	cmp	r3, #0
 801335c:	d105      	bne.n	801336a <nk_panel_begin+0x3a>
 801335e:	4b7b      	ldr	r3, [pc, #492]	; (801354c <nk_panel_begin+0x21c>)
 8013360:	4a78      	ldr	r2, [pc, #480]	; (8013544 <nk_panel_begin+0x214>)
 8013362:	2164      	movs	r1, #100	; 0x64
 8013364:	4878      	ldr	r0, [pc, #480]	; (8013548 <nk_panel_begin+0x218>)
 8013366:	f009 fa79 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013370:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013378:	2b00      	cmp	r3, #0
 801337a:	d105      	bne.n	8013388 <nk_panel_begin+0x58>
 801337c:	4b74      	ldr	r3, [pc, #464]	; (8013550 <nk_panel_begin+0x220>)
 801337e:	4a71      	ldr	r2, [pc, #452]	; (8013544 <nk_panel_begin+0x214>)
 8013380:	2165      	movs	r1, #101	; 0x65
 8013382:	4871      	ldr	r0, [pc, #452]	; (8013548 <nk_panel_begin+0x218>)
 8013384:	f009 fa6a 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00f      	beq.n	80133ae <nk_panel_begin+0x7e>
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013394:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013398:	2b00      	cmp	r3, #0
 801339a:	d008      	beq.n	80133ae <nk_panel_begin+0x7e>
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80133a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80133a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d102      	bne.n	80133b4 <nk_panel_begin+0x84>
 80133ae:	2300      	movs	r3, #0
 80133b0:	f000 bef7 	b.w	80141a2 <nk_panel_begin+0xe72>
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80133ba:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80133be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133c2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80133c6:	4618      	mov	r0, r3
 80133c8:	f007 fd98 	bl	801aefc <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80133d2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80133d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d109      	bne.n	80133f4 <nk_panel_begin+0xc4>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80133e6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80133ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d017      	beq.n	8013424 <nk_panel_begin+0xf4>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80133fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80133fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013402:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8013406:	4618      	mov	r0, r3
 8013408:	f007 fd78 	bl	801aefc <nk_zero>
        ctx->current->layout->type = panel_type;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013412:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801341a:	79fa      	ldrb	r2, [r7, #7]
 801341c:	701a      	strb	r2, [r3, #0]
        return 0;
 801341e:	2300      	movs	r3, #0
 8013420:	f000 bebf 	b.w	80141a2 <nk_panel_begin+0xe72>
    }
    /* pull state into local stack */
    style = &ctx->style;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801342a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    font = style->font;
 801342e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    win = ctx->current;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801343e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    layout = win->layout;
 8013446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801344a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801344e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    out = &win->buffer;
 8013452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013456:	3364      	adds	r3, #100	; 0x64
 8013458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 801345c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013466:	2b00      	cmp	r3, #0
 8013468:	d101      	bne.n	801346e <nk_panel_begin+0x13e>
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	e000      	b.n	8013470 <nk_panel_begin+0x140>
 801346e:	2300      	movs	r3, #0
 8013470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 8013474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801347c:	461a      	mov	r2, r3
 801347e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013482:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 8013486:	e892 0003 	ldmia.w	r2, {r0, r1}
 801348a:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, panel_type);
 801348e:	79fb      	ldrb	r3, [r7, #7]
 8013490:	4619      	mov	r1, r3
 8013492:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8013496:	f7ff fd33 	bl	8012f00 <nk_panel_get_padding>
 801349a:	eeb0 7a40 	vmov.f32	s14, s0
 801349e:	eef0 7a60 	vmov.f32	s15, s1
 80134a2:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 80134a6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 80134aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134b0:	f003 0302 	and.w	r3, r3, #2
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f000 80bf 	beq.w	8013638 <nk_panel_begin+0x308>
 80134ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	f040 80b7 	bne.w	8013638 <nk_panel_begin+0x308>
        unsigned int left_mouse_clicked;
        int left_mouse_click_in_cursor;

        /* calculate draggable window space */
        struct nk_rect header;
        header.x = win->bounds.x;
 80134ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134d0:	67bb      	str	r3, [r7, #120]	; 0x78
        header.y = win->bounds.y;
 80134d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134d8:	67fb      	str	r3, [r7, #124]	; 0x7c
        header.w = win->bounds.w;
 80134da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (nk_panel_has_header(win->flags, title)) {
 80134e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134ea:	68b9      	ldr	r1, [r7, #8]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff fcd9 	bl	8012ea4 <nk_panel_has_header>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d02d      	beq.n	8013554 <nk_panel_begin+0x224>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 80134f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80134fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8013500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013508:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801350c:	edd3 7a00 	vldr	s15, [r3]
 8013510:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013518:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            header.h += 2.0f * style->window.header.label_padding.y;
 801351c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8013520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013528:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801352c:	edd3 7a00 	vldr	s15, [r3]
 8013530:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013538:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 801353c:	e00e      	b.n	801355c <nk_panel_begin+0x22c>
 801353e:	bf00      	nop
 8013540:	08020488 	.word	0x08020488
 8013544:	080216cc 	.word	0x080216cc
 8013548:	0802048c 	.word	0x0802048c
 801354c:	080204a8 	.word	0x080204a8
 8013550:	080204b8 	.word	0x080204b8
        } else header.h = panel_padding.y;
 8013554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* window movement by dragging */
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 801355c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013560:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 8013568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801356c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8013574:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8013578:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801357c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8013580:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8013584:	2201      	movs	r2, #1
 8013586:	eeb0 0a46 	vmov.f32	s0, s12
 801358a:	eef0 0a66 	vmov.f32	s1, s13
 801358e:	eeb0 1a47 	vmov.f32	s2, s14
 8013592:	eef0 1a67 	vmov.f32	s3, s15
 8013596:	2100      	movs	r1, #0
 8013598:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801359c:	f7fd fee2 	bl	8011364 <nk_input_has_mouse_click_down_in_rect>
 80135a0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            NK_BUTTON_LEFT, header, nk_true);
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80135a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d045      	beq.n	8013638 <nk_panel_begin+0x308>
 80135ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d041      	beq.n	8013638 <nk_panel_begin+0x308>
 80135b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d13d      	bne.n	8013638 <nk_panel_begin+0x308>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 80135bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80135c0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80135c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80135c8:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80135cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80135d4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 80135d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80135dc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80135e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80135e4:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80135e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80135f0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 80135f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80135f8:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 80135fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013600:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8013604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801360c:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 8013610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013614:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8013618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801361c:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8013620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013628:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        }
    }

    /* setup panel */
    layout->type = panel_type;
 8013638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801363c:	79fa      	ldrb	r2, [r7, #7]
 801363e:	701a      	strb	r2, [r3, #0]
    layout->flags = win->flags;
 8013640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801364a:	605a      	str	r2, [r3, #4]
    layout->bounds = win->bounds;
 801364c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013654:	f102 0408 	add.w	r4, r2, #8
 8013658:	334c      	adds	r3, #76	; 0x4c
 801365a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801365c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 8013660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013664:	ed93 7a02 	vldr	s14, [r3, #8]
 8013668:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801366c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013674:	edc3 7a02 	vstr	s15, [r3, #8]
    layout->bounds.w -= 2*panel_padding.x;
 8013678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801367c:	ed93 7a04 	vldr	s14, [r3, #16]
 8013680:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8013684:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013688:	ee77 7a67 	vsub.f32	s15, s14, s15
 801368c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013690:	edc3 7a04 	vstr	s15, [r3, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 8013694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801369a:	f003 0301 	and.w	r3, r3, #1
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d03b      	beq.n	801371a <nk_panel_begin+0x3ea>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 80136a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80136a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136a8:	79fa      	ldrb	r2, [r7, #7]
 80136aa:	4619      	mov	r1, r3
 80136ac:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80136b0:	f7ff fce6 	bl	8013080 <nk_panel_get_border>
 80136b4:	eef0 7a40 	vmov.f32	s15, s0
 80136b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 80136c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136c4:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 80136c8:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80136cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80136d0:	ed93 6a02 	vldr	s12, [r3, #8]
 80136d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80136d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80136dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80136e0:	eeb0 2a65 	vmov.f32	s4, s11
 80136e4:	eeb0 0a46 	vmov.f32	s0, s12
 80136e8:	eef0 0a66 	vmov.f32	s1, s13
 80136ec:	eeb0 1a47 	vmov.f32	s2, s14
 80136f0:	eef0 1a67 	vmov.f32	s3, s15
 80136f4:	f7fe ffca 	bl	801268c <nk_shrink_rect>
 80136f8:	eeb0 6a40 	vmov.f32	s12, s0
 80136fc:	eef0 6a60 	vmov.f32	s13, s1
 8013700:	eeb0 7a41 	vmov.f32	s14, s2
 8013704:	eef0 7a61 	vmov.f32	s15, s3
 8013708:	ed84 6a02 	vstr	s12, [r4, #8]
 801370c:	edc4 6a03 	vstr	s13, [r4, #12]
 8013710:	ed84 7a04 	vstr	s14, [r4, #16]
 8013714:	edc4 7a05 	vstr	s15, [r4, #20]
 8013718:	e004      	b.n	8013724 <nk_panel_begin+0x3f4>
    } else layout->border = 0;
 801371a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801371e:	f04f 0200 	mov.w	r2, #0
 8013722:	635a      	str	r2, [r3, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 8013724:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013728:	68da      	ldr	r2, [r3, #12]
 801372a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801372e:	625a      	str	r2, [r3, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 8013730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013734:	689a      	ldr	r2, [r3, #8]
 8013736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801373a:	621a      	str	r2, [r3, #32]
    layout->max_x = 0;
 801373c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013740:	f04f 0200 	mov.w	r2, #0
 8013744:	629a      	str	r2, [r3, #40]	; 0x28
    layout->header_height = 0;
 8013746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801374a:	f04f 0200 	mov.w	r2, #0
 801374e:	631a      	str	r2, [r3, #48]	; 0x30
    layout->footer_height = 0;
 8013750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013754:	f04f 0200 	mov.w	r2, #0
 8013758:	62da      	str	r2, [r3, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f7fd ffac 	bl	80116b8 <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 8013760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013764:	2200      	movs	r2, #0
 8013766:	669a      	str	r2, [r3, #104]	; 0x68
    layout->row.columns = 0;
 8013768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801376c:	2200      	movs	r2, #0
 801376e:	675a      	str	r2, [r3, #116]	; 0x74
    layout->row.ratio = 0;
 8013770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013774:	2200      	movs	r2, #0
 8013776:	679a      	str	r2, [r3, #120]	; 0x78
    layout->row.item_width = 0;
 8013778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801377c:	f04f 0200 	mov.w	r2, #0
 8013780:	67da      	str	r2, [r3, #124]	; 0x7c
    layout->row.tree_depth = 0;
 8013782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013786:	2200      	movs	r2, #0
 8013788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 801378c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013794:	66da      	str	r2, [r3, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 8013796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801379a:	2201      	movs	r2, #1
 801379c:	639a      	str	r2, [r3, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 801379e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80137a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137a4:	f003 0320 	and.w	r3, r3, #32
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10b      	bne.n	80137c4 <nk_panel_begin+0x494>
        layout->bounds.w -= scrollbar_size.x;
 80137ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80137b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80137b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80137b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80137c0:	edc3 7a04 	vstr	s15, [r3, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 80137c4:	79fb      	ldrb	r3, [r7, #7]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff fd9f 	bl	801330a <nk_panel_is_nonblock>
 80137cc:	4603      	mov	r3, r0
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d125      	bne.n	801381e <nk_panel_begin+0x4ee>
        layout->footer_height = 0;
 80137d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80137d6:	f04f 0200 	mov.w	r2, #0
 80137da:	62da      	str	r2, [r3, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 80137dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80137e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137e2:	f003 0320 	and.w	r3, r3, #32
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d006      	beq.n	80137f8 <nk_panel_begin+0x4c8>
 80137ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80137ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137f0:	f003 0304 	and.w	r3, r3, #4
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d004      	beq.n	8013802 <nk_panel_begin+0x4d2>
            layout->footer_height = scrollbar_size.y;
 80137f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80137fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013800:	62da      	str	r2, [r3, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 8013802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013806:	ed93 7a05 	vldr	s14, [r3, #20]
 801380a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801380e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8013812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801381a:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 801381e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013824:	68b9      	ldr	r1, [r7, #8]
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff fb3c 	bl	8012ea4 <nk_panel_has_header>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	f000 83bc 	beq.w	8013fac <nk_panel_begin+0xc7c>
    {
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;
 8013834:	2300      	movs	r3, #0
 8013836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /* calculate header bounds */
        header.x = win->bounds.x;
 801383a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013840:	65bb      	str	r3, [r7, #88]	; 0x58
        header.y = win->bounds.y;
 8013842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013848:	65fb      	str	r3, [r7, #92]	; 0x5c
        header.w = win->bounds.w;
 801384a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013850:	663b      	str	r3, [r7, #96]	; 0x60
        header.h = font->height + 2.0f * style->window.header.padding.y;
 8013852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013856:	ed93 7a01 	vldr	s14, [r3, #4]
 801385a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801385e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013862:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8013866:	edd3 7a00 	vldr	s15, [r3]
 801386a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013872:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        header.h += (2.0f * style->window.header.label_padding.y);
 8013876:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801387a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013882:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8013886:	edd3 7a00 	vldr	s15, [r3]
 801388a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801388e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013892:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        /* shrink panel by header */
        layout->header_height = header.h;
 8013896:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801389c:	631a      	str	r2, [r3, #48]	; 0x30
        layout->bounds.y += header.h;
 801389e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80138a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80138a6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80138aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80138b2:	edc3 7a03 	vstr	s15, [r3, #12]
        layout->bounds.h -= header.h;
 80138b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80138ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80138be:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80138c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80138ca:	edc3 7a05 	vstr	s15, [r3, #20]
        layout->at_y += header.h;
 80138ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80138d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80138d6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80138da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80138e2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80138ec:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80138f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d112      	bne.n	801391e <nk_panel_begin+0x5ee>
            background = &style->window.header.active;
 80138f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80138fc:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8013900:	3304      	adds	r3, #4
 8013902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_active;
 8013906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801390a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801390e:	461a      	mov	r2, r3
 8013910:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013914:	f602 023b 	addw	r2, r2, #2107	; 0x83b
 8013918:	6810      	ldr	r0, [r2, #0]
 801391a:	6018      	str	r0, [r3, #0]
 801391c:	e03b      	b.n	8013996 <nk_panel_begin+0x666>
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8013924:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8013928:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801392c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8013930:	eeb0 0a46 	vmov.f32	s0, s12
 8013934:	eef0 0a66 	vmov.f32	s1, s13
 8013938:	eeb0 1a47 	vmov.f32	s2, s14
 801393c:	eef0 1a67 	vmov.f32	s3, s15
 8013940:	4618      	mov	r0, r3
 8013942:	f7fd fd56 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 8013946:	4603      	mov	r3, r0
 8013948:	2b00      	cmp	r3, #0
 801394a:	d012      	beq.n	8013972 <nk_panel_begin+0x642>
            background = &style->window.header.hover;
 801394c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013950:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8013954:	3308      	adds	r3, #8
 8013956:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_hover;
 801395a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801395e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013962:	461a      	mov	r2, r3
 8013964:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013968:	f602 0237 	addw	r2, r2, #2103	; 0x837
 801396c:	6810      	ldr	r0, [r2, #0]
 801396e:	6018      	str	r0, [r3, #0]
 8013970:	e011      	b.n	8013996 <nk_panel_begin+0x666>
        } else {
            background = &style->window.header.normal;
 8013972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013976:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801397a:	330c      	adds	r3, #12
 801397c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_normal;
 8013980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013988:	461a      	mov	r2, r3
 801398a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801398e:	f602 0233 	addw	r2, r2, #2099	; 0x833
 8013992:	6810      	ldr	r0, [r2, #0]
 8013994:	6018      	str	r0, [r3, #0]
        }

        /* draw header background */
        header.h += 1.0f;
 8013996:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801399a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801399e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139a2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        switch(background->type) {
 80139a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	2b02      	cmp	r3, #2
 80139ae:	d02a      	beq.n	8013a06 <nk_panel_begin+0x6d6>
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	dc6b      	bgt.n	8013a8c <nk_panel_begin+0x75c>
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d04b      	beq.n	8013a50 <nk_panel_begin+0x720>
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d167      	bne.n	8013a8c <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_IMAGE:
                text.background = nk_rgba(0,0,0,0);
 80139bc:	2300      	movs	r3, #0
 80139be:	2200      	movs	r2, #0
 80139c0:	2100      	movs	r1, #0
 80139c2:	2000      	movs	r0, #0
 80139c4:	f7fa f9c5 	bl	800dd52 <nk_rgba>
 80139c8:	4603      	mov	r3, r0
 80139ca:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 80139cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80139d0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80139d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80139d8:	3304      	adds	r3, #4
 80139da:	4ad9      	ldr	r2, [pc, #868]	; (8013d40 <nk_panel_begin+0xa10>)
 80139dc:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80139e0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80139e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80139e8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80139ec:	6812      	ldr	r2, [r2, #0]
 80139ee:	4619      	mov	r1, r3
 80139f0:	eeb0 0a46 	vmov.f32	s0, s12
 80139f4:	eef0 0a66 	vmov.f32	s1, s13
 80139f8:	eeb0 1a47 	vmov.f32	s2, s14
 80139fc:	eef0 1a67 	vmov.f32	s3, s15
 8013a00:	f7fc fc10 	bl	8010224 <nk_draw_image>
                break;
 8013a04:	e042      	b.n	8013a8c <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_NINE_SLICE:
                text.background = nk_rgba(0, 0, 0, 0);
 8013a06:	2300      	movs	r3, #0
 8013a08:	2200      	movs	r2, #0
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	f7fa f9a0 	bl	800dd52 <nk_rgba>
 8013a12:	4603      	mov	r3, r0
 8013a14:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 8013a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013a1a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8013a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013a22:	3304      	adds	r3, #4
 8013a24:	4ac6      	ldr	r2, [pc, #792]	; (8013d40 <nk_panel_begin+0xa10>)
 8013a26:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8013a2a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8013a2e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013a32:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8013a36:	6812      	ldr	r2, [r2, #0]
 8013a38:	4619      	mov	r1, r3
 8013a3a:	eeb0 0a46 	vmov.f32	s0, s12
 8013a3e:	eef0 0a66 	vmov.f32	s1, s13
 8013a42:	eeb0 1a47 	vmov.f32	s2, s14
 8013a46:	eef0 1a67 	vmov.f32	s3, s15
 8013a4a:	f7fc fcdd 	bl	8010408 <nk_draw_nine_slice>
                break;
 8013a4e:	e01d      	b.n	8013a8c <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_COLOR:
                text.background = background->data.color;
 8013a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	673b      	str	r3, [r7, #112]	; 0x70
                nk_fill_rect(out, header, 0, background->data.color);
 8013a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013a5c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8013a60:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8013a64:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013a68:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8013a6c:	6859      	ldr	r1, [r3, #4]
 8013a6e:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8013d44 <nk_panel_begin+0xa14>
 8013a72:	eeb0 0a46 	vmov.f32	s0, s12
 8013a76:	eef0 0a66 	vmov.f32	s1, s13
 8013a7a:	eeb0 1a47 	vmov.f32	s2, s14
 8013a7e:	eef0 1a67 	vmov.f32	s3, s15
 8013a82:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8013a86:	f7fc f873 	bl	800fb70 <nk_fill_rect>
                break;
 8013a8a:	bf00      	nop
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 8013a8c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013a90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a98:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8013a9c:	edd3 7a00 	vldr	s15, [r3]
 8013aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013aa4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 8013aa8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8013aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ab4:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8013ab8:	edd3 7a00 	vldr	s15, [r3]
 8013abc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ac4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        button.w = button.h;
 8013ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013aca:	653b      	str	r3, [r7, #80]	; 0x50
        if (win->flags & NK_WINDOW_CLOSABLE) {
 8013acc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ad2:	f003 0308 	and.w	r3, r3, #8
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f000 80ad 	beq.w	8013c36 <nk_panel_begin+0x906>
            nk_flags ws = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	647b      	str	r3, [r7, #68]	; 0x44
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8013ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ae8:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d132      	bne.n	8013b56 <nk_panel_begin+0x826>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 8013af0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013af4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013afc:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8013b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b08:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013b0c:	edd3 7a00 	vldr	s15, [r3]
 8013b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b18:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8013b1c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013b20:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8013b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b2c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013b30:	edd3 7a00 	vldr	s15, [r3]
 8013b34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b40:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013b44:	edd3 7a00 	vldr	s15, [r3]
 8013b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b50:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8013b54:	e029      	b.n	8013baa <nk_panel_begin+0x87a>
            } else {
                button.x = header.x + style->window.header.padding.x;
 8013b56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b62:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013b66:	edd3 7a00 	vldr	s15, [r3]
 8013b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b6e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8013b72:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013b76:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8013b7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b82:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013b86:	edd3 7a00 	vldr	s15, [r3]
 8013b8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b96:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013b9a:	edd3 7a00 	vldr	s15, [r3]
 8013b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ba6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8013baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013bae:	f103 0164 	add.w	r1, r3, #100	; 0x64
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 8013bb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bba:	f893 4830 	ldrb.w	r4, [r3, #2096]	; 0x830
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8013bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013bc2:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8013bc6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013bca:	6812      	ldr	r2, [r2, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8013bcc:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8013bd0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8013bd4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013bd8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013bdc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8013be0:	9202      	str	r2, [sp, #8]
 8013be2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013be6:	9201      	str	r2, [sp, #4]
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	2300      	movs	r3, #0
 8013bec:	4622      	mov	r2, r4
 8013bee:	eeb0 0a46 	vmov.f32	s0, s12
 8013bf2:	eef0 0a66 	vmov.f32	s1, s13
 8013bf6:	eeb0 1a47 	vmov.f32	s2, s14
 8013bfa:	eef0 1a67 	vmov.f32	s3, s15
 8013bfe:	f7f9 ff13 	bl	800da28 <nk_do_button_symbol>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d016      	beq.n	8013c36 <nk_panel_begin+0x906>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8013c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d10f      	bne.n	8013c36 <nk_panel_begin+0x906>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
 8013c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8013c20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013c24:	605a      	str	r2, [r3, #4]
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 8013c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8013c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013c34:	605a      	str	r2, [r3, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 8013c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c3c:	f003 0310 	and.w	r3, r3, #16
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f000 80c9 	beq.w	8013dd8 <nk_panel_begin+0xaa8>
            nk_flags ws = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	643b      	str	r3, [r7, #64]	; 0x40
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8013c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c52:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8013c56:	2b01      	cmp	r3, #1
 8013c58:	d141      	bne.n	8013cde <nk_panel_begin+0x9ae>
                button.x = (header.w + header.x) - button.w;
 8013c5a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013c5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c66:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8013c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c6e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 8013c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c78:	f003 0308 	and.w	r3, r3, #8
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d11b      	bne.n	8013cb8 <nk_panel_begin+0x988>
                    button.x -= style->window.header.padding.x;
 8013c80:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c8c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013c90:	edd3 7a00 	vldr	s15, [r3]
 8013c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c98:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    header.w -= style->window.header.padding.x;
 8013c9c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ca8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013cac:	edd3 7a00 	vldr	s15, [r3]
 8013cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cb4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
                }
                header.w -= button.w + style->window.header.spacing.x;
 8013cb8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013cbc:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8013cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cc8:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013ccc:	edd3 7a00 	vldr	s15, [r3]
 8013cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cd8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8013cdc:	e01d      	b.n	8013d1a <nk_panel_begin+0x9ea>
            } else {
                button.x = header.x;
 8013cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ce0:	64bb      	str	r3, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8013ce2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013ce6:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8013cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cf2:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013cf6:	edd3 7a00 	vldr	s15, [r3]
 8013cfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d06:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013d0a:	edd3 7a00 	vldr	s15, [r3]
 8013d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d16:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8013d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013d1e:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8013d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d00b      	beq.n	8013d48 <nk_panel_begin+0xa18>
 8013d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d38:	f893 2832 	ldrb.w	r2, [r3, #2098]	; 0x832
 8013d3c:	e00a      	b.n	8013d54 <nk_panel_begin+0xa24>
 8013d3e:	bf00      	nop
 8013d40:	080216c8 	.word	0x080216c8
 8013d44:	00000000 	.word	0x00000000
 8013d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d50:	f893 2831 	ldrb.w	r2, [r3, #2097]	; 0x831
 8013d54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d58:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8013d5c:	3318      	adds	r3, #24
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8013d5e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8013d62:	6809      	ldr	r1, [r1, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8013d64:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8013d68:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8013d6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013d70:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013d74:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8013d78:	9102      	str	r1, [sp, #8]
 8013d7a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8013d7e:	9101      	str	r1, [sp, #4]
 8013d80:	9300      	str	r3, [sp, #0]
 8013d82:	2300      	movs	r3, #0
 8013d84:	eeb0 0a46 	vmov.f32	s0, s12
 8013d88:	eef0 0a66 	vmov.f32	s1, s13
 8013d8c:	eeb0 1a47 	vmov.f32	s2, s14
 8013d90:	eef0 1a67 	vmov.f32	s3, s15
 8013d94:	4621      	mov	r1, r4
 8013d96:	f7f9 fe47 	bl	800da28 <nk_do_button_symbol>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d01b      	beq.n	8013dd8 <nk_panel_begin+0xaa8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8013da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d114      	bne.n	8013dd8 <nk_panel_begin+0xaa8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8013dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d005      	beq.n	8013dc8 <nk_panel_begin+0xa98>
 8013dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013dc6:	e004      	b.n	8013dd2 <nk_panel_begin+0xaa2>
                    layout->flags | NK_WINDOW_MINIMIZED;
 8013dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013dcc:	685b      	ldr	r3, [r3, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8013dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8013dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013dd6:	6053      	str	r3, [r2, #4]
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 8013dd8:	68b8      	ldr	r0, [r7, #8]
 8013dda:	f007 f8ad 	bl	801af38 <nk_strlen>
 8013dde:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        struct nk_rect label = {0,0,0,0};
 8013de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013de6:	2200      	movs	r2, #0
 8013de8:	601a      	str	r2, [r3, #0]
 8013dea:	605a      	str	r2, [r3, #4]
 8013dec:	609a      	str	r2, [r3, #8]
 8013dee:	60da      	str	r2, [r3, #12]
        float t = font->width(font->userdata, font->height, title, text_len);
 8013df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8013dfa:	edd2 7a01 	vldr	s15, [r2, #4]
 8013dfe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013e02:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013e06:	68b9      	ldr	r1, [r7, #8]
 8013e08:	eeb0 0a67 	vmov.f32	s0, s15
 8013e0c:	6800      	ldr	r0, [r0, #0]
 8013e0e:	4798      	blx	r3
 8013e10:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        text.padding = nk_vec2(0,0);
 8013e14:	ed5f 0a35 	vldr	s1, [pc, #-212]	; 8013d44 <nk_panel_begin+0xa14>
 8013e18:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 8013d44 <nk_panel_begin+0xa14>
 8013e1c:	f7fe fcb6 	bl	801278c <nk_vec2>
 8013e20:	eeb0 7a40 	vmov.f32	s14, s0
 8013e24:	eef0 7a60 	vmov.f32	s15, s1
 8013e28:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8013e2c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        label.x = header.x + style->window.header.padding.x;
 8013e30:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e3c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8013e40:	edd3 7a00 	vldr	s15, [r3]
 8013e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.x += style->window.header.label_padding.x;
 8013e4c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8013e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e58:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8013e5c:	edd3 7a00 	vldr	s15, [r3]
 8013e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e64:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.y = header.y + style->window.header.label_padding.y;
 8013e68:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e74:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8013e78:	edd3 7a00 	vldr	s15, [r3]
 8013e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e80:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        label.h = font->height + 2 * style->window.header.label_padding.y;
 8013e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013e88:	ed93 7a01 	vldr	s14, [r3, #4]
 8013e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e94:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8013e98:	edd3 7a00 	vldr	s15, [r3]
 8013e9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ea4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.w = t + 2 * style->window.header.spacing.x;
 8013ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013eb0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8013eb4:	edd3 7a00 	vldr	s15, [r3]
 8013eb8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8013ebc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8013ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ec4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 8013ec8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013ecc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8013ed0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013ed4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013ed8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013edc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee8:	d50a      	bpl.n	8013f00 <nk_panel_begin+0xbd0>
 8013eea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef6:	bf4c      	ite	mi
 8013ef8:	2301      	movmi	r3, #1
 8013efa:	2300      	movpl	r3, #0
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	e011      	b.n	8013f24 <nk_panel_begin+0xbf4>
 8013f00:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013f04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013f08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1c:	bf4c      	ite	mi
 8013f1e:	2301      	movmi	r3, #1
 8013f20:	2300      	movpl	r3, #0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d002      	beq.n	8013f2e <nk_panel_begin+0xbfe>
 8013f28:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8013d44 <nk_panel_begin+0xa14>
 8013f2c:	e01d      	b.n	8013f6a <nk_panel_begin+0xc3a>
 8013f2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013f32:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8013f36:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013f3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013f3e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013f42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	d502      	bpl.n	8013f56 <nk_panel_begin+0xc26>
 8013f50:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013f54:	e009      	b.n	8013f6a <nk_panel_begin+0xc3a>
 8013f56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013f5a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f6a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 8013f6e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8013f72:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8013f76:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8013f7a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013f86:	9301      	str	r3, [sp, #4]
 8013f88:	2311      	movs	r3, #17
 8013f8a:	9300      	str	r3, [sp, #0]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013f92:	68b9      	ldr	r1, [r7, #8]
 8013f94:	eeb0 0a46 	vmov.f32	s0, s12
 8013f98:	eef0 0a66 	vmov.f32	s1, s13
 8013f9c:	eeb0 1a47 	vmov.f32	s2, s14
 8013fa0:	eef0 1a67 	vmov.f32	s3, s15
 8013fa4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8013fa8:	f005 fdee 	bl	8019b88 <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 8013fac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	f040 808d 	bne.w	80140d6 <nk_panel_begin+0xda6>
 8013fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	f040 8085 	bne.w	80140d6 <nk_panel_begin+0xda6>
        struct nk_rect body;
        body.x = win->bounds.x;
 8013fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fd2:	623b      	str	r3, [r7, #32]
        body.w = win->bounds.w;
 8013fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fda:	62bb      	str	r3, [r7, #40]	; 0x28
        body.y = (win->bounds.y + layout->header_height);
 8013fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013fe0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8013fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013fe8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8013fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ff0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        body.h = (win->bounds.h - layout->header_height);
 8013ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013ff8:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8013ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014000:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8014004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014008:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        switch(style->window.fixed_background.type) {
 801400c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014014:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8014018:	2b02      	cmp	r3, #2
 801401a:	d022      	beq.n	8014062 <nk_panel_begin+0xd32>
 801401c:	2b02      	cmp	r3, #2
 801401e:	dc5a      	bgt.n	80140d6 <nk_panel_begin+0xda6>
 8014020:	2b00      	cmp	r3, #0
 8014022:	d03b      	beq.n	801409c <nk_panel_begin+0xd6c>
 8014024:	2b01      	cmp	r3, #1
 8014026:	d156      	bne.n	80140d6 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 8014028:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801402c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8014030:	331c      	adds	r3, #28
 8014032:	4a5e      	ldr	r2, [pc, #376]	; (80141ac <nk_panel_begin+0xe7c>)
 8014034:	ed97 6a08 	vldr	s12, [r7, #32]
 8014038:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801403c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014040:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014044:	6812      	ldr	r2, [r2, #0]
 8014046:	4619      	mov	r1, r3
 8014048:	eeb0 0a46 	vmov.f32	s0, s12
 801404c:	eef0 0a66 	vmov.f32	s1, s13
 8014050:	eeb0 1a47 	vmov.f32	s2, s14
 8014054:	eef0 1a67 	vmov.f32	s3, s15
 8014058:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801405c:	f7fc f8e2 	bl	8010224 <nk_draw_image>
                break;
 8014060:	e039      	b.n	80140d6 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 8014062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014066:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801406a:	331c      	adds	r3, #28
 801406c:	4a4f      	ldr	r2, [pc, #316]	; (80141ac <nk_panel_begin+0xe7c>)
 801406e:	ed97 6a08 	vldr	s12, [r7, #32]
 8014072:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8014076:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801407a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801407e:	6812      	ldr	r2, [r2, #0]
 8014080:	4619      	mov	r1, r3
 8014082:	eeb0 0a46 	vmov.f32	s0, s12
 8014086:	eef0 0a66 	vmov.f32	s1, s13
 801408a:	eeb0 1a47 	vmov.f32	s2, s14
 801408e:	eef0 1a67 	vmov.f32	s3, s15
 8014092:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8014096:	f7fc f9b7 	bl	8010408 <nk_draw_nine_slice>
                break;
 801409a:	e01c      	b.n	80140d6 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 801409c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80140a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140a4:	ed97 6a08 	vldr	s12, [r7, #32]
 80140a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80140ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80140b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80140b4:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 80140b8:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80141b0 <nk_panel_begin+0xe80>
 80140bc:	eeb0 0a46 	vmov.f32	s0, s12
 80140c0:	eef0 0a66 	vmov.f32	s1, s13
 80140c4:	eeb0 1a47 	vmov.f32	s2, s14
 80140c8:	eef0 1a67 	vmov.f32	s3, s15
 80140cc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80140d0:	f7fb fd4e 	bl	800fb70 <nk_fill_rect>
                break;
 80140d4:	bf00      	nop
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 80140d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80140da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140de:	f102 043c 	add.w	r4, r2, #60	; 0x3c
 80140e2:	3308      	adds	r3, #8
 80140e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80140e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 80140ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80140ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80140f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140f6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80140fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140fe:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 8014102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014106:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801410a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801410e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 8014112:	ee77 5a27 	vadd.f32	s11, s14, s15
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 8014116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801411a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801411e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014122:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 8014126:	ee77 7a27 	vadd.f32	s15, s14, s15
 801412a:	f107 0310 	add.w	r3, r7, #16
 801412e:	eef0 1a67 	vmov.f32	s3, s15
 8014132:	eeb0 1a65 	vmov.f32	s2, s11
 8014136:	eef0 0a46 	vmov.f32	s1, s12
 801413a:	eeb0 0a66 	vmov.f32	s0, s13
 801413e:	4611      	mov	r1, r2
 8014140:	4618      	mov	r0, r3
 8014142:	f7fe fb45 	bl	80127d0 <nk_unify>
    nk_push_scissor(out, clip);
 8014146:	ed97 6a04 	vldr	s12, [r7, #16]
 801414a:	edd7 6a05 	vldr	s13, [r7, #20]
 801414e:	ed97 7a06 	vldr	s14, [r7, #24]
 8014152:	edd7 7a07 	vldr	s15, [r7, #28]
 8014156:	eeb0 0a46 	vmov.f32	s0, s12
 801415a:	eef0 0a66 	vmov.f32	s1, s13
 801415e:	eeb0 1a47 	vmov.f32	s2, s14
 8014162:	eef0 1a67 	vmov.f32	s3, s15
 8014166:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801416a:	f7fb fb81 	bl	800f870 <nk_push_scissor>
    layout->clip = clip;}
 801416e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014172:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8014176:	f107 0310 	add.w	r3, r7, #16
 801417a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801417c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 8014180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801418a:	2b00      	cmp	r3, #0
 801418c:	d108      	bne.n	80141a0 <nk_panel_begin+0xe70>
 801418e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <nk_panel_begin+0xe70>
 801419c:	2301      	movs	r3, #1
 801419e:	e000      	b.n	80141a2 <nk_panel_begin+0xe72>
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	37cc      	adds	r7, #204	; 0xcc
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd90      	pop	{r4, r7, pc}
 80141aa:	bf00      	nop
 80141ac:	080216c8 	.word	0x080216c8
 80141b0:	00000000 	.word	0x00000000

080141b4 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 80141b4:	b590      	push	{r4, r7, lr}
 80141b6:	b0b3      	sub	sp, #204	; 0xcc
 80141b8:	af02      	add	r7, sp, #8
 80141ba:	6078      	str	r0, [r7, #4]
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d106      	bne.n	80141d0 <nk_panel_end+0x1c>
 80141c2:	4b31      	ldr	r3, [pc, #196]	; (8014288 <nk_panel_end+0xd4>)
 80141c4:	4a31      	ldr	r2, [pc, #196]	; (801428c <nk_panel_end+0xd8>)
 80141c6:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80141ca:	4831      	ldr	r0, [pc, #196]	; (8014290 <nk_panel_end+0xdc>)
 80141cc:	f008 fb46 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141d6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d106      	bne.n	80141ec <nk_panel_end+0x38>
 80141de:	4b2d      	ldr	r3, [pc, #180]	; (8014294 <nk_panel_end+0xe0>)
 80141e0:	4a2a      	ldr	r2, [pc, #168]	; (801428c <nk_panel_end+0xd8>)
 80141e2:	f240 1153 	movw	r1, #339	; 0x153
 80141e6:	482a      	ldr	r0, [pc, #168]	; (8014290 <nk_panel_end+0xdc>)
 80141e8:	f008 fb38 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80141f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d106      	bne.n	801420c <nk_panel_end+0x58>
 80141fe:	4b26      	ldr	r3, [pc, #152]	; (8014298 <nk_panel_end+0xe4>)
 8014200:	4a22      	ldr	r2, [pc, #136]	; (801428c <nk_panel_end+0xd8>)
 8014202:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8014206:	4822      	ldr	r0, [pc, #136]	; (8014290 <nk_panel_end+0xdc>)
 8014208:	f008 fb28 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2b00      	cmp	r3, #0
 8014210:	f000 8792 	beq.w	8015138 <nk_panel_end+0xf84>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801421a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801421e:	2b00      	cmp	r3, #0
 8014220:	f000 878a 	beq.w	8015138 <nk_panel_end+0xf84>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801422a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801422e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 8780 	beq.w	8015138 <nk_panel_end+0xf84>
        return;

    window = ctx->current;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801423e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    layout = window->layout;
 8014246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801424a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801424e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    style = &ctx->style;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    out = &window->buffer;
 801425c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014260:	3364      	adds	r3, #100	; 0x64
 8014262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 8014266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014270:	2b00      	cmp	r3, #0
 8014272:	d113      	bne.n	801429c <nk_panel_end+0xe8>
 8014274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801427e:	2b00      	cmp	r3, #0
 8014280:	d10c      	bne.n	801429c <nk_panel_end+0xe8>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	e00b      	b.n	801429e <nk_panel_end+0xea>
 8014286:	bf00      	nop
 8014288:	08020488 	.word	0x08020488
 801428c:	080216dc 	.word	0x080216dc
 8014290:	0802048c 	.word	0x0802048c
 8014294:	080204a8 	.word	0x080204a8
 8014298:	080204b8 	.word	0x080204b8
 801429c:	2300      	movs	r3, #0
 801429e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (!nk_panel_is_sub(layout->type))
 80142a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7ff f81b 	bl	80132e4 <nk_panel_is_sub>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d114      	bne.n	80142de <nk_panel_end+0x12a>
        nk_push_scissor(out, nk_null_rect);
 80142b4:	4bcb      	ldr	r3, [pc, #812]	; (80145e4 <nk_panel_end+0x430>)
 80142b6:	ed93 6a00 	vldr	s12, [r3]
 80142ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80142be:	ed93 7a02 	vldr	s14, [r3, #8]
 80142c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80142c6:	eeb0 0a46 	vmov.f32	s0, s12
 80142ca:	eef0 0a66 	vmov.f32	s1, s13
 80142ce:	eeb0 1a47 	vmov.f32	s2, s14
 80142d2:	eef0 1a67 	vmov.f32	s3, s15
 80142d6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80142da:	f7fb fac9 	bl	800f870 <nk_push_scissor>

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 80142de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142e6:	461a      	mov	r2, r3
 80142e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80142ec:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 80142f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142f4:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, layout->type);
 80142f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	4619      	mov	r1, r3
 8014300:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014304:	f7fe fdfc 	bl	8012f00 <nk_panel_get_padding>
 8014308:	eeb0 7a40 	vmov.f32	s14, s0
 801430c:	eef0 7a60 	vmov.f32	s15, s1
 8014310:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8014314:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 8014318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801431c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8014320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014324:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8014328:	ee77 7a27 	vadd.f32	s15, s14, s15
 801432c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014330:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 8014334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801433e:	2b00      	cmp	r3, #0
 8014340:	f000 8111 	beq.w	8014566 <nk_panel_end+0x3b2>
 8014344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014348:	685b      	ldr	r3, [r3, #4]
 801434a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801434e:	2b00      	cmp	r3, #0
 8014350:	f040 8109 	bne.w	8014566 <nk_panel_end+0x3b2>
    {
        /* update panel height to fit dynamic growth */
        struct nk_rect empty_space;
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 8014354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014358:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801435c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014360:	edd3 6a03 	vldr	s13, [r3, #12]
 8014364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014368:	edd3 7a05 	vldr	s15, [r3, #20]
 801436c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014378:	d50d      	bpl.n	8014396 <nk_panel_end+0x1e2>
            layout->bounds.h = layout->at_y - layout->bounds.y;
 801437a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801437e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8014382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014386:	edd3 7a03 	vldr	s15, [r3, #12]
 801438a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801438e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014392:	edc3 7a05 	vstr	s15, [r3, #20]

        /* fill top empty space */
        empty_space.x = window->bounds.x;
 8014396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801439c:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 801439e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.h = panel_padding.y;
 80143a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80143a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        empty_space.w = window->bounds.w;
 80143aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80143ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143b0:	65bb      	str	r3, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80143b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80143b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80143ba:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80143be:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80143c2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80143c6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80143ca:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80143ce:	ed9f 2a86 	vldr	s4, [pc, #536]	; 80145e8 <nk_panel_end+0x434>
 80143d2:	eeb0 0a46 	vmov.f32	s0, s12
 80143d6:	eef0 0a66 	vmov.f32	s1, s13
 80143da:	eeb0 1a47 	vmov.f32	s2, s14
 80143de:	eef0 1a67 	vmov.f32	s3, s15
 80143e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80143e6:	f7fb fbc3 	bl	800fb70 <nk_fill_rect>

        /* fill left empty space */
        empty_space.x = window->bounds.x;
 80143ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80143ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143f0:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 80143f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 80143fa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80143fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014402:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8014406:	ee77 7a27 	vadd.f32	s15, s14, s15
 801440a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 801440e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014412:	695b      	ldr	r3, [r3, #20]
 8014414:	65fb      	str	r3, [r7, #92]	; 0x5c
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8014416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801441e:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8014422:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8014426:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801442a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801442e:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8014432:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 80145e8 <nk_panel_end+0x434>
 8014436:	eeb0 0a46 	vmov.f32	s0, s12
 801443a:	eef0 0a66 	vmov.f32	s1, s13
 801443e:	eeb0 1a47 	vmov.f32	s2, s14
 8014442:	eef0 1a67 	vmov.f32	s3, s15
 8014446:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801444a:	f7fb fb91 	bl	800fb70 <nk_fill_rect>

        /* fill right empty space */
        empty_space.x = layout->bounds.x + layout->bounds.w;
 801444e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014452:	ed93 7a02 	vldr	s14, [r3, #8]
 8014456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801445a:	edd3 7a04 	vldr	s15, [r3, #16]
 801445e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014462:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8014466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 801446e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014476:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801447a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801447e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8014482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014486:	695b      	ldr	r3, [r3, #20]
 8014488:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 801448a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801448e:	69db      	ldr	r3, [r3, #28]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10e      	bne.n	80144b4 <nk_panel_end+0x300>
 8014496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	f003 0320 	and.w	r3, r3, #32
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d107      	bne.n	80144b4 <nk_panel_end+0x300>
            empty_space.w += scrollbar_size.x;
 80144a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80144a8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80144ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144b0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80144b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144bc:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80144c0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80144c4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80144c8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80144cc:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80144d0:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80145e8 <nk_panel_end+0x434>
 80144d4:	eeb0 0a46 	vmov.f32	s0, s12
 80144d8:	eef0 0a66 	vmov.f32	s1, s13
 80144dc:	eeb0 1a47 	vmov.f32	s2, s14
 80144e0:	eef0 1a67 	vmov.f32	s3, s15
 80144e4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80144e8:	f7fb fb42 	bl	800fb70 <nk_fill_rect>

        /* fill bottom empty space */
        if (layout->footer_height > 0) {
 80144ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80144f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80144f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80144f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fc:	dd33      	ble.n	8014566 <nk_panel_end+0x3b2>
            empty_space.x = window->bounds.x;
 80144fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014504:	653b      	str	r3, [r7, #80]	; 0x50
            empty_space.y = layout->bounds.y + layout->bounds.h;
 8014506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801450a:	ed93 7a03 	vldr	s14, [r3, #12]
 801450e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014512:	edd3 7a05 	vldr	s15, [r3, #20]
 8014516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801451a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            empty_space.w = window->bounds.w;
 801451e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014524:	65bb      	str	r3, [r7, #88]	; 0x58
            empty_space.h = layout->footer_height;
 8014526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801452c:	65fb      	str	r3, [r7, #92]	; 0x5c
            nk_fill_rect(out, empty_space, 0, style->window.background);
 801452e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014536:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 801453a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801453e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014542:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014546:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 801454a:	ed9f 2a27 	vldr	s4, [pc, #156]	; 80145e8 <nk_panel_end+0x434>
 801454e:	eeb0 0a46 	vmov.f32	s0, s12
 8014552:	eef0 0a66 	vmov.f32	s1, s13
 8014556:	eeb0 1a47 	vmov.f32	s2, s14
 801455a:	eef0 1a67 	vmov.f32	s3, s15
 801455e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014562:	f7fb fb05 	bl	800fb70 <nk_fill_rect>
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8014566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	f003 0320 	and.w	r3, r3, #32
 8014570:	2b00      	cmp	r3, #0
 8014572:	f040 8232 	bne.w	80149da <nk_panel_end+0x826>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8014576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8014580:	2b00      	cmp	r3, #0
 8014582:	f040 822a 	bne.w	80149da <nk_panel_end+0x826>
        window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)
 8014586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801458a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 801458e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8014592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801459a:	f140 821e 	bpl.w	80149da <nk_panel_end+0x826>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 801459e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fe fe9d 	bl	80132e4 <nk_panel_is_sub>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	f000 80cb 	beq.w	8014748 <nk_panel_end+0x594>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
 80145b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80145b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            struct nk_panel *root_panel = window->layout;
 80145ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80145be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 80145c6:	e005      	b.n	80145d4 <nk_panel_end+0x420>
                root_panel = root_panel->parent;
 80145c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80145cc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80145d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 80145d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80145d8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d1f3      	bne.n	80145c8 <nk_panel_end+0x414>
            while (root_window->parent)
 80145e0:	e012      	b.n	8014608 <nk_panel_end+0x454>
 80145e2:	bf00      	nop
 80145e4:	080216b8 	.word	0x080216b8
 80145e8:	00000000 	.word	0x00000000
 80145ec:	3dcccccd 	.word	0x3dcccccd
 80145f0:	3c23d70a 	.word	0x3c23d70a
 80145f4:	3d4ccccd 	.word	0x3d4ccccd
 80145f8:	3ba3d70a 	.word	0x3ba3d70a
                root_window = root_window->parent;
 80145fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014600:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8014604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while (root_window->parent)
 8014608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801460c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8014610:	2b00      	cmp	r3, #0
 8014612:	d1f3      	bne.n	80145fc <nk_panel_end+0x448>

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
 8014614:	2300      	movs	r3, #0
 8014616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if ((root_window == ctx->active) && layout->has_scrolling) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014620:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8014624:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014628:	429a      	cmp	r2, r3
 801462a:	f040 80d2 	bne.w	80147d2 <nk_panel_end+0x61e>
 801462e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014634:	2b00      	cmp	r3, #0
 8014636:	f000 80cc 	beq.w	80147d2 <nk_panel_end+0x61e>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 801463a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801463e:	ed93 6a02 	vldr	s12, [r3, #8]
 8014642:	edd3 6a03 	vldr	s13, [r3, #12]
 8014646:	ed93 7a04 	vldr	s14, [r3, #16]
 801464a:	edd3 7a05 	vldr	s15, [r3, #20]
 801464e:	eeb0 0a46 	vmov.f32	s0, s12
 8014652:	eef0 0a66 	vmov.f32	s1, s13
 8014656:	eeb0 1a47 	vmov.f32	s2, s14
 801465a:	eef0 1a67 	vmov.f32	s3, s15
 801465e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014662:	f7fc fec6 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	f000 80b2 	beq.w	80147d2 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 801466e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014672:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8014676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801467a:	edd3 6a02 	vldr	s13, [r3, #8]
 801467e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014682:	edd3 7a04 	vldr	s15, [r3, #16]
 8014686:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 801468a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014692:	f140 809e 	bpl.w	80147d2 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 8014696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801469a:	ed93 7a02 	vldr	s14, [r3, #8]
 801469e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146a2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80146a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146aa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80146ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ba:	f140 808a 	bpl.w	80147d2 <nk_panel_end+0x61e>
 80146be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80146c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80146ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80146d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e2:	d576      	bpl.n	80147d2 <nk_panel_end+0x61e>
 80146e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80146e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80146ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146f0:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80146f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146f8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80146fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014708:	d563      	bpl.n	80147d2 <nk_panel_end+0x61e>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 801470a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801470e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 8014716:	e009      	b.n	801472c <nk_panel_end+0x578>
                        root_panel->has_scrolling = nk_false;
 8014718:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801471c:	2200      	movs	r2, #0
 801471e:	639a      	str	r2, [r3, #56]	; 0x38
                        root_panel = root_panel->parent;
 8014720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014724:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8014728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 801472c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014730:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8014734:	2b00      	cmp	r3, #0
 8014736:	d1ef      	bne.n	8014718 <nk_panel_end+0x564>
                    }
                    root_panel->has_scrolling = nk_false;
 8014738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801473c:	2200      	movs	r2, #0
 801473e:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 8014740:	2301      	movs	r3, #1
 8014742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014746:	e044      	b.n	80147d2 <nk_panel_end+0x61e>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
 8014748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	4618      	mov	r0, r3
 8014750:	f7fe fdc8 	bl	80132e4 <nk_panel_is_sub>
 8014754:	4603      	mov	r3, r0
 8014756:	2b00      	cmp	r3, #0
 8014758:	d138      	bne.n	80147cc <nk_panel_end+0x618>
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014760:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8014764:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014768:	429a      	cmp	r2, r3
 801476a:	d106      	bne.n	801477a <nk_panel_end+0x5c6>
 801476c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014772:	2b00      	cmp	r3, #0
 8014774:	d001      	beq.n	801477a <nk_panel_end+0x5c6>
 8014776:	2301      	movs	r3, #1
 8014778:	e000      	b.n	801477c <nk_panel_end+0x5c8>
 801477a:	2300      	movs	r3, #0
 801477c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 8014780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014784:	2b00      	cmp	r3, #0
 8014786:	d01b      	beq.n	80147c0 <nk_panel_end+0x60c>
 8014788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801478c:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8014790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014798:	dc08      	bgt.n	80147ac <nk_panel_end+0x5f8>
 801479a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801479e:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 80147a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80147a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147aa:	dd09      	ble.n	80147c0 <nk_panel_end+0x60c>
 80147ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d005      	beq.n	80147c0 <nk_panel_end+0x60c>
                window->scrolled = nk_true;
 80147b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80147b8:	2201      	movs	r2, #1
 80147ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80147be:	e008      	b.n	80147d2 <nk_panel_end+0x61e>
            else window->scrolled = nk_false;
 80147c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80147c4:	2200      	movs	r2, #0
 80147c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80147ca:	e002      	b.n	80147d2 <nk_panel_end+0x61e>
        } else scroll_has_scrolling = nk_false;
 80147cc:	2300      	movs	r3, #0
 80147ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 80147d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147da:	ed93 7a02 	vldr	s14, [r3, #8]
 80147de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80147e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147ea:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80147ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147f2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y;
 80147f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	647b      	str	r3, [r7, #68]	; 0x44
            scroll.w = scrollbar_size.x;
 80147fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014800:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = layout->bounds.h;
 8014802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014806:	695b      	ldr	r3, [r3, #20]
 8014808:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_y;
 801480a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801480e:	69db      	ldr	r3, [r3, #28]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	ee07 3a90 	vmov	s15, r3
 8014816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801481a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_step = scroll.h * 0.10f;
 801481e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014822:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 80145ec <nk_panel_end+0x438>
 8014826:	ee67 7a87 	vmul.f32	s15, s15, s14
 801482a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = scroll.h * 0.01f;
 801482e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014832:	ed1f 7a91 	vldr	s14, [pc, #-580]	; 80145f0 <nk_panel_end+0x43c>
 8014836:	ee67 7a87 	vmul.f32	s15, s15, s14
 801483a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 801483e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014842:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8014846:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801484a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801484e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014856:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8014860:	3318      	adds	r3, #24
 8014862:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014866:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 8014868:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801486c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8014870:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014874:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8014878:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801487c:	9201      	str	r2, [sp, #4]
 801487e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014882:	9200      	str	r2, [sp, #0]
 8014884:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8014888:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 801488c:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8014890:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8014894:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014898:	eeb0 0a46 	vmov.f32	s0, s12
 801489c:	eef0 0a66 	vmov.f32	s1, s13
 80148a0:	eeb0 1a47 	vmov.f32	s2, s14
 80148a4:	eef0 1a67 	vmov.f32	s3, s15
 80148a8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80148ac:	f001 fc82 	bl	80161b4 <nk_do_scrollbarv>
 80148b0:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_y = (nk_uint)scroll_offset;
 80148b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80148b8:	69db      	ldr	r3, [r3, #28]
 80148ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80148be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80148c2:	ee17 2a90 	vmov	r2, s15
 80148c6:	601a      	str	r2, [r3, #0]
            if (in && scroll_has_scrolling)
 80148c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d009      	beq.n	80148e4 <nk_panel_end+0x730>
 80148d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d005      	beq.n	80148e4 <nk_panel_end+0x730>
                in->mouse.scroll_delta.y = 0;
 80148d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80148dc:	f04f 0200 	mov.w	r2, #0
 80148e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 80148e4:	2300      	movs	r3, #0
 80148e6:	63bb      	str	r3, [r7, #56]	; 0x38
            scroll.x = layout->bounds.x;
 80148e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80148ec:	689b      	ldr	r3, [r3, #8]
 80148ee:	643b      	str	r3, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y + layout->bounds.h;
 80148f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80148f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80148f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80148fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8014900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014904:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            scroll.w = layout->bounds.w;
 8014908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801490c:	691b      	ldr	r3, [r3, #16]
 801490e:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = scrollbar_size.y;
 8014910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014912:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_x;
 8014914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014918:	699b      	ldr	r3, [r3, #24]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	ee07 3a90 	vmov	s15, r3
 8014920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014924:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 8014928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801492c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014930:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8014934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014940:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_step = layout->max_x * 0.05f;
 8014944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014948:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801494c:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 80145f4 <nk_panel_end+0x440>
 8014950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014954:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = layout->max_x * 0.005f;
 8014958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801495c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014960:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 80145f8 <nk_panel_end+0x444>
 8014964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014968:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8014972:	330c      	adds	r3, #12
 8014974:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014978:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 801497a:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801497e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8014982:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014986:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801498a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801498e:	9201      	str	r2, [sp, #4]
 8014990:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014994:	9200      	str	r2, [sp, #0]
 8014996:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 801499a:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 801499e:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 80149a2:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 80149a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80149aa:	eeb0 0a46 	vmov.f32	s0, s12
 80149ae:	eef0 0a66 	vmov.f32	s1, s13
 80149b2:	eeb0 1a47 	vmov.f32	s2, s14
 80149b6:	eef0 1a67 	vmov.f32	s3, s15
 80149ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80149be:	f001 fe97 	bl	80166f0 <nk_do_scrollbarh>
 80149c2:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_x = (nk_uint)scroll_offset;
 80149c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80149ca:	699b      	ldr	r3, [r3, #24]
 80149cc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80149d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80149d4:	ee17 2a90 	vmov	r2, s15
 80149d8:	601a      	str	r2, [r3, #0]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 80149da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d051      	beq.n	8014a8c <nk_panel_end+0x8d8>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80149ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80149f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f6:	d10f      	bne.n	8014a18 <nk_panel_end+0x864>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80149fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a06:	d107      	bne.n	8014a18 <nk_panel_end+0x864>
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8014a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a16:	d001      	beq.n	8014a1c <nk_panel_end+0x868>
 8014a18:	2301      	movs	r3, #1
 8014a1a:	e000      	b.n	8014a1e <nk_panel_end+0x86a>
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int is_window_hovered = nk_window_is_hovered(ctx);
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f007 fda6 	bl	801c574 <nk_window_is_hovered>
 8014a28:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a32:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8014a36:	f003 0302 	and.w	r3, r3, #2
 8014a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 8014a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d103      	bne.n	8014a4e <nk_panel_end+0x89a>
 8014a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d107      	bne.n	8014a5e <nk_panel_end+0x8aa>
 8014a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d113      	bne.n	8014a7e <nk_panel_end+0x8ca>
 8014a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d10f      	bne.n	8014a7e <nk_panel_end+0x8ca>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 8014a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a62:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a6c:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8014a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a78:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8014a7c:	e00c      	b.n	8014a98 <nk_panel_end+0x8e4>
        else window->scrollbar_hiding_timer = 0;
 8014a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a82:	f04f 0200 	mov.w	r2, #0
 8014a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8014a8a:	e005      	b.n	8014a98 <nk_panel_end+0x8e4>
    } else window->scrollbar_hiding_timer = 0;
 8014a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a90:	f04f 0200 	mov.w	r2, #0
 8014a94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 8014a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	f003 0301 	and.w	r3, r3, #1
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d078      	beq.n	8014b98 <nk_panel_end+0x9e4>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 8014aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	4619      	mov	r1, r3
 8014aae:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014ab2:	f7fe fb7d 	bl	80131b0 <nk_panel_get_border_color>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	637b      	str	r3, [r7, #52]	; 0x34
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8014aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d014      	beq.n	8014af2 <nk_panel_end+0x93e>
            ? (style->window.border + window->bounds.y + layout->header_height)
 8014ac8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ad0:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8014ad4:	ed93 7a00 	vldr	s14, [r3]
 8014ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014adc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ae4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014ae8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8014aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014af0:	e021      	b.n	8014b36 <nk_panel_end+0x982>
 8014af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d010      	beq.n	8014b22 <nk_panel_end+0x96e>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 8014b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b04:	ed93 7a03 	vldr	s14, [r3, #12]
 8014b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8014b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b18:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                : (window->bounds.y + window->bounds.h));
 8014b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b20:	e009      	b.n	8014b36 <nk_panel_end+0x982>
 8014b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b26:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8014b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b2e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8014b32:	ee77 7a27 	vadd.f32	s15, s14, s15
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8014b36:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        struct nk_rect b = window->bounds;
 8014b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b3e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8014b42:	334c      	adds	r3, #76	; 0x4c
 8014b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 8014b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014b4e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014b52:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8014b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 8014b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b62:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8014b66:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8014b6a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8014b6e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014b72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014b76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014b78:	eef0 2a65 	vmov.f32	s5, s11
 8014b7c:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8014cf8 <nk_panel_end+0xb44>
 8014b80:	eeb0 0a46 	vmov.f32	s0, s12
 8014b84:	eef0 0a66 	vmov.f32	s1, s13
 8014b88:	eeb0 1a47 	vmov.f32	s2, s14
 8014b8c:	eef0 1a67 	vmov.f32	s3, s15
 8014b90:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014b94:	f7fa fee4 	bl	800f960 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 8014b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	f003 0304 	and.w	r3, r3, #4
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 81e1 	beq.w	8014f6a <nk_panel_end+0xdb6>
 8014ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 81dc 	beq.w	8014f6a <nk_panel_end+0xdb6>
 8014bb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f040 81d4 	bne.w	8014f6a <nk_panel_end+0xdb6>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
 8014bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bc4:	61fb      	str	r3, [r7, #28]
        scaler.h = scrollbar_size.y;
 8014bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bc8:	623b      	str	r3, [r7, #32]
        scaler.y = layout->bounds.y + layout->bounds.h;
 8014bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014bce:	ed93 7a03 	vldr	s14, [r3, #12]
 8014bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014bd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8014bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bde:	edc7 7a06 	vstr	s15, [r7, #24]
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 8014be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d00e      	beq.n	8014c0e <nk_panel_end+0xa5a>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 8014bf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014bf4:	ed93 7a02 	vldr	s14, [r3, #8]
 8014bf8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014bfc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014c00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c08:	edc7 7a05 	vstr	s15, [r7, #20]
 8014c0c:	e00f      	b.n	8014c2e <nk_panel_end+0xa7a>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8014c0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c12:	ed93 7a02 	vldr	s14, [r3, #8]
 8014c16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8014c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c22:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c2a:	edc7 7a05 	vstr	s15, [r7, #20]
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 8014c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	f003 0320 	and.w	r3, r3, #32
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d007      	beq.n	8014c4c <nk_panel_end+0xa98>
            scaler.x -= scaler.w;
 8014c3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8014c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8014c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c48:	edc7 7a05 	vstr	s15, [r7, #20]

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 8014c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014c50:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8014c54:	3314      	adds	r3, #20
 8014c56:	67bb      	str	r3, [r7, #120]	; 0x78
        if (item->type == NK_STYLE_ITEM_IMAGE)
 8014c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d119      	bne.n	8014c94 <nk_panel_end+0xae0>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 8014c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c62:	3304      	adds	r3, #4
 8014c64:	4a25      	ldr	r2, [pc, #148]	; (8014cfc <nk_panel_end+0xb48>)
 8014c66:	ed97 6a05 	vldr	s12, [r7, #20]
 8014c6a:	edd7 6a06 	vldr	s13, [r7, #24]
 8014c6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8014c72:	edd7 7a08 	vldr	s15, [r7, #32]
 8014c76:	6812      	ldr	r2, [r2, #0]
 8014c78:	4619      	mov	r1, r3
 8014c7a:	eeb0 0a46 	vmov.f32	s0, s12
 8014c7e:	eef0 0a66 	vmov.f32	s1, s13
 8014c82:	eeb0 1a47 	vmov.f32	s2, s14
 8014c86:	eef0 1a67 	vmov.f32	s3, s15
 8014c8a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014c8e:	f7fb fac9 	bl	8010224 <nk_draw_image>
 8014c92:	e063      	b.n	8014d5c <nk_panel_end+0xba8>
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8014c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d02e      	beq.n	8014d00 <nk_panel_end+0xb4c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8014ca2:	edd7 6a05 	vldr	s13, [r7, #20]
 8014ca6:	ed97 6a06 	vldr	s12, [r7, #24]
 8014caa:	edd7 5a05 	vldr	s11, [r7, #20]
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8014cae:	ed97 7a06 	vldr	s14, [r7, #24]
 8014cb2:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8014cb6:	ee37 5a27 	vadd.f32	s10, s14, s15
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8014cba:	ed97 7a05 	vldr	s14, [r7, #20]
 8014cbe:	edd7 7a07 	vldr	s15, [r7, #28]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8014cc2:	ee77 4a27 	vadd.f32	s9, s14, s15
                    scaler.y + scaler.h, item->data.color);
 8014cc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8014cca:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8014cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014cd4:	6859      	ldr	r1, [r3, #4]
 8014cd6:	eef0 2a67 	vmov.f32	s5, s15
 8014cda:	eeb0 2a64 	vmov.f32	s4, s9
 8014cde:	eef0 1a45 	vmov.f32	s3, s10
 8014ce2:	eeb0 1a65 	vmov.f32	s2, s11
 8014ce6:	eef0 0a46 	vmov.f32	s1, s12
 8014cea:	eeb0 0a66 	vmov.f32	s0, s13
 8014cee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014cf2:	f7fb f91d 	bl	800ff30 <nk_fill_triangle>
 8014cf6:	e031      	b.n	8014d5c <nk_panel_end+0xba8>
 8014cf8:	00000000 	.word	0x00000000
 8014cfc:	080216c8 	.word	0x080216c8
            } else {
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8014d00:	ed97 7a05 	vldr	s14, [r7, #20]
 8014d04:	edd7 7a07 	vldr	s15, [r7, #28]
 8014d08:	ee77 6a27 	vadd.f32	s13, s14, s15
 8014d0c:	ed97 6a06 	vldr	s12, [r7, #24]
 8014d10:	ed97 7a05 	vldr	s14, [r7, #20]
 8014d14:	edd7 7a07 	vldr	s15, [r7, #28]
 8014d18:	ee77 5a27 	vadd.f32	s11, s14, s15
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8014d1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8014d20:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8014d24:	ee37 5a27 	vadd.f32	s10, s14, s15
 8014d28:	edd7 4a05 	vldr	s9, [r7, #20]
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8014d2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8014d30:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8014d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d3a:	6859      	ldr	r1, [r3, #4]
 8014d3c:	eef0 2a67 	vmov.f32	s5, s15
 8014d40:	eeb0 2a64 	vmov.f32	s4, s9
 8014d44:	eef0 1a45 	vmov.f32	s3, s10
 8014d48:	eeb0 1a65 	vmov.f32	s2, s11
 8014d4c:	eef0 0a46 	vmov.f32	s1, s12
 8014d50:	eeb0 0a66 	vmov.f32	s0, s13
 8014d54:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014d58:	f7fb f8ea 	bl	800ff30 <nk_fill_triangle>
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 8014d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f040 80ff 	bne.w	8014f6a <nk_panel_end+0xdb6>
            struct nk_vec2 window_size = style->window.min_size;
 8014d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d74:	461a      	mov	r2, r3
 8014d76:	f107 030c 	add.w	r3, r7, #12
 8014d7a:	f602 02e4 	addw	r2, r2, #2276	; 0x8e4
 8014d7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d82:	e883 0003 	stmia.w	r3, {r0, r1}
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8014d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014d8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8014d8e:	677b      	str	r3, [r7, #116]	; 0x74
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 8014d90:	ed97 6a05 	vldr	s12, [r7, #20]
 8014d94:	edd7 6a06 	vldr	s13, [r7, #24]
 8014d98:	ed97 7a07 	vldr	s14, [r7, #28]
 8014d9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8014da0:	2201      	movs	r2, #1
 8014da2:	eeb0 0a46 	vmov.f32	s0, s12
 8014da6:	eef0 0a66 	vmov.f32	s1, s13
 8014daa:	eeb0 1a47 	vmov.f32	s2, s14
 8014dae:	eef0 1a67 	vmov.f32	s3, s15
 8014db2:	2100      	movs	r1, #0
 8014db4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014db8:	f7fc fad4 	bl	8011364 <nk_input_has_mouse_click_down_in_rect>
 8014dbc:	6738      	str	r0, [r7, #112]	; 0x70
                    NK_BUTTON_LEFT, scaler, nk_true);

            if (left_mouse_down && left_mouse_click_in_scaler) {
 8014dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 80d2 	beq.w	8014f6a <nk_panel_end+0xdb6>
 8014dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f000 80ce 	beq.w	8014f6a <nk_panel_end+0xdb6>
                float delta_x = in->mouse.delta.x;
 8014dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014dd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8014dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d013      	beq.n	8014e10 <nk_panel_end+0xc5c>
                    delta_x = -delta_x;
 8014de8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014dec:	eef1 7a67 	vneg.f32	s15, s15
 8014df0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                    window->bounds.x += in->mouse.delta.x;
 8014df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014df8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8014dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014e00:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8014e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e0c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                }
                /* dragging in x-direction  */
                if (window->bounds.w + delta_x >= window_size.x) {
 8014e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e14:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8014e18:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8014e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2c:	db2e      	blt.n	8014e8c <nk_panel_end+0xcd8>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 8014e2e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e3a:	d411      	bmi.n	8014e60 <nk_panel_end+0xcac>
 8014e3c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e48:	dd20      	ble.n	8014e8c <nk_panel_end+0xcd8>
 8014e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014e4e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8014e52:	edd7 7a05 	vldr	s15, [r7, #20]
 8014e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e5e:	db15      	blt.n	8014e8c <nk_panel_end+0xcd8>
                        window->bounds.w = window->bounds.w + delta_x;
 8014e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e64:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8014e68:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e74:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 8014e78:	ed97 7a05 	vldr	s14, [r7, #20]
 8014e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014e80:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8014e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e88:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                /* dragging in y-direction (only possible if static window) */
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 8014e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d145      	bne.n	8014f26 <nk_panel_end+0xd72>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 8014e9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8014e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ea2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8014ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014eaa:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eba:	d534      	bpl.n	8014f26 <nk_panel_end+0xd72>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 8014ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014ec0:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ecc:	d413      	bmi.n	8014ef6 <nk_panel_end+0xd42>
 8014ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014ed2:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ede:	dd22      	ble.n	8014f26 <nk_panel_end+0xd72>
 8014ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014ee4:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8014ee8:	edd7 7a06 	vldr	s15, [r7, #24]
 8014eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef4:	db17      	blt.n	8014f26 <nk_panel_end+0xd72>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 8014ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014efa:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8014efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014f02:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014f0e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 8014f12:	ed97 7a06 	vldr	s14, [r7, #24]
 8014f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014f1a:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8014f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f22:	edc7 7a06 	vstr	s15, [r7, #24]
                        }
                    }
                }
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 8014f32:	ed97 7a05 	vldr	s14, [r7, #20]
 8014f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8014f3a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014f3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8014f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014f4a:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 8014f4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8014f52:	edd7 6a08 	vldr	s13, [r7, #32]
 8014f56:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014f5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8014f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014f66:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 8014f6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7fe f9b7 	bl	80132e4 <nk_panel_is_sub>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d112      	bne.n	8014fa2 <nk_panel_end+0xdee>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 8014f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d006      	beq.n	8014f98 <nk_panel_end+0xde4>
            nk_command_buffer_reset(&window->buffer);
 8014f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014f8e:	3364      	adds	r3, #100	; 0x64
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7fa fbd9 	bl	800f748 <nk_command_buffer_reset>
 8014f96:	e004      	b.n	8014fa2 <nk_panel_end+0xdee>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
 8014f98:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7f9 ff83 	bl	800eea8 <nk_finish>
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 8014fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d00f      	beq.n	8014fd0 <nk_panel_end+0xe1c>
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8014fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014fbe:	605a      	str	r2, [r3, #4]
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 8014fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014fce:	605a      	str	r2, [r3, #4]
    }
    window->flags = layout->flags;
 8014fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014fd4:	685a      	ldr	r2, [r3, #4]
 8014fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fda:	649a      	str	r2, [r3, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 8014fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d01b      	beq.n	8015020 <nk_panel_end+0xe6c>
 8014fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014fec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8014ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d011      	beq.n	8015020 <nk_panel_end+0xe6c>
        window->property.active == window->property.prev) {
 8014ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015000:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8015004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    if (window->property.active && window->property.old != window->property.seq &&
 801500c:	429a      	cmp	r2, r3
 801500e:	d107      	bne.n	8015020 <nk_panel_end+0xe6c>
        nk_zero(&window->property, sizeof(window->property));
 8015010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015014:	3394      	adds	r3, #148	; 0x94
 8015016:	2168      	movs	r1, #104	; 0x68
 8015018:	4618      	mov	r0, r3
 801501a:	f005 ff6f 	bl	801aefc <nk_zero>
 801501e:	e014      	b.n	801504a <nk_panel_end+0xe96>
    } else {
        window->property.old = window->property.seq;
 8015020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015024:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8015028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801502c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        window->property.prev = window->property.active;
 8015030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015034:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8015038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801503c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        window->property.seq = 0;
 8015040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015044:	2200      	movs	r2, #0
 8015046:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 801504a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801504e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015052:	2b00      	cmp	r3, #0
 8015054:	d01c      	beq.n	8015090 <nk_panel_end+0xedc>
 8015056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801505a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 801505e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015062:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8015066:	429a      	cmp	r2, r3
 8015068:	d012      	beq.n	8015090 <nk_panel_end+0xedc>
       window->edit.active == window->edit.prev) {
 801506a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801506e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8015072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015076:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    if (window->edit.active && window->edit.old != window->edit.seq &&
 801507a:	429a      	cmp	r2, r3
 801507c:	d108      	bne.n	8015090 <nk_panel_end+0xedc>
        nk_zero(&window->edit, sizeof(window->edit));
 801507e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015082:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015086:	212c      	movs	r1, #44	; 0x2c
 8015088:	4618      	mov	r0, r3
 801508a:	f005 ff37 	bl	801aefc <nk_zero>
 801508e:	e014      	b.n	80150ba <nk_panel_end+0xf06>
    } else {
        window->edit.old = window->edit.seq;
 8015090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015094:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8015098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801509c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        window->edit.prev = window->edit.active;
 80150a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150a4:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80150a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150ac:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        window->edit.seq = 0;
 80150b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150b4:	2200      	movs	r2, #0
 80150b6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 80150ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d019      	beq.n	80150fa <nk_panel_end+0xf46>
 80150c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150ca:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80150ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150d2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d00f      	beq.n	80150fa <nk_panel_end+0xf46>
        window->popup.con_count = 0;
 80150da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150de:	2200      	movs	r2, #0
 80150e0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        window->popup.con_old = 0;
 80150e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150e8:	2200      	movs	r2, #0
 80150ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.active_con = 0;
 80150ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150f2:	2200      	movs	r2, #0
 80150f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80150f8:	e00c      	b.n	8015114 <nk_panel_end+0xf60>
    } else {
        window->popup.con_old = window->popup.con_count;
 80150fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80150fe:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8015102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015106:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.con_count = 0;
 801510a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801510e:	2200      	movs	r2, #0
 8015110:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 8015114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015118:	2200      	movs	r2, #0
 801511a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 801511e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015126:	2b00      	cmp	r3, #0
 8015128:	d007      	beq.n	801513a <nk_panel_end+0xf86>
 801512a:	4b05      	ldr	r3, [pc, #20]	; (8015140 <nk_panel_end+0xf8c>)
 801512c:	4a05      	ldr	r2, [pc, #20]	; (8015144 <nk_panel_end+0xf90>)
 801512e:	f240 216b 	movw	r1, #619	; 0x26b
 8015132:	4805      	ldr	r0, [pc, #20]	; (8015148 <nk_panel_end+0xf94>)
 8015134:	f007 fb92 	bl	801c85c <__assert_func>
        return;
 8015138:	bf00      	nop
}
 801513a:	37c4      	adds	r7, #196	; 0xc4
 801513c:	46bd      	mov	sp, r7
 801513e:	bd90      	pop	{r4, r7, pc}
 8015140:	080204d0 	.word	0x080204d0
 8015144:	080216dc 	.word	0x080216dc
 8015148:	0802048c 	.word	0x0802048c

0801514c <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
    NK_ASSERT(capacity >= 1);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d105      	bne.n	801516a <nk_pool_init+0x1e>
 801515e:	4b0e      	ldr	r3, [pc, #56]	; (8015198 <nk_pool_init+0x4c>)
 8015160:	4a0e      	ldr	r2, [pc, #56]	; (801519c <nk_pool_init+0x50>)
 8015162:	210d      	movs	r1, #13
 8015164:	480e      	ldr	r0, [pc, #56]	; (80151a0 <nk_pool_init+0x54>)
 8015166:	f007 fb79 	bl	801c85c <__assert_func>
    nk_zero(pool, sizeof(*pool));
 801516a:	2128      	movs	r1, #40	; 0x28
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f005 fec5 	bl	801aefc <nk_zero>
    pool->alloc = *alloc;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	68ba      	ldr	r2, [r7, #8]
 8015176:	ca07      	ldmia	r2, {r0, r1, r2}
 8015178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pool->capacity = capacity;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	61da      	str	r2, [r3, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2201      	movs	r2, #1
 8015186:	731a      	strb	r2, [r3, #12]
    pool->pages = 0;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2200      	movs	r2, #0
 801518c:	615a      	str	r2, [r3, #20]
}
 801518e:	bf00      	nop
 8015190:	3710      	adds	r7, #16
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	080204e8 	.word	0x080204e8
 801519c:	080216ec 	.word	0x080216ec
 80151a0:	080204f8 	.word	0x080204f8

080151a4 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	607a      	str	r2, [r7, #4]
    nk_zero(pool, sizeof(*pool));
 80151b0:	2128      	movs	r1, #40	; 0x28
 80151b2:	68f8      	ldr	r0, [r7, #12]
 80151b4:	f005 fea2 	bl	801aefc <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80151be:	d205      	bcs.n	80151cc <nk_pool_init_fixed+0x28>
 80151c0:	4b10      	ldr	r3, [pc, #64]	; (8015204 <nk_pool_init_fixed+0x60>)
 80151c2:	4a11      	ldr	r2, [pc, #68]	; (8015208 <nk_pool_init_fixed+0x64>)
 80151c4:	2125      	movs	r1, #37	; 0x25
 80151c6:	4811      	ldr	r0, [pc, #68]	; (801520c <nk_pool_init_fixed+0x68>)
 80151c8:	f007 fb48 	bl	801c85c <__assert_func>
    if (size < sizeof(struct nk_page)) return;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80151d2:	d313      	bcc.n	80151fc <nk_pool_init_fixed+0x58>
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80151da:	091b      	lsrs	r3, r3, #4
 80151dc:	4a0c      	ldr	r2, [pc, #48]	; (8015210 <nk_pool_init_fixed+0x6c>)
 80151de:	fba2 2303 	umull	r2, r3, r2, r3
 80151e2:	1c5a      	adds	r2, r3, #1
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	61da      	str	r2, [r3, #28]
    pool->pages = (struct nk_page*)memory;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	68ba      	ldr	r2, [r7, #8]
 80151ec:	615a      	str	r2, [r3, #20]
    pool->type = NK_BUFFER_FIXED;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2200      	movs	r2, #0
 80151f2:	731a      	strb	r2, [r3, #12]
    pool->size = size;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	621a      	str	r2, [r3, #32]
 80151fa:	e000      	b.n	80151fe <nk_pool_init_fixed+0x5a>
    if (size < sizeof(struct nk_page)) return;
 80151fc:	bf00      	nop
}
 80151fe:	3710      	adds	r7, #16
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	08020514 	.word	0x08020514
 8015208:	080216fc 	.word	0x080216fc
 801520c:	080204f8 	.word	0x080204f8
 8015210:	097b425f 	.word	0x097b425f

08015214 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b084      	sub	sp, #16
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	695b      	ldr	r3, [r3, #20]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d006      	beq.n	8015232 <nk_pool_alloc+0x1e>
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	695b      	ldr	r3, [r3, #20]
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	69db      	ldr	r3, [r3, #28]
 801522e:	429a      	cmp	r2, r3
 8015230:	d342      	bcc.n	80152b8 <nk_pool_alloc+0xa4>
        /* allocate new page */
        struct nk_page *page;
        if (pool->type == NK_BUFFER_FIXED) {
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	7b1b      	ldrb	r3, [r3, #12]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d11e      	bne.n	8015278 <nk_pool_alloc+0x64>
            NK_ASSERT(pool->pages);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	695b      	ldr	r3, [r3, #20]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d105      	bne.n	801524e <nk_pool_alloc+0x3a>
 8015242:	4b26      	ldr	r3, [pc, #152]	; (80152dc <nk_pool_alloc+0xc8>)
 8015244:	4a26      	ldr	r2, [pc, #152]	; (80152e0 <nk_pool_alloc+0xcc>)
 8015246:	2134      	movs	r1, #52	; 0x34
 8015248:	4826      	ldr	r0, [pc, #152]	; (80152e4 <nk_pool_alloc+0xd0>)
 801524a:	f007 fb07 	bl	801c85c <__assert_func>
            if (!pool->pages) return 0;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	695b      	ldr	r3, [r3, #20]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d101      	bne.n	801525a <nk_pool_alloc+0x46>
 8015256:	2300      	movs	r3, #0
 8015258:	e03b      	b.n	80152d2 <nk_pool_alloc+0xbe>
            NK_ASSERT(pool->pages->size < pool->capacity);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	695b      	ldr	r3, [r3, #20]
 801525e:	681a      	ldr	r2, [r3, #0]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	69db      	ldr	r3, [r3, #28]
 8015264:	429a      	cmp	r2, r3
 8015266:	d305      	bcc.n	8015274 <nk_pool_alloc+0x60>
 8015268:	4b1f      	ldr	r3, [pc, #124]	; (80152e8 <nk_pool_alloc+0xd4>)
 801526a:	4a1d      	ldr	r2, [pc, #116]	; (80152e0 <nk_pool_alloc+0xcc>)
 801526c:	2136      	movs	r1, #54	; 0x36
 801526e:	481d      	ldr	r0, [pc, #116]	; (80152e4 <nk_pool_alloc+0xd0>)
 8015270:	f007 faf4 	bl	801c85c <__assert_func>
            return 0;
 8015274:	2300      	movs	r3, #0
 8015276:	e02c      	b.n	80152d2 <nk_pool_alloc+0xbe>
        } else {
            nk_size size = sizeof(struct nk_page);
 8015278:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 801527c:	60fb      	str	r3, [r7, #12]
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	69db      	ldr	r3, [r3, #28]
 8015282:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8015286:	fb03 f202 	mul.w	r2, r3, r2
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	4413      	add	r3, r2
 801528e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8015292:	60fb      	str	r3, [r7, #12]
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	2100      	movs	r1, #0
 801529e:	6800      	ldr	r0, [r0, #0]
 80152a0:	4798      	blx	r3
 80152a2:	60b8      	str	r0, [r7, #8]
            page->next = pool->pages;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	695a      	ldr	r2, [r3, #20]
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	605a      	str	r2, [r3, #4]
            pool->pages = page;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	68ba      	ldr	r2, [r7, #8]
 80152b0:	615a      	str	r2, [r3, #20]
            page->size = 0;
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	2200      	movs	r2, #0
 80152b6:	601a      	str	r2, [r3, #0]
        }
    } return &pool->pages->win[pool->pages->size++];
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6959      	ldr	r1, [r3, #20]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	695a      	ldr	r2, [r3, #20]
 80152c0:	6813      	ldr	r3, [r2, #0]
 80152c2:	1c58      	adds	r0, r3, #1
 80152c4:	6010      	str	r0, [r2, #0]
 80152c6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80152ca:	fb02 f303 	mul.w	r3, r2, r3
 80152ce:	3308      	adds	r3, #8
 80152d0:	440b      	add	r3, r1
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3710      	adds	r7, #16
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	08020534 	.word	0x08020534
 80152e0:	08021710 	.word	0x08021710
 80152e4:	080204f8 	.word	0x080204f8
 80152e8:	08020540 	.word	0x08020540

080152ec <nk_nonblock_begin>:
}
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 80152ec:	b5b0      	push	{r4, r5, r7, lr}
 80152ee:	b096      	sub	sp, #88	; 0x58
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80152f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80152f6:	eeb0 4a40 	vmov.f32	s8, s0
 80152fa:	eef0 4a60 	vmov.f32	s9, s1
 80152fe:	eeb0 5a41 	vmov.f32	s10, s2
 8015302:	eef0 5a61 	vmov.f32	s11, s3
 8015306:	eeb0 6a42 	vmov.f32	s12, s4
 801530a:	eef0 6a62 	vmov.f32	s13, s5
 801530e:	eeb0 7a43 	vmov.f32	s14, s6
 8015312:	eef0 7a63 	vmov.f32	s15, s7
 8015316:	4613      	mov	r3, r2
 8015318:	ed87 4a06 	vstr	s8, [r7, #24]
 801531c:	edc7 4a07 	vstr	s9, [r7, #28]
 8015320:	ed87 5a08 	vstr	s10, [r7, #32]
 8015324:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8015328:	ed87 6a02 	vstr	s12, [r7, #8]
 801532c:	edc7 6a03 	vstr	s13, [r7, #12]
 8015330:	ed87 7a04 	vstr	s14, [r7, #16]
 8015334:	edc7 7a05 	vstr	s15, [r7, #20]
 8015338:	71fb      	strb	r3, [r7, #7]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;
 801533a:	2301      	movs	r3, #1
 801533c:	653b      	str	r3, [r7, #80]	; 0x50

    NK_ASSERT(ctx);
 801533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015340:	2b00      	cmp	r3, #0
 8015342:	d105      	bne.n	8015350 <nk_nonblock_begin+0x64>
 8015344:	4baf      	ldr	r3, [pc, #700]	; (8015604 <nk_nonblock_begin+0x318>)
 8015346:	4ab0      	ldr	r2, [pc, #704]	; (8015608 <nk_nonblock_begin+0x31c>)
 8015348:	2173      	movs	r1, #115	; 0x73
 801534a:	48b0      	ldr	r0, [pc, #704]	; (801560c <nk_nonblock_begin+0x320>)
 801534c:	f007 fa86 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8015350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015352:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015356:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801535a:	2b00      	cmp	r3, #0
 801535c:	d105      	bne.n	801536a <nk_nonblock_begin+0x7e>
 801535e:	4bac      	ldr	r3, [pc, #688]	; (8015610 <nk_nonblock_begin+0x324>)
 8015360:	4aa9      	ldr	r2, [pc, #676]	; (8015608 <nk_nonblock_begin+0x31c>)
 8015362:	2174      	movs	r1, #116	; 0x74
 8015364:	48a9      	ldr	r0, [pc, #676]	; (801560c <nk_nonblock_begin+0x320>)
 8015366:	f007 fa79 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015370:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015378:	2b00      	cmp	r3, #0
 801537a:	d105      	bne.n	8015388 <nk_nonblock_begin+0x9c>
 801537c:	4ba5      	ldr	r3, [pc, #660]	; (8015614 <nk_nonblock_begin+0x328>)
 801537e:	4aa2      	ldr	r2, [pc, #648]	; (8015608 <nk_nonblock_begin+0x31c>)
 8015380:	2175      	movs	r1, #117	; 0x75
 8015382:	48a2      	ldr	r0, [pc, #648]	; (801560c <nk_nonblock_begin+0x320>)
 8015384:	f007 fa6a 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538a:	2b00      	cmp	r3, #0
 801538c:	d00f      	beq.n	80153ae <nk_nonblock_begin+0xc2>
 801538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015390:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015394:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015398:	2b00      	cmp	r3, #0
 801539a:	d008      	beq.n	80153ae <nk_nonblock_begin+0xc2>
 801539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801539e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80153a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80153a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d101      	bne.n	80153b2 <nk_nonblock_begin+0xc6>
        return 0;
 80153ae:	2300      	movs	r3, #0
 80153b0:	e146      	b.n	8015640 <nk_nonblock_begin+0x354>

    /* popups cannot have popups */
    win = ctx->current;
 80153b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80153b8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80153bc:	647b      	str	r3, [r7, #68]	; 0x44
    panel = win->layout;
 80153be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80153c4:	643b      	str	r3, [r7, #64]	; 0x40
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 80153c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153c8:	781b      	ldrb	r3, [r3, #0]
 80153ca:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d005      	beq.n	80153de <nk_nonblock_begin+0xf2>
 80153d2:	4b91      	ldr	r3, [pc, #580]	; (8015618 <nk_nonblock_begin+0x32c>)
 80153d4:	4a8c      	ldr	r2, [pc, #560]	; (8015608 <nk_nonblock_begin+0x31c>)
 80153d6:	217c      	movs	r1, #124	; 0x7c
 80153d8:	488c      	ldr	r0, [pc, #560]	; (801560c <nk_nonblock_begin+0x320>)
 80153da:	f007 fa3f 	bl	801c85c <__assert_func>
    (void)panel;
    popup = win->popup.win;
 80153de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80153e4:	657b      	str	r3, [r7, #84]	; 0x54
    if (!popup) {
 80153e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d11b      	bne.n	8015424 <nk_nonblock_begin+0x138>
        /* create window for nonblocking popup */
        popup = (struct nk_window*)nk_create_window(ctx);
 80153ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153ee:	f006 f99d 	bl	801b72c <nk_create_window>
 80153f2:	6578      	str	r0, [r7, #84]	; 0x54
        popup->parent = win;
 80153f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80153f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 80153fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015400:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.type = panel_type;
 8015404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015406:	79fa      	ldrb	r2, [r7, #7]
 8015408:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 801540c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801540e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8015412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015414:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8015418:	330c      	adds	r3, #12
 801541a:	2201      	movs	r2, #1
 801541c:	4619      	mov	r1, r3
 801541e:	f7fa f955 	bl	800f6cc <nk_command_buffer_init>
 8015422:	e03a      	b.n	801549a <nk_nonblock_begin+0x1ae>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	2100      	movs	r1, #0
 8015428:	4618      	mov	r0, r3
 801542a:	f7fc f89e 	bl	801156a <nk_input_is_mouse_pressed>
 801542e:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8015430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015432:	ed97 6a06 	vldr	s12, [r7, #24]
 8015436:	edd7 6a07 	vldr	s13, [r7, #28]
 801543a:	ed97 7a08 	vldr	s14, [r7, #32]
 801543e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015442:	eeb0 0a46 	vmov.f32	s0, s12
 8015446:	eef0 0a66 	vmov.f32	s1, s13
 801544a:	eeb0 1a47 	vmov.f32	s2, s14
 801544e:	eef0 1a67 	vmov.f32	s3, s15
 8015452:	4618      	mov	r0, r3
 8015454:	f7fb ffcd 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 8015458:	63b8      	str	r0, [r7, #56]	; 0x38
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 801545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545c:	ed97 6a02 	vldr	s12, [r7, #8]
 8015460:	edd7 6a03 	vldr	s13, [r7, #12]
 8015464:	ed97 7a04 	vldr	s14, [r7, #16]
 8015468:	edd7 7a05 	vldr	s15, [r7, #20]
 801546c:	eeb0 0a46 	vmov.f32	s0, s12
 8015470:	eef0 0a66 	vmov.f32	s1, s13
 8015474:	eeb0 1a47 	vmov.f32	s2, s14
 8015478:	eef0 1a67 	vmov.f32	s3, s15
 801547c:	4618      	mov	r0, r3
 801547e:	f7fb ffb8 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 8015482:	6378      	str	r0, [r7, #52]	; 0x34
        if (pressed && (!in_body || in_header))
 8015484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015486:	2b00      	cmp	r3, #0
 8015488:	d007      	beq.n	801549a <nk_nonblock_begin+0x1ae>
 801548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801548c:	2b00      	cmp	r3, #0
 801548e:	d002      	beq.n	8015496 <nk_nonblock_begin+0x1aa>
 8015490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <nk_nonblock_begin+0x1ae>
            is_active = nk_false;
 8015496:	2300      	movs	r3, #0
 8015498:	653b      	str	r3, [r7, #80]	; 0x50
    }
    win->popup.header = header;
 801549a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801549c:	f503 7498 	add.w	r4, r3, #304	; 0x130
 80154a0:	f107 0308 	add.w	r3, r7, #8
 80154a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
 80154aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d113      	bne.n	80154d8 <nk_nonblock_begin+0x1ec>
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 80154b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80154b6:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 80154b8:	e009      	b.n	80154ce <nk_nonblock_begin+0x1e2>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 80154ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80154c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154c4:	605a      	str	r2, [r3, #4]
            root = root->parent;
 80154c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154c8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80154cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 80154ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d1f2      	bne.n	80154ba <nk_nonblock_begin+0x1ce>
        }
        return is_active;
 80154d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154d6:	e0b3      	b.n	8015640 <nk_nonblock_begin+0x354>
    }
    popup->bounds = body;
 80154d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154da:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80154de:	f107 0318 	add.w	r3, r7, #24
 80154e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->parent = win;
 80154e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80154ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 80154f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154f2:	f7fd fcaf 	bl	8012e54 <nk_create_panel>
 80154f6:	4602      	mov	r2, r0
 80154f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 80154fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015502:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 8015504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015508:	f043 0201 	orr.w	r2, r3, #1
 801550c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801550e:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_DYNAMIC;
 8015510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015514:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801551a:	649a      	str	r2, [r3, #72]	; 0x48
    popup->seq = ctx->seq;
 801551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801551e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015522:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8015526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015528:	601a      	str	r2, [r3, #0]
    win->popup.active = 1;
 801552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801552c:	2201      	movs	r2, #1
 801552e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 8015532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015538:	2b00      	cmp	r3, #0
 801553a:	d105      	bne.n	8015548 <nk_nonblock_begin+0x25c>
 801553c:	4b37      	ldr	r3, [pc, #220]	; (801561c <nk_nonblock_begin+0x330>)
 801553e:	4a32      	ldr	r2, [pc, #200]	; (8015608 <nk_nonblock_begin+0x31c>)
 8015540:	21a6      	movs	r1, #166	; 0xa6
 8015542:	4832      	ldr	r0, [pc, #200]	; (801560c <nk_nonblock_begin+0x320>)
 8015544:	f007 f98a 	bl	801c85c <__assert_func>

    nk_start_popup(ctx, win);
 8015548:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801554a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801554c:	f7f9 fbfe 	bl	800ed4c <nk_start_popup>
    popup->buffer = win->buffer;
 8015550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015554:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8015558:	f103 0564 	add.w	r5, r3, #100	; 0x64
 801555c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801555e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015564:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015568:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 801556c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801556e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8015572:	4b2b      	ldr	r3, [pc, #172]	; (8015620 <nk_nonblock_begin+0x334>)
 8015574:	ed93 6a00 	vldr	s12, [r3]
 8015578:	edd3 6a01 	vldr	s13, [r3, #4]
 801557c:	ed93 7a02 	vldr	s14, [r3, #8]
 8015580:	edd3 7a03 	vldr	s15, [r3, #12]
 8015584:	eeb0 0a46 	vmov.f32	s0, s12
 8015588:	eef0 0a66 	vmov.f32	s1, s13
 801558c:	eeb0 1a47 	vmov.f32	s2, s14
 8015590:	eef0 1a67 	vmov.f32	s3, s15
 8015594:	4610      	mov	r0, r2
 8015596:	f7fa f96b 	bl	800f870 <nk_push_scissor>
    ctx->current = popup;
 801559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80155a0:	461a      	mov	r2, r3
 80155a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155a4:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658

    nk_panel_begin(ctx, 0, panel_type);
 80155a8:	79fb      	ldrb	r3, [r7, #7]
 80155aa:	461a      	mov	r2, r3
 80155ac:	2100      	movs	r1, #0
 80155ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80155b0:	f7fd febe 	bl	8013330 <nk_panel_begin>
    win->buffer = popup->buffer;
 80155b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155b8:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80155bc:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80155c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80155cc:	e884 0003 	stmia.w	r4, {r0, r1}
    popup->layout->parent = win->layout;
 80155d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155d8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80155dc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 80155e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80155e8:	325c      	adds	r2, #92	; 0x5c
 80155ea:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 80155ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80155f4:	3260      	adds	r2, #96	; 0x60
 80155f6:	61da      	str	r2, [r3, #28]

    /* set read only mode to all parent panels */
    {struct nk_panel *root;
    root = win->layout;
 80155f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80155fe:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8015600:	e01a      	b.n	8015638 <nk_nonblock_begin+0x34c>
 8015602:	bf00      	nop
 8015604:	08020564 	.word	0x08020564
 8015608:	08021730 	.word	0x08021730
 801560c:	08020568 	.word	0x08020568
 8015610:	0802058c 	.word	0x0802058c
 8015614:	0802059c 	.word	0x0802059c
 8015618:	08020604 	.word	0x08020604
 801561c:	08020628 	.word	0x08020628
 8015620:	08021720 	.word	0x08021720
        root->flags |= NK_WINDOW_ROM;
 8015624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801562e:	605a      	str	r2, [r3, #4]
        root = root->parent;
 8015630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015632:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015636:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8015638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801563a:	2b00      	cmp	r3, #0
 801563c:	d1f2      	bne.n	8015624 <nk_nonblock_begin+0x338>
    }}
    return is_active;
 801563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8015640:	4618      	mov	r0, r3
 8015642:	3758      	adds	r7, #88	; 0x58
 8015644:	46bd      	mov	sp, r7
 8015646:	bdb0      	pop	{r4, r5, r7, pc}

08015648 <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b084      	sub	sp, #16
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    NK_ASSERT(ctx);
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d105      	bne.n	8015662 <nk_popup_close+0x1a>
 8015656:	4b1d      	ldr	r3, [pc, #116]	; (80156cc <nk_popup_close+0x84>)
 8015658:	4a1d      	ldr	r2, [pc, #116]	; (80156d0 <nk_popup_close+0x88>)
 801565a:	21c0      	movs	r1, #192	; 0xc0
 801565c:	481d      	ldr	r0, [pc, #116]	; (80156d4 <nk_popup_close+0x8c>)
 801565e:	f007 f8fd 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current) return;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d02c      	beq.n	80156c2 <nk_popup_close+0x7a>
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801566e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015672:	2b00      	cmp	r3, #0
 8015674:	d025      	beq.n	80156c2 <nk_popup_close+0x7a>

    popup = ctx->current;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801567c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015680:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(popup->parent);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8015688:	2b00      	cmp	r3, #0
 801568a:	d105      	bne.n	8015698 <nk_popup_close+0x50>
 801568c:	4b12      	ldr	r3, [pc, #72]	; (80156d8 <nk_popup_close+0x90>)
 801568e:	4a10      	ldr	r2, [pc, #64]	; (80156d0 <nk_popup_close+0x88>)
 8015690:	21c4      	movs	r1, #196	; 0xc4
 8015692:	4810      	ldr	r0, [pc, #64]	; (80156d4 <nk_popup_close+0x8c>)
 8015694:	f007 f8e2 	bl	801c85c <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d105      	bne.n	80156b4 <nk_popup_close+0x6c>
 80156a8:	4b0c      	ldr	r3, [pc, #48]	; (80156dc <nk_popup_close+0x94>)
 80156aa:	4a09      	ldr	r2, [pc, #36]	; (80156d0 <nk_popup_close+0x88>)
 80156ac:	21c5      	movs	r1, #197	; 0xc5
 80156ae:	4809      	ldr	r0, [pc, #36]	; (80156d4 <nk_popup_close+0x8c>)
 80156b0:	f007 f8d4 	bl	801c85c <__assert_func>
    popup->flags |= NK_WINDOW_HIDDEN;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80156b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	649a      	str	r2, [r3, #72]	; 0x48
 80156c0:	e000      	b.n	80156c4 <nk_popup_close+0x7c>
    if (!ctx || !ctx->current) return;
 80156c2:	bf00      	nop
}
 80156c4:	3710      	adds	r7, #16
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}
 80156ca:	bf00      	nop
 80156cc:	08020564 	.word	0x08020564
 80156d0:	08021744 	.word	0x08021744
 80156d4:	08020568 	.word	0x08020568
 80156d8:	08020638 	.word	0x08020638
 80156dc:	08020648 	.word	0x08020648

080156e0 <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 80156e0:	b5b0      	push	{r4, r5, r7, lr}
 80156e2:	b086      	sub	sp, #24
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d105      	bne.n	80156fa <nk_popup_end+0x1a>
 80156ee:	4b5a      	ldr	r3, [pc, #360]	; (8015858 <nk_popup_end+0x178>)
 80156f0:	4a5a      	ldr	r2, [pc, #360]	; (801585c <nk_popup_end+0x17c>)
 80156f2:	21ce      	movs	r1, #206	; 0xce
 80156f4:	485a      	ldr	r0, [pc, #360]	; (8015860 <nk_popup_end+0x180>)
 80156f6:	f007 f8b1 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015700:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015704:	2b00      	cmp	r3, #0
 8015706:	d105      	bne.n	8015714 <nk_popup_end+0x34>
 8015708:	4b56      	ldr	r3, [pc, #344]	; (8015864 <nk_popup_end+0x184>)
 801570a:	4a54      	ldr	r2, [pc, #336]	; (801585c <nk_popup_end+0x17c>)
 801570c:	21cf      	movs	r1, #207	; 0xcf
 801570e:	4854      	ldr	r0, [pc, #336]	; (8015860 <nk_popup_end+0x180>)
 8015710:	f007 f8a4 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801571a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801571e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015722:	2b00      	cmp	r3, #0
 8015724:	d105      	bne.n	8015732 <nk_popup_end+0x52>
 8015726:	4b50      	ldr	r3, [pc, #320]	; (8015868 <nk_popup_end+0x188>)
 8015728:	4a4c      	ldr	r2, [pc, #304]	; (801585c <nk_popup_end+0x17c>)
 801572a:	21d0      	movs	r1, #208	; 0xd0
 801572c:	484c      	ldr	r0, [pc, #304]	; (8015860 <nk_popup_end+0x180>)
 801572e:	f007 f895 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2b00      	cmp	r3, #0
 8015736:	f000 8089 	beq.w	801584c <nk_popup_end+0x16c>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015740:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015744:	2b00      	cmp	r3, #0
 8015746:	f000 8081 	beq.w	801584c <nk_popup_end+0x16c>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015750:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015758:	2b00      	cmp	r3, #0
 801575a:	d077      	beq.n	801584c <nk_popup_end+0x16c>
        return;

    popup = ctx->current;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015762:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015766:	613b      	str	r3, [r7, #16]
    if (!popup->parent) return;
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801576e:	2b00      	cmp	r3, #0
 8015770:	d06e      	beq.n	8015850 <nk_popup_end+0x170>
    win = popup->parent;
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8015778:	60fb      	str	r3, [r7, #12]
    if (popup->flags & NK_WINDOW_HIDDEN) {
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801577e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015782:	2b00      	cmp	r3, #0
 8015784:	d015      	beq.n	80157b2 <nk_popup_end+0xd2>
        struct nk_panel *root;
        root = win->layout;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801578c:	617b      	str	r3, [r7, #20]
        while (root) {
 801578e:	e009      	b.n	80157a4 <nk_popup_end+0xc4>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	605a      	str	r2, [r3, #4]
            root = root->parent;
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80157a2:	617b      	str	r3, [r7, #20]
        while (root) {
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d1f2      	bne.n	8015790 <nk_popup_end+0xb0>
        }
        win->popup.active = 0;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2200      	movs	r2, #0
 80157ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80157b8:	4b2c      	ldr	r3, [pc, #176]	; (801586c <nk_popup_end+0x18c>)
 80157ba:	ed93 6a00 	vldr	s12, [r3]
 80157be:	edd3 6a01 	vldr	s13, [r3, #4]
 80157c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80157c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80157ca:	eeb0 0a46 	vmov.f32	s0, s12
 80157ce:	eef0 0a66 	vmov.f32	s1, s13
 80157d2:	eeb0 1a47 	vmov.f32	s2, s14
 80157d6:	eef0 1a67 	vmov.f32	s3, s15
 80157da:	4610      	mov	r0, r2
 80157dc:	f7fa f848 	bl	800f870 <nk_push_scissor>
    nk_end(ctx);
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f006 fe5d 	bl	801c4a0 <nk_end>

    win->buffer = popup->buffer;
 80157e6:	68fa      	ldr	r2, [r7, #12]
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80157ee:	f103 0564 	add.w	r5, r3, #100	; 0x64
 80157f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80157fe:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_finish_popup(ctx, win);
 8015802:	68f9      	ldr	r1, [r7, #12]
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f7f9 fae5 	bl	800edd4 <nk_finish_popup>
    ctx->current = win;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015810:	461a      	mov	r2, r3
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015824:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8015828:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 801582c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8015830:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8015834:	eeb0 0a46 	vmov.f32	s0, s12
 8015838:	eef0 0a66 	vmov.f32	s1, s13
 801583c:	eeb0 1a47 	vmov.f32	s2, s14
 8015840:	eef0 1a67 	vmov.f32	s3, s15
 8015844:	4610      	mov	r0, r2
 8015846:	f7fa f813 	bl	800f870 <nk_push_scissor>
 801584a:	e002      	b.n	8015852 <nk_popup_end+0x172>
        return;
 801584c:	bf00      	nop
 801584e:	e000      	b.n	8015852 <nk_popup_end+0x172>
    if (!popup->parent) return;
 8015850:	bf00      	nop
}
 8015852:	3718      	adds	r7, #24
 8015854:	46bd      	mov	sp, r7
 8015856:	bdb0      	pop	{r4, r5, r7, pc}
 8015858:	08020564 	.word	0x08020564
 801585c:	08021754 	.word	0x08021754
 8015860:	08020568 	.word	0x08020568
 8015864:	0802058c 	.word	0x0802058c
 8015868:	0802059c 	.word	0x0802059c
 801586c:	08021720 	.word	0x08021720

08015870 <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b092      	sub	sp, #72	; 0x48
 8015874:	af00      	add	r7, sp, #0
 8015876:	61f8      	str	r0, [r7, #28]
 8015878:	61b9      	str	r1, [r7, #24]
 801587a:	617a      	str	r2, [r7, #20]
 801587c:	613b      	str	r3, [r7, #16]
 801587e:	ed87 0a03 	vstr	s0, [r7, #12]
 8015882:	edc7 0a02 	vstr	s1, [r7, #8]
 8015886:	ed87 1a01 	vstr	s2, [r7, #4]
    nk_flags ws = 0;
 801588a:	2300      	movs	r3, #0
 801588c:	627b      	str	r3, [r7, #36]	; 0x24
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	f003 0302 	and.w	r3, r3, #2
 8015896:	2b00      	cmp	r3, #0
 8015898:	d003      	beq.n	80158a2 <nk_scrollbar_behavior+0x32>
 801589a:	69fb      	ldr	r3, [r7, #28]
 801589c:	2206      	movs	r2, #6
 801589e:	601a      	str	r2, [r3, #0]
 80158a0:	e002      	b.n	80158a8 <nk_scrollbar_behavior+0x38>
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	2204      	movs	r2, #4
 80158a6:	601a      	str	r2, [r3, #0]
    if (!in) return scroll_offset;
 80158a8:	69bb      	ldr	r3, [r7, #24]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d101      	bne.n	80158b2 <nk_scrollbar_behavior+0x42>
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	e35c      	b.n	8015f6c <nk_scrollbar_behavior+0x6fc>

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80158b8:	647b      	str	r3, [r7, #68]	; 0x44
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80158c0:	643b      	str	r3, [r7, #64]	; 0x40
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 80158c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158c4:	ed93 6a00 	vldr	s12, [r3]
 80158c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80158cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80158d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80158d4:	2201      	movs	r2, #1
 80158d6:	eeb0 0a46 	vmov.f32	s0, s12
 80158da:	eef0 0a66 	vmov.f32	s1, s13
 80158de:	eeb0 1a47 	vmov.f32	s2, s14
 80158e2:	eef0 1a67 	vmov.f32	s3, s15
 80158e6:	2100      	movs	r1, #0
 80158e8:	69b8      	ldr	r0, [r7, #24]
 80158ea:	f7fb fd3b 	bl	8011364 <nk_input_has_mouse_click_down_in_rect>
 80158ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	ed93 6a00 	vldr	s12, [r3]
 80158f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80158fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80158fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8015902:	eeb0 0a46 	vmov.f32	s0, s12
 8015906:	eef0 0a66 	vmov.f32	s1, s13
 801590a:	eeb0 1a47 	vmov.f32	s2, s14
 801590e:	eef0 1a67 	vmov.f32	s3, s15
 8015912:	69b8      	ldr	r0, [r7, #24]
 8015914:	f7fb fd6d 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d002      	beq.n	8015924 <nk_scrollbar_behavior+0xb4>
        *state = NK_WIDGET_STATE_HOVERED;
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	2212      	movs	r2, #18
 8015922:	601a      	str	r2, [r3, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 8015924:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015928:	2b00      	cmp	r3, #0
 801592a:	d103      	bne.n	8015934 <nk_scrollbar_behavior+0xc4>
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8015932:	e002      	b.n	801593a <nk_scrollbar_behavior+0xca>
 8015934:	69bb      	ldr	r3, [r7, #24]
 8015936:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801593a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801593c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801593e:	2b00      	cmp	r3, #0
 8015940:	f000 8122 	beq.w	8015b88 <nk_scrollbar_behavior+0x318>
 8015944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015946:	2b00      	cmp	r3, #0
 8015948:	f000 811e 	beq.w	8015b88 <nk_scrollbar_behavior+0x318>
 801594c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801594e:	2b00      	cmp	r3, #0
 8015950:	f040 811a 	bne.w	8015b88 <nk_scrollbar_behavior+0x318>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	2222      	movs	r2, #34	; 0x22
 8015958:	601a      	str	r2, [r3, #0]
        if (o == NK_VERTICAL) {
 801595a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801595e:	2b00      	cmp	r3, #0
 8015960:	f040 8089 	bne.w	8015a76 <nk_scrollbar_behavior+0x206>
            float cursor_y;
            pixel = in->mouse.delta.y;
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 801596a:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->h) * target;
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	ed93 7a03 	vldr	s14, [r3, #12]
 8015972:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8015976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801597a:	ed97 7a02 	vldr	s14, [r7, #8]
 801597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015982:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 8015986:	ed97 7a03 	vldr	s14, [r7, #12]
 801598a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801598e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	edd3 7a03 	vldr	s15, [r3, #12]
 8015998:	edd7 6a02 	vldr	s13, [r7, #8]
 801599c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80159a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a8:	d50e      	bpl.n	80159c8 <nk_scrollbar_behavior+0x158>
 80159aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80159ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80159b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80159ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159be:	bf4c      	ite	mi
 80159c0:	2301      	movmi	r3, #1
 80159c2:	2300      	movpl	r3, #0
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	e00e      	b.n	80159e6 <nk_scrollbar_behavior+0x176>
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80159ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80159d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80159da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159de:	bf4c      	ite	mi
 80159e0:	2301      	movmi	r3, #1
 80159e2:	2300      	movpl	r3, #0
 80159e4:	b2db      	uxtb	r3, r3
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d002      	beq.n	80159f0 <nk_scrollbar_behavior+0x180>
 80159ea:	eddf 7acd 	vldr	s15, [pc, #820]	; 8015d20 <nk_scrollbar_behavior+0x4b0>
 80159ee:	e01f      	b.n	8015a30 <nk_scrollbar_behavior+0x1c0>
 80159f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80159f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80159f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a02:	edd7 6a02 	vldr	s13, [r7, #8]
 8015a06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a12:	d506      	bpl.n	8015a22 <nk_scrollbar_behavior+0x1b2>
 8015a14:	ed97 7a03 	vldr	s14, [r7, #12]
 8015a18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a20:	e006      	b.n	8015a30 <nk_scrollbar_behavior+0x1c0>
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a28:	ed97 7a02 	vldr	s14, [r7, #8]
 8015a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a30:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8015a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8015a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8015a42:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a54:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 8015a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8015a5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015a62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015a66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8015a74:	e238      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
 8015a76:	69bb      	ldr	r3, [r7, #24]
 8015a78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8015a7c:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->w) * target;
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	ed93 7a02 	vldr	s14, [r3, #8]
 8015a84:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8015a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015a8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8015a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 8015a98:	ed97 7a03 	vldr	s14, [r7, #12]
 8015a9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8015aaa:	edd7 6a02 	vldr	s13, [r7, #8]
 8015aae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aba:	d50e      	bpl.n	8015ada <nk_scrollbar_behavior+0x26a>
 8015abc:	ed97 7a03 	vldr	s14, [r7, #12]
 8015ac0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ad0:	bf4c      	ite	mi
 8015ad2:	2301      	movmi	r3, #1
 8015ad4:	2300      	movpl	r3, #0
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	e00e      	b.n	8015af8 <nk_scrollbar_behavior+0x288>
 8015ada:	693b      	ldr	r3, [r7, #16]
 8015adc:	edd3 7a02 	vldr	s15, [r3, #8]
 8015ae0:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af0:	bf4c      	ite	mi
 8015af2:	2301      	movmi	r3, #1
 8015af4:	2300      	movpl	r3, #0
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d002      	beq.n	8015b02 <nk_scrollbar_behavior+0x292>
 8015afc:	eddf 7a88 	vldr	s15, [pc, #544]	; 8015d20 <nk_scrollbar_behavior+0x4b0>
 8015b00:	e01f      	b.n	8015b42 <nk_scrollbar_behavior+0x2d2>
 8015b02:	ed97 7a03 	vldr	s14, [r7, #12]
 8015b06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	edd3 7a02 	vldr	s15, [r3, #8]
 8015b14:	edd7 6a02 	vldr	s13, [r7, #8]
 8015b18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b24:	d506      	bpl.n	8015b34 <nk_scrollbar_behavior+0x2c4>
 8015b26:	ed97 7a03 	vldr	s14, [r7, #12]
 8015b2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b32:	e006      	b.n	8015b42 <nk_scrollbar_behavior+0x2d2>
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8015b3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8015b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b42:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	ed93 7a00 	vldr	s14, [r3]
 8015b4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8015b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8015b54:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8015b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b66:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 8015b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8015b70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015b74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015b78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b80:	69bb      	ldr	r3, [r7, #24]
 8015b82:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8015b86:	e1af      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8015b88:	211d      	movs	r1, #29
 8015b8a:	69b8      	ldr	r0, [r7, #24]
 8015b8c:	f7fb fd10 	bl	80115b0 <nk_input_is_key_pressed>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d006      	beq.n	8015ba4 <nk_scrollbar_behavior+0x334>
 8015b96:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d102      	bne.n	8015ba4 <nk_scrollbar_behavior+0x334>
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d11a      	bne.n	8015bda <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 8015ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ba6:	ed93 6a00 	vldr	s12, [r3]
 8015baa:	edd3 6a01 	vldr	s13, [r3, #4]
 8015bae:	ed93 7a02 	vldr	s14, [r3, #8]
 8015bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8015bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bba:	2200      	movs	r2, #0
 8015bbc:	69b9      	ldr	r1, [r7, #24]
 8015bbe:	eeb0 0a46 	vmov.f32	s0, s12
 8015bc2:	eef0 0a66 	vmov.f32	s1, s13
 8015bc6:	eeb0 1a47 	vmov.f32	s2, s14
 8015bca:	eef0 1a67 	vmov.f32	s3, s15
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7f7 fb98 	bl	800d304 <nk_button_behavior>
 8015bd4:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d035      	beq.n	8015c46 <nk_scrollbar_behavior+0x3d6>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 8015bda:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d118      	bne.n	8015c14 <nk_scrollbar_behavior+0x3a4>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	edd3 7a03 	vldr	s15, [r3, #12]
 8015be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8015bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf8:	dd07      	ble.n	8015c0a <nk_scrollbar_behavior+0x39a>
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	edd3 7a03 	vldr	s15, [r3, #12]
 8015c00:	ed97 7a03 	vldr	s14, [r7, #12]
 8015c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c08:	e001      	b.n	8015c0e <nk_scrollbar_behavior+0x39e>
 8015c0a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015d20 <nk_scrollbar_behavior+0x4b0>
 8015c0e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8015c12:	e169      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8015c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8015c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c2a:	dd07      	ble.n	8015c3c <nk_scrollbar_behavior+0x3cc>
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8015c32:	ed97 7a03 	vldr	s14, [r7, #12]
 8015c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c3a:	e001      	b.n	8015c40 <nk_scrollbar_behavior+0x3d0>
 8015c3c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8015d20 <nk_scrollbar_behavior+0x4b0>
 8015c40:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8015c44:	e150      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8015c46:	211c      	movs	r1, #28
 8015c48:	69b8      	ldr	r0, [r7, #24]
 8015c4a:	f7fb fcb1 	bl	80115b0 <nk_input_is_key_pressed>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d006      	beq.n	8015c62 <nk_scrollbar_behavior+0x3f2>
 8015c54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d102      	bne.n	8015c62 <nk_scrollbar_behavior+0x3f2>
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d11a      	bne.n	8015c98 <nk_scrollbar_behavior+0x428>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 8015c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015c64:	ed93 6a00 	vldr	s12, [r3]
 8015c68:	edd3 6a01 	vldr	s13, [r3, #4]
 8015c6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8015c70:	edd3 7a03 	vldr	s15, [r3, #12]
 8015c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c78:	2200      	movs	r2, #0
 8015c7a:	69b9      	ldr	r1, [r7, #24]
 8015c7c:	eeb0 0a46 	vmov.f32	s0, s12
 8015c80:	eef0 0a66 	vmov.f32	s1, s13
 8015c84:	eeb0 1a47 	vmov.f32	s2, s14
 8015c88:	eef0 1a67 	vmov.f32	s3, s15
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7f7 fb39 	bl	800d304 <nk_button_behavior>
 8015c92:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d04f      	beq.n	8015d38 <nk_scrollbar_behavior+0x4c8>
        /* scroll page down by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 8015c98:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d124      	bne.n	8015cea <nk_scrollbar_behavior+0x47a>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	ed93 7a03 	vldr	s14, [r3, #12]
 8015ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8015caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cb4:	edd7 6a02 	vldr	s13, [r7, #8]
 8015cb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc4:	d507      	bpl.n	8015cd6 <nk_scrollbar_behavior+0x466>
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8015ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8015cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cd4:	e006      	b.n	8015ce4 <nk_scrollbar_behavior+0x474>
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ce4:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8015ce8:	e0fe      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	ed93 7a02 	vldr	s14, [r3, #8]
 8015cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8015cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8015cfe:	edd7 6a02 	vldr	s13, [r7, #8]
 8015d02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0e:	d509      	bpl.n	8015d24 <nk_scrollbar_behavior+0x4b4>
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	ed93 7a02 	vldr	s14, [r3, #8]
 8015d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8015d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d1e:	e008      	b.n	8015d32 <nk_scrollbar_behavior+0x4c2>
 8015d20:	00000000 	.word	0x00000000
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	edd3 7a02 	vldr	s15, [r3, #8]
 8015d2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8015d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d32:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8015d36:	e0d7      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
    } else if (has_scrolling) {
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	f000 80d4 	beq.w	8015ee8 <nk_scrollbar_behavior+0x678>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 8015d40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d4c:	d407      	bmi.n	8015d5e <nk_scrollbar_behavior+0x4ee>
 8015d4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5a:	f340 80a2 	ble.w	8015ea2 <nk_scrollbar_behavior+0x632>
            /* update cursor by mouse scrolling */
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 8015d5e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015d62:	eeb1 7a67 	vneg.f32	s14, s15
 8015d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8015d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8015d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d76:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8015d7a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d147      	bne.n	8015e12 <nk_scrollbar_behavior+0x5a2>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	edd3 7a03 	vldr	s15, [r3, #12]
 8015d88:	ed97 7a02 	vldr	s14, [r7, #8]
 8015d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d90:	ed97 7a03 	vldr	s14, [r7, #12]
 8015d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d9c:	d50a      	bpl.n	8015db4 <nk_scrollbar_behavior+0x544>
 8015d9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8015da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015daa:	bf4c      	ite	mi
 8015dac:	2301      	movmi	r3, #1
 8015dae:	2300      	movpl	r3, #0
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	e00e      	b.n	8015dd2 <nk_scrollbar_behavior+0x562>
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8015dba:	ed97 7a02 	vldr	s14, [r7, #8]
 8015dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dca:	bf4c      	ite	mi
 8015dcc:	2301      	movmi	r3, #1
 8015dce:	2300      	movpl	r3, #0
 8015dd0:	b2db      	uxtb	r3, r3
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d002      	beq.n	8015ddc <nk_scrollbar_behavior+0x56c>
 8015dd6:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 8015d20 <nk_scrollbar_behavior+0x4b0>
 8015dda:	e017      	b.n	8015e0c <nk_scrollbar_behavior+0x59c>
 8015ddc:	693b      	ldr	r3, [r7, #16]
 8015dde:	edd3 7a03 	vldr	s15, [r3, #12]
 8015de2:	ed97 7a02 	vldr	s14, [r7, #8]
 8015de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dea:	ed97 7a03 	vldr	s14, [r7, #12]
 8015dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df6:	d502      	bpl.n	8015dfe <nk_scrollbar_behavior+0x58e>
 8015df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8015dfc:	e006      	b.n	8015e0c <nk_scrollbar_behavior+0x59c>
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e04:	ed97 7a02 	vldr	s14, [r7, #8]
 8015e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e0c:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8015e10:	e06a      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e18:	ed97 7a02 	vldr	s14, [r7, #8]
 8015e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e20:	ed97 7a03 	vldr	s14, [r7, #12]
 8015e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2c:	d50a      	bpl.n	8015e44 <nk_scrollbar_behavior+0x5d4>
 8015e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3a:	bf4c      	ite	mi
 8015e3c:	2301      	movmi	r3, #1
 8015e3e:	2300      	movpl	r3, #0
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	e00e      	b.n	8015e62 <nk_scrollbar_behavior+0x5f2>
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8015e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5a:	bf4c      	ite	mi
 8015e5c:	2301      	movmi	r3, #1
 8015e5e:	2300      	movpl	r3, #0
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d002      	beq.n	8015e6c <nk_scrollbar_behavior+0x5fc>
 8015e66:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8015d20 <nk_scrollbar_behavior+0x4b0>
 8015e6a:	e017      	b.n	8015e9c <nk_scrollbar_behavior+0x62c>
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e72:	ed97 7a02 	vldr	s14, [r7, #8]
 8015e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8015e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e86:	d502      	bpl.n	8015e8e <nk_scrollbar_behavior+0x61e>
 8015e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e8c:	e006      	b.n	8015e9c <nk_scrollbar_behavior+0x62c>
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e94:	ed97 7a02 	vldr	s14, [r7, #8]
 8015e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e9c:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8015ea0:	e022      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 8015ea2:	211a      	movs	r1, #26
 8015ea4:	69b8      	ldr	r0, [r7, #24]
 8015ea6:	f7fb fb83 	bl	80115b0 <nk_input_is_key_pressed>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d007      	beq.n	8015ec0 <nk_scrollbar_behavior+0x650>
            /* update cursor to the beginning  */
            if (o == NK_VERTICAL) scroll_offset = 0;
 8015eb0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d117      	bne.n	8015ee8 <nk_scrollbar_behavior+0x678>
 8015eb8:	f04f 0300 	mov.w	r3, #0
 8015ebc:	60fb      	str	r3, [r7, #12]
 8015ebe:	e013      	b.n	8015ee8 <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 8015ec0:	211b      	movs	r1, #27
 8015ec2:	69b8      	ldr	r0, [r7, #24]
 8015ec4:	f7fb fb74 	bl	80115b0 <nk_input_is_key_pressed>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00c      	beq.n	8015ee8 <nk_scrollbar_behavior+0x678>
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 8015ece:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d108      	bne.n	8015ee8 <nk_scrollbar_behavior+0x678>
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	edd3 7a03 	vldr	s15, [r3, #12]
 8015edc:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ee4:	edc7 7a03 	vstr	s15, [r7, #12]
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8015ee8:	69fb      	ldr	r3, [r7, #28]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	f003 0310 	and.w	r3, r3, #16
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d01d      	beq.n	8015f30 <nk_scrollbar_behavior+0x6c0>
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	ed93 6a00 	vldr	s12, [r3]
 8015efa:	edd3 6a01 	vldr	s13, [r3, #4]
 8015efe:	ed93 7a02 	vldr	s14, [r3, #8]
 8015f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8015f06:	eeb0 0a46 	vmov.f32	s0, s12
 8015f0a:	eef0 0a66 	vmov.f32	s1, s13
 8015f0e:	eeb0 1a47 	vmov.f32	s2, s14
 8015f12:	eef0 1a67 	vmov.f32	s3, s15
 8015f16:	69b8      	ldr	r0, [r7, #24]
 8015f18:	f7fb fabd 	bl	8011496 <nk_input_is_mouse_prev_hovering_rect>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d106      	bne.n	8015f30 <nk_scrollbar_behavior+0x6c0>
        *state |= NK_WIDGET_STATE_ENTERED;
 8015f22:	69fb      	ldr	r3, [r7, #28]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	f043 0208 	orr.w	r2, r3, #8
 8015f2a:	69fb      	ldr	r3, [r7, #28]
 8015f2c:	601a      	str	r2, [r3, #0]
 8015f2e:	e01c      	b.n	8015f6a <nk_scrollbar_behavior+0x6fa>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	ed93 6a00 	vldr	s12, [r3]
 8015f36:	edd3 6a01 	vldr	s13, [r3, #4]
 8015f3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8015f3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015f42:	eeb0 0a46 	vmov.f32	s0, s12
 8015f46:	eef0 0a66 	vmov.f32	s1, s13
 8015f4a:	eeb0 1a47 	vmov.f32	s2, s14
 8015f4e:	eef0 1a67 	vmov.f32	s3, s15
 8015f52:	69b8      	ldr	r0, [r7, #24]
 8015f54:	f7fb fa9f 	bl	8011496 <nk_input_is_mouse_prev_hovering_rect>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d005      	beq.n	8015f6a <nk_scrollbar_behavior+0x6fa>
        *state |= NK_WIDGET_STATE_LEFT;
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	601a      	str	r2, [r3, #0]
    return scroll_offset;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
}
 8015f6c:	ee07 3a90 	vmov	s15, r3
 8015f70:	eeb0 0a67 	vmov.f32	s0, s15
 8015f74:	3748      	adds	r7, #72	; 0x48
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop

08015f7c <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b086      	sub	sp, #24
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
 8015f88:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	f003 0320 	and.w	r3, r3, #32
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d006      	beq.n	8015fa2 <nk_draw_scrollbar+0x26>
        background = &style->active;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	3338      	adds	r3, #56	; 0x38
 8015f98:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_active;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	3390      	adds	r3, #144	; 0x90
 8015f9e:	613b      	str	r3, [r7, #16]
 8015fa0:	e010      	b.n	8015fc4 <nk_draw_scrollbar+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	f003 0310 	and.w	r3, r3, #16
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d006      	beq.n	8015fba <nk_draw_scrollbar+0x3e>
        background = &style->hover;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	331c      	adds	r3, #28
 8015fb0:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_hover;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	3374      	adds	r3, #116	; 0x74
 8015fb6:	613b      	str	r3, [r7, #16]
 8015fb8:	e004      	b.n	8015fc4 <nk_draw_scrollbar+0x48>
    } else {
        background = &style->normal;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_normal;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	3358      	adds	r3, #88	; 0x58
 8015fc2:	613b      	str	r3, [r7, #16]
    }

    /* draw background */
    switch (background->type) {
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	781b      	ldrb	r3, [r3, #0]
 8015fc8:	2b02      	cmp	r3, #2
 8015fca:	d01e      	beq.n	801600a <nk_draw_scrollbar+0x8e>
 8015fcc:	2b02      	cmp	r3, #2
 8015fce:	dc71      	bgt.n	80160b4 <nk_draw_scrollbar+0x138>
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d033      	beq.n	801603c <nk_draw_scrollbar+0xc0>
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d16d      	bne.n	80160b4 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	1d19      	adds	r1, r3, #4
 8015fdc:	4a74      	ldr	r2, [pc, #464]	; (80161b0 <nk_draw_scrollbar+0x234>)
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	ed93 6a00 	vldr	s12, [r3]
 8015fe4:	edd3 6a01 	vldr	s13, [r3, #4]
 8015fe8:	ed93 7a02 	vldr	s14, [r3, #8]
 8015fec:	edd3 7a03 	vldr	s15, [r3, #12]
 8015ff0:	6812      	ldr	r2, [r2, #0]
 8015ff2:	eeb0 0a46 	vmov.f32	s0, s12
 8015ff6:	eef0 0a66 	vmov.f32	s1, s13
 8015ffa:	eeb0 1a47 	vmov.f32	s2, s14
 8015ffe:	eef0 1a67 	vmov.f32	s3, s15
 8016002:	68f8      	ldr	r0, [r7, #12]
 8016004:	f7fa f90e 	bl	8010224 <nk_draw_image>
            break;
 8016008:	e054      	b.n	80160b4 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801600a:	697b      	ldr	r3, [r7, #20]
 801600c:	1d19      	adds	r1, r3, #4
 801600e:	4a68      	ldr	r2, [pc, #416]	; (80161b0 <nk_draw_scrollbar+0x234>)
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	ed93 6a00 	vldr	s12, [r3]
 8016016:	edd3 6a01 	vldr	s13, [r3, #4]
 801601a:	ed93 7a02 	vldr	s14, [r3, #8]
 801601e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016022:	6812      	ldr	r2, [r2, #0]
 8016024:	eeb0 0a46 	vmov.f32	s0, s12
 8016028:	eef0 0a66 	vmov.f32	s1, s13
 801602c:	eeb0 1a47 	vmov.f32	s2, s14
 8016030:	eef0 1a67 	vmov.f32	s3, s15
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f7fa f9e7 	bl	8010408 <nk_draw_nine_slice>
            break;
 801603a:	e03b      	b.n	80160b4 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 8016042:	697a      	ldr	r2, [r7, #20]
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	ed93 6a00 	vldr	s12, [r3]
 801604a:	edd3 6a01 	vldr	s13, [r3, #4]
 801604e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016052:	edd3 7a03 	vldr	s15, [r3, #12]
 8016056:	6851      	ldr	r1, [r2, #4]
 8016058:	eeb0 2a65 	vmov.f32	s4, s11
 801605c:	eeb0 0a46 	vmov.f32	s0, s12
 8016060:	eef0 0a66 	vmov.f32	s1, s13
 8016064:	eeb0 1a47 	vmov.f32	s2, s14
 8016068:	eef0 1a67 	vmov.f32	s3, s15
 801606c:	68f8      	ldr	r0, [r7, #12]
 801606e:	f7f9 fd7f 	bl	800fb70 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	ed93 6a00 	vldr	s12, [r3]
 8016086:	edd3 6a01 	vldr	s13, [r3, #4]
 801608a:	ed93 7a02 	vldr	s14, [r3, #8]
 801608e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016092:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8016094:	eef0 2a45 	vmov.f32	s5, s10
 8016098:	eeb0 2a65 	vmov.f32	s4, s11
 801609c:	eeb0 0a46 	vmov.f32	s0, s12
 80160a0:	eef0 0a66 	vmov.f32	s1, s13
 80160a4:	eeb0 1a47 	vmov.f32	s2, s14
 80160a8:	eef0 1a67 	vmov.f32	s3, s15
 80160ac:	68f8      	ldr	r0, [r7, #12]
 80160ae:	f7f9 fc57 	bl	800f960 <nk_stroke_rect>
            break;
 80160b2:	bf00      	nop
    }

    /* draw cursor */
    switch (cursor->type) {
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	2b02      	cmp	r3, #2
 80160ba:	d01e      	beq.n	80160fa <nk_draw_scrollbar+0x17e>
 80160bc:	2b02      	cmp	r3, #2
 80160be:	dc72      	bgt.n	80161a6 <nk_draw_scrollbar+0x22a>
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d033      	beq.n	801612c <nk_draw_scrollbar+0x1b0>
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	d16e      	bne.n	80161a6 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	1d19      	adds	r1, r3, #4
 80160cc:	4a38      	ldr	r2, [pc, #224]	; (80161b0 <nk_draw_scrollbar+0x234>)
 80160ce:	6a3b      	ldr	r3, [r7, #32]
 80160d0:	ed93 6a00 	vldr	s12, [r3]
 80160d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80160d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80160dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80160e0:	6812      	ldr	r2, [r2, #0]
 80160e2:	eeb0 0a46 	vmov.f32	s0, s12
 80160e6:	eef0 0a66 	vmov.f32	s1, s13
 80160ea:	eeb0 1a47 	vmov.f32	s2, s14
 80160ee:	eef0 1a67 	vmov.f32	s3, s15
 80160f2:	68f8      	ldr	r0, [r7, #12]
 80160f4:	f7fa f896 	bl	8010224 <nk_draw_image>
            break;
 80160f8:	e055      	b.n	80161a6 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	1d19      	adds	r1, r3, #4
 80160fe:	4a2c      	ldr	r2, [pc, #176]	; (80161b0 <nk_draw_scrollbar+0x234>)
 8016100:	6a3b      	ldr	r3, [r7, #32]
 8016102:	ed93 6a00 	vldr	s12, [r3]
 8016106:	edd3 6a01 	vldr	s13, [r3, #4]
 801610a:	ed93 7a02 	vldr	s14, [r3, #8]
 801610e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016112:	6812      	ldr	r2, [r2, #0]
 8016114:	eeb0 0a46 	vmov.f32	s0, s12
 8016118:	eef0 0a66 	vmov.f32	s1, s13
 801611c:	eeb0 1a47 	vmov.f32	s2, s14
 8016120:	eef0 1a67 	vmov.f32	s3, s15
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f7fa f96f 	bl	8010408 <nk_draw_nine_slice>
            break;
 801612a:	e03c      	b.n	80161a6 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8016132:	693a      	ldr	r2, [r7, #16]
 8016134:	6a3b      	ldr	r3, [r7, #32]
 8016136:	ed93 6a00 	vldr	s12, [r3]
 801613a:	edd3 6a01 	vldr	s13, [r3, #4]
 801613e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016142:	edd3 7a03 	vldr	s15, [r3, #12]
 8016146:	6851      	ldr	r1, [r2, #4]
 8016148:	eeb0 2a65 	vmov.f32	s4, s11
 801614c:	eeb0 0a46 	vmov.f32	s0, s12
 8016150:	eef0 0a66 	vmov.f32	s1, s13
 8016154:	eeb0 1a47 	vmov.f32	s2, s14
 8016158:	eef0 1a67 	vmov.f32	s3, s15
 801615c:	68f8      	ldr	r0, [r7, #12]
 801615e:	f7f9 fd07 	bl	800fb70 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	ed93 5a2e 	vldr	s10, [r3, #184]	; 0xb8
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	6a3b      	ldr	r3, [r7, #32]
 8016172:	ed93 6a00 	vldr	s12, [r3]
 8016176:	edd3 6a01 	vldr	s13, [r3, #4]
 801617a:	ed93 7a02 	vldr	s14, [r3, #8]
 801617e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016182:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8016186:	eef0 2a45 	vmov.f32	s5, s10
 801618a:	eeb0 2a65 	vmov.f32	s4, s11
 801618e:	eeb0 0a46 	vmov.f32	s0, s12
 8016192:	eef0 0a66 	vmov.f32	s1, s13
 8016196:	eeb0 1a47 	vmov.f32	s2, s14
 801619a:	eef0 1a67 	vmov.f32	s3, s15
 801619e:	68f8      	ldr	r0, [r7, #12]
 80161a0:	f7f9 fbde 	bl	800f960 <nk_stroke_rect>
            break;
 80161a4:	bf00      	nop
    }
}
 80161a6:	bf00      	nop
 80161a8:	3718      	adds	r7, #24
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	08021764 	.word	0x08021764

080161b4 <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b0a6      	sub	sp, #152	; 0x98
 80161b8:	af04      	add	r7, sp, #16
 80161ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80161bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80161be:	eeb0 6a40 	vmov.f32	s12, s0
 80161c2:	eef0 6a60 	vmov.f32	s13, s1
 80161c6:	eeb0 7a41 	vmov.f32	s14, s2
 80161ca:	eef0 7a61 	vmov.f32	s15, s3
 80161ce:	617a      	str	r2, [r7, #20]
 80161d0:	ed87 2a04 	vstr	s4, [r7, #16]
 80161d4:	edc7 2a03 	vstr	s5, [r7, #12]
 80161d8:	ed87 3a02 	vstr	s6, [r7, #8]
 80161dc:	edc7 3a01 	vstr	s7, [r7, #4]
 80161e0:	603b      	str	r3, [r7, #0]
 80161e2:	ed87 6a06 	vstr	s12, [r7, #24]
 80161e6:	edc7 6a07 	vstr	s13, [r7, #28]
 80161ea:	ed87 7a08 	vstr	s14, [r7, #32]
 80161ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 80161f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d105      	bne.n	8016204 <nk_do_scrollbarv+0x50>
 80161f8:	4bb6      	ldr	r3, [pc, #728]	; (80164d4 <nk_do_scrollbarv+0x320>)
 80161fa:	4ab7      	ldr	r2, [pc, #732]	; (80164d8 <nk_do_scrollbarv+0x324>)
 80161fc:	2195      	movs	r1, #149	; 0x95
 80161fe:	48b7      	ldr	r0, [pc, #732]	; (80164dc <nk_do_scrollbarv+0x328>)
 8016200:	f006 fb2c 	bl	801c85c <__assert_func>
    NK_ASSERT(style);
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d105      	bne.n	8016216 <nk_do_scrollbarv+0x62>
 801620a:	4bb5      	ldr	r3, [pc, #724]	; (80164e0 <nk_do_scrollbarv+0x32c>)
 801620c:	4ab2      	ldr	r2, [pc, #712]	; (80164d8 <nk_do_scrollbarv+0x324>)
 801620e:	2196      	movs	r1, #150	; 0x96
 8016210:	48b2      	ldr	r0, [pc, #712]	; (80164dc <nk_do_scrollbarv+0x328>)
 8016212:	f006 fb23 	bl	801c85c <__assert_func>
    NK_ASSERT(state);
 8016216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016218:	2b00      	cmp	r3, #0
 801621a:	d105      	bne.n	8016228 <nk_do_scrollbarv+0x74>
 801621c:	4bb1      	ldr	r3, [pc, #708]	; (80164e4 <nk_do_scrollbarv+0x330>)
 801621e:	4aae      	ldr	r2, [pc, #696]	; (80164d8 <nk_do_scrollbarv+0x324>)
 8016220:	2197      	movs	r1, #151	; 0x97
 8016222:	48ae      	ldr	r0, [pc, #696]	; (80164dc <nk_do_scrollbarv+0x328>)
 8016224:	f006 fb1a 	bl	801c85c <__assert_func>
    if (!out || !style) return 0;
 8016228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622a:	2b00      	cmp	r3, #0
 801622c:	d002      	beq.n	8016234 <nk_do_scrollbarv+0x80>
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d102      	bne.n	801623a <nk_do_scrollbarv+0x86>
 8016234:	f04f 0300 	mov.w	r3, #0
 8016238:	e253      	b.n	80166e2 <nk_do_scrollbarv+0x52e>

    scroll.w = NK_MAX(scroll.w, 1);
 801623a:	edd7 7a08 	vldr	s15, [r7, #32]
 801623e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801624a:	d502      	bpl.n	8016252 <nk_do_scrollbarv+0x9e>
 801624c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016250:	e000      	b.n	8016254 <nk_do_scrollbarv+0xa0>
 8016252:	6a3b      	ldr	r3, [r7, #32]
 8016254:	623b      	str	r3, [r7, #32]
    scroll.h = NK_MAX(scroll.h, 0);
 8016256:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801625a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801625e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016262:	d502      	bpl.n	801626a <nk_do_scrollbarv+0xb6>
 8016264:	f04f 0300 	mov.w	r3, #0
 8016268:	e000      	b.n	801626c <nk_do_scrollbarv+0xb8>
 801626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801626c:	627b      	str	r3, [r7, #36]	; 0x24
    if (target <= scroll.h) return 0;
 801626e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016272:	ed97 7a03 	vldr	s14, [r7, #12]
 8016276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801627e:	d802      	bhi.n	8016286 <nk_do_scrollbarv+0xd2>
 8016280:	f04f 0300 	mov.w	r3, #0
 8016284:	e22d      	b.n	80166e2 <nk_do_scrollbarv+0x52e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801628c:	2b00      	cmp	r3, #0
 801628e:	f000 80a4 	beq.w	80163da <nk_do_scrollbarv+0x226>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 8016292:	69bb      	ldr	r3, [r7, #24]
 8016294:	633b      	str	r3, [r7, #48]	; 0x30
        button.w = scroll.w;
 8016296:	6a3b      	ldr	r3, [r7, #32]
 8016298:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.w;
 801629a:	6a3b      	ldr	r3, [r7, #32]
 801629c:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 801629e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80162a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80162a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80162aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80162b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b6:	d502      	bpl.n	80162be <nk_do_scrollbarv+0x10a>
 80162b8:	eddf 7a8b 	vldr	s15, [pc, #556]	; 80164e8 <nk_do_scrollbarv+0x334>
 80162bc:	e007      	b.n	80162ce <nk_do_scrollbarv+0x11a>
 80162be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80162c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80162c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80162ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162ce:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 80162d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80162d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80162da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162e2:	d501      	bpl.n	80162e8 <nk_do_scrollbarv+0x134>
 80162e4:	68bb      	ldr	r3, [r7, #8]
 80162e6:	e000      	b.n	80162ea <nk_do_scrollbarv+0x136>
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.y = scroll.y;
 80162ee:	69fb      	ldr	r3, [r7, #28]
 80162f0:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80162fe:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8016302:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8016306:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801630a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801630e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8016312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016316:	9202      	str	r2, [sp, #8]
 8016318:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801631c:	9201      	str	r2, [sp, #4]
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	2301      	movs	r3, #1
 8016322:	460a      	mov	r2, r1
 8016324:	eeb0 0a46 	vmov.f32	s0, s12
 8016328:	eef0 0a66 	vmov.f32	s1, s13
 801632c:	eeb0 1a47 	vmov.f32	s2, s14
 8016330:	eef0 1a67 	vmov.f32	s3, s15
 8016334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016336:	f7f7 fb77 	bl	800da28 <nk_do_button_symbol>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d007      	beq.n	8016350 <nk_do_scrollbarv+0x19c>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 8016340:	ed97 7a04 	vldr	s14, [r7, #16]
 8016344:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8016348:	ee77 7a67 	vsub.f32	s15, s14, s15
 801634c:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 8016350:	ed97 7a07 	vldr	s14, [r7, #28]
 8016354:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016358:	ee37 7a27 	vadd.f32	s14, s14, s15
 801635c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016364:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	33cc      	adds	r3, #204	; 0xcc
 8016372:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8016376:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801637a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801637e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016382:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8016386:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801638a:	9202      	str	r2, [sp, #8]
 801638c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016390:	9201      	str	r2, [sp, #4]
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	2301      	movs	r3, #1
 8016396:	460a      	mov	r2, r1
 8016398:	eeb0 0a46 	vmov.f32	s0, s12
 801639c:	eef0 0a66 	vmov.f32	s1, s13
 80163a0:	eeb0 1a47 	vmov.f32	s2, s14
 80163a4:	eef0 1a67 	vmov.f32	s3, s15
 80163a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163aa:	f7f7 fb3d 	bl	800da28 <nk_do_button_symbol>
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d007      	beq.n	80163c4 <nk_do_scrollbarv+0x210>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 80163b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80163b8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80163bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163c0:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.y = scroll.y + button.h;
 80163c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80163c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80163cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163d0:	edc7 7a07 	vstr	s15, [r7, #28]
        scroll.h = scroll_h;
 80163d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80163d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 80163da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80163de:	ed97 7a02 	vldr	s14, [r7, #8]
 80163e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80163e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163ea:	d501      	bpl.n	80163f0 <nk_do_scrollbarv+0x23c>
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	e000      	b.n	80163f2 <nk_do_scrollbarv+0x23e>
 80163f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 80163f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80163fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80163fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016402:	ed97 7a04 	vldr	s14, [r7, #16]
 8016406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801640a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640e:	d50a      	bpl.n	8016426 <nk_do_scrollbarv+0x272>
 8016410:	edd7 7a04 	vldr	s15, [r7, #16]
 8016414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801641c:	bf4c      	ite	mi
 801641e:	2301      	movmi	r3, #1
 8016420:	2300      	movpl	r3, #0
 8016422:	b2db      	uxtb	r3, r3
 8016424:	e00d      	b.n	8016442 <nk_do_scrollbarv+0x28e>
 8016426:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801642a:	ed97 7a03 	vldr	s14, [r7, #12]
 801642e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643a:	bf4c      	ite	mi
 801643c:	2301      	movmi	r3, #1
 801643e:	2300      	movpl	r3, #0
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b00      	cmp	r3, #0
 8016444:	d002      	beq.n	801644c <nk_do_scrollbarv+0x298>
 8016446:	eddf 7a28 	vldr	s15, [pc, #160]	; 80164e8 <nk_do_scrollbarv+0x334>
 801644a:	e015      	b.n	8016478 <nk_do_scrollbarv+0x2c4>
 801644c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016450:	ed97 7a03 	vldr	s14, [r7, #12]
 8016454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016458:	ed97 7a04 	vldr	s14, [r7, #16]
 801645c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016464:	d502      	bpl.n	801646c <nk_do_scrollbarv+0x2b8>
 8016466:	edd7 7a04 	vldr	s15, [r7, #16]
 801646a:	e005      	b.n	8016478 <nk_do_scrollbarv+0x2c4>
 801646c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016470:	ed97 7a03 	vldr	s14, [r7, #12]
 8016474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016478:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.h / target;
 801647c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016480:	ed97 7a03 	vldr	s14, [r7, #12]
 8016484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016488:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 801648c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8016490:	ed97 7a03 	vldr	s14, [r7, #12]
 8016494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016498:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 801649c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80164a0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80164a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80164ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80164b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80164bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80164c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80164c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164cc:	d50e      	bpl.n	80164ec <nk_do_scrollbarv+0x338>
 80164ce:	eddf 7a06 	vldr	s15, [pc, #24]	; 80164e8 <nk_do_scrollbarv+0x334>
 80164d2:	e01f      	b.n	8016514 <nk_do_scrollbarv+0x360>
 80164d4:	08020674 	.word	0x08020674
 80164d8:	08021768 	.word	0x08021768
 80164dc:	08020678 	.word	0x08020678
 80164e0:	08020698 	.word	0x08020698
 80164e4:	080206a0 	.word	0x080206a0
 80164e8:	00000000 	.word	0x00000000
 80164ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80164f0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80164f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80164fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8016508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801650c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016514:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 8016518:	ed97 7a07 	vldr	s14, [r7, #28]
 801651c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016520:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8016524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016528:	ee37 7a27 	vadd.f32	s14, s14, s15
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8016532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801653c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016540:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 8016544:	ed97 7a08 	vldr	s14, [r7, #32]
 8016548:	683b      	ldr	r3, [r7, #0]
 801654a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801654e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8016558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801655c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016564:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    cursor.x = scroll.x + style->border + style->padding.x;
 8016568:	ed97 7a06 	vldr	s14, [r7, #24]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8016572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801657c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016580:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	667b      	str	r3, [r7, #100]	; 0x64
    empty_north.y = scroll.y;
 8016588:	69fb      	ldr	r3, [r7, #28]
 801658a:	66bb      	str	r3, [r7, #104]	; 0x68
    empty_north.w = scroll.w;
 801658c:	6a3b      	ldr	r3, [r7, #32]
 801658e:	66fb      	str	r3, [r7, #108]	; 0x6c
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 8016590:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8016594:	edd7 7a07 	vldr	s15, [r7, #28]
 8016598:	ee77 7a67 	vsub.f32	s15, s14, s15
 801659c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80165a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165a4:	d502      	bpl.n	80165ac <nk_do_scrollbarv+0x3f8>
 80165a6:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 80164e8 <nk_do_scrollbarv+0x334>
 80165aa:	e005      	b.n	80165b8 <nk_do_scrollbarv+0x404>
 80165ac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80165b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80165b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165b8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    empty_south.x = scroll.x;
 80165bc:	69bb      	ldr	r3, [r7, #24]
 80165be:	657b      	str	r3, [r7, #84]	; 0x54
    empty_south.y = cursor.y + cursor.h;
 80165c0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80165c4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80165c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    empty_south.w = scroll.w;
 80165d0:	6a3b      	ldr	r3, [r7, #32]
 80165d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 80165d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80165d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80165dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80165e0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80165e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80165e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80165ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80165f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f8:	d502      	bpl.n	8016600 <nk_do_scrollbarv+0x44c>
 80165fa:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 80164e8 <nk_do_scrollbarv+0x334>
 80165fe:	e00d      	b.n	801661c <nk_do_scrollbarv+0x468>
 8016600:	ed97 7a07 	vldr	s14, [r7, #28]
 8016604:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016608:	ee37 7a27 	vadd.f32	s14, s14, s15
 801660c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8016610:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8016614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016618:	ee77 7a67 	vsub.f32	s15, s14, s15
 801661c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8016620:	f107 0218 	add.w	r2, r7, #24
 8016624:	2300      	movs	r3, #0
 8016626:	9303      	str	r3, [sp, #12]
 8016628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801662c:	9302      	str	r3, [sp, #8]
 801662e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016632:	9301      	str	r3, [sp, #4]
 8016634:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016638:	9300      	str	r3, [sp, #0]
 801663a:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801663e:	edd7 0a03 	vldr	s1, [r7, #12]
 8016642:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8016646:	4613      	mov	r3, r2
 8016648:	697a      	ldr	r2, [r7, #20]
 801664a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801664e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016650:	f7ff f90e 	bl	8015870 <nk_scrollbar_behavior>
 8016654:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 8016658:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801665c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016664:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 8016668:	ed97 7a07 	vldr	s14, [r7, #28]
 801666c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016670:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8016674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016678:	ee37 7a27 	vadd.f32	s14, s14, s15
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8016682:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801668c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016690:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801669a:	2b00      	cmp	r3, #0
 801669c:	d007      	beq.n	80166ae <nk_do_scrollbarv+0x4fa>
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80166a4:	683a      	ldr	r2, [r7, #0]
 80166a6:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80166aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166ac:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 80166ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b0:	6819      	ldr	r1, [r3, #0]
 80166b2:	f107 0218 	add.w	r2, r7, #24
 80166b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80166ba:	9300      	str	r3, [sp, #0]
 80166bc:	4613      	mov	r3, r2
 80166be:	683a      	ldr	r2, [r7, #0]
 80166c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166c2:	f7ff fc5b 	bl	8015f7c <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d007      	beq.n	80166e0 <nk_do_scrollbarv+0x52c>
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80166d6:	683a      	ldr	r2, [r7, #0]
 80166d8:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80166dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166de:	4798      	blx	r3
    return scroll_offset;
 80166e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 80166e2:	ee07 3a90 	vmov	s15, r3
 80166e6:	eeb0 0a67 	vmov.f32	s0, s15
 80166ea:	3788      	adds	r7, #136	; 0x88
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b0a6      	sub	sp, #152	; 0x98
 80166f4:	af04      	add	r7, sp, #16
 80166f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80166f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80166fa:	eeb0 6a40 	vmov.f32	s12, s0
 80166fe:	eef0 6a60 	vmov.f32	s13, s1
 8016702:	eeb0 7a41 	vmov.f32	s14, s2
 8016706:	eef0 7a61 	vmov.f32	s15, s3
 801670a:	617a      	str	r2, [r7, #20]
 801670c:	ed87 2a04 	vstr	s4, [r7, #16]
 8016710:	edc7 2a03 	vstr	s5, [r7, #12]
 8016714:	ed87 3a02 	vstr	s6, [r7, #8]
 8016718:	edc7 3a01 	vstr	s7, [r7, #4]
 801671c:	603b      	str	r3, [r7, #0]
 801671e:	ed87 6a06 	vstr	s12, [r7, #24]
 8016722:	edc7 6a07 	vstr	s13, [r7, #28]
 8016726:	ed87 7a08 	vstr	s14, [r7, #32]
 801672a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 801672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016730:	2b00      	cmp	r3, #0
 8016732:	d105      	bne.n	8016740 <nk_do_scrollbarh+0x50>
 8016734:	4b94      	ldr	r3, [pc, #592]	; (8016988 <nk_do_scrollbarh+0x298>)
 8016736:	4a95      	ldr	r2, [pc, #596]	; (801698c <nk_do_scrollbarh+0x29c>)
 8016738:	21ee      	movs	r1, #238	; 0xee
 801673a:	4895      	ldr	r0, [pc, #596]	; (8016990 <nk_do_scrollbarh+0x2a0>)
 801673c:	f006 f88e 	bl	801c85c <__assert_func>
    NK_ASSERT(style);
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d105      	bne.n	8016752 <nk_do_scrollbarh+0x62>
 8016746:	4b93      	ldr	r3, [pc, #588]	; (8016994 <nk_do_scrollbarh+0x2a4>)
 8016748:	4a90      	ldr	r2, [pc, #576]	; (801698c <nk_do_scrollbarh+0x29c>)
 801674a:	21ef      	movs	r1, #239	; 0xef
 801674c:	4890      	ldr	r0, [pc, #576]	; (8016990 <nk_do_scrollbarh+0x2a0>)
 801674e:	f006 f885 	bl	801c85c <__assert_func>
    if (!out || !style) return 0;
 8016752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016754:	2b00      	cmp	r3, #0
 8016756:	d002      	beq.n	801675e <nk_do_scrollbarh+0x6e>
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d102      	bne.n	8016764 <nk_do_scrollbarh+0x74>
 801675e:	f04f 0300 	mov.w	r3, #0
 8016762:	e200      	b.n	8016b66 <nk_do_scrollbarh+0x476>

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 8016764:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801676c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016774:	d502      	bpl.n	801677c <nk_do_scrollbarh+0x8c>
 8016776:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801677a:	e000      	b.n	801677e <nk_do_scrollbarh+0x8e>
 801677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677e:	627b      	str	r3, [r7, #36]	; 0x24
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 8016780:	ed97 7a08 	vldr	s14, [r7, #32]
 8016784:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016788:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801678c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016794:	d504      	bpl.n	80167a0 <nk_do_scrollbarh+0xb0>
 8016796:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801679a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801679e:	e001      	b.n	80167a4 <nk_do_scrollbarh+0xb4>
 80167a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80167a4:	edc7 7a08 	vstr	s15, [r7, #32]
    if (target <= scroll.w) return 0;
 80167a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80167ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80167b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b8:	d802      	bhi.n	80167c0 <nk_do_scrollbarh+0xd0>
 80167ba:	f04f 0300 	mov.w	r3, #0
 80167be:	e1d2      	b.n	8016b66 <nk_do_scrollbarh+0x476>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	f000 8094 	beq.w	80168f4 <nk_do_scrollbarh+0x204>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 80167cc:	69fb      	ldr	r3, [r7, #28]
 80167ce:	637b      	str	r3, [r7, #52]	; 0x34
        button.w = scroll.h;
 80167d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d2:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.h;
 80167d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d6:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_w = scroll.w - 2 * button.w;
 80167d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80167dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80167e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80167e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167e8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 80167ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80167f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80167f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167fc:	d501      	bpl.n	8016802 <nk_do_scrollbarh+0x112>
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	e000      	b.n	8016804 <nk_do_scrollbarh+0x114>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.x = scroll.x;
 8016808:	69bb      	ldr	r3, [r7, #24]
 801680a:	633b      	str	r3, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016818:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801681c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8016820:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016824:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016828:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801682c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016830:	9202      	str	r2, [sp, #8]
 8016832:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016836:	9201      	str	r2, [sp, #4]
 8016838:	9300      	str	r3, [sp, #0]
 801683a:	2301      	movs	r3, #1
 801683c:	460a      	mov	r2, r1
 801683e:	eeb0 0a46 	vmov.f32	s0, s12
 8016842:	eef0 0a66 	vmov.f32	s1, s13
 8016846:	eeb0 1a47 	vmov.f32	s2, s14
 801684a:	eef0 1a67 	vmov.f32	s3, s15
 801684e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016850:	f7f7 f8ea 	bl	800da28 <nk_do_button_symbol>
 8016854:	4603      	mov	r3, r0
 8016856:	2b00      	cmp	r3, #0
 8016858:	d007      	beq.n	801686a <nk_do_scrollbarh+0x17a>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 801685a:	ed97 7a04 	vldr	s14, [r7, #16]
 801685e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8016862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016866:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 801686a:	ed97 7a06 	vldr	s14, [r7, #24]
 801686e:	edd7 7a08 	vldr	s15, [r7, #32]
 8016872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016876:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801687a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801687e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	33cc      	adds	r3, #204	; 0xcc
 801688c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8016890:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8016894:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016898:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801689c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80168a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80168a4:	9202      	str	r2, [sp, #8]
 80168a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80168aa:	9201      	str	r2, [sp, #4]
 80168ac:	9300      	str	r3, [sp, #0]
 80168ae:	2301      	movs	r3, #1
 80168b0:	460a      	mov	r2, r1
 80168b2:	eeb0 0a46 	vmov.f32	s0, s12
 80168b6:	eef0 0a66 	vmov.f32	s1, s13
 80168ba:	eeb0 1a47 	vmov.f32	s2, s14
 80168be:	eef0 1a67 	vmov.f32	s3, s15
 80168c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168c4:	f7f7 f8b0 	bl	800da28 <nk_do_button_symbol>
 80168c8:	4603      	mov	r3, r0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d007      	beq.n	80168de <nk_do_scrollbarh+0x1ee>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 80168ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80168d2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80168d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168da:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.x = scroll.x + button.w;
 80168de:	ed97 7a06 	vldr	s14, [r7, #24]
 80168e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80168e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80168ea:	edc7 7a06 	vstr	s15, [r7, #24]
        scroll.w = scroll_w;
 80168ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80168f2:	623b      	str	r3, [r7, #32]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 80168f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80168f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80168fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016904:	d501      	bpl.n	801690a <nk_do_scrollbarh+0x21a>
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	e000      	b.n	801690c <nk_do_scrollbarh+0x21c>
 801690a:	6a3b      	ldr	r3, [r7, #32]
 801690c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 8016910:	edd7 7a08 	vldr	s15, [r7, #32]
 8016914:	ed97 7a03 	vldr	s14, [r7, #12]
 8016918:	ee77 7a67 	vsub.f32	s15, s14, s15
 801691c:	ed97 7a04 	vldr	s14, [r7, #16]
 8016920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016928:	d50a      	bpl.n	8016940 <nk_do_scrollbarh+0x250>
 801692a:	edd7 7a04 	vldr	s15, [r7, #16]
 801692e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016936:	bf4c      	ite	mi
 8016938:	2301      	movmi	r3, #1
 801693a:	2300      	movpl	r3, #0
 801693c:	b2db      	uxtb	r3, r3
 801693e:	e00d      	b.n	801695c <nk_do_scrollbarh+0x26c>
 8016940:	edd7 7a08 	vldr	s15, [r7, #32]
 8016944:	ed97 7a03 	vldr	s14, [r7, #12]
 8016948:	ee77 7a67 	vsub.f32	s15, s14, s15
 801694c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016954:	bf4c      	ite	mi
 8016956:	2301      	movmi	r3, #1
 8016958:	2300      	movpl	r3, #0
 801695a:	b2db      	uxtb	r3, r3
 801695c:	2b00      	cmp	r3, #0
 801695e:	d002      	beq.n	8016966 <nk_do_scrollbarh+0x276>
 8016960:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016998 <nk_do_scrollbarh+0x2a8>
 8016964:	e020      	b.n	80169a8 <nk_do_scrollbarh+0x2b8>
 8016966:	edd7 7a08 	vldr	s15, [r7, #32]
 801696a:	ed97 7a03 	vldr	s14, [r7, #12]
 801696e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016972:	ed97 7a04 	vldr	s14, [r7, #16]
 8016976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801697e:	d50d      	bpl.n	801699c <nk_do_scrollbarh+0x2ac>
 8016980:	edd7 7a04 	vldr	s15, [r7, #16]
 8016984:	e010      	b.n	80169a8 <nk_do_scrollbarh+0x2b8>
 8016986:	bf00      	nop
 8016988:	08020674 	.word	0x08020674
 801698c:	0802177c 	.word	0x0802177c
 8016990:	08020678 	.word	0x08020678
 8016994:	08020698 	.word	0x08020698
 8016998:	00000000 	.word	0x00000000
 801699c:	edd7 7a08 	vldr	s15, [r7, #32]
 80169a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80169a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169a8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.w / target;
 80169ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80169b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80169b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169b8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 80169bc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80169c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80169c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80169c8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 80169cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80169d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80169d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80169d8:	683b      	ldr	r3, [r7, #0]
 80169da:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80169de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80169e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80169ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80169f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80169f4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 80169f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80169fc:	edd7 6a08 	vldr	s13, [r7, #32]
 8016a00:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8016a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8016a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8016a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a20:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 8016a24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8016a2e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8016a38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a44:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    cursor.y = scroll.y + style->border + style->padding.y;
 8016a48:	ed97 7a07 	vldr	s14, [r7, #28]
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8016a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8016a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a60:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 8016a64:	69bb      	ldr	r3, [r7, #24]
 8016a66:	657b      	str	r3, [r7, #84]	; 0x54
    empty_west.y = scroll.y;
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	65bb      	str	r3, [r7, #88]	; 0x58
    empty_west.w = cursor.x - scroll.x;
 8016a6c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8016a70:	edd7 7a06 	vldr	s15, [r7, #24]
 8016a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a78:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    empty_west.h = scroll.h;
 8016a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7e:	663b      	str	r3, [r7, #96]	; 0x60

    empty_east.x = cursor.x + cursor.w;
 8016a80:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8016a84:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8016a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a8c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    empty_east.y = scroll.y;
 8016a90:	69fb      	ldr	r3, [r7, #28]
 8016a92:	64bb      	str	r3, [r7, #72]	; 0x48
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 8016a94:	ed97 7a06 	vldr	s14, [r7, #24]
 8016a98:	edd7 7a08 	vldr	s15, [r7, #32]
 8016a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016aa0:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8016aa4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8016aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ab0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    empty_east.h = scroll.h;
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab6:	653b      	str	r3, [r7, #80]	; 0x50

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8016ab8:	f107 0218 	add.w	r2, r7, #24
 8016abc:	2301      	movs	r3, #1
 8016abe:	9303      	str	r3, [sp, #12]
 8016ac0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016ac4:	9302      	str	r3, [sp, #8]
 8016ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016aca:	9301      	str	r3, [sp, #4]
 8016acc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 8016ad6:	edd7 0a03 	vldr	s1, [r7, #12]
 8016ada:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8016ade:	4613      	mov	r3, r2
 8016ae0:	697a      	ldr	r2, [r7, #20]
 8016ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ae8:	f7fe fec2 	bl	8015870 <nk_scrollbar_behavior>
 8016aec:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 8016af0:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8016af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8016af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016afc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.x = scroll.x + (scroll_off * scroll.w);
 8016b00:	ed97 7a06 	vldr	s14, [r7, #24]
 8016b04:	edd7 6a08 	vldr	s13, [r7, #32]
 8016b08:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8016b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b14:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d007      	beq.n	8016b32 <nk_do_scrollbarh+0x442>
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8016b28:	683a      	ldr	r2, [r7, #0]
 8016b2a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8016b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b30:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8016b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b34:	6819      	ldr	r1, [r3, #0]
 8016b36:	f107 0218 	add.w	r2, r7, #24
 8016b3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016b3e:	9300      	str	r3, [sp, #0]
 8016b40:	4613      	mov	r3, r2
 8016b42:	683a      	ldr	r2, [r7, #0]
 8016b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b46:	f7ff fa19 	bl	8015f7c <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8016b4a:	683b      	ldr	r3, [r7, #0]
 8016b4c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d007      	beq.n	8016b64 <nk_do_scrollbarh+0x474>
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8016b5a:	683a      	ldr	r2, [r7, #0]
 8016b5c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8016b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b62:	4798      	blx	r3
    return scroll_offset;
 8016b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8016b66:	ee07 3a90 	vmov	s15, r3
 8016b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8016b6e:	3788      	adds	r7, #136	; 0x88
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}

08016b74 <nk_slider_behavior>:
NK_LIB float
nk_slider_behavior(nk_flags *state, struct nk_rect *logical_cursor,
    struct nk_rect *visual_cursor, struct nk_input *in,
    struct nk_rect bounds, float slider_min, float slider_max, float slider_value,
    float slider_step, float slider_steps)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b094      	sub	sp, #80	; 0x50
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6378      	str	r0, [r7, #52]	; 0x34
 8016b7c:	6339      	str	r1, [r7, #48]	; 0x30
 8016b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b82:	eeb0 6a40 	vmov.f32	s12, s0
 8016b86:	eef0 6a60 	vmov.f32	s13, s1
 8016b8a:	eeb0 7a41 	vmov.f32	s14, s2
 8016b8e:	eef0 7a61 	vmov.f32	s15, s3
 8016b92:	ed87 2a05 	vstr	s4, [r7, #20]
 8016b96:	edc7 2a04 	vstr	s5, [r7, #16]
 8016b9a:	ed87 3a03 	vstr	s6, [r7, #12]
 8016b9e:	edc7 3a02 	vstr	s7, [r7, #8]
 8016ba2:	ed87 4a01 	vstr	s8, [r7, #4]
 8016ba6:	ed87 6a06 	vstr	s12, [r7, #24]
 8016baa:	edc7 6a07 	vstr	s13, [r7, #28]
 8016bae:	ed87 7a08 	vstr	s14, [r7, #32]
 8016bb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    int left_mouse_down;
    int left_mouse_click_in_cursor;

    /* check if visual cursor is being dragged */
    nk_widget_state_reset(state);
 8016bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f003 0302 	and.w	r3, r3, #2
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d003      	beq.n	8016bca <nk_slider_behavior+0x56>
 8016bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc4:	2206      	movs	r2, #6
 8016bc6:	601a      	str	r2, [r3, #0]
 8016bc8:	e002      	b.n	8016bd0 <nk_slider_behavior+0x5c>
 8016bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bcc:	2204      	movs	r2, #4
 8016bce:	601a      	str	r2, [r3, #0]
    left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;
 8016bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d006      	beq.n	8016be4 <nk_slider_behavior+0x70>
 8016bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d001      	beq.n	8016be4 <nk_slider_behavior+0x70>
 8016be0:	2301      	movs	r3, #1
 8016be2:	e000      	b.n	8016be6 <nk_slider_behavior+0x72>
 8016be4:	2300      	movs	r3, #0
 8016be6:	64fb      	str	r3, [r7, #76]	; 0x4c
    left_mouse_click_in_cursor = in && nk_input_has_mouse_click_down_in_rect(in,
 8016be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d01a      	beq.n	8016c24 <nk_slider_behavior+0xb0>
 8016bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf0:	ed93 6a00 	vldr	s12, [r3]
 8016bf4:	edd3 6a01 	vldr	s13, [r3, #4]
 8016bf8:	ed93 7a02 	vldr	s14, [r3, #8]
 8016bfc:	edd3 7a03 	vldr	s15, [r3, #12]
 8016c00:	2201      	movs	r2, #1
 8016c02:	eeb0 0a46 	vmov.f32	s0, s12
 8016c06:	eef0 0a66 	vmov.f32	s1, s13
 8016c0a:	eeb0 1a47 	vmov.f32	s2, s14
 8016c0e:	eef0 1a67 	vmov.f32	s3, s15
 8016c12:	2100      	movs	r1, #0
 8016c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c16:	f7fa fba5 	bl	8011364 <nk_input_has_mouse_click_down_in_rect>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d001      	beq.n	8016c24 <nk_slider_behavior+0xb0>
 8016c20:	2301      	movs	r3, #1
 8016c22:	e000      	b.n	8016c26 <nk_slider_behavior+0xb2>
 8016c24:	2300      	movs	r3, #0
 8016c26:	64bb      	str	r3, [r7, #72]	; 0x48
            NK_BUTTON_LEFT, *visual_cursor, nk_true);

    if (left_mouse_down && left_mouse_click_in_cursor) {
 8016c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	f000 80b1 	beq.w	8016d92 <nk_slider_behavior+0x21e>
 8016c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f000 80ad 	beq.w	8016d92 <nk_slider_behavior+0x21e>
        float ratio = 0;
 8016c38:	f04f 0300 	mov.w	r3, #0
 8016c3c:	647b      	str	r3, [r7, #68]	; 0x44
        const float d = in->mouse.pos.x - (visual_cursor->x+visual_cursor->w*0.5f);
 8016c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c40:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8016c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c46:	edd3 6a00 	vldr	s13, [r3]
 8016c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8016c50:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016c54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c60:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        const float pxstep = bounds.w / slider_steps;
 8016c64:	edd7 6a08 	vldr	s13, [r7, #32]
 8016c68:	ed97 7a01 	vldr	s14, [r7, #4]
 8016c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c70:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        /* only update value if the next slider step is reached */
        *state = NK_WIDGET_STATE_ACTIVE;
 8016c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c76:	2222      	movs	r2, #34	; 0x22
 8016c78:	601a      	str	r2, [r3, #0]
        if (NK_ABS(d) >= pxstep) {
 8016c7a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c86:	d504      	bpl.n	8016c92 <nk_slider_behavior+0x11e>
 8016c88:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016c8c:	eef1 7a67 	vneg.f32	s15, s15
 8016c90:	e001      	b.n	8016c96 <nk_slider_behavior+0x122>
 8016c92:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016c96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca2:	db76      	blt.n	8016d92 <nk_slider_behavior+0x21e>
            const float steps = (float)((int)(NK_ABS(d) / pxstep));
 8016ca4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb0:	d504      	bpl.n	8016cbc <nk_slider_behavior+0x148>
 8016cb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016cb6:	eef1 7a67 	vneg.f32	s15, s15
 8016cba:	e001      	b.n	8016cc0 <nk_slider_behavior+0x14c>
 8016cbc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016cc0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8016cc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016cc8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cd0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            slider_value += (d > 0) ? (slider_step*steps) : -(slider_step*steps);
 8016cd4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8016cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce0:	dd06      	ble.n	8016cf0 <nk_slider_behavior+0x17c>
 8016ce2:	ed97 7a02 	vldr	s14, [r7, #8]
 8016ce6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cee:	e007      	b.n	8016d00 <nk_slider_behavior+0x18c>
 8016cf0:	ed97 7a02 	vldr	s14, [r7, #8]
 8016cf4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cfc:	eef1 7a67 	vneg.f32	s15, s15
 8016d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8016d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d08:	edc7 7a03 	vstr	s15, [r7, #12]
            slider_value = NK_CLAMP(slider_min, slider_value, slider_max);
 8016d0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8016d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1c:	d502      	bpl.n	8016d24 <nk_slider_behavior+0x1b0>
 8016d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d22:	e001      	b.n	8016d28 <nk_slider_behavior+0x1b4>
 8016d24:	edd7 7a04 	vldr	s15, [r7, #16]
 8016d28:	ed97 7a05 	vldr	s14, [r7, #20]
 8016d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d34:	d501      	bpl.n	8016d3a <nk_slider_behavior+0x1c6>
 8016d36:	697b      	ldr	r3, [r7, #20]
 8016d38:	e00b      	b.n	8016d52 <nk_slider_behavior+0x1de>
 8016d3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8016d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8016d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d4a:	d501      	bpl.n	8016d50 <nk_slider_behavior+0x1dc>
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	e000      	b.n	8016d52 <nk_slider_behavior+0x1de>
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	60fb      	str	r3, [r7, #12]
            ratio = (slider_value - slider_min)/slider_step;
 8016d54:	ed97 7a03 	vldr	s14, [r7, #12]
 8016d58:	edd7 7a05 	vldr	s15, [r7, #20]
 8016d5c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8016d60:	ed97 7a02 	vldr	s14, [r7, #8]
 8016d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016d68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            logical_cursor->x = bounds.x + (logical_cursor->w * ratio);
 8016d6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8016d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d72:	edd3 6a02 	vldr	s13, [r3, #8]
 8016d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d84:	edc3 7a00 	vstr	s15, [r3]
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = logical_cursor->x;
 8016d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d8e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        }
    }

    /* slider widget state */
    if (nk_input_is_mouse_hovering_rect(in, bounds))
 8016d92:	ed97 6a06 	vldr	s12, [r7, #24]
 8016d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8016d9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8016d9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016da2:	eeb0 0a46 	vmov.f32	s0, s12
 8016da6:	eef0 0a66 	vmov.f32	s1, s13
 8016daa:	eeb0 1a47 	vmov.f32	s2, s14
 8016dae:	eef0 1a67 	vmov.f32	s3, s15
 8016db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016db4:	f7fa fb1d 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 8016db8:	4603      	mov	r3, r0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d002      	beq.n	8016dc4 <nk_slider_behavior+0x250>
        *state = NK_WIDGET_STATE_HOVERED;
 8016dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dc0:	2212      	movs	r2, #18
 8016dc2:	601a      	str	r2, [r3, #0]
    if (*state & NK_WIDGET_STATE_HOVER &&
 8016dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	f003 0310 	and.w	r3, r3, #16
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d01c      	beq.n	8016e0a <nk_slider_behavior+0x296>
        !nk_input_is_mouse_prev_hovering_rect(in, bounds))
 8016dd0:	ed97 6a06 	vldr	s12, [r7, #24]
 8016dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8016dd8:	ed97 7a08 	vldr	s14, [r7, #32]
 8016ddc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016de0:	eeb0 0a46 	vmov.f32	s0, s12
 8016de4:	eef0 0a66 	vmov.f32	s1, s13
 8016de8:	eeb0 1a47 	vmov.f32	s2, s14
 8016dec:	eef0 1a67 	vmov.f32	s3, s15
 8016df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016df2:	f7fa fb50 	bl	8011496 <nk_input_is_mouse_prev_hovering_rect>
 8016df6:	4603      	mov	r3, r0
    if (*state & NK_WIDGET_STATE_HOVER &&
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d106      	bne.n	8016e0a <nk_slider_behavior+0x296>
        *state |= NK_WIDGET_STATE_ENTERED;
 8016dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f043 0208 	orr.w	r2, r3, #8
 8016e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e06:	601a      	str	r2, [r3, #0]
 8016e08:	e01b      	b.n	8016e42 <nk_slider_behavior+0x2ce>
    else if (nk_input_is_mouse_prev_hovering_rect(in, bounds))
 8016e0a:	ed97 6a06 	vldr	s12, [r7, #24]
 8016e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8016e12:	ed97 7a08 	vldr	s14, [r7, #32]
 8016e16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016e1a:	eeb0 0a46 	vmov.f32	s0, s12
 8016e1e:	eef0 0a66 	vmov.f32	s1, s13
 8016e22:	eeb0 1a47 	vmov.f32	s2, s14
 8016e26:	eef0 1a67 	vmov.f32	s3, s15
 8016e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e2c:	f7fa fb33 	bl	8011496 <nk_input_is_mouse_prev_hovering_rect>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d005      	beq.n	8016e42 <nk_slider_behavior+0x2ce>
        *state |= NK_WIDGET_STATE_LEFT;
 8016e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e40:	601a      	str	r2, [r3, #0]
    return slider_value;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	ee07 3a90 	vmov	s15, r3
}
 8016e48:	eeb0 0a67 	vmov.f32	s0, s15
 8016e4c:	3750      	adds	r7, #80	; 0x50
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
	...

08016e54 <nk_draw_slider>:
NK_LIB void
nk_draw_slider(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_slider *style, const struct nk_rect *bounds,
    const struct nk_rect *visual_cursor, float min, float value, float max)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b094      	sub	sp, #80	; 0x50
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	61f8      	str	r0, [r7, #28]
 8016e5c:	61b9      	str	r1, [r7, #24]
 8016e5e:	617a      	str	r2, [r7, #20]
 8016e60:	613b      	str	r3, [r7, #16]
 8016e62:	ed87 0a03 	vstr	s0, [r7, #12]
 8016e66:	edc7 0a02 	vstr	s1, [r7, #8]
 8016e6a:	ed87 1a01 	vstr	s2, [r7, #4]

    NK_UNUSED(min);
    NK_UNUSED(max);
    NK_UNUSED(value);

    if (state & NK_WIDGET_STATE_ACTIVED) {
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	f003 0320 	and.w	r3, r3, #32
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d009      	beq.n	8016e8c <nk_draw_slider+0x38>
        background = &style->active;
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	3338      	adds	r3, #56	; 0x38
 8016e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
        bar_color = style->bar_active;
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e82:	627b      	str	r3, [r7, #36]	; 0x24
        cursor = &style->cursor_active;
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	33a0      	adds	r3, #160	; 0xa0
 8016e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8016e8a:	e016      	b.n	8016eba <nk_draw_slider+0x66>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 8016e8c:	69bb      	ldr	r3, [r7, #24]
 8016e8e:	f003 0310 	and.w	r3, r3, #16
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d009      	beq.n	8016eaa <nk_draw_slider+0x56>
        background = &style->hover;
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	331c      	adds	r3, #28
 8016e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
        bar_color = style->bar_hover;
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ea0:	627b      	str	r3, [r7, #36]	; 0x24
        cursor = &style->cursor_hover;
 8016ea2:	697b      	ldr	r3, [r7, #20]
 8016ea4:	3384      	adds	r3, #132	; 0x84
 8016ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8016ea8:	e007      	b.n	8016eba <nk_draw_slider+0x66>
    } else {
        background = &style->normal;
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	64fb      	str	r3, [r7, #76]	; 0x4c
        bar_color = style->bar_normal;
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016eb2:	627b      	str	r3, [r7, #36]	; 0x24
        cursor = &style->cursor_normal;
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	3368      	adds	r3, #104	; 0x68
 8016eb8:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    /* calculate slider background bar */
    bar.x = bounds->x;
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    bar.y = (visual_cursor->y + visual_cursor->h/2) - bounds->h/12;
 8016ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ec2:	ed93 7a01 	vldr	s14, [r3, #4]
 8016ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ec8:	edd3 6a03 	vldr	s13, [r3, #12]
 8016ecc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016ed0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	edd3 6a03 	vldr	s13, [r3, #12]
 8016ede:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 8016ee2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016eea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    bar.w = bounds->w;
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	689b      	ldr	r3, [r3, #8]
 8016ef2:	633b      	str	r3, [r7, #48]	; 0x30
    bar.h = bounds->h/6;
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	ed93 7a03 	vldr	s14, [r3, #12]
 8016efa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8016efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016f02:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* filled background bar style */
    fill.w = (visual_cursor->x + (visual_cursor->w/2.0f)) - bar.x;
 8016f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f08:	ed93 7a00 	vldr	s14, [r3]
 8016f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8016f12:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016f16:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f26:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    fill.x = bar.x;
 8016f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    fill.y = bar.y;
 8016f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    fill.h = bar.h;
 8016f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f34:	647b      	str	r3, [r7, #68]	; 0x44

    /* draw background */
    switch(background->type) {
 8016f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	2b02      	cmp	r3, #2
 8016f3c:	d01e      	beq.n	8016f7c <nk_draw_slider+0x128>
 8016f3e:	2b02      	cmp	r3, #2
 8016f40:	dc71      	bgt.n	8017026 <nk_draw_slider+0x1d2>
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d033      	beq.n	8016fae <nk_draw_slider+0x15a>
 8016f46:	2b01      	cmp	r3, #1
 8016f48:	d16d      	bne.n	8017026 <nk_draw_slider+0x1d2>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 8016f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f4c:	1d19      	adds	r1, r3, #4
 8016f4e:	4a6b      	ldr	r2, [pc, #428]	; (80170fc <nk_draw_slider+0x2a8>)
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	ed93 6a00 	vldr	s12, [r3]
 8016f56:	edd3 6a01 	vldr	s13, [r3, #4]
 8016f5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8016f5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016f62:	6812      	ldr	r2, [r2, #0]
 8016f64:	eeb0 0a46 	vmov.f32	s0, s12
 8016f68:	eef0 0a66 	vmov.f32	s1, s13
 8016f6c:	eeb0 1a47 	vmov.f32	s2, s14
 8016f70:	eef0 1a67 	vmov.f32	s3, s15
 8016f74:	69f8      	ldr	r0, [r7, #28]
 8016f76:	f7f9 f955 	bl	8010224 <nk_draw_image>
            break;
 8016f7a:	e054      	b.n	8017026 <nk_draw_slider+0x1d2>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 8016f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f7e:	1d19      	adds	r1, r3, #4
 8016f80:	4a5e      	ldr	r2, [pc, #376]	; (80170fc <nk_draw_slider+0x2a8>)
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	ed93 6a00 	vldr	s12, [r3]
 8016f88:	edd3 6a01 	vldr	s13, [r3, #4]
 8016f8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8016f90:	edd3 7a03 	vldr	s15, [r3, #12]
 8016f94:	6812      	ldr	r2, [r2, #0]
 8016f96:	eeb0 0a46 	vmov.f32	s0, s12
 8016f9a:	eef0 0a66 	vmov.f32	s1, s13
 8016f9e:	eeb0 1a47 	vmov.f32	s2, s14
 8016fa2:	eef0 1a67 	vmov.f32	s3, s15
 8016fa6:	69f8      	ldr	r0, [r7, #28]
 8016fa8:	f7f9 fa2e 	bl	8010408 <nk_draw_nine_slice>
            break;
 8016fac:	e03b      	b.n	8017026 <nk_draw_slider+0x1d2>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 8016fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	ed93 6a00 	vldr	s12, [r3]
 8016fbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8016fc0:	ed93 7a02 	vldr	s14, [r3, #8]
 8016fc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8016fc8:	6851      	ldr	r1, [r2, #4]
 8016fca:	eeb0 2a65 	vmov.f32	s4, s11
 8016fce:	eeb0 0a46 	vmov.f32	s0, s12
 8016fd2:	eef0 0a66 	vmov.f32	s1, s13
 8016fd6:	eeb0 1a47 	vmov.f32	s2, s14
 8016fda:	eef0 1a67 	vmov.f32	s3, s15
 8016fde:	69f8      	ldr	r0, [r7, #28]
 8016fe0:	f7f8 fdc6 	bl	800fb70 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
 8016ff0:	697a      	ldr	r2, [r7, #20]
 8016ff2:	693b      	ldr	r3, [r7, #16]
 8016ff4:	ed93 6a00 	vldr	s12, [r3]
 8016ff8:	edd3 6a01 	vldr	s13, [r3, #4]
 8016ffc:	ed93 7a02 	vldr	s14, [r3, #8]
 8017000:	edd3 7a03 	vldr	s15, [r3, #12]
 8017004:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8017006:	eef0 2a45 	vmov.f32	s5, s10
 801700a:	eeb0 2a65 	vmov.f32	s4, s11
 801700e:	eeb0 0a46 	vmov.f32	s0, s12
 8017012:	eef0 0a66 	vmov.f32	s1, s13
 8017016:	eeb0 1a47 	vmov.f32	s2, s14
 801701a:	eef0 1a67 	vmov.f32	s3, s15
 801701e:	69f8      	ldr	r0, [r7, #28]
 8017020:	f7f8 fc9e 	bl	800f960 <nk_stroke_rect>
            break;
 8017024:	bf00      	nop
    }

    /* draw slider bar */
    nk_fill_rect(out, bar, style->rounding, bar_color);
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 801702c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8017030:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8017034:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8017038:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801703c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801703e:	eeb0 2a65 	vmov.f32	s4, s11
 8017042:	eeb0 0a46 	vmov.f32	s0, s12
 8017046:	eef0 0a66 	vmov.f32	s1, s13
 801704a:	eeb0 1a47 	vmov.f32	s2, s14
 801704e:	eef0 1a67 	vmov.f32	s3, s15
 8017052:	69f8      	ldr	r0, [r7, #28]
 8017054:	f7f8 fd8c 	bl	800fb70 <nk_fill_rect>
    nk_fill_rect(out, fill, style->rounding, style->bar_filled);
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8017064:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8017068:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801706c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8017070:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8017072:	eeb0 2a65 	vmov.f32	s4, s11
 8017076:	eeb0 0a46 	vmov.f32	s0, s12
 801707a:	eef0 0a66 	vmov.f32	s1, s13
 801707e:	eeb0 1a47 	vmov.f32	s2, s14
 8017082:	eef0 1a67 	vmov.f32	s3, s15
 8017086:	69f8      	ldr	r0, [r7, #28]
 8017088:	f7f8 fd72 	bl	800fb70 <nk_fill_rect>

    /* draw cursor */
    if (cursor->type == NK_STYLE_ITEM_IMAGE)
 801708c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801708e:	781b      	ldrb	r3, [r3, #0]
 8017090:	2b01      	cmp	r3, #1
 8017092:	d118      	bne.n	80170c6 <nk_draw_slider+0x272>
        nk_draw_image(out, *visual_cursor, &cursor->data.image, nk_white);
 8017094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017096:	1d19      	adds	r1, r3, #4
 8017098:	4a18      	ldr	r2, [pc, #96]	; (80170fc <nk_draw_slider+0x2a8>)
 801709a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801709c:	ed93 6a00 	vldr	s12, [r3]
 80170a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80170a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80170a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80170ac:	6812      	ldr	r2, [r2, #0]
 80170ae:	eeb0 0a46 	vmov.f32	s0, s12
 80170b2:	eef0 0a66 	vmov.f32	s1, s13
 80170b6:	eeb0 1a47 	vmov.f32	s2, s14
 80170ba:	eef0 1a67 	vmov.f32	s3, s15
 80170be:	69f8      	ldr	r0, [r7, #28]
 80170c0:	f7f9 f8b0 	bl	8010224 <nk_draw_image>
    else
        nk_fill_circle(out, *visual_cursor, cursor->data.color);
}
 80170c4:	e015      	b.n	80170f2 <nk_draw_slider+0x29e>
        nk_fill_circle(out, *visual_cursor, cursor->data.color);
 80170c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80170c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80170ca:	ed93 6a00 	vldr	s12, [r3]
 80170ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80170d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80170d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80170da:	6851      	ldr	r1, [r2, #4]
 80170dc:	eeb0 0a46 	vmov.f32	s0, s12
 80170e0:	eef0 0a66 	vmov.f32	s1, s13
 80170e4:	eeb0 1a47 	vmov.f32	s2, s14
 80170e8:	eef0 1a67 	vmov.f32	s3, s15
 80170ec:	69f8      	ldr	r0, [r7, #28]
 80170ee:	f7f8 fe35 	bl	800fd5c <nk_fill_circle>
}
 80170f2:	bf00      	nop
 80170f4:	3750      	adds	r7, #80	; 0x50
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	08021790 	.word	0x08021790

08017100 <nk_do_slider>:
nk_do_slider(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    float min, float val, float max, float step,
    const struct nk_style_slider *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b0a4      	sub	sp, #144	; 0x90
 8017104:	af04      	add	r7, sp, #16
 8017106:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017108:	62b9      	str	r1, [r7, #40]	; 0x28
 801710a:	eeb0 6a40 	vmov.f32	s12, s0
 801710e:	eef0 6a60 	vmov.f32	s13, s1
 8017112:	eeb0 7a41 	vmov.f32	s14, s2
 8017116:	eef0 7a61 	vmov.f32	s15, s3
 801711a:	ed87 2a05 	vstr	s4, [r7, #20]
 801711e:	edc7 2a04 	vstr	s5, [r7, #16]
 8017122:	ed87 3a03 	vstr	s6, [r7, #12]
 8017126:	edc7 3a02 	vstr	s7, [r7, #8]
 801712a:	607a      	str	r2, [r7, #4]
 801712c:	603b      	str	r3, [r7, #0]
 801712e:	ed87 6a06 	vstr	s12, [r7, #24]
 8017132:	edc7 6a07 	vstr	s13, [r7, #28]
 8017136:	ed87 7a08 	vstr	s14, [r7, #32]
 801713a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cursor_offset;

    struct nk_rect visual_cursor;
    struct nk_rect logical_cursor;

    NK_ASSERT(style);
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d105      	bne.n	8017150 <nk_do_slider+0x50>
 8017144:	4bad      	ldr	r3, [pc, #692]	; (80173fc <nk_do_slider+0x2fc>)
 8017146:	4aae      	ldr	r2, [pc, #696]	; (8017400 <nk_do_slider+0x300>)
 8017148:	2186      	movs	r1, #134	; 0x86
 801714a:	48ae      	ldr	r0, [pc, #696]	; (8017404 <nk_do_slider+0x304>)
 801714c:	f005 fb86 	bl	801c85c <__assert_func>
    NK_ASSERT(out);
 8017150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017152:	2b00      	cmp	r3, #0
 8017154:	d105      	bne.n	8017162 <nk_do_slider+0x62>
 8017156:	4bac      	ldr	r3, [pc, #688]	; (8017408 <nk_do_slider+0x308>)
 8017158:	4aa9      	ldr	r2, [pc, #676]	; (8017400 <nk_do_slider+0x300>)
 801715a:	2187      	movs	r1, #135	; 0x87
 801715c:	48a9      	ldr	r0, [pc, #676]	; (8017404 <nk_do_slider+0x304>)
 801715e:	f005 fb7d 	bl	801c85c <__assert_func>
    if (!out || !style)
 8017162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017164:	2b00      	cmp	r3, #0
 8017166:	d002      	beq.n	801716e <nk_do_slider+0x6e>
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d102      	bne.n	8017174 <nk_do_slider+0x74>
        return 0;
 801716e:	f04f 0300 	mov.w	r3, #0
 8017172:	e206      	b.n	8017582 <nk_do_slider+0x482>

    /* remove padding from slider bounds */
    bounds.x = bounds.x + style->padding.x;
 8017174:	ed97 7a06 	vldr	s14, [r7, #24]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 801717e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017182:	edc7 7a06 	vstr	s15, [r7, #24]
    bounds.y = bounds.y + style->padding.y;
 8017186:	ed97 7a07 	vldr	s14, [r7, #28]
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8017190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017194:	edc7 7a07 	vstr	s15, [r7, #28]
    bounds.h = NK_MAX(bounds.h, 2*style->padding.y);
 8017198:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80171a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80171a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ae:	d505      	bpl.n	80171bc <nk_do_slider+0xbc>
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80171b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80171ba:	e001      	b.n	80171c0 <nk_do_slider+0xc0>
 80171bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80171c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = NK_MAX(bounds.w, 2*style->padding.x + style->cursor_size.x);
 80171c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80171ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80171d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80171dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e4:	d50a      	bpl.n	80171fc <nk_do_slider+0xfc>
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80171ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80171f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171fa:	e001      	b.n	8017200 <nk_do_slider+0x100>
 80171fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8017200:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.w -= 2 * style->padding.x;
 8017204:	ed97 7a08 	vldr	s14, [r7, #32]
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 801720e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017216:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.h -= 2 * style->padding.y;
 801721a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8017224:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017228:	ee77 7a67 	vsub.f32	s15, s14, s15
 801722c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* optional buttons */
    if (style->show_buttons) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017236:	2b00      	cmp	r3, #0
 8017238:	f000 808d 	beq.w	8017356 <nk_do_slider+0x256>
        nk_flags ws;
        struct nk_rect button;
        button.y = bounds.y;
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	63bb      	str	r3, [r7, #56]	; 0x38
        button.w = bounds.h;
 8017240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017242:	63fb      	str	r3, [r7, #60]	; 0x3c
        button.h = bounds.h;
 8017244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017246:	643b      	str	r3, [r7, #64]	; 0x40

        /* decrement button */
        button.x = bounds.x;
 8017248:	69bb      	ldr	r3, [r7, #24]
 801724a:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol, NK_BUTTON_DEFAULT,
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f893 1215 	ldrb.w	r1, [r3, #533]	; 0x215
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017258:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 801725c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8017260:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8017264:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017268:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801726c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017270:	9202      	str	r2, [sp, #8]
 8017272:	683a      	ldr	r2, [r7, #0]
 8017274:	9201      	str	r2, [sp, #4]
 8017276:	9300      	str	r3, [sp, #0]
 8017278:	2300      	movs	r3, #0
 801727a:	460a      	mov	r2, r1
 801727c:	eeb0 0a46 	vmov.f32	s0, s12
 8017280:	eef0 0a66 	vmov.f32	s1, s13
 8017284:	eeb0 1a47 	vmov.f32	s2, s14
 8017288:	eef0 1a67 	vmov.f32	s3, s15
 801728c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801728e:	f7f6 fbcb 	bl	800da28 <nk_do_button_symbol>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	d007      	beq.n	80172a8 <nk_do_slider+0x1a8>
            &style->dec_button, in, font))
            val -= step;
 8017298:	ed97 7a04 	vldr	s14, [r7, #16]
 801729c:	edd7 7a02 	vldr	s15, [r7, #8]
 80172a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80172a4:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = (bounds.x + bounds.w) - button.w;
 80172a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80172ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80172b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80172b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80172b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80172bc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol, NK_BUTTON_DEFAULT,
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f893 1214 	ldrb.w	r1, [r3, #532]	; 0x214
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	33e4      	adds	r3, #228	; 0xe4
 80172ca:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80172ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80172d2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80172d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80172da:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80172de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80172e2:	9202      	str	r2, [sp, #8]
 80172e4:	683a      	ldr	r2, [r7, #0]
 80172e6:	9201      	str	r2, [sp, #4]
 80172e8:	9300      	str	r3, [sp, #0]
 80172ea:	2300      	movs	r3, #0
 80172ec:	460a      	mov	r2, r1
 80172ee:	eeb0 0a46 	vmov.f32	s0, s12
 80172f2:	eef0 0a66 	vmov.f32	s1, s13
 80172f6:	eeb0 1a47 	vmov.f32	s2, s14
 80172fa:	eef0 1a67 	vmov.f32	s3, s15
 80172fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017300:	f7f6 fb92 	bl	800da28 <nk_do_button_symbol>
 8017304:	4603      	mov	r3, r0
 8017306:	2b00      	cmp	r3, #0
 8017308:	d007      	beq.n	801731a <nk_do_slider+0x21a>
            &style->inc_button, in, font))
            val += step;
 801730a:	ed97 7a04 	vldr	s14, [r7, #16]
 801730e:	edd7 7a02 	vldr	s15, [r7, #8]
 8017312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017316:	edc7 7a04 	vstr	s15, [r7, #16]

        bounds.x = bounds.x + button.w + style->spacing.x;
 801731a:	ed97 7a06 	vldr	s14, [r7, #24]
 801731e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 801732c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017330:	edc7 7a06 	vstr	s15, [r7, #24]
        bounds.w = bounds.w - (2*button.w + 2*style->spacing.x);
 8017334:	ed97 7a08 	vldr	s14, [r7, #32]
 8017338:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801733c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8017346:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801734e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017352:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* remove one cursor size to support visual cursor */
    bounds.x += style->cursor_size.x*0.5f;
 8017356:	ed97 7a06 	vldr	s14, [r7, #24]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8017360:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017368:	ee77 7a27 	vadd.f32	s15, s14, s15
 801736c:	edc7 7a06 	vstr	s15, [r7, #24]
    bounds.w -= style->cursor_size.x;
 8017370:	ed97 7a08 	vldr	s14, [r7, #32]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 801737a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801737e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* make sure the provided values are correct */
    slider_max = NK_MAX(min, max);
 8017382:	ed97 7a05 	vldr	s14, [r7, #20]
 8017386:	edd7 7a03 	vldr	s15, [r7, #12]
 801738a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017392:	d501      	bpl.n	8017398 <nk_do_slider+0x298>
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	e000      	b.n	801739a <nk_do_slider+0x29a>
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	67fb      	str	r3, [r7, #124]	; 0x7c
    slider_min = NK_MIN(min, max);
 801739c:	ed97 7a05 	vldr	s14, [r7, #20]
 80173a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80173a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ac:	d501      	bpl.n	80173b2 <nk_do_slider+0x2b2>
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	e000      	b.n	80173b4 <nk_do_slider+0x2b4>
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	67bb      	str	r3, [r7, #120]	; 0x78
    slider_value = NK_CLAMP(slider_min, val, slider_max);
 80173b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80173ba:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80173be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173c6:	d502      	bpl.n	80173ce <nk_do_slider+0x2ce>
 80173c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80173cc:	e001      	b.n	80173d2 <nk_do_slider+0x2d2>
 80173ce:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80173d2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80173d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80173da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173de:	d501      	bpl.n	80173e4 <nk_do_slider+0x2e4>
 80173e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80173e2:	e014      	b.n	801740e <nk_do_slider+0x30e>
 80173e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80173e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80173ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f4:	d50a      	bpl.n	801740c <nk_do_slider+0x30c>
 80173f6:	693b      	ldr	r3, [r7, #16]
 80173f8:	e009      	b.n	801740e <nk_do_slider+0x30e>
 80173fa:	bf00      	nop
 80173fc:	080206a8 	.word	0x080206a8
 8017400:	08021794 	.word	0x08021794
 8017404:	080206b0 	.word	0x080206b0
 8017408:	080206cc 	.word	0x080206cc
 801740c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801740e:	677b      	str	r3, [r7, #116]	; 0x74
    slider_range = slider_max - slider_min;
 8017410:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8017414:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017418:	ee77 7a67 	vsub.f32	s15, s14, s15
 801741c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    slider_steps = slider_range / step;
 8017420:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8017424:	ed97 7a02 	vldr	s14, [r7, #8]
 8017428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801742c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor_offset = (slider_value - slider_min) / step;
 8017430:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8017434:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017438:	ee77 6a67 	vsub.f32	s13, s14, s15
 801743c:	ed97 7a02 	vldr	s14, [r7, #8]
 8017440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017444:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate cursor
    Basically you have two cursors. One for visual representation and interaction
    and one for updating the actual cursor value. */
    logical_cursor.h = bounds.h;
 8017448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744a:	657b      	str	r3, [r7, #84]	; 0x54
    logical_cursor.w = bounds.w / slider_steps;
 801744c:	edd7 6a08 	vldr	s13, [r7, #32]
 8017450:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8017454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017458:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    logical_cursor.x = bounds.x + (logical_cursor.w * cursor_offset);
 801745c:	ed97 7a06 	vldr	s14, [r7, #24]
 8017460:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017464:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8017468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801746c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017470:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    logical_cursor.y = bounds.y;
 8017474:	69fb      	ldr	r3, [r7, #28]
 8017476:	64fb      	str	r3, [r7, #76]	; 0x4c

    visual_cursor.h = style->cursor_size.y;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801747e:	667b      	str	r3, [r7, #100]	; 0x64
    visual_cursor.w = style->cursor_size.x;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017486:	663b      	str	r3, [r7, #96]	; 0x60
    visual_cursor.y = (bounds.y + bounds.h*0.5f) - visual_cursor.h*0.5f;
 8017488:	ed97 7a07 	vldr	s14, [r7, #28]
 801748c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017490:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017494:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017498:	ee37 7a27 	vadd.f32	s14, s14, s15
 801749c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80174a0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80174a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80174a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174ac:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    visual_cursor.x = logical_cursor.x - visual_cursor.w*0.5f;
 80174b0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80174b4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80174b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80174bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80174c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174c4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    slider_value = nk_slider_behavior(state, &logical_cursor, &visual_cursor,
 80174c8:	ed97 6a06 	vldr	s12, [r7, #24]
 80174cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80174d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80174d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80174d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80174dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80174e0:	ed97 4a1b 	vldr	s8, [r7, #108]	; 0x6c
 80174e4:	edd7 3a02 	vldr	s7, [r7, #8]
 80174e8:	ed97 3a1d 	vldr	s6, [r7, #116]	; 0x74
 80174ec:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 80174f0:	ed97 2a1e 	vldr	s4, [r7, #120]	; 0x78
 80174f4:	eeb0 0a46 	vmov.f32	s0, s12
 80174f8:	eef0 0a66 	vmov.f32	s1, s13
 80174fc:	eeb0 1a47 	vmov.f32	s2, s14
 8017500:	eef0 1a67 	vmov.f32	s3, s15
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017508:	f7ff fb34 	bl	8016b74 <nk_slider_behavior>
 801750c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
        in, bounds, slider_min, slider_max, slider_value, step, slider_steps);
    visual_cursor.x = logical_cursor.x - visual_cursor.w*0.5f;
 8017510:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017514:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8017518:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801751c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017524:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    /* draw slider */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801752e:	2b00      	cmp	r3, #0
 8017530:	d007      	beq.n	8017542 <nk_do_slider+0x442>
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
 801753e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017540:	4798      	blx	r3
    nk_draw_slider(out, *state, style, &bounds, &visual_cursor, slider_min, slider_value, slider_max);
 8017542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017544:	6819      	ldr	r1, [r3, #0]
 8017546:	f107 0218 	add.w	r2, r7, #24
 801754a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801754e:	9300      	str	r3, [sp, #0]
 8017550:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 8017554:	edd7 0a1d 	vldr	s1, [r7, #116]	; 0x74
 8017558:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 801755c:	4613      	mov	r3, r2
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017562:	f7ff fc77 	bl	8016e54 <nk_draw_slider>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801756c:	2b00      	cmp	r3, #0
 801756e:	d007      	beq.n	8017580 <nk_do_slider+0x480>
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
 801757c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801757e:	4798      	blx	r3
    return slider_value;
 8017580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8017582:	ee07 3a90 	vmov	s15, r3
 8017586:	eeb0 0a67 	vmov.f32	s0, s15
 801758a:	3780      	adds	r7, #128	; 0x80
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <nk_slider_float>:
NK_API nk_bool
nk_slider_float(struct nk_context *ctx, float min_value, float *value, float max_value,
    float value_step)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b094      	sub	sp, #80	; 0x50
 8017594:	af02      	add	r7, sp, #8
 8017596:	6178      	str	r0, [r7, #20]
 8017598:	ed87 0a04 	vstr	s0, [r7, #16]
 801759c:	60f9      	str	r1, [r7, #12]
 801759e:	edc7 0a02 	vstr	s1, [r7, #8]
 80175a2:	ed87 1a01 	vstr	s2, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;
    struct nk_input *in;
    const struct nk_style *style;

    int ret = 0;
 80175a6:	2300      	movs	r3, #0
 80175a8:	647b      	str	r3, [r7, #68]	; 0x44
    float old_value;
    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 80175aa:	697b      	ldr	r3, [r7, #20]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d105      	bne.n	80175bc <nk_slider_float+0x2c>
 80175b0:	4b5a      	ldr	r3, [pc, #360]	; (801771c <nk_slider_float+0x18c>)
 80175b2:	4a5b      	ldr	r2, [pc, #364]	; (8017720 <nk_slider_float+0x190>)
 80175b4:	21dc      	movs	r1, #220	; 0xdc
 80175b6:	485b      	ldr	r0, [pc, #364]	; (8017724 <nk_slider_float+0x194>)
 80175b8:	f005 f950 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175c2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d105      	bne.n	80175d6 <nk_slider_float+0x46>
 80175ca:	4b57      	ldr	r3, [pc, #348]	; (8017728 <nk_slider_float+0x198>)
 80175cc:	4a54      	ldr	r2, [pc, #336]	; (8017720 <nk_slider_float+0x190>)
 80175ce:	21dd      	movs	r1, #221	; 0xdd
 80175d0:	4854      	ldr	r0, [pc, #336]	; (8017724 <nk_slider_float+0x194>)
 80175d2:	f005 f943 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175dc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d105      	bne.n	80175f4 <nk_slider_float+0x64>
 80175e8:	4b50      	ldr	r3, [pc, #320]	; (801772c <nk_slider_float+0x19c>)
 80175ea:	4a4d      	ldr	r2, [pc, #308]	; (8017720 <nk_slider_float+0x190>)
 80175ec:	21de      	movs	r1, #222	; 0xde
 80175ee:	484d      	ldr	r0, [pc, #308]	; (8017724 <nk_slider_float+0x194>)
 80175f0:	f005 f934 	bl	801c85c <__assert_func>
    NK_ASSERT(value);
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d105      	bne.n	8017606 <nk_slider_float+0x76>
 80175fa:	4b4d      	ldr	r3, [pc, #308]	; (8017730 <nk_slider_float+0x1a0>)
 80175fc:	4a48      	ldr	r2, [pc, #288]	; (8017720 <nk_slider_float+0x190>)
 80175fe:	21df      	movs	r1, #223	; 0xdf
 8017600:	4848      	ldr	r0, [pc, #288]	; (8017724 <nk_slider_float+0x194>)
 8017602:	f005 f92b 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !value)
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d012      	beq.n	8017632 <nk_slider_float+0xa2>
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017612:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00b      	beq.n	8017632 <nk_slider_float+0xa2>
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017620:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017628:	2b00      	cmp	r3, #0
 801762a:	d002      	beq.n	8017632 <nk_slider_float+0xa2>
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d101      	bne.n	8017636 <nk_slider_float+0xa6>
        return ret;
 8017632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017634:	e06d      	b.n	8017712 <nk_slider_float+0x182>

    win = ctx->current;
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801763c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017640:	643b      	str	r3, [r7, #64]	; 0x40
    style = &ctx->style;
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017648:	63fb      	str	r3, [r7, #60]	; 0x3c
    layout = win->layout;
 801764a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801764c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017650:	63bb      	str	r3, [r7, #56]	; 0x38

    state = nk_widget(&bounds, ctx);
 8017652:	f107 031c 	add.w	r3, r7, #28
 8017656:	6979      	ldr	r1, [r7, #20]
 8017658:	4618      	mov	r0, r3
 801765a:	f003 fe5f 	bl	801b31c <nk_widget>
 801765e:	4603      	mov	r3, r0
 8017660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (!state) return ret;
 8017664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017668:	2b00      	cmp	r3, #0
 801766a:	d101      	bne.n	8017670 <nk_slider_float+0xe0>
 801766c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801766e:	e050      	b.n	8017712 <nk_slider_float+0x182>
    in = (/*state == NK_WIDGET_ROM || */ layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8017670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017672:	685b      	ldr	r3, [r3, #4]
 8017674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017678:	2b00      	cmp	r3, #0
 801767a:	d101      	bne.n	8017680 <nk_slider_float+0xf0>
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	e000      	b.n	8017682 <nk_slider_float+0xf2>
 8017680:	2300      	movs	r3, #0
 8017682:	633b      	str	r3, [r7, #48]	; 0x30

    old_value = *value;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	62fb      	str	r3, [r7, #44]	; 0x2c
    *value = nk_do_slider(&ctx->last_widget_state, &win->buffer, bounds, min_value,
 801768a:	697b      	ldr	r3, [r7, #20]
 801768c:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 8017690:	3014      	adds	r0, #20
 8017692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017694:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8017698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801769a:	f503 6290 	add.w	r2, r3, #1152	; 0x480
                old_value, max_value, value_step, &style->slider, in, style->font);
 801769e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a0:	681b      	ldr	r3, [r3, #0]
    *value = nk_do_slider(&ctx->last_widget_state, &win->buffer, bounds, min_value,
 80176a2:	ed97 6a07 	vldr	s12, [r7, #28]
 80176a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80176aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80176ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80176b2:	9300      	str	r3, [sp, #0]
 80176b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b6:	edd7 3a01 	vldr	s7, [r7, #4]
 80176ba:	ed97 3a02 	vldr	s6, [r7, #8]
 80176be:	edd7 2a0b 	vldr	s5, [r7, #44]	; 0x2c
 80176c2:	ed97 2a04 	vldr	s4, [r7, #16]
 80176c6:	eeb0 0a46 	vmov.f32	s0, s12
 80176ca:	eef0 0a66 	vmov.f32	s1, s13
 80176ce:	eeb0 1a47 	vmov.f32	s2, s14
 80176d2:	eef0 1a67 	vmov.f32	s3, s15
 80176d6:	f7ff fd13 	bl	8017100 <nk_do_slider>
 80176da:	eef0 7a40 	vmov.f32	s15, s0
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	edc3 7a00 	vstr	s15, [r3]
    return (old_value > *value || old_value < *value);
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	edd3 7a00 	vldr	s15, [r3]
 80176ea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80176ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f6:	dc09      	bgt.n	801770c <nk_slider_float+0x17c>
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	edd3 7a00 	vldr	s15, [r3]
 80176fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770a:	d501      	bpl.n	8017710 <nk_slider_float+0x180>
 801770c:	2301      	movs	r3, #1
 801770e:	e000      	b.n	8017712 <nk_slider_float+0x182>
 8017710:	2300      	movs	r3, #0
}
 8017712:	4618      	mov	r0, r3
 8017714:	3748      	adds	r7, #72	; 0x48
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
 801771a:	bf00      	nop
 801771c:	080206d0 	.word	0x080206d0
 8017720:	080217a4 	.word	0x080217a4
 8017724:	080206b0 	.word	0x080206b0
 8017728:	080206d4 	.word	0x080206d4
 801772c:	080206e4 	.word	0x080206e4
 8017730:	080206fc 	.word	0x080206fc

08017734 <nk_style_default>:
/* ===============================================================
 *
 *                              STYLE
 *
 * ===============================================================*/
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	2100      	movs	r1, #0
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f000 f838 	bl	80177b4 <nk_style_from_table>
 8017744:	bf00      	nop
 8017746:	3708      	adds	r7, #8
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}

0801774c <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 801774c:	b4b0      	push	{r4, r5, r7}
 801774e:	b08b      	sub	sp, #44	; 0x2c
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 8017756:	2300      	movs	r3, #0
 8017758:	733b      	strb	r3, [r7, #12]
    i.data.color = col;
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	613b      	str	r3, [r7, #16]
    return i;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	461d      	mov	r5, r3
 8017762:	f107 040c 	add.w	r4, r7, #12
 8017766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801776a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801776e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	372c      	adds	r7, #44	; 0x2c
 8017776:	46bd      	mov	sp, r7
 8017778:	bcb0      	pop	{r4, r5, r7}
 801777a:	4770      	bx	lr

0801777c <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 801777c:	b5b0      	push	{r4, r5, r7, lr}
 801777e:	b08a      	sub	sp, #40	; 0x28
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 8017784:	2300      	movs	r3, #0
 8017786:	733b      	strb	r3, [r7, #12]
    i.data.color = nk_rgba(0,0,0,0);
 8017788:	2300      	movs	r3, #0
 801778a:	2200      	movs	r2, #0
 801778c:	2100      	movs	r1, #0
 801778e:	2000      	movs	r0, #0
 8017790:	f7f6 fadf 	bl	800dd52 <nk_rgba>
 8017794:	4603      	mov	r3, r0
 8017796:	613b      	str	r3, [r7, #16]
    return i;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	461d      	mov	r5, r3
 801779c:	f107 040c 	add.w	r4, r7, #12
 80177a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80177a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80177a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	3728      	adds	r7, #40	; 0x28
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bdb0      	pop	{r4, r5, r7, pc}

080177b4 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 80177b4:	b5b0      	push	{r4, r5, r7, lr}
 80177b6:	b09e      	sub	sp, #120	; 0x78
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6278      	str	r0, [r7, #36]	; 0x24
 80177bc:	6239      	str	r1, [r7, #32]
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 80177be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d105      	bne.n	80177d0 <nk_style_from_table+0x1c>
 80177c4:	4b09      	ldr	r3, [pc, #36]	; (80177ec <nk_style_from_table+0x38>)
 80177c6:	4a0a      	ldr	r2, [pc, #40]	; (80177f0 <nk_style_from_table+0x3c>)
 80177c8:	216b      	movs	r1, #107	; 0x6b
 80177ca:	480a      	ldr	r0, [pc, #40]	; (80177f4 <nk_style_from_table+0x40>)
 80177cc:	f005 f846 	bl	801c85c <__assert_func>
    if (!ctx) return;
 80177d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f002 8079 	beq.w	80198ca <nk_style_from_table+0x2116>
    style = &ctx->style;
 80177d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80177de:	677b      	str	r3, [r7, #116]	; 0x74
    table = (!table) ? nk_default_color_style: table;
 80177e0:	6a3b      	ldr	r3, [r7, #32]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d008      	beq.n	80177f8 <nk_style_from_table+0x44>
 80177e6:	6a3b      	ldr	r3, [r7, #32]
 80177e8:	e007      	b.n	80177fa <nk_style_from_table+0x46>
 80177ea:	bf00      	nop
 80177ec:	08020970 	.word	0x08020970
 80177f0:	08021824 	.word	0x08021824
 80177f4:	08020974 	.word	0x08020974
 80177f8:	4bc6      	ldr	r3, [pc, #792]	; (8017b14 <nk_style_from_table+0x360>)
 80177fa:	623b      	str	r3, [r7, #32]

    /* default text */
    text = &style->text;
 80177fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80177fe:	332c      	adds	r3, #44	; 0x2c
 8017800:	673b      	str	r3, [r7, #112]	; 0x70
    text->color = table[NK_COLOR_TEXT];
 8017802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017804:	6a3a      	ldr	r2, [r7, #32]
 8017806:	6810      	ldr	r0, [r2, #0]
 8017808:	6018      	str	r0, [r3, #0]
    text->padding = nk_vec2(0,0);
 801780a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801780c:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8017b18 <nk_style_from_table+0x364>
 8017810:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8017b18 <nk_style_from_table+0x364>
 8017814:	f7fa ffba 	bl	801278c <nk_vec2>
 8017818:	eeb0 7a40 	vmov.f32	s14, s0
 801781c:	eef0 7a60 	vmov.f32	s15, s1
 8017820:	ed84 7a01 	vstr	s14, [r4, #4]
 8017824:	edc4 7a02 	vstr	s15, [r4, #8]

    /* default button */
    button = &style->button;
 8017828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801782a:	3338      	adds	r3, #56	; 0x38
 801782c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801782e:	2198      	movs	r1, #152	; 0x98
 8017830:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017832:	f003 fb63 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 8017836:	6a3b      	ldr	r3, [r7, #32]
 8017838:	3310      	adds	r3, #16
 801783a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801783c:	463a      	mov	r2, r7
 801783e:	6819      	ldr	r1, [r3, #0]
 8017840:	460b      	mov	r3, r1
 8017842:	4619      	mov	r1, r3
 8017844:	4610      	mov	r0, r2
 8017846:	f7ff ff81 	bl	801774c <nk_style_item_color>
 801784a:	4625      	mov	r5, r4
 801784c:	463c      	mov	r4, r7
 801784e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017852:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017856:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801785a:	6a3b      	ldr	r3, [r7, #32]
 801785c:	3314      	adds	r3, #20
 801785e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017860:	463a      	mov	r2, r7
 8017862:	6819      	ldr	r1, [r3, #0]
 8017864:	460b      	mov	r3, r1
 8017866:	4619      	mov	r1, r3
 8017868:	4610      	mov	r0, r2
 801786a:	f7ff ff6f 	bl	801774c <nk_style_item_color>
 801786e:	341c      	adds	r4, #28
 8017870:	463d      	mov	r5, r7
 8017872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017876:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801787a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 801787e:	6a3b      	ldr	r3, [r7, #32]
 8017880:	3318      	adds	r3, #24
 8017882:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017884:	463a      	mov	r2, r7
 8017886:	6819      	ldr	r1, [r3, #0]
 8017888:	460b      	mov	r3, r1
 801788a:	4619      	mov	r1, r3
 801788c:	4610      	mov	r0, r2
 801788e:	f7ff ff5d 	bl	801774c <nk_style_item_color>
 8017892:	3438      	adds	r4, #56	; 0x38
 8017894:	463d      	mov	r5, r7
 8017896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801789a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801789e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 80178a2:	6a3b      	ldr	r3, [r7, #32]
 80178a4:	f103 020c 	add.w	r2, r3, #12
 80178a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178aa:	3354      	adds	r3, #84	; 0x54
 80178ac:	6810      	ldr	r0, [r2, #0]
 80178ae:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_BUTTON];
 80178b0:	6a3b      	ldr	r3, [r7, #32]
 80178b2:	f103 0210 	add.w	r2, r3, #16
 80178b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178b8:	3358      	adds	r3, #88	; 0x58
 80178ba:	6810      	ldr	r0, [r2, #0]
 80178bc:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 80178be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178c0:	6a3a      	ldr	r2, [r7, #32]
 80178c2:	335c      	adds	r3, #92	; 0x5c
 80178c4:	6810      	ldr	r0, [r2, #0]
 80178c6:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 80178c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178ca:	6a3a      	ldr	r2, [r7, #32]
 80178cc:	3360      	adds	r3, #96	; 0x60
 80178ce:	6810      	ldr	r0, [r2, #0]
 80178d0:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 80178d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80178d4:	6a3a      	ldr	r2, [r7, #32]
 80178d6:	3364      	adds	r3, #100	; 0x64
 80178d8:	6810      	ldr	r0, [r2, #0]
 80178da:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 80178dc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80178de:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80178e2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80178e6:	f7fa ff51 	bl	801278c <nk_vec2>
 80178ea:	eeb0 7a40 	vmov.f32	s14, s0
 80178ee:	eef0 7a60 	vmov.f32	s15, s1
 80178f2:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80178f6:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->image_padding   = nk_vec2(0.0f,0.0f);
 80178fa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80178fc:	eddf 0a86 	vldr	s1, [pc, #536]	; 8017b18 <nk_style_from_table+0x364>
 8017900:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8017b18 <nk_style_from_table+0x364>
 8017904:	f7fa ff42 	bl	801278c <nk_vec2>
 8017908:	eeb0 7a40 	vmov.f32	s14, s0
 801790c:	eef0 7a60 	vmov.f32	s15, s1
 8017910:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 8017914:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 8017918:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801791a:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8017b18 <nk_style_from_table+0x364>
 801791e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8017b18 <nk_style_from_table+0x364>
 8017922:	f7fa ff33 	bl	801278c <nk_vec2>
 8017926:	eeb0 7a40 	vmov.f32	s14, s0
 801792a:	eef0 7a60 	vmov.f32	s15, s1
 801792e:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8017932:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8017936:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017938:	2000      	movs	r0, #0
 801793a:	f7f9 fadb 	bl	8010ef4 <nk_handle_ptr>
 801793e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8017942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017944:	2212      	movs	r2, #18
 8017946:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 8017948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801794a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801794e:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 4.0f;
 8017950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017952:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8017956:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8017958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801795a:	2200      	movs	r2, #0
 801795c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8017960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017962:	2200      	movs	r2, #0
 8017964:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* contextual button */
    button = &style->contextual_button;
 8017968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801796a:	33d0      	adds	r3, #208	; 0xd0
 801796c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801796e:	2198      	movs	r1, #152	; 0x98
 8017970:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017972:	f003 fac3 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8017976:	6a3b      	ldr	r3, [r7, #32]
 8017978:	3304      	adds	r3, #4
 801797a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801797c:	463a      	mov	r2, r7
 801797e:	6819      	ldr	r1, [r3, #0]
 8017980:	460b      	mov	r3, r1
 8017982:	4619      	mov	r1, r3
 8017984:	4610      	mov	r0, r2
 8017986:	f7ff fee1 	bl	801774c <nk_style_item_color>
 801798a:	4625      	mov	r5, r4
 801798c:	463c      	mov	r4, r7
 801798e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017992:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017996:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801799a:	6a3b      	ldr	r3, [r7, #32]
 801799c:	3314      	adds	r3, #20
 801799e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80179a0:	463a      	mov	r2, r7
 80179a2:	6819      	ldr	r1, [r3, #0]
 80179a4:	460b      	mov	r3, r1
 80179a6:	4619      	mov	r1, r3
 80179a8:	4610      	mov	r0, r2
 80179aa:	f7ff fecf 	bl	801774c <nk_style_item_color>
 80179ae:	341c      	adds	r4, #28
 80179b0:	463d      	mov	r5, r7
 80179b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80179ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 80179be:	6a3b      	ldr	r3, [r7, #32]
 80179c0:	3318      	adds	r3, #24
 80179c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80179c4:	463a      	mov	r2, r7
 80179c6:	6819      	ldr	r1, [r3, #0]
 80179c8:	460b      	mov	r3, r1
 80179ca:	4619      	mov	r1, r3
 80179cc:	4610      	mov	r0, r2
 80179ce:	f7ff febd 	bl	801774c <nk_style_item_color>
 80179d2:	3438      	adds	r4, #56	; 0x38
 80179d4:	463d      	mov	r5, r7
 80179d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80179de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 80179e2:	6a3b      	ldr	r3, [r7, #32]
 80179e4:	1d1a      	adds	r2, r3, #4
 80179e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179e8:	3354      	adds	r3, #84	; 0x54
 80179ea:	6810      	ldr	r0, [r2, #0]
 80179ec:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	1d1a      	adds	r2, r3, #4
 80179f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179f4:	3358      	adds	r3, #88	; 0x58
 80179f6:	6810      	ldr	r0, [r2, #0]
 80179f8:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 80179fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179fc:	6a3a      	ldr	r2, [r7, #32]
 80179fe:	335c      	adds	r3, #92	; 0x5c
 8017a00:	6810      	ldr	r0, [r2, #0]
 8017a02:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8017a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a06:	6a3a      	ldr	r2, [r7, #32]
 8017a08:	3360      	adds	r3, #96	; 0x60
 8017a0a:	6810      	ldr	r0, [r2, #0]
 8017a0c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8017a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a10:	6a3a      	ldr	r2, [r7, #32]
 8017a12:	3364      	adds	r3, #100	; 0x64
 8017a14:	6810      	ldr	r0, [r2, #0]
 8017a16:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8017a18:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017a1a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8017a1e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017a22:	f7fa feb3 	bl	801278c <nk_vec2>
 8017a26:	eeb0 7a40 	vmov.f32	s14, s0
 8017a2a:	eef0 7a60 	vmov.f32	s15, s1
 8017a2e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8017a32:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8017a36:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017a38:	eddf 0a37 	vldr	s1, [pc, #220]	; 8017b18 <nk_style_from_table+0x364>
 8017a3c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8017b18 <nk_style_from_table+0x364>
 8017a40:	f7fa fea4 	bl	801278c <nk_vec2>
 8017a44:	eeb0 7a40 	vmov.f32	s14, s0
 8017a48:	eef0 7a60 	vmov.f32	s15, s1
 8017a4c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8017a50:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8017a54:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017a56:	2000      	movs	r0, #0
 8017a58:	f7f9 fa4c 	bl	8010ef4 <nk_handle_ptr>
 8017a5c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8017a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a62:	2212      	movs	r2, #18
 8017a64:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8017a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a68:	f04f 0200 	mov.w	r2, #0
 8017a6c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8017a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a70:	f04f 0200 	mov.w	r2, #0
 8017a74:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8017a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a78:	2200      	movs	r2, #0
 8017a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8017a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a80:	2200      	movs	r2, #0
 8017a82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* menu button */
    button = &style->menu_button;
 8017a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8017a8e:	2198      	movs	r1, #152	; 0x98
 8017a90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017a92:	f003 fa33 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8017a96:	6a3b      	ldr	r3, [r7, #32]
 8017a98:	3304      	adds	r3, #4
 8017a9a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017a9c:	463a      	mov	r2, r7
 8017a9e:	6819      	ldr	r1, [r3, #0]
 8017aa0:	460b      	mov	r3, r1
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	f7ff fe51 	bl	801774c <nk_style_item_color>
 8017aaa:	4625      	mov	r5, r4
 8017aac:	463c      	mov	r4, r7
 8017aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017ab2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017ab6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8017aba:	6a3b      	ldr	r3, [r7, #32]
 8017abc:	3304      	adds	r3, #4
 8017abe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017ac0:	463a      	mov	r2, r7
 8017ac2:	6819      	ldr	r1, [r3, #0]
 8017ac4:	460b      	mov	r3, r1
 8017ac6:	4619      	mov	r1, r3
 8017ac8:	4610      	mov	r0, r2
 8017aca:	f7ff fe3f 	bl	801774c <nk_style_item_color>
 8017ace:	341c      	adds	r4, #28
 8017ad0:	463d      	mov	r5, r7
 8017ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ad6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8017ade:	6a3b      	ldr	r3, [r7, #32]
 8017ae0:	3304      	adds	r3, #4
 8017ae2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017ae4:	463a      	mov	r2, r7
 8017ae6:	6819      	ldr	r1, [r3, #0]
 8017ae8:	460b      	mov	r3, r1
 8017aea:	4619      	mov	r1, r3
 8017aec:	4610      	mov	r0, r2
 8017aee:	f7ff fe2d 	bl	801774c <nk_style_item_color>
 8017af2:	3438      	adds	r4, #56	; 0x38
 8017af4:	463d      	mov	r5, r7
 8017af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017afa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 8017b02:	6a3b      	ldr	r3, [r7, #32]
 8017b04:	1d1a      	adds	r2, r3, #4
 8017b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b08:	3354      	adds	r3, #84	; 0x54
 8017b0a:	6810      	ldr	r0, [r2, #0]
 8017b0c:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 8017b0e:	6a3b      	ldr	r3, [r7, #32]
 8017b10:	1d1a      	adds	r2, r3, #4
 8017b12:	e003      	b.n	8017b1c <nk_style_from_table+0x368>
 8017b14:	080217b4 	.word	0x080217b4
 8017b18:	00000000 	.word	0x00000000
 8017b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b1e:	3358      	adds	r3, #88	; 0x58
 8017b20:	6810      	ldr	r0, [r2, #0]
 8017b22:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8017b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b26:	6a3a      	ldr	r2, [r7, #32]
 8017b28:	335c      	adds	r3, #92	; 0x5c
 8017b2a:	6810      	ldr	r0, [r2, #0]
 8017b2c:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8017b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b30:	6a3a      	ldr	r2, [r7, #32]
 8017b32:	3360      	adds	r3, #96	; 0x60
 8017b34:	6810      	ldr	r0, [r2, #0]
 8017b36:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8017b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b3a:	6a3a      	ldr	r2, [r7, #32]
 8017b3c:	3364      	adds	r3, #100	; 0x64
 8017b3e:	6810      	ldr	r0, [r2, #0]
 8017b40:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8017b42:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017b44:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8017b48:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017b4c:	f7fa fe1e 	bl	801278c <nk_vec2>
 8017b50:	eeb0 7a40 	vmov.f32	s14, s0
 8017b54:	eef0 7a60 	vmov.f32	s15, s1
 8017b58:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8017b5c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8017b60:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017b62:	ed5f 0a13 	vldr	s1, [pc, #-76]	; 8017b18 <nk_style_from_table+0x364>
 8017b66:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 8017b18 <nk_style_from_table+0x364>
 8017b6a:	f7fa fe0f 	bl	801278c <nk_vec2>
 8017b6e:	eeb0 7a40 	vmov.f32	s14, s0
 8017b72:	eef0 7a60 	vmov.f32	s15, s1
 8017b76:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8017b7a:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8017b7e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8017b80:	2000      	movs	r0, #0
 8017b82:	f7f9 f9b7 	bl	8010ef4 <nk_handle_ptr>
 8017b86:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8017b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b8c:	2212      	movs	r2, #18
 8017b8e:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8017b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b92:	f04f 0200 	mov.w	r2, #0
 8017b96:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 1.0f;
 8017b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017b9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017b9e:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8017ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8017ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017baa:	2200      	movs	r2, #0
 8017bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* checkbox toggle */
    toggle = &style->checkbox;
 8017bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017bb2:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8017bb6:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 8017bb8:	21c8      	movs	r1, #200	; 0xc8
 8017bba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017bbc:	f003 f99e 	bl	801aefc <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8017bc0:	6a3b      	ldr	r3, [r7, #32]
 8017bc2:	331c      	adds	r3, #28
 8017bc4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017bc6:	463a      	mov	r2, r7
 8017bc8:	6819      	ldr	r1, [r3, #0]
 8017bca:	460b      	mov	r3, r1
 8017bcc:	4619      	mov	r1, r3
 8017bce:	4610      	mov	r0, r2
 8017bd0:	f7ff fdbc 	bl	801774c <nk_style_item_color>
 8017bd4:	4625      	mov	r5, r4
 8017bd6:	463c      	mov	r4, r7
 8017bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017bdc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017be0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8017be4:	6a3b      	ldr	r3, [r7, #32]
 8017be6:	3320      	adds	r3, #32
 8017be8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017bea:	463a      	mov	r2, r7
 8017bec:	6819      	ldr	r1, [r3, #0]
 8017bee:	460b      	mov	r3, r1
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	4610      	mov	r0, r2
 8017bf4:	f7ff fdaa 	bl	801774c <nk_style_item_color>
 8017bf8:	341c      	adds	r4, #28
 8017bfa:	463d      	mov	r5, r7
 8017bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8017c08:	6a3b      	ldr	r3, [r7, #32]
 8017c0a:	3320      	adds	r3, #32
 8017c0c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017c0e:	463a      	mov	r2, r7
 8017c10:	6819      	ldr	r1, [r3, #0]
 8017c12:	460b      	mov	r3, r1
 8017c14:	4619      	mov	r1, r3
 8017c16:	4610      	mov	r0, r2
 8017c18:	f7ff fd98 	bl	801774c <nk_style_item_color>
 8017c1c:	3438      	adds	r4, #56	; 0x38
 8017c1e:	463d      	mov	r5, r7
 8017c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8017c2c:	6a3b      	ldr	r3, [r7, #32]
 8017c2e:	3324      	adds	r3, #36	; 0x24
 8017c30:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017c32:	463a      	mov	r2, r7
 8017c34:	6819      	ldr	r1, [r3, #0]
 8017c36:	460b      	mov	r3, r1
 8017c38:	4619      	mov	r1, r3
 8017c3a:	4610      	mov	r0, r2
 8017c3c:	f7ff fd86 	bl	801774c <nk_style_item_color>
 8017c40:	3458      	adds	r4, #88	; 0x58
 8017c42:	463d      	mov	r5, r7
 8017c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8017c50:	6a3b      	ldr	r3, [r7, #32]
 8017c52:	3324      	adds	r3, #36	; 0x24
 8017c54:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017c56:	463a      	mov	r2, r7
 8017c58:	6819      	ldr	r1, [r3, #0]
 8017c5a:	460b      	mov	r3, r1
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	4610      	mov	r0, r2
 8017c60:	f7ff fd74 	bl	801774c <nk_style_item_color>
 8017c64:	3474      	adds	r4, #116	; 0x74
 8017c66:	463d      	mov	r5, r7
 8017c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8017c74:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017c76:	2000      	movs	r0, #0
 8017c78:	f7f9 f93c 	bl	8010ef4 <nk_handle_ptr>
 8017c7c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 8017c80:	6a3b      	ldr	r3, [r7, #32]
 8017c82:	1d1a      	adds	r2, r3, #4
 8017c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c86:	339c      	adds	r3, #156	; 0x9c
 8017c88:	6810      	ldr	r0, [r2, #0]
 8017c8a:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8017c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c8e:	6a3a      	ldr	r2, [r7, #32]
 8017c90:	3390      	adds	r3, #144	; 0x90
 8017c92:	6810      	ldr	r0, [r2, #0]
 8017c94:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 8017c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c98:	6a3a      	ldr	r2, [r7, #32]
 8017c9a:	3394      	adds	r3, #148	; 0x94
 8017c9c:	6810      	ldr	r0, [r2, #0]
 8017c9e:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 8017ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017ca2:	6a3a      	ldr	r2, [r7, #32]
 8017ca4:	3398      	adds	r3, #152	; 0x98
 8017ca6:	6810      	ldr	r0, [r2, #0]
 8017ca8:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 8017caa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017cac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8017cb0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017cb4:	f7fa fd6a 	bl	801278c <nk_vec2>
 8017cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8017cbc:	eef0 7a60 	vmov.f32	s15, s1
 8017cc0:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8017cc4:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8017cc8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017cca:	ed5f 0a6d 	vldr	s1, [pc, #-436]	; 8017b18 <nk_style_from_table+0x364>
 8017cce:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8017b18 <nk_style_from_table+0x364>
 8017cd2:	f7fa fd5b 	bl	801278c <nk_vec2>
 8017cd6:	eeb0 7a40 	vmov.f32	s14, s0
 8017cda:	eef0 7a60 	vmov.f32	s15, s1
 8017cde:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8017ce2:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8017ce6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017ce8:	2300      	movs	r3, #0
 8017cea:	2200      	movs	r2, #0
 8017cec:	2100      	movs	r1, #0
 8017cee:	2000      	movs	r0, #0
 8017cf0:	f7f6 f82f 	bl	800dd52 <nk_rgba>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 8017cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017cfa:	f04f 0200 	mov.w	r2, #0
 8017cfe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 8017d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017d04:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8017d08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 8017d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017d0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8017d12:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 8017d14:	21c8      	movs	r1, #200	; 0xc8
 8017d16:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8017d18:	f003 f8f0 	bl	801aefc <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8017d1c:	6a3b      	ldr	r3, [r7, #32]
 8017d1e:	331c      	adds	r3, #28
 8017d20:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017d22:	463a      	mov	r2, r7
 8017d24:	6819      	ldr	r1, [r3, #0]
 8017d26:	460b      	mov	r3, r1
 8017d28:	4619      	mov	r1, r3
 8017d2a:	4610      	mov	r0, r2
 8017d2c:	f7ff fd0e 	bl	801774c <nk_style_item_color>
 8017d30:	4625      	mov	r5, r4
 8017d32:	463c      	mov	r4, r7
 8017d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017d38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017d3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8017d40:	6a3b      	ldr	r3, [r7, #32]
 8017d42:	3320      	adds	r3, #32
 8017d44:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017d46:	463a      	mov	r2, r7
 8017d48:	6819      	ldr	r1, [r3, #0]
 8017d4a:	460b      	mov	r3, r1
 8017d4c:	4619      	mov	r1, r3
 8017d4e:	4610      	mov	r0, r2
 8017d50:	f7ff fcfc 	bl	801774c <nk_style_item_color>
 8017d54:	341c      	adds	r4, #28
 8017d56:	463d      	mov	r5, r7
 8017d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017d60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8017d64:	6a3b      	ldr	r3, [r7, #32]
 8017d66:	3320      	adds	r3, #32
 8017d68:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017d6a:	463a      	mov	r2, r7
 8017d6c:	6819      	ldr	r1, [r3, #0]
 8017d6e:	460b      	mov	r3, r1
 8017d70:	4619      	mov	r1, r3
 8017d72:	4610      	mov	r0, r2
 8017d74:	f7ff fcea 	bl	801774c <nk_style_item_color>
 8017d78:	3438      	adds	r4, #56	; 0x38
 8017d7a:	463d      	mov	r5, r7
 8017d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017d84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8017d88:	6a3b      	ldr	r3, [r7, #32]
 8017d8a:	3324      	adds	r3, #36	; 0x24
 8017d8c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017d8e:	463a      	mov	r2, r7
 8017d90:	6819      	ldr	r1, [r3, #0]
 8017d92:	460b      	mov	r3, r1
 8017d94:	4619      	mov	r1, r3
 8017d96:	4610      	mov	r0, r2
 8017d98:	f7ff fcd8 	bl	801774c <nk_style_item_color>
 8017d9c:	3458      	adds	r4, #88	; 0x58
 8017d9e:	463d      	mov	r5, r7
 8017da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017da4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8017dac:	6a3b      	ldr	r3, [r7, #32]
 8017dae:	3324      	adds	r3, #36	; 0x24
 8017db0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017db2:	463a      	mov	r2, r7
 8017db4:	6819      	ldr	r1, [r3, #0]
 8017db6:	460b      	mov	r3, r1
 8017db8:	4619      	mov	r1, r3
 8017dba:	4610      	mov	r0, r2
 8017dbc:	f7ff fcc6 	bl	801774c <nk_style_item_color>
 8017dc0:	3474      	adds	r4, #116	; 0x74
 8017dc2:	463d      	mov	r5, r7
 8017dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8017dd0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017dd2:	2000      	movs	r0, #0
 8017dd4:	f7f9 f88e 	bl	8010ef4 <nk_handle_ptr>
 8017dd8:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 8017ddc:	6a3b      	ldr	r3, [r7, #32]
 8017dde:	1d1a      	adds	r2, r3, #4
 8017de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017de2:	339c      	adds	r3, #156	; 0x9c
 8017de4:	6810      	ldr	r0, [r2, #0]
 8017de6:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8017de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017dea:	6a3a      	ldr	r2, [r7, #32]
 8017dec:	3390      	adds	r3, #144	; 0x90
 8017dee:	6810      	ldr	r0, [r2, #0]
 8017df0:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 8017df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017df4:	6a3a      	ldr	r2, [r7, #32]
 8017df6:	3394      	adds	r3, #148	; 0x94
 8017df8:	6810      	ldr	r0, [r2, #0]
 8017dfa:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 8017dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017dfe:	6a3a      	ldr	r2, [r7, #32]
 8017e00:	3398      	adds	r3, #152	; 0x98
 8017e02:	6810      	ldr	r0, [r2, #0]
 8017e04:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 8017e06:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017e08:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8017e0c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8017e10:	f7fa fcbc 	bl	801278c <nk_vec2>
 8017e14:	eeb0 7a40 	vmov.f32	s14, s0
 8017e18:	eef0 7a60 	vmov.f32	s15, s1
 8017e1c:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8017e20:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8017e24:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017e26:	ed5f 0ac4 	vldr	s1, [pc, #-784]	; 8017b18 <nk_style_from_table+0x364>
 8017e2a:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 8017b18 <nk_style_from_table+0x364>
 8017e2e:	f7fa fcad 	bl	801278c <nk_vec2>
 8017e32:	eeb0 7a40 	vmov.f32	s14, s0
 8017e36:	eef0 7a60 	vmov.f32	s15, s1
 8017e3a:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8017e3e:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8017e42:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8017e44:	2300      	movs	r3, #0
 8017e46:	2200      	movs	r2, #0
 8017e48:	2100      	movs	r1, #0
 8017e4a:	2000      	movs	r0, #0
 8017e4c:	f7f5 ff81 	bl	800dd52 <nk_rgba>
 8017e50:	4603      	mov	r3, r0
 8017e52:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 8017e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e56:	f04f 0200 	mov.w	r2, #0
 8017e5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 8017e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e60:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8017e64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* selectable */
    select = &style->selectable;
 8017e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017e6a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8017e6e:	667b      	str	r3, [r7, #100]	; 0x64
    nk_zero_struct(*select);
 8017e70:	21f0      	movs	r1, #240	; 0xf0
 8017e72:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8017e74:	f003 f842 	bl	801aefc <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 8017e78:	6a3b      	ldr	r3, [r7, #32]
 8017e7a:	3328      	adds	r3, #40	; 0x28
 8017e7c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017e7e:	463a      	mov	r2, r7
 8017e80:	6819      	ldr	r1, [r3, #0]
 8017e82:	460b      	mov	r3, r1
 8017e84:	4619      	mov	r1, r3
 8017e86:	4610      	mov	r0, r2
 8017e88:	f7ff fc60 	bl	801774c <nk_style_item_color>
 8017e8c:	4625      	mov	r5, r4
 8017e8e:	463c      	mov	r4, r7
 8017e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e94:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017e98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 8017e9c:	6a3b      	ldr	r3, [r7, #32]
 8017e9e:	3328      	adds	r3, #40	; 0x28
 8017ea0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017ea2:	463a      	mov	r2, r7
 8017ea4:	6819      	ldr	r1, [r3, #0]
 8017ea6:	460b      	mov	r3, r1
 8017ea8:	4619      	mov	r1, r3
 8017eaa:	4610      	mov	r0, r2
 8017eac:	f7ff fc4e 	bl	801774c <nk_style_item_color>
 8017eb0:	341c      	adds	r4, #28
 8017eb2:	463d      	mov	r5, r7
 8017eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017ebc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 8017ec0:	6a3b      	ldr	r3, [r7, #32]
 8017ec2:	3328      	adds	r3, #40	; 0x28
 8017ec4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017ec6:	463a      	mov	r2, r7
 8017ec8:	6819      	ldr	r1, [r3, #0]
 8017eca:	460b      	mov	r3, r1
 8017ecc:	4619      	mov	r1, r3
 8017ece:	4610      	mov	r0, r2
 8017ed0:	f7ff fc3c 	bl	801774c <nk_style_item_color>
 8017ed4:	3438      	adds	r4, #56	; 0x38
 8017ed6:	463d      	mov	r5, r7
 8017ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8017ee4:	6a3b      	ldr	r3, [r7, #32]
 8017ee6:	332c      	adds	r3, #44	; 0x2c
 8017ee8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017eea:	463a      	mov	r2, r7
 8017eec:	6819      	ldr	r1, [r3, #0]
 8017eee:	460b      	mov	r3, r1
 8017ef0:	4619      	mov	r1, r3
 8017ef2:	4610      	mov	r0, r2
 8017ef4:	f7ff fc2a 	bl	801774c <nk_style_item_color>
 8017ef8:	3454      	adds	r4, #84	; 0x54
 8017efa:	463d      	mov	r5, r7
 8017efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8017f08:	6a3b      	ldr	r3, [r7, #32]
 8017f0a:	332c      	adds	r3, #44	; 0x2c
 8017f0c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017f0e:	463a      	mov	r2, r7
 8017f10:	6819      	ldr	r1, [r3, #0]
 8017f12:	460b      	mov	r3, r1
 8017f14:	4619      	mov	r1, r3
 8017f16:	4610      	mov	r0, r2
 8017f18:	f7ff fc18 	bl	801774c <nk_style_item_color>
 8017f1c:	3470      	adds	r4, #112	; 0x70
 8017f1e:	463d      	mov	r5, r7
 8017f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8017f2c:	6a3b      	ldr	r3, [r7, #32]
 8017f2e:	332c      	adds	r3, #44	; 0x2c
 8017f30:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017f32:	463a      	mov	r2, r7
 8017f34:	6819      	ldr	r1, [r3, #0]
 8017f36:	460b      	mov	r3, r1
 8017f38:	4619      	mov	r1, r3
 8017f3a:	4610      	mov	r0, r2
 8017f3c:	f7ff fc06 	bl	801774c <nk_style_item_color>
 8017f40:	348c      	adds	r4, #140	; 0x8c
 8017f42:	463d      	mov	r5, r7
 8017f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 8017f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f52:	6a3a      	ldr	r2, [r7, #32]
 8017f54:	33a8      	adds	r3, #168	; 0xa8
 8017f56:	6810      	ldr	r0, [r2, #0]
 8017f58:	6018      	str	r0, [r3, #0]
    select->text_hover      = table[NK_COLOR_TEXT];
 8017f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f5c:	6a3a      	ldr	r2, [r7, #32]
 8017f5e:	33ac      	adds	r3, #172	; 0xac
 8017f60:	6810      	ldr	r0, [r2, #0]
 8017f62:	6018      	str	r0, [r3, #0]
    select->text_pressed    = table[NK_COLOR_TEXT];
 8017f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f66:	6a3a      	ldr	r2, [r7, #32]
 8017f68:	33b0      	adds	r3, #176	; 0xb0
 8017f6a:	6810      	ldr	r0, [r2, #0]
 8017f6c:	6018      	str	r0, [r3, #0]
    select->text_normal_active  = table[NK_COLOR_TEXT];
 8017f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f70:	6a3a      	ldr	r2, [r7, #32]
 8017f72:	33b4      	adds	r3, #180	; 0xb4
 8017f74:	6810      	ldr	r0, [r2, #0]
 8017f76:	6018      	str	r0, [r3, #0]
    select->text_hover_active   = table[NK_COLOR_TEXT];
 8017f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f7a:	6a3a      	ldr	r2, [r7, #32]
 8017f7c:	33b8      	adds	r3, #184	; 0xb8
 8017f7e:	6810      	ldr	r0, [r2, #0]
 8017f80:	6018      	str	r0, [r3, #0]
    select->text_pressed_active = table[NK_COLOR_TEXT];
 8017f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017f84:	6a3a      	ldr	r2, [r7, #32]
 8017f86:	33bc      	adds	r3, #188	; 0xbc
 8017f88:	6810      	ldr	r0, [r2, #0]
 8017f8a:	6018      	str	r0, [r3, #0]
    select->padding         = nk_vec2(2.0f,2.0f);
 8017f8c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017f8e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8017f92:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017f96:	f7fa fbf9 	bl	801278c <nk_vec2>
 8017f9a:	eeb0 7a40 	vmov.f32	s14, s0
 8017f9e:	eef0 7a60 	vmov.f32	s15, s1
 8017fa2:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
 8017fa6:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 8017faa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017fac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8017fb0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017fb4:	f7fa fbea 	bl	801278c <nk_vec2>
 8017fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8017fbc:	eef0 7a60 	vmov.f32	s15, s1
 8017fc0:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 8017fc4:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 8017fc8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017fca:	eddf 0ad0 	vldr	s1, [pc, #832]	; 801830c <nk_style_from_table+0xb58>
 8017fce:	ed9f 0acf 	vldr	s0, [pc, #828]	; 801830c <nk_style_from_table+0xb58>
 8017fd2:	f7fa fbdb 	bl	801278c <nk_vec2>
 8017fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8017fda:	eef0 7a60 	vmov.f32	s15, s1
 8017fde:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
 8017fe2:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 8017fe6:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8017fe8:	2000      	movs	r0, #0
 8017fea:	f7f8 ff83 	bl	8010ef4 <nk_handle_ptr>
 8017fee:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    select->rounding        = 0.0f;
 8017ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ff4:	f04f 0200 	mov.w	r2, #0
 8017ff8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    select->draw_begin      = 0;
 8017ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ffe:	2200      	movs	r2, #0
 8018000:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    select->draw_end        = 0;
 8018004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018006:	2200      	movs	r2, #0
 8018008:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    /* slider */
    slider = &style->slider;
 801800c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801800e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018012:	663b      	str	r3, [r7, #96]	; 0x60
    nk_zero_struct(*slider);
 8018014:	f44f 7109 	mov.w	r1, #548	; 0x224
 8018018:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801801a:	f002 ff6f 	bl	801aefc <nk_zero>
    slider->normal          = nk_style_item_hide();
 801801e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018020:	463b      	mov	r3, r7
 8018022:	4618      	mov	r0, r3
 8018024:	f7ff fbaa 	bl	801777c <nk_style_item_hide>
 8018028:	4625      	mov	r5, r4
 801802a:	463c      	mov	r4, r7
 801802c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801802e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018030:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018034:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 8018038:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801803a:	463b      	mov	r3, r7
 801803c:	4618      	mov	r0, r3
 801803e:	f7ff fb9d 	bl	801777c <nk_style_item_hide>
 8018042:	341c      	adds	r4, #28
 8018044:	463d      	mov	r5, r7
 8018046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801804a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801804e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 8018052:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018054:	463b      	mov	r3, r7
 8018056:	4618      	mov	r0, r3
 8018058:	f7ff fb90 	bl	801777c <nk_style_item_hide>
 801805c:	3438      	adds	r4, #56	; 0x38
 801805e:	463d      	mov	r5, r7
 8018060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018064:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018068:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 801806c:	6a3b      	ldr	r3, [r7, #32]
 801806e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018074:	3358      	adds	r3, #88	; 0x58
 8018076:	6810      	ldr	r0, [r2, #0]
 8018078:	6018      	str	r0, [r3, #0]
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 801807a:	6a3b      	ldr	r3, [r7, #32]
 801807c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018082:	335c      	adds	r3, #92	; 0x5c
 8018084:	6810      	ldr	r0, [r2, #0]
 8018086:	6018      	str	r0, [r3, #0]
    slider->bar_active      = table[NK_COLOR_SLIDER];
 8018088:	6a3b      	ldr	r3, [r7, #32]
 801808a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801808e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018090:	3360      	adds	r3, #96	; 0x60
 8018092:	6810      	ldr	r0, [r2, #0]
 8018094:	6018      	str	r0, [r3, #0]
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 8018096:	6a3b      	ldr	r3, [r7, #32]
 8018098:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801809c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801809e:	3364      	adds	r3, #100	; 0x64
 80180a0:	6810      	ldr	r0, [r2, #0]
 80180a2:	6018      	str	r0, [r3, #0]
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 80180a4:	6a3b      	ldr	r3, [r7, #32]
 80180a6:	3334      	adds	r3, #52	; 0x34
 80180a8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80180aa:	463a      	mov	r2, r7
 80180ac:	6819      	ldr	r1, [r3, #0]
 80180ae:	460b      	mov	r3, r1
 80180b0:	4619      	mov	r1, r3
 80180b2:	4610      	mov	r0, r2
 80180b4:	f7ff fb4a 	bl	801774c <nk_style_item_color>
 80180b8:	3468      	adds	r4, #104	; 0x68
 80180ba:	463d      	mov	r5, r7
 80180bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80180c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80180c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 80180c8:	6a3b      	ldr	r3, [r7, #32]
 80180ca:	3338      	adds	r3, #56	; 0x38
 80180cc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80180ce:	463a      	mov	r2, r7
 80180d0:	6819      	ldr	r1, [r3, #0]
 80180d2:	460b      	mov	r3, r1
 80180d4:	4619      	mov	r1, r3
 80180d6:	4610      	mov	r0, r2
 80180d8:	f7ff fb38 	bl	801774c <nk_style_item_color>
 80180dc:	3484      	adds	r4, #132	; 0x84
 80180de:	463d      	mov	r5, r7
 80180e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80180e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80180e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 80180ec:	6a3b      	ldr	r3, [r7, #32]
 80180ee:	333c      	adds	r3, #60	; 0x3c
 80180f0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80180f2:	463a      	mov	r2, r7
 80180f4:	6819      	ldr	r1, [r3, #0]
 80180f6:	460b      	mov	r3, r1
 80180f8:	4619      	mov	r1, r3
 80180fa:	4610      	mov	r0, r2
 80180fc:	f7ff fb26 	bl	801774c <nk_style_item_color>
 8018100:	34a0      	adds	r4, #160	; 0xa0
 8018102:	463d      	mov	r5, r7
 8018104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801810c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 8018110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018112:	220a      	movs	r2, #10
 8018114:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 8018118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801811a:	2209      	movs	r2, #9
 801811c:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    slider->cursor_size     = nk_vec2(16,16);
 8018120:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018122:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 8018126:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 801812a:	f7fa fb2f 	bl	801278c <nk_vec2>
 801812e:	eeb0 7a40 	vmov.f32	s14, s0
 8018132:	eef0 7a60 	vmov.f32	s15, s1
 8018136:	ed84 7a36 	vstr	s14, [r4, #216]	; 0xd8
 801813a:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 801813e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8018140:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018144:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018148:	f7fa fb20 	bl	801278c <nk_vec2>
 801814c:	eeb0 7a40 	vmov.f32	s14, s0
 8018150:	eef0 7a60 	vmov.f32	s15, s1
 8018154:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 8018158:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 801815c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801815e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018162:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018166:	f7fa fb11 	bl	801278c <nk_vec2>
 801816a:	eeb0 7a40 	vmov.f32	s14, s0
 801816e:	eef0 7a60 	vmov.f32	s15, s1
 8018172:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
 8018176:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 801817a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801817c:	2000      	movs	r0, #0
 801817e:	f7f8 feb9 	bl	8010ef4 <nk_handle_ptr>
 8018182:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    slider->show_buttons    = nk_false;
 8018186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018188:	2200      	movs	r2, #0
 801818a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    slider->bar_height      = 8;
 801818e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018190:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018194:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    slider->rounding        = 0;
 8018198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801819a:	f04f 0200 	mov.w	r2, #0
 801819e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    slider->draw_begin      = 0;
 80181a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80181a4:	2200      	movs	r2, #0
 80181a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    slider->draw_end        = 0;
 80181aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80181ac:	2200      	movs	r2, #0
 80181ae:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    /* slider buttons */
    button = &style->slider.inc_button;
 80181b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80181b4:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80181b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 80181ba:	2228      	movs	r2, #40	; 0x28
 80181bc:	2128      	movs	r1, #40	; 0x28
 80181be:	2028      	movs	r0, #40	; 0x28
 80181c0:	f7f5 fe17 	bl	800ddf2 <nk_rgb>
 80181c4:	4603      	mov	r3, r0
 80181c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80181c8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80181ca:	463b      	mov	r3, r7
 80181cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7ff fabc 	bl	801774c <nk_style_item_color>
 80181d4:	4625      	mov	r5, r4
 80181d6:	463c      	mov	r4, r7
 80181d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80181dc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80181e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 80181e4:	222a      	movs	r2, #42	; 0x2a
 80181e6:	212a      	movs	r1, #42	; 0x2a
 80181e8:	202a      	movs	r0, #42	; 0x2a
 80181ea:	f7f5 fe02 	bl	800ddf2 <nk_rgb>
 80181ee:	4603      	mov	r3, r0
 80181f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181f2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80181f4:	463b      	mov	r3, r7
 80181f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff faa7 	bl	801774c <nk_style_item_color>
 80181fe:	341c      	adds	r4, #28
 8018200:	463d      	mov	r5, r7
 8018202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801820a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801820e:	222c      	movs	r2, #44	; 0x2c
 8018210:	212c      	movs	r1, #44	; 0x2c
 8018212:	202c      	movs	r0, #44	; 0x2c
 8018214:	f7f5 fded 	bl	800ddf2 <nk_rgb>
 8018218:	4603      	mov	r3, r0
 801821a:	633b      	str	r3, [r7, #48]	; 0x30
 801821c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801821e:	463b      	mov	r3, r7
 8018220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018222:	4618      	mov	r0, r3
 8018224:	f7ff fa92 	bl	801774c <nk_style_item_color>
 8018228:	3438      	adds	r4, #56	; 0x38
 801822a:	463d      	mov	r5, r7
 801822c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801822e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018230:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 8018238:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801823a:	2241      	movs	r2, #65	; 0x41
 801823c:	2141      	movs	r1, #65	; 0x41
 801823e:	2041      	movs	r0, #65	; 0x41
 8018240:	f7f5 fdd7 	bl	800ddf2 <nk_rgb>
 8018244:	4603      	mov	r3, r0
 8018246:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 8018248:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801824a:	2228      	movs	r2, #40	; 0x28
 801824c:	2128      	movs	r1, #40	; 0x28
 801824e:	2028      	movs	r0, #40	; 0x28
 8018250:	f7f5 fdcf 	bl	800ddf2 <nk_rgb>
 8018254:	4603      	mov	r3, r0
 8018256:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 8018258:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801825a:	22af      	movs	r2, #175	; 0xaf
 801825c:	21af      	movs	r1, #175	; 0xaf
 801825e:	20af      	movs	r0, #175	; 0xaf
 8018260:	f7f5 fdc7 	bl	800ddf2 <nk_rgb>
 8018264:	4603      	mov	r3, r0
 8018266:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 8018268:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801826a:	22af      	movs	r2, #175	; 0xaf
 801826c:	21af      	movs	r1, #175	; 0xaf
 801826e:	20af      	movs	r0, #175	; 0xaf
 8018270:	f7f5 fdbf 	bl	800ddf2 <nk_rgb>
 8018274:	4603      	mov	r3, r0
 8018276:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 8018278:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801827a:	22af      	movs	r2, #175	; 0xaf
 801827c:	21af      	movs	r1, #175	; 0xaf
 801827e:	20af      	movs	r0, #175	; 0xaf
 8018280:	f7f5 fdb7 	bl	800ddf2 <nk_rgb>
 8018284:	4603      	mov	r3, r0
 8018286:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(8.0f,8.0f);
 8018288:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801828a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801828e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8018292:	f7fa fa7b 	bl	801278c <nk_vec2>
 8018296:	eeb0 7a40 	vmov.f32	s14, s0
 801829a:	eef0 7a60 	vmov.f32	s15, s1
 801829e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80182a2:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80182a6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80182a8:	eddf 0a18 	vldr	s1, [pc, #96]	; 801830c <nk_style_from_table+0xb58>
 80182ac:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801830c <nk_style_from_table+0xb58>
 80182b0:	f7fa fa6c 	bl	801278c <nk_vec2>
 80182b4:	eeb0 7a40 	vmov.f32	s14, s0
 80182b8:	eef0 7a60 	vmov.f32	s15, s1
 80182bc:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80182c0:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80182c4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80182c6:	2000      	movs	r0, #0
 80182c8:	f7f8 fe14 	bl	8010ef4 <nk_handle_ptr>
 80182cc:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80182d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182d2:	2212      	movs	r2, #18
 80182d4:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 80182d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80182dc:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 80182de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182e0:	f04f 0200 	mov.w	r2, #0
 80182e4:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80182e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182e8:	2200      	movs	r2, #0
 80182ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 80182ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80182f0:	2200      	movs	r2, #0
 80182f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->slider.dec_button = style->slider.inc_button;
 80182f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80182f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80182fa:	f202 50fc 	addw	r0, r2, #1532	; 0x5fc
 80182fe:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8018302:	2298      	movs	r2, #152	; 0x98
 8018304:	4619      	mov	r1, r3
 8018306:	f005 f945 	bl	801d594 <memcpy>
 801830a:	e003      	b.n	8018314 <nk_style_from_table+0xb60>
	...

    /* progressbar */
    prog = &style->progress;
 8018314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018316:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 801831a:	65fb      	str	r3, [r7, #92]	; 0x5c
    nk_zero_struct(*prog);
 801831c:	21d4      	movs	r1, #212	; 0xd4
 801831e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018320:	f002 fdec 	bl	801aefc <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8018324:	6a3b      	ldr	r3, [r7, #32]
 8018326:	3330      	adds	r3, #48	; 0x30
 8018328:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801832a:	463a      	mov	r2, r7
 801832c:	6819      	ldr	r1, [r3, #0]
 801832e:	460b      	mov	r3, r1
 8018330:	4619      	mov	r1, r3
 8018332:	4610      	mov	r0, r2
 8018334:	f7ff fa0a 	bl	801774c <nk_style_item_color>
 8018338:	4625      	mov	r5, r4
 801833a:	463c      	mov	r4, r7
 801833c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801833e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018340:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018344:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8018348:	6a3b      	ldr	r3, [r7, #32]
 801834a:	3330      	adds	r3, #48	; 0x30
 801834c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801834e:	463a      	mov	r2, r7
 8018350:	6819      	ldr	r1, [r3, #0]
 8018352:	460b      	mov	r3, r1
 8018354:	4619      	mov	r1, r3
 8018356:	4610      	mov	r0, r2
 8018358:	f7ff f9f8 	bl	801774c <nk_style_item_color>
 801835c:	341c      	adds	r4, #28
 801835e:	463d      	mov	r5, r7
 8018360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801836c:	6a3b      	ldr	r3, [r7, #32]
 801836e:	3330      	adds	r3, #48	; 0x30
 8018370:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018372:	463a      	mov	r2, r7
 8018374:	6819      	ldr	r1, [r3, #0]
 8018376:	460b      	mov	r3, r1
 8018378:	4619      	mov	r1, r3
 801837a:	4610      	mov	r0, r2
 801837c:	f7ff f9e6 	bl	801774c <nk_style_item_color>
 8018380:	3438      	adds	r4, #56	; 0x38
 8018382:	463d      	mov	r5, r7
 8018384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801838c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8018390:	6a3b      	ldr	r3, [r7, #32]
 8018392:	3334      	adds	r3, #52	; 0x34
 8018394:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018396:	463a      	mov	r2, r7
 8018398:	6819      	ldr	r1, [r3, #0]
 801839a:	460b      	mov	r3, r1
 801839c:	4619      	mov	r1, r3
 801839e:	4610      	mov	r0, r2
 80183a0:	f7ff f9d4 	bl	801774c <nk_style_item_color>
 80183a4:	3458      	adds	r4, #88	; 0x58
 80183a6:	463d      	mov	r5, r7
 80183a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80183b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 80183b4:	6a3b      	ldr	r3, [r7, #32]
 80183b6:	3338      	adds	r3, #56	; 0x38
 80183b8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80183ba:	463a      	mov	r2, r7
 80183bc:	6819      	ldr	r1, [r3, #0]
 80183be:	460b      	mov	r3, r1
 80183c0:	4619      	mov	r1, r3
 80183c2:	4610      	mov	r0, r2
 80183c4:	f7ff f9c2 	bl	801774c <nk_style_item_color>
 80183c8:	3474      	adds	r4, #116	; 0x74
 80183ca:	463d      	mov	r5, r7
 80183cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80183d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 80183d8:	6a3b      	ldr	r3, [r7, #32]
 80183da:	333c      	adds	r3, #60	; 0x3c
 80183dc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80183de:	463a      	mov	r2, r7
 80183e0:	6819      	ldr	r1, [r3, #0]
 80183e2:	460b      	mov	r3, r1
 80183e4:	4619      	mov	r1, r3
 80183e6:	4610      	mov	r0, r2
 80183e8:	f7ff f9b0 	bl	801774c <nk_style_item_color>
 80183ec:	3490      	adds	r4, #144	; 0x90
 80183ee:	463d      	mov	r5, r7
 80183f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80183f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 80183fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80183fe:	2300      	movs	r3, #0
 8018400:	2200      	movs	r2, #0
 8018402:	2100      	movs	r1, #0
 8018404:	2000      	movs	r0, #0
 8018406:	f7f5 fca4 	bl	800dd52 <nk_rgba>
 801840a:	4603      	mov	r3, r0
 801840c:	6563      	str	r3, [r4, #84]	; 0x54
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 801840e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018410:	2300      	movs	r3, #0
 8018412:	2200      	movs	r2, #0
 8018414:	2100      	movs	r1, #0
 8018416:	2000      	movs	r0, #0
 8018418:	f7f5 fc9b 	bl	800dd52 <nk_rgba>
 801841c:	4603      	mov	r3, r0
 801841e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    prog->userdata          = nk_handle_ptr(0);
 8018422:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018424:	2000      	movs	r0, #0
 8018426:	f7f8 fd65 	bl	8010ef4 <nk_handle_ptr>
 801842a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    prog->padding           = nk_vec2(4,4);
 801842e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8018430:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8018434:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018438:	f7fa f9a8 	bl	801278c <nk_vec2>
 801843c:	eeb0 7a40 	vmov.f32	s14, s0
 8018440:	eef0 7a60 	vmov.f32	s15, s1
 8018444:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8018448:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    prog->rounding          = 0;
 801844c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801844e:	f04f 0200 	mov.w	r2, #0
 8018452:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    prog->border            = 0;
 8018456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018458:	f04f 0200 	mov.w	r2, #0
 801845c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 8018460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018462:	f04f 0200 	mov.w	r2, #0
 8018466:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    prog->cursor_border     = 0;
 801846a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801846c:	f04f 0200 	mov.w	r2, #0
 8018470:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    prog->draw_begin        = 0;
 8018474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018476:	2200      	movs	r2, #0
 8018478:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    prog->draw_end          = 0;
 801847c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801847e:	2200      	movs	r2, #0
 8018480:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* scrollbars */
    scroll = &style->scrollh;
 8018484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018486:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801848a:	65bb      	str	r3, [r7, #88]	; 0x58
    nk_zero_struct(*scroll);
 801848c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8018490:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018492:	f002 fd33 	bl	801aefc <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8018496:	6a3b      	ldr	r3, [r7, #32]
 8018498:	335c      	adds	r3, #92	; 0x5c
 801849a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801849c:	463a      	mov	r2, r7
 801849e:	6819      	ldr	r1, [r3, #0]
 80184a0:	460b      	mov	r3, r1
 80184a2:	4619      	mov	r1, r3
 80184a4:	4610      	mov	r0, r2
 80184a6:	f7ff f951 	bl	801774c <nk_style_item_color>
 80184aa:	4625      	mov	r5, r4
 80184ac:	463c      	mov	r4, r7
 80184ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80184b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80184b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 80184ba:	6a3b      	ldr	r3, [r7, #32]
 80184bc:	335c      	adds	r3, #92	; 0x5c
 80184be:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80184c0:	463a      	mov	r2, r7
 80184c2:	6819      	ldr	r1, [r3, #0]
 80184c4:	460b      	mov	r3, r1
 80184c6:	4619      	mov	r1, r3
 80184c8:	4610      	mov	r0, r2
 80184ca:	f7ff f93f 	bl	801774c <nk_style_item_color>
 80184ce:	341c      	adds	r4, #28
 80184d0:	463d      	mov	r5, r7
 80184d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80184da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 80184de:	6a3b      	ldr	r3, [r7, #32]
 80184e0:	335c      	adds	r3, #92	; 0x5c
 80184e2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80184e4:	463a      	mov	r2, r7
 80184e6:	6819      	ldr	r1, [r3, #0]
 80184e8:	460b      	mov	r3, r1
 80184ea:	4619      	mov	r1, r3
 80184ec:	4610      	mov	r0, r2
 80184ee:	f7ff f92d 	bl	801774c <nk_style_item_color>
 80184f2:	3438      	adds	r4, #56	; 0x38
 80184f4:	463d      	mov	r5, r7
 80184f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80184fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 8018502:	6a3b      	ldr	r3, [r7, #32]
 8018504:	3360      	adds	r3, #96	; 0x60
 8018506:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8018508:	463a      	mov	r2, r7
 801850a:	6819      	ldr	r1, [r3, #0]
 801850c:	460b      	mov	r3, r1
 801850e:	4619      	mov	r1, r3
 8018510:	4610      	mov	r0, r2
 8018512:	f7ff f91b 	bl	801774c <nk_style_item_color>
 8018516:	3458      	adds	r4, #88	; 0x58
 8018518:	463d      	mov	r5, r7
 801851a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801851c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801851e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 8018526:	6a3b      	ldr	r3, [r7, #32]
 8018528:	3364      	adds	r3, #100	; 0x64
 801852a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801852c:	463a      	mov	r2, r7
 801852e:	6819      	ldr	r1, [r3, #0]
 8018530:	460b      	mov	r3, r1
 8018532:	4619      	mov	r1, r3
 8018534:	4610      	mov	r0, r2
 8018536:	f7ff f909 	bl	801774c <nk_style_item_color>
 801853a:	3474      	adds	r4, #116	; 0x74
 801853c:	463d      	mov	r5, r7
 801853e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 801854a:	6a3b      	ldr	r3, [r7, #32]
 801854c:	3368      	adds	r3, #104	; 0x68
 801854e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8018550:	463a      	mov	r2, r7
 8018552:	6819      	ldr	r1, [r3, #0]
 8018554:	460b      	mov	r3, r1
 8018556:	4619      	mov	r1, r3
 8018558:	4610      	mov	r0, r2
 801855a:	f7ff f8f7 	bl	801774c <nk_style_item_color>
 801855e:	3490      	adds	r4, #144	; 0x90
 8018560:	463d      	mov	r5, r7
 8018562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801856a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801856e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018570:	2203      	movs	r2, #3
 8018572:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8018576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018578:	2203      	movs	r2, #3
 801857a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    scroll->userdata        = nk_handle_ptr(0);
 801857e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8018580:	2000      	movs	r0, #0
 8018582:	f7f8 fcb7 	bl	8010ef4 <nk_handle_ptr>
 8018586:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 801858a:	6a3b      	ldr	r3, [r7, #32]
 801858c:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8018590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018592:	3354      	adds	r3, #84	; 0x54
 8018594:	6810      	ldr	r0, [r2, #0]
 8018596:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 8018598:	6a3b      	ldr	r3, [r7, #32]
 801859a:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801859e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185a0:	33ac      	adds	r3, #172	; 0xac
 80185a2:	6810      	ldr	r0, [r2, #0]
 80185a4:	6018      	str	r0, [r3, #0]
    scroll->padding         = nk_vec2(0,0);
 80185a6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80185a8:	ed5f 0aa7 	vldr	s1, [pc, #-668]	; 8018310 <nk_style_from_table+0xb5c>
 80185ac:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8018310 <nk_style_from_table+0xb5c>
 80185b0:	f7fa f8ec 	bl	801278c <nk_vec2>
 80185b4:	eeb0 7a40 	vmov.f32	s14, s0
 80185b8:	eef0 7a60 	vmov.f32	s15, s1
 80185bc:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 80185c0:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 80185c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185c6:	2200      	movs	r2, #0
 80185c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    scroll->border          = 0;
 80185cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185ce:	f04f 0200 	mov.w	r2, #0
 80185d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    scroll->rounding        = 0;
 80185d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185d8:	f04f 0200 	mov.w	r2, #0
 80185dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    scroll->border_cursor   = 0;
 80185e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185e2:	f04f 0200 	mov.w	r2, #0
 80185e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    scroll->rounding_cursor = 0;
 80185ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185ec:	f04f 0200 	mov.w	r2, #0
 80185f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    scroll->draw_begin      = 0;
 80185f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185f6:	2200      	movs	r2, #0
 80185f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    scroll->draw_end        = 0;
 80185fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185fe:	2200      	movs	r2, #0
 8018600:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    style->scrollv = style->scrollh;
 8018604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801860a:	461a      	mov	r2, r3
 801860c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801860e:	f102 00d0 	add.w	r0, r2, #208	; 0xd0
 8018612:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 8018616:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801861a:	4619      	mov	r1, r3
 801861c:	f004 ffba 	bl	801d594 <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 8018620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018622:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8018626:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 8018628:	2228      	movs	r2, #40	; 0x28
 801862a:	2128      	movs	r1, #40	; 0x28
 801862c:	2028      	movs	r0, #40	; 0x28
 801862e:	f7f5 fbe0 	bl	800ddf2 <nk_rgb>
 8018632:	4603      	mov	r3, r0
 8018634:	637b      	str	r3, [r7, #52]	; 0x34
 8018636:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018638:	463b      	mov	r3, r7
 801863a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801863c:	4618      	mov	r0, r3
 801863e:	f7ff f885 	bl	801774c <nk_style_item_color>
 8018642:	4625      	mov	r5, r4
 8018644:	463c      	mov	r4, r7
 8018646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801864a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801864e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8018652:	222a      	movs	r2, #42	; 0x2a
 8018654:	212a      	movs	r1, #42	; 0x2a
 8018656:	202a      	movs	r0, #42	; 0x2a
 8018658:	f7f5 fbcb 	bl	800ddf2 <nk_rgb>
 801865c:	4603      	mov	r3, r0
 801865e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018660:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018662:	463b      	mov	r3, r7
 8018664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018666:	4618      	mov	r0, r3
 8018668:	f7ff f870 	bl	801774c <nk_style_item_color>
 801866c:	341c      	adds	r4, #28
 801866e:	463d      	mov	r5, r7
 8018670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801867c:	222c      	movs	r2, #44	; 0x2c
 801867e:	212c      	movs	r1, #44	; 0x2c
 8018680:	202c      	movs	r0, #44	; 0x2c
 8018682:	f7f5 fbb6 	bl	800ddf2 <nk_rgb>
 8018686:	4603      	mov	r3, r0
 8018688:	63fb      	str	r3, [r7, #60]	; 0x3c
 801868a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801868c:	463b      	mov	r3, r7
 801868e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018690:	4618      	mov	r0, r3
 8018692:	f7ff f85b 	bl	801774c <nk_style_item_color>
 8018696:	3438      	adds	r4, #56	; 0x38
 8018698:	463d      	mov	r5, r7
 801869a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801869c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801869e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80186a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 80186a6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186a8:	2241      	movs	r2, #65	; 0x41
 80186aa:	2141      	movs	r1, #65	; 0x41
 80186ac:	2041      	movs	r0, #65	; 0x41
 80186ae:	f7f5 fba0 	bl	800ddf2 <nk_rgb>
 80186b2:	4603      	mov	r3, r0
 80186b4:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 80186b6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186b8:	2228      	movs	r2, #40	; 0x28
 80186ba:	2128      	movs	r1, #40	; 0x28
 80186bc:	2028      	movs	r0, #40	; 0x28
 80186be:	f7f5 fb98 	bl	800ddf2 <nk_rgb>
 80186c2:	4603      	mov	r3, r0
 80186c4:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 80186c6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186c8:	22af      	movs	r2, #175	; 0xaf
 80186ca:	21af      	movs	r1, #175	; 0xaf
 80186cc:	20af      	movs	r0, #175	; 0xaf
 80186ce:	f7f5 fb90 	bl	800ddf2 <nk_rgb>
 80186d2:	4603      	mov	r3, r0
 80186d4:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 80186d6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186d8:	22af      	movs	r2, #175	; 0xaf
 80186da:	21af      	movs	r1, #175	; 0xaf
 80186dc:	20af      	movs	r0, #175	; 0xaf
 80186de:	f7f5 fb88 	bl	800ddf2 <nk_rgb>
 80186e2:	4603      	mov	r3, r0
 80186e4:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 80186e6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186e8:	22af      	movs	r2, #175	; 0xaf
 80186ea:	21af      	movs	r1, #175	; 0xaf
 80186ec:	20af      	movs	r0, #175	; 0xaf
 80186ee:	f7f5 fb80 	bl	800ddf2 <nk_rgb>
 80186f2:	4603      	mov	r3, r0
 80186f4:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(4.0f,4.0f);
 80186f6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80186f8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80186fc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018700:	f7fa f844 	bl	801278c <nk_vec2>
 8018704:	eeb0 7a40 	vmov.f32	s14, s0
 8018708:	eef0 7a60 	vmov.f32	s15, s1
 801870c:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018710:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018714:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018716:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8018a3c <nk_style_from_table+0x1288>
 801871a:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8018a3c <nk_style_from_table+0x1288>
 801871e:	f7fa f835 	bl	801278c <nk_vec2>
 8018722:	eeb0 7a40 	vmov.f32	s14, s0
 8018726:	eef0 7a60 	vmov.f32	s15, s1
 801872a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801872e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018732:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018734:	2000      	movs	r0, #0
 8018736:	f7f8 fbdd 	bl	8010ef4 <nk_handle_ptr>
 801873a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018740:	2212      	movs	r2, #18
 8018742:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 8018744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018746:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801874a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801874c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801874e:	f04f 0200 	mov.w	r2, #0
 8018752:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018756:	2200      	movs	r2, #0
 8018758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801875e:	2200      	movs	r2, #0
 8018760:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->scrollh.dec_button = style->scrollh.inc_button;
 8018764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801876a:	461a      	mov	r2, r3
 801876c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801876e:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8018772:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8018776:	2298      	movs	r2, #152	; 0x98
 8018778:	4619      	mov	r1, r3
 801877a:	f004 ff0b 	bl	801d594 <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 801877e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018784:	461a      	mov	r2, r3
 8018786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018788:	f502 70ce 	add.w	r0, r2, #412	; 0x19c
 801878c:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8018790:	2298      	movs	r2, #152	; 0x98
 8018792:	4619      	mov	r1, r3
 8018794:	f004 fefe 	bl	801d594 <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 8018798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801879a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801879e:	461a      	mov	r2, r3
 80187a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80187a2:	f502 700d 	add.w	r0, r2, #564	; 0x234
 80187a6:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80187aa:	2298      	movs	r2, #152	; 0x98
 80187ac:	4619      	mov	r1, r3
 80187ae:	f004 fef1 	bl	801d594 <memcpy>

    /* edit */
    edit = &style->edit;
 80187b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80187b4:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80187b8:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 80187ba:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80187be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80187c0:	f002 fb9c 	bl	801aefc <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 80187c4:	6a3b      	ldr	r3, [r7, #32]
 80187c6:	3344      	adds	r3, #68	; 0x44
 80187c8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80187ca:	463a      	mov	r2, r7
 80187cc:	6819      	ldr	r1, [r3, #0]
 80187ce:	460b      	mov	r3, r1
 80187d0:	4619      	mov	r1, r3
 80187d2:	4610      	mov	r0, r2
 80187d4:	f7fe ffba 	bl	801774c <nk_style_item_color>
 80187d8:	4625      	mov	r5, r4
 80187da:	463c      	mov	r4, r7
 80187dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80187de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80187e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80187e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 80187e8:	6a3b      	ldr	r3, [r7, #32]
 80187ea:	3344      	adds	r3, #68	; 0x44
 80187ec:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80187ee:	463a      	mov	r2, r7
 80187f0:	6819      	ldr	r1, [r3, #0]
 80187f2:	460b      	mov	r3, r1
 80187f4:	4619      	mov	r1, r3
 80187f6:	4610      	mov	r0, r2
 80187f8:	f7fe ffa8 	bl	801774c <nk_style_item_color>
 80187fc:	341c      	adds	r4, #28
 80187fe:	463d      	mov	r5, r7
 8018800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 801880c:	6a3b      	ldr	r3, [r7, #32]
 801880e:	3344      	adds	r3, #68	; 0x44
 8018810:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8018812:	463a      	mov	r2, r7
 8018814:	6819      	ldr	r1, [r3, #0]
 8018816:	460b      	mov	r3, r1
 8018818:	4619      	mov	r1, r3
 801881a:	4610      	mov	r0, r2
 801881c:	f7fe ff96 	bl	801774c <nk_style_item_color>
 8018820:	3438      	adds	r4, #56	; 0x38
 8018822:	463d      	mov	r5, r7
 8018824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801882c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 8018830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018832:	6a3a      	ldr	r2, [r7, #32]
 8018834:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8018838:	6810      	ldr	r0, [r2, #0]
 801883a:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 801883c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801883e:	6a3a      	ldr	r2, [r7, #32]
 8018840:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8018844:	6810      	ldr	r0, [r2, #0]
 8018846:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 8018848:	6a3b      	ldr	r3, [r7, #32]
 801884a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801884e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018850:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8018854:	6810      	ldr	r0, [r2, #0]
 8018856:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 8018858:	6a3b      	ldr	r3, [r7, #32]
 801885a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801885e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018860:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8018864:	6810      	ldr	r0, [r2, #0]
 8018866:	6018      	str	r0, [r3, #0]
    edit->border_color      = table[NK_COLOR_BORDER];
 8018868:	6a3b      	ldr	r3, [r7, #32]
 801886a:	f103 020c 	add.w	r2, r3, #12
 801886e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018870:	3354      	adds	r3, #84	; 0x54
 8018872:	6810      	ldr	r0, [r2, #0]
 8018874:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 8018876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018878:	6a3a      	ldr	r2, [r7, #32]
 801887a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801887e:	6810      	ldr	r0, [r2, #0]
 8018880:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 8018882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018884:	6a3a      	ldr	r2, [r7, #32]
 8018886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801888a:	6810      	ldr	r0, [r2, #0]
 801888c:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 801888e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018890:	6a3a      	ldr	r2, [r7, #32]
 8018892:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8018896:	6810      	ldr	r0, [r2, #0]
 8018898:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801889a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801889c:	6a3a      	ldr	r2, [r7, #32]
 801889e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80188a2:	6810      	ldr	r0, [r2, #0]
 80188a4:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 80188a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188a8:	6a3a      	ldr	r2, [r7, #32]
 80188aa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80188ae:	6810      	ldr	r0, [r2, #0]
 80188b0:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 80188b2:	6a3b      	ldr	r3, [r7, #32]
 80188b4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80188b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80188be:	6810      	ldr	r0, [r2, #0]
 80188c0:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 80188c2:	6a3b      	ldr	r3, [r7, #32]
 80188c4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80188c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80188ce:	6810      	ldr	r0, [r2, #0]
 80188d0:	6018      	str	r0, [r3, #0]
    edit->scrollbar_size    = nk_vec2(10,10);
 80188d2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80188d4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80188d8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80188dc:	f7f9 ff56 	bl	801278c <nk_vec2>
 80188e0:	eeb0 7a40 	vmov.f32	s14, s0
 80188e4:	eef0 7a60 	vmov.f32	s15, s1
 80188e8:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 80188ec:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 80188f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80188f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80188f8:	3358      	adds	r3, #88	; 0x58
 80188fa:	f102 01d0 	add.w	r1, r2, #208	; 0xd0
 80188fe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8018902:	4618      	mov	r0, r3
 8018904:	f004 fe46 	bl	801d594 <memcpy>
    edit->padding           = nk_vec2(4,4);
 8018908:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801890a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801890e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018912:	f7f9 ff3b 	bl	801278c <nk_vec2>
 8018916:	eeb0 7a40 	vmov.f32	s14, s0
 801891a:	eef0 7a60 	vmov.f32	s15, s1
 801891e:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 8018922:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->row_padding       = 2;
 8018926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801892c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    edit->cursor_size       = 4;
 8018930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018932:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8018936:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 1;
 801893a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801893c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018940:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 8018944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018946:	f04f 0200 	mov.w	r2, #0
 801894a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* property */
    property = &style->property;
 801894e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018950:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8018954:	653b      	str	r3, [r7, #80]	; 0x50
    nk_zero_struct(*property);
 8018956:	f240 4164 	movw	r1, #1124	; 0x464
 801895a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801895c:	f002 face 	bl	801aefc <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018960:	6a3b      	ldr	r3, [r7, #32]
 8018962:	3340      	adds	r3, #64	; 0x40
 8018964:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8018966:	463a      	mov	r2, r7
 8018968:	6819      	ldr	r1, [r3, #0]
 801896a:	460b      	mov	r3, r1
 801896c:	4619      	mov	r1, r3
 801896e:	4610      	mov	r0, r2
 8018970:	f7fe feec 	bl	801774c <nk_style_item_color>
 8018974:	4625      	mov	r5, r4
 8018976:	463c      	mov	r4, r7
 8018978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801897a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801897c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018980:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018984:	6a3b      	ldr	r3, [r7, #32]
 8018986:	3340      	adds	r3, #64	; 0x40
 8018988:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801898a:	463a      	mov	r2, r7
 801898c:	6819      	ldr	r1, [r3, #0]
 801898e:	460b      	mov	r3, r1
 8018990:	4619      	mov	r1, r3
 8018992:	4610      	mov	r0, r2
 8018994:	f7fe feda 	bl	801774c <nk_style_item_color>
 8018998:	341c      	adds	r4, #28
 801899a:	463d      	mov	r5, r7
 801899c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801899e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80189a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 80189a8:	6a3b      	ldr	r3, [r7, #32]
 80189aa:	3340      	adds	r3, #64	; 0x40
 80189ac:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80189ae:	463a      	mov	r2, r7
 80189b0:	6819      	ldr	r1, [r3, #0]
 80189b2:	460b      	mov	r3, r1
 80189b4:	4619      	mov	r1, r3
 80189b6:	4610      	mov	r0, r2
 80189b8:	f7fe fec8 	bl	801774c <nk_style_item_color>
 80189bc:	3438      	adds	r4, #56	; 0x38
 80189be:	463d      	mov	r5, r7
 80189c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80189c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 80189cc:	6a3b      	ldr	r3, [r7, #32]
 80189ce:	f103 020c 	add.w	r2, r3, #12
 80189d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189d4:	3354      	adds	r3, #84	; 0x54
 80189d6:	6810      	ldr	r0, [r2, #0]
 80189d8:	6018      	str	r0, [r3, #0]
    property->label_normal  = table[NK_COLOR_TEXT];
 80189da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189dc:	6a3a      	ldr	r2, [r7, #32]
 80189de:	3358      	adds	r3, #88	; 0x58
 80189e0:	6810      	ldr	r0, [r2, #0]
 80189e2:	6018      	str	r0, [r3, #0]
    property->label_hover   = table[NK_COLOR_TEXT];
 80189e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189e6:	6a3a      	ldr	r2, [r7, #32]
 80189e8:	335c      	adds	r3, #92	; 0x5c
 80189ea:	6810      	ldr	r0, [r2, #0]
 80189ec:	6018      	str	r0, [r3, #0]
    property->label_active  = table[NK_COLOR_TEXT];
 80189ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189f0:	6a3a      	ldr	r2, [r7, #32]
 80189f2:	3360      	adds	r3, #96	; 0x60
 80189f4:	6810      	ldr	r0, [r2, #0]
 80189f6:	6018      	str	r0, [r3, #0]
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 80189f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189fa:	2209      	movs	r2, #9
 80189fc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 8018a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a02:	220a      	movs	r2, #10
 8018a04:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    property->userdata      = nk_handle_ptr(0);
 8018a08:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8018a0a:	2000      	movs	r0, #0
 8018a0c:	f7f8 fa72 	bl	8010ef4 <nk_handle_ptr>
 8018a10:	f8c4 0458 	str.w	r0, [r4, #1112]	; 0x458
    property->padding       = nk_vec2(4,4);
 8018a14:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8018a16:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8018a1a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018a1e:	f7f9 feb5 	bl	801278c <nk_vec2>
 8018a22:	eeb0 7a40 	vmov.f32	s14, s0
 8018a26:	eef0 7a60 	vmov.f32	s15, s1
 8018a2a:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8018a2e:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
    property->border        = 1;
 8018a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018a38:	e002      	b.n	8018a40 <nk_style_from_table+0x128c>
 8018a3a:	bf00      	nop
 8018a3c:	00000000 	.word	0x00000000
 8018a40:	669a      	str	r2, [r3, #104]	; 0x68
    property->rounding      = 10;
 8018a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a44:	4ac3      	ldr	r2, [pc, #780]	; (8018d54 <nk_style_from_table+0x15a0>)
 8018a46:	66da      	str	r2, [r3, #108]	; 0x6c
    property->draw_begin    = 0;
 8018a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
    property->draw_end      = 0;
 8018a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a52:	2200      	movs	r2, #0
 8018a54:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

    /* property buttons */
    button = &style->property.dec_button;
 8018a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018a5a:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8018a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018a60:	2198      	movs	r1, #152	; 0x98
 8018a62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018a64:	f002 fa4a 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018a68:	6a3b      	ldr	r3, [r7, #32]
 8018a6a:	3340      	adds	r3, #64	; 0x40
 8018a6c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018a6e:	463a      	mov	r2, r7
 8018a70:	6819      	ldr	r1, [r3, #0]
 8018a72:	460b      	mov	r3, r1
 8018a74:	4619      	mov	r1, r3
 8018a76:	4610      	mov	r0, r2
 8018a78:	f7fe fe68 	bl	801774c <nk_style_item_color>
 8018a7c:	4625      	mov	r5, r4
 8018a7e:	463c      	mov	r4, r7
 8018a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a84:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018a88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018a8c:	6a3b      	ldr	r3, [r7, #32]
 8018a8e:	3340      	adds	r3, #64	; 0x40
 8018a90:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018a92:	463a      	mov	r2, r7
 8018a94:	6819      	ldr	r1, [r3, #0]
 8018a96:	460b      	mov	r3, r1
 8018a98:	4619      	mov	r1, r3
 8018a9a:	4610      	mov	r0, r2
 8018a9c:	f7fe fe56 	bl	801774c <nk_style_item_color>
 8018aa0:	341c      	adds	r4, #28
 8018aa2:	463d      	mov	r5, r7
 8018aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018aa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018ab0:	6a3b      	ldr	r3, [r7, #32]
 8018ab2:	3340      	adds	r3, #64	; 0x40
 8018ab4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018ab6:	463a      	mov	r2, r7
 8018ab8:	6819      	ldr	r1, [r3, #0]
 8018aba:	460b      	mov	r3, r1
 8018abc:	4619      	mov	r1, r3
 8018abe:	4610      	mov	r0, r2
 8018ac0:	f7fe fe44 	bl	801774c <nk_style_item_color>
 8018ac4:	3438      	adds	r4, #56	; 0x38
 8018ac6:	463d      	mov	r5, r7
 8018ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018acc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ad0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8018ad4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	2200      	movs	r2, #0
 8018ada:	2100      	movs	r1, #0
 8018adc:	2000      	movs	r0, #0
 8018ade:	f7f5 f938 	bl	800dd52 <nk_rgba>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_PROPERTY];
 8018ae6:	6a3b      	ldr	r3, [r7, #32]
 8018ae8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8018aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018aee:	3358      	adds	r3, #88	; 0x58
 8018af0:	6810      	ldr	r0, [r2, #0]
 8018af2:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8018af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018af6:	6a3a      	ldr	r2, [r7, #32]
 8018af8:	335c      	adds	r3, #92	; 0x5c
 8018afa:	6810      	ldr	r0, [r2, #0]
 8018afc:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8018afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b00:	6a3a      	ldr	r2, [r7, #32]
 8018b02:	3360      	adds	r3, #96	; 0x60
 8018b04:	6810      	ldr	r0, [r2, #0]
 8018b06:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8018b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b0a:	6a3a      	ldr	r2, [r7, #32]
 8018b0c:	3364      	adds	r3, #100	; 0x64
 8018b0e:	6810      	ldr	r0, [r2, #0]
 8018b10:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 8018b12:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018b14:	eddf 0a90 	vldr	s1, [pc, #576]	; 8018d58 <nk_style_from_table+0x15a4>
 8018b18:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8018d58 <nk_style_from_table+0x15a4>
 8018b1c:	f7f9 fe36 	bl	801278c <nk_vec2>
 8018b20:	eeb0 7a40 	vmov.f32	s14, s0
 8018b24:	eef0 7a60 	vmov.f32	s15, s1
 8018b28:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018b2c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018b30:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018b32:	eddf 0a89 	vldr	s1, [pc, #548]	; 8018d58 <nk_style_from_table+0x15a4>
 8018b36:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8018d58 <nk_style_from_table+0x15a4>
 8018b3a:	f7f9 fe27 	bl	801278c <nk_vec2>
 8018b3e:	eeb0 7a40 	vmov.f32	s14, s0
 8018b42:	eef0 7a60 	vmov.f32	s15, s1
 8018b46:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8018b4a:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018b4e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018b50:	2000      	movs	r0, #0
 8018b52:	f7f8 f9cf 	bl	8010ef4 <nk_handle_ptr>
 8018b56:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8018b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b5c:	2212      	movs	r2, #18
 8018b5e:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8018b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b62:	f04f 0200 	mov.w	r2, #0
 8018b66:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8018b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b6a:	f04f 0200 	mov.w	r2, #0
 8018b6e:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b72:	2200      	movs	r2, #0
 8018b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->property.inc_button = style->property.dec_button;
 8018b80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018b84:	f502 602a 	add.w	r0, r2, #2720	; 0xaa0
 8018b88:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8018b8c:	2298      	movs	r2, #152	; 0x98
 8018b8e:	4619      	mov	r1, r3
 8018b90:	f004 fd00 	bl	801d594 <memcpy>

    /* property edit */
    edit = &style->property.edit;
 8018b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018b96:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8018b9a:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 8018b9c:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8018ba0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018ba2:	f002 f9ab 	bl	801aefc <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018ba6:	6a3b      	ldr	r3, [r7, #32]
 8018ba8:	3340      	adds	r3, #64	; 0x40
 8018baa:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8018bac:	463a      	mov	r2, r7
 8018bae:	6819      	ldr	r1, [r3, #0]
 8018bb0:	460b      	mov	r3, r1
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	4610      	mov	r0, r2
 8018bb6:	f7fe fdc9 	bl	801774c <nk_style_item_color>
 8018bba:	4625      	mov	r5, r4
 8018bbc:	463c      	mov	r4, r7
 8018bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018bc2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018bc6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018bca:	6a3b      	ldr	r3, [r7, #32]
 8018bcc:	3340      	adds	r3, #64	; 0x40
 8018bce:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8018bd0:	463a      	mov	r2, r7
 8018bd2:	6819      	ldr	r1, [r3, #0]
 8018bd4:	460b      	mov	r3, r1
 8018bd6:	4619      	mov	r1, r3
 8018bd8:	4610      	mov	r0, r2
 8018bda:	f7fe fdb7 	bl	801774c <nk_style_item_color>
 8018bde:	341c      	adds	r4, #28
 8018be0:	463d      	mov	r5, r7
 8018be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8018bee:	6a3b      	ldr	r3, [r7, #32]
 8018bf0:	3340      	adds	r3, #64	; 0x40
 8018bf2:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8018bf4:	463a      	mov	r2, r7
 8018bf6:	6819      	ldr	r1, [r3, #0]
 8018bf8:	460b      	mov	r3, r1
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	4610      	mov	r0, r2
 8018bfe:	f7fe fda5 	bl	801774c <nk_style_item_color>
 8018c02:	3438      	adds	r4, #56	; 0x38
 8018c04:	463d      	mov	r5, r7
 8018c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 8018c12:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8018c14:	2300      	movs	r3, #0
 8018c16:	2200      	movs	r2, #0
 8018c18:	2100      	movs	r1, #0
 8018c1a:	2000      	movs	r0, #0
 8018c1c:	f7f5 f899 	bl	800dd52 <nk_rgba>
 8018c20:	4603      	mov	r3, r0
 8018c22:	6563      	str	r3, [r4, #84]	; 0x54
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 8018c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c26:	6a3a      	ldr	r2, [r7, #32]
 8018c28:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8018c2c:	6810      	ldr	r0, [r2, #0]
 8018c2e:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 8018c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c32:	6a3a      	ldr	r2, [r7, #32]
 8018c34:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8018c38:	6810      	ldr	r0, [r2, #0]
 8018c3a:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 8018c3c:	6a3b      	ldr	r3, [r7, #32]
 8018c3e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8018c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c44:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8018c48:	6810      	ldr	r0, [r2, #0]
 8018c4a:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 8018c4c:	6a3b      	ldr	r3, [r7, #32]
 8018c4e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8018c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c54:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8018c58:	6810      	ldr	r0, [r2, #0]
 8018c5a:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 8018c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c5e:	6a3a      	ldr	r2, [r7, #32]
 8018c60:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8018c64:	6810      	ldr	r0, [r2, #0]
 8018c66:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 8018c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c6a:	6a3a      	ldr	r2, [r7, #32]
 8018c6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8018c70:	6810      	ldr	r0, [r2, #0]
 8018c72:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 8018c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c76:	6a3a      	ldr	r2, [r7, #32]
 8018c78:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8018c7c:	6810      	ldr	r0, [r2, #0]
 8018c7e:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 8018c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c82:	6a3a      	ldr	r2, [r7, #32]
 8018c84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8018c88:	6810      	ldr	r0, [r2, #0]
 8018c8a:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 8018c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c8e:	6a3a      	ldr	r2, [r7, #32]
 8018c90:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8018c94:	6810      	ldr	r0, [r2, #0]
 8018c96:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 8018c98:	6a3b      	ldr	r3, [r7, #32]
 8018c9a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8018c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ca0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018ca4:	6810      	ldr	r0, [r2, #0]
 8018ca6:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 8018ca8:	6a3b      	ldr	r3, [r7, #32]
 8018caa:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8018cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018cb4:	6810      	ldr	r0, [r2, #0]
 8018cb6:	6018      	str	r0, [r3, #0]
    edit->padding           = nk_vec2(0,0);
 8018cb8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8018cba:	eddf 0a27 	vldr	s1, [pc, #156]	; 8018d58 <nk_style_from_table+0x15a4>
 8018cbe:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8018d58 <nk_style_from_table+0x15a4>
 8018cc2:	f7f9 fd63 	bl	801278c <nk_vec2>
 8018cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8018cca:	eef0 7a60 	vmov.f32	s15, s1
 8018cce:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 8018cd2:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->cursor_size       = 8;
 8018cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cd8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018cdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 0;
 8018ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ce2:	f04f 0200 	mov.w	r2, #0
 8018ce6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 8018cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cec:	f04f 0200 	mov.w	r2, #0
 8018cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 8018cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018cf6:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 8018cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    nk_zero_struct(*chart);
 8018cfc:	2138      	movs	r1, #56	; 0x38
 8018cfe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018d00:	f002 f8fc 	bl	801aefc <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 8018d04:	6a3b      	ldr	r3, [r7, #32]
 8018d06:	3350      	adds	r3, #80	; 0x50
 8018d08:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8018d0a:	463a      	mov	r2, r7
 8018d0c:	6819      	ldr	r1, [r3, #0]
 8018d0e:	460b      	mov	r3, r1
 8018d10:	4619      	mov	r1, r3
 8018d12:	4610      	mov	r0, r2
 8018d14:	f7fe fd1a 	bl	801774c <nk_style_item_color>
 8018d18:	4625      	mov	r5, r4
 8018d1a:	463c      	mov	r4, r7
 8018d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018d24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 8018d28:	6a3b      	ldr	r3, [r7, #32]
 8018d2a:	f103 020c 	add.w	r2, r3, #12
 8018d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d30:	331c      	adds	r3, #28
 8018d32:	6810      	ldr	r0, [r2, #0]
 8018d34:	6018      	str	r0, [r3, #0]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 8018d36:	6a3b      	ldr	r3, [r7, #32]
 8018d38:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8018d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d3e:	3320      	adds	r3, #32
 8018d40:	6810      	ldr	r0, [r2, #0]
 8018d42:	6018      	str	r0, [r3, #0]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 8018d44:	6a3b      	ldr	r3, [r7, #32]
 8018d46:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8018d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d4c:	3324      	adds	r3, #36	; 0x24
 8018d4e:	6810      	ldr	r0, [r2, #0]
 8018d50:	6018      	str	r0, [r3, #0]
 8018d52:	e003      	b.n	8018d5c <nk_style_from_table+0x15a8>
 8018d54:	41200000 	.word	0x41200000
 8018d58:	00000000 	.word	0x00000000
    chart->padding          = nk_vec2(4,4);
 8018d5c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8018d5e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8018d62:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018d66:	f7f9 fd11 	bl	801278c <nk_vec2>
 8018d6a:	eeb0 7a40 	vmov.f32	s14, s0
 8018d6e:	eef0 7a60 	vmov.f32	s15, s1
 8018d72:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 8018d76:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    chart->border           = 0;
 8018d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d7c:	f04f 0200 	mov.w	r2, #0
 8018d80:	629a      	str	r2, [r3, #40]	; 0x28
    chart->rounding         = 0;
 8018d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d84:	f04f 0200 	mov.w	r2, #0
 8018d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 8018d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018d8c:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8018d90:	64bb      	str	r3, [r7, #72]	; 0x48
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8018d92:	6a3b      	ldr	r3, [r7, #32]
 8018d94:	334c      	adds	r3, #76	; 0x4c
 8018d96:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018d98:	463a      	mov	r2, r7
 8018d9a:	6819      	ldr	r1, [r3, #0]
 8018d9c:	460b      	mov	r3, r1
 8018d9e:	4619      	mov	r1, r3
 8018da0:	4610      	mov	r0, r2
 8018da2:	f7fe fcd3 	bl	801774c <nk_style_item_color>
 8018da6:	4625      	mov	r5, r4
 8018da8:	463c      	mov	r4, r7
 8018daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018dae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018db2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 8018db6:	6a3b      	ldr	r3, [r7, #32]
 8018db8:	334c      	adds	r3, #76	; 0x4c
 8018dba:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018dbc:	463a      	mov	r2, r7
 8018dbe:	6819      	ldr	r1, [r3, #0]
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	4619      	mov	r1, r3
 8018dc4:	4610      	mov	r0, r2
 8018dc6:	f7fe fcc1 	bl	801774c <nk_style_item_color>
 8018dca:	341c      	adds	r4, #28
 8018dcc:	463d      	mov	r5, r7
 8018dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8018dda:	6a3b      	ldr	r3, [r7, #32]
 8018ddc:	334c      	adds	r3, #76	; 0x4c
 8018dde:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018de0:	463a      	mov	r2, r7
 8018de2:	6819      	ldr	r1, [r3, #0]
 8018de4:	460b      	mov	r3, r1
 8018de6:	4619      	mov	r1, r3
 8018de8:	4610      	mov	r0, r2
 8018dea:	f7fe fcaf 	bl	801774c <nk_style_item_color>
 8018dee:	3438      	adds	r4, #56	; 0x38
 8018df0:	463d      	mov	r5, r7
 8018df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018df6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	f103 020c 	add.w	r2, r3, #12
 8018e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e06:	3354      	adds	r3, #84	; 0x54
 8018e08:	6810      	ldr	r0, [r2, #0]
 8018e0a:	6018      	str	r0, [r3, #0]
    combo->label_normal     = table[NK_COLOR_TEXT];
 8018e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e0e:	6a3a      	ldr	r2, [r7, #32]
 8018e10:	3358      	adds	r3, #88	; 0x58
 8018e12:	6810      	ldr	r0, [r2, #0]
 8018e14:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 8018e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e18:	6a3a      	ldr	r2, [r7, #32]
 8018e1a:	335c      	adds	r3, #92	; 0x5c
 8018e1c:	6810      	ldr	r0, [r2, #0]
 8018e1e:	6018      	str	r0, [r3, #0]
    combo->label_active     = table[NK_COLOR_TEXT];
 8018e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e22:	6a3a      	ldr	r2, [r7, #32]
 8018e24:	3360      	adds	r3, #96	; 0x60
 8018e26:	6810      	ldr	r0, [r2, #0]
 8018e28:	6018      	str	r0, [r3, #0]
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 8018e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e2c:	2208      	movs	r2, #8
 8018e2e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 8018e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e34:	2208      	movs	r2, #8
 8018e36:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 8018e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e3c:	2208      	movs	r2, #8
 8018e3e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    combo->content_padding  = nk_vec2(4,4);
 8018e42:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018e44:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8018e48:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018e4c:	f7f9 fc9e 	bl	801278c <nk_vec2>
 8018e50:	eeb0 7a40 	vmov.f32	s14, s0
 8018e54:	eef0 7a60 	vmov.f32	s15, s1
 8018e58:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 8018e5c:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 8018e60:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018e62:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8018e66:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8018d58 <nk_style_from_table+0x15a4>
 8018e6a:	f7f9 fc8f 	bl	801278c <nk_vec2>
 8018e6e:	eeb0 7a40 	vmov.f32	s14, s0
 8018e72:	eef0 7a60 	vmov.f32	s15, s1
 8018e76:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8018e7a:	edc4 7a48 	vstr	s15, [r4, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 8018e7e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018e80:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 8018d58 <nk_style_from_table+0x15a4>
 8018e84:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8018e88:	f7f9 fc80 	bl	801278c <nk_vec2>
 8018e8c:	eeb0 7a40 	vmov.f32	s14, s0
 8018e90:	eef0 7a60 	vmov.f32	s15, s1
 8018e94:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
 8018e98:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
    combo->border           = 1;
 8018e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018e9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018ea2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 8018ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ea8:	f04f 0200 	mov.w	r2, #0
 8018eac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 8018eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018eb2:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 8018eb6:	3310      	adds	r3, #16
 8018eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018eba:	2198      	movs	r1, #152	; 0x98
 8018ebc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018ebe:	f002 f81d 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 8018ec2:	6a3b      	ldr	r3, [r7, #32]
 8018ec4:	334c      	adds	r3, #76	; 0x4c
 8018ec6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018ec8:	463a      	mov	r2, r7
 8018eca:	6819      	ldr	r1, [r3, #0]
 8018ecc:	460b      	mov	r3, r1
 8018ece:	4619      	mov	r1, r3
 8018ed0:	4610      	mov	r0, r2
 8018ed2:	f7fe fc3b 	bl	801774c <nk_style_item_color>
 8018ed6:	4625      	mov	r5, r4
 8018ed8:	463c      	mov	r4, r7
 8018eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018ede:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018ee2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8018ee6:	6a3b      	ldr	r3, [r7, #32]
 8018ee8:	334c      	adds	r3, #76	; 0x4c
 8018eea:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018eec:	463a      	mov	r2, r7
 8018eee:	6819      	ldr	r1, [r3, #0]
 8018ef0:	460b      	mov	r3, r1
 8018ef2:	4619      	mov	r1, r3
 8018ef4:	4610      	mov	r0, r2
 8018ef6:	f7fe fc29 	bl	801774c <nk_style_item_color>
 8018efa:	341c      	adds	r4, #28
 8018efc:	463d      	mov	r5, r7
 8018efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 8018f0a:	6a3b      	ldr	r3, [r7, #32]
 8018f0c:	334c      	adds	r3, #76	; 0x4c
 8018f0e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f10:	463a      	mov	r2, r7
 8018f12:	6819      	ldr	r1, [r3, #0]
 8018f14:	460b      	mov	r3, r1
 8018f16:	4619      	mov	r1, r3
 8018f18:	4610      	mov	r0, r2
 8018f1a:	f7fe fc17 	bl	801774c <nk_style_item_color>
 8018f1e:	3438      	adds	r4, #56	; 0x38
 8018f20:	463d      	mov	r5, r7
 8018f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8018f2e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f30:	2300      	movs	r3, #0
 8018f32:	2200      	movs	r2, #0
 8018f34:	2100      	movs	r1, #0
 8018f36:	2000      	movs	r0, #0
 8018f38:	f7f4 ff0b 	bl	800dd52 <nk_rgba>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 8018f40:	6a3b      	ldr	r3, [r7, #32]
 8018f42:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8018f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f48:	3358      	adds	r3, #88	; 0x58
 8018f4a:	6810      	ldr	r0, [r2, #0]
 8018f4c:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8018f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f50:	6a3a      	ldr	r2, [r7, #32]
 8018f52:	335c      	adds	r3, #92	; 0x5c
 8018f54:	6810      	ldr	r0, [r2, #0]
 8018f56:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8018f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f5a:	6a3a      	ldr	r2, [r7, #32]
 8018f5c:	3360      	adds	r3, #96	; 0x60
 8018f5e:	6810      	ldr	r0, [r2, #0]
 8018f60:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8018f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f64:	6a3a      	ldr	r2, [r7, #32]
 8018f66:	3364      	adds	r3, #100	; 0x64
 8018f68:	6810      	ldr	r0, [r2, #0]
 8018f6a:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8018f6c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f6e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018f72:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018f76:	f7f9 fc09 	bl	801278c <nk_vec2>
 8018f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8018f7e:	eef0 7a60 	vmov.f32	s15, s1
 8018f82:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018f86:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018f8a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018f8c:	ed5f 0a8e 	vldr	s1, [pc, #-568]	; 8018d58 <nk_style_from_table+0x15a4>
 8018f90:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 8018d58 <nk_style_from_table+0x15a4>
 8018f94:	f7f9 fbfa 	bl	801278c <nk_vec2>
 8018f98:	eeb0 7a40 	vmov.f32	s14, s0
 8018f9c:	eef0 7a60 	vmov.f32	s15, s1
 8018fa0:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8018fa4:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018fa8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018faa:	2000      	movs	r0, #0
 8018fac:	f7f7 ffa2 	bl	8010ef4 <nk_handle_ptr>
 8018fb0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8018fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018fb6:	2212      	movs	r2, #18
 8018fb8:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8018fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018fbc:	f04f 0200 	mov.w	r2, #0
 8018fc0:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8018fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018fc4:	f04f 0200 	mov.w	r2, #0
 8018fc8:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018fcc:	2200      	movs	r2, #0
 8018fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* tab */
    tab = &style->tab;
 8018fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018fdc:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8018fe0:	331c      	adds	r3, #28
 8018fe2:	647b      	str	r3, [r7, #68]	; 0x44
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 8018fe4:	6a3b      	ldr	r3, [r7, #32]
 8018fe6:	336c      	adds	r3, #108	; 0x6c
 8018fe8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8018fea:	463a      	mov	r2, r7
 8018fec:	6819      	ldr	r1, [r3, #0]
 8018fee:	460b      	mov	r3, r1
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	4610      	mov	r0, r2
 8018ff4:	f7fe fbaa 	bl	801774c <nk_style_item_color>
 8018ff8:	4625      	mov	r5, r4
 8018ffa:	463c      	mov	r4, r7
 8018ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019000:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019004:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 8019008:	6a3b      	ldr	r3, [r7, #32]
 801900a:	f103 020c 	add.w	r2, r3, #12
 801900e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019010:	331c      	adds	r3, #28
 8019012:	6810      	ldr	r0, [r2, #0]
 8019014:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 8019016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019018:	6a3a      	ldr	r2, [r7, #32]
 801901a:	3320      	adds	r3, #32
 801901c:	6810      	ldr	r0, [r2, #0]
 801901e:	6018      	str	r0, [r3, #0]
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 8019020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019022:	220a      	movs	r2, #10
 8019024:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 8019028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801902a:	2208      	movs	r2, #8
 801902c:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
    tab->padding            = nk_vec2(4,4);
 8019030:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8019032:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019036:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801903a:	f7f9 fba7 	bl	801278c <nk_vec2>
 801903e:	eeb0 7a40 	vmov.f32	s14, s0
 8019042:	eef0 7a60 	vmov.f32	s15, s1
 8019046:	ed84 7aa5 	vstr	s14, [r4, #660]	; 0x294
 801904a:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 801904e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8019050:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019054:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019058:	f7f9 fb98 	bl	801278c <nk_vec2>
 801905c:	eeb0 7a40 	vmov.f32	s14, s0
 8019060:	eef0 7a60 	vmov.f32	s15, s1
 8019064:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 8019068:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    tab->indent             = 10.0f;
 801906c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801906e:	4aca      	ldr	r2, [pc, #808]	; (8019398 <nk_style_from_table+0x1be4>)
 8019070:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 8019074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019076:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801907a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    tab->rounding           = 0;
 801907e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019080:	f04f 0200 	mov.w	r2, #0
 8019084:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 8019088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801908a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801908e:	3318      	adds	r3, #24
 8019090:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019092:	2198      	movs	r1, #152	; 0x98
 8019094:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019096:	f001 ff31 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801909a:	6a3b      	ldr	r3, [r7, #32]
 801909c:	336c      	adds	r3, #108	; 0x6c
 801909e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80190a0:	463a      	mov	r2, r7
 80190a2:	6819      	ldr	r1, [r3, #0]
 80190a4:	460b      	mov	r3, r1
 80190a6:	4619      	mov	r1, r3
 80190a8:	4610      	mov	r0, r2
 80190aa:	f7fe fb4f 	bl	801774c <nk_style_item_color>
 80190ae:	4625      	mov	r5, r4
 80190b0:	463c      	mov	r4, r7
 80190b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80190ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 80190be:	6a3b      	ldr	r3, [r7, #32]
 80190c0:	336c      	adds	r3, #108	; 0x6c
 80190c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80190c4:	463a      	mov	r2, r7
 80190c6:	6819      	ldr	r1, [r3, #0]
 80190c8:	460b      	mov	r3, r1
 80190ca:	4619      	mov	r1, r3
 80190cc:	4610      	mov	r0, r2
 80190ce:	f7fe fb3d 	bl	801774c <nk_style_item_color>
 80190d2:	341c      	adds	r4, #28
 80190d4:	463d      	mov	r5, r7
 80190d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80190de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 80190e2:	6a3b      	ldr	r3, [r7, #32]
 80190e4:	336c      	adds	r3, #108	; 0x6c
 80190e6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80190e8:	463a      	mov	r2, r7
 80190ea:	6819      	ldr	r1, [r3, #0]
 80190ec:	460b      	mov	r3, r1
 80190ee:	4619      	mov	r1, r3
 80190f0:	4610      	mov	r0, r2
 80190f2:	f7fe fb2b 	bl	801774c <nk_style_item_color>
 80190f6:	3438      	adds	r4, #56	; 0x38
 80190f8:	463d      	mov	r5, r7
 80190fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019106:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019108:	2300      	movs	r3, #0
 801910a:	2200      	movs	r2, #0
 801910c:	2100      	movs	r1, #0
 801910e:	2000      	movs	r0, #0
 8019110:	f7f4 fe1f 	bl	800dd52 <nk_rgba>
 8019114:	4603      	mov	r3, r0
 8019116:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 8019118:	6a3b      	ldr	r3, [r7, #32]
 801911a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801911e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019120:	3358      	adds	r3, #88	; 0x58
 8019122:	6810      	ldr	r0, [r2, #0]
 8019124:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019128:	6a3a      	ldr	r2, [r7, #32]
 801912a:	335c      	adds	r3, #92	; 0x5c
 801912c:	6810      	ldr	r0, [r2, #0]
 801912e:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019132:	6a3a      	ldr	r2, [r7, #32]
 8019134:	3360      	adds	r3, #96	; 0x60
 8019136:	6810      	ldr	r0, [r2, #0]
 8019138:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801913a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801913c:	6a3a      	ldr	r2, [r7, #32]
 801913e:	3364      	adds	r3, #100	; 0x64
 8019140:	6810      	ldr	r0, [r2, #0]
 8019142:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019144:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019146:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801914a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801914e:	f7f9 fb1d 	bl	801278c <nk_vec2>
 8019152:	eeb0 7a40 	vmov.f32	s14, s0
 8019156:	eef0 7a60 	vmov.f32	s15, s1
 801915a:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801915e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019162:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019164:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801939c <nk_style_from_table+0x1be8>
 8019168:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801939c <nk_style_from_table+0x1be8>
 801916c:	f7f9 fb0e 	bl	801278c <nk_vec2>
 8019170:	eeb0 7a40 	vmov.f32	s14, s0
 8019174:	eef0 7a60 	vmov.f32	s15, s1
 8019178:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801917c:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019180:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019182:	2000      	movs	r0, #0
 8019184:	f7f7 feb6 	bl	8010ef4 <nk_handle_ptr>
 8019188:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801918c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801918e:	2212      	movs	r2, #18
 8019190:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019194:	f04f 0200 	mov.w	r2, #0
 8019198:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801919a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801919c:	f04f 0200 	mov.w	r2, #0
 80191a0:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80191a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191a4:	2200      	movs	r2, #0
 80191a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 80191aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80191ac:	2200      	movs	r2, #0
 80191ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.tab_maximize_button =*button;
 80191b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80191b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80191ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80191be:	4611      	mov	r1, r2
 80191c0:	2298      	movs	r2, #152	; 0x98
 80191c2:	4618      	mov	r0, r3
 80191c4:	f004 f9e6 	bl	801d594 <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 80191c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80191ca:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 80191ce:	3308      	adds	r3, #8
 80191d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 80191d2:	2198      	movs	r1, #152	; 0x98
 80191d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80191d6:	f001 fe91 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 80191da:	6a3b      	ldr	r3, [r7, #32]
 80191dc:	3304      	adds	r3, #4
 80191de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80191e0:	463a      	mov	r2, r7
 80191e2:	6819      	ldr	r1, [r3, #0]
 80191e4:	460b      	mov	r3, r1
 80191e6:	4619      	mov	r1, r3
 80191e8:	4610      	mov	r0, r2
 80191ea:	f7fe faaf 	bl	801774c <nk_style_item_color>
 80191ee:	4625      	mov	r5, r4
 80191f0:	463c      	mov	r4, r7
 80191f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80191f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80191fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 80191fe:	6a3b      	ldr	r3, [r7, #32]
 8019200:	3304      	adds	r3, #4
 8019202:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019204:	463a      	mov	r2, r7
 8019206:	6819      	ldr	r1, [r3, #0]
 8019208:	460b      	mov	r3, r1
 801920a:	4619      	mov	r1, r3
 801920c:	4610      	mov	r0, r2
 801920e:	f7fe fa9d 	bl	801774c <nk_style_item_color>
 8019212:	341c      	adds	r4, #28
 8019214:	463d      	mov	r5, r7
 8019216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801921a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801921e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8019222:	6a3b      	ldr	r3, [r7, #32]
 8019224:	3304      	adds	r3, #4
 8019226:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019228:	463a      	mov	r2, r7
 801922a:	6819      	ldr	r1, [r3, #0]
 801922c:	460b      	mov	r3, r1
 801922e:	4619      	mov	r1, r3
 8019230:	4610      	mov	r0, r2
 8019232:	f7fe fa8b 	bl	801774c <nk_style_item_color>
 8019236:	3438      	adds	r4, #56	; 0x38
 8019238:	463d      	mov	r5, r7
 801923a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801923c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801923e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019246:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019248:	2300      	movs	r3, #0
 801924a:	2200      	movs	r2, #0
 801924c:	2100      	movs	r1, #0
 801924e:	2000      	movs	r0, #0
 8019250:	f7f4 fd7f 	bl	800dd52 <nk_rgba>
 8019254:	4603      	mov	r3, r0
 8019256:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 8019258:	6a3b      	ldr	r3, [r7, #32]
 801925a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801925e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019260:	3358      	adds	r3, #88	; 0x58
 8019262:	6810      	ldr	r0, [r2, #0]
 8019264:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019268:	6a3a      	ldr	r2, [r7, #32]
 801926a:	335c      	adds	r3, #92	; 0x5c
 801926c:	6810      	ldr	r0, [r2, #0]
 801926e:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019272:	6a3a      	ldr	r2, [r7, #32]
 8019274:	3360      	adds	r3, #96	; 0x60
 8019276:	6810      	ldr	r0, [r2, #0]
 8019278:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801927a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801927c:	6a3a      	ldr	r2, [r7, #32]
 801927e:	3364      	adds	r3, #100	; 0x64
 8019280:	6810      	ldr	r0, [r2, #0]
 8019282:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8019284:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019286:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801928a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801928e:	f7f9 fa7d 	bl	801278c <nk_vec2>
 8019292:	eeb0 7a40 	vmov.f32	s14, s0
 8019296:	eef0 7a60 	vmov.f32	s15, s1
 801929a:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801929e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80192a2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192a4:	eddf 0a3d 	vldr	s1, [pc, #244]	; 801939c <nk_style_from_table+0x1be8>
 80192a8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801939c <nk_style_from_table+0x1be8>
 80192ac:	f7f9 fa6e 	bl	801278c <nk_vec2>
 80192b0:	eeb0 7a40 	vmov.f32	s14, s0
 80192b4:	eef0 7a60 	vmov.f32	s15, s1
 80192b8:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80192bc:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80192c0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192c2:	2000      	movs	r0, #0
 80192c4:	f7f7 fe16 	bl	8010ef4 <nk_handle_ptr>
 80192c8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80192cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192ce:	2212      	movs	r2, #18
 80192d0:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 80192d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192d4:	f04f 0200 	mov.w	r2, #0
 80192d8:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 80192da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192dc:	f04f 0200 	mov.w	r2, #0
 80192e0:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80192e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192e4:	2200      	movs	r2, #0
 80192e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 80192ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80192ec:	2200      	movs	r2, #0
 80192ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.node_maximize_button =*button;
 80192f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80192f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80192f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80192fa:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80192fe:	4611      	mov	r1, r2
 8019300:	2298      	movs	r2, #152	; 0x98
 8019302:	4618      	mov	r0, r3
 8019304:	f004 f946 	bl	801d594 <memcpy>

    /* window header */
    win = &style->window;
 8019308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801930a:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801930e:	330c      	adds	r3, #12
 8019310:	643b      	str	r3, [r7, #64]	; 0x40
    win->header.align = NK_HEADER_RIGHT;
 8019312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019314:	2201      	movs	r2, #1
 8019316:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    win->header.close_symbol = NK_SYMBOL_X;
 801931a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801931c:	2201      	movs	r2, #1
 801931e:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 8019322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019324:	220c      	movs	r2, #12
 8019326:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 801932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801932c:	220b      	movs	r2, #11
 801932e:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019332:	6a3b      	ldr	r3, [r7, #32]
 8019334:	3308      	adds	r3, #8
 8019336:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019338:	463a      	mov	r2, r7
 801933a:	6819      	ldr	r1, [r3, #0]
 801933c:	460b      	mov	r3, r1
 801933e:	4619      	mov	r1, r3
 8019340:	4610      	mov	r0, r2
 8019342:	f7fe fa03 	bl	801774c <nk_style_item_color>
 8019346:	4625      	mov	r5, r4
 8019348:	463c      	mov	r4, r7
 801934a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801934c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801934e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019352:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019356:	6a3b      	ldr	r3, [r7, #32]
 8019358:	3308      	adds	r3, #8
 801935a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801935c:	463a      	mov	r2, r7
 801935e:	6819      	ldr	r1, [r3, #0]
 8019360:	460b      	mov	r3, r1
 8019362:	4619      	mov	r1, r3
 8019364:	4610      	mov	r0, r2
 8019366:	f7fe f9f1 	bl	801774c <nk_style_item_color>
 801936a:	341c      	adds	r4, #28
 801936c:	463d      	mov	r5, r7
 801936e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801937a:	6a3b      	ldr	r3, [r7, #32]
 801937c:	3308      	adds	r3, #8
 801937e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019380:	463a      	mov	r2, r7
 8019382:	6819      	ldr	r1, [r3, #0]
 8019384:	460b      	mov	r3, r1
 8019386:	4619      	mov	r1, r3
 8019388:	4610      	mov	r0, r2
 801938a:	f7fe f9df 	bl	801774c <nk_style_item_color>
 801938e:	3438      	adds	r4, #56	; 0x38
 8019390:	463d      	mov	r5, r7
 8019392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019394:	e004      	b.n	80193a0 <nk_style_from_table+0x1bec>
 8019396:	bf00      	nop
 8019398:	41200000 	.word	0x41200000
 801939c:	00000000 	.word	0x00000000
 80193a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80193a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 80193aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193ac:	6a3a      	ldr	r2, [r7, #32]
 80193ae:	f203 1387 	addw	r3, r3, #391	; 0x187
 80193b2:	6812      	ldr	r2, [r2, #0]
 80193b4:	601a      	str	r2, [r3, #0]
    win->header.label_hover = table[NK_COLOR_TEXT];
 80193b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193b8:	6a3a      	ldr	r2, [r7, #32]
 80193ba:	f203 138b 	addw	r3, r3, #395	; 0x18b
 80193be:	6812      	ldr	r2, [r2, #0]
 80193c0:	601a      	str	r2, [r3, #0]
    win->header.label_active = table[NK_COLOR_TEXT];
 80193c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193c4:	6a3a      	ldr	r2, [r7, #32]
 80193c6:	f203 138f 	addw	r3, r3, #399	; 0x18f
 80193ca:	6812      	ldr	r2, [r2, #0]
 80193cc:	601a      	str	r2, [r3, #0]
    win->header.label_padding = nk_vec2(4,4);
 80193ce:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80193d0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80193d4:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80193d8:	f7f9 f9d8 	bl	801278c <nk_vec2>
 80193dc:	eeb0 7a40 	vmov.f32	s14, s0
 80193e0:	eef0 7a60 	vmov.f32	s15, s1
 80193e4:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
 80193e8:	edc4 7a68 	vstr	s15, [r4, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 80193ec:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80193ee:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80193f2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80193f6:	f7f9 f9c9 	bl	801278c <nk_vec2>
 80193fa:	eeb0 7a40 	vmov.f32	s14, s0
 80193fe:	eef0 7a60 	vmov.f32	s15, s1
 8019402:	ed84 7a65 	vstr	s14, [r4, #404]	; 0x194
 8019406:	edc4 7a66 	vstr	s15, [r4, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 801940a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801940c:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801939c <nk_style_from_table+0x1be8>
 8019410:	ed1f 0a1e 	vldr	s0, [pc, #-120]	; 801939c <nk_style_from_table+0x1be8>
 8019414:	f7f9 f9ba 	bl	801278c <nk_vec2>
 8019418:	eeb0 7a40 	vmov.f32	s14, s0
 801941c:	eef0 7a60 	vmov.f32	s15, s1
 8019420:	ed84 7a69 	vstr	s14, [r4, #420]	; 0x1a4
 8019424:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 8019428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801942a:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 801942e:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019430:	2198      	movs	r1, #152	; 0x98
 8019432:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019434:	f001 fd62 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019438:	6a3b      	ldr	r3, [r7, #32]
 801943a:	3308      	adds	r3, #8
 801943c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801943e:	463a      	mov	r2, r7
 8019440:	6819      	ldr	r1, [r3, #0]
 8019442:	460b      	mov	r3, r1
 8019444:	4619      	mov	r1, r3
 8019446:	4610      	mov	r0, r2
 8019448:	f7fe f980 	bl	801774c <nk_style_item_color>
 801944c:	4625      	mov	r5, r4
 801944e:	463c      	mov	r4, r7
 8019450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019454:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019458:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801945c:	6a3b      	ldr	r3, [r7, #32]
 801945e:	3308      	adds	r3, #8
 8019460:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019462:	463a      	mov	r2, r7
 8019464:	6819      	ldr	r1, [r3, #0]
 8019466:	460b      	mov	r3, r1
 8019468:	4619      	mov	r1, r3
 801946a:	4610      	mov	r0, r2
 801946c:	f7fe f96e 	bl	801774c <nk_style_item_color>
 8019470:	341c      	adds	r4, #28
 8019472:	463d      	mov	r5, r7
 8019474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019478:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801947c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019480:	6a3b      	ldr	r3, [r7, #32]
 8019482:	3308      	adds	r3, #8
 8019484:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019486:	463a      	mov	r2, r7
 8019488:	6819      	ldr	r1, [r3, #0]
 801948a:	460b      	mov	r3, r1
 801948c:	4619      	mov	r1, r3
 801948e:	4610      	mov	r0, r2
 8019490:	f7fe f95c 	bl	801774c <nk_style_item_color>
 8019494:	3438      	adds	r4, #56	; 0x38
 8019496:	463d      	mov	r5, r7
 8019498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801949a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801949c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80194a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 80194a4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80194a6:	2300      	movs	r3, #0
 80194a8:	2200      	movs	r2, #0
 80194aa:	2100      	movs	r1, #0
 80194ac:	2000      	movs	r0, #0
 80194ae:	f7f4 fc50 	bl	800dd52 <nk_rgba>
 80194b2:	4603      	mov	r3, r0
 80194b4:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 80194b6:	6a3b      	ldr	r3, [r7, #32]
 80194b8:	f103 0208 	add.w	r2, r3, #8
 80194bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194be:	3358      	adds	r3, #88	; 0x58
 80194c0:	6810      	ldr	r0, [r2, #0]
 80194c2:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 80194c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194c6:	6a3a      	ldr	r2, [r7, #32]
 80194c8:	335c      	adds	r3, #92	; 0x5c
 80194ca:	6810      	ldr	r0, [r2, #0]
 80194cc:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 80194ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194d0:	6a3a      	ldr	r2, [r7, #32]
 80194d2:	3360      	adds	r3, #96	; 0x60
 80194d4:	6810      	ldr	r0, [r2, #0]
 80194d6:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 80194d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80194da:	6a3a      	ldr	r2, [r7, #32]
 80194dc:	3364      	adds	r3, #100	; 0x64
 80194de:	6810      	ldr	r0, [r2, #0]
 80194e0:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 80194e2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80194e4:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 801939c <nk_style_from_table+0x1be8>
 80194e8:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 801939c <nk_style_from_table+0x1be8>
 80194ec:	f7f9 f94e 	bl	801278c <nk_vec2>
 80194f0:	eeb0 7a40 	vmov.f32	s14, s0
 80194f4:	eef0 7a60 	vmov.f32	s15, s1
 80194f8:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80194fc:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019500:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019502:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 801939c <nk_style_from_table+0x1be8>
 8019506:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801939c <nk_style_from_table+0x1be8>
 801950a:	f7f9 f93f 	bl	801278c <nk_vec2>
 801950e:	eeb0 7a40 	vmov.f32	s14, s0
 8019512:	eef0 7a60 	vmov.f32	s15, s1
 8019516:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801951a:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801951e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019520:	2000      	movs	r0, #0
 8019522:	f7f7 fce7 	bl	8010ef4 <nk_handle_ptr>
 8019526:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801952a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801952c:	2212      	movs	r2, #18
 801952e:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019532:	f04f 0200 	mov.w	r2, #0
 8019536:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801953a:	f04f 0200 	mov.w	r2, #0
 801953e:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019542:	2200      	movs	r2, #0
 8019544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801954a:	2200      	movs	r2, #0
 801954c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 8019550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019552:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8019556:	3318      	adds	r3, #24
 8019558:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801955a:	2198      	movs	r1, #152	; 0x98
 801955c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801955e:	f001 fccd 	bl	801aefc <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019562:	6a3b      	ldr	r3, [r7, #32]
 8019564:	3308      	adds	r3, #8
 8019566:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019568:	463a      	mov	r2, r7
 801956a:	6819      	ldr	r1, [r3, #0]
 801956c:	460b      	mov	r3, r1
 801956e:	4619      	mov	r1, r3
 8019570:	4610      	mov	r0, r2
 8019572:	f7fe f8eb 	bl	801774c <nk_style_item_color>
 8019576:	4625      	mov	r5, r4
 8019578:	463c      	mov	r4, r7
 801957a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801957c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801957e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019582:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 8019586:	6a3b      	ldr	r3, [r7, #32]
 8019588:	3308      	adds	r3, #8
 801958a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801958c:	463a      	mov	r2, r7
 801958e:	6819      	ldr	r1, [r3, #0]
 8019590:	460b      	mov	r3, r1
 8019592:	4619      	mov	r1, r3
 8019594:	4610      	mov	r0, r2
 8019596:	f7fe f8d9 	bl	801774c <nk_style_item_color>
 801959a:	341c      	adds	r4, #28
 801959c:	463d      	mov	r5, r7
 801959e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 80195aa:	6a3b      	ldr	r3, [r7, #32]
 80195ac:	3308      	adds	r3, #8
 80195ae:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80195b0:	463a      	mov	r2, r7
 80195b2:	6819      	ldr	r1, [r3, #0]
 80195b4:	460b      	mov	r3, r1
 80195b6:	4619      	mov	r1, r3
 80195b8:	4610      	mov	r0, r2
 80195ba:	f7fe f8c7 	bl	801774c <nk_style_item_color>
 80195be:	3438      	adds	r4, #56	; 0x38
 80195c0:	463d      	mov	r5, r7
 80195c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 80195ce:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80195d0:	2300      	movs	r3, #0
 80195d2:	2200      	movs	r2, #0
 80195d4:	2100      	movs	r1, #0
 80195d6:	2000      	movs	r0, #0
 80195d8:	f7f4 fbbb 	bl	800dd52 <nk_rgba>
 80195dc:	4603      	mov	r3, r0
 80195de:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 80195e0:	6a3b      	ldr	r3, [r7, #32]
 80195e2:	f103 0208 	add.w	r2, r3, #8
 80195e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80195e8:	3358      	adds	r3, #88	; 0x58
 80195ea:	6810      	ldr	r0, [r2, #0]
 80195ec:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 80195ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80195f0:	6a3a      	ldr	r2, [r7, #32]
 80195f2:	335c      	adds	r3, #92	; 0x5c
 80195f4:	6810      	ldr	r0, [r2, #0]
 80195f6:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 80195f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80195fa:	6a3a      	ldr	r2, [r7, #32]
 80195fc:	3360      	adds	r3, #96	; 0x60
 80195fe:	6810      	ldr	r0, [r2, #0]
 8019600:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019604:	6a3a      	ldr	r2, [r7, #32]
 8019606:	3364      	adds	r3, #100	; 0x64
 8019608:	6810      	ldr	r0, [r2, #0]
 801960a:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801960c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801960e:	ed5f 0a9d 	vldr	s1, [pc, #-628]	; 801939c <nk_style_from_table+0x1be8>
 8019612:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 801939c <nk_style_from_table+0x1be8>
 8019616:	f7f9 f8b9 	bl	801278c <nk_vec2>
 801961a:	eeb0 7a40 	vmov.f32	s14, s0
 801961e:	eef0 7a60 	vmov.f32	s15, s1
 8019622:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019626:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801962a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801962c:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 801939c <nk_style_from_table+0x1be8>
 8019630:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 801939c <nk_style_from_table+0x1be8>
 8019634:	f7f9 f8aa 	bl	801278c <nk_vec2>
 8019638:	eeb0 7a40 	vmov.f32	s14, s0
 801963c:	eef0 7a60 	vmov.f32	s15, s1
 8019640:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019644:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019648:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801964a:	2000      	movs	r0, #0
 801964c:	f7f7 fc52 	bl	8010ef4 <nk_handle_ptr>
 8019650:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019656:	2212      	movs	r2, #18
 8019658:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801965a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801965c:	f04f 0200 	mov.w	r2, #0
 8019660:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019664:	f04f 0200 	mov.w	r2, #0
 8019668:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801966a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801966c:	2200      	movs	r2, #0
 801966e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019674:	2200      	movs	r2, #0
 8019676:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 801967a:	6a3b      	ldr	r3, [r7, #32]
 801967c:	1d1a      	adds	r2, r3, #4
 801967e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019680:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8019684:	6810      	ldr	r0, [r2, #0]
 8019686:	6018      	str	r0, [r3, #0]
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8019688:	6a3b      	ldr	r3, [r7, #32]
 801968a:	3304      	adds	r3, #4
 801968c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801968e:	463a      	mov	r2, r7
 8019690:	6819      	ldr	r1, [r3, #0]
 8019692:	460b      	mov	r3, r1
 8019694:	4619      	mov	r1, r3
 8019696:	4610      	mov	r0, r2
 8019698:	f7fe f858 	bl	801774c <nk_style_item_color>
 801969c:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
 80196a0:	463d      	mov	r5, r7
 80196a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80196a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80196aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 80196ae:	6a3b      	ldr	r3, [r7, #32]
 80196b0:	f103 020c 	add.w	r2, r3, #12
 80196b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196b6:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80196ba:	6810      	ldr	r0, [r2, #0]
 80196bc:	6018      	str	r0, [r3, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 80196be:	6a3b      	ldr	r3, [r7, #32]
 80196c0:	f103 020c 	add.w	r2, r3, #12
 80196c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196c6:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80196ca:	6810      	ldr	r0, [r2, #0]
 80196cc:	6018      	str	r0, [r3, #0]
    win->combo_border_color = table[NK_COLOR_BORDER];
 80196ce:	6a3b      	ldr	r3, [r7, #32]
 80196d0:	f103 020c 	add.w	r2, r3, #12
 80196d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196d6:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80196da:	6810      	ldr	r0, [r2, #0]
 80196dc:	6018      	str	r0, [r3, #0]
    win->contextual_border_color = table[NK_COLOR_BORDER];
 80196de:	6a3b      	ldr	r3, [r7, #32]
 80196e0:	f103 020c 	add.w	r2, r3, #12
 80196e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196e6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80196ea:	6810      	ldr	r0, [r2, #0]
 80196ec:	6018      	str	r0, [r3, #0]
    win->menu_border_color = table[NK_COLOR_BORDER];
 80196ee:	6a3b      	ldr	r3, [r7, #32]
 80196f0:	f103 020c 	add.w	r2, r3, #12
 80196f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80196f6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80196fa:	6810      	ldr	r0, [r2, #0]
 80196fc:	6018      	str	r0, [r3, #0]
    win->group_border_color = table[NK_COLOR_BORDER];
 80196fe:	6a3b      	ldr	r3, [r7, #32]
 8019700:	f103 020c 	add.w	r2, r3, #12
 8019704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019706:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801970a:	6810      	ldr	r0, [r2, #0]
 801970c:	6018      	str	r0, [r3, #0]
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801970e:	6a3b      	ldr	r3, [r7, #32]
 8019710:	f103 020c 	add.w	r2, r3, #12
 8019714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019716:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801971a:	6810      	ldr	r0, [r2, #0]
 801971c:	6018      	str	r0, [r3, #0]
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 801971e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019720:	463a      	mov	r2, r7
 8019722:	6a3b      	ldr	r3, [r7, #32]
 8019724:	6819      	ldr	r1, [r3, #0]
 8019726:	460b      	mov	r3, r1
 8019728:	4619      	mov	r1, r3
 801972a:	4610      	mov	r0, r2
 801972c:	f7fe f80e 	bl	801774c <nk_style_item_color>
 8019730:	f504 74f4 	add.w	r4, r4, #488	; 0x1e8
 8019734:	463d      	mov	r5, r7
 8019736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801973a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801973e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    win->rounding = 0.0f;
 8019742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019744:	f04f 0200 	mov.w	r2, #0
 8019748:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 801974c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801974e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019752:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019756:	f7f9 f819 	bl	801278c <nk_vec2>
 801975a:	eeb0 7a40 	vmov.f32	s14, s0
 801975e:	eef0 7a60 	vmov.f32	s15, s1
 8019762:	ed84 7a8a 	vstr	s14, [r4, #552]	; 0x228
 8019766:	edc4 7a8b 	vstr	s15, [r4, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 801976a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801976c:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8019770:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8019774:	f7f9 f80a 	bl	801278c <nk_vec2>
 8019778:	eeb0 7a40 	vmov.f32	s14, s0
 801977c:	eef0 7a60 	vmov.f32	s15, s1
 8019780:	ed84 7a8c 	vstr	s14, [r4, #560]	; 0x230
 8019784:	edc4 7a8d 	vstr	s15, [r4, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 8019788:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801978a:	eddf 0a52 	vldr	s1, [pc, #328]	; 80198d4 <nk_style_from_table+0x2120>
 801978e:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80198d4 <nk_style_from_table+0x2120>
 8019792:	f7f8 fffb 	bl	801278c <nk_vec2>
 8019796:	eeb0 7a40 	vmov.f32	s14, s0
 801979a:	eef0 7a60 	vmov.f32	s15, s1
 801979e:	ed84 7a8e 	vstr	s14, [r4, #568]	; 0x238
 80197a2:	edc4 7a8f 	vstr	s15, [r4, #572]	; 0x23c

    win->combo_border = 1.0f;
 80197a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    win->contextual_border = 1.0f;
 80197b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    win->menu_border = 1.0f;
 80197ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    win->group_border = 1.0f;
 80197c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    win->tooltip_border = 1.0f;
 80197ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    win->popup_border = 1.0f;
 80197d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    win->border = 2.0f;
 80197e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80197e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    win->min_row_height_padding = 8;
 80197ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197ee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80197f2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 80197f6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80197f8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80197fc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019800:	f7f8 ffc4 	bl	801278c <nk_vec2>
 8019804:	eeb0 7a40 	vmov.f32	s14, s0
 8019808:	eef0 7a60 	vmov.f32	s15, s1
 801980c:	ed84 7a90 	vstr	s14, [r4, #576]	; 0x240
 8019810:	edc4 7a91 	vstr	s15, [r4, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 8019814:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019816:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801981a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801981e:	f7f8 ffb5 	bl	801278c <nk_vec2>
 8019822:	eeb0 7a40 	vmov.f32	s14, s0
 8019826:	eef0 7a60 	vmov.f32	s15, s1
 801982a:	ed84 7a92 	vstr	s14, [r4, #584]	; 0x248
 801982e:	edc4 7a93 	vstr	s15, [r4, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 8019832:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019834:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019838:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801983c:	f7f8 ffa6 	bl	801278c <nk_vec2>
 8019840:	eeb0 7a40 	vmov.f32	s14, s0
 8019844:	eef0 7a60 	vmov.f32	s15, s1
 8019848:	ed84 7a94 	vstr	s14, [r4, #592]	; 0x250
 801984c:	edc4 7a95 	vstr	s15, [r4, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 8019850:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019852:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019856:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801985a:	f7f8 ff97 	bl	801278c <nk_vec2>
 801985e:	eeb0 7a40 	vmov.f32	s14, s0
 8019862:	eef0 7a60 	vmov.f32	s15, s1
 8019866:	ed84 7a96 	vstr	s14, [r4, #600]	; 0x258
 801986a:	edc4 7a97 	vstr	s15, [r4, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 801986e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8019870:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019874:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019878:	f7f8 ff88 	bl	801278c <nk_vec2>
 801987c:	eeb0 7a40 	vmov.f32	s14, s0
 8019880:	eef0 7a60 	vmov.f32	s15, s1
 8019884:	ed84 7a98 	vstr	s14, [r4, #608]	; 0x260
 8019888:	edc4 7a99 	vstr	s15, [r4, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 801988c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801988e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019892:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019896:	f7f8 ff79 	bl	801278c <nk_vec2>
 801989a:	eeb0 7a40 	vmov.f32	s14, s0
 801989e:	eef0 7a60 	vmov.f32	s15, s1
 80198a2:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
 80198a6:	edc4 7a9b 	vstr	s15, [r4, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 80198aa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80198ac:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80198b0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80198b4:	f7f8 ff6a 	bl	801278c <nk_vec2>
 80198b8:	eeb0 7a40 	vmov.f32	s14, s0
 80198bc:	eef0 7a60 	vmov.f32	s15, s1
 80198c0:	ed84 7a9c 	vstr	s14, [r4, #624]	; 0x270
 80198c4:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
 80198c8:	e000      	b.n	80198cc <nk_style_from_table+0x2118>
    if (!ctx) return;
 80198ca:	bf00      	nop
}
 80198cc:	3778      	adds	r7, #120	; 0x78
 80198ce:	46bd      	mov	sp, r7
 80198d0:	bdb0      	pop	{r4, r5, r7, pc}
 80198d2:	bf00      	nop
 80198d4:	42800000 	.word	0x42800000

080198d8 <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b084      	sub	sp, #16
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f7f9 f9e7 	bl	8012cb4 <nk_create_page_element>
 80198e6:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d101      	bne.n	80198f2 <nk_create_table+0x1a>
 80198ee:	2300      	movs	r3, #0
 80198f0:	e005      	b.n	80198fe <nk_create_table+0x26>
    nk_zero_struct(*elem);
 80198f2:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80198f6:	68f8      	ldr	r0, [r7, #12]
 80198f8:	f001 fb00 	bl	801aefc <nk_zero>
    return &elem->data.tbl;
 80198fc:	68fb      	ldr	r3, [r7, #12]
}
 80198fe:	4618      	mov	r0, r3
 8019900:	3710      	adds	r7, #16
 8019902:	46bd      	mov	sp, r7
 8019904:	bd80      	pop	{r7, pc}

08019906 <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 8019906:	b580      	push	{r7, lr}
 8019908:	b084      	sub	sp, #16
 801990a:	af00      	add	r7, sp, #0
 801990c:	6078      	str	r0, [r7, #4]
 801990e:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 8019918:	68b9      	ldr	r1, [r7, #8]
 801991a:	6878      	ldr	r0, [r7, #4]
 801991c:	f7f9 fa61 	bl	8012de2 <nk_free_page_element>
}
 8019920:	bf00      	nop
 8019922:	3710      	adds	r7, #16
 8019924:	46bd      	mov	sp, r7
 8019926:	bd80      	pop	{r7, pc}

08019928 <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
 8019928:	b480      	push	{r7}
 801992a:	b083      	sub	sp, #12
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
 8019930:	6039      	str	r1, [r7, #0]
    if (!win->tables) {
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019938:	2b00      	cmp	r3, #0
 801993a:	d113      	bne.n	8019964 <nk_push_table+0x3c>
        win->tables = tbl;
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	683a      	ldr	r2, [r7, #0]
 8019940:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        tbl->next = 0;
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	2200      	movs	r2, #0
 8019948:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        tbl->prev = 0;
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	2200      	movs	r2, #0
 8019950:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        tbl->size = 0;
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	2200      	movs	r2, #0
 8019958:	605a      	str	r2, [r3, #4]
        win->table_count = 1;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	2201      	movs	r2, #1
 801995e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        return;
 8019962:	e01d      	b.n	80199a0 <nk_push_table+0x78>
    }
    win->tables->prev = tbl;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801996a:	683a      	ldr	r2, [r7, #0]
 801996c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	2200      	movs	r2, #0
 8019980:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->size = 0;
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	2200      	movs	r2, #0
 8019988:	605a      	str	r2, [r3, #4]
    win->tables = tbl;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	683a      	ldr	r2, [r7, #0]
 801998e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    win->table_count++;
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8019998:	1c5a      	adds	r2, r3, #1
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
}
 80199a0:	370c      	adds	r7, #12
 80199a2:	46bd      	mov	sp, r7
 80199a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a8:	4770      	bx	lr

080199aa <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
 80199aa:	b480      	push	{r7}
 80199ac:	b083      	sub	sp, #12
 80199ae:	af00      	add	r7, sp, #0
 80199b0:	6078      	str	r0, [r7, #4]
 80199b2:	6039      	str	r1, [r7, #0]
    if (win->tables == tbl)
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80199ba:	683a      	ldr	r2, [r7, #0]
 80199bc:	429a      	cmp	r2, r3
 80199be:	d105      	bne.n	80199cc <nk_remove_table+0x22>
        win->tables = tbl->next;
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    if (tbl->next)
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d007      	beq.n	80199e6 <nk_remove_table+0x3c>
        tbl->next->prev = tbl->prev;
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80199dc:	683a      	ldr	r2, [r7, #0]
 80199de:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 80199e2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d007      	beq.n	8019a00 <nk_remove_table+0x56>
        tbl->prev->next = tbl->next;
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80199f6:	683a      	ldr	r2, [r7, #0]
 80199f8:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 80199fc:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	2200      	movs	r2, #0
 8019a04:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 8019a10:	bf00      	nop
 8019a12:	370c      	adds	r7, #12
 8019a14:	46bd      	mov	sp, r7
 8019a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1a:	4770      	bx	lr

08019a1c <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b086      	sub	sp, #24
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	60f8      	str	r0, [r7, #12]
 8019a24:	60b9      	str	r1, [r7, #8]
 8019a26:	607a      	str	r2, [r7, #4]
 8019a28:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d105      	bne.n	8019a3c <nk_add_value+0x20>
 8019a30:	4b32      	ldr	r3, [pc, #200]	; (8019afc <nk_add_value+0xe0>)
 8019a32:	4a33      	ldr	r2, [pc, #204]	; (8019b00 <nk_add_value+0xe4>)
 8019a34:	213b      	movs	r1, #59	; 0x3b
 8019a36:	4833      	ldr	r0, [pc, #204]	; (8019b04 <nk_add_value+0xe8>)
 8019a38:	f002 ff10 	bl	801c85c <__assert_func>
    NK_ASSERT(win);
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d105      	bne.n	8019a4e <nk_add_value+0x32>
 8019a42:	4b31      	ldr	r3, [pc, #196]	; (8019b08 <nk_add_value+0xec>)
 8019a44:	4a2e      	ldr	r2, [pc, #184]	; (8019b00 <nk_add_value+0xe4>)
 8019a46:	213c      	movs	r1, #60	; 0x3c
 8019a48:	482e      	ldr	r0, [pc, #184]	; (8019b04 <nk_add_value+0xe8>)
 8019a4a:	f002 ff07 	bl	801c85c <__assert_func>
    if (!win || !ctx) return 0;
 8019a4e:	68bb      	ldr	r3, [r7, #8]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d002      	beq.n	8019a5a <nk_add_value+0x3e>
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d101      	bne.n	8019a5e <nk_add_value+0x42>
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	e04a      	b.n	8019af4 <nk_add_value+0xd8>
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d005      	beq.n	8019a74 <nk_add_value+0x58>
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	2b32      	cmp	r3, #50	; 0x32
 8019a72:	d915      	bls.n	8019aa0 <nk_add_value+0x84>
        struct nk_table *tbl = nk_create_table(ctx);
 8019a74:	68f8      	ldr	r0, [r7, #12]
 8019a76:	f7ff ff2f 	bl	80198d8 <nk_create_table>
 8019a7a:	6178      	str	r0, [r7, #20]
        NK_ASSERT(tbl);
 8019a7c:	697b      	ldr	r3, [r7, #20]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d105      	bne.n	8019a8e <nk_add_value+0x72>
 8019a82:	4b22      	ldr	r3, [pc, #136]	; (8019b0c <nk_add_value+0xf0>)
 8019a84:	4a1e      	ldr	r2, [pc, #120]	; (8019b00 <nk_add_value+0xe4>)
 8019a86:	2140      	movs	r1, #64	; 0x40
 8019a88:	481e      	ldr	r0, [pc, #120]	; (8019b04 <nk_add_value+0xe8>)
 8019a8a:	f002 fee7 	bl	801c85c <__assert_func>
        if (!tbl) return 0;
 8019a8e:	697b      	ldr	r3, [r7, #20]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d101      	bne.n	8019a98 <nk_add_value+0x7c>
 8019a94:	2300      	movs	r3, #0
 8019a96:	e02d      	b.n	8019af4 <nk_add_value+0xd8>
        nk_push_table(win, tbl);
 8019a98:	6979      	ldr	r1, [r7, #20]
 8019a9a:	68b8      	ldr	r0, [r7, #8]
 8019a9c:	f7ff ff44 	bl	8019928 <nk_push_table>
    }
    win->tables->seq = win->seq;
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019aa6:	68ba      	ldr	r2, [r7, #8]
 8019aa8:	6812      	ldr	r2, [r2, #0]
 8019aaa:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019ab2:	68ba      	ldr	r2, [r7, #8]
 8019ab4:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 8019ab8:	6852      	ldr	r2, [r2, #4]
 8019aba:	3202      	adds	r2, #2
 8019abc:	6879      	ldr	r1, [r7, #4]
 8019abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    win->tables->values[win->tables->size] = value;
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019ace:	685b      	ldr	r3, [r3, #4]
 8019ad0:	3334      	adds	r3, #52	; 0x34
 8019ad2:	009b      	lsls	r3, r3, #2
 8019ad4:	4413      	add	r3, r2
 8019ad6:	683a      	ldr	r2, [r7, #0]
 8019ad8:	605a      	str	r2, [r3, #4]
    return &win->tables->values[win->tables->size++];
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8019ae6:	6853      	ldr	r3, [r2, #4]
 8019ae8:	1c58      	adds	r0, r3, #1
 8019aea:	6050      	str	r0, [r2, #4]
 8019aec:	3334      	adds	r3, #52	; 0x34
 8019aee:	009b      	lsls	r3, r3, #2
 8019af0:	440b      	add	r3, r1
 8019af2:	3304      	adds	r3, #4
}
 8019af4:	4618      	mov	r0, r3
 8019af6:	3718      	adds	r7, #24
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}
 8019afc:	08020a70 	.word	0x08020a70
 8019b00:	08021838 	.word	0x08021838
 8019b04:	08020a74 	.word	0x08020a74
 8019b08:	08020a90 	.word	0x08020a90
 8019b0c:	08020a94 	.word	0x08020a94

08019b10 <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 8019b10:	b480      	push	{r7}
 8019b12:	b087      	sub	sp, #28
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	6078      	str	r0, [r7, #4]
 8019b18:	6039      	str	r1, [r7, #0]
    struct nk_table *iter = win->tables;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019b20:	617b      	str	r3, [r7, #20]
    while (iter) {
 8019b22:	e027      	b.n	8019b74 <nk_find_value+0x64>
        unsigned int i = 0;
 8019b24:	2300      	movs	r3, #0
 8019b26:	613b      	str	r3, [r7, #16]
        unsigned int size = iter->size;
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < size; ++i) {
 8019b2e:	2300      	movs	r3, #0
 8019b30:	613b      	str	r3, [r7, #16]
 8019b32:	e015      	b.n	8019b60 <nk_find_value+0x50>
            if (iter->keys[i] == name) {
 8019b34:	697b      	ldr	r3, [r7, #20]
 8019b36:	693a      	ldr	r2, [r7, #16]
 8019b38:	3202      	adds	r2, #2
 8019b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019b3e:	683a      	ldr	r2, [r7, #0]
 8019b40:	429a      	cmp	r2, r3
 8019b42:	d10a      	bne.n	8019b5a <nk_find_value+0x4a>
                iter->seq = win->seq;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681a      	ldr	r2, [r3, #0]
 8019b48:	697b      	ldr	r3, [r7, #20]
 8019b4a:	601a      	str	r2, [r3, #0]
                return &iter->values[i];
 8019b4c:	693b      	ldr	r3, [r7, #16]
 8019b4e:	3334      	adds	r3, #52	; 0x34
 8019b50:	009b      	lsls	r3, r3, #2
 8019b52:	697a      	ldr	r2, [r7, #20]
 8019b54:	4413      	add	r3, r2
 8019b56:	3304      	adds	r3, #4
 8019b58:	e010      	b.n	8019b7c <nk_find_value+0x6c>
        for (i = 0; i < size; ++i) {
 8019b5a:	693b      	ldr	r3, [r7, #16]
 8019b5c:	3301      	adds	r3, #1
 8019b5e:	613b      	str	r3, [r7, #16]
 8019b60:	693a      	ldr	r2, [r7, #16]
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	429a      	cmp	r2, r3
 8019b66:	d3e5      	bcc.n	8019b34 <nk_find_value+0x24>
            }
        } size = NK_VALUE_PAGE_CAPACITY;
 8019b68:	2333      	movs	r3, #51	; 0x33
 8019b6a:	60fb      	str	r3, [r7, #12]
        iter = iter->next;
 8019b6c:	697b      	ldr	r3, [r7, #20]
 8019b6e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8019b72:	617b      	str	r3, [r7, #20]
    while (iter) {
 8019b74:	697b      	ldr	r3, [r7, #20]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d1d4      	bne.n	8019b24 <nk_find_value+0x14>
    }
    return 0;
 8019b7a:	2300      	movs	r3, #0
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	371c      	adds	r7, #28
 8019b80:	46bd      	mov	sp, r7
 8019b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b86:	4770      	bx	lr

08019b88 <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b090      	sub	sp, #64	; 0x40
 8019b8c:	af02      	add	r7, sp, #8
 8019b8e:	61f8      	str	r0, [r7, #28]
 8019b90:	eeb0 6a40 	vmov.f32	s12, s0
 8019b94:	eef0 6a60 	vmov.f32	s13, s1
 8019b98:	eeb0 7a41 	vmov.f32	s14, s2
 8019b9c:	eef0 7a61 	vmov.f32	s15, s3
 8019ba0:	60b9      	str	r1, [r7, #8]
 8019ba2:	607a      	str	r2, [r7, #4]
 8019ba4:	603b      	str	r3, [r7, #0]
 8019ba6:	ed87 6a03 	vstr	s12, [r7, #12]
 8019baa:	edc7 6a04 	vstr	s13, [r7, #16]
 8019bae:	ed87 7a05 	vstr	s14, [r7, #20]
 8019bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d105      	bne.n	8019bc8 <nk_widget_text+0x40>
 8019bbc:	4bb0      	ldr	r3, [pc, #704]	; (8019e80 <nk_widget_text+0x2f8>)
 8019bbe:	4ab1      	ldr	r2, [pc, #708]	; (8019e84 <nk_widget_text+0x2fc>)
 8019bc0:	2111      	movs	r1, #17
 8019bc2:	48b1      	ldr	r0, [pc, #708]	; (8019e88 <nk_widget_text+0x300>)
 8019bc4:	f002 fe4a 	bl	801c85c <__assert_func>
    NK_ASSERT(t);
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d105      	bne.n	8019bda <nk_widget_text+0x52>
 8019bce:	4baf      	ldr	r3, [pc, #700]	; (8019e8c <nk_widget_text+0x304>)
 8019bd0:	4aac      	ldr	r2, [pc, #688]	; (8019e84 <nk_widget_text+0x2fc>)
 8019bd2:	2112      	movs	r1, #18
 8019bd4:	48ac      	ldr	r0, [pc, #688]	; (8019e88 <nk_widget_text+0x300>)
 8019bd6:	f002 fe41 	bl	801c85c <__assert_func>
    if (!o || !t) return;
 8019bda:	69fb      	ldr	r3, [r7, #28]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	f000 81f4 	beq.w	8019fca <nk_widget_text+0x442>
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	f000 81f0 	beq.w	8019fca <nk_widget_text+0x442>

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 8019bea:	ed97 7a06 	vldr	s14, [r7, #24]
 8019bee:	683b      	ldr	r3, [r7, #0]
 8019bf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8019bf4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c00:	d505      	bpl.n	8019c0e <nk_widget_text+0x86>
 8019c02:	683b      	ldr	r3, [r7, #0]
 8019c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019c0c:	e001      	b.n	8019c12 <nk_widget_text+0x8a>
 8019c0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8019c12:	edc7 7a06 	vstr	s15, [r7, #24]
    label.x = 0; label.w = 0;
 8019c16:	f04f 0300 	mov.w	r3, #0
 8019c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8019c1c:	f04f 0300 	mov.w	r3, #0
 8019c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    label.y = b.y + t->padding.y;
 8019c22:	ed97 7a04 	vldr	s14, [r7, #16]
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c30:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 8019c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c36:	ed93 7a01 	vldr	s14, [r3, #4]
 8019c3a:	edd7 6a06 	vldr	s13, [r7, #24]
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019c48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c54:	d503      	bpl.n	8019c5e <nk_widget_text+0xd6>
 8019c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c5c:	e008      	b.n	8019c70 <nk_widget_text+0xe8>
 8019c5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c70:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 8019c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c76:	689b      	ldr	r3, [r3, #8]
 8019c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019c7a:	edd2 7a01 	vldr	s15, [r2, #4]
 8019c7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019c80:	687a      	ldr	r2, [r7, #4]
 8019c82:	68b9      	ldr	r1, [r7, #8]
 8019c84:	eeb0 0a67 	vmov.f32	s0, s15
 8019c88:	6800      	ldr	r0, [r0, #0]
 8019c8a:	4798      	blx	r3
 8019c8c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    text_width += (2.0f * t->padding.x);
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	edd3 7a00 	vldr	s15, [r3]
 8019c96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019c9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ca2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 8019ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ca8:	f003 0301 	and.w	r3, r3, #1
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d025      	beq.n	8019cfc <nk_widget_text+0x174>
        label.x = b.x + t->padding.x;
 8019cb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	edd3 7a00 	vldr	s15, [r3]
 8019cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 8019cc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	edd3 7a00 	vldr	s15, [r3]
 8019ccc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cdc:	dd09      	ble.n	8019cf2 <nk_widget_text+0x16a>
 8019cde:	ed97 7a05 	vldr	s14, [r7, #20]
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	edd3 7a00 	vldr	s15, [r3]
 8019ce8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019cf0:	e001      	b.n	8019cf6 <nk_widget_text+0x16e>
 8019cf2:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019e90 <nk_widget_text+0x308>
 8019cf6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8019cfa:	e0df      	b.n	8019ebc <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 8019cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019cfe:	f003 0302 	and.w	r3, r3, #2
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f000 8086 	beq.w	8019e14 <nk_widget_text+0x28c>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	edd3 7a00 	vldr	s15, [r3]
 8019d0e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8019d12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d26:	dd09      	ble.n	8019d3c <nk_widget_text+0x1b4>
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	edd3 7a00 	vldr	s15, [r3]
 8019d2e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8019d32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d3a:	e001      	b.n	8019d40 <nk_widget_text+0x1b8>
 8019d3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019d40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 8019d44:	ed97 7a03 	vldr	s14, [r7, #12]
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	edd3 7a00 	vldr	s15, [r3]
 8019d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d52:	edd7 6a05 	vldr	s13, [r7, #20]
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	edd3 7a00 	vldr	s15, [r3]
 8019d5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019d60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8019d64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8019d6c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019d70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8019d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d78:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 8019d7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8019d80:	683b      	ldr	r3, [r7, #0]
 8019d82:	edd3 7a00 	vldr	s15, [r3]
 8019d86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d96:	d502      	bpl.n	8019d9e <nk_widget_text+0x216>
 8019d98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019d9c:	e006      	b.n	8019dac <nk_widget_text+0x224>
 8019d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	edd3 7a00 	vldr	s15, [r3]
 8019da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019dac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 8019db0:	ed97 7a03 	vldr	s14, [r7, #12]
 8019db4:	edd7 7a05 	vldr	s15, [r7, #20]
 8019db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019dbc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019dc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dd0:	d506      	bpl.n	8019de0 <nk_widget_text+0x258>
 8019dd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8019dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8019dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019dde:	e005      	b.n	8019dec <nk_widget_text+0x264>
 8019de0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019de4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019dec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if (label.w >= label.x) label.w -= label.x;
 8019df0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019df4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e00:	db5c      	blt.n	8019ebc <nk_widget_text+0x334>
 8019e02:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019e06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8019e12:	e053      	b.n	8019ebc <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 8019e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e16:	f003 0304 	and.w	r3, r3, #4
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	f000 80d7 	beq.w	8019fce <nk_widget_text+0x446>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 8019e20:	ed97 7a03 	vldr	s14, [r7, #12]
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	edd3 7a00 	vldr	s15, [r3]
 8019e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e2e:	edd7 6a03 	vldr	s13, [r7, #12]
 8019e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	edd3 7a00 	vldr	s15, [r3]
 8019e40:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8019e44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019e48:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019e4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e58:	d51c      	bpl.n	8019e94 <nk_widget_text+0x30c>
 8019e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8019e5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	edd3 7a00 	vldr	s15, [r3]
 8019e6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8019e70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e7c:	e011      	b.n	8019ea2 <nk_widget_text+0x31a>
 8019e7e:	bf00      	nop
 8019e80:	08020a98 	.word	0x08020a98
 8019e84:	08021848 	.word	0x08021848
 8019e88:	08020a9c 	.word	0x08020a9c
 8019e8c:	08020ab8 	.word	0x08020ab8
 8019e90:	00000000 	.word	0x00000000
 8019e94:	ed97 7a03 	vldr	s14, [r7, #12]
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	edd3 7a00 	vldr	s15, [r3]
 8019e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ea2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = (float)text_width + 2 * t->padding.x;
 8019ea6:	683b      	ldr	r3, [r7, #0]
 8019ea8:	edd3 7a00 	vldr	s15, [r3]
 8019eac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8019eb0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019eb8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 8019ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ebe:	f003 0310 	and.w	r3, r3, #16
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d04f      	beq.n	8019f66 <nk_widget_text+0x3de>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 8019ec6:	ed97 7a04 	vldr	s14, [r7, #16]
 8019eca:	edd7 6a06 	vldr	s13, [r7, #24]
 8019ece:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019ed2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8019ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019edc:	edd3 6a01 	vldr	s13, [r3, #4]
 8019ee0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019ee4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8019ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019eec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 8019ef0:	edd7 7a06 	vldr	s15, [r7, #24]
 8019ef4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019ef8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019efc:	edd7 6a06 	vldr	s13, [r7, #24]
 8019f00:	edd7 7a06 	vldr	s15, [r7, #24]
 8019f04:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8019f08:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8019f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f0e:	edd3 5a01 	vldr	s11, [r3, #4]
 8019f12:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8019f16:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8019f1a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8019f1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f2a:	d513      	bpl.n	8019f54 <nk_widget_text+0x3cc>
 8019f2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8019f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8019f34:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019f38:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8019f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f3e:	ed93 6a01 	vldr	s12, [r3, #4]
 8019f42:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8019f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8019f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f52:	e005      	b.n	8019f60 <nk_widget_text+0x3d8>
 8019f54:	ed97 7a06 	vldr	s14, [r7, #24]
 8019f58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019f60:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8019f64:	e014      	b.n	8019f90 <nk_widget_text+0x408>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 8019f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f68:	f003 0320 	and.w	r3, r3, #32
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d00f      	beq.n	8019f90 <nk_widget_text+0x408>
        label.y = b.y + b.h - f->height;
 8019f70:	ed97 7a04 	vldr	s14, [r7, #16]
 8019f74:	edd7 7a06 	vldr	s15, [r7, #24]
 8019f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8019f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f86:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = f->height;
 8019f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f8c:	685b      	ldr	r3, [r3, #4]
 8019f8e:	633b      	str	r3, [r7, #48]	; 0x30
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 8019f90:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8019f94:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8019f98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019f9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019fa0:	683b      	ldr	r3, [r7, #0]
 8019fa2:	68db      	ldr	r3, [r3, #12]
 8019fa4:	9301      	str	r3, [sp, #4]
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	689b      	ldr	r3, [r3, #8]
 8019faa:	9300      	str	r3, [sp, #0]
 8019fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019fae:	687a      	ldr	r2, [r7, #4]
 8019fb0:	68b9      	ldr	r1, [r7, #8]
 8019fb2:	eeb0 0a46 	vmov.f32	s0, s12
 8019fb6:	eef0 0a66 	vmov.f32	s1, s13
 8019fba:	eeb0 1a47 	vmov.f32	s2, s14
 8019fbe:	eef0 1a67 	vmov.f32	s3, s15
 8019fc2:	69f8      	ldr	r0, [r7, #28]
 8019fc4:	f7f6 fe4a 	bl	8010c5c <nk_draw_text>
 8019fc8:	e002      	b.n	8019fd0 <nk_widget_text+0x448>
    if (!o || !t) return;
 8019fca:	bf00      	nop
 8019fcc:	e000      	b.n	8019fd0 <nk_widget_text+0x448>
    } else return;
 8019fce:	bf00      	nop
}
 8019fd0:	3738      	adds	r7, #56	; 0x38
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	bd80      	pop	{r7, pc}
 8019fd6:	bf00      	nop

08019fd8 <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b092      	sub	sp, #72	; 0x48
 8019fdc:	af02      	add	r7, sp, #8
 8019fde:	60f8      	str	r0, [r7, #12]
 8019fe0:	60b9      	str	r1, [r7, #8]
 8019fe2:	607a      	str	r2, [r7, #4]
 8019fe4:	603b      	str	r3, [r7, #0]

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d105      	bne.n	8019ff8 <nk_text_colored+0x20>
 8019fec:	4b3e      	ldr	r3, [pc, #248]	; (801a0e8 <nk_text_colored+0x110>)
 8019fee:	4a3f      	ldr	r2, [pc, #252]	; (801a0ec <nk_text_colored+0x114>)
 8019ff0:	2168      	movs	r1, #104	; 0x68
 8019ff2:	483f      	ldr	r0, [pc, #252]	; (801a0f0 <nk_text_colored+0x118>)
 8019ff4:	f002 fc32 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019ffe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a002:	2b00      	cmp	r3, #0
 801a004:	d105      	bne.n	801a012 <nk_text_colored+0x3a>
 801a006:	4b3b      	ldr	r3, [pc, #236]	; (801a0f4 <nk_text_colored+0x11c>)
 801a008:	4a38      	ldr	r2, [pc, #224]	; (801a0ec <nk_text_colored+0x114>)
 801a00a:	2169      	movs	r1, #105	; 0x69
 801a00c:	4838      	ldr	r0, [pc, #224]	; (801a0f0 <nk_text_colored+0x118>)
 801a00e:	f002 fc25 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a018:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a020:	2b00      	cmp	r3, #0
 801a022:	d105      	bne.n	801a030 <nk_text_colored+0x58>
 801a024:	4b34      	ldr	r3, [pc, #208]	; (801a0f8 <nk_text_colored+0x120>)
 801a026:	4a31      	ldr	r2, [pc, #196]	; (801a0ec <nk_text_colored+0x114>)
 801a028:	216a      	movs	r1, #106	; 0x6a
 801a02a:	4831      	ldr	r0, [pc, #196]	; (801a0f0 <nk_text_colored+0x118>)
 801a02c:	f002 fc16 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d053      	beq.n	801a0de <nk_text_colored+0x106>
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a03c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a040:	2b00      	cmp	r3, #0
 801a042:	d04c      	beq.n	801a0de <nk_text_colored+0x106>
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a04a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a052:	2b00      	cmp	r3, #0
 801a054:	d043      	beq.n	801a0de <nk_text_colored+0x106>

    win = ctx->current;
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a05c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a060:	63fb      	str	r3, [r7, #60]	; 0x3c
    style = &ctx->style;
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801a068:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_panel_alloc_space(&bounds, ctx);
 801a06a:	f107 0320 	add.w	r3, r7, #32
 801a06e:	68f9      	ldr	r1, [r7, #12]
 801a070:	4618      	mov	r0, r3
 801a072:	f7f8 fa41 	bl	80124f8 <nk_panel_alloc_space>
    item_padding = style->text.padding;
 801a076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a07c:	3230      	adds	r2, #48	; 0x30
 801a07e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a082:	e883 0003 	stmia.w	r3, {r0, r1}

    text.padding.x = item_padding.x;
 801a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a088:	613b      	str	r3, [r7, #16]
    text.padding.y = item_padding.y;
 801a08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a08c:	617b      	str	r3, [r7, #20]
    text.background = style->window.background;
 801a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a094:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801a098:	61bb      	str	r3, [r7, #24]
    text.text = color;
 801a09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a09c:	61fb      	str	r3, [r7, #28]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 801a09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0a0:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	f107 0210 	add.w	r2, r7, #16
 801a0ac:	ed97 6a08 	vldr	s12, [r7, #32]
 801a0b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801a0b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801a0b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801a0bc:	9301      	str	r3, [sp, #4]
 801a0be:	683b      	ldr	r3, [r7, #0]
 801a0c0:	9300      	str	r3, [sp, #0]
 801a0c2:	4613      	mov	r3, r2
 801a0c4:	687a      	ldr	r2, [r7, #4]
 801a0c6:	68b9      	ldr	r1, [r7, #8]
 801a0c8:	eeb0 0a46 	vmov.f32	s0, s12
 801a0cc:	eef0 0a66 	vmov.f32	s1, s13
 801a0d0:	eeb0 1a47 	vmov.f32	s2, s14
 801a0d4:	eef0 1a67 	vmov.f32	s3, s15
 801a0d8:	f7ff fd56 	bl	8019b88 <nk_widget_text>
 801a0dc:	e000      	b.n	801a0e0 <nk_text_colored+0x108>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801a0de:	bf00      	nop
}
 801a0e0:	3740      	adds	r7, #64	; 0x40
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	bd80      	pop	{r7, pc}
 801a0e6:	bf00      	nop
 801a0e8:	08020abc 	.word	0x08020abc
 801a0ec:	08021858 	.word	0x08021858
 801a0f0:	08020a9c 	.word	0x08020a9c
 801a0f4:	08020ac0 	.word	0x08020ac0
 801a0f8:	08020ad0 	.word	0x08020ad0

0801a0fc <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b086      	sub	sp, #24
 801a100:	af02      	add	r7, sp, #8
 801a102:	60f8      	str	r0, [r7, #12]
 801a104:	60b9      	str	r1, [r7, #8]
 801a106:	607a      	str	r2, [r7, #4]
 801a108:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d106      	bne.n	801a11e <nk_text+0x22>
 801a110:	4b0c      	ldr	r3, [pc, #48]	; (801a144 <nk_text+0x48>)
 801a112:	4a0d      	ldr	r2, [pc, #52]	; (801a148 <nk_text+0x4c>)
 801a114:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a118:	480c      	ldr	r0, [pc, #48]	; (801a14c <nk_text+0x50>)
 801a11a:	f002 fb9f 	bl	801c85c <__assert_func>
    if (!ctx) return;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d00a      	beq.n	801a13a <nk_text+0x3e>
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801a12a:	9300      	str	r3, [sp, #0]
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	687a      	ldr	r2, [r7, #4]
 801a130:	68b9      	ldr	r1, [r7, #8]
 801a132:	68f8      	ldr	r0, [r7, #12]
 801a134:	f7ff ff50 	bl	8019fd8 <nk_text_colored>
 801a138:	e000      	b.n	801a13c <nk_text+0x40>
    if (!ctx) return;
 801a13a:	bf00      	nop
}
 801a13c:	3710      	adds	r7, #16
 801a13e:	46bd      	mov	sp, r7
 801a140:	bd80      	pop	{r7, pc}
 801a142:	bf00      	nop
 801a144:	08020abc 	.word	0x08020abc
 801a148:	08021868 	.word	0x08021868
 801a14c:	08020a9c 	.word	0x08020a9c

0801a150 <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b084      	sub	sp, #16
 801a154:	af00      	add	r7, sp, #0
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	60b9      	str	r1, [r7, #8]
 801a15a:	607a      	str	r2, [r7, #4]
    nk_text(ctx, str, nk_strlen(str), alignment);
 801a15c:	68b8      	ldr	r0, [r7, #8]
 801a15e:	f000 feeb 	bl	801af38 <nk_strlen>
 801a162:	4602      	mov	r2, r0
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	68b9      	ldr	r1, [r7, #8]
 801a168:	68f8      	ldr	r0, [r7, #12]
 801a16a:	f7ff ffc7 	bl	801a0fc <nk_text>
}
 801a16e:	bf00      	nop
 801a170:	3710      	adds	r7, #16
 801a172:	46bd      	mov	sp, r7
 801a174:	bd80      	pop	{r7, pc}
	...

0801a178 <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b0aa      	sub	sp, #168	; 0xa8
 801a17c:	af04      	add	r7, sp, #16
 801a17e:	60f8      	str	r0, [r7, #12]
 801a180:	607a      	str	r2, [r7, #4]
 801a182:	603b      	str	r3, [r7, #0]
 801a184:	460b      	mov	r3, r1
 801a186:	72fb      	strb	r3, [r7, #11]
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 801a188:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a18c:	2200      	movs	r2, #0
 801a18e:	601a      	str	r2, [r3, #0]
 801a190:	605a      	str	r2, [r3, #4]
 801a192:	609a      	str	r2, [r3, #8]
 801a194:	60da      	str	r2, [r3, #12]
    struct nk_rect sym = {0,0,0,0};
 801a196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a19a:	2200      	movs	r2, #0
 801a19c:	601a      	str	r2, [r3, #0]
 801a19e:	605a      	str	r2, [r3, #4]
 801a1a0:	609a      	str	r2, [r3, #8]
 801a1a2:	60da      	str	r2, [r3, #12]
    struct nk_text text;

    nk_flags ws = 0;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	627b      	str	r3, [r7, #36]	; 0x24
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d105      	bne.n	801a1ba <nk_tree_state_base+0x42>
 801a1ae:	4bcd      	ldr	r3, [pc, #820]	; (801a4e4 <nk_tree_state_base+0x36c>)
 801a1b0:	4acd      	ldr	r2, [pc, #820]	; (801a4e8 <nk_tree_state_base+0x370>)
 801a1b2:	211e      	movs	r1, #30
 801a1b4:	48cd      	ldr	r0, [pc, #820]	; (801a4ec <nk_tree_state_base+0x374>)
 801a1b6:	f002 fb51 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a1c0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d105      	bne.n	801a1d4 <nk_tree_state_base+0x5c>
 801a1c8:	4bc9      	ldr	r3, [pc, #804]	; (801a4f0 <nk_tree_state_base+0x378>)
 801a1ca:	4ac7      	ldr	r2, [pc, #796]	; (801a4e8 <nk_tree_state_base+0x370>)
 801a1cc:	211f      	movs	r1, #31
 801a1ce:	48c7      	ldr	r0, [pc, #796]	; (801a4ec <nk_tree_state_base+0x374>)
 801a1d0:	f002 fb44 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a1da:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d105      	bne.n	801a1f2 <nk_tree_state_base+0x7a>
 801a1e6:	4bc3      	ldr	r3, [pc, #780]	; (801a4f4 <nk_tree_state_base+0x37c>)
 801a1e8:	4abf      	ldr	r2, [pc, #764]	; (801a4e8 <nk_tree_state_base+0x370>)
 801a1ea:	2120      	movs	r1, #32
 801a1ec:	48bf      	ldr	r0, [pc, #764]	; (801a4ec <nk_tree_state_base+0x374>)
 801a1ee:	f002 fb35 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d00f      	beq.n	801a218 <nk_tree_state_base+0xa0>
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a1fe:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a202:	2b00      	cmp	r3, #0
 801a204:	d008      	beq.n	801a218 <nk_tree_state_base+0xa0>
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a20c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a214:	2b00      	cmp	r3, #0
 801a216:	d101      	bne.n	801a21c <nk_tree_state_base+0xa4>
        return 0;
 801a218:	2300      	movs	r3, #0
 801a21a:	e2ee      	b.n	801a7fa <nk_tree_state_base+0x682>

    /* cache some data */
    win = ctx->current;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a222:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    layout = win->layout;
 801a22a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    out = &win->buffer;
 801a236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a23a:	3364      	adds	r3, #100	; 0x64
 801a23c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    style = &ctx->style;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801a246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    item_spacing = style->window.spacing;
 801a24a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a24e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a252:	461a      	mov	r2, r3
 801a254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a258:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801a25c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a260:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate header bounds and draw background */
    row_height = style->font->height + 2 * style->tab.padding.y;
 801a264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	ed93 7a01 	vldr	s14, [r3, #4]
 801a26e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a276:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801a27a:	edd3 7a00 	vldr	s15, [r3]
 801a27e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a282:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a286:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    nk_layout_set_min_row_height(ctx, row_height);
 801a28a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801a28e:	68f8      	ldr	r0, [r7, #12]
 801a290:	f7f7 f9b8 	bl	8011604 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 801a294:	2101      	movs	r1, #1
 801a296:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801a29a:	68f8      	ldr	r0, [r7, #12]
 801a29c:	f7f7 fc5c 	bl	8011b58 <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 801a2a0:	68f8      	ldr	r0, [r7, #12]
 801a2a2:	f7f7 fa09 	bl	80116b8 <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 801a2a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a2aa:	68f9      	ldr	r1, [r7, #12]
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	f001 f835 	bl	801b31c <nk_widget>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    if (type == NK_TREE_TAB) {
 801a2b8:	7afb      	ldrb	r3, [r7, #11]
 801a2ba:	2b01      	cmp	r3, #1
 801a2bc:	f040 80af 	bne.w	801a41e <nk_tree_state_base+0x2a6>
        const struct nk_style_item *background = &style->tab.background;
 801a2c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a2c4:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801a2c8:	331c      	adds	r3, #28
 801a2ca:	677b      	str	r3, [r7, #116]	; 0x74

        switch(background->type) {
 801a2cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a2ce:	781b      	ldrb	r3, [r3, #0]
 801a2d0:	2b02      	cmp	r3, #2
 801a2d2:	d021      	beq.n	801a318 <nk_tree_state_base+0x1a0>
 801a2d4:	2b02      	cmp	r3, #2
 801a2d6:	f300 80a9 	bgt.w	801a42c <nk_tree_state_base+0x2b4>
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d036      	beq.n	801a34c <nk_tree_state_base+0x1d4>
 801a2de:	2b01      	cmp	r3, #1
 801a2e0:	f040 80a4 	bne.w	801a42c <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, header, &background->data.image, nk_white);
 801a2e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a2e6:	3304      	adds	r3, #4
 801a2e8:	4a83      	ldr	r2, [pc, #524]	; (801a4f8 <nk_tree_state_base+0x380>)
 801a2ea:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801a2ee:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a2f2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a2f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a2fa:	6812      	ldr	r2, [r2, #0]
 801a2fc:	4619      	mov	r1, r3
 801a2fe:	eeb0 0a46 	vmov.f32	s0, s12
 801a302:	eef0 0a66 	vmov.f32	s1, s13
 801a306:	eeb0 1a47 	vmov.f32	s2, s14
 801a30a:	eef0 1a67 	vmov.f32	s3, s15
 801a30e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801a312:	f7f5 ff87 	bl	8010224 <nk_draw_image>
                break;
 801a316:	e089      	b.n	801a42c <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 801a318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a31a:	3304      	adds	r3, #4
 801a31c:	4a76      	ldr	r2, [pc, #472]	; (801a4f8 <nk_tree_state_base+0x380>)
 801a31e:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801a322:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a326:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a32a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a32e:	6812      	ldr	r2, [r2, #0]
 801a330:	4619      	mov	r1, r3
 801a332:	eeb0 0a46 	vmov.f32	s0, s12
 801a336:	eef0 0a66 	vmov.f32	s1, s13
 801a33a:	eeb0 1a47 	vmov.f32	s2, s14
 801a33e:	eef0 1a67 	vmov.f32	s3, s15
 801a342:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801a346:	f7f6 f85f 	bl	8010408 <nk_draw_nine_slice>
                break;
 801a34a:	e06f      	b.n	801a42c <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, header, 0, style->tab.border_color);
 801a34c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a354:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801a358:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a35c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a360:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a364:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 801a368:	ed9f 2a64 	vldr	s4, [pc, #400]	; 801a4fc <nk_tree_state_base+0x384>
 801a36c:	eeb0 0a46 	vmov.f32	s0, s12
 801a370:	eef0 0a66 	vmov.f32	s1, s13
 801a374:	eeb0 1a47 	vmov.f32	s2, s14
 801a378:	eef0 1a67 	vmov.f32	s3, s15
 801a37c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801a380:	f7f5 fbf6 	bl	800fb70 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801a384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a38c:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801a390:	edd3 5a00 	vldr	s11, [r3]
 801a394:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801a398:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a39c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a3a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a3a4:	eeb0 2a65 	vmov.f32	s4, s11
 801a3a8:	eeb0 0a46 	vmov.f32	s0, s12
 801a3ac:	eef0 0a66 	vmov.f32	s1, s13
 801a3b0:	eeb0 1a47 	vmov.f32	s2, s14
 801a3b4:	eef0 1a67 	vmov.f32	s3, s15
 801a3b8:	f7f8 f968 	bl	801268c <nk_shrink_rect>
 801a3bc:	eeb0 6a40 	vmov.f32	s12, s0
 801a3c0:	eef0 6a60 	vmov.f32	s13, s1
 801a3c4:	eeb0 7a41 	vmov.f32	s14, s2
 801a3c8:	eef0 7a61 	vmov.f32	s15, s3
 801a3cc:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 801a3d0:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 801a3d4:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 801a3d8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 801a3dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a3e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3e4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801a3e8:	edd3 5a00 	vldr	s11, [r3]
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801a3ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a3ee:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 801a3f2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801a3f6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801a3fa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801a3fe:	6859      	ldr	r1, [r3, #4]
 801a400:	eeb0 2a65 	vmov.f32	s4, s11
 801a404:	eeb0 0a46 	vmov.f32	s0, s12
 801a408:	eef0 0a66 	vmov.f32	s1, s13
 801a40c:	eeb0 1a47 	vmov.f32	s2, s14
 801a410:	eef0 1a67 	vmov.f32	s3, s15
 801a414:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801a418:	f7f5 fbaa 	bl	800fb70 <nk_fill_rect>
                break;
 801a41c:	e006      	b.n	801a42c <nk_tree_state_base+0x2b4>
        }
    } else text.background = style->window.background;
 801a41e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a426:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801a42a:	633b      	str	r3, [r7, #48]	; 0x30

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 801a42c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a436:	2b00      	cmp	r3, #0
 801a438:	d101      	bne.n	801a43e <nk_tree_state_base+0x2c6>
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	e000      	b.n	801a440 <nk_tree_state_base+0x2c8>
 801a43e:	2300      	movs	r3, #0
 801a440:	673b      	str	r3, [r7, #112]	; 0x70
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 801a442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a444:	2b00      	cmp	r3, #0
 801a446:	d005      	beq.n	801a454 <nk_tree_state_base+0x2dc>
 801a448:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801a44c:	2b01      	cmp	r3, #1
 801a44e:	d101      	bne.n	801a454 <nk_tree_state_base+0x2dc>
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	e000      	b.n	801a456 <nk_tree_state_base+0x2de>
 801a454:	2300      	movs	r3, #0
 801a456:	673b      	str	r3, [r7, #112]	; 0x70
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 801a458:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801a45c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a460:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a464:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a46c:	2200      	movs	r2, #0
 801a46e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801a470:	eeb0 0a46 	vmov.f32	s0, s12
 801a474:	eef0 0a66 	vmov.f32	s1, s13
 801a478:	eeb0 1a47 	vmov.f32	s2, s14
 801a47c:	eef0 1a67 	vmov.f32	s3, s15
 801a480:	4618      	mov	r0, r3
 801a482:	f7f2 ff3f 	bl	800d304 <nk_button_behavior>
 801a486:	4603      	mov	r3, r0
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d00b      	beq.n	801a4a4 <nk_tree_state_base+0x32c>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 801a48c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	2b01      	cmp	r3, #1
 801a494:	bf14      	ite	ne
 801a496:	2301      	movne	r3, #1
 801a498:	2300      	moveq	r3, #0
 801a49a:	b2db      	uxtb	r3, r3
 801a49c:	461a      	mov	r2, r3
 801a49e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a4a2:	701a      	strb	r2, [r3, #0]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 801a4a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a4a8:	781b      	ldrb	r3, [r3, #0]
 801a4aa:	2b01      	cmp	r3, #1
 801a4ac:	d128      	bne.n	801a500 <nk_tree_state_base+0x388>
        symbol = style->tab.sym_maximize;
 801a4ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a4b6:	f893 3561 	ldrb.w	r3, [r3, #1377]	; 0x561
 801a4ba:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801a4be:	7afb      	ldrb	r3, [r7, #11]
 801a4c0:	2b01      	cmp	r3, #1
 801a4c2:	d106      	bne.n	801a4d2 <nk_tree_state_base+0x35a>
            button = &style->tab.tab_maximize_button;
 801a4c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a4c8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 801a4cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a4d0:	e030      	b.n	801a534 <nk_tree_state_base+0x3bc>
        else button = &style->tab.node_maximize_button;
 801a4d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a4d6:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 801a4da:	3310      	adds	r3, #16
 801a4dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a4e0:	e028      	b.n	801a534 <nk_tree_state_base+0x3bc>
 801a4e2:	bf00      	nop
 801a4e4:	08020b54 	.word	0x08020b54
 801a4e8:	08021874 	.word	0x08021874
 801a4ec:	08020b58 	.word	0x08020b58
 801a4f0:	08020b74 	.word	0x08020b74
 801a4f4:	08020b84 	.word	0x08020b84
 801a4f8:	08021870 	.word	0x08021870
 801a4fc:	00000000 	.word	0x00000000
    } else {
        symbol = style->tab.sym_minimize;
 801a500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a508:	f893 3560 	ldrb.w	r3, [r3, #1376]	; 0x560
 801a50c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801a510:	7afb      	ldrb	r3, [r7, #11]
 801a512:	2b01      	cmp	r3, #1
 801a514:	d107      	bne.n	801a526 <nk_tree_state_base+0x3ae>
            button = &style->tab.tab_minimize_button;
 801a516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a51a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801a51e:	3318      	adds	r3, #24
 801a520:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a524:	e006      	b.n	801a534 <nk_tree_state_base+0x3bc>
        else button = &style->tab.node_minimize_button;
 801a526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a52a:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801a52e:	3308      	adds	r3, #8
 801a530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 801a534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	685b      	ldr	r3, [r3, #4]
 801a53c:	647b      	str	r3, [r7, #68]	; 0x44
 801a53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a540:	643b      	str	r3, [r7, #64]	; 0x40
    sym.y = header.y + style->tab.padding.y;
 801a542:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801a546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a54e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801a552:	edd3 7a00 	vldr	s15, [r3]
 801a556:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a55a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sym.x = header.x + style->tab.padding.x;
 801a55e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801a562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a56a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 801a56e:	edd3 7a00 	vldr	s15, [r3]
 801a572:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a576:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801a57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a57e:	f103 0164 	add.w	r1, r3, #100	; 0x64
        button, 0, style->font);
 801a582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a586:	681b      	ldr	r3, [r3, #0]
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801a588:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 801a58c:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801a590:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801a594:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801a598:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a59c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801a5a0:	9302      	str	r3, [sp, #8]
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	9301      	str	r3, [sp, #4]
 801a5a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a5aa:	9300      	str	r3, [sp, #0]
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	eeb0 0a46 	vmov.f32	s0, s12
 801a5b2:	eef0 0a66 	vmov.f32	s1, s13
 801a5b6:	eeb0 1a47 	vmov.f32	s2, s14
 801a5ba:	eef0 1a67 	vmov.f32	s3, s15
 801a5be:	f7f3 fa33 	bl	800da28 <nk_do_button_symbol>

    if (img) {
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d039      	beq.n	801a63c <nk_tree_state_base+0x4c4>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 801a5c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801a5cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801a5d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a5d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801a5d8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801a5dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5e4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_draw_image(&win->buffer, sym, img, nk_white);
 801a5e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a5ec:	3364      	adds	r3, #100	; 0x64
 801a5ee:	4a85      	ldr	r2, [pc, #532]	; (801a804 <nk_tree_state_base+0x68c>)
 801a5f0:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801a5f4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801a5f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801a5fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a600:	6812      	ldr	r2, [r2, #0]
 801a602:	6879      	ldr	r1, [r7, #4]
 801a604:	eeb0 0a46 	vmov.f32	s0, s12
 801a608:	eef0 0a66 	vmov.f32	s1, s13
 801a60c:	eeb0 1a47 	vmov.f32	s2, s14
 801a610:	eef0 1a67 	vmov.f32	s3, s15
 801a614:	4618      	mov	r0, r3
 801a616:	f7f5 fe05 	bl	8010224 <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 801a61a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	ed93 7a01 	vldr	s14, [r3, #4]
 801a624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a62c:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801a630:	edd3 7a00 	vldr	s15, [r3]
 801a634:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a638:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 801a63c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a640:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801a644:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801a648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a64c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a654:	d506      	bpl.n	801a664 <nk_tree_state_base+0x4ec>
 801a656:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801a65a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801a65e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a662:	e001      	b.n	801a668 <nk_tree_state_base+0x4f0>
 801a664:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801a668:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.x = sym.x + sym.w + item_spacing.x;
 801a66c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801a670:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801a674:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a678:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801a67c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a680:	edc7 7a05 	vstr	s15, [r7, #20]
    label.y = sym.y;
 801a684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a686:	61bb      	str	r3, [r7, #24]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 801a688:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801a68c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801a690:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801a694:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801a698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a6a0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801a6a4:	edd3 7a00 	vldr	s15, [r3]
 801a6a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a6ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a6b0:	edc7 7a07 	vstr	s15, [r7, #28]
    label.h = style->font->height;
 801a6b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	623b      	str	r3, [r7, #32]
    text.text = style->tab.text;
 801a6be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a6c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a6c6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 801a6ca:	637b      	str	r3, [r7, #52]	; 0x34
    text.padding = nk_vec2(0,0);
 801a6cc:	eddf 0a4e 	vldr	s1, [pc, #312]	; 801a808 <nk_tree_state_base+0x690>
 801a6d0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801a808 <nk_tree_state_base+0x690>
 801a6d4:	f7f8 f85a 	bl	801278c <nk_vec2>
 801a6d8:	eeb0 7a40 	vmov.f32	s14, s0
 801a6dc:	eef0 7a60 	vmov.f32	s15, s1
 801a6e0:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801a6e4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801a6e8:	6838      	ldr	r0, [r7, #0]
 801a6ea:	f000 fc25 	bl	801af38 <nk_strlen>
 801a6ee:	4601      	mov	r1, r0
        NK_TEXT_LEFT, style->font);}
 801a6f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a6f4:	681b      	ldr	r3, [r3, #0]
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801a6f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a6fa:	ed97 6a05 	vldr	s12, [r7, #20]
 801a6fe:	edd7 6a06 	vldr	s13, [r7, #24]
 801a702:	ed97 7a07 	vldr	s14, [r7, #28]
 801a706:	edd7 7a08 	vldr	s15, [r7, #32]
 801a70a:	9301      	str	r3, [sp, #4]
 801a70c:	2311      	movs	r3, #17
 801a70e:	9300      	str	r3, [sp, #0]
 801a710:	4613      	mov	r3, r2
 801a712:	460a      	mov	r2, r1
 801a714:	6839      	ldr	r1, [r7, #0]
 801a716:	eeb0 0a46 	vmov.f32	s0, s12
 801a71a:	eef0 0a66 	vmov.f32	s1, s13
 801a71e:	eeb0 1a47 	vmov.f32	s2, s14
 801a722:	eef0 1a67 	vmov.f32	s3, s15
 801a726:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801a72a:	f7ff fa2d 	bl	8019b88 <nk_widget_text>

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 801a72e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a732:	781b      	ldrb	r3, [r3, #0]
 801a734:	2b01      	cmp	r3, #1
 801a736:	d15f      	bne.n	801a7f8 <nk_tree_state_base+0x680>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 801a738:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801a73c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a740:	699b      	ldr	r3, [r3, #24]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	ee07 3a90 	vmov	s15, r3
 801a748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a74c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a758:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801a75c:	edd3 7a00 	vldr	s15, [r3]
 801a760:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a768:	edc3 7a08 	vstr	s15, [r3, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 801a76c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a770:	ed93 7a04 	vldr	s14, [r3, #16]
 801a774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a77c:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801a780:	edd3 7a00 	vldr	s15, [r3]
 801a784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a78c:	d507      	bpl.n	801a79e <nk_tree_state_base+0x626>
 801a78e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a796:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	e002      	b.n	801a7a4 <nk_tree_state_base+0x62c>
 801a79e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a7a2:	691b      	ldr	r3, [r3, #16]
 801a7a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a7a8:	6113      	str	r3, [r2, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 801a7aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a7ae:	ed93 7a04 	vldr	s14, [r3, #16]
 801a7b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a7b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a7ba:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801a7be:	edd3 6a00 	vldr	s13, [r3]
 801a7c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a7c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a7ca:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 801a7ce:	edd3 7a00 	vldr	s15, [r3]
 801a7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a7d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a7da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a7de:	edc3 7a04 	vstr	s15, [r3, #16]
        layout->row.tree_depth++;
 801a7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a7e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a7ea:	1c5a      	adds	r2, r3, #1
 801a7ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a7f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        return nk_true;
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	e000      	b.n	801a7fa <nk_tree_state_base+0x682>
    } else return nk_false;
 801a7f8:	2300      	movs	r3, #0
}
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	3798      	adds	r7, #152	; 0x98
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd80      	pop	{r7, pc}
 801a802:	bf00      	nop
 801a804:	08021870 	.word	0x08021870
 801a808:	00000000 	.word	0x00000000

0801a80c <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b08a      	sub	sp, #40	; 0x28
 801a810:	af02      	add	r7, sp, #8
 801a812:	60f8      	str	r0, [r7, #12]
 801a814:	607a      	str	r2, [r7, #4]
 801a816:	603b      	str	r3, [r7, #0]
 801a818:	460b      	mov	r3, r1
 801a81a:	72fb      	strb	r3, [r7, #11]
    struct nk_window *win = ctx->current;
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a822:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a826:	617b      	str	r3, [r7, #20]
    int title_len = 0;
 801a828:	2300      	movs	r3, #0
 801a82a:	613b      	str	r3, [r7, #16]
    nk_hash tree_hash = 0;
 801a82c:	2300      	movs	r3, #0
 801a82e:	61fb      	str	r3, [r7, #28]
    nk_uint *state = 0;
 801a830:	2300      	movs	r3, #0
 801a832:	61bb      	str	r3, [r7, #24]

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 801a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a836:	2b00      	cmp	r3, #0
 801a838:	d10b      	bne.n	801a852 <nk_tree_base+0x46>
        title_len = (int)nk_strlen(title);
 801a83a:	6838      	ldr	r0, [r7, #0]
 801a83c:	f000 fb7c 	bl	801af38 <nk_strlen>
 801a840:	6138      	str	r0, [r7, #16]
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 801a842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a844:	461a      	mov	r2, r3
 801a846:	6939      	ldr	r1, [r7, #16]
 801a848:	6838      	ldr	r0, [r7, #0]
 801a84a:	f000 fbf5 	bl	801b038 <nk_murmur_hash>
 801a84e:	61f8      	str	r0, [r7, #28]
 801a850:	e006      	b.n	801a860 <nk_tree_base+0x54>
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 801a852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a854:	461a      	mov	r2, r3
 801a856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a85a:	f000 fbed 	bl	801b038 <nk_murmur_hash>
 801a85e:	61f8      	str	r0, [r7, #28]
    state = nk_find_value(win, tree_hash);
 801a860:	69f9      	ldr	r1, [r7, #28]
 801a862:	6978      	ldr	r0, [r7, #20]
 801a864:	f7ff f954 	bl	8019b10 <nk_find_value>
 801a868:	61b8      	str	r0, [r7, #24]
    if (!state) {
 801a86a:	69bb      	ldr	r3, [r7, #24]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d10a      	bne.n	801a886 <nk_tree_base+0x7a>
        state = nk_add_value(ctx, win, tree_hash, 0);
 801a870:	2300      	movs	r3, #0
 801a872:	69fa      	ldr	r2, [r7, #28]
 801a874:	6979      	ldr	r1, [r7, #20]
 801a876:	68f8      	ldr	r0, [r7, #12]
 801a878:	f7ff f8d0 	bl	8019a1c <nk_add_value>
 801a87c:	61b8      	str	r0, [r7, #24]
        *state = initial_state;
 801a87e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a882:	69bb      	ldr	r3, [r7, #24]
 801a884:	601a      	str	r2, [r3, #0]
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 801a886:	7af9      	ldrb	r1, [r7, #11]
 801a888:	69bb      	ldr	r3, [r7, #24]
 801a88a:	9300      	str	r3, [sp, #0]
 801a88c:	683b      	ldr	r3, [r7, #0]
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	68f8      	ldr	r0, [r7, #12]
 801a892:	f7ff fc71 	bl	801a178 <nk_tree_state_base>
 801a896:	4603      	mov	r3, r0
}
 801a898:	4618      	mov	r0, r3
 801a89a:	3720      	adds	r7, #32
 801a89c:	46bd      	mov	sp, r7
 801a89e:	bd80      	pop	{r7, pc}

0801a8a0 <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 801a8a0:	b580      	push	{r7, lr}
 801a8a2:	b084      	sub	sp, #16
 801a8a4:	af00      	add	r7, sp, #0
 801a8a6:	6078      	str	r0, [r7, #4]
    struct nk_window *win = 0;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	60fb      	str	r3, [r7, #12]
    struct nk_panel *layout = 0;
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	60bb      	str	r3, [r7, #8]

    NK_ASSERT(ctx);
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d105      	bne.n	801a8c2 <nk_tree_state_pop+0x22>
 801a8b6:	4b43      	ldr	r3, [pc, #268]	; (801a9c4 <nk_tree_state_pop+0x124>)
 801a8b8:	4a43      	ldr	r2, [pc, #268]	; (801a9c8 <nk_tree_state_pop+0x128>)
 801a8ba:	21a2      	movs	r1, #162	; 0xa2
 801a8bc:	4843      	ldr	r0, [pc, #268]	; (801a9cc <nk_tree_state_pop+0x12c>)
 801a8be:	f001 ffcd 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a8c8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d105      	bne.n	801a8dc <nk_tree_state_pop+0x3c>
 801a8d0:	4b3f      	ldr	r3, [pc, #252]	; (801a9d0 <nk_tree_state_pop+0x130>)
 801a8d2:	4a3d      	ldr	r2, [pc, #244]	; (801a9c8 <nk_tree_state_pop+0x128>)
 801a8d4:	21a3      	movs	r1, #163	; 0xa3
 801a8d6:	483d      	ldr	r0, [pc, #244]	; (801a9cc <nk_tree_state_pop+0x12c>)
 801a8d8:	f001 ffc0 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a8e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a8e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d105      	bne.n	801a8fa <nk_tree_state_pop+0x5a>
 801a8ee:	4b39      	ldr	r3, [pc, #228]	; (801a9d4 <nk_tree_state_pop+0x134>)
 801a8f0:	4a35      	ldr	r2, [pc, #212]	; (801a9c8 <nk_tree_state_pop+0x128>)
 801a8f2:	21a4      	movs	r1, #164	; 0xa4
 801a8f4:	4835      	ldr	r0, [pc, #212]	; (801a9cc <nk_tree_state_pop+0x12c>)
 801a8f6:	f001 ffb1 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d05c      	beq.n	801a9ba <nk_tree_state_pop+0x11a>
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a906:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d055      	beq.n	801a9ba <nk_tree_state_pop+0x11a>
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a914:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d04c      	beq.n	801a9ba <nk_tree_state_pop+0x11a>
        return;

    win = ctx->current;
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a926:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801a92a:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a932:	60bb      	str	r3, [r7, #8]
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	ed93 7a08 	vldr	s14, [r3, #32]
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a940:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801a944:	edd3 6a00 	vldr	s13, [r3]
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	699b      	ldr	r3, [r3, #24]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	ee07 3a90 	vmov	s15, r3
 801a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a95a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	ed93 7a04 	vldr	s14, [r3, #16]
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a970:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801a974:	edd3 6a00 	vldr	s13, [r3]
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a97e:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801a982:	edd3 7a00 	vldr	s15, [r3]
 801a986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a98e:	68bb      	ldr	r3, [r7, #8]
 801a990:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d105      	bne.n	801a9aa <nk_tree_state_pop+0x10a>
 801a99e:	4b0e      	ldr	r3, [pc, #56]	; (801a9d8 <nk_tree_state_pop+0x138>)
 801a9a0:	4a09      	ldr	r2, [pc, #36]	; (801a9c8 <nk_tree_state_pop+0x128>)
 801a9a2:	21ac      	movs	r1, #172	; 0xac
 801a9a4:	4809      	ldr	r0, [pc, #36]	; (801a9cc <nk_tree_state_pop+0x12c>)
 801a9a6:	f001 ff59 	bl	801c85c <__assert_func>
    layout->row.tree_depth--;
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a9b0:	1e5a      	subs	r2, r3, #1
 801a9b2:	68bb      	ldr	r3, [r7, #8]
 801a9b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 801a9b8:	e000      	b.n	801a9bc <nk_tree_state_pop+0x11c>
        return;
 801a9ba:	bf00      	nop
}
 801a9bc:	3710      	adds	r7, #16
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}
 801a9c2:	bf00      	nop
 801a9c4:	08020b54 	.word	0x08020b54
 801a9c8:	08021888 	.word	0x08021888
 801a9cc:	08020b58 	.word	0x08020b58
 801a9d0:	08020b74 	.word	0x08020b74
 801a9d4:	08020b84 	.word	0x08020b84
 801a9d8:	08020b9c 	.word	0x08020b9c

0801a9dc <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b088      	sub	sp, #32
 801a9e0:	af04      	add	r7, sp, #16
 801a9e2:	60f8      	str	r0, [r7, #12]
 801a9e4:	607a      	str	r2, [r7, #4]
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	460b      	mov	r3, r1
 801a9ea:	72fb      	strb	r3, [r7, #11]
 801a9ec:	4613      	mov	r3, r2
 801a9ee:	72bb      	strb	r3, [r7, #10]
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 801a9f0:	7af9      	ldrb	r1, [r7, #11]
 801a9f2:	6a3b      	ldr	r3, [r7, #32]
 801a9f4:	9303      	str	r3, [sp, #12]
 801a9f6:	69fb      	ldr	r3, [r7, #28]
 801a9f8:	9302      	str	r3, [sp, #8]
 801a9fa:	69bb      	ldr	r3, [r7, #24]
 801a9fc:	9301      	str	r3, [sp, #4]
 801a9fe:	7abb      	ldrb	r3, [r7, #10]
 801aa00:	9300      	str	r3, [sp, #0]
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	2200      	movs	r2, #0
 801aa06:	68f8      	ldr	r0, [r7, #12]
 801aa08:	f7ff ff00 	bl	801a80c <nk_tree_base>
 801aa0c:	4603      	mov	r3, r0
}
 801aa0e:	4618      	mov	r0, r3
 801aa10:	3710      	adds	r7, #16
 801aa12:	46bd      	mov	sp, r7
 801aa14:	bd80      	pop	{r7, pc}

0801aa16 <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 801aa16:	b580      	push	{r7, lr}
 801aa18:	b082      	sub	sp, #8
 801aa1a:	af00      	add	r7, sp, #0
 801aa1c:	6078      	str	r0, [r7, #4]
    nk_tree_state_pop(ctx);
 801aa1e:	6878      	ldr	r0, [r7, #4]
 801aa20:	f7ff ff3e 	bl	801a8a0 <nk_tree_state_pop>
}
 801aa24:	bf00      	nop
 801aa26:	3708      	adds	r7, #8
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	bd80      	pop	{r7, pc}

0801aa2c <nk_utf_validate>:
NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};
NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

NK_INTERN int
nk_utf_validate(nk_rune *u, int i)
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b082      	sub	sp, #8
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	6078      	str	r0, [r7, #4]
 801aa34:	6039      	str	r1, [r7, #0]
    NK_ASSERT(u);
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d105      	bne.n	801aa48 <nk_utf_validate+0x1c>
 801aa3c:	4b1e      	ldr	r3, [pc, #120]	; (801aab8 <nk_utf_validate+0x8c>)
 801aa3e:	4a1f      	ldr	r2, [pc, #124]	; (801aabc <nk_utf_validate+0x90>)
 801aa40:	2111      	movs	r1, #17
 801aa42:	481f      	ldr	r0, [pc, #124]	; (801aac0 <nk_utf_validate+0x94>)
 801aa44:	f001 ff0a 	bl	801c85c <__assert_func>
    if (!u) return 0;
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d101      	bne.n	801aa52 <nk_utf_validate+0x26>
 801aa4e:	2300      	movs	r3, #0
 801aa50:	e02d      	b.n	801aaae <nk_utf_validate+0x82>
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801aa52:	4a1c      	ldr	r2, [pc, #112]	; (801aac4 <nk_utf_validate+0x98>)
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	429a      	cmp	r2, r3
 801aa60:	d812      	bhi.n	801aa88 <nk_utf_validate+0x5c>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681a      	ldr	r2, [r3, #0]
 801aa66:	4918      	ldr	r1, [pc, #96]	; (801aac8 <nk_utf_validate+0x9c>)
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801aa6e:	429a      	cmp	r2, r3
 801aa70:	d20a      	bcs.n	801aa88 <nk_utf_validate+0x5c>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	681b      	ldr	r3, [r3, #0]
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801aa76:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801aa7a:	d309      	bcc.n	801aa90 <nk_utf_validate+0x64>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	f64d 72fe 	movw	r2, #57342	; 0xdffe
 801aa84:	4293      	cmp	r3, r2
 801aa86:	d803      	bhi.n	801aa90 <nk_utf_validate+0x64>
            *u = NK_UTF_INVALID;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801aa8e:	601a      	str	r2, [r3, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 801aa90:	2301      	movs	r3, #1
 801aa92:	603b      	str	r3, [r7, #0]
 801aa94:	e002      	b.n	801aa9c <nk_utf_validate+0x70>
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	3301      	adds	r3, #1
 801aa9a:	603b      	str	r3, [r7, #0]
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	4909      	ldr	r1, [pc, #36]	; (801aac8 <nk_utf_validate+0x9c>)
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d8f4      	bhi.n	801aa96 <nk_utf_validate+0x6a>
    return i;
 801aaac:	683b      	ldr	r3, [r7, #0]
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	3708      	adds	r7, #8
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}
 801aab6:	bf00      	nop
 801aab8:	08020bb4 	.word	0x08020bb4
 801aabc:	080218d4 	.word	0x080218d4
 801aac0:	08020bb8 	.word	0x08020bb8
 801aac4:	080218ac 	.word	0x080218ac
 801aac8:	080218c0 	.word	0x080218c0

0801aacc <nk_utf_decode_byte>:
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	4603      	mov	r3, r0
 801aad4:	6039      	str	r1, [r7, #0]
 801aad6:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(i);
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d105      	bne.n	801aaea <nk_utf_decode_byte+0x1e>
 801aade:	4b1b      	ldr	r3, [pc, #108]	; (801ab4c <nk_utf_decode_byte+0x80>)
 801aae0:	4a1b      	ldr	r2, [pc, #108]	; (801ab50 <nk_utf_decode_byte+0x84>)
 801aae2:	211c      	movs	r1, #28
 801aae4:	481b      	ldr	r0, [pc, #108]	; (801ab54 <nk_utf_decode_byte+0x88>)
 801aae6:	f001 feb9 	bl	801c85c <__assert_func>
    if (!i) return 0;
 801aaea:	683b      	ldr	r3, [r7, #0]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d101      	bne.n	801aaf4 <nk_utf_decode_byte+0x28>
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	e027      	b.n	801ab44 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	601a      	str	r2, [r3, #0]
 801aafa:	e01e      	b.n	801ab3a <nk_utf_decode_byte+0x6e>
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	4a15      	ldr	r2, [pc, #84]	; (801ab58 <nk_utf_decode_byte+0x8c>)
 801ab02:	5cd2      	ldrb	r2, [r2, r3]
 801ab04:	79fb      	ldrb	r3, [r7, #7]
 801ab06:	4013      	ands	r3, r2
 801ab08:	b2da      	uxtb	r2, r3
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	4913      	ldr	r1, [pc, #76]	; (801ab5c <nk_utf_decode_byte+0x90>)
 801ab10:	5ccb      	ldrb	r3, [r1, r3]
 801ab12:	429a      	cmp	r2, r3
 801ab14:	d10c      	bne.n	801ab30 <nk_utf_decode_byte+0x64>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 801ab16:	683b      	ldr	r3, [r7, #0]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	4a0f      	ldr	r2, [pc, #60]	; (801ab58 <nk_utf_decode_byte+0x8c>)
 801ab1c:	5cd3      	ldrb	r3, [r2, r3]
 801ab1e:	b25b      	sxtb	r3, r3
 801ab20:	43db      	mvns	r3, r3
 801ab22:	b25a      	sxtb	r2, r3
 801ab24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ab28:	4013      	ands	r3, r2
 801ab2a:	b25b      	sxtb	r3, r3
 801ab2c:	b2db      	uxtb	r3, r3
 801ab2e:	e009      	b.n	801ab44 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	1c5a      	adds	r2, r3, #1
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	601a      	str	r2, [r3, #0]
 801ab3a:	683b      	ldr	r3, [r7, #0]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	2b04      	cmp	r3, #4
 801ab40:	dddc      	ble.n	801aafc <nk_utf_decode_byte+0x30>
    }
    return 0;
 801ab42:	2300      	movs	r3, #0
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	3708      	adds	r7, #8
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}
 801ab4c:	08020bd4 	.word	0x08020bd4
 801ab50:	080218e4 	.word	0x080218e4
 801ab54:	08020bb8 	.word	0x08020bb8
 801ab58:	080218a4 	.word	0x080218a4
 801ab5c:	0802189c 	.word	0x0802189c

0801ab60 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 801ab60:	b590      	push	{r4, r7, lr}
 801ab62:	b08b      	sub	sp, #44	; 0x2c
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	60f8      	str	r0, [r7, #12]
 801ab68:	60b9      	str	r1, [r7, #8]
 801ab6a:	607a      	str	r2, [r7, #4]
    int i, j, len, type=0;
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	617b      	str	r3, [r7, #20]
    nk_rune udecoded;

    NK_ASSERT(c);
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d105      	bne.n	801ab82 <nk_utf_decode+0x22>
 801ab76:	4b35      	ldr	r3, [pc, #212]	; (801ac4c <nk_utf_decode+0xec>)
 801ab78:	4a35      	ldr	r2, [pc, #212]	; (801ac50 <nk_utf_decode+0xf0>)
 801ab7a:	212a      	movs	r1, #42	; 0x2a
 801ab7c:	4835      	ldr	r0, [pc, #212]	; (801ac54 <nk_utf_decode+0xf4>)
 801ab7e:	f001 fe6d 	bl	801c85c <__assert_func>
    NK_ASSERT(u);
 801ab82:	68bb      	ldr	r3, [r7, #8]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d105      	bne.n	801ab94 <nk_utf_decode+0x34>
 801ab88:	4b33      	ldr	r3, [pc, #204]	; (801ac58 <nk_utf_decode+0xf8>)
 801ab8a:	4a31      	ldr	r2, [pc, #196]	; (801ac50 <nk_utf_decode+0xf0>)
 801ab8c:	212b      	movs	r1, #43	; 0x2b
 801ab8e:	4831      	ldr	r0, [pc, #196]	; (801ac54 <nk_utf_decode+0xf4>)
 801ab90:	f001 fe64 	bl	801c85c <__assert_func>

    if (!c || !u) return 0;
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d002      	beq.n	801aba0 <nk_utf_decode+0x40>
 801ab9a:	68bb      	ldr	r3, [r7, #8]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d101      	bne.n	801aba4 <nk_utf_decode+0x44>
 801aba0:	2300      	movs	r3, #0
 801aba2:	e04f      	b.n	801ac44 <nk_utf_decode+0xe4>
    if (!clen) return 0;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d101      	bne.n	801abae <nk_utf_decode+0x4e>
 801abaa:	2300      	movs	r3, #0
 801abac:	e04a      	b.n	801ac44 <nk_utf_decode+0xe4>
    *u = NK_UTF_INVALID;
 801abae:	68bb      	ldr	r3, [r7, #8]
 801abb0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801abb4:	601a      	str	r2, [r3, #0]

    udecoded = nk_utf_decode_byte(c[0], &len);
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	781b      	ldrb	r3, [r3, #0]
 801abba:	f107 0218 	add.w	r2, r7, #24
 801abbe:	4611      	mov	r1, r2
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7ff ff83 	bl	801aacc <nk_utf_decode_byte>
 801abc6:	61f8      	str	r0, [r7, #28]
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 801abc8:	69bb      	ldr	r3, [r7, #24]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	dd02      	ble.n	801abd4 <nk_utf_decode+0x74>
 801abce:	69bb      	ldr	r3, [r7, #24]
 801abd0:	2b03      	cmp	r3, #3
 801abd2:	dd01      	ble.n	801abd8 <nk_utf_decode+0x78>
        return 1;
 801abd4:	2301      	movs	r3, #1
 801abd6:	e035      	b.n	801ac44 <nk_utf_decode+0xe4>

    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801abd8:	2301      	movs	r3, #1
 801abda:	627b      	str	r3, [r7, #36]	; 0x24
 801abdc:	2301      	movs	r3, #1
 801abde:	623b      	str	r3, [r7, #32]
 801abe0:	e019      	b.n	801ac16 <nk_utf_decode+0xb6>
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 801abe2:	69fb      	ldr	r3, [r7, #28]
 801abe4:	019c      	lsls	r4, r3, #6
 801abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe8:	68fa      	ldr	r2, [r7, #12]
 801abea:	4413      	add	r3, r2
 801abec:	781b      	ldrb	r3, [r3, #0]
 801abee:	f107 0214 	add.w	r2, r7, #20
 801abf2:	4611      	mov	r1, r2
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7ff ff69 	bl	801aacc <nk_utf_decode_byte>
 801abfa:	4603      	mov	r3, r0
 801abfc:	4323      	orrs	r3, r4
 801abfe:	61fb      	str	r3, [r7, #28]
        if (type != 0)
 801ac00:	697b      	ldr	r3, [r7, #20]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d001      	beq.n	801ac0a <nk_utf_decode+0xaa>
            return j;
 801ac06:	6a3b      	ldr	r3, [r7, #32]
 801ac08:	e01c      	b.n	801ac44 <nk_utf_decode+0xe4>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801ac0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac0c:	3301      	adds	r3, #1
 801ac0e:	627b      	str	r3, [r7, #36]	; 0x24
 801ac10:	6a3b      	ldr	r3, [r7, #32]
 801ac12:	3301      	adds	r3, #1
 801ac14:	623b      	str	r3, [r7, #32]
 801ac16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	da03      	bge.n	801ac26 <nk_utf_decode+0xc6>
 801ac1e:	69bb      	ldr	r3, [r7, #24]
 801ac20:	6a3a      	ldr	r2, [r7, #32]
 801ac22:	429a      	cmp	r2, r3
 801ac24:	dbdd      	blt.n	801abe2 <nk_utf_decode+0x82>
    }
    if (j < len)
 801ac26:	69bb      	ldr	r3, [r7, #24]
 801ac28:	6a3a      	ldr	r2, [r7, #32]
 801ac2a:	429a      	cmp	r2, r3
 801ac2c:	da01      	bge.n	801ac32 <nk_utf_decode+0xd2>
        return 0;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	e008      	b.n	801ac44 <nk_utf_decode+0xe4>
    *u = udecoded;
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	69fa      	ldr	r2, [r7, #28]
 801ac36:	601a      	str	r2, [r3, #0]
    nk_utf_validate(u, len);
 801ac38:	69bb      	ldr	r3, [r7, #24]
 801ac3a:	4619      	mov	r1, r3
 801ac3c:	68b8      	ldr	r0, [r7, #8]
 801ac3e:	f7ff fef5 	bl	801aa2c <nk_utf_validate>
    return len;
 801ac42:	69bb      	ldr	r3, [r7, #24]
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	372c      	adds	r7, #44	; 0x2c
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd90      	pop	{r4, r7, pc}
 801ac4c:	08020bd8 	.word	0x08020bd8
 801ac50:	080218f8 	.word	0x080218f8
 801ac54:	08020bb8 	.word	0x08020bb8
 801ac58:	08020bb4 	.word	0x08020bb4

0801ac5c <nk_memcopy>:

//#ifndef NK_MEMCPY
//#define NK_MEMCPY nk_memcopy
NK_LIB void*
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
 801ac5c:	b480      	push	{r7}
 801ac5e:	b089      	sub	sp, #36	; 0x24
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	60f8      	str	r0, [r7, #12]
 801ac64:	60b9      	str	r1, [r7, #8]
 801ac66:	607a      	str	r2, [r7, #4]
    nk_ptr t;
    char *dst = (char*)dst0;
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	61bb      	str	r3, [r7, #24]
    const char *src = (const char*)src0;
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	617b      	str	r3, [r7, #20]
    if (length == 0 || dst == src)
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	f000 80c7 	beq.w	801ae06 <nk_memcopy+0x1aa>
 801ac78:	69ba      	ldr	r2, [r7, #24]
 801ac7a:	697b      	ldr	r3, [r7, #20]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	f000 80c2 	beq.w	801ae06 <nk_memcopy+0x1aa>
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 801ac82:	69ba      	ldr	r2, [r7, #24]
 801ac84:	697b      	ldr	r3, [r7, #20]
 801ac86:	429a      	cmp	r2, r3
 801ac88:	d259      	bcs.n	801ad3e <nk_memcopy+0xe2>
        t = (nk_ptr)src; /* only need low bits */
 801ac8a:	697b      	ldr	r3, [r7, #20]
 801ac8c:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801ac8e:	69ba      	ldr	r2, [r7, #24]
 801ac90:	69fb      	ldr	r3, [r7, #28]
 801ac92:	4313      	orrs	r3, r2
 801ac94:	f003 0303 	and.w	r3, r3, #3
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d024      	beq.n	801ace6 <nk_memcopy+0x8a>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 801ac9c:	69ba      	ldr	r2, [r7, #24]
 801ac9e:	69fb      	ldr	r3, [r7, #28]
 801aca0:	4053      	eors	r3, r2
 801aca2:	f003 0303 	and.w	r3, r3, #3
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d102      	bne.n	801acb0 <nk_memcopy+0x54>
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	2b03      	cmp	r3, #3
 801acae:	d802      	bhi.n	801acb6 <nk_memcopy+0x5a>
                t = length;
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	61fb      	str	r3, [r7, #28]
 801acb4:	e005      	b.n	801acc2 <nk_memcopy+0x66>
            else
                t = nk_wsize - (t & nk_wmask);
 801acb6:	69fb      	ldr	r3, [r7, #28]
 801acb8:	f003 0303 	and.w	r3, r3, #3
 801acbc:	f1c3 0304 	rsb	r3, r3, #4
 801acc0:	61fb      	str	r3, [r7, #28]
            length -= t;
 801acc2:	687a      	ldr	r2, [r7, #4]
 801acc4:	69fb      	ldr	r3, [r7, #28]
 801acc6:	1ad3      	subs	r3, r2, r3
 801acc8:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*dst++ = *src++);
 801acca:	697a      	ldr	r2, [r7, #20]
 801accc:	1c53      	adds	r3, r2, #1
 801acce:	617b      	str	r3, [r7, #20]
 801acd0:	69bb      	ldr	r3, [r7, #24]
 801acd2:	1c59      	adds	r1, r3, #1
 801acd4:	61b9      	str	r1, [r7, #24]
 801acd6:	7812      	ldrb	r2, [r2, #0]
 801acd8:	701a      	strb	r2, [r3, #0]
 801acda:	69fb      	ldr	r3, [r7, #28]
 801acdc:	3b01      	subs	r3, #1
 801acde:	61fb      	str	r3, [r7, #28]
 801ace0:	69fb      	ldr	r3, [r7, #28]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d1f1      	bne.n	801acca <nk_memcopy+0x6e>
        }
        t = length / nk_wsize;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	089b      	lsrs	r3, r3, #2
 801acea:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 801acec:	69fb      	ldr	r3, [r7, #28]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d00f      	beq.n	801ad12 <nk_memcopy+0xb6>
 801acf2:	697b      	ldr	r3, [r7, #20]
 801acf4:	681a      	ldr	r2, [r3, #0]
 801acf6:	69bb      	ldr	r3, [r7, #24]
 801acf8:	601a      	str	r2, [r3, #0]
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	3304      	adds	r3, #4
 801acfe:	617b      	str	r3, [r7, #20]
 801ad00:	69bb      	ldr	r3, [r7, #24]
 801ad02:	3304      	adds	r3, #4
 801ad04:	61bb      	str	r3, [r7, #24]
 801ad06:	69fb      	ldr	r3, [r7, #28]
 801ad08:	3b01      	subs	r3, #1
 801ad0a:	61fb      	str	r3, [r7, #28]
 801ad0c:	69fb      	ldr	r3, [r7, #28]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d1ef      	bne.n	801acf2 <nk_memcopy+0x96>
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	f003 0303 	and.w	r3, r3, #3
 801ad18:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*dst++ = *src++);
 801ad1a:	69fb      	ldr	r3, [r7, #28]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d075      	beq.n	801ae0c <nk_memcopy+0x1b0>
 801ad20:	697a      	ldr	r2, [r7, #20]
 801ad22:	1c53      	adds	r3, r2, #1
 801ad24:	617b      	str	r3, [r7, #20]
 801ad26:	69bb      	ldr	r3, [r7, #24]
 801ad28:	1c59      	adds	r1, r3, #1
 801ad2a:	61b9      	str	r1, [r7, #24]
 801ad2c:	7812      	ldrb	r2, [r2, #0]
 801ad2e:	701a      	strb	r2, [r3, #0]
 801ad30:	69fb      	ldr	r3, [r7, #28]
 801ad32:	3b01      	subs	r3, #1
 801ad34:	61fb      	str	r3, [r7, #28]
 801ad36:	69fb      	ldr	r3, [r7, #28]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d1f1      	bne.n	801ad20 <nk_memcopy+0xc4>
 801ad3c:	e066      	b.n	801ae0c <nk_memcopy+0x1b0>
    } else {
        src += length;
 801ad3e:	697a      	ldr	r2, [r7, #20]
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	4413      	add	r3, r2
 801ad44:	617b      	str	r3, [r7, #20]
        dst += length;
 801ad46:	69ba      	ldr	r2, [r7, #24]
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	4413      	add	r3, r2
 801ad4c:	61bb      	str	r3, [r7, #24]
        t = (nk_ptr)src;
 801ad4e:	697b      	ldr	r3, [r7, #20]
 801ad50:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801ad52:	69ba      	ldr	r2, [r7, #24]
 801ad54:	69fb      	ldr	r3, [r7, #28]
 801ad56:	4313      	orrs	r3, r2
 801ad58:	f003 0303 	and.w	r3, r3, #3
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d024      	beq.n	801adaa <nk_memcopy+0x14e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 801ad60:	69ba      	ldr	r2, [r7, #24]
 801ad62:	69fb      	ldr	r3, [r7, #28]
 801ad64:	4053      	eors	r3, r2
 801ad66:	f003 0303 	and.w	r3, r3, #3
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d102      	bne.n	801ad74 <nk_memcopy+0x118>
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	2b04      	cmp	r3, #4
 801ad72:	d802      	bhi.n	801ad7a <nk_memcopy+0x11e>
                t = length;
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	61fb      	str	r3, [r7, #28]
 801ad78:	e003      	b.n	801ad82 <nk_memcopy+0x126>
            else
                t &= nk_wmask;
 801ad7a:	69fb      	ldr	r3, [r7, #28]
 801ad7c:	f003 0303 	and.w	r3, r3, #3
 801ad80:	61fb      	str	r3, [r7, #28]
            length -= t;
 801ad82:	687a      	ldr	r2, [r7, #4]
 801ad84:	69fb      	ldr	r3, [r7, #28]
 801ad86:	1ad3      	subs	r3, r2, r3
 801ad88:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*--dst = *--src);
 801ad8a:	697b      	ldr	r3, [r7, #20]
 801ad8c:	3b01      	subs	r3, #1
 801ad8e:	617b      	str	r3, [r7, #20]
 801ad90:	69bb      	ldr	r3, [r7, #24]
 801ad92:	3b01      	subs	r3, #1
 801ad94:	61bb      	str	r3, [r7, #24]
 801ad96:	697b      	ldr	r3, [r7, #20]
 801ad98:	781a      	ldrb	r2, [r3, #0]
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	701a      	strb	r2, [r3, #0]
 801ad9e:	69fb      	ldr	r3, [r7, #28]
 801ada0:	3b01      	subs	r3, #1
 801ada2:	61fb      	str	r3, [r7, #28]
 801ada4:	69fb      	ldr	r3, [r7, #28]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d1ef      	bne.n	801ad8a <nk_memcopy+0x12e>
        }
        t = length / nk_wsize;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	089b      	lsrs	r3, r3, #2
 801adae:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 801adb0:	69fb      	ldr	r3, [r7, #28]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d00f      	beq.n	801add6 <nk_memcopy+0x17a>
 801adb6:	697b      	ldr	r3, [r7, #20]
 801adb8:	3b04      	subs	r3, #4
 801adba:	617b      	str	r3, [r7, #20]
 801adbc:	69bb      	ldr	r3, [r7, #24]
 801adbe:	3b04      	subs	r3, #4
 801adc0:	61bb      	str	r3, [r7, #24]
 801adc2:	697b      	ldr	r3, [r7, #20]
 801adc4:	681a      	ldr	r2, [r3, #0]
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	601a      	str	r2, [r3, #0]
 801adca:	69fb      	ldr	r3, [r7, #28]
 801adcc:	3b01      	subs	r3, #1
 801adce:	61fb      	str	r3, [r7, #28]
 801add0:	69fb      	ldr	r3, [r7, #28]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d1ef      	bne.n	801adb6 <nk_memcopy+0x15a>
            *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);
        t = length & nk_wmask;
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	f003 0303 	and.w	r3, r3, #3
 801addc:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*--dst = *--src);
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d012      	beq.n	801ae0a <nk_memcopy+0x1ae>
 801ade4:	697b      	ldr	r3, [r7, #20]
 801ade6:	3b01      	subs	r3, #1
 801ade8:	617b      	str	r3, [r7, #20]
 801adea:	69bb      	ldr	r3, [r7, #24]
 801adec:	3b01      	subs	r3, #1
 801adee:	61bb      	str	r3, [r7, #24]
 801adf0:	697b      	ldr	r3, [r7, #20]
 801adf2:	781a      	ldrb	r2, [r3, #0]
 801adf4:	69bb      	ldr	r3, [r7, #24]
 801adf6:	701a      	strb	r2, [r3, #0]
 801adf8:	69fb      	ldr	r3, [r7, #28]
 801adfa:	3b01      	subs	r3, #1
 801adfc:	61fb      	str	r3, [r7, #28]
 801adfe:	69fb      	ldr	r3, [r7, #28]
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d1ef      	bne.n	801ade4 <nk_memcopy+0x188>
    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
 801ae04:	e001      	b.n	801ae0a <nk_memcopy+0x1ae>
        goto done;
 801ae06:	bf00      	nop
 801ae08:	e000      	b.n	801ae0c <nk_memcopy+0x1b0>
done:
 801ae0a:	bf00      	nop
    return (dst0);
 801ae0c:	68fb      	ldr	r3, [r7, #12]
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3724      	adds	r7, #36	; 0x24
 801ae12:	46bd      	mov	sp, r7
 801ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae18:	4770      	bx	lr

0801ae1a <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 801ae1a:	b480      	push	{r7}
 801ae1c:	b089      	sub	sp, #36	; 0x24
 801ae1e:	af00      	add	r7, sp, #0
 801ae20:	60f8      	str	r0, [r7, #12]
 801ae22:	60b9      	str	r1, [r7, #8]
 801ae24:	607a      	str	r2, [r7, #4]
    #define nk_word unsigned
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	61fb      	str	r3, [r7, #28]
    unsigned c = 0;
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	61bb      	str	r3, [r7, #24]
    nk_size t = 0;
 801ae2e:	2300      	movs	r3, #0
 801ae30:	617b      	str	r3, [r7, #20]

    if ((c = (nk_byte)c0) != 0) {
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	b2db      	uxtb	r3, r3
 801ae36:	61bb      	str	r3, [r7, #24]
 801ae38:	69bb      	ldr	r3, [r7, #24]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d009      	beq.n	801ae52 <nk_memset+0x38>
        c = (c << 8) | c; /* at least 16-bits  */
 801ae3e:	69bb      	ldr	r3, [r7, #24]
 801ae40:	021b      	lsls	r3, r3, #8
 801ae42:	69ba      	ldr	r2, [r7, #24]
 801ae44:	4313      	orrs	r3, r2
 801ae46:	61bb      	str	r3, [r7, #24]
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	041b      	lsls	r3, r3, #16
 801ae4c:	69ba      	ldr	r2, [r7, #24]
 801ae4e:	4313      	orrs	r3, r2
 801ae50:	61bb      	str	r3, [r7, #24]
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	61fb      	str	r3, [r7, #28]
    if (size < 3 * nk_wsize) {
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	2b0b      	cmp	r3, #11
 801ae5a:	d80c      	bhi.n	801ae76 <nk_memset+0x5c>
        while (size--) *dst++ = (nk_byte)c0;
 801ae5c:	e005      	b.n	801ae6a <nk_memset+0x50>
 801ae5e:	69fb      	ldr	r3, [r7, #28]
 801ae60:	1c5a      	adds	r2, r3, #1
 801ae62:	61fa      	str	r2, [r7, #28]
 801ae64:	68ba      	ldr	r2, [r7, #8]
 801ae66:	b2d2      	uxtb	r2, r2
 801ae68:	701a      	strb	r2, [r3, #0]
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	1e5a      	subs	r2, r3, #1
 801ae6e:	607a      	str	r2, [r7, #4]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d1f4      	bne.n	801ae5e <nk_memset+0x44>
        return;
 801ae74:	e03c      	b.n	801aef0 <nk_memset+0xd6>
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 801ae76:	69fb      	ldr	r3, [r7, #28]
 801ae78:	f003 0303 	and.w	r3, r3, #3
 801ae7c:	617b      	str	r3, [r7, #20]
 801ae7e:	697b      	ldr	r3, [r7, #20]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d013      	beq.n	801aeac <nk_memset+0x92>
        t = nk_wsize -t;
 801ae84:	697b      	ldr	r3, [r7, #20]
 801ae86:	f1c3 0304 	rsb	r3, r3, #4
 801ae8a:	617b      	str	r3, [r7, #20]
        size -= t;
 801ae8c:	687a      	ldr	r2, [r7, #4]
 801ae8e:	697b      	ldr	r3, [r7, #20]
 801ae90:	1ad3      	subs	r3, r2, r3
 801ae92:	607b      	str	r3, [r7, #4]
        do {
            *dst++ = (nk_byte)c0;
 801ae94:	69fb      	ldr	r3, [r7, #28]
 801ae96:	1c5a      	adds	r2, r3, #1
 801ae98:	61fa      	str	r2, [r7, #28]
 801ae9a:	68ba      	ldr	r2, [r7, #8]
 801ae9c:	b2d2      	uxtb	r2, r2
 801ae9e:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	3b01      	subs	r3, #1
 801aea4:	617b      	str	r3, [r7, #20]
 801aea6:	697b      	ldr	r3, [r7, #20]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d1f3      	bne.n	801ae94 <nk_memset+0x7a>
    }

    /* fill word */
    t = size / nk_wsize;
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	089b      	lsrs	r3, r3, #2
 801aeb0:	617b      	str	r3, [r7, #20]
    do {
        *(nk_word*)((void*)dst) = c;
 801aeb2:	69fb      	ldr	r3, [r7, #28]
 801aeb4:	69ba      	ldr	r2, [r7, #24]
 801aeb6:	601a      	str	r2, [r3, #0]
        dst += nk_wsize;
 801aeb8:	69fb      	ldr	r3, [r7, #28]
 801aeba:	3304      	adds	r3, #4
 801aebc:	61fb      	str	r3, [r7, #28]
    } while (--t != 0);
 801aebe:	697b      	ldr	r3, [r7, #20]
 801aec0:	3b01      	subs	r3, #1
 801aec2:	617b      	str	r3, [r7, #20]
 801aec4:	697b      	ldr	r3, [r7, #20]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d1f3      	bne.n	801aeb2 <nk_memset+0x98>

    /* fill trailing bytes */
    t = (size & nk_wmask);
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	f003 0303 	and.w	r3, r3, #3
 801aed0:	617b      	str	r3, [r7, #20]
    if (t != 0) {
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d00b      	beq.n	801aef0 <nk_memset+0xd6>
        do {
            *dst++ = (nk_byte)c0;
 801aed8:	69fb      	ldr	r3, [r7, #28]
 801aeda:	1c5a      	adds	r2, r3, #1
 801aedc:	61fa      	str	r2, [r7, #28]
 801aede:	68ba      	ldr	r2, [r7, #8]
 801aee0:	b2d2      	uxtb	r2, r2
 801aee2:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801aee4:	697b      	ldr	r3, [r7, #20]
 801aee6:	3b01      	subs	r3, #1
 801aee8:	617b      	str	r3, [r7, #20]
 801aeea:	697b      	ldr	r3, [r7, #20]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d1f3      	bne.n	801aed8 <nk_memset+0xbe>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 801aef0:	3724      	adds	r7, #36	; 0x24
 801aef2:	46bd      	mov	sp, r7
 801aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef8:	4770      	bx	lr
	...

0801aefc <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b082      	sub	sp, #8
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
 801af04:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ptr);
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d105      	bne.n	801af18 <nk_zero+0x1c>
 801af0c:	4b07      	ldr	r3, [pc, #28]	; (801af2c <nk_zero+0x30>)
 801af0e:	4a08      	ldr	r2, [pc, #32]	; (801af30 <nk_zero+0x34>)
 801af10:	2184      	movs	r1, #132	; 0x84
 801af12:	4808      	ldr	r0, [pc, #32]	; (801af34 <nk_zero+0x38>)
 801af14:	f001 fca2 	bl	801c85c <__assert_func>
    NK_MEMSET(ptr, 0, size);
 801af18:	683a      	ldr	r2, [r7, #0]
 801af1a:	2100      	movs	r1, #0
 801af1c:	6878      	ldr	r0, [r7, #4]
 801af1e:	f7ff ff7c 	bl	801ae1a <nk_memset>
}
 801af22:	bf00      	nop
 801af24:	3708      	adds	r7, #8
 801af26:	46bd      	mov	sp, r7
 801af28:	bd80      	pop	{r7, pc}
 801af2a:	bf00      	nop
 801af2c:	08020bf4 	.word	0x08020bf4
 801af30:	08021908 	.word	0x08021908
 801af34:	08020bf8 	.word	0x08020bf8

0801af38 <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b084      	sub	sp, #16
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
    int siz = 0;
 801af40:	2300      	movs	r3, #0
 801af42:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(str);
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d108      	bne.n	801af5c <nk_strlen+0x24>
 801af4a:	4b0b      	ldr	r3, [pc, #44]	; (801af78 <nk_strlen+0x40>)
 801af4c:	4a0b      	ldr	r2, [pc, #44]	; (801af7c <nk_strlen+0x44>)
 801af4e:	218b      	movs	r1, #139	; 0x8b
 801af50:	480b      	ldr	r0, [pc, #44]	; (801af80 <nk_strlen+0x48>)
 801af52:	f001 fc83 	bl	801c85c <__assert_func>
    while (str && *str++ != '\0') siz++;
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	3301      	adds	r3, #1
 801af5a:	60fb      	str	r3, [r7, #12]
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d005      	beq.n	801af6e <nk_strlen+0x36>
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	1c5a      	adds	r2, r3, #1
 801af66:	607a      	str	r2, [r7, #4]
 801af68:	781b      	ldrb	r3, [r3, #0]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d1f3      	bne.n	801af56 <nk_strlen+0x1e>
    return siz;
 801af6e:	68fb      	ldr	r3, [r7, #12]
}
 801af70:	4618      	mov	r0, r3
 801af72:	3710      	adds	r7, #16
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}
 801af78:	08020c14 	.word	0x08020c14
 801af7c:	08021910 	.word	0x08021910
 801af80:	08020bf8 	.word	0x08020bf8

0801af84 <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b088      	sub	sp, #32
 801af88:	af00      	add	r7, sp, #0
 801af8a:	60f8      	str	r0, [r7, #12]
 801af8c:	60b9      	str	r1, [r7, #8]
 801af8e:	607a      	str	r2, [r7, #4]
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	2b00      	cmp	r3, #0
 801af94:	da06      	bge.n	801afa4 <nk_stricmpn+0x20>
 801af96:	4b25      	ldr	r3, [pc, #148]	; (801b02c <nk_stricmpn+0xa8>)
 801af98:	4a25      	ldr	r2, [pc, #148]	; (801b030 <nk_stricmpn+0xac>)
 801af9a:	f240 1103 	movw	r1, #259	; 0x103
 801af9e:	4825      	ldr	r0, [pc, #148]	; (801b034 <nk_stricmpn+0xb0>)
 801afa0:	f001 fc5c 	bl	801c85c <__assert_func>
    do {
        c1 = *s1++;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	1c5a      	adds	r2, r3, #1
 801afa8:	60fa      	str	r2, [r7, #12]
 801afaa:	781b      	ldrb	r3, [r3, #0]
 801afac:	61bb      	str	r3, [r7, #24]
        c2 = *s2++;
 801afae:	68bb      	ldr	r3, [r7, #8]
 801afb0:	1c5a      	adds	r2, r3, #1
 801afb2:	60ba      	str	r2, [r7, #8]
 801afb4:	781b      	ldrb	r3, [r3, #0]
 801afb6:	617b      	str	r3, [r7, #20]
        if (!n--) return 0;
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	1e5a      	subs	r2, r3, #1
 801afbc:	607a      	str	r2, [r7, #4]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d101      	bne.n	801afc6 <nk_stricmpn+0x42>
 801afc2:	2300      	movs	r3, #0
 801afc4:	e02e      	b.n	801b024 <nk_stricmpn+0xa0>

        d = c1 - c2;
 801afc6:	69ba      	ldr	r2, [r7, #24]
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	1ad3      	subs	r3, r2, r3
 801afcc:	61fb      	str	r3, [r7, #28]
        while (d) {
 801afce:	bf00      	nop
 801afd0:	69fb      	ldr	r3, [r7, #28]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d022      	beq.n	801b01c <nk_stricmpn+0x98>
            if (c1 <= 'Z' && c1 >= 'A') {
 801afd6:	69bb      	ldr	r3, [r7, #24]
 801afd8:	2b5a      	cmp	r3, #90	; 0x5a
 801afda:	dc08      	bgt.n	801afee <nk_stricmpn+0x6a>
 801afdc:	69bb      	ldr	r3, [r7, #24]
 801afde:	2b40      	cmp	r3, #64	; 0x40
 801afe0:	dd05      	ble.n	801afee <nk_stricmpn+0x6a>
                d += ('a' - 'A');
 801afe2:	69fb      	ldr	r3, [r7, #28]
 801afe4:	3320      	adds	r3, #32
 801afe6:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801afe8:	69fb      	ldr	r3, [r7, #28]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d013      	beq.n	801b016 <nk_stricmpn+0x92>
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 801afee:	697b      	ldr	r3, [r7, #20]
 801aff0:	2b5a      	cmp	r3, #90	; 0x5a
 801aff2:	dc08      	bgt.n	801b006 <nk_stricmpn+0x82>
 801aff4:	697b      	ldr	r3, [r7, #20]
 801aff6:	2b40      	cmp	r3, #64	; 0x40
 801aff8:	dd05      	ble.n	801b006 <nk_stricmpn+0x82>
                d -= ('a' - 'A');
 801affa:	69fb      	ldr	r3, [r7, #28]
 801affc:	3b20      	subs	r3, #32
 801affe:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801b000:	69fb      	ldr	r3, [r7, #28]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d009      	beq.n	801b01a <nk_stricmpn+0x96>
            }
            return ((d >= 0) << 1) - 1;
 801b006:	69fb      	ldr	r3, [r7, #28]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	db01      	blt.n	801b010 <nk_stricmpn+0x8c>
 801b00c:	2301      	movs	r3, #1
 801b00e:	e009      	b.n	801b024 <nk_stricmpn+0xa0>
 801b010:	f04f 33ff 	mov.w	r3, #4294967295
 801b014:	e006      	b.n	801b024 <nk_stricmpn+0xa0>
                if (!d) break;
 801b016:	bf00      	nop
 801b018:	e000      	b.n	801b01c <nk_stricmpn+0x98>
                if (!d) break;
 801b01a:	bf00      	nop
        }
    } while (c1);
 801b01c:	69bb      	ldr	r3, [r7, #24]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d1c0      	bne.n	801afa4 <nk_stricmpn+0x20>
    return 0;
 801b022:	2300      	movs	r3, #0
}
 801b024:	4618      	mov	r0, r3
 801b026:	3720      	adds	r7, #32
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	08020c18 	.word	0x08020c18
 801b030:	0802191c 	.word	0x0802191c
 801b034:	08020bf8 	.word	0x08020bf8

0801b038 <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 801b038:	b480      	push	{r7}
 801b03a:	b091      	sub	sp, #68	; 0x44
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	60f8      	str	r0, [r7, #12]
 801b040:	60b9      	str	r1, [r7, #8]
 801b042:	607a      	str	r2, [r7, #4]
    /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
    #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))

    nk_uint h1 = seed;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	633b      	str	r3, [r7, #48]	; 0x30
    const nk_byte *keyptr = data;
 801b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b04e:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
 801b050:	2304      	movs	r3, #4
 801b052:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int nblocks = len/4;
 801b054:	68bb      	ldr	r3, [r7, #8]
 801b056:	2b00      	cmp	r3, #0
 801b058:	da00      	bge.n	801b05c <nk_murmur_hash+0x24>
 801b05a:	3303      	adds	r3, #3
 801b05c:	109b      	asrs	r3, r3, #2
 801b05e:	62bb      	str	r3, [r7, #40]	; 0x28

    const nk_uint c1 = 0xcc9e2d51;
 801b060:	4b57      	ldr	r3, [pc, #348]	; (801b1c0 <nk_murmur_hash+0x188>)
 801b062:	627b      	str	r3, [r7, #36]	; 0x24
    const nk_uint c2 = 0x1b873593;
 801b064:	4b57      	ldr	r3, [pc, #348]	; (801b1c4 <nk_murmur_hash+0x18c>)
 801b066:	623b      	str	r3, [r7, #32]
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d101      	bne.n	801b072 <nk_murmur_hash+0x3a>
 801b06e:	2300      	movs	r3, #0
 801b070:	e09f      	b.n	801b1b2 <nk_murmur_hash+0x17a>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801b072:	2300      	movs	r3, #0
 801b074:	637b      	str	r3, [r7, #52]	; 0x34
 801b076:	e03c      	b.n	801b0f2 <nk_murmur_hash+0xba>
        k1ptr = (nk_byte*)&k1;
 801b078:	f107 0314 	add.w	r3, r7, #20
 801b07c:	61bb      	str	r3, [r7, #24]
        k1ptr[0] = keyptr[0];
 801b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b080:	781a      	ldrb	r2, [r3, #0]
 801b082:	69bb      	ldr	r3, [r7, #24]
 801b084:	701a      	strb	r2, [r3, #0]
        k1ptr[1] = keyptr[1];
 801b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b088:	1c5a      	adds	r2, r3, #1
 801b08a:	69bb      	ldr	r3, [r7, #24]
 801b08c:	3301      	adds	r3, #1
 801b08e:	7812      	ldrb	r2, [r2, #0]
 801b090:	701a      	strb	r2, [r3, #0]
        k1ptr[2] = keyptr[2];
 801b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b094:	1c9a      	adds	r2, r3, #2
 801b096:	69bb      	ldr	r3, [r7, #24]
 801b098:	3302      	adds	r3, #2
 801b09a:	7812      	ldrb	r2, [r2, #0]
 801b09c:	701a      	strb	r2, [r3, #0]
        k1ptr[3] = keyptr[3];
 801b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0a0:	1cda      	adds	r2, r3, #3
 801b0a2:	69bb      	ldr	r3, [r7, #24]
 801b0a4:	3303      	adds	r3, #3
 801b0a6:	7812      	ldrb	r2, [r2, #0]
 801b0a8:	701a      	strb	r2, [r3, #0]

        k1 *= c1;
 801b0aa:	697b      	ldr	r3, [r7, #20]
 801b0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0ae:	fb02 f303 	mul.w	r3, r2, r3
 801b0b2:	617b      	str	r3, [r7, #20]
        k1 = NK_ROTL(k1,15);
 801b0b4:	697b      	ldr	r3, [r7, #20]
 801b0b6:	ea4f 4373 	mov.w	r3, r3, ror #17
 801b0ba:	617b      	str	r3, [r7, #20]
        k1 *= c2;
 801b0bc:	697b      	ldr	r3, [r7, #20]
 801b0be:	6a3a      	ldr	r2, [r7, #32]
 801b0c0:	fb02 f303 	mul.w	r3, r2, r3
 801b0c4:	617b      	str	r3, [r7, #20]

        h1 ^= k1;
 801b0c6:	697b      	ldr	r3, [r7, #20]
 801b0c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b0ca:	4053      	eors	r3, r2
 801b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = NK_ROTL(h1,13);
 801b0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b0d0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = h1*5+0xe6546b64;
 801b0d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b0d8:	4613      	mov	r3, r2
 801b0da:	009b      	lsls	r3, r3, #2
 801b0dc:	441a      	add	r2, r3
 801b0de:	4b3a      	ldr	r3, [pc, #232]	; (801b1c8 <nk_murmur_hash+0x190>)
 801b0e0:	4413      	add	r3, r2
 801b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	637b      	str	r3, [r7, #52]	; 0x34
 801b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b0ee:	4413      	add	r3, r2
 801b0f0:	63bb      	str	r3, [r7, #56]	; 0x38
 801b0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0f6:	429a      	cmp	r2, r3
 801b0f8:	dbbe      	blt.n	801b078 <nk_murmur_hash+0x40>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 801b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0fc:	009b      	lsls	r3, r3, #2
 801b0fe:	461a      	mov	r2, r3
 801b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b102:	4413      	add	r3, r2
 801b104:	61fb      	str	r3, [r7, #28]
    k1 = 0;
 801b106:	2300      	movs	r3, #0
 801b108:	617b      	str	r3, [r7, #20]
    switch (len & 3) {
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	f003 0303 	and.w	r3, r3, #3
 801b110:	2b03      	cmp	r3, #3
 801b112:	d006      	beq.n	801b122 <nk_murmur_hash+0xea>
 801b114:	2b03      	cmp	r3, #3
 801b116:	dc2d      	bgt.n	801b174 <nk_murmur_hash+0x13c>
 801b118:	2b01      	cmp	r3, #1
 801b11a:	d012      	beq.n	801b142 <nk_murmur_hash+0x10a>
 801b11c:	2b02      	cmp	r3, #2
 801b11e:	d008      	beq.n	801b132 <nk_murmur_hash+0xfa>
            k1 *= c1;
            k1 = NK_ROTL(k1,15);
            k1 *= c2;
            h1 ^= k1;
            break;
        default: break;
 801b120:	e028      	b.n	801b174 <nk_murmur_hash+0x13c>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 801b122:	69fb      	ldr	r3, [r7, #28]
 801b124:	3302      	adds	r3, #2
 801b126:	781b      	ldrb	r3, [r3, #0]
 801b128:	041b      	lsls	r3, r3, #16
 801b12a:	461a      	mov	r2, r3
 801b12c:	697b      	ldr	r3, [r7, #20]
 801b12e:	4053      	eors	r3, r2
 801b130:	617b      	str	r3, [r7, #20]
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 801b132:	69fb      	ldr	r3, [r7, #28]
 801b134:	3301      	adds	r3, #1
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	021b      	lsls	r3, r3, #8
 801b13a:	461a      	mov	r2, r3
 801b13c:	697b      	ldr	r3, [r7, #20]
 801b13e:	4053      	eors	r3, r2
 801b140:	617b      	str	r3, [r7, #20]
        case 1: k1 ^= tail[0];
 801b142:	69fb      	ldr	r3, [r7, #28]
 801b144:	781b      	ldrb	r3, [r3, #0]
 801b146:	461a      	mov	r2, r3
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	4053      	eors	r3, r2
 801b14c:	617b      	str	r3, [r7, #20]
            k1 *= c1;
 801b14e:	697b      	ldr	r3, [r7, #20]
 801b150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b152:	fb02 f303 	mul.w	r3, r2, r3
 801b156:	617b      	str	r3, [r7, #20]
            k1 = NK_ROTL(k1,15);
 801b158:	697b      	ldr	r3, [r7, #20]
 801b15a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801b15e:	617b      	str	r3, [r7, #20]
            k1 *= c2;
 801b160:	697b      	ldr	r3, [r7, #20]
 801b162:	6a3a      	ldr	r2, [r7, #32]
 801b164:	fb02 f303 	mul.w	r3, r2, r3
 801b168:	617b      	str	r3, [r7, #20]
            h1 ^= k1;
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b16e:	4053      	eors	r3, r2
 801b170:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 801b172:	e000      	b.n	801b176 <nk_murmur_hash+0x13e>
        default: break;
 801b174:	bf00      	nop
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b17a:	4053      	eors	r3, r2
 801b17c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* fmix32 */
    h1 ^= h1 >> 16;
 801b17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b180:	0c1b      	lsrs	r3, r3, #16
 801b182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b184:	4053      	eors	r3, r2
 801b186:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0x85ebca6b;
 801b188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b18a:	4a10      	ldr	r2, [pc, #64]	; (801b1cc <nk_murmur_hash+0x194>)
 801b18c:	fb02 f303 	mul.w	r3, r2, r3
 801b190:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 13;
 801b192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b194:	0b5b      	lsrs	r3, r3, #13
 801b196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b198:	4053      	eors	r3, r2
 801b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0xc2b2ae35;
 801b19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b19e:	4a0c      	ldr	r2, [pc, #48]	; (801b1d0 <nk_murmur_hash+0x198>)
 801b1a0:	fb02 f303 	mul.w	r3, r2, r3
 801b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 16;
 801b1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b1a8:	0c1b      	lsrs	r3, r3, #16
 801b1aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b1ac:	4053      	eors	r3, r2
 801b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c

    #undef NK_ROTL
    return h1;
 801b1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	3744      	adds	r7, #68	; 0x44
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1bc:	4770      	bx	lr
 801b1be:	bf00      	nop
 801b1c0:	cc9e2d51 	.word	0xcc9e2d51
 801b1c4:	1b873593 	.word	0x1b873593
 801b1c8:	e6546b64 	.word	0xe6546b64
 801b1cc:	85ebca6b 	.word	0x85ebca6b
 801b1d0:	c2b2ae35 	.word	0xc2b2ae35

0801b1d4 <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b092      	sub	sp, #72	; 0x48
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6178      	str	r0, [r7, #20]
 801b1dc:	6139      	str	r1, [r7, #16]
 801b1de:	60fa      	str	r2, [r7, #12]
 801b1e0:	ed87 0a02 	vstr	s0, [r7, #8]
 801b1e4:	607b      	str	r3, [r7, #4]
    int i = 0;
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	647b      	str	r3, [r7, #68]	; 0x44
    int glyph_len = 0;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	643b      	str	r3, [r7, #64]	; 0x40
    float last_width = 0;
 801b1ee:	f04f 0300 	mov.w	r3, #0
 801b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	61fb      	str	r3, [r7, #28]
    float width = 0;
 801b1f8:	f04f 0300 	mov.w	r3, #0
 801b1fc:	63bb      	str	r3, [r7, #56]	; 0x38
    int len = 0;
 801b1fe:	2300      	movs	r3, #0
 801b200:	637b      	str	r3, [r7, #52]	; 0x34
    int g = 0;
 801b202:	2300      	movs	r3, #0
 801b204:	633b      	str	r3, [r7, #48]	; 0x30
    float s;

    int sep_len = 0;
 801b206:	2300      	movs	r3, #0
 801b208:	62fb      	str	r3, [r7, #44]	; 0x2c
    int sep_g = 0;
 801b20a:	2300      	movs	r3, #0
 801b20c:	62bb      	str	r3, [r7, #40]	; 0x28
    float sep_width = 0;
 801b20e:	f04f 0300 	mov.w	r3, #0
 801b212:	627b      	str	r3, [r7, #36]	; 0x24
    sep_count = NK_MAX(sep_count,0);
 801b214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b21a:	65bb      	str	r3, [r7, #88]	; 0x58

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 801b21c:	f107 031c 	add.w	r3, r7, #28
 801b220:	68fa      	ldr	r2, [r7, #12]
 801b222:	4619      	mov	r1, r3
 801b224:	6938      	ldr	r0, [r7, #16]
 801b226:	f7ff fc9b 	bl	801ab60 <nk_utf_decode>
 801b22a:	6438      	str	r0, [r7, #64]	; 0x40
    while (glyph_len && (width < space) && (len < text_len)) {
 801b22c:	e04a      	b.n	801b2c4 <nk_text_clamp+0xf0>
        len += glyph_len;
 801b22e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b232:	4413      	add	r3, r2
 801b234:	637b      	str	r3, [r7, #52]	; 0x34
        s = font->width(font->userdata, font->height, text, len);
 801b236:	697b      	ldr	r3, [r7, #20]
 801b238:	689b      	ldr	r3, [r3, #8]
 801b23a:	697a      	ldr	r2, [r7, #20]
 801b23c:	edd2 7a01 	vldr	s15, [r2, #4]
 801b240:	6978      	ldr	r0, [r7, #20]
 801b242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b244:	6939      	ldr	r1, [r7, #16]
 801b246:	eeb0 0a67 	vmov.f32	s0, s15
 801b24a:	6800      	ldr	r0, [r0, #0]
 801b24c:	4798      	blx	r3
 801b24e:	ed87 0a08 	vstr	s0, [r7, #32]
        for (i = 0; i < sep_count; ++i) {
 801b252:	2300      	movs	r3, #0
 801b254:	647b      	str	r3, [r7, #68]	; 0x44
 801b256:	e015      	b.n	801b284 <nk_text_clamp+0xb0>
            if (unicode != sep_list[i]) continue;
 801b258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b25a:	009b      	lsls	r3, r3, #2
 801b25c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b25e:	4413      	add	r3, r2
 801b260:	681a      	ldr	r2, [r3, #0]
 801b262:	69fb      	ldr	r3, [r7, #28]
 801b264:	429a      	cmp	r2, r3
 801b266:	d109      	bne.n	801b27c <nk_text_clamp+0xa8>
            sep_width = last_width = width;
 801b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b26e:	627b      	str	r3, [r7, #36]	; 0x24
            sep_g = g+1;
 801b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b272:	3301      	adds	r3, #1
 801b274:	62bb      	str	r3, [r7, #40]	; 0x28
            sep_len = len;
 801b276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b278:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801b27a:	e007      	b.n	801b28c <nk_text_clamp+0xb8>
            if (unicode != sep_list[i]) continue;
 801b27c:	bf00      	nop
        for (i = 0; i < sep_count; ++i) {
 801b27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b280:	3301      	adds	r3, #1
 801b282:	647b      	str	r3, [r7, #68]	; 0x44
 801b284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b288:	429a      	cmp	r2, r3
 801b28a:	dbe5      	blt.n	801b258 <nk_text_clamp+0x84>
        }
        if (i == sep_count){
 801b28c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b28e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b290:	429a      	cmp	r2, r3
 801b292:	d106      	bne.n	801b2a2 <nk_text_clamp+0xce>
            last_width = sep_width = width;
 801b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b296:	627b      	str	r3, [r7, #36]	; 0x24
 801b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b29a:	63fb      	str	r3, [r7, #60]	; 0x3c
            sep_g = g+1;
 801b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b29e:	3301      	adds	r3, #1
 801b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        width = s;
 801b2a2:	6a3b      	ldr	r3, [r7, #32]
 801b2a4:	63bb      	str	r3, [r7, #56]	; 0x38
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 801b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2a8:	693a      	ldr	r2, [r7, #16]
 801b2aa:	18d0      	adds	r0, r2, r3
 801b2ac:	68fa      	ldr	r2, [r7, #12]
 801b2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2b0:	1ad2      	subs	r2, r2, r3
 801b2b2:	f107 031c 	add.w	r3, r7, #28
 801b2b6:	4619      	mov	r1, r3
 801b2b8:	f7ff fc52 	bl	801ab60 <nk_utf_decode>
 801b2bc:	6438      	str	r0, [r7, #64]	; 0x40
        g++;
 801b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2c0:	3301      	adds	r3, #1
 801b2c2:	633b      	str	r3, [r7, #48]	; 0x30
    while (glyph_len && (width < space) && (len < text_len)) {
 801b2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d00c      	beq.n	801b2e4 <nk_text_clamp+0x110>
 801b2ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801b2ce:	edd7 7a02 	vldr	s15, [r7, #8]
 801b2d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2da:	d503      	bpl.n	801b2e4 <nk_text_clamp+0x110>
 801b2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	429a      	cmp	r2, r3
 801b2e2:	dba4      	blt.n	801b22e <nk_text_clamp+0x5a>
    }
    if (len >= text_len) {
 801b2e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	429a      	cmp	r2, r3
 801b2ea:	db07      	blt.n	801b2fc <nk_text_clamp+0x128>
        *glyphs = g;
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2f0:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 801b2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b2f6:	601a      	str	r2, [r3, #0]
        return len;
 801b2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2fa:	e00b      	b.n	801b314 <nk_text_clamp+0x140>
    } else {
        *glyphs = sep_g;
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b300:	601a      	str	r2, [r3, #0]
        *text_width = sep_width;
 801b302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b306:	601a      	str	r2, [r3, #0]
        return (!sep_len) ? len: sep_len;
 801b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d101      	bne.n	801b312 <nk_text_clamp+0x13e>
 801b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b310:	e000      	b.n	801b314 <nk_text_clamp+0x140>
 801b312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
}
 801b314:	4618      	mov	r0, r3
 801b316:	3748      	adds	r7, #72	; 0x48
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}

0801b31c <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 801b31c:	b590      	push	{r4, r7, lr}
 801b31e:	b08f      	sub	sp, #60	; 0x3c
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
 801b324:	6039      	str	r1, [r7, #0]
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 801b326:	683b      	ldr	r3, [r7, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d105      	bne.n	801b338 <nk_widget+0x1c>
 801b32c:	4b9d      	ldr	r3, [pc, #628]	; (801b5a4 <nk_widget+0x288>)
 801b32e:	4a9e      	ldr	r2, [pc, #632]	; (801b5a8 <nk_widget+0x28c>)
 801b330:	218e      	movs	r1, #142	; 0x8e
 801b332:	489e      	ldr	r0, [pc, #632]	; (801b5ac <nk_widget+0x290>)
 801b334:	f001 fa92 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b33e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b342:	2b00      	cmp	r3, #0
 801b344:	d105      	bne.n	801b352 <nk_widget+0x36>
 801b346:	4b9a      	ldr	r3, [pc, #616]	; (801b5b0 <nk_widget+0x294>)
 801b348:	4a97      	ldr	r2, [pc, #604]	; (801b5a8 <nk_widget+0x28c>)
 801b34a:	218f      	movs	r1, #143	; 0x8f
 801b34c:	4897      	ldr	r0, [pc, #604]	; (801b5ac <nk_widget+0x290>)
 801b34e:	f001 fa85 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b352:	683b      	ldr	r3, [r7, #0]
 801b354:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b358:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b360:	2b00      	cmp	r3, #0
 801b362:	d105      	bne.n	801b370 <nk_widget+0x54>
 801b364:	4b93      	ldr	r3, [pc, #588]	; (801b5b4 <nk_widget+0x298>)
 801b366:	4a90      	ldr	r2, [pc, #576]	; (801b5a8 <nk_widget+0x28c>)
 801b368:	2190      	movs	r1, #144	; 0x90
 801b36a:	4890      	ldr	r0, [pc, #576]	; (801b5ac <nk_widget+0x290>)
 801b36c:	f001 fa76 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b370:	683b      	ldr	r3, [r7, #0]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d00f      	beq.n	801b396 <nk_widget+0x7a>
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b37c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b380:	2b00      	cmp	r3, #0
 801b382:	d008      	beq.n	801b396 <nk_widget+0x7a>
 801b384:	683b      	ldr	r3, [r7, #0]
 801b386:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b38a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b392:	2b00      	cmp	r3, #0
 801b394:	d101      	bne.n	801b39a <nk_widget+0x7e>
        return NK_WIDGET_INVALID;
 801b396:	2300      	movs	r3, #0
 801b398:	e167      	b.n	801b66a <nk_widget+0x34e>

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 801b39a:	6839      	ldr	r1, [r7, #0]
 801b39c:	6878      	ldr	r0, [r7, #4]
 801b39e:	f7f7 f8ab 	bl	80124f8 <nk_panel_alloc_space>
    win = ctx->current;
 801b3a2:	683b      	ldr	r3, [r7, #0]
 801b3a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b3a8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b3ac:	637b      	str	r3, [r7, #52]	; 0x34
    layout = win->layout;
 801b3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b3b4:	633b      	str	r3, [r7, #48]	; 0x30
    in = &ctx->input;
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    c = layout->clip;
 801b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3bc:	f107 041c 	add.w	r4, r7, #28
 801b3c0:	333c      	adds	r3, #60	; 0x3c
 801b3c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b3c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 801b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3ca:	685b      	ldr	r3, [r3, #4]
 801b3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d005      	beq.n	801b3e0 <nk_widget+0xc4>
 801b3d4:	4b78      	ldr	r3, [pc, #480]	; (801b5b8 <nk_widget+0x29c>)
 801b3d6:	4a74      	ldr	r2, [pc, #464]	; (801b5a8 <nk_widget+0x28c>)
 801b3d8:	21a0      	movs	r1, #160	; 0xa0
 801b3da:	4874      	ldr	r0, [pc, #464]	; (801b5ac <nk_widget+0x290>)
 801b3dc:	f001 fa3e 	bl	801c85c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 801b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e2:	685b      	ldr	r3, [r3, #4]
 801b3e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d005      	beq.n	801b3f8 <nk_widget+0xdc>
 801b3ec:	4b73      	ldr	r3, [pc, #460]	; (801b5bc <nk_widget+0x2a0>)
 801b3ee:	4a6e      	ldr	r2, [pc, #440]	; (801b5a8 <nk_widget+0x28c>)
 801b3f0:	21a1      	movs	r1, #161	; 0xa1
 801b3f2:	486e      	ldr	r0, [pc, #440]	; (801b5ac <nk_widget+0x290>)
 801b3f4:	f001 fa32 	bl	801c85c <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 801b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3fa:	685b      	ldr	r3, [r3, #4]
 801b3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b400:	2b00      	cmp	r3, #0
 801b402:	d005      	beq.n	801b410 <nk_widget+0xf4>
 801b404:	4b6e      	ldr	r3, [pc, #440]	; (801b5c0 <nk_widget+0x2a4>)
 801b406:	4a68      	ldr	r2, [pc, #416]	; (801b5a8 <nk_widget+0x28c>)
 801b408:	21a2      	movs	r1, #162	; 0xa2
 801b40a:	4868      	ldr	r0, [pc, #416]	; (801b5ac <nk_widget+0x290>)
 801b40c:	f001 fa26 	bl	801c85c <__assert_func>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	edd3 7a00 	vldr	s15, [r3]
 801b416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b41a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	edc3 7a00 	vstr	s15, [r3]
    bounds->y = (float)((int)bounds->y);
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	edd3 7a01 	vldr	s15, [r3, #4]
 801b42a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b42e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->w = (float)((int)bounds->w);
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	edd3 7a02 	vldr	s15, [r3, #8]
 801b43e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	edc3 7a02 	vstr	s15, [r3, #8]
    bounds->h = (float)((int)bounds->h);
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	edd3 7a03 	vldr	s15, [r3, #12]
 801b452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	edc3 7a03 	vstr	s15, [r3, #12]

    c.x = (float)((int)c.x);
 801b460:	edd7 7a07 	vldr	s15, [r7, #28]
 801b464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b46c:	edc7 7a07 	vstr	s15, [r7, #28]
    c.y = (float)((int)c.y);
 801b470:	edd7 7a08 	vldr	s15, [r7, #32]
 801b474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b47c:	edc7 7a08 	vstr	s15, [r7, #32]
    c.w = (float)((int)c.w);
 801b480:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b48c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    c.h = (float)((int)c.h);
 801b490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801b494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b49c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	edd3 6a00 	vldr	s13, [r3]
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	ed93 6a01 	vldr	s12, [r3, #4]
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	ed93 7a00 	vldr	s14, [r3]
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	edd3 7a02 	vldr	s15, [r3, #8]
 801b4b8:	ee77 5a27 	vadd.f32	s11, s14, s15
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	ed93 7a01 	vldr	s14, [r3, #4]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	edd3 7a03 	vldr	s15, [r3, #12]
 801b4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b4cc:	f107 021c 	add.w	r2, r7, #28
 801b4d0:	f107 030c 	add.w	r3, r7, #12
 801b4d4:	eef0 1a67 	vmov.f32	s3, s15
 801b4d8:	eeb0 1a65 	vmov.f32	s2, s11
 801b4dc:	eef0 0a46 	vmov.f32	s1, s12
 801b4e0:	eeb0 0a66 	vmov.f32	s0, s13
 801b4e4:	4611      	mov	r1, r2
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	f7f7 f972 	bl	80127d0 <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	ed93 7a00 	vldr	s14, [r3]
 801b4f2:	edd7 6a07 	vldr	s13, [r7, #28]
 801b4f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b4fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b506:	bf4c      	ite	mi
 801b508:	2301      	movmi	r3, #1
 801b50a:	2300      	movpl	r3, #0
 801b50c:	b2db      	uxtb	r3, r3
 801b50e:	f083 0301 	eor.w	r3, r3, #1
 801b512:	b2db      	uxtb	r3, r3
 801b514:	2b00      	cmp	r3, #0
 801b516:	d143      	bne.n	801b5a0 <nk_widget+0x284>
 801b518:	ed97 7a07 	vldr	s14, [r7, #28]
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	edd3 6a00 	vldr	s13, [r3]
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	edd3 7a02 	vldr	s15, [r3, #8]
 801b528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b52c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b534:	bf4c      	ite	mi
 801b536:	2301      	movmi	r3, #1
 801b538:	2300      	movpl	r3, #0
 801b53a:	b2db      	uxtb	r3, r3
 801b53c:	f083 0301 	eor.w	r3, r3, #1
 801b540:	b2db      	uxtb	r3, r3
 801b542:	2b00      	cmp	r3, #0
 801b544:	d12c      	bne.n	801b5a0 <nk_widget+0x284>
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	ed93 7a01 	vldr	s14, [r3, #4]
 801b54c:	edd7 6a08 	vldr	s13, [r7, #32]
 801b550:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801b554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b560:	bf4c      	ite	mi
 801b562:	2301      	movmi	r3, #1
 801b564:	2300      	movpl	r3, #0
 801b566:	b2db      	uxtb	r3, r3
 801b568:	f083 0301 	eor.w	r3, r3, #1
 801b56c:	b2db      	uxtb	r3, r3
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d116      	bne.n	801b5a0 <nk_widget+0x284>
 801b572:	ed97 7a08 	vldr	s14, [r7, #32]
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	edd3 6a01 	vldr	s13, [r3, #4]
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	edd3 7a03 	vldr	s15, [r3, #12]
 801b582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b58e:	bf4c      	ite	mi
 801b590:	2301      	movmi	r3, #1
 801b592:	2300      	movpl	r3, #0
 801b594:	b2db      	uxtb	r3, r3
 801b596:	f083 0301 	eor.w	r3, r3, #1
 801b59a:	b2db      	uxtb	r3, r3
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d011      	beq.n	801b5c4 <nk_widget+0x2a8>
        return NK_WIDGET_INVALID;
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	e062      	b.n	801b66a <nk_widget+0x34e>
 801b5a4:	08020d0c 	.word	0x08020d0c
 801b5a8:	08021928 	.word	0x08021928
 801b5ac:	08020d10 	.word	0x08020d10
 801b5b0:	08020d2c 	.word	0x08020d2c
 801b5b4:	08020d3c 	.word	0x08020d3c
 801b5b8:	08020d54 	.word	0x08020d54
 801b5bc:	08020d7c 	.word	0x08020d7c
 801b5c0:	08020da0 	.word	0x08020da0
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 801b5c4:	ed97 7a03 	vldr	s14, [r7, #12]
 801b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ca:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801b5ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5d6:	bf94      	ite	ls
 801b5d8:	2301      	movls	r3, #1
 801b5da:	2300      	movhi	r3, #0
 801b5dc:	b2db      	uxtb	r3, r3
 801b5de:	f083 0301 	eor.w	r3, r3, #1
 801b5e2:	b2db      	uxtb	r3, r3
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d13d      	bne.n	801b664 <nk_widget+0x348>
 801b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ea:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801b5ee:	edd7 6a03 	vldr	s13, [r7, #12]
 801b5f2:	edd7 7a05 	vldr	s15, [r7, #20]
 801b5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b5fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b602:	bf4c      	ite	mi
 801b604:	2301      	movmi	r3, #1
 801b606:	2300      	movpl	r3, #0
 801b608:	b2db      	uxtb	r3, r3
 801b60a:	f083 0301 	eor.w	r3, r3, #1
 801b60e:	b2db      	uxtb	r3, r3
 801b610:	2b00      	cmp	r3, #0
 801b612:	d127      	bne.n	801b664 <nk_widget+0x348>
 801b614:	ed97 7a04 	vldr	s14, [r7, #16]
 801b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b61a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801b61e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b626:	bf94      	ite	ls
 801b628:	2301      	movls	r3, #1
 801b62a:	2300      	movhi	r3, #0
 801b62c:	b2db      	uxtb	r3, r3
 801b62e:	f083 0301 	eor.w	r3, r3, #1
 801b632:	b2db      	uxtb	r3, r3
 801b634:	2b00      	cmp	r3, #0
 801b636:	d115      	bne.n	801b664 <nk_widget+0x348>
 801b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b63a:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801b63e:	edd7 6a04 	vldr	s13, [r7, #16]
 801b642:	edd7 7a06 	vldr	s15, [r7, #24]
 801b646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b64a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b652:	bf4c      	ite	mi
 801b654:	2301      	movmi	r3, #1
 801b656:	2300      	movpl	r3, #0
 801b658:	b2db      	uxtb	r3, r3
 801b65a:	f083 0301 	eor.w	r3, r3, #1
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	2b00      	cmp	r3, #0
 801b662:	d001      	beq.n	801b668 <nk_widget+0x34c>
        return NK_WIDGET_ROM;
 801b664:	2302      	movs	r3, #2
 801b666:	e000      	b.n	801b66a <nk_widget+0x34e>
    return NK_WIDGET_VALID;
 801b668:	2301      	movs	r3, #1
}
 801b66a:	4618      	mov	r0, r3
 801b66c:	373c      	adds	r7, #60	; 0x3c
 801b66e:	46bd      	mov	sp, r7
 801b670:	bd90      	pop	{r4, r7, pc}
 801b672:	bf00      	nop

0801b674 <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b086      	sub	sp, #24
 801b678:	af00      	add	r7, sp, #0
 801b67a:	60f8      	str	r0, [r7, #12]
 801b67c:	60b9      	str	r1, [r7, #8]
 801b67e:	eeb0 7a40 	vmov.f32	s14, s0
 801b682:	eef0 7a60 	vmov.f32	s15, s1
 801b686:	ed87 7a00 	vstr	s14, [r7]
 801b68a:	edc7 7a01 	vstr	s15, [r7, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d105      	bne.n	801b6a0 <nk_widget_fitting+0x2c>
 801b694:	4b20      	ldr	r3, [pc, #128]	; (801b718 <nk_widget_fitting+0xa4>)
 801b696:	4a21      	ldr	r2, [pc, #132]	; (801b71c <nk_widget_fitting+0xa8>)
 801b698:	21be      	movs	r1, #190	; 0xbe
 801b69a:	4821      	ldr	r0, [pc, #132]	; (801b720 <nk_widget_fitting+0xac>)
 801b69c:	f001 f8de 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b6a6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d105      	bne.n	801b6ba <nk_widget_fitting+0x46>
 801b6ae:	4b1d      	ldr	r3, [pc, #116]	; (801b724 <nk_widget_fitting+0xb0>)
 801b6b0:	4a1a      	ldr	r2, [pc, #104]	; (801b71c <nk_widget_fitting+0xa8>)
 801b6b2:	21bf      	movs	r1, #191	; 0xbf
 801b6b4:	481a      	ldr	r0, [pc, #104]	; (801b720 <nk_widget_fitting+0xac>)
 801b6b6:	f001 f8d1 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b6c0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b6c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d105      	bne.n	801b6d8 <nk_widget_fitting+0x64>
 801b6cc:	4b16      	ldr	r3, [pc, #88]	; (801b728 <nk_widget_fitting+0xb4>)
 801b6ce:	4a13      	ldr	r2, [pc, #76]	; (801b71c <nk_widget_fitting+0xa8>)
 801b6d0:	21c0      	movs	r1, #192	; 0xc0
 801b6d2:	4813      	ldr	r0, [pc, #76]	; (801b720 <nk_widget_fitting+0xac>)
 801b6d4:	f001 f8c2 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b6d8:	68bb      	ldr	r3, [r7, #8]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d00f      	beq.n	801b6fe <nk_widget_fitting+0x8a>
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b6e4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d008      	beq.n	801b6fe <nk_widget_fitting+0x8a>
 801b6ec:	68bb      	ldr	r3, [r7, #8]
 801b6ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b6f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d101      	bne.n	801b702 <nk_widget_fitting+0x8e>
        return NK_WIDGET_INVALID;
 801b6fe:	2300      	movs	r3, #0
 801b700:	e006      	b.n	801b710 <nk_widget_fitting+0x9c>

    state = nk_widget(bounds, ctx);
 801b702:	68b9      	ldr	r1, [r7, #8]
 801b704:	68f8      	ldr	r0, [r7, #12]
 801b706:	f7ff fe09 	bl	801b31c <nk_widget>
 801b70a:	4603      	mov	r3, r0
 801b70c:	75fb      	strb	r3, [r7, #23]
    return state;
 801b70e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b710:	4618      	mov	r0, r3
 801b712:	3718      	adds	r7, #24
 801b714:	46bd      	mov	sp, r7
 801b716:	bd80      	pop	{r7, pc}
 801b718:	08020d0c 	.word	0x08020d0c
 801b71c:	08021934 	.word	0x08021934
 801b720:	08020d10 	.word	0x08020d10
 801b724:	08020d2c 	.word	0x08020d2c
 801b728:	08020d3c 	.word	0x08020d3c

0801b72c <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b084      	sub	sp, #16
 801b730:	af00      	add	r7, sp, #0
 801b732:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801b734:	6878      	ldr	r0, [r7, #4]
 801b736:	f7f7 fabd 	bl	8012cb4 <nk_create_page_element>
 801b73a:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d101      	bne.n	801b746 <nk_create_window+0x1a>
 801b742:	2300      	movs	r3, #0
 801b744:	e007      	b.n	801b756 <nk_create_window+0x2a>
    elem->data.win.seq = ctx->seq;
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b74c:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	601a      	str	r2, [r3, #0]
    return &elem->data.win;
 801b754:	68fb      	ldr	r3, [r7, #12]
}
 801b756:	4618      	mov	r0, r3
 801b758:	3710      	adds	r7, #16
 801b75a:	46bd      	mov	sp, r7
 801b75c:	bd80      	pop	{r7, pc}

0801b75e <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 801b75e:	b580      	push	{r7, lr}
 801b760:	b086      	sub	sp, #24
 801b762:	af00      	add	r7, sp, #0
 801b764:	6078      	str	r0, [r7, #4]
 801b766:	6039      	str	r1, [r7, #0]
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 801b768:	683b      	ldr	r3, [r7, #0]
 801b76a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b76e:	617b      	str	r3, [r7, #20]
    if (win->popup.win) {
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801b776:	2b00      	cmp	r3, #0
 801b778:	d00a      	beq.n	801b790 <nk_free_window+0x32>
        nk_free_window(ctx, win->popup.win);
 801b77a:	683b      	ldr	r3, [r7, #0]
 801b77c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801b780:	4619      	mov	r1, r3
 801b782:	6878      	ldr	r0, [r7, #4]
 801b784:	f7ff ffeb 	bl	801b75e <nk_free_window>
        win->popup.win = 0;
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	2200      	movs	r2, #0
 801b78c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    }
    win->next = 0;
 801b790:	683b      	ldr	r3, [r7, #0]
 801b792:	2200      	movs	r2, #0
 801b794:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	2200      	movs	r2, #0
 801b79c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    while (it) {
 801b7a0:	e017      	b.n	801b7d2 <nk_free_window+0x74>
        /*free window state tables */
        struct nk_table *n = it->next;
 801b7a2:	697b      	ldr	r3, [r7, #20]
 801b7a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801b7a8:	60bb      	str	r3, [r7, #8]
        nk_remove_table(win, it);
 801b7aa:	6979      	ldr	r1, [r7, #20]
 801b7ac:	6838      	ldr	r0, [r7, #0]
 801b7ae:	f7fe f8fc 	bl	80199aa <nk_remove_table>
        nk_free_table(ctx, it);
 801b7b2:	6979      	ldr	r1, [r7, #20]
 801b7b4:	6878      	ldr	r0, [r7, #4]
 801b7b6:	f7fe f8a6 	bl	8019906 <nk_free_table>
        if (it == win->tables)
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801b7c0:	697a      	ldr	r2, [r7, #20]
 801b7c2:	429a      	cmp	r2, r3
 801b7c4:	d103      	bne.n	801b7ce <nk_free_window+0x70>
            win->tables = n;
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	68ba      	ldr	r2, [r7, #8]
 801b7ca:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        it = n;
 801b7ce:	68bb      	ldr	r3, [r7, #8]
 801b7d0:	617b      	str	r3, [r7, #20]
    while (it) {
 801b7d2:	697b      	ldr	r3, [r7, #20]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d1e4      	bne.n	801b7a2 <nk_free_window+0x44>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	613b      	str	r3, [r7, #16]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	60fb      	str	r3, [r7, #12]
    nk_free_page_element(ctx, pe);}
 801b7e0:	68f9      	ldr	r1, [r7, #12]
 801b7e2:	6878      	ldr	r0, [r7, #4]
 801b7e4:	f7f7 fafd 	bl	8012de2 <nk_free_page_element>
}
 801b7e8:	bf00      	nop
 801b7ea:	3718      	adds	r7, #24
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}

0801b7f0 <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	b086      	sub	sp, #24
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	60f8      	str	r0, [r7, #12]
 801b7f8:	60b9      	str	r1, [r7, #8]
 801b7fa:	607a      	str	r2, [r7, #4]
    struct nk_window *iter;
    iter = ctx->begin;
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b802:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801b806:	617b      	str	r3, [r7, #20]
    while (iter) {
 801b808:	e026      	b.n	801b858 <nk_find_window+0x68>
        NK_ASSERT(iter != iter->next);
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801b810:	697a      	ldr	r2, [r7, #20]
 801b812:	429a      	cmp	r2, r3
 801b814:	d105      	bne.n	801b822 <nk_find_window+0x32>
 801b816:	4b14      	ldr	r3, [pc, #80]	; (801b868 <nk_find_window+0x78>)
 801b818:	4a14      	ldr	r2, [pc, #80]	; (801b86c <nk_find_window+0x7c>)
 801b81a:	2133      	movs	r1, #51	; 0x33
 801b81c:	4814      	ldr	r0, [pc, #80]	; (801b870 <nk_find_window+0x80>)
 801b81e:	f001 f81d 	bl	801c85c <__assert_func>
        if (iter->name == hash) {
 801b822:	697b      	ldr	r3, [r7, #20]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	68ba      	ldr	r2, [r7, #8]
 801b828:	429a      	cmp	r2, r3
 801b82a:	d111      	bne.n	801b850 <nk_find_window+0x60>
            int max_len = nk_strlen(iter->name_string);
 801b82c:	697b      	ldr	r3, [r7, #20]
 801b82e:	3308      	adds	r3, #8
 801b830:	4618      	mov	r0, r3
 801b832:	f7ff fb81 	bl	801af38 <nk_strlen>
 801b836:	6138      	str	r0, [r7, #16]
            if (!nk_stricmpn(iter->name_string, name, max_len))
 801b838:	697b      	ldr	r3, [r7, #20]
 801b83a:	3308      	adds	r3, #8
 801b83c:	693a      	ldr	r2, [r7, #16]
 801b83e:	6879      	ldr	r1, [r7, #4]
 801b840:	4618      	mov	r0, r3
 801b842:	f7ff fb9f 	bl	801af84 <nk_stricmpn>
 801b846:	4603      	mov	r3, r0
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d101      	bne.n	801b850 <nk_find_window+0x60>
                return iter;
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	e007      	b.n	801b860 <nk_find_window+0x70>
        }
        iter = iter->next;
 801b850:	697b      	ldr	r3, [r7, #20]
 801b852:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801b856:	617b      	str	r3, [r7, #20]
    while (iter) {
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1d5      	bne.n	801b80a <nk_find_window+0x1a>
    }
    return 0;
 801b85e:	2300      	movs	r3, #0
}
 801b860:	4618      	mov	r0, r3
 801b862:	3718      	adds	r7, #24
 801b864:	46bd      	mov	sp, r7
 801b866:	bd80      	pop	{r7, pc}
 801b868:	08020dc4 	.word	0x08020dc4
 801b86c:	08021948 	.word	0x08021948
 801b870:	08020dd8 	.word	0x08020dd8

0801b874 <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 801b874:	b580      	push	{r7, lr}
 801b876:	b086      	sub	sp, #24
 801b878:	af00      	add	r7, sp, #0
 801b87a:	60f8      	str	r0, [r7, #12]
 801b87c:	60b9      	str	r1, [r7, #8]
 801b87e:	4613      	mov	r3, r2
 801b880:	71fb      	strb	r3, [r7, #7]
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d105      	bne.n	801b894 <nk_insert_window+0x20>
 801b888:	4b6f      	ldr	r3, [pc, #444]	; (801ba48 <nk_insert_window+0x1d4>)
 801b88a:	4a70      	ldr	r2, [pc, #448]	; (801ba4c <nk_insert_window+0x1d8>)
 801b88c:	2142      	movs	r1, #66	; 0x42
 801b88e:	4870      	ldr	r0, [pc, #448]	; (801ba50 <nk_insert_window+0x1dc>)
 801b890:	f000 ffe4 	bl	801c85c <__assert_func>
    NK_ASSERT(win);
 801b894:	68bb      	ldr	r3, [r7, #8]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d105      	bne.n	801b8a6 <nk_insert_window+0x32>
 801b89a:	4b6e      	ldr	r3, [pc, #440]	; (801ba54 <nk_insert_window+0x1e0>)
 801b89c:	4a6b      	ldr	r2, [pc, #428]	; (801ba4c <nk_insert_window+0x1d8>)
 801b89e:	2143      	movs	r1, #67	; 0x43
 801b8a0:	486b      	ldr	r0, [pc, #428]	; (801ba50 <nk_insert_window+0x1dc>)
 801b8a2:	f000 ffdb 	bl	801c85c <__assert_func>
    if (!win || !ctx) return;
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	f000 80c6 	beq.w	801ba3a <nk_insert_window+0x1c6>
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	f000 80c2 	beq.w	801ba3a <nk_insert_window+0x1c6>

    iter = ctx->begin;
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b8bc:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801b8c0:	617b      	str	r3, [r7, #20]
    while (iter) {
 801b8c2:	e01e      	b.n	801b902 <nk_insert_window+0x8e>
        NK_ASSERT(iter != iter->next);
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801b8ca:	697a      	ldr	r2, [r7, #20]
 801b8cc:	429a      	cmp	r2, r3
 801b8ce:	d105      	bne.n	801b8dc <nk_insert_window+0x68>
 801b8d0:	4b61      	ldr	r3, [pc, #388]	; (801ba58 <nk_insert_window+0x1e4>)
 801b8d2:	4a5e      	ldr	r2, [pc, #376]	; (801ba4c <nk_insert_window+0x1d8>)
 801b8d4:	2148      	movs	r1, #72	; 0x48
 801b8d6:	485e      	ldr	r0, [pc, #376]	; (801ba50 <nk_insert_window+0x1dc>)
 801b8d8:	f000 ffc0 	bl	801c85c <__assert_func>
        NK_ASSERT(iter != win);
 801b8dc:	697a      	ldr	r2, [r7, #20]
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d105      	bne.n	801b8f0 <nk_insert_window+0x7c>
 801b8e4:	4b5d      	ldr	r3, [pc, #372]	; (801ba5c <nk_insert_window+0x1e8>)
 801b8e6:	4a59      	ldr	r2, [pc, #356]	; (801ba4c <nk_insert_window+0x1d8>)
 801b8e8:	2149      	movs	r1, #73	; 0x49
 801b8ea:	4859      	ldr	r0, [pc, #356]	; (801ba50 <nk_insert_window+0x1dc>)
 801b8ec:	f000 ffb6 	bl	801c85c <__assert_func>
        if (iter == win) return;
 801b8f0:	697a      	ldr	r2, [r7, #20]
 801b8f2:	68bb      	ldr	r3, [r7, #8]
 801b8f4:	429a      	cmp	r2, r3
 801b8f6:	f000 80a2 	beq.w	801ba3e <nk_insert_window+0x1ca>
        iter = iter->next;
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801b900:	617b      	str	r3, [r7, #20]
    while (iter) {
 801b902:	697b      	ldr	r3, [r7, #20]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d1dd      	bne.n	801b8c4 <nk_insert_window+0x50>
    }

    if (!ctx->begin) {
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b90e:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801b912:	2b00      	cmp	r3, #0
 801b914:	d11d      	bne.n	801b952 <nk_insert_window+0xde>
        win->next = 0;
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	2200      	movs	r2, #0
 801b91a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801b91e:	68bb      	ldr	r3, [r7, #8]
 801b920:	2200      	movs	r2, #0
 801b922:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b92c:	461a      	mov	r2, r3
 801b92e:	68bb      	ldr	r3, [r7, #8]
 801b930:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->end = win;
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b93a:	461a      	mov	r2, r3
 801b93c:	68bb      	ldr	r3, [r7, #8]
 801b93e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->count = 1;
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b948:	461a      	mov	r2, r3
 801b94a:	2301      	movs	r3, #1
 801b94c:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
        return;
 801b950:	e076      	b.n	801ba40 <nk_insert_window+0x1cc>
    }
    if (loc == NK_INSERT_BACK) {
 801b952:	79fb      	ldrb	r3, [r7, #7]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d13b      	bne.n	801b9d0 <nk_insert_window+0x15c>
        struct nk_window *end;
        end = ctx->end;
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b95e:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801b962:	613b      	str	r3, [r7, #16]
        end->flags |= NK_WINDOW_ROM;
 801b964:	693b      	ldr	r3, [r7, #16]
 801b966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b968:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801b96c:	693b      	ldr	r3, [r7, #16]
 801b96e:	649a      	str	r2, [r3, #72]	; 0x48
        end->next = win;
 801b970:	693b      	ldr	r3, [r7, #16]
 801b972:	68ba      	ldr	r2, [r7, #8]
 801b974:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = ctx->end;
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b97e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = 0;
 801b988:	68bb      	ldr	r3, [r7, #8]
 801b98a:	2200      	movs	r2, #0
 801b98c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ctx->end = win;
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b996:	461a      	mov	r2, r3
 801b998:	68bb      	ldr	r3, [r7, #8]
 801b99a:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9a4:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801b9a8:	68fa      	ldr	r2, [r7, #12]
 801b9aa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801b9ae:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9b8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801b9bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9c4:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801b9c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801b9cc:	649a      	str	r2, [r3, #72]	; 0x48
 801b9ce:	e028      	b.n	801ba22 <nk_insert_window+0x1ae>
    } else {
        /*ctx->end->flags |= NK_WINDOW_ROM;*/
        ctx->begin->prev = win;
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9d6:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801b9da:	68ba      	ldr	r2, [r7, #8]
 801b9dc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = ctx->begin;
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9e6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801b9f0:	68bb      	ldr	r3, [r7, #8]
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9fe:	461a      	mov	r2, r3
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ba0c:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801ba10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ba18:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801ba1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ba20:	649a      	str	r2, [r3, #72]	; 0x48
    }
    ctx->count++;
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ba28:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801ba2c:	3301      	adds	r3, #1
 801ba2e:	68fa      	ldr	r2, [r7, #12]
 801ba30:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801ba34:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
 801ba38:	e002      	b.n	801ba40 <nk_insert_window+0x1cc>
    if (!win || !ctx) return;
 801ba3a:	bf00      	nop
 801ba3c:	e000      	b.n	801ba40 <nk_insert_window+0x1cc>
        if (iter == win) return;
 801ba3e:	bf00      	nop
}
 801ba40:	3718      	adds	r7, #24
 801ba42:	46bd      	mov	sp, r7
 801ba44:	bd80      	pop	{r7, pc}
 801ba46:	bf00      	nop
 801ba48:	08020df4 	.word	0x08020df4
 801ba4c:	08021958 	.word	0x08021958
 801ba50:	08020dd8 	.word	0x08020dd8
 801ba54:	08020df8 	.word	0x08020df8
 801ba58:	08020dc4 	.word	0x08020dc4
 801ba5c:	08020dfc 	.word	0x08020dfc

0801ba60 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
 801ba60:	b480      	push	{r7}
 801ba62:	b083      	sub	sp, #12
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
 801ba68:	6039      	str	r1, [r7, #0]
    if (win == ctx->begin || win == ctx->end) {
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ba70:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801ba74:	683a      	ldr	r2, [r7, #0]
 801ba76:	429a      	cmp	r2, r3
 801ba78:	d007      	beq.n	801ba8a <nk_remove_window+0x2a>
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ba80:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801ba84:	683a      	ldr	r2, [r7, #0]
 801ba86:	429a      	cmp	r2, r3
 801ba88:	d136      	bne.n	801baf8 <nk_remove_window+0x98>
        if (win == ctx->begin) {
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ba90:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801ba94:	683a      	ldr	r2, [r7, #0]
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d112      	bne.n	801bac0 <nk_remove_window+0x60>
            ctx->begin = win->next;
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801baa0:	687a      	ldr	r2, [r7, #4]
 801baa2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801baa6:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d005      	beq.n	801bac0 <nk_remove_window+0x60>
                win->next->prev = 0;
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801baba:	2200      	movs	r2, #0
 801babc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
        if (win == ctx->end) {
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bac6:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801baca:	683a      	ldr	r2, [r7, #0]
 801bacc:	429a      	cmp	r2, r3
 801bace:	d12e      	bne.n	801bb2e <nk_remove_window+0xce>
            ctx->end = win->prev;
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801bad6:	687a      	ldr	r2, [r7, #4]
 801bad8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801badc:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 801bae0:	683b      	ldr	r3, [r7, #0]
 801bae2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d021      	beq.n	801bb2e <nk_remove_window+0xce>
                win->prev->next = 0;
 801baea:	683b      	ldr	r3, [r7, #0]
 801baec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801baf0:	2200      	movs	r2, #0
 801baf2:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        if (win == ctx->end) {
 801baf6:	e01a      	b.n	801bb2e <nk_remove_window+0xce>
        }
    } else {
        if (win->next)
 801baf8:	683b      	ldr	r3, [r7, #0]
 801bafa:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d007      	beq.n	801bb12 <nk_remove_window+0xb2>
            win->next->prev = win->prev;
 801bb02:	683b      	ldr	r3, [r7, #0]
 801bb04:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801bb08:	683a      	ldr	r2, [r7, #0]
 801bb0a:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 801bb0e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 801bb12:	683b      	ldr	r3, [r7, #0]
 801bb14:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d009      	beq.n	801bb30 <nk_remove_window+0xd0>
            win->prev->next = win->next;
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801bb22:	683a      	ldr	r2, [r7, #0]
 801bb24:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 801bb28:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 801bb2c:	e000      	b.n	801bb30 <nk_remove_window+0xd0>
        if (win == ctx->end) {
 801bb2e:	bf00      	nop
    }
    if (win == ctx->active || !ctx->active) {
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bb36:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801bb3a:	683a      	ldr	r2, [r7, #0]
 801bb3c:	429a      	cmp	r2, r3
 801bb3e:	d006      	beq.n	801bb4e <nk_remove_window+0xee>
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bb46:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d11e      	bne.n	801bb8c <nk_remove_window+0x12c>
        ctx->active = ctx->end;
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bb54:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801bb58:	687a      	ldr	r2, [r7, #4]
 801bb5a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801bb5e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bb68:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d00d      	beq.n	801bb8c <nk_remove_window+0x12c>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bb76:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801bb7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bb82:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801bb86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801bb8a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    win->next = 0;
 801bb8c:	683b      	ldr	r3, [r7, #0]
 801bb8e:	2200      	movs	r2, #0
 801bb90:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801bb94:	683b      	ldr	r3, [r7, #0]
 801bb96:	2200      	movs	r2, #0
 801bb98:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    ctx->count--;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bba2:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801bba6:	3b01      	subs	r3, #1
 801bba8:	687a      	ldr	r2, [r7, #4]
 801bbaa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801bbae:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
}
 801bbb2:	bf00      	nop
 801bbb4:	370c      	adds	r7, #12
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbbc:	4770      	bx	lr

0801bbbe <nk_begin>:
NK_API nk_bool
nk_begin(struct nk_context *ctx, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801bbbe:	b580      	push	{r7, lr}
 801bbc0:	b088      	sub	sp, #32
 801bbc2:	af00      	add	r7, sp, #0
 801bbc4:	61f8      	str	r0, [r7, #28]
 801bbc6:	61b9      	str	r1, [r7, #24]
 801bbc8:	eeb0 6a40 	vmov.f32	s12, s0
 801bbcc:	eef0 6a60 	vmov.f32	s13, s1
 801bbd0:	eeb0 7a41 	vmov.f32	s14, s2
 801bbd4:	eef0 7a61 	vmov.f32	s15, s3
 801bbd8:	607a      	str	r2, [r7, #4]
 801bbda:	ed87 6a02 	vstr	s12, [r7, #8]
 801bbde:	edc7 6a03 	vstr	s13, [r7, #12]
 801bbe2:	ed87 7a04 	vstr	s14, [r7, #16]
 801bbe6:	edc7 7a05 	vstr	s15, [r7, #20]
    return nk_begin_titled(ctx, title, title, bounds, flags);
 801bbea:	ed97 6a02 	vldr	s12, [r7, #8]
 801bbee:	edd7 6a03 	vldr	s13, [r7, #12]
 801bbf2:	ed97 7a04 	vldr	s14, [r7, #16]
 801bbf6:	edd7 7a05 	vldr	s15, [r7, #20]
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	eeb0 0a46 	vmov.f32	s0, s12
 801bc00:	eef0 0a66 	vmov.f32	s1, s13
 801bc04:	eeb0 1a47 	vmov.f32	s2, s14
 801bc08:	eef0 1a67 	vmov.f32	s3, s15
 801bc0c:	69ba      	ldr	r2, [r7, #24]
 801bc0e:	69b9      	ldr	r1, [r7, #24]
 801bc10:	69f8      	ldr	r0, [r7, #28]
 801bc12:	f000 f805 	bl	801bc20 <nk_begin_titled>
 801bc16:	4603      	mov	r3, r0
}
 801bc18:	4618      	mov	r0, r3
 801bc1a:	3720      	adds	r7, #32
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bd80      	pop	{r7, pc}

0801bc20 <nk_begin_titled>:
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801bc20:	b590      	push	{r4, r7, lr}
 801bc22:	b09f      	sub	sp, #124	; 0x7c
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	61f8      	str	r0, [r7, #28]
 801bc28:	61b9      	str	r1, [r7, #24]
 801bc2a:	617a      	str	r2, [r7, #20]
 801bc2c:	eeb0 6a40 	vmov.f32	s12, s0
 801bc30:	eef0 6a60 	vmov.f32	s13, s1
 801bc34:	eeb0 7a41 	vmov.f32	s14, s2
 801bc38:	eef0 7a61 	vmov.f32	s15, s3
 801bc3c:	603b      	str	r3, [r7, #0]
 801bc3e:	ed87 6a01 	vstr	s12, [r7, #4]
 801bc42:	edc7 6a02 	vstr	s13, [r7, #8]
 801bc46:	ed87 7a03 	vstr	s14, [r7, #12]
 801bc4a:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *win;
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;
 801bc4e:	2300      	movs	r3, #0
 801bc50:	66fb      	str	r3, [r7, #108]	; 0x6c

    NK_ASSERT(ctx);
 801bc52:	69fb      	ldr	r3, [r7, #28]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d105      	bne.n	801bc64 <nk_begin_titled+0x44>
 801bc58:	4b8f      	ldr	r3, [pc, #572]	; (801be98 <nk_begin_titled+0x278>)
 801bc5a:	4a90      	ldr	r2, [pc, #576]	; (801be9c <nk_begin_titled+0x27c>)
 801bc5c:	2197      	movs	r1, #151	; 0x97
 801bc5e:	4890      	ldr	r0, [pc, #576]	; (801bea0 <nk_begin_titled+0x280>)
 801bc60:	f000 fdfc 	bl	801c85c <__assert_func>
    NK_ASSERT(name);
 801bc64:	69bb      	ldr	r3, [r7, #24]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d105      	bne.n	801bc76 <nk_begin_titled+0x56>
 801bc6a:	4b8e      	ldr	r3, [pc, #568]	; (801bea4 <nk_begin_titled+0x284>)
 801bc6c:	4a8b      	ldr	r2, [pc, #556]	; (801be9c <nk_begin_titled+0x27c>)
 801bc6e:	2198      	movs	r1, #152	; 0x98
 801bc70:	488b      	ldr	r0, [pc, #556]	; (801bea0 <nk_begin_titled+0x280>)
 801bc72:	f000 fdf3 	bl	801c85c <__assert_func>
    NK_ASSERT(title);
 801bc76:	697b      	ldr	r3, [r7, #20]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d105      	bne.n	801bc88 <nk_begin_titled+0x68>
 801bc7c:	4b8a      	ldr	r3, [pc, #552]	; (801bea8 <nk_begin_titled+0x288>)
 801bc7e:	4a87      	ldr	r2, [pc, #540]	; (801be9c <nk_begin_titled+0x27c>)
 801bc80:	2199      	movs	r1, #153	; 0x99
 801bc82:	4887      	ldr	r0, [pc, #540]	; (801bea0 <nk_begin_titled+0x280>)
 801bc84:	f000 fdea 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 801bc88:	69fb      	ldr	r3, [r7, #28]
 801bc8a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d005      	beq.n	801bc9e <nk_begin_titled+0x7e>
 801bc92:	69fb      	ldr	r3, [r7, #28]
 801bc94:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801bc98:	689b      	ldr	r3, [r3, #8]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d105      	bne.n	801bcaa <nk_begin_titled+0x8a>
 801bc9e:	4b83      	ldr	r3, [pc, #524]	; (801beac <nk_begin_titled+0x28c>)
 801bca0:	4a7e      	ldr	r2, [pc, #504]	; (801be9c <nk_begin_titled+0x27c>)
 801bca2:	219a      	movs	r1, #154	; 0x9a
 801bca4:	487e      	ldr	r0, [pc, #504]	; (801bea0 <nk_begin_titled+0x280>)
 801bca6:	f000 fdd9 	bl	801c85c <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 801bcaa:	69fb      	ldr	r3, [r7, #28]
 801bcac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bcb0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d005      	beq.n	801bcc4 <nk_begin_titled+0xa4>
 801bcb8:	4b7d      	ldr	r3, [pc, #500]	; (801beb0 <nk_begin_titled+0x290>)
 801bcba:	4a78      	ldr	r2, [pc, #480]	; (801be9c <nk_begin_titled+0x27c>)
 801bcbc:	219b      	movs	r1, #155	; 0x9b
 801bcbe:	4878      	ldr	r0, [pc, #480]	; (801bea0 <nk_begin_titled+0x280>)
 801bcc0:	f000 fdcc 	bl	801c85c <__assert_func>
    if (!ctx || ctx->current || !title || !name)
 801bcc4:	69fb      	ldr	r3, [r7, #28]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d00c      	beq.n	801bce4 <nk_begin_titled+0xc4>
 801bcca:	69fb      	ldr	r3, [r7, #28]
 801bccc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bcd0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d105      	bne.n	801bce4 <nk_begin_titled+0xc4>
 801bcd8:	697b      	ldr	r3, [r7, #20]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d002      	beq.n	801bce4 <nk_begin_titled+0xc4>
 801bcde:	69bb      	ldr	r3, [r7, #24]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d101      	bne.n	801bce8 <nk_begin_titled+0xc8>
        return 0;
 801bce4:	2300      	movs	r3, #0
 801bce6:	e3d7      	b.n	801c498 <nk_begin_titled+0x878>

    /* find or create window */
    style = &ctx->style;
 801bce8:	69fb      	ldr	r3, [r7, #28]
 801bcea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801bcee:	66bb      	str	r3, [r7, #104]	; 0x68
    name_len = (int)nk_strlen(name);
 801bcf0:	69b8      	ldr	r0, [r7, #24]
 801bcf2:	f7ff f921 	bl	801af38 <nk_strlen>
 801bcf6:	6678      	str	r0, [r7, #100]	; 0x64
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 801bcf8:	2240      	movs	r2, #64	; 0x40
 801bcfa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801bcfc:	69b8      	ldr	r0, [r7, #24]
 801bcfe:	f7ff f99b 	bl	801b038 <nk_murmur_hash>
 801bd02:	6638      	str	r0, [r7, #96]	; 0x60
    win = nk_find_window(ctx, name_hash, name);
 801bd04:	69ba      	ldr	r2, [r7, #24]
 801bd06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801bd08:	69f8      	ldr	r0, [r7, #28]
 801bd0a:	f7ff fd71 	bl	801b7f0 <nk_find_window>
 801bd0e:	6778      	str	r0, [r7, #116]	; 0x74
    if (!win) {
 801bd10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d160      	bne.n	801bdd8 <nk_begin_titled+0x1b8>
        /* create new window */
        nk_size name_length = (nk_size)name_len;
 801bd16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd18:	65fb      	str	r3, [r7, #92]	; 0x5c
        win = (struct nk_window*)nk_create_window(ctx);
 801bd1a:	69f8      	ldr	r0, [r7, #28]
 801bd1c:	f7ff fd06 	bl	801b72c <nk_create_window>
 801bd20:	6778      	str	r0, [r7, #116]	; 0x74
        NK_ASSERT(win);
 801bd22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d105      	bne.n	801bd34 <nk_begin_titled+0x114>
 801bd28:	4b62      	ldr	r3, [pc, #392]	; (801beb4 <nk_begin_titled+0x294>)
 801bd2a:	4a5c      	ldr	r2, [pc, #368]	; (801be9c <nk_begin_titled+0x27c>)
 801bd2c:	21a8      	movs	r1, #168	; 0xa8
 801bd2e:	485c      	ldr	r0, [pc, #368]	; (801bea0 <nk_begin_titled+0x280>)
 801bd30:	f000 fd94 	bl	801c85c <__assert_func>
        if (!win) return 0;
 801bd34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d101      	bne.n	801bd3e <nk_begin_titled+0x11e>
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	e3ac      	b.n	801c498 <nk_begin_titled+0x878>

        if (flags & NK_WINDOW_BACKGROUND)
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d005      	beq.n	801bd54 <nk_begin_titled+0x134>
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 801bd48:	2201      	movs	r2, #1
 801bd4a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bd4c:	69f8      	ldr	r0, [r7, #28]
 801bd4e:	f7ff fd91 	bl	801b874 <nk_insert_window>
 801bd52:	e004      	b.n	801bd5e <nk_begin_titled+0x13e>
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 801bd54:	2200      	movs	r2, #0
 801bd56:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bd58:	69f8      	ldr	r0, [r7, #28]
 801bd5a:	f7ff fd8b 	bl	801b874 <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 801bd5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd60:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801bd64:	69fb      	ldr	r3, [r7, #28]
 801bd66:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801bd6a:	330c      	adds	r3, #12
 801bd6c:	2201      	movs	r2, #1
 801bd6e:	4619      	mov	r1, r3
 801bd70:	f7f3 fcac 	bl	800f6cc <nk_command_buffer_init>

        win->flags = flags;
 801bd74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd76:	683a      	ldr	r2, [r7, #0]
 801bd78:	649a      	str	r2, [r3, #72]	; 0x48
        win->bounds = bounds;
 801bd7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd7c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801bd80:	1d3b      	adds	r3, r7, #4
 801bd82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bd84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        win->name = name_hash;
 801bd88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bd8c:	605a      	str	r2, [r3, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 801bd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd90:	2b3f      	cmp	r3, #63	; 0x3f
 801bd92:	bf28      	it	cs
 801bd94:	233f      	movcs	r3, #63	; 0x3f
 801bd96:	65fb      	str	r3, [r7, #92]	; 0x5c
        NK_MEMCPY(win->name_string, name, name_length);
 801bd98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd9a:	3308      	adds	r3, #8
 801bd9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bd9e:	69b9      	ldr	r1, [r7, #24]
 801bda0:	4618      	mov	r0, r3
 801bda2:	f7fe ff5b 	bl	801ac5c <nk_memcopy>
        win->name_string[name_length] = 0;
 801bda6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801bda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bdaa:	4413      	add	r3, r2
 801bdac:	3308      	adds	r3, #8
 801bdae:	2200      	movs	r2, #0
 801bdb0:	701a      	strb	r2, [r3, #0]
        win->popup.win = 0;
 801bdb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdb4:	2200      	movs	r2, #0
 801bdb6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        if (!ctx->active)
 801bdba:	69fb      	ldr	r3, [r7, #28]
 801bdbc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bdc0:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d153      	bne.n	801be70 <nk_begin_titled+0x250>
            ctx->active = win;
 801bdc8:	69fb      	ldr	r3, [r7, #28]
 801bdca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bdce:	461a      	mov	r2, r3
 801bdd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdd2:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
 801bdd6:	e04b      	b.n	801be70 <nk_begin_titled+0x250>
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 801bdd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bddc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801bde0:	f023 0307 	bic.w	r3, r3, #7
 801bde4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801bde6:	6493      	str	r3, [r2, #72]	; 0x48
        win->flags |= flags;
 801bde8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bdec:	683b      	ldr	r3, [r7, #0]
 801bdee:	431a      	orrs	r2, r3
 801bdf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdf2:	649a      	str	r2, [r3, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 801bdf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bdf8:	f003 0306 	and.w	r3, r3, #6
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d106      	bne.n	801be0e <nk_begin_titled+0x1ee>
            win->bounds = bounds;
 801be00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be02:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801be06:	1d3b      	adds	r3, r7, #4
 801be08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801be0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 801be0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be10:	681a      	ldr	r2, [r3, #0]
 801be12:	69fb      	ldr	r3, [r7, #28]
 801be14:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801be18:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801be1c:	429a      	cmp	r2, r3
 801be1e:	d105      	bne.n	801be2c <nk_begin_titled+0x20c>
 801be20:	4b25      	ldr	r3, [pc, #148]	; (801beb8 <nk_begin_titled+0x298>)
 801be22:	4a1e      	ldr	r2, [pc, #120]	; (801be9c <nk_begin_titled+0x27c>)
 801be24:	21c6      	movs	r1, #198	; 0xc6
 801be26:	481e      	ldr	r0, [pc, #120]	; (801bea0 <nk_begin_titled+0x280>)
 801be28:	f000 fd18 	bl	801c85c <__assert_func>
        win->seq = ctx->seq;
 801be2c:	69fb      	ldr	r3, [r7, #28]
 801be2e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801be32:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801be36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be38:	601a      	str	r2, [r3, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 801be3a:	69fb      	ldr	r3, [r7, #28]
 801be3c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801be40:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801be44:	2b00      	cmp	r3, #0
 801be46:	d113      	bne.n	801be70 <nk_begin_titled+0x250>
 801be48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801be50:	2b00      	cmp	r3, #0
 801be52:	d10d      	bne.n	801be70 <nk_begin_titled+0x250>
            ctx->active = win;
 801be54:	69fb      	ldr	r3, [r7, #28]
 801be56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801be5a:	461a      	mov	r2, r3
 801be5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be5e:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = win;
 801be62:	69fb      	ldr	r3, [r7, #28]
 801be64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801be68:	461a      	mov	r2, r3
 801be6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be6c:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 801be70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d01f      	beq.n	801bebc <nk_begin_titled+0x29c>
        ctx->current = win;
 801be7c:	69fb      	ldr	r3, [r7, #28]
 801be7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801be82:	461a      	mov	r2, r3
 801be84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be86:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        win->layout = 0;
 801be8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be8c:	2200      	movs	r2, #0
 801be8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 801be92:	2300      	movs	r3, #0
 801be94:	e300      	b.n	801c498 <nk_begin_titled+0x878>
 801be96:	bf00      	nop
 801be98:	08020df4 	.word	0x08020df4
 801be9c:	0802196c 	.word	0x0802196c
 801bea0:	08020dd8 	.word	0x08020dd8
 801bea4:	08020e08 	.word	0x08020e08
 801bea8:	08020e10 	.word	0x08020e10
 801beac:	08020e18 	.word	0x08020e18
 801beb0:	08020e74 	.word	0x08020e74
 801beb4:	08020df8 	.word	0x08020df8
 801beb8:	08020eb4 	.word	0x08020eb4
    } else nk_start(ctx, win);
 801bebc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bebe:	69f8      	ldr	r0, [r7, #28]
 801bec0:	f7f2 ff1a 	bl	800ecf8 <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 801bec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801becc:	2b00      	cmp	r3, #0
 801bece:	f040 82c2 	bne.w	801c456 <nk_begin_titled+0x836>
 801bed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801beda:	2b00      	cmp	r3, #0
 801bedc:	f040 82bb 	bne.w	801c456 <nk_begin_titled+0x836>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
 801bee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bee2:	673b      	str	r3, [r7, #112]	; 0x70
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801bee4:	69fb      	ldr	r3, [r7, #28]
 801bee6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801beea:	ed93 7a01 	vldr	s14, [r3, #4]
 801beee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bef4:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801bef8:	edd3 7a00 	vldr	s15, [r3]
 801befc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801bf00:	ee37 7a27 	vadd.f32	s14, s14, s15
            (2.0f * style->window.header.label_padding.y);
 801bf04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf0a:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801bf0e:	edd3 7a00 	vldr	s15, [r3]
 801bf12:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801bf16:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bf1a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 801bf1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bf20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d107      	bne.n	801bf3a <nk_begin_titled+0x31a>
 801bf2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bf2c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801bf30:	334c      	adds	r3, #76	; 0x4c
 801bf32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801bf38:	e022      	b.n	801bf80 <nk_begin_titled+0x360>
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 801bf3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bf3c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801bf40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bf42:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801bf46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bf48:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801bf4c:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801bf50:	eeb0 1a66 	vmov.f32	s2, s13
 801bf54:	eef0 0a47 	vmov.f32	s1, s14
 801bf58:	eeb0 0a67 	vmov.f32	s0, s15
 801bf5c:	f7f6 fb64 	bl	8012628 <nk_rect>
 801bf60:	eeb0 6a40 	vmov.f32	s12, s0
 801bf64:	eef0 6a60 	vmov.f32	s13, s1
 801bf68:	eeb0 7a41 	vmov.f32	s14, s2
 801bf6c:	eef0 7a61 	vmov.f32	s15, s3
 801bf70:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 801bf74:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 801bf78:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 801bf7c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 801bf80:	69fb      	ldr	r3, [r7, #28]
 801bf82:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801bf86:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801bf8a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801bf8e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801bf92:	2201      	movs	r2, #1
 801bf94:	eeb0 0a46 	vmov.f32	s0, s12
 801bf98:	eef0 0a66 	vmov.f32	s1, s13
 801bf9c:	eeb0 1a47 	vmov.f32	s2, s14
 801bfa0:	eef0 1a67 	vmov.f32	s3, s15
 801bfa4:	2100      	movs	r1, #0
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	f7f5 f9dc 	bl	8011364 <nk_input_has_mouse_click_down_in_rect>
 801bfac:	6578      	str	r0, [r7, #84]	; 0x54
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 801bfae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d006      	beq.n	801bfc2 <nk_begin_titled+0x3a2>
 801bfb4:	69fb      	ldr	r3, [r7, #28]
 801bfb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d001      	beq.n	801bfc2 <nk_begin_titled+0x3a2>
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	e000      	b.n	801bfc4 <nk_begin_titled+0x3a4>
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	657b      	str	r3, [r7, #84]	; 0x54
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 801bfc6:	69fb      	ldr	r3, [r7, #28]
 801bfc8:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801bfcc:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801bfd0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801bfd4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801bfd8:	eeb0 0a46 	vmov.f32	s0, s12
 801bfdc:	eef0 0a66 	vmov.f32	s1, s13
 801bfe0:	eeb0 1a47 	vmov.f32	s2, s14
 801bfe4:	eef0 1a67 	vmov.f32	s3, s15
 801bfe8:	4618      	mov	r0, r3
 801bfea:	f7f5 fa02 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 801bfee:	6538      	str	r0, [r7, #80]	; 0x50
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 801bff0:	69fb      	ldr	r3, [r7, #28]
 801bff2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801bff6:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801bffa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801bffc:	429a      	cmp	r2, r3
 801bffe:	f000 80de 	beq.w	801c1be <nk_begin_titled+0x59e>
 801c002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c004:	2b00      	cmp	r3, #0
 801c006:	f000 80da 	beq.w	801c1be <nk_begin_titled+0x59e>
 801c00a:	69fb      	ldr	r3, [r7, #28]
 801c00c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801c010:	2b00      	cmp	r3, #0
 801c012:	f040 80d4 	bne.w	801c1be <nk_begin_titled+0x59e>
            iter = win->next;
 801c016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c018:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c01c:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801c01e:	e0c6      	b.n	801c1ae <nk_begin_titled+0x58e>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801c020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d107      	bne.n	801c03c <nk_begin_titled+0x41c>
 801c02c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c02e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801c032:	334c      	adds	r3, #76	; 0x4c
 801c034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c03a:	e022      	b.n	801c082 <nk_begin_titled+0x462>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801c03c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c03e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801c042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c044:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801c048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c04a:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801c04e:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801c052:	eeb0 1a66 	vmov.f32	s2, s13
 801c056:	eef0 0a47 	vmov.f32	s1, s14
 801c05a:	eeb0 0a67 	vmov.f32	s0, s15
 801c05e:	f7f6 fae3 	bl	8012628 <nk_rect>
 801c062:	eeb0 6a40 	vmov.f32	s12, s0
 801c066:	eef0 6a60 	vmov.f32	s13, s1
 801c06a:	eeb0 7a41 	vmov.f32	s14, s2
 801c06e:	eef0 7a61 	vmov.f32	s15, s3
 801c072:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 801c076:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 801c07a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 801c07e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801c082:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801c086:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801c08a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801c08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c09a:	d52c      	bpl.n	801c0f6 <nk_begin_titled+0x4d6>
 801c09c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801c0a0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801c0a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0b4:	d51f      	bpl.n	801c0f6 <nk_begin_titled+0x4d6>
 801c0b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801c0ba:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801c0be:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801c0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0ce:	d512      	bpl.n	801c0f6 <nk_begin_titled+0x4d6>
 801c0d0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801c0d4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c0d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801c0dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0e8:	d505      	bpl.n	801c0f6 <nk_begin_titled+0x4d6>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 801c0ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c0ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d060      	beq.n	801c1b8 <nk_begin_titled+0x598>
                    break;

                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801c0f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c0f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d052      	beq.n	801c1a6 <nk_begin_titled+0x586>
 801c100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c102:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801c106:	2b00      	cmp	r3, #0
 801c108:	d04d      	beq.n	801c1a6 <nk_begin_titled+0x586>
 801c10a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c10e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c112:	2b00      	cmp	r3, #0
 801c114:	d147      	bne.n	801c1a6 <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801c116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c118:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c11c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801c120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c122:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801c126:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801c12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801c12e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c136:	d536      	bpl.n	801c1a6 <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801c138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c13a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801c13e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c140:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c144:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801c148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c14a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c14e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801c152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c15e:	d522      	bpl.n	801c1a6 <nk_begin_titled+0x586>
 801c160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c162:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c166:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801c16a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801c16e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801c172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c17e:	d512      	bpl.n	801c1a6 <nk_begin_titled+0x586>
 801c180:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801c184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c186:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c18a:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801c18e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c190:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c194:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801c198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c19c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1a4:	d40a      	bmi.n	801c1bc <nk_begin_titled+0x59c>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801c1a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c1a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c1ac:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801c1ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	f47f af35 	bne.w	801c020 <nk_begin_titled+0x400>
 801c1b6:	e002      	b.n	801c1be <nk_begin_titled+0x59e>
                    break;
 801c1b8:	bf00      	nop
 801c1ba:	e000      	b.n	801c1be <nk_begin_titled+0x59e>
                    break;
 801c1bc:	bf00      	nop
            }
        }

        /* activate window if clicked */
        if (iter && inpanel && (win != ctx->end)) {
 801c1be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	f000 80db 	beq.w	801c37c <nk_begin_titled+0x75c>
 801c1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	f000 80d7 	beq.w	801c37c <nk_begin_titled+0x75c>
 801c1ce:	69fb      	ldr	r3, [r7, #28]
 801c1d0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c1d4:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c1d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	f000 80ce 	beq.w	801c37c <nk_begin_titled+0x75c>
            iter = win->next;
 801c1e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c1e2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c1e6:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801c1e8:	e0c0      	b.n	801c36c <nk_begin_titled+0x74c>
                /* try to find a panel with higher priority in the same position */
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801c1ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c1ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d107      	bne.n	801c206 <nk_begin_titled+0x5e6>
 801c1f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c1f8:	f107 0420 	add.w	r4, r7, #32
 801c1fc:	334c      	adds	r3, #76	; 0x4c
 801c1fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c204:	e022      	b.n	801c24c <nk_begin_titled+0x62c>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801c206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c208:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801c20c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c20e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801c212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c214:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801c218:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801c21c:	eeb0 1a66 	vmov.f32	s2, s13
 801c220:	eef0 0a47 	vmov.f32	s1, s14
 801c224:	eeb0 0a67 	vmov.f32	s0, s15
 801c228:	f7f6 f9fe 	bl	8012628 <nk_rect>
 801c22c:	eeb0 6a40 	vmov.f32	s12, s0
 801c230:	eef0 6a60 	vmov.f32	s13, s1
 801c234:	eeb0 7a41 	vmov.f32	s14, s2
 801c238:	eef0 7a61 	vmov.f32	s15, s3
 801c23c:	ed87 6a08 	vstr	s12, [r7, #32]
 801c240:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 801c244:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801c248:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 801c24c:	ed97 7a08 	vldr	s14, [r7, #32]
 801c250:	69fb      	ldr	r3, [r7, #28]
 801c252:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801c256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c25e:	d82b      	bhi.n	801c2b8 <nk_begin_titled+0x698>
 801c260:	69fb      	ldr	r3, [r7, #28]
 801c262:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801c266:	edd7 6a08 	vldr	s13, [r7, #32]
 801c26a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801c26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c27a:	d51d      	bpl.n	801c2b8 <nk_begin_titled+0x698>
 801c27c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c280:	69fb      	ldr	r3, [r7, #28]
 801c282:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801c286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c28e:	d813      	bhi.n	801c2b8 <nk_begin_titled+0x698>
 801c290:	69fb      	ldr	r3, [r7, #28]
 801c292:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801c296:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c29a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801c29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c2a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2aa:	d505      	bpl.n	801c2b8 <nk_begin_titled+0x698>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    !(iter->flags & NK_WINDOW_HIDDEN))
 801c2ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c2ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c2b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d05e      	beq.n	801c376 <nk_begin_titled+0x756>
                    break;
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801c2b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c2ba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d050      	beq.n	801c364 <nk_begin_titled+0x744>
 801c2c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c2c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d04b      	beq.n	801c364 <nk_begin_titled+0x744>
 801c2cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c2ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c2d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d145      	bne.n	801c364 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801c2d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c2da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c2de:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801c2e2:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801c2e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801c2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801c2ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2f6:	d535      	bpl.n	801c364 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801c2f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801c2fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c2fe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c302:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801c306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c308:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c30c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801c310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c31c:	d522      	bpl.n	801c364 <nk_begin_titled+0x744>
 801c31e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c320:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c324:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801c328:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801c32c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801c330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c33c:	d512      	bpl.n	801c364 <nk_begin_titled+0x744>
 801c33e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801c342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c344:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c348:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801c34c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c34e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c352:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801c356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c35a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c362:	d40a      	bmi.n	801c37a <nk_begin_titled+0x75a>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801c364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c366:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c36a:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801c36c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c36e:	2b00      	cmp	r3, #0
 801c370:	f47f af3b 	bne.w	801c1ea <nk_begin_titled+0x5ca>
 801c374:	e002      	b.n	801c37c <nk_begin_titled+0x75c>
                    break;
 801c376:	bf00      	nop
 801c378:	e000      	b.n	801c37c <nk_begin_titled+0x75c>
                    break;
 801c37a:	bf00      	nop
            }
        }
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 801c37c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d02e      	beq.n	801c3e0 <nk_begin_titled+0x7c0>
 801c382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d128      	bne.n	801c3e0 <nk_begin_titled+0x7c0>
 801c38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c396:	2b00      	cmp	r3, #0
 801c398:	d022      	beq.n	801c3e0 <nk_begin_titled+0x7c0>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 801c39a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c39e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801c3a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c3a4:	649a      	str	r2, [r3, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801c3a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801c3ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3b0:	649a      	str	r2, [r3, #72]	; 0x48
            ctx->active = iter;
 801c3b2:	69fb      	ldr	r3, [r7, #28]
 801c3b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c3b8:	461a      	mov	r2, r3
 801c3ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3bc:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801c3c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d144      	bne.n	801c456 <nk_begin_titled+0x836>
                /* current window is active in that position so transfer to top
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
 801c3cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801c3ce:	69f8      	ldr	r0, [r7, #28]
 801c3d0:	f7ff fb46 	bl	801ba60 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801c3d8:	69f8      	ldr	r0, [r7, #28]
 801c3da:	f7ff fa4b 	bl	801b874 <nk_insert_window>
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801c3de:	e03a      	b.n	801c456 <nk_begin_titled+0x836>
            }
        } else {
            if (!iter && ctx->end != win) {
 801c3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d123      	bne.n	801c42e <nk_begin_titled+0x80e>
 801c3e6:	69fb      	ldr	r3, [r7, #28]
 801c3e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c3ec:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c3f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d01b      	beq.n	801c42e <nk_begin_titled+0x80e>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 801c3f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d108      	bne.n	801c414 <nk_begin_titled+0x7f4>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
 801c402:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c404:	69f8      	ldr	r0, [r7, #28]
 801c406:	f7ff fb2b 	bl	801ba60 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 801c40a:	2200      	movs	r2, #0
 801c40c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c40e:	69f8      	ldr	r0, [r7, #28]
 801c410:	f7ff fa30 	bl	801b874 <nk_insert_window>
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801c414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801c41c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c41e:	649a      	str	r2, [r3, #72]	; 0x48
                ctx->active = win;
 801c420:	69fb      	ldr	r3, [r7, #28]
 801c422:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c426:	461a      	mov	r2, r3
 801c428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c42a:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            }
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 801c42e:	69fb      	ldr	r3, [r7, #28]
 801c430:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c434:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801c438:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d00b      	beq.n	801c456 <nk_begin_titled+0x836>
 801c43e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c446:	2b00      	cmp	r3, #0
 801c448:	d105      	bne.n	801c456 <nk_begin_titled+0x836>
                win->flags |= NK_WINDOW_ROM;
 801c44a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c44e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801c452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c454:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 801c456:	69f8      	ldr	r0, [r7, #28]
 801c458:	f7f6 fcfc 	bl	8012e54 <nk_create_panel>
 801c45c:	4602      	mov	r2, r0
 801c45e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ctx->current = win;
 801c464:	69fb      	ldr	r3, [r7, #28]
 801c466:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c46a:	461a      	mov	r2, r3
 801c46c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c46e:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 801c472:	2201      	movs	r2, #1
 801c474:	6979      	ldr	r1, [r7, #20]
 801c476:	69f8      	ldr	r0, [r7, #28]
 801c478:	f7f6 ff5a 	bl	8013330 <nk_panel_begin>
 801c47c:	66f8      	str	r0, [r7, #108]	; 0x6c
    win->layout->offset_x = &win->scrollbar.x;
 801c47e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c484:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c486:	325c      	adds	r2, #92	; 0x5c
 801c488:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 801c48a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c492:	3260      	adds	r2, #96	; 0x60
 801c494:	61da      	str	r2, [r3, #28]
    return ret;
 801c496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801c498:	4618      	mov	r0, r3
 801c49a:	377c      	adds	r7, #124	; 0x7c
 801c49c:	46bd      	mov	sp, r7
 801c49e:	bd90      	pop	{r4, r7, pc}

0801c4a0 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b084      	sub	sp, #16
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6078      	str	r0, [r7, #4]
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d106      	bne.n	801c4bc <nk_end+0x1c>
 801c4ae:	4b2d      	ldr	r3, [pc, #180]	; (801c564 <nk_end+0xc4>)
 801c4b0:	4a2d      	ldr	r2, [pc, #180]	; (801c568 <nk_end+0xc8>)
 801c4b2:	f240 112b 	movw	r1, #299	; 0x12b
 801c4b6:	482d      	ldr	r0, [pc, #180]	; (801c56c <nk_end+0xcc>)
 801c4b8:	f000 f9d0 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c4c2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d106      	bne.n	801c4d8 <nk_end+0x38>
 801c4ca:	4b29      	ldr	r3, [pc, #164]	; (801c570 <nk_end+0xd0>)
 801c4cc:	4a26      	ldr	r2, [pc, #152]	; (801c568 <nk_end+0xc8>)
 801c4ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801c4d2:	4826      	ldr	r0, [pc, #152]	; (801c56c <nk_end+0xcc>)
 801c4d4:	f000 f9c2 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current)
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d03d      	beq.n	801c55a <nk_end+0xba>
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c4e4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d036      	beq.n	801c55a <nk_end+0xba>
        return;

    layout = ctx->current->layout;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c4f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c4f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c4fa:	60fb      	str	r3, [r7, #12]
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d00d      	beq.n	801c51e <nk_end+0x7e>
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	781b      	ldrb	r3, [r3, #0]
 801c506:	2b01      	cmp	r3, #1
 801c508:	d111      	bne.n	801c52e <nk_end+0x8e>
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c510:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d007      	beq.n	801c52e <nk_end+0x8e>
        ctx->current = 0;
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c524:	461a      	mov	r2, r3
 801c526:	2300      	movs	r3, #0
 801c528:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        return;
 801c52c:	e016      	b.n	801c55c <nk_end+0xbc>
    }
    nk_panel_end(ctx);
 801c52e:	6878      	ldr	r0, [r7, #4]
 801c530:	f7f7 fe40 	bl	80141b4 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c53a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c53e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c542:	4619      	mov	r1, r3
 801c544:	6878      	ldr	r0, [r7, #4]
 801c546:	f7f6 fc9c 	bl	8012e82 <nk_free_panel>
    ctx->current = 0;
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c550:	461a      	mov	r2, r3
 801c552:	2300      	movs	r3, #0
 801c554:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
 801c558:	e000      	b.n	801c55c <nk_end+0xbc>
        return;
 801c55a:	bf00      	nop
}
 801c55c:	3710      	adds	r7, #16
 801c55e:	46bd      	mov	sp, r7
 801c560:	bd80      	pop	{r7, pc}
 801c562:	bf00      	nop
 801c564:	08020df4 	.word	0x08020df4
 801c568:	0802197c 	.word	0x0802197c
 801c56c:	08020dd8 	.word	0x08020dd8
 801c570:	08020ecc 	.word	0x08020ecc

0801c574 <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 801c574:	b590      	push	{r4, r7, lr}
 801c576:	b087      	sub	sp, #28
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d106      	bne.n	801c590 <nk_window_is_hovered+0x1c>
 801c582:	4b31      	ldr	r3, [pc, #196]	; (801c648 <nk_window_is_hovered+0xd4>)
 801c584:	4a31      	ldr	r2, [pc, #196]	; (801c64c <nk_window_is_hovered+0xd8>)
 801c586:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801c58a:	4831      	ldr	r0, [pc, #196]	; (801c650 <nk_window_is_hovered+0xdc>)
 801c58c:	f000 f966 	bl	801c85c <__assert_func>
    NK_ASSERT(ctx->current);
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c596:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d106      	bne.n	801c5ac <nk_window_is_hovered+0x38>
 801c59e:	4b2d      	ldr	r3, [pc, #180]	; (801c654 <nk_window_is_hovered+0xe0>)
 801c5a0:	4a2a      	ldr	r2, [pc, #168]	; (801c64c <nk_window_is_hovered+0xd8>)
 801c5a2:	f240 11b1 	movw	r1, #433	; 0x1b1
 801c5a6:	482a      	ldr	r0, [pc, #168]	; (801c650 <nk_window_is_hovered+0xdc>)
 801c5a8:	f000 f958 	bl	801c85c <__assert_func>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d010      	beq.n	801c5d4 <nk_window_is_hovered+0x60>
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5b8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d009      	beq.n	801c5d4 <nk_window_is_hovered+0x60>
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5c6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d001      	beq.n	801c5d8 <nk_window_is_hovered+0x64>
        return 0;
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	e032      	b.n	801c63e <nk_window_is_hovered+0xca>
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5de:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c5e2:	f107 0408 	add.w	r4, r7, #8
 801c5e6:	334c      	adds	r3, #76	; 0x4c
 801c5e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c5ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c5f4:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c5f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d008      	beq.n	801c614 <nk_window_is_hovered+0xa0>
            actual_bounds.h = ctx->current->layout->header_height;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c608:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c60c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c612:	617b      	str	r3, [r7, #20]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	ed97 6a02 	vldr	s12, [r7, #8]
 801c61a:	edd7 6a03 	vldr	s13, [r7, #12]
 801c61e:	ed97 7a04 	vldr	s14, [r7, #16]
 801c622:	edd7 7a05 	vldr	s15, [r7, #20]
 801c626:	eeb0 0a46 	vmov.f32	s0, s12
 801c62a:	eef0 0a66 	vmov.f32	s1, s13
 801c62e:	eeb0 1a47 	vmov.f32	s2, s14
 801c632:	eef0 1a67 	vmov.f32	s3, s15
 801c636:	4618      	mov	r0, r3
 801c638:	f7f4 fedb 	bl	80113f2 <nk_input_is_mouse_hovering_rect>
 801c63c:	4603      	mov	r3, r0
    }
}
 801c63e:	4618      	mov	r0, r3
 801c640:	371c      	adds	r7, #28
 801c642:	46bd      	mov	sp, r7
 801c644:	bd90      	pop	{r4, r7, pc}
 801c646:	bf00      	nop
 801c648:	08020df4 	.word	0x08020df4
 801c64c:	08021984 	.word	0x08021984
 801c650:	08020dd8 	.word	0x08020dd8
 801c654:	08020f10 	.word	0x08020f10

0801c658 <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by )
{
 801c658:	b580      	push	{r7, lr}
 801c65a:	b088      	sub	sp, #32
 801c65c:	af00      	add	r7, sp, #0
 801c65e:	61f8      	str	r0, [r7, #28]
 801c660:	61b9      	str	r1, [r7, #24]
 801c662:	617a      	str	r2, [r7, #20]
 801c664:	ed87 0a03 	vstr	s0, [r7, #12]
 801c668:	edc7 0a02 	vstr	s1, [r7, #8]
 801c66c:	ed87 1a01 	vstr	s2, [r7, #4]
 801c670:	edc7 1a00 	vstr	s3, [r7]
 801c674:	827b      	strh	r3, [r7, #18]
	tsc->spi = spi;
 801c676:	69fb      	ldr	r3, [r7, #28]
 801c678:	69ba      	ldr	r2, [r7, #24]
 801c67a:	601a      	str	r2, [r3, #0]
	tsc->cs_port = cs_port;
 801c67c:	69fb      	ldr	r3, [r7, #28]
 801c67e:	697a      	ldr	r2, [r7, #20]
 801c680:	605a      	str	r2, [r3, #4]
	tsc->cs_pin = cs_pin;
 801c682:	69fb      	ldr	r3, [r7, #28]
 801c684:	8a7a      	ldrh	r2, [r7, #18]
 801c686:	811a      	strh	r2, [r3, #8]
	tsc->ax = ax;
 801c688:	69fb      	ldr	r3, [r7, #28]
 801c68a:	68fa      	ldr	r2, [r7, #12]
 801c68c:	60da      	str	r2, [r3, #12]
	tsc->bx = bx;
 801c68e:	69fb      	ldr	r3, [r7, #28]
 801c690:	68ba      	ldr	r2, [r7, #8]
 801c692:	611a      	str	r2, [r3, #16]
	tsc->ay = ay;
 801c694:	69fb      	ldr	r3, [r7, #28]
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	615a      	str	r2, [r3, #20]
	tsc->by = by;
 801c69a:	69fb      	ldr	r3, [r7, #28]
 801c69c:	683a      	ldr	r2, [r7, #0]
 801c69e:	619a      	str	r2, [r3, #24]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801c6a0:	69fb      	ldr	r3, [r7, #28]
 801c6a2:	6858      	ldr	r0, [r3, #4]
 801c6a4:	69fb      	ldr	r3, [r7, #28]
 801c6a6:	891b      	ldrh	r3, [r3, #8]
 801c6a8:	2201      	movs	r2, #1
 801c6aa:	4619      	mov	r1, r3
 801c6ac:	f7ec f984 	bl	80089b8 <HAL_GPIO_WritePin>
}
 801c6b0:	bf00      	nop
 801c6b2:	3720      	adds	r7, #32
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}

0801c6b8 <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b088      	sub	sp, #32
 801c6bc:	af02      	add	r7, sp, #8
 801c6be:	60f8      	str	r0, [r7, #12]
 801c6c0:	60b9      	str	r1, [r7, #8]
 801c6c2:	607a      	str	r2, [r7, #4]
	uint8_t buf_tx[3] = {0};
 801c6c4:	4b2d      	ldr	r3, [pc, #180]	; (801c77c <tsc2046_read_ll+0xc4>)
 801c6c6:	881b      	ldrh	r3, [r3, #0]
 801c6c8:	82bb      	strh	r3, [r7, #20]
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	75bb      	strb	r3, [r7, #22]
	uint8_t buf_rx[3] = {0};
 801c6ce:	4b2b      	ldr	r3, [pc, #172]	; (801c77c <tsc2046_read_ll+0xc4>)
 801c6d0:	881b      	ldrh	r3, [r3, #0]
 801c6d2:	823b      	strh	r3, [r7, #16]
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	6858      	ldr	r0, [r3, #4]
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	891b      	ldrh	r3, [r3, #8]
 801c6e0:	2200      	movs	r2, #0
 801c6e2:	4619      	mov	r1, r3
 801c6e4:	f7ec f968 	bl	80089b8 <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 801c6e8:	2390      	movs	r3, #144	; 0x90
 801c6ea:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	6818      	ldr	r0, [r3, #0]
 801c6f0:	f107 0210 	add.w	r2, r7, #16
 801c6f4:	f107 0114 	add.w	r1, r7, #20
 801c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6fc:	9300      	str	r3, [sp, #0]
 801c6fe:	2303      	movs	r3, #3
 801c700:	f7ed fe03 	bl	800a30a <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801c704:	7c7b      	ldrb	r3, [r7, #17]
 801c706:	011b      	lsls	r3, r3, #4
 801c708:	b21a      	sxth	r2, r3
 801c70a:	7cbb      	ldrb	r3, [r7, #18]
 801c70c:	091b      	lsrs	r3, r3, #4
 801c70e:	b2db      	uxtb	r3, r3
 801c710:	b21b      	sxth	r3, r3
 801c712:	4313      	orrs	r3, r2
 801c714:	b21b      	sxth	r3, r3
 801c716:	b29a      	uxth	r2, r3
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	801a      	strh	r2, [r3, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 801c71c:	23d0      	movs	r3, #208	; 0xd0
 801c71e:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	6818      	ldr	r0, [r3, #0]
 801c724:	f107 0210 	add.w	r2, r7, #16
 801c728:	f107 0114 	add.w	r1, r7, #20
 801c72c:	f04f 33ff 	mov.w	r3, #4294967295
 801c730:	9300      	str	r3, [sp, #0]
 801c732:	2303      	movs	r3, #3
 801c734:	f7ed fde9 	bl	800a30a <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801c738:	7c7b      	ldrb	r3, [r7, #17]
 801c73a:	011b      	lsls	r3, r3, #4
 801c73c:	b21a      	sxth	r2, r3
 801c73e:	7cbb      	ldrb	r3, [r7, #18]
 801c740:	091b      	lsrs	r3, r3, #4
 801c742:	b2db      	uxtb	r3, r3
 801c744:	b21b      	sxth	r3, r3
 801c746:	4313      	orrs	r3, r2
 801c748:	b21b      	sxth	r3, r3
 801c74a:	b29a      	uxth	r2, r3
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	6858      	ldr	r0, [r3, #4]
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	891b      	ldrh	r3, [r3, #8]
 801c758:	2201      	movs	r2, #1
 801c75a:	4619      	mov	r1, r3
 801c75c:	f7ec f92c 	bl	80089b8 <HAL_GPIO_WritePin>

    if (*x == 2047) {
 801c760:	68bb      	ldr	r3, [r7, #8]
 801c762:	881b      	ldrh	r3, [r3, #0]
 801c764:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801c768:	4293      	cmp	r3, r2
 801c76a:	d102      	bne.n	801c772 <tsc2046_read_ll+0xba>
        *x = 0;
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	2200      	movs	r2, #0
 801c770:	801a      	strh	r2, [r3, #0]
    }
}
 801c772:	bf00      	nop
 801c774:	3718      	adds	r7, #24
 801c776:	46bd      	mov	sp, r7
 801c778:	bd80      	pop	{r7, pc}
 801c77a:	bf00      	nop
 801c77c:	08020fc8 	.word	0x08020fc8

0801c780 <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801c780:	b580      	push	{r7, lr}
 801c782:	b086      	sub	sp, #24
 801c784:	af00      	add	r7, sp, #0
 801c786:	60f8      	str	r0, [r7, #12]
 801c788:	60b9      	str	r1, [r7, #8]
 801c78a:	607a      	str	r2, [r7, #4]
    uint16_t x_acc = 0;
 801c78c:	2300      	movs	r3, #0
 801c78e:	82fb      	strh	r3, [r7, #22]
    uint16_t y_acc = 0;
 801c790:	2300      	movs	r3, #0
 801c792:	82bb      	strh	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 801c794:	2300      	movs	r3, #0
 801c796:	613b      	str	r3, [r7, #16]
 801c798:	e021      	b.n	801c7de <tsc2046_read+0x5e>
    	tsc2046_read_ll(tsc, x, y);
 801c79a:	687a      	ldr	r2, [r7, #4]
 801c79c:	68b9      	ldr	r1, [r7, #8]
 801c79e:	68f8      	ldr	r0, [r7, #12]
 801c7a0:	f7ff ff8a 	bl	801c6b8 <tsc2046_read_ll>
        if (*x && *y) {
 801c7a4:	68bb      	ldr	r3, [r7, #8]
 801c7a6:	881b      	ldrh	r3, [r3, #0]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d011      	beq.n	801c7d0 <tsc2046_read+0x50>
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	881b      	ldrh	r3, [r3, #0]
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d00d      	beq.n	801c7d0 <tsc2046_read+0x50>
            x_acc += *x;
 801c7b4:	68bb      	ldr	r3, [r7, #8]
 801c7b6:	881a      	ldrh	r2, [r3, #0]
 801c7b8:	8afb      	ldrh	r3, [r7, #22]
 801c7ba:	4413      	add	r3, r2
 801c7bc:	82fb      	strh	r3, [r7, #22]
            y_acc += *y;
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	881a      	ldrh	r2, [r3, #0]
 801c7c2:	8abb      	ldrh	r3, [r7, #20]
 801c7c4:	4413      	add	r3, r2
 801c7c6:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 4; i++) {
 801c7c8:	693b      	ldr	r3, [r7, #16]
 801c7ca:	3301      	adds	r3, #1
 801c7cc:	613b      	str	r3, [r7, #16]
 801c7ce:	e006      	b.n	801c7de <tsc2046_read+0x5e>
        } else {
            *x = 0;
 801c7d0:	68bb      	ldr	r3, [r7, #8]
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	801a      	strh	r2, [r3, #0]
            *y = 0;
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	2200      	movs	r2, #0
 801c7da:	801a      	strh	r2, [r3, #0]
            return;
 801c7dc:	e03a      	b.n	801c854 <tsc2046_read+0xd4>
    for (int i = 0; i < 4; i++) {
 801c7de:	693b      	ldr	r3, [r7, #16]
 801c7e0:	2b03      	cmp	r3, #3
 801c7e2:	ddda      	ble.n	801c79a <tsc2046_read+0x1a>
        }
    }
    *x = x_acc / 4;
 801c7e4:	8afb      	ldrh	r3, [r7, #22]
 801c7e6:	089b      	lsrs	r3, r3, #2
 801c7e8:	b29a      	uxth	r2, r3
 801c7ea:	68bb      	ldr	r3, [r7, #8]
 801c7ec:	801a      	strh	r2, [r3, #0]
    *y = y_acc / 4;
 801c7ee:	8abb      	ldrh	r3, [r7, #20]
 801c7f0:	089b      	lsrs	r3, r3, #2
 801c7f2:	b29a      	uxth	r2, r3
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	801a      	strh	r2, [r3, #0]
    *x = tsc->ax * *x + tsc->bx;
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	ed93 7a03 	vldr	s14, [r3, #12]
 801c7fe:	68bb      	ldr	r3, [r7, #8]
 801c800:	881b      	ldrh	r3, [r3, #0]
 801c802:	ee07 3a90 	vmov	s15, r3
 801c806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c80a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	edd3 7a04 	vldr	s15, [r3, #16]
 801c814:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c81c:	ee17 3a90 	vmov	r3, s15
 801c820:	b29a      	uxth	r2, r3
 801c822:	68bb      	ldr	r3, [r7, #8]
 801c824:	801a      	strh	r2, [r3, #0]
    *y = tsc->ay * *y + tsc->by;
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	ed93 7a05 	vldr	s14, [r3, #20]
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	881b      	ldrh	r3, [r3, #0]
 801c830:	ee07 3a90 	vmov	s15, r3
 801c834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c838:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	edd3 7a06 	vldr	s15, [r3, #24]
 801c842:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c84a:	ee17 3a90 	vmov	r3, s15
 801c84e:	b29a      	uxth	r2, r3
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	801a      	strh	r2, [r3, #0]
}
 801c854:	3718      	adds	r7, #24
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}
	...

0801c85c <__assert_func>:
 801c85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c85e:	4614      	mov	r4, r2
 801c860:	461a      	mov	r2, r3
 801c862:	4b09      	ldr	r3, [pc, #36]	; (801c888 <__assert_func+0x2c>)
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	4605      	mov	r5, r0
 801c868:	68d8      	ldr	r0, [r3, #12]
 801c86a:	b14c      	cbz	r4, 801c880 <__assert_func+0x24>
 801c86c:	4b07      	ldr	r3, [pc, #28]	; (801c88c <__assert_func+0x30>)
 801c86e:	9100      	str	r1, [sp, #0]
 801c870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c874:	4906      	ldr	r1, [pc, #24]	; (801c890 <__assert_func+0x34>)
 801c876:	462b      	mov	r3, r5
 801c878:	f000 fd06 	bl	801d288 <fiprintf>
 801c87c:	f000 fe98 	bl	801d5b0 <abort>
 801c880:	4b04      	ldr	r3, [pc, #16]	; (801c894 <__assert_func+0x38>)
 801c882:	461c      	mov	r4, r3
 801c884:	e7f3      	b.n	801c86e <__assert_func+0x12>
 801c886:	bf00      	nop
 801c888:	2000006c 	.word	0x2000006c
 801c88c:	08021999 	.word	0x08021999
 801c890:	080219a6 	.word	0x080219a6
 801c894:	080219d4 	.word	0x080219d4

0801c898 <__cvt>:
 801c898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c89c:	ec55 4b10 	vmov	r4, r5, d0
 801c8a0:	2d00      	cmp	r5, #0
 801c8a2:	460e      	mov	r6, r1
 801c8a4:	4619      	mov	r1, r3
 801c8a6:	462b      	mov	r3, r5
 801c8a8:	bfbb      	ittet	lt
 801c8aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c8ae:	461d      	movlt	r5, r3
 801c8b0:	2300      	movge	r3, #0
 801c8b2:	232d      	movlt	r3, #45	; 0x2d
 801c8b4:	700b      	strb	r3, [r1, #0]
 801c8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c8bc:	4691      	mov	r9, r2
 801c8be:	f023 0820 	bic.w	r8, r3, #32
 801c8c2:	bfbc      	itt	lt
 801c8c4:	4622      	movlt	r2, r4
 801c8c6:	4614      	movlt	r4, r2
 801c8c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c8cc:	d005      	beq.n	801c8da <__cvt+0x42>
 801c8ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c8d2:	d100      	bne.n	801c8d6 <__cvt+0x3e>
 801c8d4:	3601      	adds	r6, #1
 801c8d6:	2102      	movs	r1, #2
 801c8d8:	e000      	b.n	801c8dc <__cvt+0x44>
 801c8da:	2103      	movs	r1, #3
 801c8dc:	ab03      	add	r3, sp, #12
 801c8de:	9301      	str	r3, [sp, #4]
 801c8e0:	ab02      	add	r3, sp, #8
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	ec45 4b10 	vmov	d0, r4, r5
 801c8e8:	4653      	mov	r3, sl
 801c8ea:	4632      	mov	r2, r6
 801c8ec:	f000 fef0 	bl	801d6d0 <_dtoa_r>
 801c8f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c8f4:	4607      	mov	r7, r0
 801c8f6:	d102      	bne.n	801c8fe <__cvt+0x66>
 801c8f8:	f019 0f01 	tst.w	r9, #1
 801c8fc:	d022      	beq.n	801c944 <__cvt+0xac>
 801c8fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c902:	eb07 0906 	add.w	r9, r7, r6
 801c906:	d110      	bne.n	801c92a <__cvt+0x92>
 801c908:	783b      	ldrb	r3, [r7, #0]
 801c90a:	2b30      	cmp	r3, #48	; 0x30
 801c90c:	d10a      	bne.n	801c924 <__cvt+0x8c>
 801c90e:	2200      	movs	r2, #0
 801c910:	2300      	movs	r3, #0
 801c912:	4620      	mov	r0, r4
 801c914:	4629      	mov	r1, r5
 801c916:	f7e4 f8ff 	bl	8000b18 <__aeabi_dcmpeq>
 801c91a:	b918      	cbnz	r0, 801c924 <__cvt+0x8c>
 801c91c:	f1c6 0601 	rsb	r6, r6, #1
 801c920:	f8ca 6000 	str.w	r6, [sl]
 801c924:	f8da 3000 	ldr.w	r3, [sl]
 801c928:	4499      	add	r9, r3
 801c92a:	2200      	movs	r2, #0
 801c92c:	2300      	movs	r3, #0
 801c92e:	4620      	mov	r0, r4
 801c930:	4629      	mov	r1, r5
 801c932:	f7e4 f8f1 	bl	8000b18 <__aeabi_dcmpeq>
 801c936:	b108      	cbz	r0, 801c93c <__cvt+0xa4>
 801c938:	f8cd 900c 	str.w	r9, [sp, #12]
 801c93c:	2230      	movs	r2, #48	; 0x30
 801c93e:	9b03      	ldr	r3, [sp, #12]
 801c940:	454b      	cmp	r3, r9
 801c942:	d307      	bcc.n	801c954 <__cvt+0xbc>
 801c944:	9b03      	ldr	r3, [sp, #12]
 801c946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c948:	1bdb      	subs	r3, r3, r7
 801c94a:	4638      	mov	r0, r7
 801c94c:	6013      	str	r3, [r2, #0]
 801c94e:	b004      	add	sp, #16
 801c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c954:	1c59      	adds	r1, r3, #1
 801c956:	9103      	str	r1, [sp, #12]
 801c958:	701a      	strb	r2, [r3, #0]
 801c95a:	e7f0      	b.n	801c93e <__cvt+0xa6>

0801c95c <__exponent>:
 801c95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c95e:	4603      	mov	r3, r0
 801c960:	2900      	cmp	r1, #0
 801c962:	bfb8      	it	lt
 801c964:	4249      	neglt	r1, r1
 801c966:	f803 2b02 	strb.w	r2, [r3], #2
 801c96a:	bfb4      	ite	lt
 801c96c:	222d      	movlt	r2, #45	; 0x2d
 801c96e:	222b      	movge	r2, #43	; 0x2b
 801c970:	2909      	cmp	r1, #9
 801c972:	7042      	strb	r2, [r0, #1]
 801c974:	dd2a      	ble.n	801c9cc <__exponent+0x70>
 801c976:	f10d 0207 	add.w	r2, sp, #7
 801c97a:	4617      	mov	r7, r2
 801c97c:	260a      	movs	r6, #10
 801c97e:	4694      	mov	ip, r2
 801c980:	fb91 f5f6 	sdiv	r5, r1, r6
 801c984:	fb06 1415 	mls	r4, r6, r5, r1
 801c988:	3430      	adds	r4, #48	; 0x30
 801c98a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801c98e:	460c      	mov	r4, r1
 801c990:	2c63      	cmp	r4, #99	; 0x63
 801c992:	f102 32ff 	add.w	r2, r2, #4294967295
 801c996:	4629      	mov	r1, r5
 801c998:	dcf1      	bgt.n	801c97e <__exponent+0x22>
 801c99a:	3130      	adds	r1, #48	; 0x30
 801c99c:	f1ac 0402 	sub.w	r4, ip, #2
 801c9a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c9a4:	1c41      	adds	r1, r0, #1
 801c9a6:	4622      	mov	r2, r4
 801c9a8:	42ba      	cmp	r2, r7
 801c9aa:	d30a      	bcc.n	801c9c2 <__exponent+0x66>
 801c9ac:	f10d 0209 	add.w	r2, sp, #9
 801c9b0:	eba2 020c 	sub.w	r2, r2, ip
 801c9b4:	42bc      	cmp	r4, r7
 801c9b6:	bf88      	it	hi
 801c9b8:	2200      	movhi	r2, #0
 801c9ba:	4413      	add	r3, r2
 801c9bc:	1a18      	subs	r0, r3, r0
 801c9be:	b003      	add	sp, #12
 801c9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c9c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 801c9ca:	e7ed      	b.n	801c9a8 <__exponent+0x4c>
 801c9cc:	2330      	movs	r3, #48	; 0x30
 801c9ce:	3130      	adds	r1, #48	; 0x30
 801c9d0:	7083      	strb	r3, [r0, #2]
 801c9d2:	70c1      	strb	r1, [r0, #3]
 801c9d4:	1d03      	adds	r3, r0, #4
 801c9d6:	e7f1      	b.n	801c9bc <__exponent+0x60>

0801c9d8 <_printf_float>:
 801c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9dc:	ed2d 8b02 	vpush	{d8}
 801c9e0:	b08d      	sub	sp, #52	; 0x34
 801c9e2:	460c      	mov	r4, r1
 801c9e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c9e8:	4616      	mov	r6, r2
 801c9ea:	461f      	mov	r7, r3
 801c9ec:	4605      	mov	r5, r0
 801c9ee:	f000 fd5b 	bl	801d4a8 <_localeconv_r>
 801c9f2:	f8d0 a000 	ldr.w	sl, [r0]
 801c9f6:	4650      	mov	r0, sl
 801c9f8:	f7e3 fc62 	bl	80002c0 <strlen>
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	930a      	str	r3, [sp, #40]	; 0x28
 801ca00:	6823      	ldr	r3, [r4, #0]
 801ca02:	9305      	str	r3, [sp, #20]
 801ca04:	f8d8 3000 	ldr.w	r3, [r8]
 801ca08:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ca0c:	3307      	adds	r3, #7
 801ca0e:	f023 0307 	bic.w	r3, r3, #7
 801ca12:	f103 0208 	add.w	r2, r3, #8
 801ca16:	f8c8 2000 	str.w	r2, [r8]
 801ca1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ca1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ca22:	9307      	str	r3, [sp, #28]
 801ca24:	f8cd 8018 	str.w	r8, [sp, #24]
 801ca28:	ee08 0a10 	vmov	s16, r0
 801ca2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801ca30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ca34:	4b9e      	ldr	r3, [pc, #632]	; (801ccb0 <_printf_float+0x2d8>)
 801ca36:	f04f 32ff 	mov.w	r2, #4294967295
 801ca3a:	f7e4 f89f 	bl	8000b7c <__aeabi_dcmpun>
 801ca3e:	bb88      	cbnz	r0, 801caa4 <_printf_float+0xcc>
 801ca40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ca44:	4b9a      	ldr	r3, [pc, #616]	; (801ccb0 <_printf_float+0x2d8>)
 801ca46:	f04f 32ff 	mov.w	r2, #4294967295
 801ca4a:	f7e4 f879 	bl	8000b40 <__aeabi_dcmple>
 801ca4e:	bb48      	cbnz	r0, 801caa4 <_printf_float+0xcc>
 801ca50:	2200      	movs	r2, #0
 801ca52:	2300      	movs	r3, #0
 801ca54:	4640      	mov	r0, r8
 801ca56:	4649      	mov	r1, r9
 801ca58:	f7e4 f868 	bl	8000b2c <__aeabi_dcmplt>
 801ca5c:	b110      	cbz	r0, 801ca64 <_printf_float+0x8c>
 801ca5e:	232d      	movs	r3, #45	; 0x2d
 801ca60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca64:	4a93      	ldr	r2, [pc, #588]	; (801ccb4 <_printf_float+0x2dc>)
 801ca66:	4b94      	ldr	r3, [pc, #592]	; (801ccb8 <_printf_float+0x2e0>)
 801ca68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801ca6c:	bf94      	ite	ls
 801ca6e:	4690      	movls	r8, r2
 801ca70:	4698      	movhi	r8, r3
 801ca72:	2303      	movs	r3, #3
 801ca74:	6123      	str	r3, [r4, #16]
 801ca76:	9b05      	ldr	r3, [sp, #20]
 801ca78:	f023 0304 	bic.w	r3, r3, #4
 801ca7c:	6023      	str	r3, [r4, #0]
 801ca7e:	f04f 0900 	mov.w	r9, #0
 801ca82:	9700      	str	r7, [sp, #0]
 801ca84:	4633      	mov	r3, r6
 801ca86:	aa0b      	add	r2, sp, #44	; 0x2c
 801ca88:	4621      	mov	r1, r4
 801ca8a:	4628      	mov	r0, r5
 801ca8c:	f000 f9da 	bl	801ce44 <_printf_common>
 801ca90:	3001      	adds	r0, #1
 801ca92:	f040 8090 	bne.w	801cbb6 <_printf_float+0x1de>
 801ca96:	f04f 30ff 	mov.w	r0, #4294967295
 801ca9a:	b00d      	add	sp, #52	; 0x34
 801ca9c:	ecbd 8b02 	vpop	{d8}
 801caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caa4:	4642      	mov	r2, r8
 801caa6:	464b      	mov	r3, r9
 801caa8:	4640      	mov	r0, r8
 801caaa:	4649      	mov	r1, r9
 801caac:	f7e4 f866 	bl	8000b7c <__aeabi_dcmpun>
 801cab0:	b140      	cbz	r0, 801cac4 <_printf_float+0xec>
 801cab2:	464b      	mov	r3, r9
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	bfbc      	itt	lt
 801cab8:	232d      	movlt	r3, #45	; 0x2d
 801caba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cabe:	4a7f      	ldr	r2, [pc, #508]	; (801ccbc <_printf_float+0x2e4>)
 801cac0:	4b7f      	ldr	r3, [pc, #508]	; (801ccc0 <_printf_float+0x2e8>)
 801cac2:	e7d1      	b.n	801ca68 <_printf_float+0x90>
 801cac4:	6863      	ldr	r3, [r4, #4]
 801cac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801caca:	9206      	str	r2, [sp, #24]
 801cacc:	1c5a      	adds	r2, r3, #1
 801cace:	d13f      	bne.n	801cb50 <_printf_float+0x178>
 801cad0:	2306      	movs	r3, #6
 801cad2:	6063      	str	r3, [r4, #4]
 801cad4:	9b05      	ldr	r3, [sp, #20]
 801cad6:	6861      	ldr	r1, [r4, #4]
 801cad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801cadc:	2300      	movs	r3, #0
 801cade:	9303      	str	r3, [sp, #12]
 801cae0:	ab0a      	add	r3, sp, #40	; 0x28
 801cae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 801cae6:	ab09      	add	r3, sp, #36	; 0x24
 801cae8:	ec49 8b10 	vmov	d0, r8, r9
 801caec:	9300      	str	r3, [sp, #0]
 801caee:	6022      	str	r2, [r4, #0]
 801caf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801caf4:	4628      	mov	r0, r5
 801caf6:	f7ff fecf 	bl	801c898 <__cvt>
 801cafa:	9b06      	ldr	r3, [sp, #24]
 801cafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cafe:	2b47      	cmp	r3, #71	; 0x47
 801cb00:	4680      	mov	r8, r0
 801cb02:	d108      	bne.n	801cb16 <_printf_float+0x13e>
 801cb04:	1cc8      	adds	r0, r1, #3
 801cb06:	db02      	blt.n	801cb0e <_printf_float+0x136>
 801cb08:	6863      	ldr	r3, [r4, #4]
 801cb0a:	4299      	cmp	r1, r3
 801cb0c:	dd41      	ble.n	801cb92 <_printf_float+0x1ba>
 801cb0e:	f1ab 0302 	sub.w	r3, fp, #2
 801cb12:	fa5f fb83 	uxtb.w	fp, r3
 801cb16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cb1a:	d820      	bhi.n	801cb5e <_printf_float+0x186>
 801cb1c:	3901      	subs	r1, #1
 801cb1e:	465a      	mov	r2, fp
 801cb20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cb24:	9109      	str	r1, [sp, #36]	; 0x24
 801cb26:	f7ff ff19 	bl	801c95c <__exponent>
 801cb2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb2c:	1813      	adds	r3, r2, r0
 801cb2e:	2a01      	cmp	r2, #1
 801cb30:	4681      	mov	r9, r0
 801cb32:	6123      	str	r3, [r4, #16]
 801cb34:	dc02      	bgt.n	801cb3c <_printf_float+0x164>
 801cb36:	6822      	ldr	r2, [r4, #0]
 801cb38:	07d2      	lsls	r2, r2, #31
 801cb3a:	d501      	bpl.n	801cb40 <_printf_float+0x168>
 801cb3c:	3301      	adds	r3, #1
 801cb3e:	6123      	str	r3, [r4, #16]
 801cb40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d09c      	beq.n	801ca82 <_printf_float+0xaa>
 801cb48:	232d      	movs	r3, #45	; 0x2d
 801cb4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cb4e:	e798      	b.n	801ca82 <_printf_float+0xaa>
 801cb50:	9a06      	ldr	r2, [sp, #24]
 801cb52:	2a47      	cmp	r2, #71	; 0x47
 801cb54:	d1be      	bne.n	801cad4 <_printf_float+0xfc>
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d1bc      	bne.n	801cad4 <_printf_float+0xfc>
 801cb5a:	2301      	movs	r3, #1
 801cb5c:	e7b9      	b.n	801cad2 <_printf_float+0xfa>
 801cb5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801cb62:	d118      	bne.n	801cb96 <_printf_float+0x1be>
 801cb64:	2900      	cmp	r1, #0
 801cb66:	6863      	ldr	r3, [r4, #4]
 801cb68:	dd0b      	ble.n	801cb82 <_printf_float+0x1aa>
 801cb6a:	6121      	str	r1, [r4, #16]
 801cb6c:	b913      	cbnz	r3, 801cb74 <_printf_float+0x19c>
 801cb6e:	6822      	ldr	r2, [r4, #0]
 801cb70:	07d0      	lsls	r0, r2, #31
 801cb72:	d502      	bpl.n	801cb7a <_printf_float+0x1a2>
 801cb74:	3301      	adds	r3, #1
 801cb76:	440b      	add	r3, r1
 801cb78:	6123      	str	r3, [r4, #16]
 801cb7a:	65a1      	str	r1, [r4, #88]	; 0x58
 801cb7c:	f04f 0900 	mov.w	r9, #0
 801cb80:	e7de      	b.n	801cb40 <_printf_float+0x168>
 801cb82:	b913      	cbnz	r3, 801cb8a <_printf_float+0x1b2>
 801cb84:	6822      	ldr	r2, [r4, #0]
 801cb86:	07d2      	lsls	r2, r2, #31
 801cb88:	d501      	bpl.n	801cb8e <_printf_float+0x1b6>
 801cb8a:	3302      	adds	r3, #2
 801cb8c:	e7f4      	b.n	801cb78 <_printf_float+0x1a0>
 801cb8e:	2301      	movs	r3, #1
 801cb90:	e7f2      	b.n	801cb78 <_printf_float+0x1a0>
 801cb92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801cb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb98:	4299      	cmp	r1, r3
 801cb9a:	db05      	blt.n	801cba8 <_printf_float+0x1d0>
 801cb9c:	6823      	ldr	r3, [r4, #0]
 801cb9e:	6121      	str	r1, [r4, #16]
 801cba0:	07d8      	lsls	r0, r3, #31
 801cba2:	d5ea      	bpl.n	801cb7a <_printf_float+0x1a2>
 801cba4:	1c4b      	adds	r3, r1, #1
 801cba6:	e7e7      	b.n	801cb78 <_printf_float+0x1a0>
 801cba8:	2900      	cmp	r1, #0
 801cbaa:	bfd4      	ite	le
 801cbac:	f1c1 0202 	rsble	r2, r1, #2
 801cbb0:	2201      	movgt	r2, #1
 801cbb2:	4413      	add	r3, r2
 801cbb4:	e7e0      	b.n	801cb78 <_printf_float+0x1a0>
 801cbb6:	6823      	ldr	r3, [r4, #0]
 801cbb8:	055a      	lsls	r2, r3, #21
 801cbba:	d407      	bmi.n	801cbcc <_printf_float+0x1f4>
 801cbbc:	6923      	ldr	r3, [r4, #16]
 801cbbe:	4642      	mov	r2, r8
 801cbc0:	4631      	mov	r1, r6
 801cbc2:	4628      	mov	r0, r5
 801cbc4:	47b8      	blx	r7
 801cbc6:	3001      	adds	r0, #1
 801cbc8:	d12c      	bne.n	801cc24 <_printf_float+0x24c>
 801cbca:	e764      	b.n	801ca96 <_printf_float+0xbe>
 801cbcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cbd0:	f240 80e0 	bls.w	801cd94 <_printf_float+0x3bc>
 801cbd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cbd8:	2200      	movs	r2, #0
 801cbda:	2300      	movs	r3, #0
 801cbdc:	f7e3 ff9c 	bl	8000b18 <__aeabi_dcmpeq>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	d034      	beq.n	801cc4e <_printf_float+0x276>
 801cbe4:	4a37      	ldr	r2, [pc, #220]	; (801ccc4 <_printf_float+0x2ec>)
 801cbe6:	2301      	movs	r3, #1
 801cbe8:	4631      	mov	r1, r6
 801cbea:	4628      	mov	r0, r5
 801cbec:	47b8      	blx	r7
 801cbee:	3001      	adds	r0, #1
 801cbf0:	f43f af51 	beq.w	801ca96 <_printf_float+0xbe>
 801cbf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	db02      	blt.n	801cc02 <_printf_float+0x22a>
 801cbfc:	6823      	ldr	r3, [r4, #0]
 801cbfe:	07d8      	lsls	r0, r3, #31
 801cc00:	d510      	bpl.n	801cc24 <_printf_float+0x24c>
 801cc02:	ee18 3a10 	vmov	r3, s16
 801cc06:	4652      	mov	r2, sl
 801cc08:	4631      	mov	r1, r6
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	47b8      	blx	r7
 801cc0e:	3001      	adds	r0, #1
 801cc10:	f43f af41 	beq.w	801ca96 <_printf_float+0xbe>
 801cc14:	f04f 0800 	mov.w	r8, #0
 801cc18:	f104 091a 	add.w	r9, r4, #26
 801cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc1e:	3b01      	subs	r3, #1
 801cc20:	4543      	cmp	r3, r8
 801cc22:	dc09      	bgt.n	801cc38 <_printf_float+0x260>
 801cc24:	6823      	ldr	r3, [r4, #0]
 801cc26:	079b      	lsls	r3, r3, #30
 801cc28:	f100 8107 	bmi.w	801ce3a <_printf_float+0x462>
 801cc2c:	68e0      	ldr	r0, [r4, #12]
 801cc2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc30:	4298      	cmp	r0, r3
 801cc32:	bfb8      	it	lt
 801cc34:	4618      	movlt	r0, r3
 801cc36:	e730      	b.n	801ca9a <_printf_float+0xc2>
 801cc38:	2301      	movs	r3, #1
 801cc3a:	464a      	mov	r2, r9
 801cc3c:	4631      	mov	r1, r6
 801cc3e:	4628      	mov	r0, r5
 801cc40:	47b8      	blx	r7
 801cc42:	3001      	adds	r0, #1
 801cc44:	f43f af27 	beq.w	801ca96 <_printf_float+0xbe>
 801cc48:	f108 0801 	add.w	r8, r8, #1
 801cc4c:	e7e6      	b.n	801cc1c <_printf_float+0x244>
 801cc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	dc39      	bgt.n	801ccc8 <_printf_float+0x2f0>
 801cc54:	4a1b      	ldr	r2, [pc, #108]	; (801ccc4 <_printf_float+0x2ec>)
 801cc56:	2301      	movs	r3, #1
 801cc58:	4631      	mov	r1, r6
 801cc5a:	4628      	mov	r0, r5
 801cc5c:	47b8      	blx	r7
 801cc5e:	3001      	adds	r0, #1
 801cc60:	f43f af19 	beq.w	801ca96 <_printf_float+0xbe>
 801cc64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cc68:	4313      	orrs	r3, r2
 801cc6a:	d102      	bne.n	801cc72 <_printf_float+0x29a>
 801cc6c:	6823      	ldr	r3, [r4, #0]
 801cc6e:	07d9      	lsls	r1, r3, #31
 801cc70:	d5d8      	bpl.n	801cc24 <_printf_float+0x24c>
 801cc72:	ee18 3a10 	vmov	r3, s16
 801cc76:	4652      	mov	r2, sl
 801cc78:	4631      	mov	r1, r6
 801cc7a:	4628      	mov	r0, r5
 801cc7c:	47b8      	blx	r7
 801cc7e:	3001      	adds	r0, #1
 801cc80:	f43f af09 	beq.w	801ca96 <_printf_float+0xbe>
 801cc84:	f04f 0900 	mov.w	r9, #0
 801cc88:	f104 0a1a 	add.w	sl, r4, #26
 801cc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc8e:	425b      	negs	r3, r3
 801cc90:	454b      	cmp	r3, r9
 801cc92:	dc01      	bgt.n	801cc98 <_printf_float+0x2c0>
 801cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc96:	e792      	b.n	801cbbe <_printf_float+0x1e6>
 801cc98:	2301      	movs	r3, #1
 801cc9a:	4652      	mov	r2, sl
 801cc9c:	4631      	mov	r1, r6
 801cc9e:	4628      	mov	r0, r5
 801cca0:	47b8      	blx	r7
 801cca2:	3001      	adds	r0, #1
 801cca4:	f43f aef7 	beq.w	801ca96 <_printf_float+0xbe>
 801cca8:	f109 0901 	add.w	r9, r9, #1
 801ccac:	e7ee      	b.n	801cc8c <_printf_float+0x2b4>
 801ccae:	bf00      	nop
 801ccb0:	7fefffff 	.word	0x7fefffff
 801ccb4:	080219d5 	.word	0x080219d5
 801ccb8:	080219d9 	.word	0x080219d9
 801ccbc:	080219dd 	.word	0x080219dd
 801ccc0:	080219e1 	.word	0x080219e1
 801ccc4:	080219e5 	.word	0x080219e5
 801ccc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ccca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cccc:	429a      	cmp	r2, r3
 801ccce:	bfa8      	it	ge
 801ccd0:	461a      	movge	r2, r3
 801ccd2:	2a00      	cmp	r2, #0
 801ccd4:	4691      	mov	r9, r2
 801ccd6:	dc37      	bgt.n	801cd48 <_printf_float+0x370>
 801ccd8:	f04f 0b00 	mov.w	fp, #0
 801ccdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cce0:	f104 021a 	add.w	r2, r4, #26
 801cce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cce6:	9305      	str	r3, [sp, #20]
 801cce8:	eba3 0309 	sub.w	r3, r3, r9
 801ccec:	455b      	cmp	r3, fp
 801ccee:	dc33      	bgt.n	801cd58 <_printf_float+0x380>
 801ccf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ccf4:	429a      	cmp	r2, r3
 801ccf6:	db3b      	blt.n	801cd70 <_printf_float+0x398>
 801ccf8:	6823      	ldr	r3, [r4, #0]
 801ccfa:	07da      	lsls	r2, r3, #31
 801ccfc:	d438      	bmi.n	801cd70 <_printf_float+0x398>
 801ccfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cd02:	eba2 0903 	sub.w	r9, r2, r3
 801cd06:	9b05      	ldr	r3, [sp, #20]
 801cd08:	1ad2      	subs	r2, r2, r3
 801cd0a:	4591      	cmp	r9, r2
 801cd0c:	bfa8      	it	ge
 801cd0e:	4691      	movge	r9, r2
 801cd10:	f1b9 0f00 	cmp.w	r9, #0
 801cd14:	dc35      	bgt.n	801cd82 <_printf_float+0x3aa>
 801cd16:	f04f 0800 	mov.w	r8, #0
 801cd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cd1e:	f104 0a1a 	add.w	sl, r4, #26
 801cd22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cd26:	1a9b      	subs	r3, r3, r2
 801cd28:	eba3 0309 	sub.w	r3, r3, r9
 801cd2c:	4543      	cmp	r3, r8
 801cd2e:	f77f af79 	ble.w	801cc24 <_printf_float+0x24c>
 801cd32:	2301      	movs	r3, #1
 801cd34:	4652      	mov	r2, sl
 801cd36:	4631      	mov	r1, r6
 801cd38:	4628      	mov	r0, r5
 801cd3a:	47b8      	blx	r7
 801cd3c:	3001      	adds	r0, #1
 801cd3e:	f43f aeaa 	beq.w	801ca96 <_printf_float+0xbe>
 801cd42:	f108 0801 	add.w	r8, r8, #1
 801cd46:	e7ec      	b.n	801cd22 <_printf_float+0x34a>
 801cd48:	4613      	mov	r3, r2
 801cd4a:	4631      	mov	r1, r6
 801cd4c:	4642      	mov	r2, r8
 801cd4e:	4628      	mov	r0, r5
 801cd50:	47b8      	blx	r7
 801cd52:	3001      	adds	r0, #1
 801cd54:	d1c0      	bne.n	801ccd8 <_printf_float+0x300>
 801cd56:	e69e      	b.n	801ca96 <_printf_float+0xbe>
 801cd58:	2301      	movs	r3, #1
 801cd5a:	4631      	mov	r1, r6
 801cd5c:	4628      	mov	r0, r5
 801cd5e:	9205      	str	r2, [sp, #20]
 801cd60:	47b8      	blx	r7
 801cd62:	3001      	adds	r0, #1
 801cd64:	f43f ae97 	beq.w	801ca96 <_printf_float+0xbe>
 801cd68:	9a05      	ldr	r2, [sp, #20]
 801cd6a:	f10b 0b01 	add.w	fp, fp, #1
 801cd6e:	e7b9      	b.n	801cce4 <_printf_float+0x30c>
 801cd70:	ee18 3a10 	vmov	r3, s16
 801cd74:	4652      	mov	r2, sl
 801cd76:	4631      	mov	r1, r6
 801cd78:	4628      	mov	r0, r5
 801cd7a:	47b8      	blx	r7
 801cd7c:	3001      	adds	r0, #1
 801cd7e:	d1be      	bne.n	801ccfe <_printf_float+0x326>
 801cd80:	e689      	b.n	801ca96 <_printf_float+0xbe>
 801cd82:	9a05      	ldr	r2, [sp, #20]
 801cd84:	464b      	mov	r3, r9
 801cd86:	4442      	add	r2, r8
 801cd88:	4631      	mov	r1, r6
 801cd8a:	4628      	mov	r0, r5
 801cd8c:	47b8      	blx	r7
 801cd8e:	3001      	adds	r0, #1
 801cd90:	d1c1      	bne.n	801cd16 <_printf_float+0x33e>
 801cd92:	e680      	b.n	801ca96 <_printf_float+0xbe>
 801cd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd96:	2a01      	cmp	r2, #1
 801cd98:	dc01      	bgt.n	801cd9e <_printf_float+0x3c6>
 801cd9a:	07db      	lsls	r3, r3, #31
 801cd9c:	d53a      	bpl.n	801ce14 <_printf_float+0x43c>
 801cd9e:	2301      	movs	r3, #1
 801cda0:	4642      	mov	r2, r8
 801cda2:	4631      	mov	r1, r6
 801cda4:	4628      	mov	r0, r5
 801cda6:	47b8      	blx	r7
 801cda8:	3001      	adds	r0, #1
 801cdaa:	f43f ae74 	beq.w	801ca96 <_printf_float+0xbe>
 801cdae:	ee18 3a10 	vmov	r3, s16
 801cdb2:	4652      	mov	r2, sl
 801cdb4:	4631      	mov	r1, r6
 801cdb6:	4628      	mov	r0, r5
 801cdb8:	47b8      	blx	r7
 801cdba:	3001      	adds	r0, #1
 801cdbc:	f43f ae6b 	beq.w	801ca96 <_printf_float+0xbe>
 801cdc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cdc4:	2200      	movs	r2, #0
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801cdcc:	f7e3 fea4 	bl	8000b18 <__aeabi_dcmpeq>
 801cdd0:	b9d8      	cbnz	r0, 801ce0a <_printf_float+0x432>
 801cdd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cdd6:	f108 0201 	add.w	r2, r8, #1
 801cdda:	4631      	mov	r1, r6
 801cddc:	4628      	mov	r0, r5
 801cdde:	47b8      	blx	r7
 801cde0:	3001      	adds	r0, #1
 801cde2:	d10e      	bne.n	801ce02 <_printf_float+0x42a>
 801cde4:	e657      	b.n	801ca96 <_printf_float+0xbe>
 801cde6:	2301      	movs	r3, #1
 801cde8:	4652      	mov	r2, sl
 801cdea:	4631      	mov	r1, r6
 801cdec:	4628      	mov	r0, r5
 801cdee:	47b8      	blx	r7
 801cdf0:	3001      	adds	r0, #1
 801cdf2:	f43f ae50 	beq.w	801ca96 <_printf_float+0xbe>
 801cdf6:	f108 0801 	add.w	r8, r8, #1
 801cdfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdfc:	3b01      	subs	r3, #1
 801cdfe:	4543      	cmp	r3, r8
 801ce00:	dcf1      	bgt.n	801cde6 <_printf_float+0x40e>
 801ce02:	464b      	mov	r3, r9
 801ce04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ce08:	e6da      	b.n	801cbc0 <_printf_float+0x1e8>
 801ce0a:	f04f 0800 	mov.w	r8, #0
 801ce0e:	f104 0a1a 	add.w	sl, r4, #26
 801ce12:	e7f2      	b.n	801cdfa <_printf_float+0x422>
 801ce14:	2301      	movs	r3, #1
 801ce16:	4642      	mov	r2, r8
 801ce18:	e7df      	b.n	801cdda <_printf_float+0x402>
 801ce1a:	2301      	movs	r3, #1
 801ce1c:	464a      	mov	r2, r9
 801ce1e:	4631      	mov	r1, r6
 801ce20:	4628      	mov	r0, r5
 801ce22:	47b8      	blx	r7
 801ce24:	3001      	adds	r0, #1
 801ce26:	f43f ae36 	beq.w	801ca96 <_printf_float+0xbe>
 801ce2a:	f108 0801 	add.w	r8, r8, #1
 801ce2e:	68e3      	ldr	r3, [r4, #12]
 801ce30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ce32:	1a5b      	subs	r3, r3, r1
 801ce34:	4543      	cmp	r3, r8
 801ce36:	dcf0      	bgt.n	801ce1a <_printf_float+0x442>
 801ce38:	e6f8      	b.n	801cc2c <_printf_float+0x254>
 801ce3a:	f04f 0800 	mov.w	r8, #0
 801ce3e:	f104 0919 	add.w	r9, r4, #25
 801ce42:	e7f4      	b.n	801ce2e <_printf_float+0x456>

0801ce44 <_printf_common>:
 801ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce48:	4616      	mov	r6, r2
 801ce4a:	4699      	mov	r9, r3
 801ce4c:	688a      	ldr	r2, [r1, #8]
 801ce4e:	690b      	ldr	r3, [r1, #16]
 801ce50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ce54:	4293      	cmp	r3, r2
 801ce56:	bfb8      	it	lt
 801ce58:	4613      	movlt	r3, r2
 801ce5a:	6033      	str	r3, [r6, #0]
 801ce5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ce60:	4607      	mov	r7, r0
 801ce62:	460c      	mov	r4, r1
 801ce64:	b10a      	cbz	r2, 801ce6a <_printf_common+0x26>
 801ce66:	3301      	adds	r3, #1
 801ce68:	6033      	str	r3, [r6, #0]
 801ce6a:	6823      	ldr	r3, [r4, #0]
 801ce6c:	0699      	lsls	r1, r3, #26
 801ce6e:	bf42      	ittt	mi
 801ce70:	6833      	ldrmi	r3, [r6, #0]
 801ce72:	3302      	addmi	r3, #2
 801ce74:	6033      	strmi	r3, [r6, #0]
 801ce76:	6825      	ldr	r5, [r4, #0]
 801ce78:	f015 0506 	ands.w	r5, r5, #6
 801ce7c:	d106      	bne.n	801ce8c <_printf_common+0x48>
 801ce7e:	f104 0a19 	add.w	sl, r4, #25
 801ce82:	68e3      	ldr	r3, [r4, #12]
 801ce84:	6832      	ldr	r2, [r6, #0]
 801ce86:	1a9b      	subs	r3, r3, r2
 801ce88:	42ab      	cmp	r3, r5
 801ce8a:	dc26      	bgt.n	801ceda <_printf_common+0x96>
 801ce8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ce90:	1e13      	subs	r3, r2, #0
 801ce92:	6822      	ldr	r2, [r4, #0]
 801ce94:	bf18      	it	ne
 801ce96:	2301      	movne	r3, #1
 801ce98:	0692      	lsls	r2, r2, #26
 801ce9a:	d42b      	bmi.n	801cef4 <_printf_common+0xb0>
 801ce9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cea0:	4649      	mov	r1, r9
 801cea2:	4638      	mov	r0, r7
 801cea4:	47c0      	blx	r8
 801cea6:	3001      	adds	r0, #1
 801cea8:	d01e      	beq.n	801cee8 <_printf_common+0xa4>
 801ceaa:	6823      	ldr	r3, [r4, #0]
 801ceac:	6922      	ldr	r2, [r4, #16]
 801ceae:	f003 0306 	and.w	r3, r3, #6
 801ceb2:	2b04      	cmp	r3, #4
 801ceb4:	bf02      	ittt	eq
 801ceb6:	68e5      	ldreq	r5, [r4, #12]
 801ceb8:	6833      	ldreq	r3, [r6, #0]
 801ceba:	1aed      	subeq	r5, r5, r3
 801cebc:	68a3      	ldr	r3, [r4, #8]
 801cebe:	bf0c      	ite	eq
 801cec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cec4:	2500      	movne	r5, #0
 801cec6:	4293      	cmp	r3, r2
 801cec8:	bfc4      	itt	gt
 801ceca:	1a9b      	subgt	r3, r3, r2
 801cecc:	18ed      	addgt	r5, r5, r3
 801cece:	2600      	movs	r6, #0
 801ced0:	341a      	adds	r4, #26
 801ced2:	42b5      	cmp	r5, r6
 801ced4:	d11a      	bne.n	801cf0c <_printf_common+0xc8>
 801ced6:	2000      	movs	r0, #0
 801ced8:	e008      	b.n	801ceec <_printf_common+0xa8>
 801ceda:	2301      	movs	r3, #1
 801cedc:	4652      	mov	r2, sl
 801cede:	4649      	mov	r1, r9
 801cee0:	4638      	mov	r0, r7
 801cee2:	47c0      	blx	r8
 801cee4:	3001      	adds	r0, #1
 801cee6:	d103      	bne.n	801cef0 <_printf_common+0xac>
 801cee8:	f04f 30ff 	mov.w	r0, #4294967295
 801ceec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cef0:	3501      	adds	r5, #1
 801cef2:	e7c6      	b.n	801ce82 <_printf_common+0x3e>
 801cef4:	18e1      	adds	r1, r4, r3
 801cef6:	1c5a      	adds	r2, r3, #1
 801cef8:	2030      	movs	r0, #48	; 0x30
 801cefa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cefe:	4422      	add	r2, r4
 801cf00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cf04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cf08:	3302      	adds	r3, #2
 801cf0a:	e7c7      	b.n	801ce9c <_printf_common+0x58>
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	4622      	mov	r2, r4
 801cf10:	4649      	mov	r1, r9
 801cf12:	4638      	mov	r0, r7
 801cf14:	47c0      	blx	r8
 801cf16:	3001      	adds	r0, #1
 801cf18:	d0e6      	beq.n	801cee8 <_printf_common+0xa4>
 801cf1a:	3601      	adds	r6, #1
 801cf1c:	e7d9      	b.n	801ced2 <_printf_common+0x8e>
	...

0801cf20 <_printf_i>:
 801cf20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf24:	7e0f      	ldrb	r7, [r1, #24]
 801cf26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cf28:	2f78      	cmp	r7, #120	; 0x78
 801cf2a:	4691      	mov	r9, r2
 801cf2c:	4680      	mov	r8, r0
 801cf2e:	460c      	mov	r4, r1
 801cf30:	469a      	mov	sl, r3
 801cf32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cf36:	d807      	bhi.n	801cf48 <_printf_i+0x28>
 801cf38:	2f62      	cmp	r7, #98	; 0x62
 801cf3a:	d80a      	bhi.n	801cf52 <_printf_i+0x32>
 801cf3c:	2f00      	cmp	r7, #0
 801cf3e:	f000 80d4 	beq.w	801d0ea <_printf_i+0x1ca>
 801cf42:	2f58      	cmp	r7, #88	; 0x58
 801cf44:	f000 80c0 	beq.w	801d0c8 <_printf_i+0x1a8>
 801cf48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cf4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cf50:	e03a      	b.n	801cfc8 <_printf_i+0xa8>
 801cf52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cf56:	2b15      	cmp	r3, #21
 801cf58:	d8f6      	bhi.n	801cf48 <_printf_i+0x28>
 801cf5a:	a101      	add	r1, pc, #4	; (adr r1, 801cf60 <_printf_i+0x40>)
 801cf5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cf60:	0801cfb9 	.word	0x0801cfb9
 801cf64:	0801cfcd 	.word	0x0801cfcd
 801cf68:	0801cf49 	.word	0x0801cf49
 801cf6c:	0801cf49 	.word	0x0801cf49
 801cf70:	0801cf49 	.word	0x0801cf49
 801cf74:	0801cf49 	.word	0x0801cf49
 801cf78:	0801cfcd 	.word	0x0801cfcd
 801cf7c:	0801cf49 	.word	0x0801cf49
 801cf80:	0801cf49 	.word	0x0801cf49
 801cf84:	0801cf49 	.word	0x0801cf49
 801cf88:	0801cf49 	.word	0x0801cf49
 801cf8c:	0801d0d1 	.word	0x0801d0d1
 801cf90:	0801cff9 	.word	0x0801cff9
 801cf94:	0801d08b 	.word	0x0801d08b
 801cf98:	0801cf49 	.word	0x0801cf49
 801cf9c:	0801cf49 	.word	0x0801cf49
 801cfa0:	0801d0f3 	.word	0x0801d0f3
 801cfa4:	0801cf49 	.word	0x0801cf49
 801cfa8:	0801cff9 	.word	0x0801cff9
 801cfac:	0801cf49 	.word	0x0801cf49
 801cfb0:	0801cf49 	.word	0x0801cf49
 801cfb4:	0801d093 	.word	0x0801d093
 801cfb8:	682b      	ldr	r3, [r5, #0]
 801cfba:	1d1a      	adds	r2, r3, #4
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	602a      	str	r2, [r5, #0]
 801cfc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cfc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cfc8:	2301      	movs	r3, #1
 801cfca:	e09f      	b.n	801d10c <_printf_i+0x1ec>
 801cfcc:	6820      	ldr	r0, [r4, #0]
 801cfce:	682b      	ldr	r3, [r5, #0]
 801cfd0:	0607      	lsls	r7, r0, #24
 801cfd2:	f103 0104 	add.w	r1, r3, #4
 801cfd6:	6029      	str	r1, [r5, #0]
 801cfd8:	d501      	bpl.n	801cfde <_printf_i+0xbe>
 801cfda:	681e      	ldr	r6, [r3, #0]
 801cfdc:	e003      	b.n	801cfe6 <_printf_i+0xc6>
 801cfde:	0646      	lsls	r6, r0, #25
 801cfe0:	d5fb      	bpl.n	801cfda <_printf_i+0xba>
 801cfe2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cfe6:	2e00      	cmp	r6, #0
 801cfe8:	da03      	bge.n	801cff2 <_printf_i+0xd2>
 801cfea:	232d      	movs	r3, #45	; 0x2d
 801cfec:	4276      	negs	r6, r6
 801cfee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cff2:	485a      	ldr	r0, [pc, #360]	; (801d15c <_printf_i+0x23c>)
 801cff4:	230a      	movs	r3, #10
 801cff6:	e012      	b.n	801d01e <_printf_i+0xfe>
 801cff8:	682b      	ldr	r3, [r5, #0]
 801cffa:	6820      	ldr	r0, [r4, #0]
 801cffc:	1d19      	adds	r1, r3, #4
 801cffe:	6029      	str	r1, [r5, #0]
 801d000:	0605      	lsls	r5, r0, #24
 801d002:	d501      	bpl.n	801d008 <_printf_i+0xe8>
 801d004:	681e      	ldr	r6, [r3, #0]
 801d006:	e002      	b.n	801d00e <_printf_i+0xee>
 801d008:	0641      	lsls	r1, r0, #25
 801d00a:	d5fb      	bpl.n	801d004 <_printf_i+0xe4>
 801d00c:	881e      	ldrh	r6, [r3, #0]
 801d00e:	4853      	ldr	r0, [pc, #332]	; (801d15c <_printf_i+0x23c>)
 801d010:	2f6f      	cmp	r7, #111	; 0x6f
 801d012:	bf0c      	ite	eq
 801d014:	2308      	moveq	r3, #8
 801d016:	230a      	movne	r3, #10
 801d018:	2100      	movs	r1, #0
 801d01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d01e:	6865      	ldr	r5, [r4, #4]
 801d020:	60a5      	str	r5, [r4, #8]
 801d022:	2d00      	cmp	r5, #0
 801d024:	bfa2      	ittt	ge
 801d026:	6821      	ldrge	r1, [r4, #0]
 801d028:	f021 0104 	bicge.w	r1, r1, #4
 801d02c:	6021      	strge	r1, [r4, #0]
 801d02e:	b90e      	cbnz	r6, 801d034 <_printf_i+0x114>
 801d030:	2d00      	cmp	r5, #0
 801d032:	d04b      	beq.n	801d0cc <_printf_i+0x1ac>
 801d034:	4615      	mov	r5, r2
 801d036:	fbb6 f1f3 	udiv	r1, r6, r3
 801d03a:	fb03 6711 	mls	r7, r3, r1, r6
 801d03e:	5dc7      	ldrb	r7, [r0, r7]
 801d040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d044:	4637      	mov	r7, r6
 801d046:	42bb      	cmp	r3, r7
 801d048:	460e      	mov	r6, r1
 801d04a:	d9f4      	bls.n	801d036 <_printf_i+0x116>
 801d04c:	2b08      	cmp	r3, #8
 801d04e:	d10b      	bne.n	801d068 <_printf_i+0x148>
 801d050:	6823      	ldr	r3, [r4, #0]
 801d052:	07de      	lsls	r6, r3, #31
 801d054:	d508      	bpl.n	801d068 <_printf_i+0x148>
 801d056:	6923      	ldr	r3, [r4, #16]
 801d058:	6861      	ldr	r1, [r4, #4]
 801d05a:	4299      	cmp	r1, r3
 801d05c:	bfde      	ittt	le
 801d05e:	2330      	movle	r3, #48	; 0x30
 801d060:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d064:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d068:	1b52      	subs	r2, r2, r5
 801d06a:	6122      	str	r2, [r4, #16]
 801d06c:	f8cd a000 	str.w	sl, [sp]
 801d070:	464b      	mov	r3, r9
 801d072:	aa03      	add	r2, sp, #12
 801d074:	4621      	mov	r1, r4
 801d076:	4640      	mov	r0, r8
 801d078:	f7ff fee4 	bl	801ce44 <_printf_common>
 801d07c:	3001      	adds	r0, #1
 801d07e:	d14a      	bne.n	801d116 <_printf_i+0x1f6>
 801d080:	f04f 30ff 	mov.w	r0, #4294967295
 801d084:	b004      	add	sp, #16
 801d086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d08a:	6823      	ldr	r3, [r4, #0]
 801d08c:	f043 0320 	orr.w	r3, r3, #32
 801d090:	6023      	str	r3, [r4, #0]
 801d092:	4833      	ldr	r0, [pc, #204]	; (801d160 <_printf_i+0x240>)
 801d094:	2778      	movs	r7, #120	; 0x78
 801d096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d09a:	6823      	ldr	r3, [r4, #0]
 801d09c:	6829      	ldr	r1, [r5, #0]
 801d09e:	061f      	lsls	r7, r3, #24
 801d0a0:	f851 6b04 	ldr.w	r6, [r1], #4
 801d0a4:	d402      	bmi.n	801d0ac <_printf_i+0x18c>
 801d0a6:	065f      	lsls	r7, r3, #25
 801d0a8:	bf48      	it	mi
 801d0aa:	b2b6      	uxthmi	r6, r6
 801d0ac:	07df      	lsls	r7, r3, #31
 801d0ae:	bf48      	it	mi
 801d0b0:	f043 0320 	orrmi.w	r3, r3, #32
 801d0b4:	6029      	str	r1, [r5, #0]
 801d0b6:	bf48      	it	mi
 801d0b8:	6023      	strmi	r3, [r4, #0]
 801d0ba:	b91e      	cbnz	r6, 801d0c4 <_printf_i+0x1a4>
 801d0bc:	6823      	ldr	r3, [r4, #0]
 801d0be:	f023 0320 	bic.w	r3, r3, #32
 801d0c2:	6023      	str	r3, [r4, #0]
 801d0c4:	2310      	movs	r3, #16
 801d0c6:	e7a7      	b.n	801d018 <_printf_i+0xf8>
 801d0c8:	4824      	ldr	r0, [pc, #144]	; (801d15c <_printf_i+0x23c>)
 801d0ca:	e7e4      	b.n	801d096 <_printf_i+0x176>
 801d0cc:	4615      	mov	r5, r2
 801d0ce:	e7bd      	b.n	801d04c <_printf_i+0x12c>
 801d0d0:	682b      	ldr	r3, [r5, #0]
 801d0d2:	6826      	ldr	r6, [r4, #0]
 801d0d4:	6961      	ldr	r1, [r4, #20]
 801d0d6:	1d18      	adds	r0, r3, #4
 801d0d8:	6028      	str	r0, [r5, #0]
 801d0da:	0635      	lsls	r5, r6, #24
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	d501      	bpl.n	801d0e4 <_printf_i+0x1c4>
 801d0e0:	6019      	str	r1, [r3, #0]
 801d0e2:	e002      	b.n	801d0ea <_printf_i+0x1ca>
 801d0e4:	0670      	lsls	r0, r6, #25
 801d0e6:	d5fb      	bpl.n	801d0e0 <_printf_i+0x1c0>
 801d0e8:	8019      	strh	r1, [r3, #0]
 801d0ea:	2300      	movs	r3, #0
 801d0ec:	6123      	str	r3, [r4, #16]
 801d0ee:	4615      	mov	r5, r2
 801d0f0:	e7bc      	b.n	801d06c <_printf_i+0x14c>
 801d0f2:	682b      	ldr	r3, [r5, #0]
 801d0f4:	1d1a      	adds	r2, r3, #4
 801d0f6:	602a      	str	r2, [r5, #0]
 801d0f8:	681d      	ldr	r5, [r3, #0]
 801d0fa:	6862      	ldr	r2, [r4, #4]
 801d0fc:	2100      	movs	r1, #0
 801d0fe:	4628      	mov	r0, r5
 801d100:	f7e3 f88e 	bl	8000220 <memchr>
 801d104:	b108      	cbz	r0, 801d10a <_printf_i+0x1ea>
 801d106:	1b40      	subs	r0, r0, r5
 801d108:	6060      	str	r0, [r4, #4]
 801d10a:	6863      	ldr	r3, [r4, #4]
 801d10c:	6123      	str	r3, [r4, #16]
 801d10e:	2300      	movs	r3, #0
 801d110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d114:	e7aa      	b.n	801d06c <_printf_i+0x14c>
 801d116:	6923      	ldr	r3, [r4, #16]
 801d118:	462a      	mov	r2, r5
 801d11a:	4649      	mov	r1, r9
 801d11c:	4640      	mov	r0, r8
 801d11e:	47d0      	blx	sl
 801d120:	3001      	adds	r0, #1
 801d122:	d0ad      	beq.n	801d080 <_printf_i+0x160>
 801d124:	6823      	ldr	r3, [r4, #0]
 801d126:	079b      	lsls	r3, r3, #30
 801d128:	d413      	bmi.n	801d152 <_printf_i+0x232>
 801d12a:	68e0      	ldr	r0, [r4, #12]
 801d12c:	9b03      	ldr	r3, [sp, #12]
 801d12e:	4298      	cmp	r0, r3
 801d130:	bfb8      	it	lt
 801d132:	4618      	movlt	r0, r3
 801d134:	e7a6      	b.n	801d084 <_printf_i+0x164>
 801d136:	2301      	movs	r3, #1
 801d138:	4632      	mov	r2, r6
 801d13a:	4649      	mov	r1, r9
 801d13c:	4640      	mov	r0, r8
 801d13e:	47d0      	blx	sl
 801d140:	3001      	adds	r0, #1
 801d142:	d09d      	beq.n	801d080 <_printf_i+0x160>
 801d144:	3501      	adds	r5, #1
 801d146:	68e3      	ldr	r3, [r4, #12]
 801d148:	9903      	ldr	r1, [sp, #12]
 801d14a:	1a5b      	subs	r3, r3, r1
 801d14c:	42ab      	cmp	r3, r5
 801d14e:	dcf2      	bgt.n	801d136 <_printf_i+0x216>
 801d150:	e7eb      	b.n	801d12a <_printf_i+0x20a>
 801d152:	2500      	movs	r5, #0
 801d154:	f104 0619 	add.w	r6, r4, #25
 801d158:	e7f5      	b.n	801d146 <_printf_i+0x226>
 801d15a:	bf00      	nop
 801d15c:	080219e7 	.word	0x080219e7
 801d160:	080219f8 	.word	0x080219f8

0801d164 <std>:
 801d164:	2300      	movs	r3, #0
 801d166:	b510      	push	{r4, lr}
 801d168:	4604      	mov	r4, r0
 801d16a:	e9c0 3300 	strd	r3, r3, [r0]
 801d16e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d172:	6083      	str	r3, [r0, #8]
 801d174:	8181      	strh	r1, [r0, #12]
 801d176:	6643      	str	r3, [r0, #100]	; 0x64
 801d178:	81c2      	strh	r2, [r0, #14]
 801d17a:	6183      	str	r3, [r0, #24]
 801d17c:	4619      	mov	r1, r3
 801d17e:	2208      	movs	r2, #8
 801d180:	305c      	adds	r0, #92	; 0x5c
 801d182:	f000 f989 	bl	801d498 <memset>
 801d186:	4b05      	ldr	r3, [pc, #20]	; (801d19c <std+0x38>)
 801d188:	6263      	str	r3, [r4, #36]	; 0x24
 801d18a:	4b05      	ldr	r3, [pc, #20]	; (801d1a0 <std+0x3c>)
 801d18c:	62a3      	str	r3, [r4, #40]	; 0x28
 801d18e:	4b05      	ldr	r3, [pc, #20]	; (801d1a4 <std+0x40>)
 801d190:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d192:	4b05      	ldr	r3, [pc, #20]	; (801d1a8 <std+0x44>)
 801d194:	6224      	str	r4, [r4, #32]
 801d196:	6323      	str	r3, [r4, #48]	; 0x30
 801d198:	bd10      	pop	{r4, pc}
 801d19a:	bf00      	nop
 801d19c:	0801d2e9 	.word	0x0801d2e9
 801d1a0:	0801d30b 	.word	0x0801d30b
 801d1a4:	0801d343 	.word	0x0801d343
 801d1a8:	0801d367 	.word	0x0801d367

0801d1ac <stdio_exit_handler>:
 801d1ac:	4a02      	ldr	r2, [pc, #8]	; (801d1b8 <stdio_exit_handler+0xc>)
 801d1ae:	4903      	ldr	r1, [pc, #12]	; (801d1bc <stdio_exit_handler+0x10>)
 801d1b0:	4803      	ldr	r0, [pc, #12]	; (801d1c0 <stdio_exit_handler+0x14>)
 801d1b2:	f000 b87b 	b.w	801d2ac <_fwalk_sglue>
 801d1b6:	bf00      	nop
 801d1b8:	20000014 	.word	0x20000014
 801d1bc:	0801ef41 	.word	0x0801ef41
 801d1c0:	20000020 	.word	0x20000020

0801d1c4 <cleanup_stdio>:
 801d1c4:	6841      	ldr	r1, [r0, #4]
 801d1c6:	4b0c      	ldr	r3, [pc, #48]	; (801d1f8 <cleanup_stdio+0x34>)
 801d1c8:	4299      	cmp	r1, r3
 801d1ca:	b510      	push	{r4, lr}
 801d1cc:	4604      	mov	r4, r0
 801d1ce:	d001      	beq.n	801d1d4 <cleanup_stdio+0x10>
 801d1d0:	f001 feb6 	bl	801ef40 <_fflush_r>
 801d1d4:	68a1      	ldr	r1, [r4, #8]
 801d1d6:	4b09      	ldr	r3, [pc, #36]	; (801d1fc <cleanup_stdio+0x38>)
 801d1d8:	4299      	cmp	r1, r3
 801d1da:	d002      	beq.n	801d1e2 <cleanup_stdio+0x1e>
 801d1dc:	4620      	mov	r0, r4
 801d1de:	f001 feaf 	bl	801ef40 <_fflush_r>
 801d1e2:	68e1      	ldr	r1, [r4, #12]
 801d1e4:	4b06      	ldr	r3, [pc, #24]	; (801d200 <cleanup_stdio+0x3c>)
 801d1e6:	4299      	cmp	r1, r3
 801d1e8:	d004      	beq.n	801d1f4 <cleanup_stdio+0x30>
 801d1ea:	4620      	mov	r0, r4
 801d1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1f0:	f001 bea6 	b.w	801ef40 <_fflush_r>
 801d1f4:	bd10      	pop	{r4, pc}
 801d1f6:	bf00      	nop
 801d1f8:	200167ac 	.word	0x200167ac
 801d1fc:	20016814 	.word	0x20016814
 801d200:	2001687c 	.word	0x2001687c

0801d204 <global_stdio_init.part.0>:
 801d204:	b510      	push	{r4, lr}
 801d206:	4b0b      	ldr	r3, [pc, #44]	; (801d234 <global_stdio_init.part.0+0x30>)
 801d208:	4c0b      	ldr	r4, [pc, #44]	; (801d238 <global_stdio_init.part.0+0x34>)
 801d20a:	4a0c      	ldr	r2, [pc, #48]	; (801d23c <global_stdio_init.part.0+0x38>)
 801d20c:	601a      	str	r2, [r3, #0]
 801d20e:	4620      	mov	r0, r4
 801d210:	2200      	movs	r2, #0
 801d212:	2104      	movs	r1, #4
 801d214:	f7ff ffa6 	bl	801d164 <std>
 801d218:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d21c:	2201      	movs	r2, #1
 801d21e:	2109      	movs	r1, #9
 801d220:	f7ff ffa0 	bl	801d164 <std>
 801d224:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d228:	2202      	movs	r2, #2
 801d22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d22e:	2112      	movs	r1, #18
 801d230:	f7ff bf98 	b.w	801d164 <std>
 801d234:	200168e4 	.word	0x200168e4
 801d238:	200167ac 	.word	0x200167ac
 801d23c:	0801d1ad 	.word	0x0801d1ad

0801d240 <__sfp_lock_acquire>:
 801d240:	4801      	ldr	r0, [pc, #4]	; (801d248 <__sfp_lock_acquire+0x8>)
 801d242:	f000 b9a5 	b.w	801d590 <__retarget_lock_acquire_recursive>
 801d246:	bf00      	nop
 801d248:	200168ed 	.word	0x200168ed

0801d24c <__sfp_lock_release>:
 801d24c:	4801      	ldr	r0, [pc, #4]	; (801d254 <__sfp_lock_release+0x8>)
 801d24e:	f000 b9a0 	b.w	801d592 <__retarget_lock_release_recursive>
 801d252:	bf00      	nop
 801d254:	200168ed 	.word	0x200168ed

0801d258 <__sinit>:
 801d258:	b510      	push	{r4, lr}
 801d25a:	4604      	mov	r4, r0
 801d25c:	f7ff fff0 	bl	801d240 <__sfp_lock_acquire>
 801d260:	6a23      	ldr	r3, [r4, #32]
 801d262:	b11b      	cbz	r3, 801d26c <__sinit+0x14>
 801d264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d268:	f7ff bff0 	b.w	801d24c <__sfp_lock_release>
 801d26c:	4b04      	ldr	r3, [pc, #16]	; (801d280 <__sinit+0x28>)
 801d26e:	6223      	str	r3, [r4, #32]
 801d270:	4b04      	ldr	r3, [pc, #16]	; (801d284 <__sinit+0x2c>)
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d1f5      	bne.n	801d264 <__sinit+0xc>
 801d278:	f7ff ffc4 	bl	801d204 <global_stdio_init.part.0>
 801d27c:	e7f2      	b.n	801d264 <__sinit+0xc>
 801d27e:	bf00      	nop
 801d280:	0801d1c5 	.word	0x0801d1c5
 801d284:	200168e4 	.word	0x200168e4

0801d288 <fiprintf>:
 801d288:	b40e      	push	{r1, r2, r3}
 801d28a:	b503      	push	{r0, r1, lr}
 801d28c:	4601      	mov	r1, r0
 801d28e:	ab03      	add	r3, sp, #12
 801d290:	4805      	ldr	r0, [pc, #20]	; (801d2a8 <fiprintf+0x20>)
 801d292:	f853 2b04 	ldr.w	r2, [r3], #4
 801d296:	6800      	ldr	r0, [r0, #0]
 801d298:	9301      	str	r3, [sp, #4]
 801d29a:	f001 fcb1 	bl	801ec00 <_vfiprintf_r>
 801d29e:	b002      	add	sp, #8
 801d2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d2a4:	b003      	add	sp, #12
 801d2a6:	4770      	bx	lr
 801d2a8:	2000006c 	.word	0x2000006c

0801d2ac <_fwalk_sglue>:
 801d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2b0:	4607      	mov	r7, r0
 801d2b2:	4688      	mov	r8, r1
 801d2b4:	4614      	mov	r4, r2
 801d2b6:	2600      	movs	r6, #0
 801d2b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d2bc:	f1b9 0901 	subs.w	r9, r9, #1
 801d2c0:	d505      	bpl.n	801d2ce <_fwalk_sglue+0x22>
 801d2c2:	6824      	ldr	r4, [r4, #0]
 801d2c4:	2c00      	cmp	r4, #0
 801d2c6:	d1f7      	bne.n	801d2b8 <_fwalk_sglue+0xc>
 801d2c8:	4630      	mov	r0, r6
 801d2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2ce:	89ab      	ldrh	r3, [r5, #12]
 801d2d0:	2b01      	cmp	r3, #1
 801d2d2:	d907      	bls.n	801d2e4 <_fwalk_sglue+0x38>
 801d2d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d2d8:	3301      	adds	r3, #1
 801d2da:	d003      	beq.n	801d2e4 <_fwalk_sglue+0x38>
 801d2dc:	4629      	mov	r1, r5
 801d2de:	4638      	mov	r0, r7
 801d2e0:	47c0      	blx	r8
 801d2e2:	4306      	orrs	r6, r0
 801d2e4:	3568      	adds	r5, #104	; 0x68
 801d2e6:	e7e9      	b.n	801d2bc <_fwalk_sglue+0x10>

0801d2e8 <__sread>:
 801d2e8:	b510      	push	{r4, lr}
 801d2ea:	460c      	mov	r4, r1
 801d2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2f0:	f000 f900 	bl	801d4f4 <_read_r>
 801d2f4:	2800      	cmp	r0, #0
 801d2f6:	bfab      	itete	ge
 801d2f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d2fa:	89a3      	ldrhlt	r3, [r4, #12]
 801d2fc:	181b      	addge	r3, r3, r0
 801d2fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d302:	bfac      	ite	ge
 801d304:	6563      	strge	r3, [r4, #84]	; 0x54
 801d306:	81a3      	strhlt	r3, [r4, #12]
 801d308:	bd10      	pop	{r4, pc}

0801d30a <__swrite>:
 801d30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d30e:	461f      	mov	r7, r3
 801d310:	898b      	ldrh	r3, [r1, #12]
 801d312:	05db      	lsls	r3, r3, #23
 801d314:	4605      	mov	r5, r0
 801d316:	460c      	mov	r4, r1
 801d318:	4616      	mov	r6, r2
 801d31a:	d505      	bpl.n	801d328 <__swrite+0x1e>
 801d31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d320:	2302      	movs	r3, #2
 801d322:	2200      	movs	r2, #0
 801d324:	f000 f8d4 	bl	801d4d0 <_lseek_r>
 801d328:	89a3      	ldrh	r3, [r4, #12]
 801d32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d32e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d332:	81a3      	strh	r3, [r4, #12]
 801d334:	4632      	mov	r2, r6
 801d336:	463b      	mov	r3, r7
 801d338:	4628      	mov	r0, r5
 801d33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d33e:	f000 b8eb 	b.w	801d518 <_write_r>

0801d342 <__sseek>:
 801d342:	b510      	push	{r4, lr}
 801d344:	460c      	mov	r4, r1
 801d346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d34a:	f000 f8c1 	bl	801d4d0 <_lseek_r>
 801d34e:	1c43      	adds	r3, r0, #1
 801d350:	89a3      	ldrh	r3, [r4, #12]
 801d352:	bf15      	itete	ne
 801d354:	6560      	strne	r0, [r4, #84]	; 0x54
 801d356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d35a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d35e:	81a3      	strheq	r3, [r4, #12]
 801d360:	bf18      	it	ne
 801d362:	81a3      	strhne	r3, [r4, #12]
 801d364:	bd10      	pop	{r4, pc}

0801d366 <__sclose>:
 801d366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d36a:	f000 b8a1 	b.w	801d4b0 <_close_r>

0801d36e <__swbuf_r>:
 801d36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d370:	460e      	mov	r6, r1
 801d372:	4614      	mov	r4, r2
 801d374:	4605      	mov	r5, r0
 801d376:	b118      	cbz	r0, 801d380 <__swbuf_r+0x12>
 801d378:	6a03      	ldr	r3, [r0, #32]
 801d37a:	b90b      	cbnz	r3, 801d380 <__swbuf_r+0x12>
 801d37c:	f7ff ff6c 	bl	801d258 <__sinit>
 801d380:	69a3      	ldr	r3, [r4, #24]
 801d382:	60a3      	str	r3, [r4, #8]
 801d384:	89a3      	ldrh	r3, [r4, #12]
 801d386:	071a      	lsls	r2, r3, #28
 801d388:	d525      	bpl.n	801d3d6 <__swbuf_r+0x68>
 801d38a:	6923      	ldr	r3, [r4, #16]
 801d38c:	b31b      	cbz	r3, 801d3d6 <__swbuf_r+0x68>
 801d38e:	6823      	ldr	r3, [r4, #0]
 801d390:	6922      	ldr	r2, [r4, #16]
 801d392:	1a98      	subs	r0, r3, r2
 801d394:	6963      	ldr	r3, [r4, #20]
 801d396:	b2f6      	uxtb	r6, r6
 801d398:	4283      	cmp	r3, r0
 801d39a:	4637      	mov	r7, r6
 801d39c:	dc04      	bgt.n	801d3a8 <__swbuf_r+0x3a>
 801d39e:	4621      	mov	r1, r4
 801d3a0:	4628      	mov	r0, r5
 801d3a2:	f001 fdcd 	bl	801ef40 <_fflush_r>
 801d3a6:	b9e0      	cbnz	r0, 801d3e2 <__swbuf_r+0x74>
 801d3a8:	68a3      	ldr	r3, [r4, #8]
 801d3aa:	3b01      	subs	r3, #1
 801d3ac:	60a3      	str	r3, [r4, #8]
 801d3ae:	6823      	ldr	r3, [r4, #0]
 801d3b0:	1c5a      	adds	r2, r3, #1
 801d3b2:	6022      	str	r2, [r4, #0]
 801d3b4:	701e      	strb	r6, [r3, #0]
 801d3b6:	6962      	ldr	r2, [r4, #20]
 801d3b8:	1c43      	adds	r3, r0, #1
 801d3ba:	429a      	cmp	r2, r3
 801d3bc:	d004      	beq.n	801d3c8 <__swbuf_r+0x5a>
 801d3be:	89a3      	ldrh	r3, [r4, #12]
 801d3c0:	07db      	lsls	r3, r3, #31
 801d3c2:	d506      	bpl.n	801d3d2 <__swbuf_r+0x64>
 801d3c4:	2e0a      	cmp	r6, #10
 801d3c6:	d104      	bne.n	801d3d2 <__swbuf_r+0x64>
 801d3c8:	4621      	mov	r1, r4
 801d3ca:	4628      	mov	r0, r5
 801d3cc:	f001 fdb8 	bl	801ef40 <_fflush_r>
 801d3d0:	b938      	cbnz	r0, 801d3e2 <__swbuf_r+0x74>
 801d3d2:	4638      	mov	r0, r7
 801d3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	4628      	mov	r0, r5
 801d3da:	f000 f805 	bl	801d3e8 <__swsetup_r>
 801d3de:	2800      	cmp	r0, #0
 801d3e0:	d0d5      	beq.n	801d38e <__swbuf_r+0x20>
 801d3e2:	f04f 37ff 	mov.w	r7, #4294967295
 801d3e6:	e7f4      	b.n	801d3d2 <__swbuf_r+0x64>

0801d3e8 <__swsetup_r>:
 801d3e8:	b538      	push	{r3, r4, r5, lr}
 801d3ea:	4b2a      	ldr	r3, [pc, #168]	; (801d494 <__swsetup_r+0xac>)
 801d3ec:	4605      	mov	r5, r0
 801d3ee:	6818      	ldr	r0, [r3, #0]
 801d3f0:	460c      	mov	r4, r1
 801d3f2:	b118      	cbz	r0, 801d3fc <__swsetup_r+0x14>
 801d3f4:	6a03      	ldr	r3, [r0, #32]
 801d3f6:	b90b      	cbnz	r3, 801d3fc <__swsetup_r+0x14>
 801d3f8:	f7ff ff2e 	bl	801d258 <__sinit>
 801d3fc:	89a3      	ldrh	r3, [r4, #12]
 801d3fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d402:	0718      	lsls	r0, r3, #28
 801d404:	d422      	bmi.n	801d44c <__swsetup_r+0x64>
 801d406:	06d9      	lsls	r1, r3, #27
 801d408:	d407      	bmi.n	801d41a <__swsetup_r+0x32>
 801d40a:	2309      	movs	r3, #9
 801d40c:	602b      	str	r3, [r5, #0]
 801d40e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d412:	81a3      	strh	r3, [r4, #12]
 801d414:	f04f 30ff 	mov.w	r0, #4294967295
 801d418:	e034      	b.n	801d484 <__swsetup_r+0x9c>
 801d41a:	0758      	lsls	r0, r3, #29
 801d41c:	d512      	bpl.n	801d444 <__swsetup_r+0x5c>
 801d41e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d420:	b141      	cbz	r1, 801d434 <__swsetup_r+0x4c>
 801d422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d426:	4299      	cmp	r1, r3
 801d428:	d002      	beq.n	801d430 <__swsetup_r+0x48>
 801d42a:	4628      	mov	r0, r5
 801d42c:	f000 ff42 	bl	801e2b4 <_free_r>
 801d430:	2300      	movs	r3, #0
 801d432:	6363      	str	r3, [r4, #52]	; 0x34
 801d434:	89a3      	ldrh	r3, [r4, #12]
 801d436:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d43a:	81a3      	strh	r3, [r4, #12]
 801d43c:	2300      	movs	r3, #0
 801d43e:	6063      	str	r3, [r4, #4]
 801d440:	6923      	ldr	r3, [r4, #16]
 801d442:	6023      	str	r3, [r4, #0]
 801d444:	89a3      	ldrh	r3, [r4, #12]
 801d446:	f043 0308 	orr.w	r3, r3, #8
 801d44a:	81a3      	strh	r3, [r4, #12]
 801d44c:	6923      	ldr	r3, [r4, #16]
 801d44e:	b94b      	cbnz	r3, 801d464 <__swsetup_r+0x7c>
 801d450:	89a3      	ldrh	r3, [r4, #12]
 801d452:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d45a:	d003      	beq.n	801d464 <__swsetup_r+0x7c>
 801d45c:	4621      	mov	r1, r4
 801d45e:	4628      	mov	r0, r5
 801d460:	f001 fdbc 	bl	801efdc <__smakebuf_r>
 801d464:	89a0      	ldrh	r0, [r4, #12]
 801d466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d46a:	f010 0301 	ands.w	r3, r0, #1
 801d46e:	d00a      	beq.n	801d486 <__swsetup_r+0x9e>
 801d470:	2300      	movs	r3, #0
 801d472:	60a3      	str	r3, [r4, #8]
 801d474:	6963      	ldr	r3, [r4, #20]
 801d476:	425b      	negs	r3, r3
 801d478:	61a3      	str	r3, [r4, #24]
 801d47a:	6923      	ldr	r3, [r4, #16]
 801d47c:	b943      	cbnz	r3, 801d490 <__swsetup_r+0xa8>
 801d47e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d482:	d1c4      	bne.n	801d40e <__swsetup_r+0x26>
 801d484:	bd38      	pop	{r3, r4, r5, pc}
 801d486:	0781      	lsls	r1, r0, #30
 801d488:	bf58      	it	pl
 801d48a:	6963      	ldrpl	r3, [r4, #20]
 801d48c:	60a3      	str	r3, [r4, #8]
 801d48e:	e7f4      	b.n	801d47a <__swsetup_r+0x92>
 801d490:	2000      	movs	r0, #0
 801d492:	e7f7      	b.n	801d484 <__swsetup_r+0x9c>
 801d494:	2000006c 	.word	0x2000006c

0801d498 <memset>:
 801d498:	4402      	add	r2, r0
 801d49a:	4603      	mov	r3, r0
 801d49c:	4293      	cmp	r3, r2
 801d49e:	d100      	bne.n	801d4a2 <memset+0xa>
 801d4a0:	4770      	bx	lr
 801d4a2:	f803 1b01 	strb.w	r1, [r3], #1
 801d4a6:	e7f9      	b.n	801d49c <memset+0x4>

0801d4a8 <_localeconv_r>:
 801d4a8:	4800      	ldr	r0, [pc, #0]	; (801d4ac <_localeconv_r+0x4>)
 801d4aa:	4770      	bx	lr
 801d4ac:	20000160 	.word	0x20000160

0801d4b0 <_close_r>:
 801d4b0:	b538      	push	{r3, r4, r5, lr}
 801d4b2:	4d06      	ldr	r5, [pc, #24]	; (801d4cc <_close_r+0x1c>)
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	4604      	mov	r4, r0
 801d4b8:	4608      	mov	r0, r1
 801d4ba:	602b      	str	r3, [r5, #0]
 801d4bc:	f7e7 fb33 	bl	8004b26 <_close>
 801d4c0:	1c43      	adds	r3, r0, #1
 801d4c2:	d102      	bne.n	801d4ca <_close_r+0x1a>
 801d4c4:	682b      	ldr	r3, [r5, #0]
 801d4c6:	b103      	cbz	r3, 801d4ca <_close_r+0x1a>
 801d4c8:	6023      	str	r3, [r4, #0]
 801d4ca:	bd38      	pop	{r3, r4, r5, pc}
 801d4cc:	200168e8 	.word	0x200168e8

0801d4d0 <_lseek_r>:
 801d4d0:	b538      	push	{r3, r4, r5, lr}
 801d4d2:	4d07      	ldr	r5, [pc, #28]	; (801d4f0 <_lseek_r+0x20>)
 801d4d4:	4604      	mov	r4, r0
 801d4d6:	4608      	mov	r0, r1
 801d4d8:	4611      	mov	r1, r2
 801d4da:	2200      	movs	r2, #0
 801d4dc:	602a      	str	r2, [r5, #0]
 801d4de:	461a      	mov	r2, r3
 801d4e0:	f7e7 fb48 	bl	8004b74 <_lseek>
 801d4e4:	1c43      	adds	r3, r0, #1
 801d4e6:	d102      	bne.n	801d4ee <_lseek_r+0x1e>
 801d4e8:	682b      	ldr	r3, [r5, #0]
 801d4ea:	b103      	cbz	r3, 801d4ee <_lseek_r+0x1e>
 801d4ec:	6023      	str	r3, [r4, #0]
 801d4ee:	bd38      	pop	{r3, r4, r5, pc}
 801d4f0:	200168e8 	.word	0x200168e8

0801d4f4 <_read_r>:
 801d4f4:	b538      	push	{r3, r4, r5, lr}
 801d4f6:	4d07      	ldr	r5, [pc, #28]	; (801d514 <_read_r+0x20>)
 801d4f8:	4604      	mov	r4, r0
 801d4fa:	4608      	mov	r0, r1
 801d4fc:	4611      	mov	r1, r2
 801d4fe:	2200      	movs	r2, #0
 801d500:	602a      	str	r2, [r5, #0]
 801d502:	461a      	mov	r2, r3
 801d504:	f7e7 faf2 	bl	8004aec <_read>
 801d508:	1c43      	adds	r3, r0, #1
 801d50a:	d102      	bne.n	801d512 <_read_r+0x1e>
 801d50c:	682b      	ldr	r3, [r5, #0]
 801d50e:	b103      	cbz	r3, 801d512 <_read_r+0x1e>
 801d510:	6023      	str	r3, [r4, #0]
 801d512:	bd38      	pop	{r3, r4, r5, pc}
 801d514:	200168e8 	.word	0x200168e8

0801d518 <_write_r>:
 801d518:	b538      	push	{r3, r4, r5, lr}
 801d51a:	4d07      	ldr	r5, [pc, #28]	; (801d538 <_write_r+0x20>)
 801d51c:	4604      	mov	r4, r0
 801d51e:	4608      	mov	r0, r1
 801d520:	4611      	mov	r1, r2
 801d522:	2200      	movs	r2, #0
 801d524:	602a      	str	r2, [r5, #0]
 801d526:	461a      	mov	r2, r3
 801d528:	f7e4 fa67 	bl	80019fa <_write>
 801d52c:	1c43      	adds	r3, r0, #1
 801d52e:	d102      	bne.n	801d536 <_write_r+0x1e>
 801d530:	682b      	ldr	r3, [r5, #0]
 801d532:	b103      	cbz	r3, 801d536 <_write_r+0x1e>
 801d534:	6023      	str	r3, [r4, #0]
 801d536:	bd38      	pop	{r3, r4, r5, pc}
 801d538:	200168e8 	.word	0x200168e8

0801d53c <__errno>:
 801d53c:	4b01      	ldr	r3, [pc, #4]	; (801d544 <__errno+0x8>)
 801d53e:	6818      	ldr	r0, [r3, #0]
 801d540:	4770      	bx	lr
 801d542:	bf00      	nop
 801d544:	2000006c 	.word	0x2000006c

0801d548 <__libc_init_array>:
 801d548:	b570      	push	{r4, r5, r6, lr}
 801d54a:	4d0d      	ldr	r5, [pc, #52]	; (801d580 <__libc_init_array+0x38>)
 801d54c:	4c0d      	ldr	r4, [pc, #52]	; (801d584 <__libc_init_array+0x3c>)
 801d54e:	1b64      	subs	r4, r4, r5
 801d550:	10a4      	asrs	r4, r4, #2
 801d552:	2600      	movs	r6, #0
 801d554:	42a6      	cmp	r6, r4
 801d556:	d109      	bne.n	801d56c <__libc_init_array+0x24>
 801d558:	4d0b      	ldr	r5, [pc, #44]	; (801d588 <__libc_init_array+0x40>)
 801d55a:	4c0c      	ldr	r4, [pc, #48]	; (801d58c <__libc_init_array+0x44>)
 801d55c:	f002 fb60 	bl	801fc20 <_init>
 801d560:	1b64      	subs	r4, r4, r5
 801d562:	10a4      	asrs	r4, r4, #2
 801d564:	2600      	movs	r6, #0
 801d566:	42a6      	cmp	r6, r4
 801d568:	d105      	bne.n	801d576 <__libc_init_array+0x2e>
 801d56a:	bd70      	pop	{r4, r5, r6, pc}
 801d56c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d570:	4798      	blx	r3
 801d572:	3601      	adds	r6, #1
 801d574:	e7ee      	b.n	801d554 <__libc_init_array+0xc>
 801d576:	f855 3b04 	ldr.w	r3, [r5], #4
 801d57a:	4798      	blx	r3
 801d57c:	3601      	adds	r6, #1
 801d57e:	e7f2      	b.n	801d566 <__libc_init_array+0x1e>
 801d580:	080220d8 	.word	0x080220d8
 801d584:	080220d8 	.word	0x080220d8
 801d588:	080220d8 	.word	0x080220d8
 801d58c:	080220dc 	.word	0x080220dc

0801d590 <__retarget_lock_acquire_recursive>:
 801d590:	4770      	bx	lr

0801d592 <__retarget_lock_release_recursive>:
 801d592:	4770      	bx	lr

0801d594 <memcpy>:
 801d594:	440a      	add	r2, r1
 801d596:	4291      	cmp	r1, r2
 801d598:	f100 33ff 	add.w	r3, r0, #4294967295
 801d59c:	d100      	bne.n	801d5a0 <memcpy+0xc>
 801d59e:	4770      	bx	lr
 801d5a0:	b510      	push	{r4, lr}
 801d5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d5aa:	4291      	cmp	r1, r2
 801d5ac:	d1f9      	bne.n	801d5a2 <memcpy+0xe>
 801d5ae:	bd10      	pop	{r4, pc}

0801d5b0 <abort>:
 801d5b0:	b508      	push	{r3, lr}
 801d5b2:	2006      	movs	r0, #6
 801d5b4:	f001 fd76 	bl	801f0a4 <raise>
 801d5b8:	2001      	movs	r0, #1
 801d5ba:	f7e7 fa8d 	bl	8004ad8 <_exit>

0801d5be <quorem>:
 801d5be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5c2:	6903      	ldr	r3, [r0, #16]
 801d5c4:	690c      	ldr	r4, [r1, #16]
 801d5c6:	42a3      	cmp	r3, r4
 801d5c8:	4607      	mov	r7, r0
 801d5ca:	db7e      	blt.n	801d6ca <quorem+0x10c>
 801d5cc:	3c01      	subs	r4, #1
 801d5ce:	f101 0814 	add.w	r8, r1, #20
 801d5d2:	f100 0514 	add.w	r5, r0, #20
 801d5d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d5da:	9301      	str	r3, [sp, #4]
 801d5dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d5e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	429a      	cmp	r2, r3
 801d5e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d5ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d5f0:	fbb2 f6f3 	udiv	r6, r2, r3
 801d5f4:	d331      	bcc.n	801d65a <quorem+0x9c>
 801d5f6:	f04f 0e00 	mov.w	lr, #0
 801d5fa:	4640      	mov	r0, r8
 801d5fc:	46ac      	mov	ip, r5
 801d5fe:	46f2      	mov	sl, lr
 801d600:	f850 2b04 	ldr.w	r2, [r0], #4
 801d604:	b293      	uxth	r3, r2
 801d606:	fb06 e303 	mla	r3, r6, r3, lr
 801d60a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d60e:	0c1a      	lsrs	r2, r3, #16
 801d610:	b29b      	uxth	r3, r3
 801d612:	ebaa 0303 	sub.w	r3, sl, r3
 801d616:	f8dc a000 	ldr.w	sl, [ip]
 801d61a:	fa13 f38a 	uxtah	r3, r3, sl
 801d61e:	fb06 220e 	mla	r2, r6, lr, r2
 801d622:	9300      	str	r3, [sp, #0]
 801d624:	9b00      	ldr	r3, [sp, #0]
 801d626:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d62a:	b292      	uxth	r2, r2
 801d62c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d634:	f8bd 3000 	ldrh.w	r3, [sp]
 801d638:	4581      	cmp	r9, r0
 801d63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d63e:	f84c 3b04 	str.w	r3, [ip], #4
 801d642:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d646:	d2db      	bcs.n	801d600 <quorem+0x42>
 801d648:	f855 300b 	ldr.w	r3, [r5, fp]
 801d64c:	b92b      	cbnz	r3, 801d65a <quorem+0x9c>
 801d64e:	9b01      	ldr	r3, [sp, #4]
 801d650:	3b04      	subs	r3, #4
 801d652:	429d      	cmp	r5, r3
 801d654:	461a      	mov	r2, r3
 801d656:	d32c      	bcc.n	801d6b2 <quorem+0xf4>
 801d658:	613c      	str	r4, [r7, #16]
 801d65a:	4638      	mov	r0, r7
 801d65c:	f001 f9a6 	bl	801e9ac <__mcmp>
 801d660:	2800      	cmp	r0, #0
 801d662:	db22      	blt.n	801d6aa <quorem+0xec>
 801d664:	3601      	adds	r6, #1
 801d666:	4629      	mov	r1, r5
 801d668:	2000      	movs	r0, #0
 801d66a:	f858 2b04 	ldr.w	r2, [r8], #4
 801d66e:	f8d1 c000 	ldr.w	ip, [r1]
 801d672:	b293      	uxth	r3, r2
 801d674:	1ac3      	subs	r3, r0, r3
 801d676:	0c12      	lsrs	r2, r2, #16
 801d678:	fa13 f38c 	uxtah	r3, r3, ip
 801d67c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801d680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d684:	b29b      	uxth	r3, r3
 801d686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d68a:	45c1      	cmp	r9, r8
 801d68c:	f841 3b04 	str.w	r3, [r1], #4
 801d690:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d694:	d2e9      	bcs.n	801d66a <quorem+0xac>
 801d696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d69e:	b922      	cbnz	r2, 801d6aa <quorem+0xec>
 801d6a0:	3b04      	subs	r3, #4
 801d6a2:	429d      	cmp	r5, r3
 801d6a4:	461a      	mov	r2, r3
 801d6a6:	d30a      	bcc.n	801d6be <quorem+0x100>
 801d6a8:	613c      	str	r4, [r7, #16]
 801d6aa:	4630      	mov	r0, r6
 801d6ac:	b003      	add	sp, #12
 801d6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6b2:	6812      	ldr	r2, [r2, #0]
 801d6b4:	3b04      	subs	r3, #4
 801d6b6:	2a00      	cmp	r2, #0
 801d6b8:	d1ce      	bne.n	801d658 <quorem+0x9a>
 801d6ba:	3c01      	subs	r4, #1
 801d6bc:	e7c9      	b.n	801d652 <quorem+0x94>
 801d6be:	6812      	ldr	r2, [r2, #0]
 801d6c0:	3b04      	subs	r3, #4
 801d6c2:	2a00      	cmp	r2, #0
 801d6c4:	d1f0      	bne.n	801d6a8 <quorem+0xea>
 801d6c6:	3c01      	subs	r4, #1
 801d6c8:	e7eb      	b.n	801d6a2 <quorem+0xe4>
 801d6ca:	2000      	movs	r0, #0
 801d6cc:	e7ee      	b.n	801d6ac <quorem+0xee>
	...

0801d6d0 <_dtoa_r>:
 801d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6d4:	ed2d 8b04 	vpush	{d8-d9}
 801d6d8:	69c5      	ldr	r5, [r0, #28]
 801d6da:	b093      	sub	sp, #76	; 0x4c
 801d6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d6e0:	ec57 6b10 	vmov	r6, r7, d0
 801d6e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d6e8:	9107      	str	r1, [sp, #28]
 801d6ea:	4604      	mov	r4, r0
 801d6ec:	920a      	str	r2, [sp, #40]	; 0x28
 801d6ee:	930d      	str	r3, [sp, #52]	; 0x34
 801d6f0:	b975      	cbnz	r5, 801d710 <_dtoa_r+0x40>
 801d6f2:	2010      	movs	r0, #16
 801d6f4:	f000 fe2a 	bl	801e34c <malloc>
 801d6f8:	4602      	mov	r2, r0
 801d6fa:	61e0      	str	r0, [r4, #28]
 801d6fc:	b920      	cbnz	r0, 801d708 <_dtoa_r+0x38>
 801d6fe:	4bae      	ldr	r3, [pc, #696]	; (801d9b8 <_dtoa_r+0x2e8>)
 801d700:	21ef      	movs	r1, #239	; 0xef
 801d702:	48ae      	ldr	r0, [pc, #696]	; (801d9bc <_dtoa_r+0x2ec>)
 801d704:	f7ff f8aa 	bl	801c85c <__assert_func>
 801d708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d70c:	6005      	str	r5, [r0, #0]
 801d70e:	60c5      	str	r5, [r0, #12]
 801d710:	69e3      	ldr	r3, [r4, #28]
 801d712:	6819      	ldr	r1, [r3, #0]
 801d714:	b151      	cbz	r1, 801d72c <_dtoa_r+0x5c>
 801d716:	685a      	ldr	r2, [r3, #4]
 801d718:	604a      	str	r2, [r1, #4]
 801d71a:	2301      	movs	r3, #1
 801d71c:	4093      	lsls	r3, r2
 801d71e:	608b      	str	r3, [r1, #8]
 801d720:	4620      	mov	r0, r4
 801d722:	f000 ff07 	bl	801e534 <_Bfree>
 801d726:	69e3      	ldr	r3, [r4, #28]
 801d728:	2200      	movs	r2, #0
 801d72a:	601a      	str	r2, [r3, #0]
 801d72c:	1e3b      	subs	r3, r7, #0
 801d72e:	bfbb      	ittet	lt
 801d730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d734:	9303      	strlt	r3, [sp, #12]
 801d736:	2300      	movge	r3, #0
 801d738:	2201      	movlt	r2, #1
 801d73a:	bfac      	ite	ge
 801d73c:	f8c8 3000 	strge.w	r3, [r8]
 801d740:	f8c8 2000 	strlt.w	r2, [r8]
 801d744:	4b9e      	ldr	r3, [pc, #632]	; (801d9c0 <_dtoa_r+0x2f0>)
 801d746:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d74a:	ea33 0308 	bics.w	r3, r3, r8
 801d74e:	d11b      	bne.n	801d788 <_dtoa_r+0xb8>
 801d750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d752:	f242 730f 	movw	r3, #9999	; 0x270f
 801d756:	6013      	str	r3, [r2, #0]
 801d758:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801d75c:	4333      	orrs	r3, r6
 801d75e:	f000 8593 	beq.w	801e288 <_dtoa_r+0xbb8>
 801d762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d764:	b963      	cbnz	r3, 801d780 <_dtoa_r+0xb0>
 801d766:	4b97      	ldr	r3, [pc, #604]	; (801d9c4 <_dtoa_r+0x2f4>)
 801d768:	e027      	b.n	801d7ba <_dtoa_r+0xea>
 801d76a:	4b97      	ldr	r3, [pc, #604]	; (801d9c8 <_dtoa_r+0x2f8>)
 801d76c:	9300      	str	r3, [sp, #0]
 801d76e:	3308      	adds	r3, #8
 801d770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d772:	6013      	str	r3, [r2, #0]
 801d774:	9800      	ldr	r0, [sp, #0]
 801d776:	b013      	add	sp, #76	; 0x4c
 801d778:	ecbd 8b04 	vpop	{d8-d9}
 801d77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d780:	4b90      	ldr	r3, [pc, #576]	; (801d9c4 <_dtoa_r+0x2f4>)
 801d782:	9300      	str	r3, [sp, #0]
 801d784:	3303      	adds	r3, #3
 801d786:	e7f3      	b.n	801d770 <_dtoa_r+0xa0>
 801d788:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d78c:	2200      	movs	r2, #0
 801d78e:	ec51 0b17 	vmov	r0, r1, d7
 801d792:	eeb0 8a47 	vmov.f32	s16, s14
 801d796:	eef0 8a67 	vmov.f32	s17, s15
 801d79a:	2300      	movs	r3, #0
 801d79c:	f7e3 f9bc 	bl	8000b18 <__aeabi_dcmpeq>
 801d7a0:	4681      	mov	r9, r0
 801d7a2:	b160      	cbz	r0, 801d7be <_dtoa_r+0xee>
 801d7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7a6:	2301      	movs	r3, #1
 801d7a8:	6013      	str	r3, [r2, #0]
 801d7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	f000 8568 	beq.w	801e282 <_dtoa_r+0xbb2>
 801d7b2:	4b86      	ldr	r3, [pc, #536]	; (801d9cc <_dtoa_r+0x2fc>)
 801d7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d7b6:	6013      	str	r3, [r2, #0]
 801d7b8:	3b01      	subs	r3, #1
 801d7ba:	9300      	str	r3, [sp, #0]
 801d7bc:	e7da      	b.n	801d774 <_dtoa_r+0xa4>
 801d7be:	aa10      	add	r2, sp, #64	; 0x40
 801d7c0:	a911      	add	r1, sp, #68	; 0x44
 801d7c2:	4620      	mov	r0, r4
 801d7c4:	eeb0 0a48 	vmov.f32	s0, s16
 801d7c8:	eef0 0a68 	vmov.f32	s1, s17
 801d7cc:	f001 f994 	bl	801eaf8 <__d2b>
 801d7d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801d7d4:	4682      	mov	sl, r0
 801d7d6:	2d00      	cmp	r5, #0
 801d7d8:	d07f      	beq.n	801d8da <_dtoa_r+0x20a>
 801d7da:	ee18 3a90 	vmov	r3, s17
 801d7de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d7e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d7e6:	ec51 0b18 	vmov	r0, r1, d8
 801d7ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d7ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d7f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801d7f6:	4619      	mov	r1, r3
 801d7f8:	2200      	movs	r2, #0
 801d7fa:	4b75      	ldr	r3, [pc, #468]	; (801d9d0 <_dtoa_r+0x300>)
 801d7fc:	f7e2 fd6c 	bl	80002d8 <__aeabi_dsub>
 801d800:	a367      	add	r3, pc, #412	; (adr r3, 801d9a0 <_dtoa_r+0x2d0>)
 801d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d806:	f7e2 ff1f 	bl	8000648 <__aeabi_dmul>
 801d80a:	a367      	add	r3, pc, #412	; (adr r3, 801d9a8 <_dtoa_r+0x2d8>)
 801d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d810:	f7e2 fd64 	bl	80002dc <__adddf3>
 801d814:	4606      	mov	r6, r0
 801d816:	4628      	mov	r0, r5
 801d818:	460f      	mov	r7, r1
 801d81a:	f7e2 feab 	bl	8000574 <__aeabi_i2d>
 801d81e:	a364      	add	r3, pc, #400	; (adr r3, 801d9b0 <_dtoa_r+0x2e0>)
 801d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d824:	f7e2 ff10 	bl	8000648 <__aeabi_dmul>
 801d828:	4602      	mov	r2, r0
 801d82a:	460b      	mov	r3, r1
 801d82c:	4630      	mov	r0, r6
 801d82e:	4639      	mov	r1, r7
 801d830:	f7e2 fd54 	bl	80002dc <__adddf3>
 801d834:	4606      	mov	r6, r0
 801d836:	460f      	mov	r7, r1
 801d838:	f7e3 f9b6 	bl	8000ba8 <__aeabi_d2iz>
 801d83c:	2200      	movs	r2, #0
 801d83e:	4683      	mov	fp, r0
 801d840:	2300      	movs	r3, #0
 801d842:	4630      	mov	r0, r6
 801d844:	4639      	mov	r1, r7
 801d846:	f7e3 f971 	bl	8000b2c <__aeabi_dcmplt>
 801d84a:	b148      	cbz	r0, 801d860 <_dtoa_r+0x190>
 801d84c:	4658      	mov	r0, fp
 801d84e:	f7e2 fe91 	bl	8000574 <__aeabi_i2d>
 801d852:	4632      	mov	r2, r6
 801d854:	463b      	mov	r3, r7
 801d856:	f7e3 f95f 	bl	8000b18 <__aeabi_dcmpeq>
 801d85a:	b908      	cbnz	r0, 801d860 <_dtoa_r+0x190>
 801d85c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d860:	f1bb 0f16 	cmp.w	fp, #22
 801d864:	d857      	bhi.n	801d916 <_dtoa_r+0x246>
 801d866:	4b5b      	ldr	r3, [pc, #364]	; (801d9d4 <_dtoa_r+0x304>)
 801d868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d870:	ec51 0b18 	vmov	r0, r1, d8
 801d874:	f7e3 f95a 	bl	8000b2c <__aeabi_dcmplt>
 801d878:	2800      	cmp	r0, #0
 801d87a:	d04e      	beq.n	801d91a <_dtoa_r+0x24a>
 801d87c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d880:	2300      	movs	r3, #0
 801d882:	930c      	str	r3, [sp, #48]	; 0x30
 801d884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d886:	1b5b      	subs	r3, r3, r5
 801d888:	1e5a      	subs	r2, r3, #1
 801d88a:	bf45      	ittet	mi
 801d88c:	f1c3 0301 	rsbmi	r3, r3, #1
 801d890:	9305      	strmi	r3, [sp, #20]
 801d892:	2300      	movpl	r3, #0
 801d894:	2300      	movmi	r3, #0
 801d896:	9206      	str	r2, [sp, #24]
 801d898:	bf54      	ite	pl
 801d89a:	9305      	strpl	r3, [sp, #20]
 801d89c:	9306      	strmi	r3, [sp, #24]
 801d89e:	f1bb 0f00 	cmp.w	fp, #0
 801d8a2:	db3c      	blt.n	801d91e <_dtoa_r+0x24e>
 801d8a4:	9b06      	ldr	r3, [sp, #24]
 801d8a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801d8aa:	445b      	add	r3, fp
 801d8ac:	9306      	str	r3, [sp, #24]
 801d8ae:	2300      	movs	r3, #0
 801d8b0:	9308      	str	r3, [sp, #32]
 801d8b2:	9b07      	ldr	r3, [sp, #28]
 801d8b4:	2b09      	cmp	r3, #9
 801d8b6:	d868      	bhi.n	801d98a <_dtoa_r+0x2ba>
 801d8b8:	2b05      	cmp	r3, #5
 801d8ba:	bfc4      	itt	gt
 801d8bc:	3b04      	subgt	r3, #4
 801d8be:	9307      	strgt	r3, [sp, #28]
 801d8c0:	9b07      	ldr	r3, [sp, #28]
 801d8c2:	f1a3 0302 	sub.w	r3, r3, #2
 801d8c6:	bfcc      	ite	gt
 801d8c8:	2500      	movgt	r5, #0
 801d8ca:	2501      	movle	r5, #1
 801d8cc:	2b03      	cmp	r3, #3
 801d8ce:	f200 8085 	bhi.w	801d9dc <_dtoa_r+0x30c>
 801d8d2:	e8df f003 	tbb	[pc, r3]
 801d8d6:	3b2e      	.short	0x3b2e
 801d8d8:	5839      	.short	0x5839
 801d8da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d8de:	441d      	add	r5, r3
 801d8e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d8e4:	2b20      	cmp	r3, #32
 801d8e6:	bfc1      	itttt	gt
 801d8e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d8ec:	fa08 f803 	lslgt.w	r8, r8, r3
 801d8f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801d8f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 801d8f8:	bfd6      	itet	le
 801d8fa:	f1c3 0320 	rsble	r3, r3, #32
 801d8fe:	ea48 0003 	orrgt.w	r0, r8, r3
 801d902:	fa06 f003 	lslle.w	r0, r6, r3
 801d906:	f7e2 fe25 	bl	8000554 <__aeabi_ui2d>
 801d90a:	2201      	movs	r2, #1
 801d90c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801d910:	3d01      	subs	r5, #1
 801d912:	920e      	str	r2, [sp, #56]	; 0x38
 801d914:	e76f      	b.n	801d7f6 <_dtoa_r+0x126>
 801d916:	2301      	movs	r3, #1
 801d918:	e7b3      	b.n	801d882 <_dtoa_r+0x1b2>
 801d91a:	900c      	str	r0, [sp, #48]	; 0x30
 801d91c:	e7b2      	b.n	801d884 <_dtoa_r+0x1b4>
 801d91e:	9b05      	ldr	r3, [sp, #20]
 801d920:	eba3 030b 	sub.w	r3, r3, fp
 801d924:	9305      	str	r3, [sp, #20]
 801d926:	f1cb 0300 	rsb	r3, fp, #0
 801d92a:	9308      	str	r3, [sp, #32]
 801d92c:	2300      	movs	r3, #0
 801d92e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d930:	e7bf      	b.n	801d8b2 <_dtoa_r+0x1e2>
 801d932:	2300      	movs	r3, #0
 801d934:	9309      	str	r3, [sp, #36]	; 0x24
 801d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d938:	2b00      	cmp	r3, #0
 801d93a:	dc52      	bgt.n	801d9e2 <_dtoa_r+0x312>
 801d93c:	2301      	movs	r3, #1
 801d93e:	9301      	str	r3, [sp, #4]
 801d940:	9304      	str	r3, [sp, #16]
 801d942:	461a      	mov	r2, r3
 801d944:	920a      	str	r2, [sp, #40]	; 0x28
 801d946:	e00b      	b.n	801d960 <_dtoa_r+0x290>
 801d948:	2301      	movs	r3, #1
 801d94a:	e7f3      	b.n	801d934 <_dtoa_r+0x264>
 801d94c:	2300      	movs	r3, #0
 801d94e:	9309      	str	r3, [sp, #36]	; 0x24
 801d950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d952:	445b      	add	r3, fp
 801d954:	9301      	str	r3, [sp, #4]
 801d956:	3301      	adds	r3, #1
 801d958:	2b01      	cmp	r3, #1
 801d95a:	9304      	str	r3, [sp, #16]
 801d95c:	bfb8      	it	lt
 801d95e:	2301      	movlt	r3, #1
 801d960:	69e0      	ldr	r0, [r4, #28]
 801d962:	2100      	movs	r1, #0
 801d964:	2204      	movs	r2, #4
 801d966:	f102 0614 	add.w	r6, r2, #20
 801d96a:	429e      	cmp	r6, r3
 801d96c:	d93d      	bls.n	801d9ea <_dtoa_r+0x31a>
 801d96e:	6041      	str	r1, [r0, #4]
 801d970:	4620      	mov	r0, r4
 801d972:	f000 fd9f 	bl	801e4b4 <_Balloc>
 801d976:	9000      	str	r0, [sp, #0]
 801d978:	2800      	cmp	r0, #0
 801d97a:	d139      	bne.n	801d9f0 <_dtoa_r+0x320>
 801d97c:	4b16      	ldr	r3, [pc, #88]	; (801d9d8 <_dtoa_r+0x308>)
 801d97e:	4602      	mov	r2, r0
 801d980:	f240 11af 	movw	r1, #431	; 0x1af
 801d984:	e6bd      	b.n	801d702 <_dtoa_r+0x32>
 801d986:	2301      	movs	r3, #1
 801d988:	e7e1      	b.n	801d94e <_dtoa_r+0x27e>
 801d98a:	2501      	movs	r5, #1
 801d98c:	2300      	movs	r3, #0
 801d98e:	9307      	str	r3, [sp, #28]
 801d990:	9509      	str	r5, [sp, #36]	; 0x24
 801d992:	f04f 33ff 	mov.w	r3, #4294967295
 801d996:	9301      	str	r3, [sp, #4]
 801d998:	9304      	str	r3, [sp, #16]
 801d99a:	2200      	movs	r2, #0
 801d99c:	2312      	movs	r3, #18
 801d99e:	e7d1      	b.n	801d944 <_dtoa_r+0x274>
 801d9a0:	636f4361 	.word	0x636f4361
 801d9a4:	3fd287a7 	.word	0x3fd287a7
 801d9a8:	8b60c8b3 	.word	0x8b60c8b3
 801d9ac:	3fc68a28 	.word	0x3fc68a28
 801d9b0:	509f79fb 	.word	0x509f79fb
 801d9b4:	3fd34413 	.word	0x3fd34413
 801d9b8:	08021a16 	.word	0x08021a16
 801d9bc:	08021a2d 	.word	0x08021a2d
 801d9c0:	7ff00000 	.word	0x7ff00000
 801d9c4:	08021a12 	.word	0x08021a12
 801d9c8:	08021a09 	.word	0x08021a09
 801d9cc:	080219e6 	.word	0x080219e6
 801d9d0:	3ff80000 	.word	0x3ff80000
 801d9d4:	08021b18 	.word	0x08021b18
 801d9d8:	08021a85 	.word	0x08021a85
 801d9dc:	2301      	movs	r3, #1
 801d9de:	9309      	str	r3, [sp, #36]	; 0x24
 801d9e0:	e7d7      	b.n	801d992 <_dtoa_r+0x2c2>
 801d9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9e4:	9301      	str	r3, [sp, #4]
 801d9e6:	9304      	str	r3, [sp, #16]
 801d9e8:	e7ba      	b.n	801d960 <_dtoa_r+0x290>
 801d9ea:	3101      	adds	r1, #1
 801d9ec:	0052      	lsls	r2, r2, #1
 801d9ee:	e7ba      	b.n	801d966 <_dtoa_r+0x296>
 801d9f0:	69e3      	ldr	r3, [r4, #28]
 801d9f2:	9a00      	ldr	r2, [sp, #0]
 801d9f4:	601a      	str	r2, [r3, #0]
 801d9f6:	9b04      	ldr	r3, [sp, #16]
 801d9f8:	2b0e      	cmp	r3, #14
 801d9fa:	f200 80a8 	bhi.w	801db4e <_dtoa_r+0x47e>
 801d9fe:	2d00      	cmp	r5, #0
 801da00:	f000 80a5 	beq.w	801db4e <_dtoa_r+0x47e>
 801da04:	f1bb 0f00 	cmp.w	fp, #0
 801da08:	dd38      	ble.n	801da7c <_dtoa_r+0x3ac>
 801da0a:	4bc0      	ldr	r3, [pc, #768]	; (801dd0c <_dtoa_r+0x63c>)
 801da0c:	f00b 020f 	and.w	r2, fp, #15
 801da10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801da14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801da18:	e9d3 6700 	ldrd	r6, r7, [r3]
 801da1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801da20:	d019      	beq.n	801da56 <_dtoa_r+0x386>
 801da22:	4bbb      	ldr	r3, [pc, #748]	; (801dd10 <_dtoa_r+0x640>)
 801da24:	ec51 0b18 	vmov	r0, r1, d8
 801da28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801da2c:	f7e2 ff36 	bl	800089c <__aeabi_ddiv>
 801da30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da34:	f008 080f 	and.w	r8, r8, #15
 801da38:	2503      	movs	r5, #3
 801da3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801dd10 <_dtoa_r+0x640>
 801da3e:	f1b8 0f00 	cmp.w	r8, #0
 801da42:	d10a      	bne.n	801da5a <_dtoa_r+0x38a>
 801da44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da48:	4632      	mov	r2, r6
 801da4a:	463b      	mov	r3, r7
 801da4c:	f7e2 ff26 	bl	800089c <__aeabi_ddiv>
 801da50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da54:	e02b      	b.n	801daae <_dtoa_r+0x3de>
 801da56:	2502      	movs	r5, #2
 801da58:	e7ef      	b.n	801da3a <_dtoa_r+0x36a>
 801da5a:	f018 0f01 	tst.w	r8, #1
 801da5e:	d008      	beq.n	801da72 <_dtoa_r+0x3a2>
 801da60:	4630      	mov	r0, r6
 801da62:	4639      	mov	r1, r7
 801da64:	e9d9 2300 	ldrd	r2, r3, [r9]
 801da68:	f7e2 fdee 	bl	8000648 <__aeabi_dmul>
 801da6c:	3501      	adds	r5, #1
 801da6e:	4606      	mov	r6, r0
 801da70:	460f      	mov	r7, r1
 801da72:	ea4f 0868 	mov.w	r8, r8, asr #1
 801da76:	f109 0908 	add.w	r9, r9, #8
 801da7a:	e7e0      	b.n	801da3e <_dtoa_r+0x36e>
 801da7c:	f000 809f 	beq.w	801dbbe <_dtoa_r+0x4ee>
 801da80:	f1cb 0600 	rsb	r6, fp, #0
 801da84:	4ba1      	ldr	r3, [pc, #644]	; (801dd0c <_dtoa_r+0x63c>)
 801da86:	4fa2      	ldr	r7, [pc, #648]	; (801dd10 <_dtoa_r+0x640>)
 801da88:	f006 020f 	and.w	r2, r6, #15
 801da8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da94:	ec51 0b18 	vmov	r0, r1, d8
 801da98:	f7e2 fdd6 	bl	8000648 <__aeabi_dmul>
 801da9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801daa0:	1136      	asrs	r6, r6, #4
 801daa2:	2300      	movs	r3, #0
 801daa4:	2502      	movs	r5, #2
 801daa6:	2e00      	cmp	r6, #0
 801daa8:	d17e      	bne.n	801dba8 <_dtoa_r+0x4d8>
 801daaa:	2b00      	cmp	r3, #0
 801daac:	d1d0      	bne.n	801da50 <_dtoa_r+0x380>
 801daae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dab0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	f000 8084 	beq.w	801dbc2 <_dtoa_r+0x4f2>
 801daba:	4b96      	ldr	r3, [pc, #600]	; (801dd14 <_dtoa_r+0x644>)
 801dabc:	2200      	movs	r2, #0
 801dabe:	4640      	mov	r0, r8
 801dac0:	4649      	mov	r1, r9
 801dac2:	f7e3 f833 	bl	8000b2c <__aeabi_dcmplt>
 801dac6:	2800      	cmp	r0, #0
 801dac8:	d07b      	beq.n	801dbc2 <_dtoa_r+0x4f2>
 801daca:	9b04      	ldr	r3, [sp, #16]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d078      	beq.n	801dbc2 <_dtoa_r+0x4f2>
 801dad0:	9b01      	ldr	r3, [sp, #4]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	dd39      	ble.n	801db4a <_dtoa_r+0x47a>
 801dad6:	4b90      	ldr	r3, [pc, #576]	; (801dd18 <_dtoa_r+0x648>)
 801dad8:	2200      	movs	r2, #0
 801dada:	4640      	mov	r0, r8
 801dadc:	4649      	mov	r1, r9
 801dade:	f7e2 fdb3 	bl	8000648 <__aeabi_dmul>
 801dae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dae6:	9e01      	ldr	r6, [sp, #4]
 801dae8:	f10b 37ff 	add.w	r7, fp, #4294967295
 801daec:	3501      	adds	r5, #1
 801daee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801daf2:	4628      	mov	r0, r5
 801daf4:	f7e2 fd3e 	bl	8000574 <__aeabi_i2d>
 801daf8:	4642      	mov	r2, r8
 801dafa:	464b      	mov	r3, r9
 801dafc:	f7e2 fda4 	bl	8000648 <__aeabi_dmul>
 801db00:	4b86      	ldr	r3, [pc, #536]	; (801dd1c <_dtoa_r+0x64c>)
 801db02:	2200      	movs	r2, #0
 801db04:	f7e2 fbea 	bl	80002dc <__adddf3>
 801db08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801db0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db10:	9303      	str	r3, [sp, #12]
 801db12:	2e00      	cmp	r6, #0
 801db14:	d158      	bne.n	801dbc8 <_dtoa_r+0x4f8>
 801db16:	4b82      	ldr	r3, [pc, #520]	; (801dd20 <_dtoa_r+0x650>)
 801db18:	2200      	movs	r2, #0
 801db1a:	4640      	mov	r0, r8
 801db1c:	4649      	mov	r1, r9
 801db1e:	f7e2 fbdb 	bl	80002d8 <__aeabi_dsub>
 801db22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db26:	4680      	mov	r8, r0
 801db28:	4689      	mov	r9, r1
 801db2a:	f7e3 f81d 	bl	8000b68 <__aeabi_dcmpgt>
 801db2e:	2800      	cmp	r0, #0
 801db30:	f040 8296 	bne.w	801e060 <_dtoa_r+0x990>
 801db34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801db38:	4640      	mov	r0, r8
 801db3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801db3e:	4649      	mov	r1, r9
 801db40:	f7e2 fff4 	bl	8000b2c <__aeabi_dcmplt>
 801db44:	2800      	cmp	r0, #0
 801db46:	f040 8289 	bne.w	801e05c <_dtoa_r+0x98c>
 801db4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801db4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db50:	2b00      	cmp	r3, #0
 801db52:	f2c0 814e 	blt.w	801ddf2 <_dtoa_r+0x722>
 801db56:	f1bb 0f0e 	cmp.w	fp, #14
 801db5a:	f300 814a 	bgt.w	801ddf2 <_dtoa_r+0x722>
 801db5e:	4b6b      	ldr	r3, [pc, #428]	; (801dd0c <_dtoa_r+0x63c>)
 801db60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801db64:	e9d3 8900 	ldrd	r8, r9, [r3]
 801db68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	f280 80dc 	bge.w	801dd28 <_dtoa_r+0x658>
 801db70:	9b04      	ldr	r3, [sp, #16]
 801db72:	2b00      	cmp	r3, #0
 801db74:	f300 80d8 	bgt.w	801dd28 <_dtoa_r+0x658>
 801db78:	f040 826f 	bne.w	801e05a <_dtoa_r+0x98a>
 801db7c:	4b68      	ldr	r3, [pc, #416]	; (801dd20 <_dtoa_r+0x650>)
 801db7e:	2200      	movs	r2, #0
 801db80:	4640      	mov	r0, r8
 801db82:	4649      	mov	r1, r9
 801db84:	f7e2 fd60 	bl	8000648 <__aeabi_dmul>
 801db88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db8c:	f7e2 ffe2 	bl	8000b54 <__aeabi_dcmpge>
 801db90:	9e04      	ldr	r6, [sp, #16]
 801db92:	4637      	mov	r7, r6
 801db94:	2800      	cmp	r0, #0
 801db96:	f040 8245 	bne.w	801e024 <_dtoa_r+0x954>
 801db9a:	9d00      	ldr	r5, [sp, #0]
 801db9c:	2331      	movs	r3, #49	; 0x31
 801db9e:	f805 3b01 	strb.w	r3, [r5], #1
 801dba2:	f10b 0b01 	add.w	fp, fp, #1
 801dba6:	e241      	b.n	801e02c <_dtoa_r+0x95c>
 801dba8:	07f2      	lsls	r2, r6, #31
 801dbaa:	d505      	bpl.n	801dbb8 <_dtoa_r+0x4e8>
 801dbac:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dbb0:	f7e2 fd4a 	bl	8000648 <__aeabi_dmul>
 801dbb4:	3501      	adds	r5, #1
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	1076      	asrs	r6, r6, #1
 801dbba:	3708      	adds	r7, #8
 801dbbc:	e773      	b.n	801daa6 <_dtoa_r+0x3d6>
 801dbbe:	2502      	movs	r5, #2
 801dbc0:	e775      	b.n	801daae <_dtoa_r+0x3de>
 801dbc2:	9e04      	ldr	r6, [sp, #16]
 801dbc4:	465f      	mov	r7, fp
 801dbc6:	e792      	b.n	801daee <_dtoa_r+0x41e>
 801dbc8:	9900      	ldr	r1, [sp, #0]
 801dbca:	4b50      	ldr	r3, [pc, #320]	; (801dd0c <_dtoa_r+0x63c>)
 801dbcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dbd0:	4431      	add	r1, r6
 801dbd2:	9102      	str	r1, [sp, #8]
 801dbd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dbd6:	eeb0 9a47 	vmov.f32	s18, s14
 801dbda:	eef0 9a67 	vmov.f32	s19, s15
 801dbde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801dbe2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dbe6:	2900      	cmp	r1, #0
 801dbe8:	d044      	beq.n	801dc74 <_dtoa_r+0x5a4>
 801dbea:	494e      	ldr	r1, [pc, #312]	; (801dd24 <_dtoa_r+0x654>)
 801dbec:	2000      	movs	r0, #0
 801dbee:	f7e2 fe55 	bl	800089c <__aeabi_ddiv>
 801dbf2:	ec53 2b19 	vmov	r2, r3, d9
 801dbf6:	f7e2 fb6f 	bl	80002d8 <__aeabi_dsub>
 801dbfa:	9d00      	ldr	r5, [sp, #0]
 801dbfc:	ec41 0b19 	vmov	d9, r0, r1
 801dc00:	4649      	mov	r1, r9
 801dc02:	4640      	mov	r0, r8
 801dc04:	f7e2 ffd0 	bl	8000ba8 <__aeabi_d2iz>
 801dc08:	4606      	mov	r6, r0
 801dc0a:	f7e2 fcb3 	bl	8000574 <__aeabi_i2d>
 801dc0e:	4602      	mov	r2, r0
 801dc10:	460b      	mov	r3, r1
 801dc12:	4640      	mov	r0, r8
 801dc14:	4649      	mov	r1, r9
 801dc16:	f7e2 fb5f 	bl	80002d8 <__aeabi_dsub>
 801dc1a:	3630      	adds	r6, #48	; 0x30
 801dc1c:	f805 6b01 	strb.w	r6, [r5], #1
 801dc20:	ec53 2b19 	vmov	r2, r3, d9
 801dc24:	4680      	mov	r8, r0
 801dc26:	4689      	mov	r9, r1
 801dc28:	f7e2 ff80 	bl	8000b2c <__aeabi_dcmplt>
 801dc2c:	2800      	cmp	r0, #0
 801dc2e:	d164      	bne.n	801dcfa <_dtoa_r+0x62a>
 801dc30:	4642      	mov	r2, r8
 801dc32:	464b      	mov	r3, r9
 801dc34:	4937      	ldr	r1, [pc, #220]	; (801dd14 <_dtoa_r+0x644>)
 801dc36:	2000      	movs	r0, #0
 801dc38:	f7e2 fb4e 	bl	80002d8 <__aeabi_dsub>
 801dc3c:	ec53 2b19 	vmov	r2, r3, d9
 801dc40:	f7e2 ff74 	bl	8000b2c <__aeabi_dcmplt>
 801dc44:	2800      	cmp	r0, #0
 801dc46:	f040 80b6 	bne.w	801ddb6 <_dtoa_r+0x6e6>
 801dc4a:	9b02      	ldr	r3, [sp, #8]
 801dc4c:	429d      	cmp	r5, r3
 801dc4e:	f43f af7c 	beq.w	801db4a <_dtoa_r+0x47a>
 801dc52:	4b31      	ldr	r3, [pc, #196]	; (801dd18 <_dtoa_r+0x648>)
 801dc54:	ec51 0b19 	vmov	r0, r1, d9
 801dc58:	2200      	movs	r2, #0
 801dc5a:	f7e2 fcf5 	bl	8000648 <__aeabi_dmul>
 801dc5e:	4b2e      	ldr	r3, [pc, #184]	; (801dd18 <_dtoa_r+0x648>)
 801dc60:	ec41 0b19 	vmov	d9, r0, r1
 801dc64:	2200      	movs	r2, #0
 801dc66:	4640      	mov	r0, r8
 801dc68:	4649      	mov	r1, r9
 801dc6a:	f7e2 fced 	bl	8000648 <__aeabi_dmul>
 801dc6e:	4680      	mov	r8, r0
 801dc70:	4689      	mov	r9, r1
 801dc72:	e7c5      	b.n	801dc00 <_dtoa_r+0x530>
 801dc74:	ec51 0b17 	vmov	r0, r1, d7
 801dc78:	f7e2 fce6 	bl	8000648 <__aeabi_dmul>
 801dc7c:	9b02      	ldr	r3, [sp, #8]
 801dc7e:	9d00      	ldr	r5, [sp, #0]
 801dc80:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc82:	ec41 0b19 	vmov	d9, r0, r1
 801dc86:	4649      	mov	r1, r9
 801dc88:	4640      	mov	r0, r8
 801dc8a:	f7e2 ff8d 	bl	8000ba8 <__aeabi_d2iz>
 801dc8e:	4606      	mov	r6, r0
 801dc90:	f7e2 fc70 	bl	8000574 <__aeabi_i2d>
 801dc94:	3630      	adds	r6, #48	; 0x30
 801dc96:	4602      	mov	r2, r0
 801dc98:	460b      	mov	r3, r1
 801dc9a:	4640      	mov	r0, r8
 801dc9c:	4649      	mov	r1, r9
 801dc9e:	f7e2 fb1b 	bl	80002d8 <__aeabi_dsub>
 801dca2:	f805 6b01 	strb.w	r6, [r5], #1
 801dca6:	9b02      	ldr	r3, [sp, #8]
 801dca8:	429d      	cmp	r5, r3
 801dcaa:	4680      	mov	r8, r0
 801dcac:	4689      	mov	r9, r1
 801dcae:	f04f 0200 	mov.w	r2, #0
 801dcb2:	d124      	bne.n	801dcfe <_dtoa_r+0x62e>
 801dcb4:	4b1b      	ldr	r3, [pc, #108]	; (801dd24 <_dtoa_r+0x654>)
 801dcb6:	ec51 0b19 	vmov	r0, r1, d9
 801dcba:	f7e2 fb0f 	bl	80002dc <__adddf3>
 801dcbe:	4602      	mov	r2, r0
 801dcc0:	460b      	mov	r3, r1
 801dcc2:	4640      	mov	r0, r8
 801dcc4:	4649      	mov	r1, r9
 801dcc6:	f7e2 ff4f 	bl	8000b68 <__aeabi_dcmpgt>
 801dcca:	2800      	cmp	r0, #0
 801dccc:	d173      	bne.n	801ddb6 <_dtoa_r+0x6e6>
 801dcce:	ec53 2b19 	vmov	r2, r3, d9
 801dcd2:	4914      	ldr	r1, [pc, #80]	; (801dd24 <_dtoa_r+0x654>)
 801dcd4:	2000      	movs	r0, #0
 801dcd6:	f7e2 faff 	bl	80002d8 <__aeabi_dsub>
 801dcda:	4602      	mov	r2, r0
 801dcdc:	460b      	mov	r3, r1
 801dcde:	4640      	mov	r0, r8
 801dce0:	4649      	mov	r1, r9
 801dce2:	f7e2 ff23 	bl	8000b2c <__aeabi_dcmplt>
 801dce6:	2800      	cmp	r0, #0
 801dce8:	f43f af2f 	beq.w	801db4a <_dtoa_r+0x47a>
 801dcec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dcee:	1e6b      	subs	r3, r5, #1
 801dcf0:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dcf6:	2b30      	cmp	r3, #48	; 0x30
 801dcf8:	d0f8      	beq.n	801dcec <_dtoa_r+0x61c>
 801dcfa:	46bb      	mov	fp, r7
 801dcfc:	e04a      	b.n	801dd94 <_dtoa_r+0x6c4>
 801dcfe:	4b06      	ldr	r3, [pc, #24]	; (801dd18 <_dtoa_r+0x648>)
 801dd00:	f7e2 fca2 	bl	8000648 <__aeabi_dmul>
 801dd04:	4680      	mov	r8, r0
 801dd06:	4689      	mov	r9, r1
 801dd08:	e7bd      	b.n	801dc86 <_dtoa_r+0x5b6>
 801dd0a:	bf00      	nop
 801dd0c:	08021b18 	.word	0x08021b18
 801dd10:	08021af0 	.word	0x08021af0
 801dd14:	3ff00000 	.word	0x3ff00000
 801dd18:	40240000 	.word	0x40240000
 801dd1c:	401c0000 	.word	0x401c0000
 801dd20:	40140000 	.word	0x40140000
 801dd24:	3fe00000 	.word	0x3fe00000
 801dd28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dd2c:	9d00      	ldr	r5, [sp, #0]
 801dd2e:	4642      	mov	r2, r8
 801dd30:	464b      	mov	r3, r9
 801dd32:	4630      	mov	r0, r6
 801dd34:	4639      	mov	r1, r7
 801dd36:	f7e2 fdb1 	bl	800089c <__aeabi_ddiv>
 801dd3a:	f7e2 ff35 	bl	8000ba8 <__aeabi_d2iz>
 801dd3e:	9001      	str	r0, [sp, #4]
 801dd40:	f7e2 fc18 	bl	8000574 <__aeabi_i2d>
 801dd44:	4642      	mov	r2, r8
 801dd46:	464b      	mov	r3, r9
 801dd48:	f7e2 fc7e 	bl	8000648 <__aeabi_dmul>
 801dd4c:	4602      	mov	r2, r0
 801dd4e:	460b      	mov	r3, r1
 801dd50:	4630      	mov	r0, r6
 801dd52:	4639      	mov	r1, r7
 801dd54:	f7e2 fac0 	bl	80002d8 <__aeabi_dsub>
 801dd58:	9e01      	ldr	r6, [sp, #4]
 801dd5a:	9f04      	ldr	r7, [sp, #16]
 801dd5c:	3630      	adds	r6, #48	; 0x30
 801dd5e:	f805 6b01 	strb.w	r6, [r5], #1
 801dd62:	9e00      	ldr	r6, [sp, #0]
 801dd64:	1bae      	subs	r6, r5, r6
 801dd66:	42b7      	cmp	r7, r6
 801dd68:	4602      	mov	r2, r0
 801dd6a:	460b      	mov	r3, r1
 801dd6c:	d134      	bne.n	801ddd8 <_dtoa_r+0x708>
 801dd6e:	f7e2 fab5 	bl	80002dc <__adddf3>
 801dd72:	4642      	mov	r2, r8
 801dd74:	464b      	mov	r3, r9
 801dd76:	4606      	mov	r6, r0
 801dd78:	460f      	mov	r7, r1
 801dd7a:	f7e2 fef5 	bl	8000b68 <__aeabi_dcmpgt>
 801dd7e:	b9c8      	cbnz	r0, 801ddb4 <_dtoa_r+0x6e4>
 801dd80:	4642      	mov	r2, r8
 801dd82:	464b      	mov	r3, r9
 801dd84:	4630      	mov	r0, r6
 801dd86:	4639      	mov	r1, r7
 801dd88:	f7e2 fec6 	bl	8000b18 <__aeabi_dcmpeq>
 801dd8c:	b110      	cbz	r0, 801dd94 <_dtoa_r+0x6c4>
 801dd8e:	9b01      	ldr	r3, [sp, #4]
 801dd90:	07db      	lsls	r3, r3, #31
 801dd92:	d40f      	bmi.n	801ddb4 <_dtoa_r+0x6e4>
 801dd94:	4651      	mov	r1, sl
 801dd96:	4620      	mov	r0, r4
 801dd98:	f000 fbcc 	bl	801e534 <_Bfree>
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dda0:	702b      	strb	r3, [r5, #0]
 801dda2:	f10b 0301 	add.w	r3, fp, #1
 801dda6:	6013      	str	r3, [r2, #0]
 801dda8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	f43f ace2 	beq.w	801d774 <_dtoa_r+0xa4>
 801ddb0:	601d      	str	r5, [r3, #0]
 801ddb2:	e4df      	b.n	801d774 <_dtoa_r+0xa4>
 801ddb4:	465f      	mov	r7, fp
 801ddb6:	462b      	mov	r3, r5
 801ddb8:	461d      	mov	r5, r3
 801ddba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ddbe:	2a39      	cmp	r2, #57	; 0x39
 801ddc0:	d106      	bne.n	801ddd0 <_dtoa_r+0x700>
 801ddc2:	9a00      	ldr	r2, [sp, #0]
 801ddc4:	429a      	cmp	r2, r3
 801ddc6:	d1f7      	bne.n	801ddb8 <_dtoa_r+0x6e8>
 801ddc8:	9900      	ldr	r1, [sp, #0]
 801ddca:	2230      	movs	r2, #48	; 0x30
 801ddcc:	3701      	adds	r7, #1
 801ddce:	700a      	strb	r2, [r1, #0]
 801ddd0:	781a      	ldrb	r2, [r3, #0]
 801ddd2:	3201      	adds	r2, #1
 801ddd4:	701a      	strb	r2, [r3, #0]
 801ddd6:	e790      	b.n	801dcfa <_dtoa_r+0x62a>
 801ddd8:	4ba3      	ldr	r3, [pc, #652]	; (801e068 <_dtoa_r+0x998>)
 801ddda:	2200      	movs	r2, #0
 801dddc:	f7e2 fc34 	bl	8000648 <__aeabi_dmul>
 801dde0:	2200      	movs	r2, #0
 801dde2:	2300      	movs	r3, #0
 801dde4:	4606      	mov	r6, r0
 801dde6:	460f      	mov	r7, r1
 801dde8:	f7e2 fe96 	bl	8000b18 <__aeabi_dcmpeq>
 801ddec:	2800      	cmp	r0, #0
 801ddee:	d09e      	beq.n	801dd2e <_dtoa_r+0x65e>
 801ddf0:	e7d0      	b.n	801dd94 <_dtoa_r+0x6c4>
 801ddf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ddf4:	2a00      	cmp	r2, #0
 801ddf6:	f000 80ca 	beq.w	801df8e <_dtoa_r+0x8be>
 801ddfa:	9a07      	ldr	r2, [sp, #28]
 801ddfc:	2a01      	cmp	r2, #1
 801ddfe:	f300 80ad 	bgt.w	801df5c <_dtoa_r+0x88c>
 801de02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801de04:	2a00      	cmp	r2, #0
 801de06:	f000 80a5 	beq.w	801df54 <_dtoa_r+0x884>
 801de0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801de0e:	9e08      	ldr	r6, [sp, #32]
 801de10:	9d05      	ldr	r5, [sp, #20]
 801de12:	9a05      	ldr	r2, [sp, #20]
 801de14:	441a      	add	r2, r3
 801de16:	9205      	str	r2, [sp, #20]
 801de18:	9a06      	ldr	r2, [sp, #24]
 801de1a:	2101      	movs	r1, #1
 801de1c:	441a      	add	r2, r3
 801de1e:	4620      	mov	r0, r4
 801de20:	9206      	str	r2, [sp, #24]
 801de22:	f000 fc3d 	bl	801e6a0 <__i2b>
 801de26:	4607      	mov	r7, r0
 801de28:	b165      	cbz	r5, 801de44 <_dtoa_r+0x774>
 801de2a:	9b06      	ldr	r3, [sp, #24]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	dd09      	ble.n	801de44 <_dtoa_r+0x774>
 801de30:	42ab      	cmp	r3, r5
 801de32:	9a05      	ldr	r2, [sp, #20]
 801de34:	bfa8      	it	ge
 801de36:	462b      	movge	r3, r5
 801de38:	1ad2      	subs	r2, r2, r3
 801de3a:	9205      	str	r2, [sp, #20]
 801de3c:	9a06      	ldr	r2, [sp, #24]
 801de3e:	1aed      	subs	r5, r5, r3
 801de40:	1ad3      	subs	r3, r2, r3
 801de42:	9306      	str	r3, [sp, #24]
 801de44:	9b08      	ldr	r3, [sp, #32]
 801de46:	b1f3      	cbz	r3, 801de86 <_dtoa_r+0x7b6>
 801de48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	f000 80a3 	beq.w	801df96 <_dtoa_r+0x8c6>
 801de50:	2e00      	cmp	r6, #0
 801de52:	dd10      	ble.n	801de76 <_dtoa_r+0x7a6>
 801de54:	4639      	mov	r1, r7
 801de56:	4632      	mov	r2, r6
 801de58:	4620      	mov	r0, r4
 801de5a:	f000 fce1 	bl	801e820 <__pow5mult>
 801de5e:	4652      	mov	r2, sl
 801de60:	4601      	mov	r1, r0
 801de62:	4607      	mov	r7, r0
 801de64:	4620      	mov	r0, r4
 801de66:	f000 fc31 	bl	801e6cc <__multiply>
 801de6a:	4651      	mov	r1, sl
 801de6c:	4680      	mov	r8, r0
 801de6e:	4620      	mov	r0, r4
 801de70:	f000 fb60 	bl	801e534 <_Bfree>
 801de74:	46c2      	mov	sl, r8
 801de76:	9b08      	ldr	r3, [sp, #32]
 801de78:	1b9a      	subs	r2, r3, r6
 801de7a:	d004      	beq.n	801de86 <_dtoa_r+0x7b6>
 801de7c:	4651      	mov	r1, sl
 801de7e:	4620      	mov	r0, r4
 801de80:	f000 fcce 	bl	801e820 <__pow5mult>
 801de84:	4682      	mov	sl, r0
 801de86:	2101      	movs	r1, #1
 801de88:	4620      	mov	r0, r4
 801de8a:	f000 fc09 	bl	801e6a0 <__i2b>
 801de8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de90:	2b00      	cmp	r3, #0
 801de92:	4606      	mov	r6, r0
 801de94:	f340 8081 	ble.w	801df9a <_dtoa_r+0x8ca>
 801de98:	461a      	mov	r2, r3
 801de9a:	4601      	mov	r1, r0
 801de9c:	4620      	mov	r0, r4
 801de9e:	f000 fcbf 	bl	801e820 <__pow5mult>
 801dea2:	9b07      	ldr	r3, [sp, #28]
 801dea4:	2b01      	cmp	r3, #1
 801dea6:	4606      	mov	r6, r0
 801dea8:	dd7a      	ble.n	801dfa0 <_dtoa_r+0x8d0>
 801deaa:	f04f 0800 	mov.w	r8, #0
 801deae:	6933      	ldr	r3, [r6, #16]
 801deb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801deb4:	6918      	ldr	r0, [r3, #16]
 801deb6:	f000 fba5 	bl	801e604 <__hi0bits>
 801deba:	f1c0 0020 	rsb	r0, r0, #32
 801debe:	9b06      	ldr	r3, [sp, #24]
 801dec0:	4418      	add	r0, r3
 801dec2:	f010 001f 	ands.w	r0, r0, #31
 801dec6:	f000 8094 	beq.w	801dff2 <_dtoa_r+0x922>
 801deca:	f1c0 0320 	rsb	r3, r0, #32
 801dece:	2b04      	cmp	r3, #4
 801ded0:	f340 8085 	ble.w	801dfde <_dtoa_r+0x90e>
 801ded4:	9b05      	ldr	r3, [sp, #20]
 801ded6:	f1c0 001c 	rsb	r0, r0, #28
 801deda:	4403      	add	r3, r0
 801dedc:	9305      	str	r3, [sp, #20]
 801dede:	9b06      	ldr	r3, [sp, #24]
 801dee0:	4403      	add	r3, r0
 801dee2:	4405      	add	r5, r0
 801dee4:	9306      	str	r3, [sp, #24]
 801dee6:	9b05      	ldr	r3, [sp, #20]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	dd05      	ble.n	801def8 <_dtoa_r+0x828>
 801deec:	4651      	mov	r1, sl
 801deee:	461a      	mov	r2, r3
 801def0:	4620      	mov	r0, r4
 801def2:	f000 fcef 	bl	801e8d4 <__lshift>
 801def6:	4682      	mov	sl, r0
 801def8:	9b06      	ldr	r3, [sp, #24]
 801defa:	2b00      	cmp	r3, #0
 801defc:	dd05      	ble.n	801df0a <_dtoa_r+0x83a>
 801defe:	4631      	mov	r1, r6
 801df00:	461a      	mov	r2, r3
 801df02:	4620      	mov	r0, r4
 801df04:	f000 fce6 	bl	801e8d4 <__lshift>
 801df08:	4606      	mov	r6, r0
 801df0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d072      	beq.n	801dff6 <_dtoa_r+0x926>
 801df10:	4631      	mov	r1, r6
 801df12:	4650      	mov	r0, sl
 801df14:	f000 fd4a 	bl	801e9ac <__mcmp>
 801df18:	2800      	cmp	r0, #0
 801df1a:	da6c      	bge.n	801dff6 <_dtoa_r+0x926>
 801df1c:	2300      	movs	r3, #0
 801df1e:	4651      	mov	r1, sl
 801df20:	220a      	movs	r2, #10
 801df22:	4620      	mov	r0, r4
 801df24:	f000 fb28 	bl	801e578 <__multadd>
 801df28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df2e:	4682      	mov	sl, r0
 801df30:	2b00      	cmp	r3, #0
 801df32:	f000 81b0 	beq.w	801e296 <_dtoa_r+0xbc6>
 801df36:	2300      	movs	r3, #0
 801df38:	4639      	mov	r1, r7
 801df3a:	220a      	movs	r2, #10
 801df3c:	4620      	mov	r0, r4
 801df3e:	f000 fb1b 	bl	801e578 <__multadd>
 801df42:	9b01      	ldr	r3, [sp, #4]
 801df44:	2b00      	cmp	r3, #0
 801df46:	4607      	mov	r7, r0
 801df48:	f300 8096 	bgt.w	801e078 <_dtoa_r+0x9a8>
 801df4c:	9b07      	ldr	r3, [sp, #28]
 801df4e:	2b02      	cmp	r3, #2
 801df50:	dc59      	bgt.n	801e006 <_dtoa_r+0x936>
 801df52:	e091      	b.n	801e078 <_dtoa_r+0x9a8>
 801df54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801df5a:	e758      	b.n	801de0e <_dtoa_r+0x73e>
 801df5c:	9b04      	ldr	r3, [sp, #16]
 801df5e:	1e5e      	subs	r6, r3, #1
 801df60:	9b08      	ldr	r3, [sp, #32]
 801df62:	42b3      	cmp	r3, r6
 801df64:	bfbf      	itttt	lt
 801df66:	9b08      	ldrlt	r3, [sp, #32]
 801df68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801df6a:	9608      	strlt	r6, [sp, #32]
 801df6c:	1af3      	sublt	r3, r6, r3
 801df6e:	bfb4      	ite	lt
 801df70:	18d2      	addlt	r2, r2, r3
 801df72:	1b9e      	subge	r6, r3, r6
 801df74:	9b04      	ldr	r3, [sp, #16]
 801df76:	bfbc      	itt	lt
 801df78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801df7a:	2600      	movlt	r6, #0
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	bfb7      	itett	lt
 801df80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801df84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801df88:	1a9d      	sublt	r5, r3, r2
 801df8a:	2300      	movlt	r3, #0
 801df8c:	e741      	b.n	801de12 <_dtoa_r+0x742>
 801df8e:	9e08      	ldr	r6, [sp, #32]
 801df90:	9d05      	ldr	r5, [sp, #20]
 801df92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801df94:	e748      	b.n	801de28 <_dtoa_r+0x758>
 801df96:	9a08      	ldr	r2, [sp, #32]
 801df98:	e770      	b.n	801de7c <_dtoa_r+0x7ac>
 801df9a:	9b07      	ldr	r3, [sp, #28]
 801df9c:	2b01      	cmp	r3, #1
 801df9e:	dc19      	bgt.n	801dfd4 <_dtoa_r+0x904>
 801dfa0:	9b02      	ldr	r3, [sp, #8]
 801dfa2:	b9bb      	cbnz	r3, 801dfd4 <_dtoa_r+0x904>
 801dfa4:	9b03      	ldr	r3, [sp, #12]
 801dfa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dfaa:	b99b      	cbnz	r3, 801dfd4 <_dtoa_r+0x904>
 801dfac:	9b03      	ldr	r3, [sp, #12]
 801dfae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dfb2:	0d1b      	lsrs	r3, r3, #20
 801dfb4:	051b      	lsls	r3, r3, #20
 801dfb6:	b183      	cbz	r3, 801dfda <_dtoa_r+0x90a>
 801dfb8:	9b05      	ldr	r3, [sp, #20]
 801dfba:	3301      	adds	r3, #1
 801dfbc:	9305      	str	r3, [sp, #20]
 801dfbe:	9b06      	ldr	r3, [sp, #24]
 801dfc0:	3301      	adds	r3, #1
 801dfc2:	9306      	str	r3, [sp, #24]
 801dfc4:	f04f 0801 	mov.w	r8, #1
 801dfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	f47f af6f 	bne.w	801deae <_dtoa_r+0x7de>
 801dfd0:	2001      	movs	r0, #1
 801dfd2:	e774      	b.n	801debe <_dtoa_r+0x7ee>
 801dfd4:	f04f 0800 	mov.w	r8, #0
 801dfd8:	e7f6      	b.n	801dfc8 <_dtoa_r+0x8f8>
 801dfda:	4698      	mov	r8, r3
 801dfdc:	e7f4      	b.n	801dfc8 <_dtoa_r+0x8f8>
 801dfde:	d082      	beq.n	801dee6 <_dtoa_r+0x816>
 801dfe0:	9a05      	ldr	r2, [sp, #20]
 801dfe2:	331c      	adds	r3, #28
 801dfe4:	441a      	add	r2, r3
 801dfe6:	9205      	str	r2, [sp, #20]
 801dfe8:	9a06      	ldr	r2, [sp, #24]
 801dfea:	441a      	add	r2, r3
 801dfec:	441d      	add	r5, r3
 801dfee:	9206      	str	r2, [sp, #24]
 801dff0:	e779      	b.n	801dee6 <_dtoa_r+0x816>
 801dff2:	4603      	mov	r3, r0
 801dff4:	e7f4      	b.n	801dfe0 <_dtoa_r+0x910>
 801dff6:	9b04      	ldr	r3, [sp, #16]
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	dc37      	bgt.n	801e06c <_dtoa_r+0x99c>
 801dffc:	9b07      	ldr	r3, [sp, #28]
 801dffe:	2b02      	cmp	r3, #2
 801e000:	dd34      	ble.n	801e06c <_dtoa_r+0x99c>
 801e002:	9b04      	ldr	r3, [sp, #16]
 801e004:	9301      	str	r3, [sp, #4]
 801e006:	9b01      	ldr	r3, [sp, #4]
 801e008:	b963      	cbnz	r3, 801e024 <_dtoa_r+0x954>
 801e00a:	4631      	mov	r1, r6
 801e00c:	2205      	movs	r2, #5
 801e00e:	4620      	mov	r0, r4
 801e010:	f000 fab2 	bl	801e578 <__multadd>
 801e014:	4601      	mov	r1, r0
 801e016:	4606      	mov	r6, r0
 801e018:	4650      	mov	r0, sl
 801e01a:	f000 fcc7 	bl	801e9ac <__mcmp>
 801e01e:	2800      	cmp	r0, #0
 801e020:	f73f adbb 	bgt.w	801db9a <_dtoa_r+0x4ca>
 801e024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e026:	9d00      	ldr	r5, [sp, #0]
 801e028:	ea6f 0b03 	mvn.w	fp, r3
 801e02c:	f04f 0800 	mov.w	r8, #0
 801e030:	4631      	mov	r1, r6
 801e032:	4620      	mov	r0, r4
 801e034:	f000 fa7e 	bl	801e534 <_Bfree>
 801e038:	2f00      	cmp	r7, #0
 801e03a:	f43f aeab 	beq.w	801dd94 <_dtoa_r+0x6c4>
 801e03e:	f1b8 0f00 	cmp.w	r8, #0
 801e042:	d005      	beq.n	801e050 <_dtoa_r+0x980>
 801e044:	45b8      	cmp	r8, r7
 801e046:	d003      	beq.n	801e050 <_dtoa_r+0x980>
 801e048:	4641      	mov	r1, r8
 801e04a:	4620      	mov	r0, r4
 801e04c:	f000 fa72 	bl	801e534 <_Bfree>
 801e050:	4639      	mov	r1, r7
 801e052:	4620      	mov	r0, r4
 801e054:	f000 fa6e 	bl	801e534 <_Bfree>
 801e058:	e69c      	b.n	801dd94 <_dtoa_r+0x6c4>
 801e05a:	2600      	movs	r6, #0
 801e05c:	4637      	mov	r7, r6
 801e05e:	e7e1      	b.n	801e024 <_dtoa_r+0x954>
 801e060:	46bb      	mov	fp, r7
 801e062:	4637      	mov	r7, r6
 801e064:	e599      	b.n	801db9a <_dtoa_r+0x4ca>
 801e066:	bf00      	nop
 801e068:	40240000 	.word	0x40240000
 801e06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e06e:	2b00      	cmp	r3, #0
 801e070:	f000 80c8 	beq.w	801e204 <_dtoa_r+0xb34>
 801e074:	9b04      	ldr	r3, [sp, #16]
 801e076:	9301      	str	r3, [sp, #4]
 801e078:	2d00      	cmp	r5, #0
 801e07a:	dd05      	ble.n	801e088 <_dtoa_r+0x9b8>
 801e07c:	4639      	mov	r1, r7
 801e07e:	462a      	mov	r2, r5
 801e080:	4620      	mov	r0, r4
 801e082:	f000 fc27 	bl	801e8d4 <__lshift>
 801e086:	4607      	mov	r7, r0
 801e088:	f1b8 0f00 	cmp.w	r8, #0
 801e08c:	d05b      	beq.n	801e146 <_dtoa_r+0xa76>
 801e08e:	6879      	ldr	r1, [r7, #4]
 801e090:	4620      	mov	r0, r4
 801e092:	f000 fa0f 	bl	801e4b4 <_Balloc>
 801e096:	4605      	mov	r5, r0
 801e098:	b928      	cbnz	r0, 801e0a6 <_dtoa_r+0x9d6>
 801e09a:	4b83      	ldr	r3, [pc, #524]	; (801e2a8 <_dtoa_r+0xbd8>)
 801e09c:	4602      	mov	r2, r0
 801e09e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801e0a2:	f7ff bb2e 	b.w	801d702 <_dtoa_r+0x32>
 801e0a6:	693a      	ldr	r2, [r7, #16]
 801e0a8:	3202      	adds	r2, #2
 801e0aa:	0092      	lsls	r2, r2, #2
 801e0ac:	f107 010c 	add.w	r1, r7, #12
 801e0b0:	300c      	adds	r0, #12
 801e0b2:	f7ff fa6f 	bl	801d594 <memcpy>
 801e0b6:	2201      	movs	r2, #1
 801e0b8:	4629      	mov	r1, r5
 801e0ba:	4620      	mov	r0, r4
 801e0bc:	f000 fc0a 	bl	801e8d4 <__lshift>
 801e0c0:	9b00      	ldr	r3, [sp, #0]
 801e0c2:	3301      	adds	r3, #1
 801e0c4:	9304      	str	r3, [sp, #16]
 801e0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e0ca:	4413      	add	r3, r2
 801e0cc:	9308      	str	r3, [sp, #32]
 801e0ce:	9b02      	ldr	r3, [sp, #8]
 801e0d0:	f003 0301 	and.w	r3, r3, #1
 801e0d4:	46b8      	mov	r8, r7
 801e0d6:	9306      	str	r3, [sp, #24]
 801e0d8:	4607      	mov	r7, r0
 801e0da:	9b04      	ldr	r3, [sp, #16]
 801e0dc:	4631      	mov	r1, r6
 801e0de:	3b01      	subs	r3, #1
 801e0e0:	4650      	mov	r0, sl
 801e0e2:	9301      	str	r3, [sp, #4]
 801e0e4:	f7ff fa6b 	bl	801d5be <quorem>
 801e0e8:	4641      	mov	r1, r8
 801e0ea:	9002      	str	r0, [sp, #8]
 801e0ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e0f0:	4650      	mov	r0, sl
 801e0f2:	f000 fc5b 	bl	801e9ac <__mcmp>
 801e0f6:	463a      	mov	r2, r7
 801e0f8:	9005      	str	r0, [sp, #20]
 801e0fa:	4631      	mov	r1, r6
 801e0fc:	4620      	mov	r0, r4
 801e0fe:	f000 fc71 	bl	801e9e4 <__mdiff>
 801e102:	68c2      	ldr	r2, [r0, #12]
 801e104:	4605      	mov	r5, r0
 801e106:	bb02      	cbnz	r2, 801e14a <_dtoa_r+0xa7a>
 801e108:	4601      	mov	r1, r0
 801e10a:	4650      	mov	r0, sl
 801e10c:	f000 fc4e 	bl	801e9ac <__mcmp>
 801e110:	4602      	mov	r2, r0
 801e112:	4629      	mov	r1, r5
 801e114:	4620      	mov	r0, r4
 801e116:	9209      	str	r2, [sp, #36]	; 0x24
 801e118:	f000 fa0c 	bl	801e534 <_Bfree>
 801e11c:	9b07      	ldr	r3, [sp, #28]
 801e11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e120:	9d04      	ldr	r5, [sp, #16]
 801e122:	ea43 0102 	orr.w	r1, r3, r2
 801e126:	9b06      	ldr	r3, [sp, #24]
 801e128:	4319      	orrs	r1, r3
 801e12a:	d110      	bne.n	801e14e <_dtoa_r+0xa7e>
 801e12c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e130:	d029      	beq.n	801e186 <_dtoa_r+0xab6>
 801e132:	9b05      	ldr	r3, [sp, #20]
 801e134:	2b00      	cmp	r3, #0
 801e136:	dd02      	ble.n	801e13e <_dtoa_r+0xa6e>
 801e138:	9b02      	ldr	r3, [sp, #8]
 801e13a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801e13e:	9b01      	ldr	r3, [sp, #4]
 801e140:	f883 9000 	strb.w	r9, [r3]
 801e144:	e774      	b.n	801e030 <_dtoa_r+0x960>
 801e146:	4638      	mov	r0, r7
 801e148:	e7ba      	b.n	801e0c0 <_dtoa_r+0x9f0>
 801e14a:	2201      	movs	r2, #1
 801e14c:	e7e1      	b.n	801e112 <_dtoa_r+0xa42>
 801e14e:	9b05      	ldr	r3, [sp, #20]
 801e150:	2b00      	cmp	r3, #0
 801e152:	db04      	blt.n	801e15e <_dtoa_r+0xa8e>
 801e154:	9907      	ldr	r1, [sp, #28]
 801e156:	430b      	orrs	r3, r1
 801e158:	9906      	ldr	r1, [sp, #24]
 801e15a:	430b      	orrs	r3, r1
 801e15c:	d120      	bne.n	801e1a0 <_dtoa_r+0xad0>
 801e15e:	2a00      	cmp	r2, #0
 801e160:	dded      	ble.n	801e13e <_dtoa_r+0xa6e>
 801e162:	4651      	mov	r1, sl
 801e164:	2201      	movs	r2, #1
 801e166:	4620      	mov	r0, r4
 801e168:	f000 fbb4 	bl	801e8d4 <__lshift>
 801e16c:	4631      	mov	r1, r6
 801e16e:	4682      	mov	sl, r0
 801e170:	f000 fc1c 	bl	801e9ac <__mcmp>
 801e174:	2800      	cmp	r0, #0
 801e176:	dc03      	bgt.n	801e180 <_dtoa_r+0xab0>
 801e178:	d1e1      	bne.n	801e13e <_dtoa_r+0xa6e>
 801e17a:	f019 0f01 	tst.w	r9, #1
 801e17e:	d0de      	beq.n	801e13e <_dtoa_r+0xa6e>
 801e180:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e184:	d1d8      	bne.n	801e138 <_dtoa_r+0xa68>
 801e186:	9a01      	ldr	r2, [sp, #4]
 801e188:	2339      	movs	r3, #57	; 0x39
 801e18a:	7013      	strb	r3, [r2, #0]
 801e18c:	462b      	mov	r3, r5
 801e18e:	461d      	mov	r5, r3
 801e190:	3b01      	subs	r3, #1
 801e192:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e196:	2a39      	cmp	r2, #57	; 0x39
 801e198:	d06c      	beq.n	801e274 <_dtoa_r+0xba4>
 801e19a:	3201      	adds	r2, #1
 801e19c:	701a      	strb	r2, [r3, #0]
 801e19e:	e747      	b.n	801e030 <_dtoa_r+0x960>
 801e1a0:	2a00      	cmp	r2, #0
 801e1a2:	dd07      	ble.n	801e1b4 <_dtoa_r+0xae4>
 801e1a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e1a8:	d0ed      	beq.n	801e186 <_dtoa_r+0xab6>
 801e1aa:	9a01      	ldr	r2, [sp, #4]
 801e1ac:	f109 0301 	add.w	r3, r9, #1
 801e1b0:	7013      	strb	r3, [r2, #0]
 801e1b2:	e73d      	b.n	801e030 <_dtoa_r+0x960>
 801e1b4:	9b04      	ldr	r3, [sp, #16]
 801e1b6:	9a08      	ldr	r2, [sp, #32]
 801e1b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801e1bc:	4293      	cmp	r3, r2
 801e1be:	d043      	beq.n	801e248 <_dtoa_r+0xb78>
 801e1c0:	4651      	mov	r1, sl
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	220a      	movs	r2, #10
 801e1c6:	4620      	mov	r0, r4
 801e1c8:	f000 f9d6 	bl	801e578 <__multadd>
 801e1cc:	45b8      	cmp	r8, r7
 801e1ce:	4682      	mov	sl, r0
 801e1d0:	f04f 0300 	mov.w	r3, #0
 801e1d4:	f04f 020a 	mov.w	r2, #10
 801e1d8:	4641      	mov	r1, r8
 801e1da:	4620      	mov	r0, r4
 801e1dc:	d107      	bne.n	801e1ee <_dtoa_r+0xb1e>
 801e1de:	f000 f9cb 	bl	801e578 <__multadd>
 801e1e2:	4680      	mov	r8, r0
 801e1e4:	4607      	mov	r7, r0
 801e1e6:	9b04      	ldr	r3, [sp, #16]
 801e1e8:	3301      	adds	r3, #1
 801e1ea:	9304      	str	r3, [sp, #16]
 801e1ec:	e775      	b.n	801e0da <_dtoa_r+0xa0a>
 801e1ee:	f000 f9c3 	bl	801e578 <__multadd>
 801e1f2:	4639      	mov	r1, r7
 801e1f4:	4680      	mov	r8, r0
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	220a      	movs	r2, #10
 801e1fa:	4620      	mov	r0, r4
 801e1fc:	f000 f9bc 	bl	801e578 <__multadd>
 801e200:	4607      	mov	r7, r0
 801e202:	e7f0      	b.n	801e1e6 <_dtoa_r+0xb16>
 801e204:	9b04      	ldr	r3, [sp, #16]
 801e206:	9301      	str	r3, [sp, #4]
 801e208:	9d00      	ldr	r5, [sp, #0]
 801e20a:	4631      	mov	r1, r6
 801e20c:	4650      	mov	r0, sl
 801e20e:	f7ff f9d6 	bl	801d5be <quorem>
 801e212:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e216:	9b00      	ldr	r3, [sp, #0]
 801e218:	f805 9b01 	strb.w	r9, [r5], #1
 801e21c:	1aea      	subs	r2, r5, r3
 801e21e:	9b01      	ldr	r3, [sp, #4]
 801e220:	4293      	cmp	r3, r2
 801e222:	dd07      	ble.n	801e234 <_dtoa_r+0xb64>
 801e224:	4651      	mov	r1, sl
 801e226:	2300      	movs	r3, #0
 801e228:	220a      	movs	r2, #10
 801e22a:	4620      	mov	r0, r4
 801e22c:	f000 f9a4 	bl	801e578 <__multadd>
 801e230:	4682      	mov	sl, r0
 801e232:	e7ea      	b.n	801e20a <_dtoa_r+0xb3a>
 801e234:	9b01      	ldr	r3, [sp, #4]
 801e236:	2b00      	cmp	r3, #0
 801e238:	bfc8      	it	gt
 801e23a:	461d      	movgt	r5, r3
 801e23c:	9b00      	ldr	r3, [sp, #0]
 801e23e:	bfd8      	it	le
 801e240:	2501      	movle	r5, #1
 801e242:	441d      	add	r5, r3
 801e244:	f04f 0800 	mov.w	r8, #0
 801e248:	4651      	mov	r1, sl
 801e24a:	2201      	movs	r2, #1
 801e24c:	4620      	mov	r0, r4
 801e24e:	f000 fb41 	bl	801e8d4 <__lshift>
 801e252:	4631      	mov	r1, r6
 801e254:	4682      	mov	sl, r0
 801e256:	f000 fba9 	bl	801e9ac <__mcmp>
 801e25a:	2800      	cmp	r0, #0
 801e25c:	dc96      	bgt.n	801e18c <_dtoa_r+0xabc>
 801e25e:	d102      	bne.n	801e266 <_dtoa_r+0xb96>
 801e260:	f019 0f01 	tst.w	r9, #1
 801e264:	d192      	bne.n	801e18c <_dtoa_r+0xabc>
 801e266:	462b      	mov	r3, r5
 801e268:	461d      	mov	r5, r3
 801e26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e26e:	2a30      	cmp	r2, #48	; 0x30
 801e270:	d0fa      	beq.n	801e268 <_dtoa_r+0xb98>
 801e272:	e6dd      	b.n	801e030 <_dtoa_r+0x960>
 801e274:	9a00      	ldr	r2, [sp, #0]
 801e276:	429a      	cmp	r2, r3
 801e278:	d189      	bne.n	801e18e <_dtoa_r+0xabe>
 801e27a:	f10b 0b01 	add.w	fp, fp, #1
 801e27e:	2331      	movs	r3, #49	; 0x31
 801e280:	e796      	b.n	801e1b0 <_dtoa_r+0xae0>
 801e282:	4b0a      	ldr	r3, [pc, #40]	; (801e2ac <_dtoa_r+0xbdc>)
 801e284:	f7ff ba99 	b.w	801d7ba <_dtoa_r+0xea>
 801e288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	f47f aa6d 	bne.w	801d76a <_dtoa_r+0x9a>
 801e290:	4b07      	ldr	r3, [pc, #28]	; (801e2b0 <_dtoa_r+0xbe0>)
 801e292:	f7ff ba92 	b.w	801d7ba <_dtoa_r+0xea>
 801e296:	9b01      	ldr	r3, [sp, #4]
 801e298:	2b00      	cmp	r3, #0
 801e29a:	dcb5      	bgt.n	801e208 <_dtoa_r+0xb38>
 801e29c:	9b07      	ldr	r3, [sp, #28]
 801e29e:	2b02      	cmp	r3, #2
 801e2a0:	f73f aeb1 	bgt.w	801e006 <_dtoa_r+0x936>
 801e2a4:	e7b0      	b.n	801e208 <_dtoa_r+0xb38>
 801e2a6:	bf00      	nop
 801e2a8:	08021a85 	.word	0x08021a85
 801e2ac:	080219e5 	.word	0x080219e5
 801e2b0:	08021a09 	.word	0x08021a09

0801e2b4 <_free_r>:
 801e2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2b6:	2900      	cmp	r1, #0
 801e2b8:	d044      	beq.n	801e344 <_free_r+0x90>
 801e2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e2be:	9001      	str	r0, [sp, #4]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	f1a1 0404 	sub.w	r4, r1, #4
 801e2c6:	bfb8      	it	lt
 801e2c8:	18e4      	addlt	r4, r4, r3
 801e2ca:	f000 f8e7 	bl	801e49c <__malloc_lock>
 801e2ce:	4a1e      	ldr	r2, [pc, #120]	; (801e348 <_free_r+0x94>)
 801e2d0:	9801      	ldr	r0, [sp, #4]
 801e2d2:	6813      	ldr	r3, [r2, #0]
 801e2d4:	b933      	cbnz	r3, 801e2e4 <_free_r+0x30>
 801e2d6:	6063      	str	r3, [r4, #4]
 801e2d8:	6014      	str	r4, [r2, #0]
 801e2da:	b003      	add	sp, #12
 801e2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e2e0:	f000 b8e2 	b.w	801e4a8 <__malloc_unlock>
 801e2e4:	42a3      	cmp	r3, r4
 801e2e6:	d908      	bls.n	801e2fa <_free_r+0x46>
 801e2e8:	6825      	ldr	r5, [r4, #0]
 801e2ea:	1961      	adds	r1, r4, r5
 801e2ec:	428b      	cmp	r3, r1
 801e2ee:	bf01      	itttt	eq
 801e2f0:	6819      	ldreq	r1, [r3, #0]
 801e2f2:	685b      	ldreq	r3, [r3, #4]
 801e2f4:	1949      	addeq	r1, r1, r5
 801e2f6:	6021      	streq	r1, [r4, #0]
 801e2f8:	e7ed      	b.n	801e2d6 <_free_r+0x22>
 801e2fa:	461a      	mov	r2, r3
 801e2fc:	685b      	ldr	r3, [r3, #4]
 801e2fe:	b10b      	cbz	r3, 801e304 <_free_r+0x50>
 801e300:	42a3      	cmp	r3, r4
 801e302:	d9fa      	bls.n	801e2fa <_free_r+0x46>
 801e304:	6811      	ldr	r1, [r2, #0]
 801e306:	1855      	adds	r5, r2, r1
 801e308:	42a5      	cmp	r5, r4
 801e30a:	d10b      	bne.n	801e324 <_free_r+0x70>
 801e30c:	6824      	ldr	r4, [r4, #0]
 801e30e:	4421      	add	r1, r4
 801e310:	1854      	adds	r4, r2, r1
 801e312:	42a3      	cmp	r3, r4
 801e314:	6011      	str	r1, [r2, #0]
 801e316:	d1e0      	bne.n	801e2da <_free_r+0x26>
 801e318:	681c      	ldr	r4, [r3, #0]
 801e31a:	685b      	ldr	r3, [r3, #4]
 801e31c:	6053      	str	r3, [r2, #4]
 801e31e:	440c      	add	r4, r1
 801e320:	6014      	str	r4, [r2, #0]
 801e322:	e7da      	b.n	801e2da <_free_r+0x26>
 801e324:	d902      	bls.n	801e32c <_free_r+0x78>
 801e326:	230c      	movs	r3, #12
 801e328:	6003      	str	r3, [r0, #0]
 801e32a:	e7d6      	b.n	801e2da <_free_r+0x26>
 801e32c:	6825      	ldr	r5, [r4, #0]
 801e32e:	1961      	adds	r1, r4, r5
 801e330:	428b      	cmp	r3, r1
 801e332:	bf04      	itt	eq
 801e334:	6819      	ldreq	r1, [r3, #0]
 801e336:	685b      	ldreq	r3, [r3, #4]
 801e338:	6063      	str	r3, [r4, #4]
 801e33a:	bf04      	itt	eq
 801e33c:	1949      	addeq	r1, r1, r5
 801e33e:	6021      	streq	r1, [r4, #0]
 801e340:	6054      	str	r4, [r2, #4]
 801e342:	e7ca      	b.n	801e2da <_free_r+0x26>
 801e344:	b003      	add	sp, #12
 801e346:	bd30      	pop	{r4, r5, pc}
 801e348:	200168f0 	.word	0x200168f0

0801e34c <malloc>:
 801e34c:	4b02      	ldr	r3, [pc, #8]	; (801e358 <malloc+0xc>)
 801e34e:	4601      	mov	r1, r0
 801e350:	6818      	ldr	r0, [r3, #0]
 801e352:	f000 b823 	b.w	801e39c <_malloc_r>
 801e356:	bf00      	nop
 801e358:	2000006c 	.word	0x2000006c

0801e35c <sbrk_aligned>:
 801e35c:	b570      	push	{r4, r5, r6, lr}
 801e35e:	4e0e      	ldr	r6, [pc, #56]	; (801e398 <sbrk_aligned+0x3c>)
 801e360:	460c      	mov	r4, r1
 801e362:	6831      	ldr	r1, [r6, #0]
 801e364:	4605      	mov	r5, r0
 801e366:	b911      	cbnz	r1, 801e36e <sbrk_aligned+0x12>
 801e368:	f000 feda 	bl	801f120 <_sbrk_r>
 801e36c:	6030      	str	r0, [r6, #0]
 801e36e:	4621      	mov	r1, r4
 801e370:	4628      	mov	r0, r5
 801e372:	f000 fed5 	bl	801f120 <_sbrk_r>
 801e376:	1c43      	adds	r3, r0, #1
 801e378:	d00a      	beq.n	801e390 <sbrk_aligned+0x34>
 801e37a:	1cc4      	adds	r4, r0, #3
 801e37c:	f024 0403 	bic.w	r4, r4, #3
 801e380:	42a0      	cmp	r0, r4
 801e382:	d007      	beq.n	801e394 <sbrk_aligned+0x38>
 801e384:	1a21      	subs	r1, r4, r0
 801e386:	4628      	mov	r0, r5
 801e388:	f000 feca 	bl	801f120 <_sbrk_r>
 801e38c:	3001      	adds	r0, #1
 801e38e:	d101      	bne.n	801e394 <sbrk_aligned+0x38>
 801e390:	f04f 34ff 	mov.w	r4, #4294967295
 801e394:	4620      	mov	r0, r4
 801e396:	bd70      	pop	{r4, r5, r6, pc}
 801e398:	200168f4 	.word	0x200168f4

0801e39c <_malloc_r>:
 801e39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3a0:	1ccd      	adds	r5, r1, #3
 801e3a2:	f025 0503 	bic.w	r5, r5, #3
 801e3a6:	3508      	adds	r5, #8
 801e3a8:	2d0c      	cmp	r5, #12
 801e3aa:	bf38      	it	cc
 801e3ac:	250c      	movcc	r5, #12
 801e3ae:	2d00      	cmp	r5, #0
 801e3b0:	4607      	mov	r7, r0
 801e3b2:	db01      	blt.n	801e3b8 <_malloc_r+0x1c>
 801e3b4:	42a9      	cmp	r1, r5
 801e3b6:	d905      	bls.n	801e3c4 <_malloc_r+0x28>
 801e3b8:	230c      	movs	r3, #12
 801e3ba:	603b      	str	r3, [r7, #0]
 801e3bc:	2600      	movs	r6, #0
 801e3be:	4630      	mov	r0, r6
 801e3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e498 <_malloc_r+0xfc>
 801e3c8:	f000 f868 	bl	801e49c <__malloc_lock>
 801e3cc:	f8d8 3000 	ldr.w	r3, [r8]
 801e3d0:	461c      	mov	r4, r3
 801e3d2:	bb5c      	cbnz	r4, 801e42c <_malloc_r+0x90>
 801e3d4:	4629      	mov	r1, r5
 801e3d6:	4638      	mov	r0, r7
 801e3d8:	f7ff ffc0 	bl	801e35c <sbrk_aligned>
 801e3dc:	1c43      	adds	r3, r0, #1
 801e3de:	4604      	mov	r4, r0
 801e3e0:	d155      	bne.n	801e48e <_malloc_r+0xf2>
 801e3e2:	f8d8 4000 	ldr.w	r4, [r8]
 801e3e6:	4626      	mov	r6, r4
 801e3e8:	2e00      	cmp	r6, #0
 801e3ea:	d145      	bne.n	801e478 <_malloc_r+0xdc>
 801e3ec:	2c00      	cmp	r4, #0
 801e3ee:	d048      	beq.n	801e482 <_malloc_r+0xe6>
 801e3f0:	6823      	ldr	r3, [r4, #0]
 801e3f2:	4631      	mov	r1, r6
 801e3f4:	4638      	mov	r0, r7
 801e3f6:	eb04 0903 	add.w	r9, r4, r3
 801e3fa:	f000 fe91 	bl	801f120 <_sbrk_r>
 801e3fe:	4581      	cmp	r9, r0
 801e400:	d13f      	bne.n	801e482 <_malloc_r+0xe6>
 801e402:	6821      	ldr	r1, [r4, #0]
 801e404:	1a6d      	subs	r5, r5, r1
 801e406:	4629      	mov	r1, r5
 801e408:	4638      	mov	r0, r7
 801e40a:	f7ff ffa7 	bl	801e35c <sbrk_aligned>
 801e40e:	3001      	adds	r0, #1
 801e410:	d037      	beq.n	801e482 <_malloc_r+0xe6>
 801e412:	6823      	ldr	r3, [r4, #0]
 801e414:	442b      	add	r3, r5
 801e416:	6023      	str	r3, [r4, #0]
 801e418:	f8d8 3000 	ldr.w	r3, [r8]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d038      	beq.n	801e492 <_malloc_r+0xf6>
 801e420:	685a      	ldr	r2, [r3, #4]
 801e422:	42a2      	cmp	r2, r4
 801e424:	d12b      	bne.n	801e47e <_malloc_r+0xe2>
 801e426:	2200      	movs	r2, #0
 801e428:	605a      	str	r2, [r3, #4]
 801e42a:	e00f      	b.n	801e44c <_malloc_r+0xb0>
 801e42c:	6822      	ldr	r2, [r4, #0]
 801e42e:	1b52      	subs	r2, r2, r5
 801e430:	d41f      	bmi.n	801e472 <_malloc_r+0xd6>
 801e432:	2a0b      	cmp	r2, #11
 801e434:	d917      	bls.n	801e466 <_malloc_r+0xca>
 801e436:	1961      	adds	r1, r4, r5
 801e438:	42a3      	cmp	r3, r4
 801e43a:	6025      	str	r5, [r4, #0]
 801e43c:	bf18      	it	ne
 801e43e:	6059      	strne	r1, [r3, #4]
 801e440:	6863      	ldr	r3, [r4, #4]
 801e442:	bf08      	it	eq
 801e444:	f8c8 1000 	streq.w	r1, [r8]
 801e448:	5162      	str	r2, [r4, r5]
 801e44a:	604b      	str	r3, [r1, #4]
 801e44c:	4638      	mov	r0, r7
 801e44e:	f104 060b 	add.w	r6, r4, #11
 801e452:	f000 f829 	bl	801e4a8 <__malloc_unlock>
 801e456:	f026 0607 	bic.w	r6, r6, #7
 801e45a:	1d23      	adds	r3, r4, #4
 801e45c:	1af2      	subs	r2, r6, r3
 801e45e:	d0ae      	beq.n	801e3be <_malloc_r+0x22>
 801e460:	1b9b      	subs	r3, r3, r6
 801e462:	50a3      	str	r3, [r4, r2]
 801e464:	e7ab      	b.n	801e3be <_malloc_r+0x22>
 801e466:	42a3      	cmp	r3, r4
 801e468:	6862      	ldr	r2, [r4, #4]
 801e46a:	d1dd      	bne.n	801e428 <_malloc_r+0x8c>
 801e46c:	f8c8 2000 	str.w	r2, [r8]
 801e470:	e7ec      	b.n	801e44c <_malloc_r+0xb0>
 801e472:	4623      	mov	r3, r4
 801e474:	6864      	ldr	r4, [r4, #4]
 801e476:	e7ac      	b.n	801e3d2 <_malloc_r+0x36>
 801e478:	4634      	mov	r4, r6
 801e47a:	6876      	ldr	r6, [r6, #4]
 801e47c:	e7b4      	b.n	801e3e8 <_malloc_r+0x4c>
 801e47e:	4613      	mov	r3, r2
 801e480:	e7cc      	b.n	801e41c <_malloc_r+0x80>
 801e482:	230c      	movs	r3, #12
 801e484:	603b      	str	r3, [r7, #0]
 801e486:	4638      	mov	r0, r7
 801e488:	f000 f80e 	bl	801e4a8 <__malloc_unlock>
 801e48c:	e797      	b.n	801e3be <_malloc_r+0x22>
 801e48e:	6025      	str	r5, [r4, #0]
 801e490:	e7dc      	b.n	801e44c <_malloc_r+0xb0>
 801e492:	605b      	str	r3, [r3, #4]
 801e494:	deff      	udf	#255	; 0xff
 801e496:	bf00      	nop
 801e498:	200168f0 	.word	0x200168f0

0801e49c <__malloc_lock>:
 801e49c:	4801      	ldr	r0, [pc, #4]	; (801e4a4 <__malloc_lock+0x8>)
 801e49e:	f7ff b877 	b.w	801d590 <__retarget_lock_acquire_recursive>
 801e4a2:	bf00      	nop
 801e4a4:	200168ec 	.word	0x200168ec

0801e4a8 <__malloc_unlock>:
 801e4a8:	4801      	ldr	r0, [pc, #4]	; (801e4b0 <__malloc_unlock+0x8>)
 801e4aa:	f7ff b872 	b.w	801d592 <__retarget_lock_release_recursive>
 801e4ae:	bf00      	nop
 801e4b0:	200168ec 	.word	0x200168ec

0801e4b4 <_Balloc>:
 801e4b4:	b570      	push	{r4, r5, r6, lr}
 801e4b6:	69c6      	ldr	r6, [r0, #28]
 801e4b8:	4604      	mov	r4, r0
 801e4ba:	460d      	mov	r5, r1
 801e4bc:	b976      	cbnz	r6, 801e4dc <_Balloc+0x28>
 801e4be:	2010      	movs	r0, #16
 801e4c0:	f7ff ff44 	bl	801e34c <malloc>
 801e4c4:	4602      	mov	r2, r0
 801e4c6:	61e0      	str	r0, [r4, #28]
 801e4c8:	b920      	cbnz	r0, 801e4d4 <_Balloc+0x20>
 801e4ca:	4b18      	ldr	r3, [pc, #96]	; (801e52c <_Balloc+0x78>)
 801e4cc:	4818      	ldr	r0, [pc, #96]	; (801e530 <_Balloc+0x7c>)
 801e4ce:	216b      	movs	r1, #107	; 0x6b
 801e4d0:	f7fe f9c4 	bl	801c85c <__assert_func>
 801e4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e4d8:	6006      	str	r6, [r0, #0]
 801e4da:	60c6      	str	r6, [r0, #12]
 801e4dc:	69e6      	ldr	r6, [r4, #28]
 801e4de:	68f3      	ldr	r3, [r6, #12]
 801e4e0:	b183      	cbz	r3, 801e504 <_Balloc+0x50>
 801e4e2:	69e3      	ldr	r3, [r4, #28]
 801e4e4:	68db      	ldr	r3, [r3, #12]
 801e4e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e4ea:	b9b8      	cbnz	r0, 801e51c <_Balloc+0x68>
 801e4ec:	2101      	movs	r1, #1
 801e4ee:	fa01 f605 	lsl.w	r6, r1, r5
 801e4f2:	1d72      	adds	r2, r6, #5
 801e4f4:	0092      	lsls	r2, r2, #2
 801e4f6:	4620      	mov	r0, r4
 801e4f8:	f000 fe22 	bl	801f140 <_calloc_r>
 801e4fc:	b160      	cbz	r0, 801e518 <_Balloc+0x64>
 801e4fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e502:	e00e      	b.n	801e522 <_Balloc+0x6e>
 801e504:	2221      	movs	r2, #33	; 0x21
 801e506:	2104      	movs	r1, #4
 801e508:	4620      	mov	r0, r4
 801e50a:	f000 fe19 	bl	801f140 <_calloc_r>
 801e50e:	69e3      	ldr	r3, [r4, #28]
 801e510:	60f0      	str	r0, [r6, #12]
 801e512:	68db      	ldr	r3, [r3, #12]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d1e4      	bne.n	801e4e2 <_Balloc+0x2e>
 801e518:	2000      	movs	r0, #0
 801e51a:	bd70      	pop	{r4, r5, r6, pc}
 801e51c:	6802      	ldr	r2, [r0, #0]
 801e51e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e522:	2300      	movs	r3, #0
 801e524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e528:	e7f7      	b.n	801e51a <_Balloc+0x66>
 801e52a:	bf00      	nop
 801e52c:	08021a16 	.word	0x08021a16
 801e530:	08021a96 	.word	0x08021a96

0801e534 <_Bfree>:
 801e534:	b570      	push	{r4, r5, r6, lr}
 801e536:	69c6      	ldr	r6, [r0, #28]
 801e538:	4605      	mov	r5, r0
 801e53a:	460c      	mov	r4, r1
 801e53c:	b976      	cbnz	r6, 801e55c <_Bfree+0x28>
 801e53e:	2010      	movs	r0, #16
 801e540:	f7ff ff04 	bl	801e34c <malloc>
 801e544:	4602      	mov	r2, r0
 801e546:	61e8      	str	r0, [r5, #28]
 801e548:	b920      	cbnz	r0, 801e554 <_Bfree+0x20>
 801e54a:	4b09      	ldr	r3, [pc, #36]	; (801e570 <_Bfree+0x3c>)
 801e54c:	4809      	ldr	r0, [pc, #36]	; (801e574 <_Bfree+0x40>)
 801e54e:	218f      	movs	r1, #143	; 0x8f
 801e550:	f7fe f984 	bl	801c85c <__assert_func>
 801e554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e558:	6006      	str	r6, [r0, #0]
 801e55a:	60c6      	str	r6, [r0, #12]
 801e55c:	b13c      	cbz	r4, 801e56e <_Bfree+0x3a>
 801e55e:	69eb      	ldr	r3, [r5, #28]
 801e560:	6862      	ldr	r2, [r4, #4]
 801e562:	68db      	ldr	r3, [r3, #12]
 801e564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e568:	6021      	str	r1, [r4, #0]
 801e56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e56e:	bd70      	pop	{r4, r5, r6, pc}
 801e570:	08021a16 	.word	0x08021a16
 801e574:	08021a96 	.word	0x08021a96

0801e578 <__multadd>:
 801e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e57c:	690d      	ldr	r5, [r1, #16]
 801e57e:	4607      	mov	r7, r0
 801e580:	460c      	mov	r4, r1
 801e582:	461e      	mov	r6, r3
 801e584:	f101 0c14 	add.w	ip, r1, #20
 801e588:	2000      	movs	r0, #0
 801e58a:	f8dc 3000 	ldr.w	r3, [ip]
 801e58e:	b299      	uxth	r1, r3
 801e590:	fb02 6101 	mla	r1, r2, r1, r6
 801e594:	0c1e      	lsrs	r6, r3, #16
 801e596:	0c0b      	lsrs	r3, r1, #16
 801e598:	fb02 3306 	mla	r3, r2, r6, r3
 801e59c:	b289      	uxth	r1, r1
 801e59e:	3001      	adds	r0, #1
 801e5a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e5a4:	4285      	cmp	r5, r0
 801e5a6:	f84c 1b04 	str.w	r1, [ip], #4
 801e5aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e5ae:	dcec      	bgt.n	801e58a <__multadd+0x12>
 801e5b0:	b30e      	cbz	r6, 801e5f6 <__multadd+0x7e>
 801e5b2:	68a3      	ldr	r3, [r4, #8]
 801e5b4:	42ab      	cmp	r3, r5
 801e5b6:	dc19      	bgt.n	801e5ec <__multadd+0x74>
 801e5b8:	6861      	ldr	r1, [r4, #4]
 801e5ba:	4638      	mov	r0, r7
 801e5bc:	3101      	adds	r1, #1
 801e5be:	f7ff ff79 	bl	801e4b4 <_Balloc>
 801e5c2:	4680      	mov	r8, r0
 801e5c4:	b928      	cbnz	r0, 801e5d2 <__multadd+0x5a>
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	4b0c      	ldr	r3, [pc, #48]	; (801e5fc <__multadd+0x84>)
 801e5ca:	480d      	ldr	r0, [pc, #52]	; (801e600 <__multadd+0x88>)
 801e5cc:	21ba      	movs	r1, #186	; 0xba
 801e5ce:	f7fe f945 	bl	801c85c <__assert_func>
 801e5d2:	6922      	ldr	r2, [r4, #16]
 801e5d4:	3202      	adds	r2, #2
 801e5d6:	f104 010c 	add.w	r1, r4, #12
 801e5da:	0092      	lsls	r2, r2, #2
 801e5dc:	300c      	adds	r0, #12
 801e5de:	f7fe ffd9 	bl	801d594 <memcpy>
 801e5e2:	4621      	mov	r1, r4
 801e5e4:	4638      	mov	r0, r7
 801e5e6:	f7ff ffa5 	bl	801e534 <_Bfree>
 801e5ea:	4644      	mov	r4, r8
 801e5ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e5f0:	3501      	adds	r5, #1
 801e5f2:	615e      	str	r6, [r3, #20]
 801e5f4:	6125      	str	r5, [r4, #16]
 801e5f6:	4620      	mov	r0, r4
 801e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5fc:	08021a85 	.word	0x08021a85
 801e600:	08021a96 	.word	0x08021a96

0801e604 <__hi0bits>:
 801e604:	0c03      	lsrs	r3, r0, #16
 801e606:	041b      	lsls	r3, r3, #16
 801e608:	b9d3      	cbnz	r3, 801e640 <__hi0bits+0x3c>
 801e60a:	0400      	lsls	r0, r0, #16
 801e60c:	2310      	movs	r3, #16
 801e60e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e612:	bf04      	itt	eq
 801e614:	0200      	lsleq	r0, r0, #8
 801e616:	3308      	addeq	r3, #8
 801e618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e61c:	bf04      	itt	eq
 801e61e:	0100      	lsleq	r0, r0, #4
 801e620:	3304      	addeq	r3, #4
 801e622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e626:	bf04      	itt	eq
 801e628:	0080      	lsleq	r0, r0, #2
 801e62a:	3302      	addeq	r3, #2
 801e62c:	2800      	cmp	r0, #0
 801e62e:	db05      	blt.n	801e63c <__hi0bits+0x38>
 801e630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e634:	f103 0301 	add.w	r3, r3, #1
 801e638:	bf08      	it	eq
 801e63a:	2320      	moveq	r3, #32
 801e63c:	4618      	mov	r0, r3
 801e63e:	4770      	bx	lr
 801e640:	2300      	movs	r3, #0
 801e642:	e7e4      	b.n	801e60e <__hi0bits+0xa>

0801e644 <__lo0bits>:
 801e644:	6803      	ldr	r3, [r0, #0]
 801e646:	f013 0207 	ands.w	r2, r3, #7
 801e64a:	d00c      	beq.n	801e666 <__lo0bits+0x22>
 801e64c:	07d9      	lsls	r1, r3, #31
 801e64e:	d422      	bmi.n	801e696 <__lo0bits+0x52>
 801e650:	079a      	lsls	r2, r3, #30
 801e652:	bf49      	itett	mi
 801e654:	085b      	lsrmi	r3, r3, #1
 801e656:	089b      	lsrpl	r3, r3, #2
 801e658:	6003      	strmi	r3, [r0, #0]
 801e65a:	2201      	movmi	r2, #1
 801e65c:	bf5c      	itt	pl
 801e65e:	6003      	strpl	r3, [r0, #0]
 801e660:	2202      	movpl	r2, #2
 801e662:	4610      	mov	r0, r2
 801e664:	4770      	bx	lr
 801e666:	b299      	uxth	r1, r3
 801e668:	b909      	cbnz	r1, 801e66e <__lo0bits+0x2a>
 801e66a:	0c1b      	lsrs	r3, r3, #16
 801e66c:	2210      	movs	r2, #16
 801e66e:	b2d9      	uxtb	r1, r3
 801e670:	b909      	cbnz	r1, 801e676 <__lo0bits+0x32>
 801e672:	3208      	adds	r2, #8
 801e674:	0a1b      	lsrs	r3, r3, #8
 801e676:	0719      	lsls	r1, r3, #28
 801e678:	bf04      	itt	eq
 801e67a:	091b      	lsreq	r3, r3, #4
 801e67c:	3204      	addeq	r2, #4
 801e67e:	0799      	lsls	r1, r3, #30
 801e680:	bf04      	itt	eq
 801e682:	089b      	lsreq	r3, r3, #2
 801e684:	3202      	addeq	r2, #2
 801e686:	07d9      	lsls	r1, r3, #31
 801e688:	d403      	bmi.n	801e692 <__lo0bits+0x4e>
 801e68a:	085b      	lsrs	r3, r3, #1
 801e68c:	f102 0201 	add.w	r2, r2, #1
 801e690:	d003      	beq.n	801e69a <__lo0bits+0x56>
 801e692:	6003      	str	r3, [r0, #0]
 801e694:	e7e5      	b.n	801e662 <__lo0bits+0x1e>
 801e696:	2200      	movs	r2, #0
 801e698:	e7e3      	b.n	801e662 <__lo0bits+0x1e>
 801e69a:	2220      	movs	r2, #32
 801e69c:	e7e1      	b.n	801e662 <__lo0bits+0x1e>
	...

0801e6a0 <__i2b>:
 801e6a0:	b510      	push	{r4, lr}
 801e6a2:	460c      	mov	r4, r1
 801e6a4:	2101      	movs	r1, #1
 801e6a6:	f7ff ff05 	bl	801e4b4 <_Balloc>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	b928      	cbnz	r0, 801e6ba <__i2b+0x1a>
 801e6ae:	4b05      	ldr	r3, [pc, #20]	; (801e6c4 <__i2b+0x24>)
 801e6b0:	4805      	ldr	r0, [pc, #20]	; (801e6c8 <__i2b+0x28>)
 801e6b2:	f240 1145 	movw	r1, #325	; 0x145
 801e6b6:	f7fe f8d1 	bl	801c85c <__assert_func>
 801e6ba:	2301      	movs	r3, #1
 801e6bc:	6144      	str	r4, [r0, #20]
 801e6be:	6103      	str	r3, [r0, #16]
 801e6c0:	bd10      	pop	{r4, pc}
 801e6c2:	bf00      	nop
 801e6c4:	08021a85 	.word	0x08021a85
 801e6c8:	08021a96 	.word	0x08021a96

0801e6cc <__multiply>:
 801e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d0:	4691      	mov	r9, r2
 801e6d2:	690a      	ldr	r2, [r1, #16]
 801e6d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e6d8:	429a      	cmp	r2, r3
 801e6da:	bfb8      	it	lt
 801e6dc:	460b      	movlt	r3, r1
 801e6de:	460c      	mov	r4, r1
 801e6e0:	bfbc      	itt	lt
 801e6e2:	464c      	movlt	r4, r9
 801e6e4:	4699      	movlt	r9, r3
 801e6e6:	6927      	ldr	r7, [r4, #16]
 801e6e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e6ec:	68a3      	ldr	r3, [r4, #8]
 801e6ee:	6861      	ldr	r1, [r4, #4]
 801e6f0:	eb07 060a 	add.w	r6, r7, sl
 801e6f4:	42b3      	cmp	r3, r6
 801e6f6:	b085      	sub	sp, #20
 801e6f8:	bfb8      	it	lt
 801e6fa:	3101      	addlt	r1, #1
 801e6fc:	f7ff feda 	bl	801e4b4 <_Balloc>
 801e700:	b930      	cbnz	r0, 801e710 <__multiply+0x44>
 801e702:	4602      	mov	r2, r0
 801e704:	4b44      	ldr	r3, [pc, #272]	; (801e818 <__multiply+0x14c>)
 801e706:	4845      	ldr	r0, [pc, #276]	; (801e81c <__multiply+0x150>)
 801e708:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801e70c:	f7fe f8a6 	bl	801c85c <__assert_func>
 801e710:	f100 0514 	add.w	r5, r0, #20
 801e714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e718:	462b      	mov	r3, r5
 801e71a:	2200      	movs	r2, #0
 801e71c:	4543      	cmp	r3, r8
 801e71e:	d321      	bcc.n	801e764 <__multiply+0x98>
 801e720:	f104 0314 	add.w	r3, r4, #20
 801e724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e728:	f109 0314 	add.w	r3, r9, #20
 801e72c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e730:	9202      	str	r2, [sp, #8]
 801e732:	1b3a      	subs	r2, r7, r4
 801e734:	3a15      	subs	r2, #21
 801e736:	f022 0203 	bic.w	r2, r2, #3
 801e73a:	3204      	adds	r2, #4
 801e73c:	f104 0115 	add.w	r1, r4, #21
 801e740:	428f      	cmp	r7, r1
 801e742:	bf38      	it	cc
 801e744:	2204      	movcc	r2, #4
 801e746:	9201      	str	r2, [sp, #4]
 801e748:	9a02      	ldr	r2, [sp, #8]
 801e74a:	9303      	str	r3, [sp, #12]
 801e74c:	429a      	cmp	r2, r3
 801e74e:	d80c      	bhi.n	801e76a <__multiply+0x9e>
 801e750:	2e00      	cmp	r6, #0
 801e752:	dd03      	ble.n	801e75c <__multiply+0x90>
 801e754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d05b      	beq.n	801e814 <__multiply+0x148>
 801e75c:	6106      	str	r6, [r0, #16]
 801e75e:	b005      	add	sp, #20
 801e760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e764:	f843 2b04 	str.w	r2, [r3], #4
 801e768:	e7d8      	b.n	801e71c <__multiply+0x50>
 801e76a:	f8b3 a000 	ldrh.w	sl, [r3]
 801e76e:	f1ba 0f00 	cmp.w	sl, #0
 801e772:	d024      	beq.n	801e7be <__multiply+0xf2>
 801e774:	f104 0e14 	add.w	lr, r4, #20
 801e778:	46a9      	mov	r9, r5
 801e77a:	f04f 0c00 	mov.w	ip, #0
 801e77e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e782:	f8d9 1000 	ldr.w	r1, [r9]
 801e786:	fa1f fb82 	uxth.w	fp, r2
 801e78a:	b289      	uxth	r1, r1
 801e78c:	fb0a 110b 	mla	r1, sl, fp, r1
 801e790:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e794:	f8d9 2000 	ldr.w	r2, [r9]
 801e798:	4461      	add	r1, ip
 801e79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e79e:	fb0a c20b 	mla	r2, sl, fp, ip
 801e7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e7a6:	b289      	uxth	r1, r1
 801e7a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e7ac:	4577      	cmp	r7, lr
 801e7ae:	f849 1b04 	str.w	r1, [r9], #4
 801e7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e7b6:	d8e2      	bhi.n	801e77e <__multiply+0xb2>
 801e7b8:	9a01      	ldr	r2, [sp, #4]
 801e7ba:	f845 c002 	str.w	ip, [r5, r2]
 801e7be:	9a03      	ldr	r2, [sp, #12]
 801e7c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e7c4:	3304      	adds	r3, #4
 801e7c6:	f1b9 0f00 	cmp.w	r9, #0
 801e7ca:	d021      	beq.n	801e810 <__multiply+0x144>
 801e7cc:	6829      	ldr	r1, [r5, #0]
 801e7ce:	f104 0c14 	add.w	ip, r4, #20
 801e7d2:	46ae      	mov	lr, r5
 801e7d4:	f04f 0a00 	mov.w	sl, #0
 801e7d8:	f8bc b000 	ldrh.w	fp, [ip]
 801e7dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e7e0:	fb09 220b 	mla	r2, r9, fp, r2
 801e7e4:	4452      	add	r2, sl
 801e7e6:	b289      	uxth	r1, r1
 801e7e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e7ec:	f84e 1b04 	str.w	r1, [lr], #4
 801e7f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801e7f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e7f8:	f8be 1000 	ldrh.w	r1, [lr]
 801e7fc:	fb09 110a 	mla	r1, r9, sl, r1
 801e800:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801e804:	4567      	cmp	r7, ip
 801e806:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e80a:	d8e5      	bhi.n	801e7d8 <__multiply+0x10c>
 801e80c:	9a01      	ldr	r2, [sp, #4]
 801e80e:	50a9      	str	r1, [r5, r2]
 801e810:	3504      	adds	r5, #4
 801e812:	e799      	b.n	801e748 <__multiply+0x7c>
 801e814:	3e01      	subs	r6, #1
 801e816:	e79b      	b.n	801e750 <__multiply+0x84>
 801e818:	08021a85 	.word	0x08021a85
 801e81c:	08021a96 	.word	0x08021a96

0801e820 <__pow5mult>:
 801e820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e824:	4615      	mov	r5, r2
 801e826:	f012 0203 	ands.w	r2, r2, #3
 801e82a:	4606      	mov	r6, r0
 801e82c:	460f      	mov	r7, r1
 801e82e:	d007      	beq.n	801e840 <__pow5mult+0x20>
 801e830:	4c25      	ldr	r4, [pc, #148]	; (801e8c8 <__pow5mult+0xa8>)
 801e832:	3a01      	subs	r2, #1
 801e834:	2300      	movs	r3, #0
 801e836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e83a:	f7ff fe9d 	bl	801e578 <__multadd>
 801e83e:	4607      	mov	r7, r0
 801e840:	10ad      	asrs	r5, r5, #2
 801e842:	d03d      	beq.n	801e8c0 <__pow5mult+0xa0>
 801e844:	69f4      	ldr	r4, [r6, #28]
 801e846:	b97c      	cbnz	r4, 801e868 <__pow5mult+0x48>
 801e848:	2010      	movs	r0, #16
 801e84a:	f7ff fd7f 	bl	801e34c <malloc>
 801e84e:	4602      	mov	r2, r0
 801e850:	61f0      	str	r0, [r6, #28]
 801e852:	b928      	cbnz	r0, 801e860 <__pow5mult+0x40>
 801e854:	4b1d      	ldr	r3, [pc, #116]	; (801e8cc <__pow5mult+0xac>)
 801e856:	481e      	ldr	r0, [pc, #120]	; (801e8d0 <__pow5mult+0xb0>)
 801e858:	f240 11b3 	movw	r1, #435	; 0x1b3
 801e85c:	f7fd fffe 	bl	801c85c <__assert_func>
 801e860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e864:	6004      	str	r4, [r0, #0]
 801e866:	60c4      	str	r4, [r0, #12]
 801e868:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801e86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e870:	b94c      	cbnz	r4, 801e886 <__pow5mult+0x66>
 801e872:	f240 2171 	movw	r1, #625	; 0x271
 801e876:	4630      	mov	r0, r6
 801e878:	f7ff ff12 	bl	801e6a0 <__i2b>
 801e87c:	2300      	movs	r3, #0
 801e87e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e882:	4604      	mov	r4, r0
 801e884:	6003      	str	r3, [r0, #0]
 801e886:	f04f 0900 	mov.w	r9, #0
 801e88a:	07eb      	lsls	r3, r5, #31
 801e88c:	d50a      	bpl.n	801e8a4 <__pow5mult+0x84>
 801e88e:	4639      	mov	r1, r7
 801e890:	4622      	mov	r2, r4
 801e892:	4630      	mov	r0, r6
 801e894:	f7ff ff1a 	bl	801e6cc <__multiply>
 801e898:	4639      	mov	r1, r7
 801e89a:	4680      	mov	r8, r0
 801e89c:	4630      	mov	r0, r6
 801e89e:	f7ff fe49 	bl	801e534 <_Bfree>
 801e8a2:	4647      	mov	r7, r8
 801e8a4:	106d      	asrs	r5, r5, #1
 801e8a6:	d00b      	beq.n	801e8c0 <__pow5mult+0xa0>
 801e8a8:	6820      	ldr	r0, [r4, #0]
 801e8aa:	b938      	cbnz	r0, 801e8bc <__pow5mult+0x9c>
 801e8ac:	4622      	mov	r2, r4
 801e8ae:	4621      	mov	r1, r4
 801e8b0:	4630      	mov	r0, r6
 801e8b2:	f7ff ff0b 	bl	801e6cc <__multiply>
 801e8b6:	6020      	str	r0, [r4, #0]
 801e8b8:	f8c0 9000 	str.w	r9, [r0]
 801e8bc:	4604      	mov	r4, r0
 801e8be:	e7e4      	b.n	801e88a <__pow5mult+0x6a>
 801e8c0:	4638      	mov	r0, r7
 801e8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8c6:	bf00      	nop
 801e8c8:	08021be0 	.word	0x08021be0
 801e8cc:	08021a16 	.word	0x08021a16
 801e8d0:	08021a96 	.word	0x08021a96

0801e8d4 <__lshift>:
 801e8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8d8:	460c      	mov	r4, r1
 801e8da:	6849      	ldr	r1, [r1, #4]
 801e8dc:	6923      	ldr	r3, [r4, #16]
 801e8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e8e2:	68a3      	ldr	r3, [r4, #8]
 801e8e4:	4607      	mov	r7, r0
 801e8e6:	4691      	mov	r9, r2
 801e8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e8ec:	f108 0601 	add.w	r6, r8, #1
 801e8f0:	42b3      	cmp	r3, r6
 801e8f2:	db0b      	blt.n	801e90c <__lshift+0x38>
 801e8f4:	4638      	mov	r0, r7
 801e8f6:	f7ff fddd 	bl	801e4b4 <_Balloc>
 801e8fa:	4605      	mov	r5, r0
 801e8fc:	b948      	cbnz	r0, 801e912 <__lshift+0x3e>
 801e8fe:	4602      	mov	r2, r0
 801e900:	4b28      	ldr	r3, [pc, #160]	; (801e9a4 <__lshift+0xd0>)
 801e902:	4829      	ldr	r0, [pc, #164]	; (801e9a8 <__lshift+0xd4>)
 801e904:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801e908:	f7fd ffa8 	bl	801c85c <__assert_func>
 801e90c:	3101      	adds	r1, #1
 801e90e:	005b      	lsls	r3, r3, #1
 801e910:	e7ee      	b.n	801e8f0 <__lshift+0x1c>
 801e912:	2300      	movs	r3, #0
 801e914:	f100 0114 	add.w	r1, r0, #20
 801e918:	f100 0210 	add.w	r2, r0, #16
 801e91c:	4618      	mov	r0, r3
 801e91e:	4553      	cmp	r3, sl
 801e920:	db33      	blt.n	801e98a <__lshift+0xb6>
 801e922:	6920      	ldr	r0, [r4, #16]
 801e924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e928:	f104 0314 	add.w	r3, r4, #20
 801e92c:	f019 091f 	ands.w	r9, r9, #31
 801e930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e938:	d02b      	beq.n	801e992 <__lshift+0xbe>
 801e93a:	f1c9 0e20 	rsb	lr, r9, #32
 801e93e:	468a      	mov	sl, r1
 801e940:	2200      	movs	r2, #0
 801e942:	6818      	ldr	r0, [r3, #0]
 801e944:	fa00 f009 	lsl.w	r0, r0, r9
 801e948:	4310      	orrs	r0, r2
 801e94a:	f84a 0b04 	str.w	r0, [sl], #4
 801e94e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e952:	459c      	cmp	ip, r3
 801e954:	fa22 f20e 	lsr.w	r2, r2, lr
 801e958:	d8f3      	bhi.n	801e942 <__lshift+0x6e>
 801e95a:	ebac 0304 	sub.w	r3, ip, r4
 801e95e:	3b15      	subs	r3, #21
 801e960:	f023 0303 	bic.w	r3, r3, #3
 801e964:	3304      	adds	r3, #4
 801e966:	f104 0015 	add.w	r0, r4, #21
 801e96a:	4584      	cmp	ip, r0
 801e96c:	bf38      	it	cc
 801e96e:	2304      	movcc	r3, #4
 801e970:	50ca      	str	r2, [r1, r3]
 801e972:	b10a      	cbz	r2, 801e978 <__lshift+0xa4>
 801e974:	f108 0602 	add.w	r6, r8, #2
 801e978:	3e01      	subs	r6, #1
 801e97a:	4638      	mov	r0, r7
 801e97c:	612e      	str	r6, [r5, #16]
 801e97e:	4621      	mov	r1, r4
 801e980:	f7ff fdd8 	bl	801e534 <_Bfree>
 801e984:	4628      	mov	r0, r5
 801e986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e98a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e98e:	3301      	adds	r3, #1
 801e990:	e7c5      	b.n	801e91e <__lshift+0x4a>
 801e992:	3904      	subs	r1, #4
 801e994:	f853 2b04 	ldr.w	r2, [r3], #4
 801e998:	f841 2f04 	str.w	r2, [r1, #4]!
 801e99c:	459c      	cmp	ip, r3
 801e99e:	d8f9      	bhi.n	801e994 <__lshift+0xc0>
 801e9a0:	e7ea      	b.n	801e978 <__lshift+0xa4>
 801e9a2:	bf00      	nop
 801e9a4:	08021a85 	.word	0x08021a85
 801e9a8:	08021a96 	.word	0x08021a96

0801e9ac <__mcmp>:
 801e9ac:	b530      	push	{r4, r5, lr}
 801e9ae:	6902      	ldr	r2, [r0, #16]
 801e9b0:	690c      	ldr	r4, [r1, #16]
 801e9b2:	1b12      	subs	r2, r2, r4
 801e9b4:	d10e      	bne.n	801e9d4 <__mcmp+0x28>
 801e9b6:	f100 0314 	add.w	r3, r0, #20
 801e9ba:	3114      	adds	r1, #20
 801e9bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e9c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e9c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e9c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e9cc:	42a5      	cmp	r5, r4
 801e9ce:	d003      	beq.n	801e9d8 <__mcmp+0x2c>
 801e9d0:	d305      	bcc.n	801e9de <__mcmp+0x32>
 801e9d2:	2201      	movs	r2, #1
 801e9d4:	4610      	mov	r0, r2
 801e9d6:	bd30      	pop	{r4, r5, pc}
 801e9d8:	4283      	cmp	r3, r0
 801e9da:	d3f3      	bcc.n	801e9c4 <__mcmp+0x18>
 801e9dc:	e7fa      	b.n	801e9d4 <__mcmp+0x28>
 801e9de:	f04f 32ff 	mov.w	r2, #4294967295
 801e9e2:	e7f7      	b.n	801e9d4 <__mcmp+0x28>

0801e9e4 <__mdiff>:
 801e9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e8:	460c      	mov	r4, r1
 801e9ea:	4606      	mov	r6, r0
 801e9ec:	4611      	mov	r1, r2
 801e9ee:	4620      	mov	r0, r4
 801e9f0:	4690      	mov	r8, r2
 801e9f2:	f7ff ffdb 	bl	801e9ac <__mcmp>
 801e9f6:	1e05      	subs	r5, r0, #0
 801e9f8:	d110      	bne.n	801ea1c <__mdiff+0x38>
 801e9fa:	4629      	mov	r1, r5
 801e9fc:	4630      	mov	r0, r6
 801e9fe:	f7ff fd59 	bl	801e4b4 <_Balloc>
 801ea02:	b930      	cbnz	r0, 801ea12 <__mdiff+0x2e>
 801ea04:	4b3a      	ldr	r3, [pc, #232]	; (801eaf0 <__mdiff+0x10c>)
 801ea06:	4602      	mov	r2, r0
 801ea08:	f240 2137 	movw	r1, #567	; 0x237
 801ea0c:	4839      	ldr	r0, [pc, #228]	; (801eaf4 <__mdiff+0x110>)
 801ea0e:	f7fd ff25 	bl	801c85c <__assert_func>
 801ea12:	2301      	movs	r3, #1
 801ea14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ea18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea1c:	bfa4      	itt	ge
 801ea1e:	4643      	movge	r3, r8
 801ea20:	46a0      	movge	r8, r4
 801ea22:	4630      	mov	r0, r6
 801ea24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ea28:	bfa6      	itte	ge
 801ea2a:	461c      	movge	r4, r3
 801ea2c:	2500      	movge	r5, #0
 801ea2e:	2501      	movlt	r5, #1
 801ea30:	f7ff fd40 	bl	801e4b4 <_Balloc>
 801ea34:	b920      	cbnz	r0, 801ea40 <__mdiff+0x5c>
 801ea36:	4b2e      	ldr	r3, [pc, #184]	; (801eaf0 <__mdiff+0x10c>)
 801ea38:	4602      	mov	r2, r0
 801ea3a:	f240 2145 	movw	r1, #581	; 0x245
 801ea3e:	e7e5      	b.n	801ea0c <__mdiff+0x28>
 801ea40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ea44:	6926      	ldr	r6, [r4, #16]
 801ea46:	60c5      	str	r5, [r0, #12]
 801ea48:	f104 0914 	add.w	r9, r4, #20
 801ea4c:	f108 0514 	add.w	r5, r8, #20
 801ea50:	f100 0e14 	add.w	lr, r0, #20
 801ea54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ea58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ea5c:	f108 0210 	add.w	r2, r8, #16
 801ea60:	46f2      	mov	sl, lr
 801ea62:	2100      	movs	r1, #0
 801ea64:	f859 3b04 	ldr.w	r3, [r9], #4
 801ea68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ea6c:	fa11 f88b 	uxtah	r8, r1, fp
 801ea70:	b299      	uxth	r1, r3
 801ea72:	0c1b      	lsrs	r3, r3, #16
 801ea74:	eba8 0801 	sub.w	r8, r8, r1
 801ea78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ea7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ea80:	fa1f f888 	uxth.w	r8, r8
 801ea84:	1419      	asrs	r1, r3, #16
 801ea86:	454e      	cmp	r6, r9
 801ea88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ea8c:	f84a 3b04 	str.w	r3, [sl], #4
 801ea90:	d8e8      	bhi.n	801ea64 <__mdiff+0x80>
 801ea92:	1b33      	subs	r3, r6, r4
 801ea94:	3b15      	subs	r3, #21
 801ea96:	f023 0303 	bic.w	r3, r3, #3
 801ea9a:	3304      	adds	r3, #4
 801ea9c:	3415      	adds	r4, #21
 801ea9e:	42a6      	cmp	r6, r4
 801eaa0:	bf38      	it	cc
 801eaa2:	2304      	movcc	r3, #4
 801eaa4:	441d      	add	r5, r3
 801eaa6:	4473      	add	r3, lr
 801eaa8:	469e      	mov	lr, r3
 801eaaa:	462e      	mov	r6, r5
 801eaac:	4566      	cmp	r6, ip
 801eaae:	d30e      	bcc.n	801eace <__mdiff+0xea>
 801eab0:	f10c 0203 	add.w	r2, ip, #3
 801eab4:	1b52      	subs	r2, r2, r5
 801eab6:	f022 0203 	bic.w	r2, r2, #3
 801eaba:	3d03      	subs	r5, #3
 801eabc:	45ac      	cmp	ip, r5
 801eabe:	bf38      	it	cc
 801eac0:	2200      	movcc	r2, #0
 801eac2:	4413      	add	r3, r2
 801eac4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801eac8:	b17a      	cbz	r2, 801eaea <__mdiff+0x106>
 801eaca:	6107      	str	r7, [r0, #16]
 801eacc:	e7a4      	b.n	801ea18 <__mdiff+0x34>
 801eace:	f856 8b04 	ldr.w	r8, [r6], #4
 801ead2:	fa11 f288 	uxtah	r2, r1, r8
 801ead6:	1414      	asrs	r4, r2, #16
 801ead8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801eadc:	b292      	uxth	r2, r2
 801eade:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801eae2:	f84e 2b04 	str.w	r2, [lr], #4
 801eae6:	1421      	asrs	r1, r4, #16
 801eae8:	e7e0      	b.n	801eaac <__mdiff+0xc8>
 801eaea:	3f01      	subs	r7, #1
 801eaec:	e7ea      	b.n	801eac4 <__mdiff+0xe0>
 801eaee:	bf00      	nop
 801eaf0:	08021a85 	.word	0x08021a85
 801eaf4:	08021a96 	.word	0x08021a96

0801eaf8 <__d2b>:
 801eaf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eafc:	460f      	mov	r7, r1
 801eafe:	2101      	movs	r1, #1
 801eb00:	ec59 8b10 	vmov	r8, r9, d0
 801eb04:	4616      	mov	r6, r2
 801eb06:	f7ff fcd5 	bl	801e4b4 <_Balloc>
 801eb0a:	4604      	mov	r4, r0
 801eb0c:	b930      	cbnz	r0, 801eb1c <__d2b+0x24>
 801eb0e:	4602      	mov	r2, r0
 801eb10:	4b24      	ldr	r3, [pc, #144]	; (801eba4 <__d2b+0xac>)
 801eb12:	4825      	ldr	r0, [pc, #148]	; (801eba8 <__d2b+0xb0>)
 801eb14:	f240 310f 	movw	r1, #783	; 0x30f
 801eb18:	f7fd fea0 	bl	801c85c <__assert_func>
 801eb1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801eb20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eb24:	bb2d      	cbnz	r5, 801eb72 <__d2b+0x7a>
 801eb26:	9301      	str	r3, [sp, #4]
 801eb28:	f1b8 0300 	subs.w	r3, r8, #0
 801eb2c:	d026      	beq.n	801eb7c <__d2b+0x84>
 801eb2e:	4668      	mov	r0, sp
 801eb30:	9300      	str	r3, [sp, #0]
 801eb32:	f7ff fd87 	bl	801e644 <__lo0bits>
 801eb36:	e9dd 1200 	ldrd	r1, r2, [sp]
 801eb3a:	b1e8      	cbz	r0, 801eb78 <__d2b+0x80>
 801eb3c:	f1c0 0320 	rsb	r3, r0, #32
 801eb40:	fa02 f303 	lsl.w	r3, r2, r3
 801eb44:	430b      	orrs	r3, r1
 801eb46:	40c2      	lsrs	r2, r0
 801eb48:	6163      	str	r3, [r4, #20]
 801eb4a:	9201      	str	r2, [sp, #4]
 801eb4c:	9b01      	ldr	r3, [sp, #4]
 801eb4e:	61a3      	str	r3, [r4, #24]
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	bf14      	ite	ne
 801eb54:	2202      	movne	r2, #2
 801eb56:	2201      	moveq	r2, #1
 801eb58:	6122      	str	r2, [r4, #16]
 801eb5a:	b1bd      	cbz	r5, 801eb8c <__d2b+0x94>
 801eb5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801eb60:	4405      	add	r5, r0
 801eb62:	603d      	str	r5, [r7, #0]
 801eb64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801eb68:	6030      	str	r0, [r6, #0]
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	b003      	add	sp, #12
 801eb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801eb76:	e7d6      	b.n	801eb26 <__d2b+0x2e>
 801eb78:	6161      	str	r1, [r4, #20]
 801eb7a:	e7e7      	b.n	801eb4c <__d2b+0x54>
 801eb7c:	a801      	add	r0, sp, #4
 801eb7e:	f7ff fd61 	bl	801e644 <__lo0bits>
 801eb82:	9b01      	ldr	r3, [sp, #4]
 801eb84:	6163      	str	r3, [r4, #20]
 801eb86:	3020      	adds	r0, #32
 801eb88:	2201      	movs	r2, #1
 801eb8a:	e7e5      	b.n	801eb58 <__d2b+0x60>
 801eb8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801eb90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801eb94:	6038      	str	r0, [r7, #0]
 801eb96:	6918      	ldr	r0, [r3, #16]
 801eb98:	f7ff fd34 	bl	801e604 <__hi0bits>
 801eb9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801eba0:	e7e2      	b.n	801eb68 <__d2b+0x70>
 801eba2:	bf00      	nop
 801eba4:	08021a85 	.word	0x08021a85
 801eba8:	08021a96 	.word	0x08021a96

0801ebac <__sfputc_r>:
 801ebac:	6893      	ldr	r3, [r2, #8]
 801ebae:	3b01      	subs	r3, #1
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	b410      	push	{r4}
 801ebb4:	6093      	str	r3, [r2, #8]
 801ebb6:	da08      	bge.n	801ebca <__sfputc_r+0x1e>
 801ebb8:	6994      	ldr	r4, [r2, #24]
 801ebba:	42a3      	cmp	r3, r4
 801ebbc:	db01      	blt.n	801ebc2 <__sfputc_r+0x16>
 801ebbe:	290a      	cmp	r1, #10
 801ebc0:	d103      	bne.n	801ebca <__sfputc_r+0x1e>
 801ebc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ebc6:	f7fe bbd2 	b.w	801d36e <__swbuf_r>
 801ebca:	6813      	ldr	r3, [r2, #0]
 801ebcc:	1c58      	adds	r0, r3, #1
 801ebce:	6010      	str	r0, [r2, #0]
 801ebd0:	7019      	strb	r1, [r3, #0]
 801ebd2:	4608      	mov	r0, r1
 801ebd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ebd8:	4770      	bx	lr

0801ebda <__sfputs_r>:
 801ebda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebdc:	4606      	mov	r6, r0
 801ebde:	460f      	mov	r7, r1
 801ebe0:	4614      	mov	r4, r2
 801ebe2:	18d5      	adds	r5, r2, r3
 801ebe4:	42ac      	cmp	r4, r5
 801ebe6:	d101      	bne.n	801ebec <__sfputs_r+0x12>
 801ebe8:	2000      	movs	r0, #0
 801ebea:	e007      	b.n	801ebfc <__sfputs_r+0x22>
 801ebec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebf0:	463a      	mov	r2, r7
 801ebf2:	4630      	mov	r0, r6
 801ebf4:	f7ff ffda 	bl	801ebac <__sfputc_r>
 801ebf8:	1c43      	adds	r3, r0, #1
 801ebfa:	d1f3      	bne.n	801ebe4 <__sfputs_r+0xa>
 801ebfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ec00 <_vfiprintf_r>:
 801ec00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec04:	460d      	mov	r5, r1
 801ec06:	b09d      	sub	sp, #116	; 0x74
 801ec08:	4614      	mov	r4, r2
 801ec0a:	4698      	mov	r8, r3
 801ec0c:	4606      	mov	r6, r0
 801ec0e:	b118      	cbz	r0, 801ec18 <_vfiprintf_r+0x18>
 801ec10:	6a03      	ldr	r3, [r0, #32]
 801ec12:	b90b      	cbnz	r3, 801ec18 <_vfiprintf_r+0x18>
 801ec14:	f7fe fb20 	bl	801d258 <__sinit>
 801ec18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ec1a:	07d9      	lsls	r1, r3, #31
 801ec1c:	d405      	bmi.n	801ec2a <_vfiprintf_r+0x2a>
 801ec1e:	89ab      	ldrh	r3, [r5, #12]
 801ec20:	059a      	lsls	r2, r3, #22
 801ec22:	d402      	bmi.n	801ec2a <_vfiprintf_r+0x2a>
 801ec24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ec26:	f7fe fcb3 	bl	801d590 <__retarget_lock_acquire_recursive>
 801ec2a:	89ab      	ldrh	r3, [r5, #12]
 801ec2c:	071b      	lsls	r3, r3, #28
 801ec2e:	d501      	bpl.n	801ec34 <_vfiprintf_r+0x34>
 801ec30:	692b      	ldr	r3, [r5, #16]
 801ec32:	b99b      	cbnz	r3, 801ec5c <_vfiprintf_r+0x5c>
 801ec34:	4629      	mov	r1, r5
 801ec36:	4630      	mov	r0, r6
 801ec38:	f7fe fbd6 	bl	801d3e8 <__swsetup_r>
 801ec3c:	b170      	cbz	r0, 801ec5c <_vfiprintf_r+0x5c>
 801ec3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ec40:	07dc      	lsls	r4, r3, #31
 801ec42:	d504      	bpl.n	801ec4e <_vfiprintf_r+0x4e>
 801ec44:	f04f 30ff 	mov.w	r0, #4294967295
 801ec48:	b01d      	add	sp, #116	; 0x74
 801ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec4e:	89ab      	ldrh	r3, [r5, #12]
 801ec50:	0598      	lsls	r0, r3, #22
 801ec52:	d4f7      	bmi.n	801ec44 <_vfiprintf_r+0x44>
 801ec54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ec56:	f7fe fc9c 	bl	801d592 <__retarget_lock_release_recursive>
 801ec5a:	e7f3      	b.n	801ec44 <_vfiprintf_r+0x44>
 801ec5c:	2300      	movs	r3, #0
 801ec5e:	9309      	str	r3, [sp, #36]	; 0x24
 801ec60:	2320      	movs	r3, #32
 801ec62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ec66:	f8cd 800c 	str.w	r8, [sp, #12]
 801ec6a:	2330      	movs	r3, #48	; 0x30
 801ec6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ee20 <_vfiprintf_r+0x220>
 801ec70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ec74:	f04f 0901 	mov.w	r9, #1
 801ec78:	4623      	mov	r3, r4
 801ec7a:	469a      	mov	sl, r3
 801ec7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec80:	b10a      	cbz	r2, 801ec86 <_vfiprintf_r+0x86>
 801ec82:	2a25      	cmp	r2, #37	; 0x25
 801ec84:	d1f9      	bne.n	801ec7a <_vfiprintf_r+0x7a>
 801ec86:	ebba 0b04 	subs.w	fp, sl, r4
 801ec8a:	d00b      	beq.n	801eca4 <_vfiprintf_r+0xa4>
 801ec8c:	465b      	mov	r3, fp
 801ec8e:	4622      	mov	r2, r4
 801ec90:	4629      	mov	r1, r5
 801ec92:	4630      	mov	r0, r6
 801ec94:	f7ff ffa1 	bl	801ebda <__sfputs_r>
 801ec98:	3001      	adds	r0, #1
 801ec9a:	f000 80a9 	beq.w	801edf0 <_vfiprintf_r+0x1f0>
 801ec9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eca0:	445a      	add	r2, fp
 801eca2:	9209      	str	r2, [sp, #36]	; 0x24
 801eca4:	f89a 3000 	ldrb.w	r3, [sl]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	f000 80a1 	beq.w	801edf0 <_vfiprintf_r+0x1f0>
 801ecae:	2300      	movs	r3, #0
 801ecb0:	f04f 32ff 	mov.w	r2, #4294967295
 801ecb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ecb8:	f10a 0a01 	add.w	sl, sl, #1
 801ecbc:	9304      	str	r3, [sp, #16]
 801ecbe:	9307      	str	r3, [sp, #28]
 801ecc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ecc4:	931a      	str	r3, [sp, #104]	; 0x68
 801ecc6:	4654      	mov	r4, sl
 801ecc8:	2205      	movs	r2, #5
 801ecca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecce:	4854      	ldr	r0, [pc, #336]	; (801ee20 <_vfiprintf_r+0x220>)
 801ecd0:	f7e1 faa6 	bl	8000220 <memchr>
 801ecd4:	9a04      	ldr	r2, [sp, #16]
 801ecd6:	b9d8      	cbnz	r0, 801ed10 <_vfiprintf_r+0x110>
 801ecd8:	06d1      	lsls	r1, r2, #27
 801ecda:	bf44      	itt	mi
 801ecdc:	2320      	movmi	r3, #32
 801ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ece2:	0713      	lsls	r3, r2, #28
 801ece4:	bf44      	itt	mi
 801ece6:	232b      	movmi	r3, #43	; 0x2b
 801ece8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ecec:	f89a 3000 	ldrb.w	r3, [sl]
 801ecf0:	2b2a      	cmp	r3, #42	; 0x2a
 801ecf2:	d015      	beq.n	801ed20 <_vfiprintf_r+0x120>
 801ecf4:	9a07      	ldr	r2, [sp, #28]
 801ecf6:	4654      	mov	r4, sl
 801ecf8:	2000      	movs	r0, #0
 801ecfa:	f04f 0c0a 	mov.w	ip, #10
 801ecfe:	4621      	mov	r1, r4
 801ed00:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ed04:	3b30      	subs	r3, #48	; 0x30
 801ed06:	2b09      	cmp	r3, #9
 801ed08:	d94d      	bls.n	801eda6 <_vfiprintf_r+0x1a6>
 801ed0a:	b1b0      	cbz	r0, 801ed3a <_vfiprintf_r+0x13a>
 801ed0c:	9207      	str	r2, [sp, #28]
 801ed0e:	e014      	b.n	801ed3a <_vfiprintf_r+0x13a>
 801ed10:	eba0 0308 	sub.w	r3, r0, r8
 801ed14:	fa09 f303 	lsl.w	r3, r9, r3
 801ed18:	4313      	orrs	r3, r2
 801ed1a:	9304      	str	r3, [sp, #16]
 801ed1c:	46a2      	mov	sl, r4
 801ed1e:	e7d2      	b.n	801ecc6 <_vfiprintf_r+0xc6>
 801ed20:	9b03      	ldr	r3, [sp, #12]
 801ed22:	1d19      	adds	r1, r3, #4
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	9103      	str	r1, [sp, #12]
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	bfbb      	ittet	lt
 801ed2c:	425b      	neglt	r3, r3
 801ed2e:	f042 0202 	orrlt.w	r2, r2, #2
 801ed32:	9307      	strge	r3, [sp, #28]
 801ed34:	9307      	strlt	r3, [sp, #28]
 801ed36:	bfb8      	it	lt
 801ed38:	9204      	strlt	r2, [sp, #16]
 801ed3a:	7823      	ldrb	r3, [r4, #0]
 801ed3c:	2b2e      	cmp	r3, #46	; 0x2e
 801ed3e:	d10c      	bne.n	801ed5a <_vfiprintf_r+0x15a>
 801ed40:	7863      	ldrb	r3, [r4, #1]
 801ed42:	2b2a      	cmp	r3, #42	; 0x2a
 801ed44:	d134      	bne.n	801edb0 <_vfiprintf_r+0x1b0>
 801ed46:	9b03      	ldr	r3, [sp, #12]
 801ed48:	1d1a      	adds	r2, r3, #4
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	9203      	str	r2, [sp, #12]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	bfb8      	it	lt
 801ed52:	f04f 33ff 	movlt.w	r3, #4294967295
 801ed56:	3402      	adds	r4, #2
 801ed58:	9305      	str	r3, [sp, #20]
 801ed5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ee30 <_vfiprintf_r+0x230>
 801ed5e:	7821      	ldrb	r1, [r4, #0]
 801ed60:	2203      	movs	r2, #3
 801ed62:	4650      	mov	r0, sl
 801ed64:	f7e1 fa5c 	bl	8000220 <memchr>
 801ed68:	b138      	cbz	r0, 801ed7a <_vfiprintf_r+0x17a>
 801ed6a:	9b04      	ldr	r3, [sp, #16]
 801ed6c:	eba0 000a 	sub.w	r0, r0, sl
 801ed70:	2240      	movs	r2, #64	; 0x40
 801ed72:	4082      	lsls	r2, r0
 801ed74:	4313      	orrs	r3, r2
 801ed76:	3401      	adds	r4, #1
 801ed78:	9304      	str	r3, [sp, #16]
 801ed7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed7e:	4829      	ldr	r0, [pc, #164]	; (801ee24 <_vfiprintf_r+0x224>)
 801ed80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ed84:	2206      	movs	r2, #6
 801ed86:	f7e1 fa4b 	bl	8000220 <memchr>
 801ed8a:	2800      	cmp	r0, #0
 801ed8c:	d03f      	beq.n	801ee0e <_vfiprintf_r+0x20e>
 801ed8e:	4b26      	ldr	r3, [pc, #152]	; (801ee28 <_vfiprintf_r+0x228>)
 801ed90:	bb1b      	cbnz	r3, 801edda <_vfiprintf_r+0x1da>
 801ed92:	9b03      	ldr	r3, [sp, #12]
 801ed94:	3307      	adds	r3, #7
 801ed96:	f023 0307 	bic.w	r3, r3, #7
 801ed9a:	3308      	adds	r3, #8
 801ed9c:	9303      	str	r3, [sp, #12]
 801ed9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eda0:	443b      	add	r3, r7
 801eda2:	9309      	str	r3, [sp, #36]	; 0x24
 801eda4:	e768      	b.n	801ec78 <_vfiprintf_r+0x78>
 801eda6:	fb0c 3202 	mla	r2, ip, r2, r3
 801edaa:	460c      	mov	r4, r1
 801edac:	2001      	movs	r0, #1
 801edae:	e7a6      	b.n	801ecfe <_vfiprintf_r+0xfe>
 801edb0:	2300      	movs	r3, #0
 801edb2:	3401      	adds	r4, #1
 801edb4:	9305      	str	r3, [sp, #20]
 801edb6:	4619      	mov	r1, r3
 801edb8:	f04f 0c0a 	mov.w	ip, #10
 801edbc:	4620      	mov	r0, r4
 801edbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801edc2:	3a30      	subs	r2, #48	; 0x30
 801edc4:	2a09      	cmp	r2, #9
 801edc6:	d903      	bls.n	801edd0 <_vfiprintf_r+0x1d0>
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d0c6      	beq.n	801ed5a <_vfiprintf_r+0x15a>
 801edcc:	9105      	str	r1, [sp, #20]
 801edce:	e7c4      	b.n	801ed5a <_vfiprintf_r+0x15a>
 801edd0:	fb0c 2101 	mla	r1, ip, r1, r2
 801edd4:	4604      	mov	r4, r0
 801edd6:	2301      	movs	r3, #1
 801edd8:	e7f0      	b.n	801edbc <_vfiprintf_r+0x1bc>
 801edda:	ab03      	add	r3, sp, #12
 801eddc:	9300      	str	r3, [sp, #0]
 801edde:	462a      	mov	r2, r5
 801ede0:	4b12      	ldr	r3, [pc, #72]	; (801ee2c <_vfiprintf_r+0x22c>)
 801ede2:	a904      	add	r1, sp, #16
 801ede4:	4630      	mov	r0, r6
 801ede6:	f7fd fdf7 	bl	801c9d8 <_printf_float>
 801edea:	4607      	mov	r7, r0
 801edec:	1c78      	adds	r0, r7, #1
 801edee:	d1d6      	bne.n	801ed9e <_vfiprintf_r+0x19e>
 801edf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801edf2:	07d9      	lsls	r1, r3, #31
 801edf4:	d405      	bmi.n	801ee02 <_vfiprintf_r+0x202>
 801edf6:	89ab      	ldrh	r3, [r5, #12]
 801edf8:	059a      	lsls	r2, r3, #22
 801edfa:	d402      	bmi.n	801ee02 <_vfiprintf_r+0x202>
 801edfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801edfe:	f7fe fbc8 	bl	801d592 <__retarget_lock_release_recursive>
 801ee02:	89ab      	ldrh	r3, [r5, #12]
 801ee04:	065b      	lsls	r3, r3, #25
 801ee06:	f53f af1d 	bmi.w	801ec44 <_vfiprintf_r+0x44>
 801ee0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ee0c:	e71c      	b.n	801ec48 <_vfiprintf_r+0x48>
 801ee0e:	ab03      	add	r3, sp, #12
 801ee10:	9300      	str	r3, [sp, #0]
 801ee12:	462a      	mov	r2, r5
 801ee14:	4b05      	ldr	r3, [pc, #20]	; (801ee2c <_vfiprintf_r+0x22c>)
 801ee16:	a904      	add	r1, sp, #16
 801ee18:	4630      	mov	r0, r6
 801ee1a:	f7fe f881 	bl	801cf20 <_printf_i>
 801ee1e:	e7e4      	b.n	801edea <_vfiprintf_r+0x1ea>
 801ee20:	08021bec 	.word	0x08021bec
 801ee24:	08021bf6 	.word	0x08021bf6
 801ee28:	0801c9d9 	.word	0x0801c9d9
 801ee2c:	0801ebdb 	.word	0x0801ebdb
 801ee30:	08021bf2 	.word	0x08021bf2

0801ee34 <__sflush_r>:
 801ee34:	898a      	ldrh	r2, [r1, #12]
 801ee36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee3a:	4605      	mov	r5, r0
 801ee3c:	0710      	lsls	r0, r2, #28
 801ee3e:	460c      	mov	r4, r1
 801ee40:	d458      	bmi.n	801eef4 <__sflush_r+0xc0>
 801ee42:	684b      	ldr	r3, [r1, #4]
 801ee44:	2b00      	cmp	r3, #0
 801ee46:	dc05      	bgt.n	801ee54 <__sflush_r+0x20>
 801ee48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	dc02      	bgt.n	801ee54 <__sflush_r+0x20>
 801ee4e:	2000      	movs	r0, #0
 801ee50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ee56:	2e00      	cmp	r6, #0
 801ee58:	d0f9      	beq.n	801ee4e <__sflush_r+0x1a>
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ee60:	682f      	ldr	r7, [r5, #0]
 801ee62:	6a21      	ldr	r1, [r4, #32]
 801ee64:	602b      	str	r3, [r5, #0]
 801ee66:	d032      	beq.n	801eece <__sflush_r+0x9a>
 801ee68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ee6a:	89a3      	ldrh	r3, [r4, #12]
 801ee6c:	075a      	lsls	r2, r3, #29
 801ee6e:	d505      	bpl.n	801ee7c <__sflush_r+0x48>
 801ee70:	6863      	ldr	r3, [r4, #4]
 801ee72:	1ac0      	subs	r0, r0, r3
 801ee74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ee76:	b10b      	cbz	r3, 801ee7c <__sflush_r+0x48>
 801ee78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ee7a:	1ac0      	subs	r0, r0, r3
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	4602      	mov	r2, r0
 801ee80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ee82:	6a21      	ldr	r1, [r4, #32]
 801ee84:	4628      	mov	r0, r5
 801ee86:	47b0      	blx	r6
 801ee88:	1c43      	adds	r3, r0, #1
 801ee8a:	89a3      	ldrh	r3, [r4, #12]
 801ee8c:	d106      	bne.n	801ee9c <__sflush_r+0x68>
 801ee8e:	6829      	ldr	r1, [r5, #0]
 801ee90:	291d      	cmp	r1, #29
 801ee92:	d82b      	bhi.n	801eeec <__sflush_r+0xb8>
 801ee94:	4a29      	ldr	r2, [pc, #164]	; (801ef3c <__sflush_r+0x108>)
 801ee96:	410a      	asrs	r2, r1
 801ee98:	07d6      	lsls	r6, r2, #31
 801ee9a:	d427      	bmi.n	801eeec <__sflush_r+0xb8>
 801ee9c:	2200      	movs	r2, #0
 801ee9e:	6062      	str	r2, [r4, #4]
 801eea0:	04d9      	lsls	r1, r3, #19
 801eea2:	6922      	ldr	r2, [r4, #16]
 801eea4:	6022      	str	r2, [r4, #0]
 801eea6:	d504      	bpl.n	801eeb2 <__sflush_r+0x7e>
 801eea8:	1c42      	adds	r2, r0, #1
 801eeaa:	d101      	bne.n	801eeb0 <__sflush_r+0x7c>
 801eeac:	682b      	ldr	r3, [r5, #0]
 801eeae:	b903      	cbnz	r3, 801eeb2 <__sflush_r+0x7e>
 801eeb0:	6560      	str	r0, [r4, #84]	; 0x54
 801eeb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eeb4:	602f      	str	r7, [r5, #0]
 801eeb6:	2900      	cmp	r1, #0
 801eeb8:	d0c9      	beq.n	801ee4e <__sflush_r+0x1a>
 801eeba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eebe:	4299      	cmp	r1, r3
 801eec0:	d002      	beq.n	801eec8 <__sflush_r+0x94>
 801eec2:	4628      	mov	r0, r5
 801eec4:	f7ff f9f6 	bl	801e2b4 <_free_r>
 801eec8:	2000      	movs	r0, #0
 801eeca:	6360      	str	r0, [r4, #52]	; 0x34
 801eecc:	e7c0      	b.n	801ee50 <__sflush_r+0x1c>
 801eece:	2301      	movs	r3, #1
 801eed0:	4628      	mov	r0, r5
 801eed2:	47b0      	blx	r6
 801eed4:	1c41      	adds	r1, r0, #1
 801eed6:	d1c8      	bne.n	801ee6a <__sflush_r+0x36>
 801eed8:	682b      	ldr	r3, [r5, #0]
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d0c5      	beq.n	801ee6a <__sflush_r+0x36>
 801eede:	2b1d      	cmp	r3, #29
 801eee0:	d001      	beq.n	801eee6 <__sflush_r+0xb2>
 801eee2:	2b16      	cmp	r3, #22
 801eee4:	d101      	bne.n	801eeea <__sflush_r+0xb6>
 801eee6:	602f      	str	r7, [r5, #0]
 801eee8:	e7b1      	b.n	801ee4e <__sflush_r+0x1a>
 801eeea:	89a3      	ldrh	r3, [r4, #12]
 801eeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eef0:	81a3      	strh	r3, [r4, #12]
 801eef2:	e7ad      	b.n	801ee50 <__sflush_r+0x1c>
 801eef4:	690f      	ldr	r7, [r1, #16]
 801eef6:	2f00      	cmp	r7, #0
 801eef8:	d0a9      	beq.n	801ee4e <__sflush_r+0x1a>
 801eefa:	0793      	lsls	r3, r2, #30
 801eefc:	680e      	ldr	r6, [r1, #0]
 801eefe:	bf08      	it	eq
 801ef00:	694b      	ldreq	r3, [r1, #20]
 801ef02:	600f      	str	r7, [r1, #0]
 801ef04:	bf18      	it	ne
 801ef06:	2300      	movne	r3, #0
 801ef08:	eba6 0807 	sub.w	r8, r6, r7
 801ef0c:	608b      	str	r3, [r1, #8]
 801ef0e:	f1b8 0f00 	cmp.w	r8, #0
 801ef12:	dd9c      	ble.n	801ee4e <__sflush_r+0x1a>
 801ef14:	6a21      	ldr	r1, [r4, #32]
 801ef16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ef18:	4643      	mov	r3, r8
 801ef1a:	463a      	mov	r2, r7
 801ef1c:	4628      	mov	r0, r5
 801ef1e:	47b0      	blx	r6
 801ef20:	2800      	cmp	r0, #0
 801ef22:	dc06      	bgt.n	801ef32 <__sflush_r+0xfe>
 801ef24:	89a3      	ldrh	r3, [r4, #12]
 801ef26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef2a:	81a3      	strh	r3, [r4, #12]
 801ef2c:	f04f 30ff 	mov.w	r0, #4294967295
 801ef30:	e78e      	b.n	801ee50 <__sflush_r+0x1c>
 801ef32:	4407      	add	r7, r0
 801ef34:	eba8 0800 	sub.w	r8, r8, r0
 801ef38:	e7e9      	b.n	801ef0e <__sflush_r+0xda>
 801ef3a:	bf00      	nop
 801ef3c:	dfbffffe 	.word	0xdfbffffe

0801ef40 <_fflush_r>:
 801ef40:	b538      	push	{r3, r4, r5, lr}
 801ef42:	690b      	ldr	r3, [r1, #16]
 801ef44:	4605      	mov	r5, r0
 801ef46:	460c      	mov	r4, r1
 801ef48:	b913      	cbnz	r3, 801ef50 <_fflush_r+0x10>
 801ef4a:	2500      	movs	r5, #0
 801ef4c:	4628      	mov	r0, r5
 801ef4e:	bd38      	pop	{r3, r4, r5, pc}
 801ef50:	b118      	cbz	r0, 801ef5a <_fflush_r+0x1a>
 801ef52:	6a03      	ldr	r3, [r0, #32]
 801ef54:	b90b      	cbnz	r3, 801ef5a <_fflush_r+0x1a>
 801ef56:	f7fe f97f 	bl	801d258 <__sinit>
 801ef5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d0f3      	beq.n	801ef4a <_fflush_r+0xa>
 801ef62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ef64:	07d0      	lsls	r0, r2, #31
 801ef66:	d404      	bmi.n	801ef72 <_fflush_r+0x32>
 801ef68:	0599      	lsls	r1, r3, #22
 801ef6a:	d402      	bmi.n	801ef72 <_fflush_r+0x32>
 801ef6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef6e:	f7fe fb0f 	bl	801d590 <__retarget_lock_acquire_recursive>
 801ef72:	4628      	mov	r0, r5
 801ef74:	4621      	mov	r1, r4
 801ef76:	f7ff ff5d 	bl	801ee34 <__sflush_r>
 801ef7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ef7c:	07da      	lsls	r2, r3, #31
 801ef7e:	4605      	mov	r5, r0
 801ef80:	d4e4      	bmi.n	801ef4c <_fflush_r+0xc>
 801ef82:	89a3      	ldrh	r3, [r4, #12]
 801ef84:	059b      	lsls	r3, r3, #22
 801ef86:	d4e1      	bmi.n	801ef4c <_fflush_r+0xc>
 801ef88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef8a:	f7fe fb02 	bl	801d592 <__retarget_lock_release_recursive>
 801ef8e:	e7dd      	b.n	801ef4c <_fflush_r+0xc>

0801ef90 <__swhatbuf_r>:
 801ef90:	b570      	push	{r4, r5, r6, lr}
 801ef92:	460c      	mov	r4, r1
 801ef94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef98:	2900      	cmp	r1, #0
 801ef9a:	b096      	sub	sp, #88	; 0x58
 801ef9c:	4615      	mov	r5, r2
 801ef9e:	461e      	mov	r6, r3
 801efa0:	da0d      	bge.n	801efbe <__swhatbuf_r+0x2e>
 801efa2:	89a3      	ldrh	r3, [r4, #12]
 801efa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801efa8:	f04f 0100 	mov.w	r1, #0
 801efac:	bf0c      	ite	eq
 801efae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801efb2:	2340      	movne	r3, #64	; 0x40
 801efb4:	2000      	movs	r0, #0
 801efb6:	6031      	str	r1, [r6, #0]
 801efb8:	602b      	str	r3, [r5, #0]
 801efba:	b016      	add	sp, #88	; 0x58
 801efbc:	bd70      	pop	{r4, r5, r6, pc}
 801efbe:	466a      	mov	r2, sp
 801efc0:	f000 f878 	bl	801f0b4 <_fstat_r>
 801efc4:	2800      	cmp	r0, #0
 801efc6:	dbec      	blt.n	801efa2 <__swhatbuf_r+0x12>
 801efc8:	9901      	ldr	r1, [sp, #4]
 801efca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801efce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801efd2:	4259      	negs	r1, r3
 801efd4:	4159      	adcs	r1, r3
 801efd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801efda:	e7eb      	b.n	801efb4 <__swhatbuf_r+0x24>

0801efdc <__smakebuf_r>:
 801efdc:	898b      	ldrh	r3, [r1, #12]
 801efde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801efe0:	079d      	lsls	r5, r3, #30
 801efe2:	4606      	mov	r6, r0
 801efe4:	460c      	mov	r4, r1
 801efe6:	d507      	bpl.n	801eff8 <__smakebuf_r+0x1c>
 801efe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801efec:	6023      	str	r3, [r4, #0]
 801efee:	6123      	str	r3, [r4, #16]
 801eff0:	2301      	movs	r3, #1
 801eff2:	6163      	str	r3, [r4, #20]
 801eff4:	b002      	add	sp, #8
 801eff6:	bd70      	pop	{r4, r5, r6, pc}
 801eff8:	ab01      	add	r3, sp, #4
 801effa:	466a      	mov	r2, sp
 801effc:	f7ff ffc8 	bl	801ef90 <__swhatbuf_r>
 801f000:	9900      	ldr	r1, [sp, #0]
 801f002:	4605      	mov	r5, r0
 801f004:	4630      	mov	r0, r6
 801f006:	f7ff f9c9 	bl	801e39c <_malloc_r>
 801f00a:	b948      	cbnz	r0, 801f020 <__smakebuf_r+0x44>
 801f00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f010:	059a      	lsls	r2, r3, #22
 801f012:	d4ef      	bmi.n	801eff4 <__smakebuf_r+0x18>
 801f014:	f023 0303 	bic.w	r3, r3, #3
 801f018:	f043 0302 	orr.w	r3, r3, #2
 801f01c:	81a3      	strh	r3, [r4, #12]
 801f01e:	e7e3      	b.n	801efe8 <__smakebuf_r+0xc>
 801f020:	89a3      	ldrh	r3, [r4, #12]
 801f022:	6020      	str	r0, [r4, #0]
 801f024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f028:	81a3      	strh	r3, [r4, #12]
 801f02a:	9b00      	ldr	r3, [sp, #0]
 801f02c:	6163      	str	r3, [r4, #20]
 801f02e:	9b01      	ldr	r3, [sp, #4]
 801f030:	6120      	str	r0, [r4, #16]
 801f032:	b15b      	cbz	r3, 801f04c <__smakebuf_r+0x70>
 801f034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f038:	4630      	mov	r0, r6
 801f03a:	f000 f84d 	bl	801f0d8 <_isatty_r>
 801f03e:	b128      	cbz	r0, 801f04c <__smakebuf_r+0x70>
 801f040:	89a3      	ldrh	r3, [r4, #12]
 801f042:	f023 0303 	bic.w	r3, r3, #3
 801f046:	f043 0301 	orr.w	r3, r3, #1
 801f04a:	81a3      	strh	r3, [r4, #12]
 801f04c:	89a3      	ldrh	r3, [r4, #12]
 801f04e:	431d      	orrs	r5, r3
 801f050:	81a5      	strh	r5, [r4, #12]
 801f052:	e7cf      	b.n	801eff4 <__smakebuf_r+0x18>

0801f054 <_raise_r>:
 801f054:	291f      	cmp	r1, #31
 801f056:	b538      	push	{r3, r4, r5, lr}
 801f058:	4604      	mov	r4, r0
 801f05a:	460d      	mov	r5, r1
 801f05c:	d904      	bls.n	801f068 <_raise_r+0x14>
 801f05e:	2316      	movs	r3, #22
 801f060:	6003      	str	r3, [r0, #0]
 801f062:	f04f 30ff 	mov.w	r0, #4294967295
 801f066:	bd38      	pop	{r3, r4, r5, pc}
 801f068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f06a:	b112      	cbz	r2, 801f072 <_raise_r+0x1e>
 801f06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f070:	b94b      	cbnz	r3, 801f086 <_raise_r+0x32>
 801f072:	4620      	mov	r0, r4
 801f074:	f000 f852 	bl	801f11c <_getpid_r>
 801f078:	462a      	mov	r2, r5
 801f07a:	4601      	mov	r1, r0
 801f07c:	4620      	mov	r0, r4
 801f07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f082:	f000 b839 	b.w	801f0f8 <_kill_r>
 801f086:	2b01      	cmp	r3, #1
 801f088:	d00a      	beq.n	801f0a0 <_raise_r+0x4c>
 801f08a:	1c59      	adds	r1, r3, #1
 801f08c:	d103      	bne.n	801f096 <_raise_r+0x42>
 801f08e:	2316      	movs	r3, #22
 801f090:	6003      	str	r3, [r0, #0]
 801f092:	2001      	movs	r0, #1
 801f094:	e7e7      	b.n	801f066 <_raise_r+0x12>
 801f096:	2400      	movs	r4, #0
 801f098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f09c:	4628      	mov	r0, r5
 801f09e:	4798      	blx	r3
 801f0a0:	2000      	movs	r0, #0
 801f0a2:	e7e0      	b.n	801f066 <_raise_r+0x12>

0801f0a4 <raise>:
 801f0a4:	4b02      	ldr	r3, [pc, #8]	; (801f0b0 <raise+0xc>)
 801f0a6:	4601      	mov	r1, r0
 801f0a8:	6818      	ldr	r0, [r3, #0]
 801f0aa:	f7ff bfd3 	b.w	801f054 <_raise_r>
 801f0ae:	bf00      	nop
 801f0b0:	2000006c 	.word	0x2000006c

0801f0b4 <_fstat_r>:
 801f0b4:	b538      	push	{r3, r4, r5, lr}
 801f0b6:	4d07      	ldr	r5, [pc, #28]	; (801f0d4 <_fstat_r+0x20>)
 801f0b8:	2300      	movs	r3, #0
 801f0ba:	4604      	mov	r4, r0
 801f0bc:	4608      	mov	r0, r1
 801f0be:	4611      	mov	r1, r2
 801f0c0:	602b      	str	r3, [r5, #0]
 801f0c2:	f7e5 fd3c 	bl	8004b3e <_fstat>
 801f0c6:	1c43      	adds	r3, r0, #1
 801f0c8:	d102      	bne.n	801f0d0 <_fstat_r+0x1c>
 801f0ca:	682b      	ldr	r3, [r5, #0]
 801f0cc:	b103      	cbz	r3, 801f0d0 <_fstat_r+0x1c>
 801f0ce:	6023      	str	r3, [r4, #0]
 801f0d0:	bd38      	pop	{r3, r4, r5, pc}
 801f0d2:	bf00      	nop
 801f0d4:	200168e8 	.word	0x200168e8

0801f0d8 <_isatty_r>:
 801f0d8:	b538      	push	{r3, r4, r5, lr}
 801f0da:	4d06      	ldr	r5, [pc, #24]	; (801f0f4 <_isatty_r+0x1c>)
 801f0dc:	2300      	movs	r3, #0
 801f0de:	4604      	mov	r4, r0
 801f0e0:	4608      	mov	r0, r1
 801f0e2:	602b      	str	r3, [r5, #0]
 801f0e4:	f7e5 fd3b 	bl	8004b5e <_isatty>
 801f0e8:	1c43      	adds	r3, r0, #1
 801f0ea:	d102      	bne.n	801f0f2 <_isatty_r+0x1a>
 801f0ec:	682b      	ldr	r3, [r5, #0]
 801f0ee:	b103      	cbz	r3, 801f0f2 <_isatty_r+0x1a>
 801f0f0:	6023      	str	r3, [r4, #0]
 801f0f2:	bd38      	pop	{r3, r4, r5, pc}
 801f0f4:	200168e8 	.word	0x200168e8

0801f0f8 <_kill_r>:
 801f0f8:	b538      	push	{r3, r4, r5, lr}
 801f0fa:	4d07      	ldr	r5, [pc, #28]	; (801f118 <_kill_r+0x20>)
 801f0fc:	2300      	movs	r3, #0
 801f0fe:	4604      	mov	r4, r0
 801f100:	4608      	mov	r0, r1
 801f102:	4611      	mov	r1, r2
 801f104:	602b      	str	r3, [r5, #0]
 801f106:	f7e5 fcd7 	bl	8004ab8 <_kill>
 801f10a:	1c43      	adds	r3, r0, #1
 801f10c:	d102      	bne.n	801f114 <_kill_r+0x1c>
 801f10e:	682b      	ldr	r3, [r5, #0]
 801f110:	b103      	cbz	r3, 801f114 <_kill_r+0x1c>
 801f112:	6023      	str	r3, [r4, #0]
 801f114:	bd38      	pop	{r3, r4, r5, pc}
 801f116:	bf00      	nop
 801f118:	200168e8 	.word	0x200168e8

0801f11c <_getpid_r>:
 801f11c:	f7e5 bcc4 	b.w	8004aa8 <_getpid>

0801f120 <_sbrk_r>:
 801f120:	b538      	push	{r3, r4, r5, lr}
 801f122:	4d06      	ldr	r5, [pc, #24]	; (801f13c <_sbrk_r+0x1c>)
 801f124:	2300      	movs	r3, #0
 801f126:	4604      	mov	r4, r0
 801f128:	4608      	mov	r0, r1
 801f12a:	602b      	str	r3, [r5, #0]
 801f12c:	f7e5 fd30 	bl	8004b90 <_sbrk>
 801f130:	1c43      	adds	r3, r0, #1
 801f132:	d102      	bne.n	801f13a <_sbrk_r+0x1a>
 801f134:	682b      	ldr	r3, [r5, #0]
 801f136:	b103      	cbz	r3, 801f13a <_sbrk_r+0x1a>
 801f138:	6023      	str	r3, [r4, #0]
 801f13a:	bd38      	pop	{r3, r4, r5, pc}
 801f13c:	200168e8 	.word	0x200168e8

0801f140 <_calloc_r>:
 801f140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f142:	fba1 2402 	umull	r2, r4, r1, r2
 801f146:	b94c      	cbnz	r4, 801f15c <_calloc_r+0x1c>
 801f148:	4611      	mov	r1, r2
 801f14a:	9201      	str	r2, [sp, #4]
 801f14c:	f7ff f926 	bl	801e39c <_malloc_r>
 801f150:	9a01      	ldr	r2, [sp, #4]
 801f152:	4605      	mov	r5, r0
 801f154:	b930      	cbnz	r0, 801f164 <_calloc_r+0x24>
 801f156:	4628      	mov	r0, r5
 801f158:	b003      	add	sp, #12
 801f15a:	bd30      	pop	{r4, r5, pc}
 801f15c:	220c      	movs	r2, #12
 801f15e:	6002      	str	r2, [r0, #0]
 801f160:	2500      	movs	r5, #0
 801f162:	e7f8      	b.n	801f156 <_calloc_r+0x16>
 801f164:	4621      	mov	r1, r4
 801f166:	f7fe f997 	bl	801d498 <memset>
 801f16a:	e7f4      	b.n	801f156 <_calloc_r+0x16>

0801f16c <__ascii_mbtowc>:
 801f16c:	b082      	sub	sp, #8
 801f16e:	b901      	cbnz	r1, 801f172 <__ascii_mbtowc+0x6>
 801f170:	a901      	add	r1, sp, #4
 801f172:	b142      	cbz	r2, 801f186 <__ascii_mbtowc+0x1a>
 801f174:	b14b      	cbz	r3, 801f18a <__ascii_mbtowc+0x1e>
 801f176:	7813      	ldrb	r3, [r2, #0]
 801f178:	600b      	str	r3, [r1, #0]
 801f17a:	7812      	ldrb	r2, [r2, #0]
 801f17c:	1e10      	subs	r0, r2, #0
 801f17e:	bf18      	it	ne
 801f180:	2001      	movne	r0, #1
 801f182:	b002      	add	sp, #8
 801f184:	4770      	bx	lr
 801f186:	4610      	mov	r0, r2
 801f188:	e7fb      	b.n	801f182 <__ascii_mbtowc+0x16>
 801f18a:	f06f 0001 	mvn.w	r0, #1
 801f18e:	e7f8      	b.n	801f182 <__ascii_mbtowc+0x16>

0801f190 <__ascii_wctomb>:
 801f190:	b149      	cbz	r1, 801f1a6 <__ascii_wctomb+0x16>
 801f192:	2aff      	cmp	r2, #255	; 0xff
 801f194:	bf85      	ittet	hi
 801f196:	238a      	movhi	r3, #138	; 0x8a
 801f198:	6003      	strhi	r3, [r0, #0]
 801f19a:	700a      	strbls	r2, [r1, #0]
 801f19c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f1a0:	bf98      	it	ls
 801f1a2:	2001      	movls	r0, #1
 801f1a4:	4770      	bx	lr
 801f1a6:	4608      	mov	r0, r1
 801f1a8:	4770      	bx	lr
	...

0801f1ac <sinf>:
 801f1ac:	ee10 3a10 	vmov	r3, s0
 801f1b0:	b507      	push	{r0, r1, r2, lr}
 801f1b2:	4a1f      	ldr	r2, [pc, #124]	; (801f230 <sinf+0x84>)
 801f1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f1b8:	4293      	cmp	r3, r2
 801f1ba:	dc07      	bgt.n	801f1cc <sinf+0x20>
 801f1bc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801f234 <sinf+0x88>
 801f1c0:	2000      	movs	r0, #0
 801f1c2:	b003      	add	sp, #12
 801f1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f1c8:	f000 b894 	b.w	801f2f4 <__kernel_sinf>
 801f1cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f1d0:	db04      	blt.n	801f1dc <sinf+0x30>
 801f1d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f1d6:	b003      	add	sp, #12
 801f1d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801f1dc:	4668      	mov	r0, sp
 801f1de:	f000 f8d1 	bl	801f384 <__ieee754_rem_pio2f>
 801f1e2:	f000 0003 	and.w	r0, r0, #3
 801f1e6:	2801      	cmp	r0, #1
 801f1e8:	d00a      	beq.n	801f200 <sinf+0x54>
 801f1ea:	2802      	cmp	r0, #2
 801f1ec:	d00f      	beq.n	801f20e <sinf+0x62>
 801f1ee:	b9c0      	cbnz	r0, 801f222 <sinf+0x76>
 801f1f0:	eddd 0a01 	vldr	s1, [sp, #4]
 801f1f4:	ed9d 0a00 	vldr	s0, [sp]
 801f1f8:	2001      	movs	r0, #1
 801f1fa:	f000 f87b 	bl	801f2f4 <__kernel_sinf>
 801f1fe:	e7ea      	b.n	801f1d6 <sinf+0x2a>
 801f200:	eddd 0a01 	vldr	s1, [sp, #4]
 801f204:	ed9d 0a00 	vldr	s0, [sp]
 801f208:	f000 f816 	bl	801f238 <__kernel_cosf>
 801f20c:	e7e3      	b.n	801f1d6 <sinf+0x2a>
 801f20e:	eddd 0a01 	vldr	s1, [sp, #4]
 801f212:	ed9d 0a00 	vldr	s0, [sp]
 801f216:	2001      	movs	r0, #1
 801f218:	f000 f86c 	bl	801f2f4 <__kernel_sinf>
 801f21c:	eeb1 0a40 	vneg.f32	s0, s0
 801f220:	e7d9      	b.n	801f1d6 <sinf+0x2a>
 801f222:	eddd 0a01 	vldr	s1, [sp, #4]
 801f226:	ed9d 0a00 	vldr	s0, [sp]
 801f22a:	f000 f805 	bl	801f238 <__kernel_cosf>
 801f22e:	e7f5      	b.n	801f21c <sinf+0x70>
 801f230:	3f490fd8 	.word	0x3f490fd8
 801f234:	00000000 	.word	0x00000000

0801f238 <__kernel_cosf>:
 801f238:	ee10 3a10 	vmov	r3, s0
 801f23c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f240:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f248:	da05      	bge.n	801f256 <__kernel_cosf+0x1e>
 801f24a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f24e:	ee17 2a90 	vmov	r2, s15
 801f252:	2a00      	cmp	r2, #0
 801f254:	d03b      	beq.n	801f2ce <__kernel_cosf+0x96>
 801f256:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f25a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f2d4 <__kernel_cosf+0x9c>
 801f25e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801f2d8 <__kernel_cosf+0xa0>
 801f262:	4a1e      	ldr	r2, [pc, #120]	; (801f2dc <__kernel_cosf+0xa4>)
 801f264:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f268:	4293      	cmp	r3, r2
 801f26a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801f2e0 <__kernel_cosf+0xa8>
 801f26e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f272:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801f2e4 <__kernel_cosf+0xac>
 801f276:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f27a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801f2e8 <__kernel_cosf+0xb0>
 801f27e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f282:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801f2ec <__kernel_cosf+0xb4>
 801f286:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f28a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801f28e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801f292:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f296:	eee7 0a06 	vfma.f32	s1, s14, s12
 801f29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f29e:	dc04      	bgt.n	801f2aa <__kernel_cosf+0x72>
 801f2a0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f2a4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801f2a8:	4770      	bx	lr
 801f2aa:	4a11      	ldr	r2, [pc, #68]	; (801f2f0 <__kernel_cosf+0xb8>)
 801f2ac:	4293      	cmp	r3, r2
 801f2ae:	bfda      	itte	le
 801f2b0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f2b4:	ee07 3a10 	vmovle	s14, r3
 801f2b8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801f2bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f2c0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801f2c4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f2c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f2cc:	4770      	bx	lr
 801f2ce:	eeb0 0a66 	vmov.f32	s0, s13
 801f2d2:	4770      	bx	lr
 801f2d4:	ad47d74e 	.word	0xad47d74e
 801f2d8:	310f74f6 	.word	0x310f74f6
 801f2dc:	3e999999 	.word	0x3e999999
 801f2e0:	b493f27c 	.word	0xb493f27c
 801f2e4:	37d00d01 	.word	0x37d00d01
 801f2e8:	bab60b61 	.word	0xbab60b61
 801f2ec:	3d2aaaab 	.word	0x3d2aaaab
 801f2f0:	3f480000 	.word	0x3f480000

0801f2f4 <__kernel_sinf>:
 801f2f4:	ee10 3a10 	vmov	r3, s0
 801f2f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f2fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f300:	da04      	bge.n	801f30c <__kernel_sinf+0x18>
 801f302:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f306:	ee17 3a90 	vmov	r3, s15
 801f30a:	b35b      	cbz	r3, 801f364 <__kernel_sinf+0x70>
 801f30c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f310:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f368 <__kernel_sinf+0x74>
 801f314:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f36c <__kernel_sinf+0x78>
 801f318:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f31c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f370 <__kernel_sinf+0x7c>
 801f320:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f324:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f374 <__kernel_sinf+0x80>
 801f328:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f32c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f378 <__kernel_sinf+0x84>
 801f330:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f334:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f338:	b930      	cbnz	r0, 801f348 <__kernel_sinf+0x54>
 801f33a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f37c <__kernel_sinf+0x88>
 801f33e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f342:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f346:	4770      	bx	lr
 801f348:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f34c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f350:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f354:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f358:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f380 <__kernel_sinf+0x8c>
 801f35c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f360:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f364:	4770      	bx	lr
 801f366:	bf00      	nop
 801f368:	2f2ec9d3 	.word	0x2f2ec9d3
 801f36c:	b2d72f34 	.word	0xb2d72f34
 801f370:	3638ef1b 	.word	0x3638ef1b
 801f374:	b9500d01 	.word	0xb9500d01
 801f378:	3c088889 	.word	0x3c088889
 801f37c:	be2aaaab 	.word	0xbe2aaaab
 801f380:	3e2aaaab 	.word	0x3e2aaaab

0801f384 <__ieee754_rem_pio2f>:
 801f384:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f386:	ee10 6a10 	vmov	r6, s0
 801f38a:	4b86      	ldr	r3, [pc, #536]	; (801f5a4 <__ieee754_rem_pio2f+0x220>)
 801f38c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f390:	429d      	cmp	r5, r3
 801f392:	b087      	sub	sp, #28
 801f394:	4604      	mov	r4, r0
 801f396:	dc05      	bgt.n	801f3a4 <__ieee754_rem_pio2f+0x20>
 801f398:	2300      	movs	r3, #0
 801f39a:	ed80 0a00 	vstr	s0, [r0]
 801f39e:	6043      	str	r3, [r0, #4]
 801f3a0:	2000      	movs	r0, #0
 801f3a2:	e020      	b.n	801f3e6 <__ieee754_rem_pio2f+0x62>
 801f3a4:	4b80      	ldr	r3, [pc, #512]	; (801f5a8 <__ieee754_rem_pio2f+0x224>)
 801f3a6:	429d      	cmp	r5, r3
 801f3a8:	dc38      	bgt.n	801f41c <__ieee754_rem_pio2f+0x98>
 801f3aa:	2e00      	cmp	r6, #0
 801f3ac:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801f5ac <__ieee754_rem_pio2f+0x228>
 801f3b0:	4b7f      	ldr	r3, [pc, #508]	; (801f5b0 <__ieee754_rem_pio2f+0x22c>)
 801f3b2:	f025 050f 	bic.w	r5, r5, #15
 801f3b6:	dd18      	ble.n	801f3ea <__ieee754_rem_pio2f+0x66>
 801f3b8:	429d      	cmp	r5, r3
 801f3ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 801f3be:	bf09      	itett	eq
 801f3c0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801f5b4 <__ieee754_rem_pio2f+0x230>
 801f3c4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801f5b8 <__ieee754_rem_pio2f+0x234>
 801f3c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801f3cc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801f5bc <__ieee754_rem_pio2f+0x238>
 801f3d0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f3d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f3d8:	edc0 6a00 	vstr	s13, [r0]
 801f3dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f3e0:	edc0 7a01 	vstr	s15, [r0, #4]
 801f3e4:	2001      	movs	r0, #1
 801f3e6:	b007      	add	sp, #28
 801f3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3ea:	429d      	cmp	r5, r3
 801f3ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 801f3f0:	bf09      	itett	eq
 801f3f2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801f5b4 <__ieee754_rem_pio2f+0x230>
 801f3f6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801f5b8 <__ieee754_rem_pio2f+0x234>
 801f3fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801f3fe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801f5bc <__ieee754_rem_pio2f+0x238>
 801f402:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f406:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f40a:	edc0 6a00 	vstr	s13, [r0]
 801f40e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f412:	edc0 7a01 	vstr	s15, [r0, #4]
 801f416:	f04f 30ff 	mov.w	r0, #4294967295
 801f41a:	e7e4      	b.n	801f3e6 <__ieee754_rem_pio2f+0x62>
 801f41c:	4b68      	ldr	r3, [pc, #416]	; (801f5c0 <__ieee754_rem_pio2f+0x23c>)
 801f41e:	429d      	cmp	r5, r3
 801f420:	dc71      	bgt.n	801f506 <__ieee754_rem_pio2f+0x182>
 801f422:	f000 f8db 	bl	801f5dc <fabsf>
 801f426:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f5c4 <__ieee754_rem_pio2f+0x240>
 801f42a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f42e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f43a:	ee17 0a90 	vmov	r0, s15
 801f43e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f5ac <__ieee754_rem_pio2f+0x228>
 801f442:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f446:	281f      	cmp	r0, #31
 801f448:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f5b8 <__ieee754_rem_pio2f+0x234>
 801f44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f450:	eeb1 6a47 	vneg.f32	s12, s14
 801f454:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f458:	ee16 2a90 	vmov	r2, s13
 801f45c:	dc1c      	bgt.n	801f498 <__ieee754_rem_pio2f+0x114>
 801f45e:	495a      	ldr	r1, [pc, #360]	; (801f5c8 <__ieee754_rem_pio2f+0x244>)
 801f460:	1e47      	subs	r7, r0, #1
 801f462:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f466:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f46a:	428b      	cmp	r3, r1
 801f46c:	d014      	beq.n	801f498 <__ieee754_rem_pio2f+0x114>
 801f46e:	6022      	str	r2, [r4, #0]
 801f470:	ed94 7a00 	vldr	s14, [r4]
 801f474:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f478:	2e00      	cmp	r6, #0
 801f47a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f47e:	ed84 0a01 	vstr	s0, [r4, #4]
 801f482:	dab0      	bge.n	801f3e6 <__ieee754_rem_pio2f+0x62>
 801f484:	eeb1 7a47 	vneg.f32	s14, s14
 801f488:	eeb1 0a40 	vneg.f32	s0, s0
 801f48c:	ed84 7a00 	vstr	s14, [r4]
 801f490:	ed84 0a01 	vstr	s0, [r4, #4]
 801f494:	4240      	negs	r0, r0
 801f496:	e7a6      	b.n	801f3e6 <__ieee754_rem_pio2f+0x62>
 801f498:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f49c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801f4a0:	2908      	cmp	r1, #8
 801f4a2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801f4a6:	dde2      	ble.n	801f46e <__ieee754_rem_pio2f+0xea>
 801f4a8:	eddf 5a42 	vldr	s11, [pc, #264]	; 801f5b4 <__ieee754_rem_pio2f+0x230>
 801f4ac:	eef0 6a40 	vmov.f32	s13, s0
 801f4b0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f4b4:	ee70 7a66 	vsub.f32	s15, s0, s13
 801f4b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f4bc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801f5bc <__ieee754_rem_pio2f+0x238>
 801f4c0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801f4c4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801f4c8:	ee15 2a90 	vmov	r2, s11
 801f4cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f4d0:	1a5b      	subs	r3, r3, r1
 801f4d2:	2b19      	cmp	r3, #25
 801f4d4:	dc04      	bgt.n	801f4e0 <__ieee754_rem_pio2f+0x15c>
 801f4d6:	edc4 5a00 	vstr	s11, [r4]
 801f4da:	eeb0 0a66 	vmov.f32	s0, s13
 801f4de:	e7c7      	b.n	801f470 <__ieee754_rem_pio2f+0xec>
 801f4e0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f5cc <__ieee754_rem_pio2f+0x248>
 801f4e4:	eeb0 0a66 	vmov.f32	s0, s13
 801f4e8:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f4ec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f4f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f5d0 <__ieee754_rem_pio2f+0x24c>
 801f4f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f4f8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f4fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f500:	ed84 7a00 	vstr	s14, [r4]
 801f504:	e7b4      	b.n	801f470 <__ieee754_rem_pio2f+0xec>
 801f506:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f50a:	db06      	blt.n	801f51a <__ieee754_rem_pio2f+0x196>
 801f50c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f510:	edc0 7a01 	vstr	s15, [r0, #4]
 801f514:	edc0 7a00 	vstr	s15, [r0]
 801f518:	e742      	b.n	801f3a0 <__ieee754_rem_pio2f+0x1c>
 801f51a:	15ea      	asrs	r2, r5, #23
 801f51c:	3a86      	subs	r2, #134	; 0x86
 801f51e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f522:	ee07 3a90 	vmov	s15, r3
 801f526:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f52a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801f5d4 <__ieee754_rem_pio2f+0x250>
 801f52e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f536:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f53a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f53e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f54a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f54e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f552:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f55a:	edcd 7a05 	vstr	s15, [sp, #20]
 801f55e:	d11e      	bne.n	801f59e <__ieee754_rem_pio2f+0x21a>
 801f560:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f568:	bf14      	ite	ne
 801f56a:	2302      	movne	r3, #2
 801f56c:	2301      	moveq	r3, #1
 801f56e:	491a      	ldr	r1, [pc, #104]	; (801f5d8 <__ieee754_rem_pio2f+0x254>)
 801f570:	9101      	str	r1, [sp, #4]
 801f572:	2102      	movs	r1, #2
 801f574:	9100      	str	r1, [sp, #0]
 801f576:	a803      	add	r0, sp, #12
 801f578:	4621      	mov	r1, r4
 801f57a:	f000 f837 	bl	801f5ec <__kernel_rem_pio2f>
 801f57e:	2e00      	cmp	r6, #0
 801f580:	f6bf af31 	bge.w	801f3e6 <__ieee754_rem_pio2f+0x62>
 801f584:	edd4 7a00 	vldr	s15, [r4]
 801f588:	eef1 7a67 	vneg.f32	s15, s15
 801f58c:	edc4 7a00 	vstr	s15, [r4]
 801f590:	edd4 7a01 	vldr	s15, [r4, #4]
 801f594:	eef1 7a67 	vneg.f32	s15, s15
 801f598:	edc4 7a01 	vstr	s15, [r4, #4]
 801f59c:	e77a      	b.n	801f494 <__ieee754_rem_pio2f+0x110>
 801f59e:	2303      	movs	r3, #3
 801f5a0:	e7e5      	b.n	801f56e <__ieee754_rem_pio2f+0x1ea>
 801f5a2:	bf00      	nop
 801f5a4:	3f490fd8 	.word	0x3f490fd8
 801f5a8:	4016cbe3 	.word	0x4016cbe3
 801f5ac:	3fc90f80 	.word	0x3fc90f80
 801f5b0:	3fc90fd0 	.word	0x3fc90fd0
 801f5b4:	37354400 	.word	0x37354400
 801f5b8:	37354443 	.word	0x37354443
 801f5bc:	2e85a308 	.word	0x2e85a308
 801f5c0:	43490f80 	.word	0x43490f80
 801f5c4:	3f22f984 	.word	0x3f22f984
 801f5c8:	08021d08 	.word	0x08021d08
 801f5cc:	2e85a300 	.word	0x2e85a300
 801f5d0:	248d3132 	.word	0x248d3132
 801f5d4:	43800000 	.word	0x43800000
 801f5d8:	08021d88 	.word	0x08021d88

0801f5dc <fabsf>:
 801f5dc:	ee10 3a10 	vmov	r3, s0
 801f5e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f5e4:	ee00 3a10 	vmov	s0, r3
 801f5e8:	4770      	bx	lr
	...

0801f5ec <__kernel_rem_pio2f>:
 801f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5f0:	ed2d 8b04 	vpush	{d8-d9}
 801f5f4:	b0d9      	sub	sp, #356	; 0x164
 801f5f6:	4688      	mov	r8, r1
 801f5f8:	9002      	str	r0, [sp, #8]
 801f5fa:	49b8      	ldr	r1, [pc, #736]	; (801f8dc <__kernel_rem_pio2f+0x2f0>)
 801f5fc:	9866      	ldr	r0, [sp, #408]	; 0x198
 801f5fe:	9301      	str	r3, [sp, #4]
 801f600:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801f604:	9901      	ldr	r1, [sp, #4]
 801f606:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801f608:	f101 3bff 	add.w	fp, r1, #4294967295
 801f60c:	1d11      	adds	r1, r2, #4
 801f60e:	db25      	blt.n	801f65c <__kernel_rem_pio2f+0x70>
 801f610:	1ed0      	subs	r0, r2, #3
 801f612:	bf48      	it	mi
 801f614:	1d10      	addmi	r0, r2, #4
 801f616:	10c0      	asrs	r0, r0, #3
 801f618:	1c45      	adds	r5, r0, #1
 801f61a:	00e9      	lsls	r1, r5, #3
 801f61c:	eba0 070b 	sub.w	r7, r0, fp
 801f620:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801f624:	9103      	str	r1, [sp, #12]
 801f626:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801f62a:	eb0a 0c0b 	add.w	ip, sl, fp
 801f62e:	ae1c      	add	r6, sp, #112	; 0x70
 801f630:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801f634:	2400      	movs	r4, #0
 801f636:	4564      	cmp	r4, ip
 801f638:	dd12      	ble.n	801f660 <__kernel_rem_pio2f+0x74>
 801f63a:	9901      	ldr	r1, [sp, #4]
 801f63c:	ac1c      	add	r4, sp, #112	; 0x70
 801f63e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f642:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801f646:	f04f 0c00 	mov.w	ip, #0
 801f64a:	45d4      	cmp	ip, sl
 801f64c:	dc27      	bgt.n	801f69e <__kernel_rem_pio2f+0xb2>
 801f64e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f652:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801f656:	4627      	mov	r7, r4
 801f658:	2600      	movs	r6, #0
 801f65a:	e016      	b.n	801f68a <__kernel_rem_pio2f+0x9e>
 801f65c:	2000      	movs	r0, #0
 801f65e:	e7db      	b.n	801f618 <__kernel_rem_pio2f+0x2c>
 801f660:	42e7      	cmn	r7, r4
 801f662:	bf5d      	ittte	pl
 801f664:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801f668:	ee07 1a90 	vmovpl	s15, r1
 801f66c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f670:	eef0 7a47 	vmovmi.f32	s15, s14
 801f674:	ece6 7a01 	vstmia	r6!, {s15}
 801f678:	3401      	adds	r4, #1
 801f67a:	e7dc      	b.n	801f636 <__kernel_rem_pio2f+0x4a>
 801f67c:	ecfe 6a01 	vldmia	lr!, {s13}
 801f680:	ed97 7a00 	vldr	s14, [r7]
 801f684:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f688:	3601      	adds	r6, #1
 801f68a:	455e      	cmp	r6, fp
 801f68c:	f1a7 0704 	sub.w	r7, r7, #4
 801f690:	ddf4      	ble.n	801f67c <__kernel_rem_pio2f+0x90>
 801f692:	ece9 7a01 	vstmia	r9!, {s15}
 801f696:	f10c 0c01 	add.w	ip, ip, #1
 801f69a:	3404      	adds	r4, #4
 801f69c:	e7d5      	b.n	801f64a <__kernel_rem_pio2f+0x5e>
 801f69e:	a908      	add	r1, sp, #32
 801f6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f6a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801f6a8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801f8e8 <__kernel_rem_pio2f+0x2fc>
 801f6ac:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801f8e4 <__kernel_rem_pio2f+0x2f8>
 801f6b0:	9105      	str	r1, [sp, #20]
 801f6b2:	9304      	str	r3, [sp, #16]
 801f6b4:	4656      	mov	r6, sl
 801f6b6:	00b3      	lsls	r3, r6, #2
 801f6b8:	9306      	str	r3, [sp, #24]
 801f6ba:	ab58      	add	r3, sp, #352	; 0x160
 801f6bc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801f6c0:	ac08      	add	r4, sp, #32
 801f6c2:	ab44      	add	r3, sp, #272	; 0x110
 801f6c4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801f6c8:	46a4      	mov	ip, r4
 801f6ca:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801f6ce:	4637      	mov	r7, r6
 801f6d0:	2f00      	cmp	r7, #0
 801f6d2:	f1a0 0004 	sub.w	r0, r0, #4
 801f6d6:	dc4a      	bgt.n	801f76e <__kernel_rem_pio2f+0x182>
 801f6d8:	4628      	mov	r0, r5
 801f6da:	9207      	str	r2, [sp, #28]
 801f6dc:	f000 f9f8 	bl	801fad0 <scalbnf>
 801f6e0:	eeb0 8a40 	vmov.f32	s16, s0
 801f6e4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f6e8:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f6ec:	f000 fa56 	bl	801fb9c <floorf>
 801f6f0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f6f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f6f8:	2d00      	cmp	r5, #0
 801f6fa:	9a07      	ldr	r2, [sp, #28]
 801f6fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f700:	ee17 9a90 	vmov	r9, s15
 801f704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f708:	ee38 8a67 	vsub.f32	s16, s16, s15
 801f70c:	dd41      	ble.n	801f792 <__kernel_rem_pio2f+0x1a6>
 801f70e:	f106 3cff 	add.w	ip, r6, #4294967295
 801f712:	ab08      	add	r3, sp, #32
 801f714:	f1c5 0e08 	rsb	lr, r5, #8
 801f718:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801f71c:	fa47 f00e 	asr.w	r0, r7, lr
 801f720:	4481      	add	r9, r0
 801f722:	fa00 f00e 	lsl.w	r0, r0, lr
 801f726:	1a3f      	subs	r7, r7, r0
 801f728:	f1c5 0007 	rsb	r0, r5, #7
 801f72c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801f730:	4107      	asrs	r7, r0
 801f732:	2f00      	cmp	r7, #0
 801f734:	dd3c      	ble.n	801f7b0 <__kernel_rem_pio2f+0x1c4>
 801f736:	f04f 0e00 	mov.w	lr, #0
 801f73a:	f109 0901 	add.w	r9, r9, #1
 801f73e:	4671      	mov	r1, lr
 801f740:	4576      	cmp	r6, lr
 801f742:	dc67      	bgt.n	801f814 <__kernel_rem_pio2f+0x228>
 801f744:	2d00      	cmp	r5, #0
 801f746:	dd03      	ble.n	801f750 <__kernel_rem_pio2f+0x164>
 801f748:	2d01      	cmp	r5, #1
 801f74a:	d074      	beq.n	801f836 <__kernel_rem_pio2f+0x24a>
 801f74c:	2d02      	cmp	r5, #2
 801f74e:	d07b      	beq.n	801f848 <__kernel_rem_pio2f+0x25c>
 801f750:	2f02      	cmp	r7, #2
 801f752:	d12d      	bne.n	801f7b0 <__kernel_rem_pio2f+0x1c4>
 801f754:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f758:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f75c:	b341      	cbz	r1, 801f7b0 <__kernel_rem_pio2f+0x1c4>
 801f75e:	4628      	mov	r0, r5
 801f760:	9207      	str	r2, [sp, #28]
 801f762:	f000 f9b5 	bl	801fad0 <scalbnf>
 801f766:	9a07      	ldr	r2, [sp, #28]
 801f768:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f76c:	e020      	b.n	801f7b0 <__kernel_rem_pio2f+0x1c4>
 801f76e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f772:	3f01      	subs	r7, #1
 801f774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f77c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f780:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f784:	ecac 0a01 	vstmia	ip!, {s0}
 801f788:	ed90 0a00 	vldr	s0, [r0]
 801f78c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f790:	e79e      	b.n	801f6d0 <__kernel_rem_pio2f+0xe4>
 801f792:	d105      	bne.n	801f7a0 <__kernel_rem_pio2f+0x1b4>
 801f794:	1e70      	subs	r0, r6, #1
 801f796:	ab08      	add	r3, sp, #32
 801f798:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801f79c:	11ff      	asrs	r7, r7, #7
 801f79e:	e7c8      	b.n	801f732 <__kernel_rem_pio2f+0x146>
 801f7a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f7a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ac:	da30      	bge.n	801f810 <__kernel_rem_pio2f+0x224>
 801f7ae:	2700      	movs	r7, #0
 801f7b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7b8:	f040 809a 	bne.w	801f8f0 <__kernel_rem_pio2f+0x304>
 801f7bc:	1e74      	subs	r4, r6, #1
 801f7be:	46a4      	mov	ip, r4
 801f7c0:	2100      	movs	r1, #0
 801f7c2:	45d4      	cmp	ip, sl
 801f7c4:	da47      	bge.n	801f856 <__kernel_rem_pio2f+0x26a>
 801f7c6:	2900      	cmp	r1, #0
 801f7c8:	d063      	beq.n	801f892 <__kernel_rem_pio2f+0x2a6>
 801f7ca:	ab08      	add	r3, sp, #32
 801f7cc:	3d08      	subs	r5, #8
 801f7ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d07f      	beq.n	801f8d6 <__kernel_rem_pio2f+0x2ea>
 801f7d6:	4628      	mov	r0, r5
 801f7d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f7dc:	f000 f978 	bl	801fad0 <scalbnf>
 801f7e0:	1c63      	adds	r3, r4, #1
 801f7e2:	aa44      	add	r2, sp, #272	; 0x110
 801f7e4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801f8e8 <__kernel_rem_pio2f+0x2fc>
 801f7e8:	0099      	lsls	r1, r3, #2
 801f7ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f7ee:	4623      	mov	r3, r4
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	f280 80ad 	bge.w	801f950 <__kernel_rem_pio2f+0x364>
 801f7f6:	4623      	mov	r3, r4
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	f2c0 80cb 	blt.w	801f994 <__kernel_rem_pio2f+0x3a8>
 801f7fe:	aa44      	add	r2, sp, #272	; 0x110
 801f800:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f804:	4e36      	ldr	r6, [pc, #216]	; (801f8e0 <__kernel_rem_pio2f+0x2f4>)
 801f806:	eddf 7a39 	vldr	s15, [pc, #228]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801f80a:	2000      	movs	r0, #0
 801f80c:	1ae2      	subs	r2, r4, r3
 801f80e:	e0b6      	b.n	801f97e <__kernel_rem_pio2f+0x392>
 801f810:	2702      	movs	r7, #2
 801f812:	e790      	b.n	801f736 <__kernel_rem_pio2f+0x14a>
 801f814:	6820      	ldr	r0, [r4, #0]
 801f816:	b949      	cbnz	r1, 801f82c <__kernel_rem_pio2f+0x240>
 801f818:	b118      	cbz	r0, 801f822 <__kernel_rem_pio2f+0x236>
 801f81a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801f81e:	6020      	str	r0, [r4, #0]
 801f820:	2001      	movs	r0, #1
 801f822:	f10e 0e01 	add.w	lr, lr, #1
 801f826:	3404      	adds	r4, #4
 801f828:	4601      	mov	r1, r0
 801f82a:	e789      	b.n	801f740 <__kernel_rem_pio2f+0x154>
 801f82c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801f830:	6020      	str	r0, [r4, #0]
 801f832:	4608      	mov	r0, r1
 801f834:	e7f5      	b.n	801f822 <__kernel_rem_pio2f+0x236>
 801f836:	1e74      	subs	r4, r6, #1
 801f838:	ab08      	add	r3, sp, #32
 801f83a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f83e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801f842:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f846:	e783      	b.n	801f750 <__kernel_rem_pio2f+0x164>
 801f848:	1e74      	subs	r4, r6, #1
 801f84a:	ab08      	add	r3, sp, #32
 801f84c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f850:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801f854:	e7f5      	b.n	801f842 <__kernel_rem_pio2f+0x256>
 801f856:	ab08      	add	r3, sp, #32
 801f858:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801f85c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f860:	4301      	orrs	r1, r0
 801f862:	e7ae      	b.n	801f7c2 <__kernel_rem_pio2f+0x1d6>
 801f864:	3001      	adds	r0, #1
 801f866:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801f86a:	2f00      	cmp	r7, #0
 801f86c:	d0fa      	beq.n	801f864 <__kernel_rem_pio2f+0x278>
 801f86e:	9b06      	ldr	r3, [sp, #24]
 801f870:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801f874:	eb0d 0403 	add.w	r4, sp, r3
 801f878:	9b01      	ldr	r3, [sp, #4]
 801f87a:	18f7      	adds	r7, r6, r3
 801f87c:	ab1c      	add	r3, sp, #112	; 0x70
 801f87e:	f106 0c01 	add.w	ip, r6, #1
 801f882:	3c4c      	subs	r4, #76	; 0x4c
 801f884:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f888:	4430      	add	r0, r6
 801f88a:	4560      	cmp	r0, ip
 801f88c:	da04      	bge.n	801f898 <__kernel_rem_pio2f+0x2ac>
 801f88e:	4606      	mov	r6, r0
 801f890:	e711      	b.n	801f6b6 <__kernel_rem_pio2f+0xca>
 801f892:	9c05      	ldr	r4, [sp, #20]
 801f894:	2001      	movs	r0, #1
 801f896:	e7e6      	b.n	801f866 <__kernel_rem_pio2f+0x27a>
 801f898:	9b04      	ldr	r3, [sp, #16]
 801f89a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f89e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f8a2:	9306      	str	r3, [sp, #24]
 801f8a4:	ee07 3a90 	vmov	s15, r3
 801f8a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f8ac:	2600      	movs	r6, #0
 801f8ae:	ece7 7a01 	vstmia	r7!, {s15}
 801f8b2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801f8b6:	46b9      	mov	r9, r7
 801f8b8:	455e      	cmp	r6, fp
 801f8ba:	dd04      	ble.n	801f8c6 <__kernel_rem_pio2f+0x2da>
 801f8bc:	ece4 7a01 	vstmia	r4!, {s15}
 801f8c0:	f10c 0c01 	add.w	ip, ip, #1
 801f8c4:	e7e1      	b.n	801f88a <__kernel_rem_pio2f+0x29e>
 801f8c6:	ecfe 6a01 	vldmia	lr!, {s13}
 801f8ca:	ed39 7a01 	vldmdb	r9!, {s14}
 801f8ce:	3601      	adds	r6, #1
 801f8d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f8d4:	e7f0      	b.n	801f8b8 <__kernel_rem_pio2f+0x2cc>
 801f8d6:	3c01      	subs	r4, #1
 801f8d8:	e777      	b.n	801f7ca <__kernel_rem_pio2f+0x1de>
 801f8da:	bf00      	nop
 801f8dc:	080220cc 	.word	0x080220cc
 801f8e0:	080220a0 	.word	0x080220a0
 801f8e4:	43800000 	.word	0x43800000
 801f8e8:	3b800000 	.word	0x3b800000
 801f8ec:	00000000 	.word	0x00000000
 801f8f0:	9b03      	ldr	r3, [sp, #12]
 801f8f2:	eeb0 0a48 	vmov.f32	s0, s16
 801f8f6:	1a98      	subs	r0, r3, r2
 801f8f8:	f000 f8ea 	bl	801fad0 <scalbnf>
 801f8fc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f8e4 <__kernel_rem_pio2f+0x2f8>
 801f900:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f908:	db19      	blt.n	801f93e <__kernel_rem_pio2f+0x352>
 801f90a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f8e8 <__kernel_rem_pio2f+0x2fc>
 801f90e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f912:	aa08      	add	r2, sp, #32
 801f914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f918:	1c74      	adds	r4, r6, #1
 801f91a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f91e:	3508      	adds	r5, #8
 801f920:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f928:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f92c:	ee10 3a10 	vmov	r3, s0
 801f930:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801f934:	ee17 3a90 	vmov	r3, s15
 801f938:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f93c:	e74b      	b.n	801f7d6 <__kernel_rem_pio2f+0x1ea>
 801f93e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f942:	aa08      	add	r2, sp, #32
 801f944:	ee10 3a10 	vmov	r3, s0
 801f948:	4634      	mov	r4, r6
 801f94a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801f94e:	e742      	b.n	801f7d6 <__kernel_rem_pio2f+0x1ea>
 801f950:	a808      	add	r0, sp, #32
 801f952:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f956:	9001      	str	r0, [sp, #4]
 801f958:	ee07 0a90 	vmov	s15, r0
 801f95c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f960:	3b01      	subs	r3, #1
 801f962:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f966:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f96a:	ed62 7a01 	vstmdb	r2!, {s15}
 801f96e:	e73f      	b.n	801f7f0 <__kernel_rem_pio2f+0x204>
 801f970:	ecf6 6a01 	vldmia	r6!, {s13}
 801f974:	ecb5 7a01 	vldmia	r5!, {s14}
 801f978:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f97c:	3001      	adds	r0, #1
 801f97e:	4550      	cmp	r0, sl
 801f980:	dc01      	bgt.n	801f986 <__kernel_rem_pio2f+0x39a>
 801f982:	4290      	cmp	r0, r2
 801f984:	ddf4      	ble.n	801f970 <__kernel_rem_pio2f+0x384>
 801f986:	a858      	add	r0, sp, #352	; 0x160
 801f988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f98c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801f990:	3b01      	subs	r3, #1
 801f992:	e731      	b.n	801f7f8 <__kernel_rem_pio2f+0x20c>
 801f994:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801f996:	2b02      	cmp	r3, #2
 801f998:	dc09      	bgt.n	801f9ae <__kernel_rem_pio2f+0x3c2>
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	dc2b      	bgt.n	801f9f6 <__kernel_rem_pio2f+0x40a>
 801f99e:	d044      	beq.n	801fa2a <__kernel_rem_pio2f+0x43e>
 801f9a0:	f009 0007 	and.w	r0, r9, #7
 801f9a4:	b059      	add	sp, #356	; 0x164
 801f9a6:	ecbd 8b04 	vpop	{d8-d9}
 801f9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9ae:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801f9b0:	2b03      	cmp	r3, #3
 801f9b2:	d1f5      	bne.n	801f9a0 <__kernel_rem_pio2f+0x3b4>
 801f9b4:	aa30      	add	r2, sp, #192	; 0xc0
 801f9b6:	1f0b      	subs	r3, r1, #4
 801f9b8:	4413      	add	r3, r2
 801f9ba:	461a      	mov	r2, r3
 801f9bc:	4620      	mov	r0, r4
 801f9be:	2800      	cmp	r0, #0
 801f9c0:	f1a2 0204 	sub.w	r2, r2, #4
 801f9c4:	dc52      	bgt.n	801fa6c <__kernel_rem_pio2f+0x480>
 801f9c6:	4622      	mov	r2, r4
 801f9c8:	2a01      	cmp	r2, #1
 801f9ca:	f1a3 0304 	sub.w	r3, r3, #4
 801f9ce:	dc5d      	bgt.n	801fa8c <__kernel_rem_pio2f+0x4a0>
 801f9d0:	ab30      	add	r3, sp, #192	; 0xc0
 801f9d2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801f9d6:	440b      	add	r3, r1
 801f9d8:	2c01      	cmp	r4, #1
 801f9da:	dc67      	bgt.n	801faac <__kernel_rem_pio2f+0x4c0>
 801f9dc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801f9e0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801f9e4:	2f00      	cmp	r7, #0
 801f9e6:	d167      	bne.n	801fab8 <__kernel_rem_pio2f+0x4cc>
 801f9e8:	edc8 6a00 	vstr	s13, [r8]
 801f9ec:	ed88 7a01 	vstr	s14, [r8, #4]
 801f9f0:	edc8 7a02 	vstr	s15, [r8, #8]
 801f9f4:	e7d4      	b.n	801f9a0 <__kernel_rem_pio2f+0x3b4>
 801f9f6:	ab30      	add	r3, sp, #192	; 0xc0
 801f9f8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801f9fc:	440b      	add	r3, r1
 801f9fe:	4622      	mov	r2, r4
 801fa00:	2a00      	cmp	r2, #0
 801fa02:	da24      	bge.n	801fa4e <__kernel_rem_pio2f+0x462>
 801fa04:	b34f      	cbz	r7, 801fa5a <__kernel_rem_pio2f+0x46e>
 801fa06:	eef1 7a47 	vneg.f32	s15, s14
 801fa0a:	edc8 7a00 	vstr	s15, [r8]
 801fa0e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801fa12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fa16:	aa31      	add	r2, sp, #196	; 0xc4
 801fa18:	2301      	movs	r3, #1
 801fa1a:	429c      	cmp	r4, r3
 801fa1c:	da20      	bge.n	801fa60 <__kernel_rem_pio2f+0x474>
 801fa1e:	b10f      	cbz	r7, 801fa24 <__kernel_rem_pio2f+0x438>
 801fa20:	eef1 7a67 	vneg.f32	s15, s15
 801fa24:	edc8 7a01 	vstr	s15, [r8, #4]
 801fa28:	e7ba      	b.n	801f9a0 <__kernel_rem_pio2f+0x3b4>
 801fa2a:	ab30      	add	r3, sp, #192	; 0xc0
 801fa2c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801f8ec <__kernel_rem_pio2f+0x300>
 801fa30:	440b      	add	r3, r1
 801fa32:	2c00      	cmp	r4, #0
 801fa34:	da05      	bge.n	801fa42 <__kernel_rem_pio2f+0x456>
 801fa36:	b10f      	cbz	r7, 801fa3c <__kernel_rem_pio2f+0x450>
 801fa38:	eef1 7a67 	vneg.f32	s15, s15
 801fa3c:	edc8 7a00 	vstr	s15, [r8]
 801fa40:	e7ae      	b.n	801f9a0 <__kernel_rem_pio2f+0x3b4>
 801fa42:	ed33 7a01 	vldmdb	r3!, {s14}
 801fa46:	3c01      	subs	r4, #1
 801fa48:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fa4c:	e7f1      	b.n	801fa32 <__kernel_rem_pio2f+0x446>
 801fa4e:	ed73 7a01 	vldmdb	r3!, {s15}
 801fa52:	3a01      	subs	r2, #1
 801fa54:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fa58:	e7d2      	b.n	801fa00 <__kernel_rem_pio2f+0x414>
 801fa5a:	eef0 7a47 	vmov.f32	s15, s14
 801fa5e:	e7d4      	b.n	801fa0a <__kernel_rem_pio2f+0x41e>
 801fa60:	ecb2 7a01 	vldmia	r2!, {s14}
 801fa64:	3301      	adds	r3, #1
 801fa66:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fa6a:	e7d6      	b.n	801fa1a <__kernel_rem_pio2f+0x42e>
 801fa6c:	edd2 7a00 	vldr	s15, [r2]
 801fa70:	edd2 6a01 	vldr	s13, [r2, #4]
 801fa74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fa78:	3801      	subs	r0, #1
 801fa7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fa7e:	ed82 7a00 	vstr	s14, [r2]
 801fa82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fa86:	edc2 7a01 	vstr	s15, [r2, #4]
 801fa8a:	e798      	b.n	801f9be <__kernel_rem_pio2f+0x3d2>
 801fa8c:	edd3 7a00 	vldr	s15, [r3]
 801fa90:	edd3 6a01 	vldr	s13, [r3, #4]
 801fa94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fa98:	3a01      	subs	r2, #1
 801fa9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fa9e:	ed83 7a00 	vstr	s14, [r3]
 801faa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801faa6:	edc3 7a01 	vstr	s15, [r3, #4]
 801faaa:	e78d      	b.n	801f9c8 <__kernel_rem_pio2f+0x3dc>
 801faac:	ed33 7a01 	vldmdb	r3!, {s14}
 801fab0:	3c01      	subs	r4, #1
 801fab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fab6:	e78f      	b.n	801f9d8 <__kernel_rem_pio2f+0x3ec>
 801fab8:	eef1 6a66 	vneg.f32	s13, s13
 801fabc:	eeb1 7a47 	vneg.f32	s14, s14
 801fac0:	edc8 6a00 	vstr	s13, [r8]
 801fac4:	ed88 7a01 	vstr	s14, [r8, #4]
 801fac8:	eef1 7a67 	vneg.f32	s15, s15
 801facc:	e790      	b.n	801f9f0 <__kernel_rem_pio2f+0x404>
 801face:	bf00      	nop

0801fad0 <scalbnf>:
 801fad0:	ee10 3a10 	vmov	r3, s0
 801fad4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801fad8:	d02b      	beq.n	801fb32 <scalbnf+0x62>
 801fada:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801fade:	d302      	bcc.n	801fae6 <scalbnf+0x16>
 801fae0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fae4:	4770      	bx	lr
 801fae6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801faea:	d123      	bne.n	801fb34 <scalbnf+0x64>
 801faec:	4b24      	ldr	r3, [pc, #144]	; (801fb80 <scalbnf+0xb0>)
 801faee:	eddf 7a25 	vldr	s15, [pc, #148]	; 801fb84 <scalbnf+0xb4>
 801faf2:	4298      	cmp	r0, r3
 801faf4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801faf8:	db17      	blt.n	801fb2a <scalbnf+0x5a>
 801fafa:	ee10 3a10 	vmov	r3, s0
 801fafe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fb02:	3a19      	subs	r2, #25
 801fb04:	f24c 3150 	movw	r1, #50000	; 0xc350
 801fb08:	4288      	cmp	r0, r1
 801fb0a:	dd15      	ble.n	801fb38 <scalbnf+0x68>
 801fb0c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801fb88 <scalbnf+0xb8>
 801fb10:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801fb8c <scalbnf+0xbc>
 801fb14:	ee10 3a10 	vmov	r3, s0
 801fb18:	eeb0 7a67 	vmov.f32	s14, s15
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	bfb8      	it	lt
 801fb20:	eef0 7a66 	vmovlt.f32	s15, s13
 801fb24:	ee27 0a87 	vmul.f32	s0, s15, s14
 801fb28:	4770      	bx	lr
 801fb2a:	eddf 7a19 	vldr	s15, [pc, #100]	; 801fb90 <scalbnf+0xc0>
 801fb2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fb32:	4770      	bx	lr
 801fb34:	0dd2      	lsrs	r2, r2, #23
 801fb36:	e7e5      	b.n	801fb04 <scalbnf+0x34>
 801fb38:	4410      	add	r0, r2
 801fb3a:	28fe      	cmp	r0, #254	; 0xfe
 801fb3c:	dce6      	bgt.n	801fb0c <scalbnf+0x3c>
 801fb3e:	2800      	cmp	r0, #0
 801fb40:	dd06      	ble.n	801fb50 <scalbnf+0x80>
 801fb42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fb46:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801fb4a:	ee00 3a10 	vmov	s0, r3
 801fb4e:	4770      	bx	lr
 801fb50:	f110 0f16 	cmn.w	r0, #22
 801fb54:	da09      	bge.n	801fb6a <scalbnf+0x9a>
 801fb56:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801fb90 <scalbnf+0xc0>
 801fb5a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801fb94 <scalbnf+0xc4>
 801fb5e:	ee10 3a10 	vmov	r3, s0
 801fb62:	eeb0 7a67 	vmov.f32	s14, s15
 801fb66:	2b00      	cmp	r3, #0
 801fb68:	e7d9      	b.n	801fb1e <scalbnf+0x4e>
 801fb6a:	3019      	adds	r0, #25
 801fb6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fb70:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801fb74:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801fb98 <scalbnf+0xc8>
 801fb78:	ee07 3a90 	vmov	s15, r3
 801fb7c:	e7d7      	b.n	801fb2e <scalbnf+0x5e>
 801fb7e:	bf00      	nop
 801fb80:	ffff3cb0 	.word	0xffff3cb0
 801fb84:	4c000000 	.word	0x4c000000
 801fb88:	7149f2ca 	.word	0x7149f2ca
 801fb8c:	f149f2ca 	.word	0xf149f2ca
 801fb90:	0da24260 	.word	0x0da24260
 801fb94:	8da24260 	.word	0x8da24260
 801fb98:	33000000 	.word	0x33000000

0801fb9c <floorf>:
 801fb9c:	ee10 3a10 	vmov	r3, s0
 801fba0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fba4:	3a7f      	subs	r2, #127	; 0x7f
 801fba6:	2a16      	cmp	r2, #22
 801fba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fbac:	dc2a      	bgt.n	801fc04 <floorf+0x68>
 801fbae:	2a00      	cmp	r2, #0
 801fbb0:	da11      	bge.n	801fbd6 <floorf+0x3a>
 801fbb2:	eddf 7a18 	vldr	s15, [pc, #96]	; 801fc14 <floorf+0x78>
 801fbb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fbba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbc2:	dd05      	ble.n	801fbd0 <floorf+0x34>
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	da23      	bge.n	801fc10 <floorf+0x74>
 801fbc8:	4a13      	ldr	r2, [pc, #76]	; (801fc18 <floorf+0x7c>)
 801fbca:	2900      	cmp	r1, #0
 801fbcc:	bf18      	it	ne
 801fbce:	4613      	movne	r3, r2
 801fbd0:	ee00 3a10 	vmov	s0, r3
 801fbd4:	4770      	bx	lr
 801fbd6:	4911      	ldr	r1, [pc, #68]	; (801fc1c <floorf+0x80>)
 801fbd8:	4111      	asrs	r1, r2
 801fbda:	420b      	tst	r3, r1
 801fbdc:	d0fa      	beq.n	801fbd4 <floorf+0x38>
 801fbde:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801fc14 <floorf+0x78>
 801fbe2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fbe6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbee:	ddef      	ble.n	801fbd0 <floorf+0x34>
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	bfbe      	ittt	lt
 801fbf4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801fbf8:	fa40 f202 	asrlt.w	r2, r0, r2
 801fbfc:	189b      	addlt	r3, r3, r2
 801fbfe:	ea23 0301 	bic.w	r3, r3, r1
 801fc02:	e7e5      	b.n	801fbd0 <floorf+0x34>
 801fc04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801fc08:	d3e4      	bcc.n	801fbd4 <floorf+0x38>
 801fc0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fc0e:	4770      	bx	lr
 801fc10:	2300      	movs	r3, #0
 801fc12:	e7dd      	b.n	801fbd0 <floorf+0x34>
 801fc14:	7149f2ca 	.word	0x7149f2ca
 801fc18:	bf800000 	.word	0xbf800000
 801fc1c:	007fffff 	.word	0x007fffff

0801fc20 <_init>:
 801fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc22:	bf00      	nop
 801fc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc26:	bc08      	pop	{r3}
 801fc28:	469e      	mov	lr, r3
 801fc2a:	4770      	bx	lr

0801fc2c <_fini>:
 801fc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc2e:	bf00      	nop
 801fc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc32:	bc08      	pop	{r3}
 801fc34:	469e      	mov	lr, r3
 801fc36:	4770      	bx	lr
