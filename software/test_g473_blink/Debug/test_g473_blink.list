
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020f04  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e40  080210e8  080210e8  000310e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023f28  08023f28  00040358  2**0
                  CONTENTS
  4 .ARM          00000000  08023f28  08023f28  00040358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08023f28  08023f28  00040358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023f28  08023f28  00033f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023f2c  08023f2c  00033f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  08023f30  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016720  20000358  08024288  00040358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016a78  08024288  00046a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040388  2**0
                  CONTENTS, READONLY
 13 .debug_info   00065131  00000000  00000000  000403cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000096cc  00000000  00000000  000a54fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d38  00000000  00000000  000aebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000239b  00000000  00000000  000b1900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bd3  00000000  00000000  000b3c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b496  00000000  00000000  000dc86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff800  00000000  00000000  00117d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d084  00000000  00000000  00217504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00224588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000358 	.word	0x20000358
 80001fc:	00000000 	.word	0x00000000
 8000200:	080210cc 	.word	0x080210cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000035c 	.word	0x2000035c
 800021c:	080210cc 	.word	0x080210cc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f01d fbdc 	bl	801e4c2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d54:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d7a:	f005 fb63 	bl	8006444 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f003 fae1 	bl	800434a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d94:	f007 f9f2 	bl	800817c <HAL_ADCEx_MultiModeConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d9e:	f003 fad4 	bl	800434a <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0x168>)
 8000da4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000da6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000db6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000dbc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dce:	f006 fcdb 	bl	8007788 <HAL_ADC_AnalogWDGConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f003 fab7 	bl	800434a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	237f      	movs	r3, #127	; 0x7f
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dec:	2304      	movs	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dfa:	f006 f885 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000e04:	f003 faa1 	bl	800434a <Error_Handler>
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x170>)
 8000e0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000e0c:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000e12:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000e24:	f006 fcb0 	bl	8007788 <HAL_ADC_AnalogWDGConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000e2e:	f003 fa8c 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3748      	adds	r7, #72	; 0x48
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000374 	.word	0x20000374
 8000e40:	7dc00000 	.word	0x7dc00000
 8000e44:	b6902000 	.word	0xb6902000
 8000e48:	0017ffff 	.word	0x0017ffff

08000e4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f01d fb2c 	bl	801e4c2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_ADC3_Init+0xec>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eb2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed8:	f005 fab4 	bl	8006444 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ee2:	f003 fa32 	bl	800434a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ef2:	f007 f943 	bl	800817c <HAL_ADCEx_MultiModeConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000efc:	f003 fa25 	bl	800434a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_ADC3_Init+0xf0>)
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000f1e:	f005 fff3 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f28:	f003 fa0f 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200003e0 	.word	0x200003e0
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	b6982000 	.word	0xb6982000

08000f40 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f01d fab8 	bl	801e4c2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_ADC4_Init+0xc8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f9a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fc0:	f005 fa40 	bl	8006444 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f003 f9be 	bl	800434a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC4_Init+0xcc>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fec:	f005 ff8c 	bl	8006f08 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000ff6:	f003 f9a8 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000044c 	.word	0x2000044c
 8001008:	50000500 	.word	0x50000500
 800100c:	c75a0000 	.word	0xc75a0000

08001010 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f01d fa50 	bl	801e4c2 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_ADC5_Init+0xc8>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800106a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001090:	f005 f9d8 	bl	8006444 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800109a:	f003 f956 	bl	800434a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC5_Init+0xcc>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC5_Init+0xc4>)
 80010bc:	f005 ff24 	bl	8006f08 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010c6:	f003 f940 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004b8 	.word	0x200004b8
 80010d8:	50000600 	.word	0x50000600
 80010dc:	8c900008 	.word	0x8c900008

080010e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f01d f9e6 	bl	801e4c2 <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d14f      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f009 fc69 	bl	800a9e8 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800111c:	f003 f915 	bl	800434a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_ADC_MspInit+0x220>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001140:	2205      	movs	r2, #5
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001174:	f007 fdd4 	bl	8008d20 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800117e:	f003 f8e4 	bl	800434a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f007 f9d5 	bl	8008542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f007 f9ec 	bl	8008576 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800119e:	e114      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_ADC_MspInit+0x224>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d150      	bne.n	800124c <HAL_ADC_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f009 fc14 	bl	800a9e8 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0xea>
      Error_Handler();
 80011c6:	f003 f8c0 	bl	800434a <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    hdma_adc3.Instance = DMA1_Channel5;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_ADC_MspInit+0x230>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011fc:	2225      	movs	r2, #37	; 0x25
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800122e:	4837      	ldr	r0, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001230:	f007 fd76 	bl	8008d20 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x15e>
      Error_Handler();
 800123a:	f003 f886 	bl	800434a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800124a:	e0be      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ADC_MspInit+0x234>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d164      	bne.n	8001320 <HAL_ADC_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800125c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f009 fbbe 	bl	800a9e8 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8001272:	f003 f86a 	bl	800434a <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_ADC_MspInit+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x1c0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel6;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_ADC_MspInit+0x23c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012dc:	f007 fd20 	bl	8008d20 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 80012e6:	f003 f830 	bl	800434a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012f6:	e068      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000524 	.word	0x20000524
 8001300:	4002001c 	.word	0x4002001c
 8001304:	50000400 	.word	0x50000400
 8001308:	200006a4 	.word	0x200006a4
 800130c:	20000584 	.word	0x20000584
 8001310:	40020058 	.word	0x40020058
 8001314:	50000500 	.word	0x50000500
 8001318:	200005e4 	.word	0x200005e4
 800131c:	4002006c 	.word	0x4002006c
  else if(adcHandle->Instance==ADC5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0x2f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14f      	bne.n	80013ca <HAL_ADC_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fb54 	bl	800a9e8 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0x26a>
      Error_Handler();
 8001346:	f003 f800 	bl	800434a <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x294>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel7;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0x304>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800137c:	2227      	movs	r2, #39	; 0x27
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013b0:	f007 fcb6 	bl	8008d20 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0x2de>
      Error_Handler();
 80013ba:	f002 ffc6 	bl	800434a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	; 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50000600 	.word	0x50000600
 80013d8:	200006a4 	.word	0x200006a4
 80013dc:	40021000 	.word	0x40021000
 80013e0:	20000644 	.word	0x20000644
 80013e4:	40020080 	.word	0x40020080

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f01d f864 	bl	801e4c2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_DAC1_Init+0x80>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_DAC1_Init+0x84>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_DAC1_Init+0x80>)
 8001402:	f007 f8d2 	bl	80085aa <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f002 ff9d 	bl	800434a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001420:	2322      	movs	r3, #34	; 0x22
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_DAC1_Init+0x80>)
 800143c:	f007 fa3e 	bl	80088bc <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f002 ff80 	bl	800434a <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DAC1_Init+0x80>)
 8001452:	f007 fa33 	bl	80088bc <HAL_DAC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800145c:	f002 ff75 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200006a8 	.word	0x200006a8
 800146c:	50000800 	.word	0x50000800

08001470 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f01d f820 	bl	801e4c2 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DAC2_Init+0x6c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_DAC2_Init+0x70>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_DAC2_Init+0x6c>)
 800148a:	f007 f88e 	bl	80085aa <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001494:	f002 ff59 	bl	800434a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC2_Init+0x6c>)
 80014c4:	f007 f9fa 	bl	80088bc <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80014ce:	f002 ff3c 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200006bc 	.word	0x200006bc
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DAC_MspInit+0x178>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d17b      	bne.n	80015fe <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	; 0x30
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f007 ff1a 	bl	8009384 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_DAC_MspInit+0x184>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001558:	2206      	movs	r2, #6
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800155e:	2210      	movs	r2, #16
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800158c:	f007 fbc8 	bl	8008d20 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001596:	f002 fed8 	bl	800434a <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_DAC_MspInit+0x180>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015e2:	f007 fb9d 	bl	8008d20 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80015ec:	f002 fead 	bl	800434a <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015fc:	e029      	b.n	8001652 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_DAC_MspInit+0x190>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f007 fe99 	bl	8009384 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000800 	.word	0x50000800
 8001660:	40021000 	.word	0x40021000
 8001664:	200006d0 	.word	0x200006d0
 8001668:	40020030 	.word	0x40020030
 800166c:	20000730 	.word	0x20000730
 8001670:	40020044 	.word	0x40020044
 8001674:	50000c00 	.word	0x50000c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_DMA_Init+0xb0>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_DMA_Init+0xb0>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_DMA_Init+0xb0>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_DMA_Init+0xb0>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_DMA_Init+0xb0>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_DMA_Init+0xb0>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f006 ff45 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f006 ff5c 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	200c      	movs	r0, #12
 80016c4:	f006 ff3d 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f006 ff54 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200d      	movs	r0, #13
 80016d4:	f006 ff35 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016d8:	200d      	movs	r0, #13
 80016da:	f006 ff4c 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	200e      	movs	r0, #14
 80016e4:	f006 ff2d 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f006 ff44 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200f      	movs	r0, #15
 80016f4:	f006 ff25 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f006 ff3c 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2010      	movs	r0, #16
 8001704:	f006 ff1d 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f006 ff34 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2011      	movs	r0, #17
 8001714:	f006 ff15 	bl	8008542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f006 ff2c 	bl	8008576 <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f01c fec2 	bl	801e4c2 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001740:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001744:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <MX_FMC_Init+0xd0>)
 800174a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_FMC_Init+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_FMC_Init+0xcc>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001760:	2210      	movs	r2, #16
 8001762:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_FMC_Init+0xcc>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001786:	2200      	movs	r2, #0
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_FMC_Init+0xcc>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001792:	2200      	movs	r2, #0
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_FMC_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_FMC_Init+0xcc>)
 800179e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80017b8:	230f      	movs	r3, #15
 80017ba:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017bc:	230f      	movs	r3, #15
 80017be:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 15;
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017cc:	2310      	movs	r3, #16
 80017ce:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017d0:	2311      	movs	r3, #17
 80017d2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_FMC_Init+0xcc>)
 80017e0:	f009 ff72 	bl	800b6c8 <HAL_SRAM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_FMC_Init+0xc2>
  {
    Error_Handler( );
 80017ea:	f002 fdae 	bl	800434a <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000790 	.word	0x20000790
 80017fc:	a0000104 	.word	0xa0000104

08001800 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d13f      	bne.n	800189c <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_FMC_MspInit+0xa4>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6513      	str	r3, [r2, #80]	; 0x50
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_FMC_MspInit+0xa8>)
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184c:	230c      	movs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4815      	ldr	r0, [pc, #84]	; (80018ac <HAL_FMC_MspInit+0xac>)
 8001856:	f007 fd95 	bl	8009384 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800185a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800185e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186c:	230c      	movs	r3, #12
 800186e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <HAL_FMC_MspInit+0xb0>)
 8001876:	f007 fd85 	bl	8009384 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800187a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800187e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800188c:	230c      	movs	r3, #12
 800188e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_FMC_MspInit+0xb4>)
 8001896:	f007 fd75 	bl	8009384 <HAL_GPIO_Init>
 800189a:	e000      	b.n	800189e <HAL_FMC_MspInit+0x9e>
    return;
 800189c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200007e8 	.word	0x200007e8
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48001400 	.word	0x48001400
 80018b0:	48001000 	.word	0x48001000
 80018b4:	48000c00 	.word	0x48000c00

080018b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018c0:	f7ff ff9e 	bl	8001800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xdc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a24      	ldr	r2, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_GPIO_Init+0xdc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_GPIO_Init+0xdc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f248 3104 	movw	r1, #33540	; 0x8304
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f007 fe84 	bl	8009688 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001980:	f248 3304 	movw	r3, #33540	; 0x8304
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f007 fcf2 	bl	8009384 <HAL_GPIO_Init>

}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d013      	beq.n	80019ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019d4:	e000      	b.n	80019d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f9      	beq.n	80019d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffc9 	bl	80019ac <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
    return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <get_systick>:

int32_t get_systick()
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <get_systick+0x14>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <diff_systick>:

int32_t diff_systick( int32_t b, int32_t a )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	int d = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
	if( b < a )
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	da04      	bge.n	8001a6c <diff_systick+0x20>
	{
	  d = a-b;
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e006      	b.n	8001a7a <diff_systick+0x2e>
	}
	else
	{
	  d = a+(SysTick->LOAD-b);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <diff_systick+0x3c>)
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
	}
	return d;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <text_width_f>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color );
tRectangle get_char_rect( const tFont *pFont, uint8_t c );
tRectangle get_text_rect( const tFont *pFont, char *pString );

float text_width_f( nk_handle handle, float h, const char* t, int len )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a98:	6079      	str	r1, [r7, #4]
 8001a9a:	603a      	str	r2, [r7, #0]

	return get_text_rect( &fontUbuntuBookRNormal16, t ).width;
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <text_width_f+0x34>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fc30 	bl	800230a <get_text_rect>
 8001aaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	080230b8 	.word	0x080230b8

08001ac4 <lcd_config>:

void lcd_config( void );
void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color );

void lcd_config( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001aca:	2201      	movs	r2, #1
 8001acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f007 fdd8 	bl	8009688 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f007 fdd1 	bl	8009688 <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f004 f8fc 	bl	8005ce4 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f007 fdc7 	bl	8009688 <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001afa:	2064      	movs	r0, #100	; 0x64
 8001afc:	f004 f8f2 	bl	8005ce4 <HAL_Delay>

	*addr_cmd = 0x01;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <lcd_config+0xa0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f004 f8eb 	bl	8005ce4 <HAL_Delay>
	*addr_cmd = 0x11;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <lcd_config+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2211      	movs	r2, #17
 8001b14:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b16:	200a      	movs	r0, #10
 8001b18:	f004 f8e4 	bl	8005ce4 <HAL_Delay>
	*addr_cmd = 0x3A;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <lcd_config+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	223a      	movs	r2, #58	; 0x3a
 8001b22:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <lcd_config+0xa4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2206      	movs	r2, #6
 8001b2a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x36;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <lcd_config+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2236      	movs	r2, #54	; 0x36
 8001b32:	801a      	strh	r2, [r3, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <lcd_config+0xa4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	22e0      	movs	r2, #224	; 0xe0
 8001b3a:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <lcd_config+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2229      	movs	r2, #41	; 0x29
 8001b42:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b44:	200a      	movs	r0, #10
 8001b46:	f004 f8cd 	bl	8005ce4 <HAL_Delay>

	lcd_rect( 0, 0, 480, 320, 0x0000 );
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f867 	bl	8001c2c <lcd_rect>
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <nk_colot_to_rgb666>:

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	uint32_t rgb666 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]

	color.r = (color.r*color.a)/256.0;
 8001b78:	793b      	ldrb	r3, [r7, #4]
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcf7 	bl	8000574 <__aeabi_i2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001b8c:	f7fe fe86 	bl	800089c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f82e 	bl	8000bf8 <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	713b      	strb	r3, [r7, #4]
	color.g = (color.g*color.a)/256.0;
 8001ba2:	797b      	ldrb	r3, [r7, #5]
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fce2 	bl	8000574 <__aeabi_i2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001bb6:	f7fe fe71 	bl	800089c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff f819 	bl	8000bf8 <__aeabi_d2uiz>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	717b      	strb	r3, [r7, #5]
	color.b = (color.b*color.a)/256.0;
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	79fa      	ldrb	r2, [r7, #7]
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fccd 	bl	8000574 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <nk_colot_to_rgb666+0xbc>)
 8001be0:	f7fe fe5c 	bl	800089c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7ff f804 	bl	8000bf8 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	71bb      	strb	r3, [r7, #6]

	color.r >>= 2;
 8001bf6:	793b      	ldrb	r3, [r7, #4]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	713b      	strb	r3, [r7, #4]
	color.g >>= 2;
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	717b      	strb	r3, [r7, #5]
	color.b >>= 2;
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	71bb      	strb	r3, [r7, #6]
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	031a      	lsls	r2, r3, #12
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	4313      	orrs	r3, r2
 8001c18:	79ba      	ldrb	r2, [r7, #6]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
	return rgb666;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40700000 	.word	0x40700000

08001c2c <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 8001c2c:	b490      	push	{r4, r7}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y0 = y;
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t x1 = x + w - 1;
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	4413      	add	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y1 = y + h - 1;
 8001c60:	88ba      	ldrh	r2, [r7, #4]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	843b      	strh	r3, [r7, #32]

	if( x0 < 0 )
 8001c6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da02      	bge.n	8001c7c <lcd_rect+0x50>
	{
		x0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c7a:	e007      	b.n	8001c8c <lcd_rect+0x60>
	}
	else if( x0 > 480 - 1 )
 8001c7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c84:	db02      	blt.n	8001c8c <lcd_rect+0x60>
	{
		x0 = 480 - 1;
 8001c86:	f240 13df 	movw	r3, #479	; 0x1df
 8001c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	if( x1 < 0 )
 8001c8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da02      	bge.n	8001c9a <lcd_rect+0x6e>
	{
		x1 = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c98:	e007      	b.n	8001caa <lcd_rect+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001c9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c9e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ca2:	db02      	blt.n	8001caa <lcd_rect+0x7e>
	{
		x1 = 480 - 1;
 8001ca4:	f240 13df 	movw	r3, #479	; 0x1df
 8001ca8:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 < 0 )
 8001caa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	da02      	bge.n	8001cb8 <lcd_rect+0x8c>
	{
		y0 = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001cb6:	e007      	b.n	8001cc8 <lcd_rect+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cc0:	db02      	blt.n	8001cc8 <lcd_rect+0x9c>
	{
		y0 = 320 - 1;
 8001cc2:	f240 133f 	movw	r3, #319	; 0x13f
 8001cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( y1 < 0 )
 8001cc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da02      	bge.n	8001cd6 <lcd_rect+0xaa>
	{
		y1 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	843b      	strh	r3, [r7, #32]
 8001cd4:	e007      	b.n	8001ce6 <lcd_rect+0xba>
	}
	else if( y1 > 320 - 1 )
 8001cd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cde:	db02      	blt.n	8001ce6 <lcd_rect+0xba>
	{
		y1 = 320 - 1;
 8001ce0:	f240 133f 	movw	r3, #319	; 0x13f
 8001ce4:	843b      	strh	r3, [r7, #32]
	}

	if( x0 > x1 )
 8001ce6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001cea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dd06      	ble.n	8001d00 <lcd_rect+0xd4>
	{
		int tmp = x0;
 8001cf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001cf6:	61bb      	str	r3, [r7, #24]
		x0 = x1;
 8001cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
		x1 = tmp;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 > y1 )
 8001d00:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001d04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dd06      	ble.n	8001d1a <lcd_rect+0xee>
	{
		int tmp = y0;
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d10:	617b      	str	r3, [r7, #20]
		y0 = y1;
 8001d12:	8c3b      	ldrh	r3, [r7, #32]
 8001d14:	84bb      	strh	r3, [r7, #36]	; 0x24
		y1 = tmp;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	843b      	strh	r3, [r7, #32]
	}

	w = x1 - x0 + 1;
 8001d1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001d28:	8c3a      	ldrh	r2, [r7, #32]
 8001d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
	uint32_t n = w*h;
 8001d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	613b      	str	r3, [r7, #16]

	uint16_t color_l = (color>>0)&0x1FF;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	0a5b      	lsrs	r3, r3, #9
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <lcd_rect+0x1dc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	222a      	movs	r2, #42	; 0x2a
 8001d64:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001d66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <lcd_rect+0x1e0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a12      	lsrs	r2, r2, #8
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <lcd_rect+0x1e0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001d7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <lcd_rect+0x1e0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0a12      	lsrs	r2, r2, #8
 8001d86:	b292      	uxth	r2, r2
 8001d88:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001d8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <lcd_rect+0x1e0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	b292      	uxth	r2, r2
 8001d94:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <lcd_rect+0x1dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	222b      	movs	r2, #43	; 0x2b
 8001d9c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001d9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <lcd_rect+0x1e0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0a12      	lsrs	r2, r2, #8
 8001da6:	b292      	uxth	r2, r2
 8001da8:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <lcd_rect+0x1e0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	b292      	uxth	r2, r2
 8001db4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001db6:	8c3a      	ldrh	r2, [r7, #32]
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <lcd_rect+0x1e0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a12      	lsrs	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001dc2:	8c3a      	ldrh	r2, [r7, #32]
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <lcd_rect+0x1e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <lcd_rect+0x1dc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	222c      	movs	r2, #44	; 0x2c
 8001dd4:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e00a      	b.n	8001df2 <lcd_rect+0x1c6>
	{
		*addr_data = color_l;
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <lcd_rect+0x1e0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	89fa      	ldrh	r2, [r7, #14]
 8001de2:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <lcd_rect+0x1e0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	89ba      	ldrh	r2, [r7, #12]
 8001dea:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	3301      	adds	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f0      	bcc.n	8001ddc <lcd_rect+0x1b0>
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	603a      	str	r2, [r7, #0]
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	80bb      	strh	r3, [r7, #4]
	int16_t x0 = x;
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	82fb      	strh	r3, [r7, #22]
	int16_t y0 = y;
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	82bb      	strh	r3, [r7, #20]
	int16_t x1 = x + 1;
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	827b      	strh	r3, [r7, #18]
	int16_t y1 = y + 1;
 8001e30:	88bb      	ldrh	r3, [r7, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	823b      	strh	r3, [r7, #16]
	uint16_t color_l = (color>>0)&0x1FF;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e40:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e4c:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	222a      	movs	r2, #42	; 0x2a
 8001e54:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001e56:	8afa      	ldrh	r2, [r7, #22]
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0a12      	lsrs	r2, r2, #8
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001e62:	8afa      	ldrh	r2, [r7, #22]
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001e6e:	8a7a      	ldrh	r2, [r7, #18]
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0a12      	lsrs	r2, r2, #8
 8001e76:	b292      	uxth	r2, r2
 8001e78:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001e7a:	8a7a      	ldrh	r2, [r7, #18]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	b292      	uxth	r2, r2
 8001e84:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	222b      	movs	r2, #43	; 0x2b
 8001e8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001e8e:	8aba      	ldrh	r2, [r7, #20]
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0a12      	lsrs	r2, r2, #8
 8001e96:	b292      	uxth	r2, r2
 8001e98:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001e9a:	8aba      	ldrh	r2, [r7, #20]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001ea6:	8a3a      	ldrh	r2, [r7, #16]
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0a12      	lsrs	r2, r2, #8
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001eb2:	8a3a      	ldrh	r2, [r7, #16]
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <lcd_set_pixel+0xd4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	222c      	movs	r2, #44	; 0x2c
 8001ec4:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	89fa      	ldrh	r2, [r7, #14]
 8001ecc:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <lcd_set_pixel+0xd8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	89ba      	ldrh	r2, [r7, #12]
 8001ed4:	801a      	strh	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <lcd_set_pixel_bench>:


int32_t lcd_set_pixel_bench( int16_t x, int16_t y, uint32_t color )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	603a      	str	r2, [r7, #0]
 8001ef6:	80fb      	strh	r3, [r7, #6]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	80bb      	strh	r3, [r7, #4]
	int32_t a, b, d;
	int16_t x0 = x;
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 8001f00:	88bb      	ldrh	r3, [r7, #4]
 8001f02:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + 4;
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	3304      	adds	r3, #4
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + 4;
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	833b      	strh	r3, [r7, #24]
	uint16_t color_l = (color>>0)&0x1FF;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1c:	82fb      	strh	r3, [r7, #22]
	uint16_t color_h = (color>>9)&0x1FF;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	0a5b      	lsrs	r3, r3, #9
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	82bb      	strh	r3, [r7, #20]

	*addr_cmd = 0x2A;
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	222a      	movs	r2, #42	; 0x2a
 8001f30:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001f32:	8bfa      	ldrh	r2, [r7, #30]
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0a12      	lsrs	r2, r2, #8
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001f3e:	8bfa      	ldrh	r2, [r7, #30]
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	b292      	uxth	r2, r2
 8001f48:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001f4a:	8b7a      	ldrh	r2, [r7, #26]
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0a12      	lsrs	r2, r2, #8
 8001f52:	b292      	uxth	r2, r2
 8001f54:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001f56:	8b7a      	ldrh	r2, [r7, #26]
 8001f58:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	222b      	movs	r2, #43	; 0x2b
 8001f68:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001f6a:	8bba      	ldrh	r2, [r7, #28]
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0a12      	lsrs	r2, r2, #8
 8001f72:	b292      	uxth	r2, r2
 8001f74:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001f76:	8bba      	ldrh	r2, [r7, #28]
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001f82:	8b3a      	ldrh	r2, [r7, #24]
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0a12      	lsrs	r2, r2, #8
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001f8e:	8b3a      	ldrh	r2, [r7, #24]
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]

	a = get_systick();
 8001f9a:	f7ff fd4b 	bl	8001a34 <get_systick>
 8001f9e:	6138      	str	r0, [r7, #16]
	*addr_cmd = 0x2C;
 8001fa0:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <lcd_set_pixel_bench+0x1d8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	8afa      	ldrh	r2, [r7, #22]
 8001fae:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fb0:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	8aba      	ldrh	r2, [r7, #20]
 8001fb6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	8afa      	ldrh	r2, [r7, #22]
 8001fbe:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	8aba      	ldrh	r2, [r7, #20]
 8001fc6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	8afa      	ldrh	r2, [r7, #22]
 8001fce:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	8aba      	ldrh	r2, [r7, #20]
 8001fd6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	8aba      	ldrh	r2, [r7, #20]
 8001fe6:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	8afa      	ldrh	r2, [r7, #22]
 8001fee:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	8aba      	ldrh	r2, [r7, #20]
 8001ff6:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	8aba      	ldrh	r2, [r7, #20]
 8002006:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	8afa      	ldrh	r2, [r7, #22]
 800200e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	8aba      	ldrh	r2, [r7, #20]
 8002016:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	8afa      	ldrh	r2, [r7, #22]
 800201e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	8aba      	ldrh	r2, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	8afa      	ldrh	r2, [r7, #22]
 800202e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	8aba      	ldrh	r2, [r7, #20]
 8002036:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	8afa      	ldrh	r2, [r7, #22]
 800203e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	8aba      	ldrh	r2, [r7, #20]
 8002046:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	8afa      	ldrh	r2, [r7, #22]
 800204e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	8aba      	ldrh	r2, [r7, #20]
 8002056:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	8aba      	ldrh	r2, [r7, #20]
 8002066:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	8afa      	ldrh	r2, [r7, #22]
 800206e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	8aba      	ldrh	r2, [r7, #20]
 8002076:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	8afa      	ldrh	r2, [r7, #22]
 800207e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	8aba      	ldrh	r2, [r7, #20]
 8002086:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	8afa      	ldrh	r2, [r7, #22]
 800208e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	8aba      	ldrh	r2, [r7, #20]
 8002096:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	8afa      	ldrh	r2, [r7, #22]
 800209e:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <lcd_set_pixel_bench+0x1dc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	8aba      	ldrh	r2, [r7, #20]
 80020a6:	801a      	strh	r2, [r3, #0]
	b = get_systick();
 80020a8:	f7ff fcc4 	bl	8001a34 <get_systick>
 80020ac:	60f8      	str	r0, [r7, #12]
	d = diff_systick(b,a);
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fccb 	bl	8001a4c <diff_systick>
 80020b6:	60b8      	str	r0, [r7, #8]
	return d;
 80020b8:	68bb      	ldr	r3, [r7, #8]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <lcd_text>:
void lcd_text( const tFramebuf *fb, uint16_t x0, uint16_t y0, char *str, uint32_t color )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	4613      	mov	r3, r2
 80020dc:	813b      	strh	r3, [r7, #8]
	for(; *str; ++str) {
 80020de:	e02a      	b.n	8002136 <lcd_text+0x6a>
	        // get char and make sure its in range of font
	        int chr = *(uint8_t *)str;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	61fb      	str	r3, [r7, #28]
	        if (chr < 32 || chr > 127) {
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b1f      	cmp	r3, #31
 80020ea:	dd02      	ble.n	80020f2 <lcd_text+0x26>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b7f      	cmp	r3, #127	; 0x7f
 80020f0:	dd01      	ble.n	80020f6 <lcd_text+0x2a>
	            chr = 127;
 80020f2:	237f      	movs	r3, #127	; 0x7f
 80020f4:	61fb      	str	r3, [r7, #28]
	        }
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 80020f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80020fa:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002104:	9201      	str	r2, [sp, #4]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4603      	mov	r3, r0
 800210a:	460a      	mov	r2, r1
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <lcd_text+0x7c>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f81c 	bl	800214c <draw_char>
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	490a      	ldr	r1, [pc, #40]	; (8002148 <lcd_text+0x7c>)
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8c9 	bl	80022b6 <get_char_rect>
 8002124:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002128:	b29a      	uxth	r2, r3
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	4413      	add	r3, r2
 800212e:	817b      	strh	r3, [r7, #10]
	for(; *str; ++str) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1d0      	bne.n	80020e0 <lcd_text+0x14>
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	080230b8 	.word	0x080230b8

0800214c <draw_char>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	460b      	mov	r3, r1
 800215c:	80fb      	strh	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	80bb      	strh	r3, [r7, #4]
    int16_t x, y, w, bitmap, b;
    int16_t px, py;
    const tGlyph *pGlyph;

    pGlyph = pFont->pGlyphs[c-32];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800216a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800216e:	3b20      	subs	r3, #32
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61fb      	str	r3, [r7, #28]

    y0 += pFont->bbxh;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800217e:	b29a      	uxth	r2, r3
 8002180:	88bb      	ldrh	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	80bb      	strh	r3, [r7, #4]
    y0 -= pFont->descent;
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	79db      	ldrb	r3, [r3, #7]
 800218e:	b29b      	uxth	r3, r3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b29b      	uxth	r3, r3
 8002194:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxh;
 8002196:	88ba      	ldrh	r2, [r7, #4]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxy;
 80021a6:	88ba      	ldrh	r2, [r7, #4]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	80bb      	strh	r3, [r7, #4]

    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 80021b6:	2300      	movs	r3, #0
 80021b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021ba:	e06f      	b.n	800229c <draw_char+0x150>
    {
        py = y0+y;
 80021bc:	88ba      	ldrh	r2, [r7, #4]
 80021be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021c0:	4413      	add	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	837b      	strh	r3, [r7, #26]

        w = (pGlyph->bbxw-1)/8+1;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da00      	bge.n	80021d4 <draw_char+0x88>
 80021d2:	3307      	adds	r3, #7
 80021d4:	10db      	asrs	r3, r3, #3
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	833b      	strh	r3, [r7, #24]

        int16_t yw = y*w;
 80021de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021e0:	8b3b      	ldrh	r3, [r7, #24]
 80021e2:	fb12 f303 	smulbb	r3, r2, r3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	82fb      	strh	r3, [r7, #22]
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 80021ea:	2300      	movs	r3, #0
 80021ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021ee:	e047      	b.n	8002280 <draw_char+0x134>
        {
            bitmap = pGlyph->pBitmap[yw+x/8];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80021f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	da00      	bge.n	8002202 <draw_char+0xb6>
 8002200:	3307      	adds	r3, #7
 8002202:	10db      	asrs	r3, r3, #3
 8002204:	b21b      	sxth	r3, r3
 8002206:	440b      	add	r3, r1
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	82bb      	strh	r3, [r7, #20]

            for( b = 0 ; b < 8 ; b++ )
 800220e:	2300      	movs	r3, #0
 8002210:	847b      	strh	r3, [r7, #34]	; 0x22
 8002212:	e02b      	b.n	800226c <draw_char+0x120>
            {
                if( x+b >= pGlyph->bbxw )
 8002214:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002218:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800221c:	4413      	add	r3, r2
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f992 2009 	ldrsb.w	r2, [r2, #9]
 8002224:	4293      	cmp	r3, r2
 8002226:	da26      	bge.n	8002276 <draw_char+0x12a>
                {
                    break;
                }

                px = x0+x+b;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002232:	4413      	add	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	827b      	strh	r3, [r7, #18]

                if( bitmap & (0x80>>b) )
 8002238:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800223c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	fa41 f303 	asr.w	r3, r1, r3
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <draw_char+0x114>
                {
                    //set_pixel( px, py, color );
                    //lcd_rect( px, py, 1, 1, color);
                	setpixel_checked(fb, px, py, color, 1);
 800224c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002250:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	2001      	movs	r0, #1
 8002258:	9000      	str	r0, [sp, #0]
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f00a ff06 	bl	800d06c <setpixel_checked>
            for( b = 0 ; b < 8 ; b++ )
 8002260:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002264:	b29b      	uxth	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	b29b      	uxth	r3, r3
 800226a:	847b      	strh	r3, [r7, #34]	; 0x22
 800226c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002270:	2b07      	cmp	r3, #7
 8002272:	ddcf      	ble.n	8002214 <draw_char+0xc8>
 8002274:	e000      	b.n	8002278 <draw_char+0x12c>
                    break;
 8002276:	bf00      	nop
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 8002278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800227a:	3308      	adds	r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002286:	b21b      	sxth	r3, r3
 8002288:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800228c:	429a      	cmp	r2, r3
 800228e:	dbaf      	blt.n	80021f0 <draw_char+0xa4>
    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 8002290:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002294:	b29b      	uxth	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	db87      	blt.n	80021bc <draw_char+0x70>
                }
            }
        }
    }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <get_char_rect>:


tRectangle get_char_rect( const tFont *pFont, uint8_t c )
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	71fb      	strb	r3, [r7, #7]
    tRectangle rect = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]

    rect.width = pFont->pGlyphs[c-32]->dwidthx;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d8:	3b20      	subs	r3, #32
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	79db      	ldrb	r3, [r3, #7]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	82bb      	strh	r3, [r7, #20]
    rect.height = pFont->bbxh;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80022ec:	b21b      	sxth	r3, r3
 80022ee:	82fb      	strh	r3, [r7, #22]
    return rect;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	cb03      	ldmia	r3!, {r0, r1}
 80022fa:	6010      	str	r0, [r2, #0]
 80022fc:	6051      	str	r1, [r2, #4]
}
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <get_text_rect>:

tRectangle get_text_rect( const tFont *pFont, char *pString )
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
	uint8_t i;
	tRectangle rect = {0};
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]

	rect.height = pFont->bbxh;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002326:	b21b      	sxth	r3, r3
 8002328:	837b      	strh	r3, [r7, #26]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002330:	e019      	b.n	8002366 <get_text_rect+0x5c>
	{
		rect.width += get_char_rect( pFont, pString[i] ).width;
 8002332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffb7 	bl	80022b6 <get_char_rect>
 8002348:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800234c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002350:	b292      	uxth	r2, r2
 8002352:	b29b      	uxth	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	b21b      	sxth	r3, r3
 800235a:	833b      	strh	r3, [r7, #24]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800235c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002360:	3301      	adds	r3, #1
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1de      	bne.n	8002332 <get_text_rect+0x28>
    }

    return rect;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	461a      	mov	r2, r3
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	cb03      	ldmia	r3!, {r0, r1}
 800237e:	6010      	str	r0, [r2, #0]
 8002380:	6051      	str	r1, [r2, #4]
}
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 800238c:	b490      	push	{r4, r7}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	80fb      	strh	r3, [r7, #6]
 800239e:	4603      	mov	r3, r0
 80023a0:	80bb      	strh	r3, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + w - 1;
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4413      	add	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + h - 1;
 80023c0:	88ba      	ldrh	r2, [r7, #4]
 80023c2:	883b      	ldrh	r3, [r7, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	833b      	strh	r3, [r7, #24]

	if( x0 < 0 )
 80023ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da02      	bge.n	80023dc <lcd_bmp+0x50>
	{
		x0 = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	83fb      	strh	r3, [r7, #30]
 80023da:	e007      	b.n	80023ec <lcd_bmp+0x60>
	}
	else if( x0 > 480 - 1 )
 80023dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80023e4:	db02      	blt.n	80023ec <lcd_bmp+0x60>
	{
		x0 = 480 - 1;
 80023e6:	f240 13df 	movw	r3, #479	; 0x1df
 80023ea:	83fb      	strh	r3, [r7, #30]
	}

	if( x1 < 0 )
 80023ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	da02      	bge.n	80023fa <lcd_bmp+0x6e>
	{
		x1 = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	837b      	strh	r3, [r7, #26]
 80023f8:	e007      	b.n	800240a <lcd_bmp+0x7e>
	}
	else if( x1 > 480 - 1 )
 80023fa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023fe:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002402:	db02      	blt.n	800240a <lcd_bmp+0x7e>
	{
		x1 = 480 - 1;
 8002404:	f240 13df 	movw	r3, #479	; 0x1df
 8002408:	837b      	strh	r3, [r7, #26]
	}

	if( y0 < 0 )
 800240a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	da02      	bge.n	8002418 <lcd_bmp+0x8c>
	{
		y0 = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	83bb      	strh	r3, [r7, #28]
 8002416:	e007      	b.n	8002428 <lcd_bmp+0x9c>
	}
	else if( y0 > 320 - 1 )
 8002418:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800241c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002420:	db02      	blt.n	8002428 <lcd_bmp+0x9c>
	{
		y0 = 320 - 1;
 8002422:	f240 133f 	movw	r3, #319	; 0x13f
 8002426:	83bb      	strh	r3, [r7, #28]
	}

	if( y1 < 0 )
 8002428:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da02      	bge.n	8002436 <lcd_bmp+0xaa>
	{
		y1 = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	833b      	strh	r3, [r7, #24]
 8002434:	e007      	b.n	8002446 <lcd_bmp+0xba>
	}
	else if( y1 > 320 - 1 )
 8002436:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800243a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800243e:	db02      	blt.n	8002446 <lcd_bmp+0xba>
	{
		y1 = 320 - 1;
 8002440:	f240 133f 	movw	r3, #319	; 0x13f
 8002444:	833b      	strh	r3, [r7, #24]
	}

	if( x0 > x1 )
 8002446:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800244a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800244e:	429a      	cmp	r2, r3
 8002450:	dd06      	ble.n	8002460 <lcd_bmp+0xd4>
	{
		int tmp = x0;
 8002452:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002456:	613b      	str	r3, [r7, #16]
		x0 = x1;
 8002458:	8b7b      	ldrh	r3, [r7, #26]
 800245a:	83fb      	strh	r3, [r7, #30]
		x1 = tmp;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	837b      	strh	r3, [r7, #26]
	}

	if( y0 > y1 )
 8002460:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002464:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002468:	429a      	cmp	r2, r3
 800246a:	dd06      	ble.n	800247a <lcd_bmp+0xee>
	{
		int tmp = y0;
 800246c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002470:	60fb      	str	r3, [r7, #12]
		y0 = y1;
 8002472:	8b3b      	ldrh	r3, [r7, #24]
 8002474:	83bb      	strh	r3, [r7, #28]
		y1 = tmp;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	833b      	strh	r3, [r7, #24]
	}

	w = x1 - x0 + 1;
 800247a:	8b7a      	ldrh	r2, [r7, #26]
 800247c:	8bfb      	ldrh	r3, [r7, #30]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8002488:	8b3a      	ldrh	r2, [r7, #24]
 800248a:	8bbb      	ldrh	r3, [r7, #28]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
	uint32_t n = w*h;
 800249a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800249e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	60bb      	str	r3, [r7, #8]

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <lcd_bmp+0x1d8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	222a      	movs	r2, #42	; 0x2a
 80024ae:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 80024b0:	8bfa      	ldrh	r2, [r7, #30]
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <lcd_bmp+0x1dc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a12      	lsrs	r2, r2, #8
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 80024bc:	8bfa      	ldrh	r2, [r7, #30]
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <lcd_bmp+0x1dc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 80024c8:	8b7a      	ldrh	r2, [r7, #26]
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <lcd_bmp+0x1dc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0a12      	lsrs	r2, r2, #8
 80024d0:	b292      	uxth	r2, r2
 80024d2:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 80024d4:	8b7a      	ldrh	r2, [r7, #26]
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <lcd_bmp+0x1dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	b292      	uxth	r2, r2
 80024de:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <lcd_bmp+0x1d8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	222b      	movs	r2, #43	; 0x2b
 80024e6:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 80024e8:	8bba      	ldrh	r2, [r7, #28]
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <lcd_bmp+0x1dc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0a12      	lsrs	r2, r2, #8
 80024f0:	b292      	uxth	r2, r2
 80024f2:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 80024f4:	8bba      	ldrh	r2, [r7, #28]
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <lcd_bmp+0x1dc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	b292      	uxth	r2, r2
 80024fe:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8002500:	8b3a      	ldrh	r2, [r7, #24]
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <lcd_bmp+0x1dc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0a12      	lsrs	r2, r2, #8
 8002508:	b292      	uxth	r2, r2
 800250a:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 800250c:	8b3a      	ldrh	r2, [r7, #24]
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <lcd_bmp+0x1dc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	b292      	uxth	r2, r2
 8002516:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <lcd_bmp+0x1d8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	222c      	movs	r2, #44	; 0x2c
 800251e:	801a      	strh	r2, [r3, #0]
	for( i = 0 ; i < n ; i++ )
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e014      	b.n	8002550 <lcd_bmp+0x1c4>
	{
		*addr_data = *buf;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <lcd_bmp+0x1dc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b292      	uxth	r2, r2
 8002530:	801a      	strh	r2, [r3, #0]
		buf++;
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	3301      	adds	r3, #1
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
		*addr_data = *buf;
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <lcd_bmp+0x1dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b292      	uxth	r2, r2
 8002542:	801a      	strh	r2, [r3, #0]
		buf++;
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	3301      	adds	r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
	for( i = 0 ; i < n ; i++ )
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3e6      	bcc.n	8002526 <lcd_bmp+0x19a>
	}
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bc90      	pop	{r4, r7}
 8002562:	4770      	bx	lr
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <oscilloscope_process>:
    nk_bool draw_bg;
    int draw_signals;
};
int visible = 0;
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b0e6      	sub	sp, #408	; 0x198
 8002570:	af04      	add	r7, sp, #16
 8002572:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002576:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800257a:	6018      	str	r0, [r3, #0]
 800257c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002580:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002584:	6019      	str	r1, [r3, #0]
	visible = 0;
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <oscilloscope_process+0x1d0>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 480, 320), NK_WINDOW_MINIMIZABLE ) )
 800258c:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8002740 <oscilloscope_process+0x1d4>
 8002590:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002744 <oscilloscope_process+0x1d8>
 8002594:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8002748 <oscilloscope_process+0x1dc>
 8002598:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002748 <oscilloscope_process+0x1dc>
 800259c:	f011 f896 	bl	80136cc <nk_rect>
 80025a0:	eeb0 6a40 	vmov.f32	s12, s0
 80025a4:	eef0 6a60 	vmov.f32	s13, s1
 80025a8:	eeb0 7a41 	vmov.f32	s14, s2
 80025ac:	eef0 7a61 	vmov.f32	s15, s3
 80025b0:	ed87 6a44 	vstr	s12, [r7, #272]	; 0x110
 80025b4:	edc7 6a45 	vstr	s13, [r7, #276]	; 0x114
 80025b8:	ed87 7a46 	vstr	s14, [r7, #280]	; 0x118
 80025bc:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
 80025c0:	ed97 6a44 	vldr	s12, [r7, #272]	; 0x110
 80025c4:	edd7 6a45 	vldr	s13, [r7, #276]	; 0x114
 80025c8:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 80025cc:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80025d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80025d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025d8:	2210      	movs	r2, #16
 80025da:	eeb0 0a46 	vmov.f32	s0, s12
 80025de:	eef0 0a66 	vmov.f32	s1, s13
 80025e2:	eeb0 1a47 	vmov.f32	s2, s14
 80025e6:	eef0 1a67 	vmov.f32	s3, s15
 80025ea:	4958      	ldr	r1, [pc, #352]	; (800274c <oscilloscope_process+0x1e0>)
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	f01a fb38 	bl	801cc62 <nk_begin>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f001 8172 	beq.w	80038de <oscilloscope_process+0x1372>
	{
		visible = 1;
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <oscilloscope_process+0x1d0>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
        osc->draw_bg = nk_true;
 8002600:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002604:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 8002610:	484f      	ldr	r0, [pc, #316]	; (8002750 <oscilloscope_process+0x1e4>)
 8002612:	f019 fce3 	bl	801bfdc <nk_strlen>
 8002616:	4603      	mov	r3, r0
 8002618:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800261c:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8002620:	f240 2267 	movw	r2, #615	; 0x267
 8002624:	9202      	str	r2, [sp, #8]
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	4b49      	ldr	r3, [pc, #292]	; (8002750 <oscilloscope_process+0x1e4>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	4a49      	ldr	r2, [pc, #292]	; (8002754 <oscilloscope_process+0x1e8>)
 8002630:	2101      	movs	r1, #1
 8002632:	6800      	ldr	r0, [r0, #0]
 8002634:	f019 fa24 	bl	801ba80 <nk_tree_push_hashed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a5 	beq.w	800278a <oscilloscope_process+0x21e>
            osc->draw_bg = nk_false;
 8002640:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002644:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <oscilloscope_process+0x1ec>)
 8002652:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800265c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002660:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002664:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8002668:	2204      	movs	r2, #4
 800266a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800266e:	2101      	movs	r1, #1
 8002670:	6800      	ldr	r0, [r0, #0]
 8002672:	f010 fad7 	bl	8012c24 <nk_layout_row>
            if (osc->acquire_run) {
 8002676:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800267a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <oscilloscope_process+0x140>
                if (nk_button_label(ctx, "Stop")) {
 8002686:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800268a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800268e:	4933      	ldr	r1, [pc, #204]	; (800275c <oscilloscope_process+0x1f0>)
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f00c fad3 	bl	800ec3c <nk_button_label>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d019      	beq.n	80026d0 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_false;
 800269c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e011      	b.n	80026d0 <oscilloscope_process+0x164>
                }
            } else {
                if (nk_button_label(ctx, "Run")) {
 80026ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026b4:	492a      	ldr	r1, [pc, #168]	; (8002760 <oscilloscope_process+0x1f4>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	f00c fac0 	bl	800ec3c <nk_button_label>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <oscilloscope_process+0x164>
                    osc->acquire_run = nk_true;
 80026c2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
                }
            }

            if (nk_button_label(ctx, "Single")) {
 80026d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026d8:	4922      	ldr	r1, [pc, #136]	; (8002764 <oscilloscope_process+0x1f8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	f00c faae 	bl	800ec3c <nk_button_label>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <oscilloscope_process+0x188>
                osc->acquire_single = nk_true;
 80026e6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	605a      	str	r2, [r3, #4]
            }

            if (nk_button_label(ctx, "Draw")) {
 80026f4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026fc:	491a      	ldr	r1, [pc, #104]	; (8002768 <oscilloscope_process+0x1fc>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f00c fa9c 	bl	800ec3c <nk_button_label>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d038      	beq.n	800277c <oscilloscope_process+0x210>
                if (osc->draw_signals + 1 < 3) {
 800270a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800270e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002718:	2b01      	cmp	r3, #1
 800271a:	dc27      	bgt.n	800276c <oscilloscope_process+0x200>
                    osc->draw_signals += 1;
 800271c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002720:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002730:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800273a:	e01f      	b.n	800277c <oscilloscope_process+0x210>
 800273c:	200007ec 	.word	0x200007ec
 8002740:	43a00000 	.word	0x43a00000
 8002744:	43f00000 	.word	0x43f00000
 8002748:	00000000 	.word	0x00000000
 800274c:	080210e8 	.word	0x080210e8
 8002750:	080210f8 	.word	0x080210f8
 8002754:	08021110 	.word	0x08021110
 8002758:	08021264 	.word	0x08021264
 800275c:	08021118 	.word	0x08021118
 8002760:	08021120 	.word	0x08021120
 8002764:	08021124 	.word	0x08021124
 8002768:	0802112c 	.word	0x0802112c
                } else {
                    osc->draw_signals = 0;
 800276c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002770:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                }
            }
            nk_tree_pop(ctx);
 800277c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002780:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f019 f998 	bl	801baba <nk_tree_pop>
        }

        {
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 800278a:	48d8      	ldr	r0, [pc, #864]	; (8002aec <oscilloscope_process+0x580>)
 800278c:	f019 fc26 	bl	801bfdc <nk_strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002796:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 800279a:	f240 2283 	movw	r2, #643	; 0x283
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	4bd2      	ldr	r3, [pc, #840]	; (8002aec <oscilloscope_process+0x580>)
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	4ad1      	ldr	r2, [pc, #836]	; (8002af0 <oscilloscope_process+0x584>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f019 f967 	bl	801ba80 <nk_tree_push_hashed>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80f4 	beq.w	80029a2 <oscilloscope_process+0x436>
        		nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80027ba:	4bce      	ldr	r3, [pc, #824]	; (8002af4 <oscilloscope_process+0x588>)
 80027bc:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80027c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80027ca:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80027ce:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80027d2:	2204      	movs	r2, #4
 80027d4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80027d8:	2101      	movs	r1, #1
 80027da:	6800      	ldr	r0, [r0, #0]
 80027dc:	f010 fa22 	bl	8012c24 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 80027e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80027e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027e8:	2201      	movs	r2, #1
 80027ea:	49c3      	ldr	r1, [pc, #780]	; (8002af8 <oscilloscope_process+0x58c>)
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	f018 fd01 	bl	801b1f4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80027f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80027f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027fa:	2101      	movs	r1, #1
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	f00c f919 	bl	800ea34 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002802:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002806:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800280a:	2109      	movs	r1, #9
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	f00c facb 	bl	800eda8 <nk_button_symbol>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d011      	beq.n	800283c <oscilloscope_process+0x2d0>
        		{
        			osc->horizontal_offset -= 1;
 8002818:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800281c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	edd3 7a02 	vldr	s15, [r3, #8]
 8002826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800282a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800282e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002832:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	edc3 7a02 	vstr	s15, [r3, #8]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->horizontal_offset);
 800283c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002840:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fea5 	bl	8000598 <__aeabi_f2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	f107 000c 	add.w	r0, r7, #12
 8002856:	49a9      	ldr	r1, [pc, #676]	; (8002afc <oscilloscope_process+0x590>)
 8002858:	f01b fdd0 	bl	801e3fc <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 800285c:	f107 010c 	add.w	r1, r7, #12
 8002860:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002864:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002868:	2202      	movs	r2, #2
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f018 fcc2 	bl	801b1f4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002870:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002874:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002878:	2101      	movs	r1, #1
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f00c f8da 	bl	800ea34 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002880:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002884:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002888:	210a      	movs	r1, #10
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f00c fa8c 	bl	800eda8 <nk_button_symbol>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d011      	beq.n	80028ba <oscilloscope_process+0x34e>
        		{
        			osc->horizontal_offset += 1;
 8002896:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800289a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80028b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	edc3 7a02 	vstr	s15, [r3, #8]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_ALIGN_LEFT );
 80028ba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80028be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028c2:	2201      	movs	r2, #1
 80028c4:	498e      	ldr	r1, [pc, #568]	; (8002b00 <oscilloscope_process+0x594>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	f018 fc94 	bl	801b1f4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80028cc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80028d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028d4:	2101      	movs	r1, #1
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f00c f8ac 	bl	800ea34 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80028dc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80028e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028e4:	2109      	movs	r1, #9
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f00c fa5e 	bl	800eda8 <nk_button_symbol>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d011      	beq.n	8002916 <oscilloscope_process+0x3aa>
				{
					osc->horizontal_scale -= 1;
 80028f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80028f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002908:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800290c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->horizontal_scale);
 8002916:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800291a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe38 	bl	8000598 <__aeabi_f2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	f107 000c 	add.w	r0, r7, #12
 8002930:	4972      	ldr	r1, [pc, #456]	; (8002afc <oscilloscope_process+0x590>)
 8002932:	f01b fd63 	bl	801e3fc <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8002936:	f107 010c 	add.w	r1, r7, #12
 800293a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800293e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002942:	2202      	movs	r2, #2
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	f018 fc55 	bl	801b1f4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800294a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800294e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002952:	2101      	movs	r1, #1
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	f00c f86d 	bl	800ea34 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800295a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800295e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002962:	210a      	movs	r1, #10
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	f00c fa1f 	bl	800eda8 <nk_button_symbol>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <oscilloscope_process+0x428>
				{
					osc->horizontal_scale += 1;
 8002970:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002974:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	edd3 7a03 	vldr	s15, [r3, #12]
 800297e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002986:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800298a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	edc3 7a03 	vstr	s15, [r3, #12]
				}
                nk_tree_pop(ctx);
 8002994:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002998:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	f019 f88c 	bl	801baba <nk_tree_pop>
            }

        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 80029a2:	4858      	ldr	r0, [pc, #352]	; (8002b04 <oscilloscope_process+0x598>)
 80029a4:	f019 fb1a 	bl	801bfdc <nk_strlen>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80029ae:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80029b2:	f240 22a5 	movw	r2, #677	; 0x2a5
 80029b6:	9202      	str	r2, [sp, #8]
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <oscilloscope_process+0x598>)
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2300      	movs	r3, #0
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <oscilloscope_process+0x59c>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	6800      	ldr	r0, [r0, #0]
 80029c6:	f019 f85b 	bl	801ba80 <nk_tree_push_hashed>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8292 	beq.w	8002ef6 <oscilloscope_process+0x98a>
        		nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){100});
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <oscilloscope_process+0x5a0>)
 80029d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029dc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80029e0:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80029e4:	2201      	movs	r2, #1
 80029e6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80029ea:	2101      	movs	r1, #1
 80029ec:	6800      	ldr	r0, [r0, #0]
 80029ee:	f010 f919 	bl	8012c24 <nk_layout_row>
        		osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 20, nk_vec2(100, 100));
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <oscilloscope_process+0x5a4>)
 80029f4:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80029f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029fe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002a02:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a0a:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002b14 <oscilloscope_process+0x5a8>
 8002a0e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8002b14 <oscilloscope_process+0x5a8>
 8002a12:	f010 ff0d 	bl	8013830 <nk_vec2>
 8002a16:	eeb0 7a40 	vmov.f32	s14, s0
 8002a1a:	eef0 7a60 	vmov.f32	s15, s1
 8002a1e:	ed87 7a48 	vstr	s14, [r7, #288]	; 0x120
 8002a22:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
 8002a26:	ed97 7a48 	vldr	s14, [r7, #288]	; 0x120
 8002a2a:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8002a2e:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8002a32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002a36:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8002a3a:	2314      	movs	r3, #20
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a42:	eef0 0a67 	vmov.f32	s1, s15
 8002a46:	4623      	mov	r3, r4
 8002a48:	2204      	movs	r2, #4
 8002a4a:	6800      	ldr	r0, [r0, #0]
 8002a4c:	f00c feae 	bl	800f7ac <nk_combo>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002a56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){100, 100});
 8002a5e:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <oscilloscope_process+0x5ac>)
 8002a60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a68:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a70:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002a74:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8002a78:	2202      	movs	r2, #2
 8002a7a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002a7e:	2101      	movs	r1, #1
 8002a80:	6800      	ldr	r0, [r0, #0]
 8002a82:	f010 f8cf 	bl	8012c24 <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 20, nk_vec2(60, 200));
 8002a86:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <oscilloscope_process+0x5b0>)
 8002a88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a90:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a94:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002a98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002aa4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3328      	adds	r3, #40	; 0x28
 8002ab6:	681d      	ldr	r5, [r3, #0]
 8002ab8:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002b20 <oscilloscope_process+0x5b4>
 8002abc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8002b24 <oscilloscope_process+0x5b8>
 8002ac0:	f010 feb6 	bl	8013830 <nk_vec2>
 8002ac4:	eeb0 7a40 	vmov.f32	s14, s0
 8002ac8:	eef0 7a60 	vmov.f32	s15, s1
 8002acc:	ed87 7a4a 	vstr	s14, [r7, #296]	; 0x128
 8002ad0:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
 8002ad4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002ad8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002ae0:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8002ae4:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002ae8:	e01e      	b.n	8002b28 <oscilloscope_process+0x5bc>
 8002aea:	bf00      	nop
 8002aec:	08021134 	.word	0x08021134
 8002af0:	0802114c 	.word	0x0802114c
 8002af4:	08021274 	.word	0x08021274
 8002af8:	08021158 	.word	0x08021158
 8002afc:	08021160 	.word	0x08021160
 8002b00:	08021168 	.word	0x08021168
 8002b04:	08021170 	.word	0x08021170
 8002b08:	08021188 	.word	0x08021188
 8002b0c:	42c80000 	.word	0x42c80000
 8002b10:	08021294 	.word	0x08021294
 8002b14:	42c80000 	.word	0x42c80000
 8002b18:	080212a4 	.word	0x080212a4
 8002b1c:	080212b4 	.word	0x080212b4
 8002b20:	43480000 	.word	0x43480000
 8002b24:	42700000 	.word	0x42700000
 8002b28:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002b2c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002b30:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8002b34:	2314      	movs	r3, #20
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3c:	eef0 0a67 	vmov.f32	s1, s15
 8002b40:	462b      	mov	r3, r5
 8002b42:	2202      	movs	r2, #2
 8002b44:	6800      	ldr	r0, [r0, #0]
 8002b46:	f00c fe31 	bl	800f7ac <nk_combo>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002b50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4623      	mov	r3, r4
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4423      	add	r3, r4
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3328      	adds	r3, #40	; 0x28
 8002b62:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 20, nk_vec2(60, 200));
 8002b64:	4ad9      	ldr	r2, [pc, #868]	; (8002ecc <oscilloscope_process+0x960>)
 8002b66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b70:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002b74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002b80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	332c      	adds	r3, #44	; 0x2c
 8002b92:	681d      	ldr	r5, [r3, #0]
 8002b94:	eddf 0ace 	vldr	s1, [pc, #824]	; 8002ed0 <oscilloscope_process+0x964>
 8002b98:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8002ed4 <oscilloscope_process+0x968>
 8002b9c:	f010 fe48 	bl	8013830 <nk_vec2>
 8002ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ba4:	eef0 7a60 	vmov.f32	s15, s1
 8002ba8:	ed87 7a4c 	vstr	s14, [r7, #304]	; 0x130
 8002bac:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
 8002bb0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002bb4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002bbc:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8002bc0:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8002bc4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002bc8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002bcc:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8002bd0:	2314      	movs	r3, #20
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	462b      	mov	r3, r5
 8002bde:	2203      	movs	r2, #3
 8002be0:	6800      	ldr	r0, [r0, #0]
 8002be2:	f00c fde3 	bl	800f7ac <nk_combo>
 8002be6:	4601      	mov	r1, r0
 8002be8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002bec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4423      	add	r3, r4
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	332c      	adds	r3, #44	; 0x2c
 8002bfe:	6019      	str	r1, [r3, #0]
                //osc->channels[osc->channel_selected].offset = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].offset, 10.0f, 1.0f);
                //osc->channels[osc->channel_selected].scale = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].scale, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002c00:	4bb5      	ldr	r3, [pc, #724]	; (8002ed8 <oscilloscope_process+0x96c>)
 8002c02:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8002c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c10:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002c14:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8002c18:	2204      	movs	r2, #4
 8002c1a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002c1e:	2101      	movs	r1, #1
 8002c20:	6800      	ldr	r0, [r0, #0]
 8002c22:	f00f ffff 	bl	8012c24 <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_ALIGN_LEFT );
 8002c26:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c2e:	2201      	movs	r2, #1
 8002c30:	49aa      	ldr	r1, [pc, #680]	; (8002edc <oscilloscope_process+0x970>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f018 fade 	bl	801b1f4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002c38:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c40:	2101      	movs	r1, #1
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f00b fef6 	bl	800ea34 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002c48:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c50:	2109      	movs	r1, #9
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	f00c f8a8 	bl	800eda8 <nk_button_symbol>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d029      	beq.n	8002cb2 <oscilloscope_process+0x746>
        		{
        			osc->channels[osc->channel_selected].offset -= 1;
 8002c5e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3330      	adds	r3, #48	; 0x30
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c88:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c9c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3330      	adds	r3, #48	; 0x30
 8002cae:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].offset);
 8002cb2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cc2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3330      	adds	r3, #48	; 0x30
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc5e 	bl	8000598 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	f107 000c 	add.w	r0, r7, #12
 8002ce4:	497e      	ldr	r1, [pc, #504]	; (8002ee0 <oscilloscope_process+0x974>)
 8002ce6:	f01b fb89 	bl	801e3fc <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8002cea:	f107 010c 	add.w	r1, r7, #12
 8002cee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cf2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	f018 fa7b 	bl	801b1f4 <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002cfe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d06:	2101      	movs	r1, #1
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	f00b fe93 	bl	800ea34 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002d0e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d16:	210a      	movs	r1, #10
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f00c f845 	bl	800eda8 <nk_button_symbol>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d029      	beq.n	8002d78 <oscilloscope_process+0x80c>
        		{
        			osc->channels[osc->channel_selected].offset += 1;
 8002d24:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d28:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d30:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d34:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3330      	adds	r3, #48	; 0x30
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d4e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d5e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3330      	adds	r3, #48	; 0x30
 8002d74:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_ALIGN_LEFT );
 8002d78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d80:	2201      	movs	r2, #1
 8002d82:	4958      	ldr	r1, [pc, #352]	; (8002ee4 <oscilloscope_process+0x978>)
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	f018 fa35 	bl	801b1f4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002d8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d92:	2101      	movs	r1, #1
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	f00b fe4d 	bl	800ea34 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002d9a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002da2:	2109      	movs	r1, #9
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	f00b ffff 	bl	800eda8 <nk_button_symbol>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d029      	beq.n	8002e04 <oscilloscope_process+0x898>
				{
					osc->channels[osc->channel_selected].scale -= 1;
 8002db0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002db4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002dc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3334      	adds	r3, #52	; 0x34
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002dda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002dee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3334      	adds	r3, #52	; 0x34
 8002e00:	edc3 7a00 	vstr	s15, [r3]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].scale);
 8002e04:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e10:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3334      	adds	r3, #52	; 0x34
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fbb5 	bl	8000598 <__aeabi_f2d>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	f107 000c 	add.w	r0, r7, #12
 8002e36:	492a      	ldr	r1, [pc, #168]	; (8002ee0 <oscilloscope_process+0x974>)
 8002e38:	f01b fae0 	bl	801e3fc <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_ALIGN_CENTERED );
 8002e3c:	f107 010c 	add.w	r1, r7, #12
 8002e40:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e48:	2202      	movs	r2, #2
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	f018 f9d2 	bl	801b1f4 <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002e50:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e58:	2101      	movs	r1, #1
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	f00b fdea 	bl	800ea34 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002e60:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e68:	210a      	movs	r1, #10
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f00b ff9c 	bl	800eda8 <nk_button_symbol>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d038      	beq.n	8002ee8 <oscilloscope_process+0x97c>
				{
					osc->channels[osc->channel_selected].scale += 1;
 8002e76:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e82:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002e86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3334      	adds	r3, #52	; 0x34
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002ea0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eb0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002eb4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3334      	adds	r3, #52	; 0x34
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
 8002eca:	e00d      	b.n	8002ee8 <oscilloscope_process+0x97c>
 8002ecc:	080212c8 	.word	0x080212c8
 8002ed0:	43480000 	.word	0x43480000
 8002ed4:	42700000 	.word	0x42700000
 8002ed8:	08021274 	.word	0x08021274
 8002edc:	08021158 	.word	0x08021158
 8002ee0:	08021160 	.word	0x08021160
 8002ee4:	08021168 	.word	0x08021168
				}




                nk_tree_pop(ctx);
 8002ee8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002eec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f018 fde2 	bl	801baba <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 8002ef6:	48dc      	ldr	r0, [pc, #880]	; (8003268 <oscilloscope_process+0xcfc>)
 8002ef8:	f019 f870 	bl	801bfdc <nk_strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002f02:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8002f06:	f240 22d3 	movw	r2, #723	; 0x2d3
 8002f0a:	9202      	str	r2, [sp, #8]
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	4bd6      	ldr	r3, [pc, #856]	; (8003268 <oscilloscope_process+0xcfc>)
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2300      	movs	r3, #0
 8002f14:	4ad5      	ldr	r2, [pc, #852]	; (800326c <oscilloscope_process+0xd00>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	6800      	ldr	r0, [r0, #0]
 8002f1a:	f018 fdb1 	bl	801ba80 <nk_tree_push_hashed>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80e0 	beq.w	80030e6 <oscilloscope_process+0xb7a>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 20, nk_vec2(60, 200));
 8002f26:	4bd2      	ldr	r3, [pc, #840]	; (8003270 <oscilloscope_process+0xd04>)
 8002f28:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f36:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69dc      	ldr	r4, [r3, #28]
 8002f3e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 8003294 <oscilloscope_process+0xd28>
 8002f42:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8003298 <oscilloscope_process+0xd2c>
 8002f46:	f010 fc73 	bl	8013830 <nk_vec2>
 8002f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f4e:	eef0 7a60 	vmov.f32	s15, s1
 8002f52:	ed87 7a4e 	vstr	s14, [r7, #312]	; 0x138
 8002f56:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
 8002f5a:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8002f5e:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8002f62:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002f66:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f6a:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8002f6e:	2314      	movs	r3, #20
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	eeb0 0a47 	vmov.f32	s0, s14
 8002f76:	eef0 0a67 	vmov.f32	s1, s15
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	6800      	ldr	r0, [r0, #0]
 8002f80:	f00c fc14 	bl	800f7ac <nk_combo>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61da      	str	r2, [r3, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8002f92:	4ab8      	ldr	r2, [pc, #736]	; (8003274 <oscilloscope_process+0xd08>)
 8002f94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fa0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002fa4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002fa8:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8002fac:	2202      	movs	r2, #2
 8002fae:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	6800      	ldr	r0, [r0, #0]
 8002fb6:	f00f fe35 	bl	8012c24 <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 20, nk_vec2(60, 200));
 8002fba:	4aaf      	ldr	r2, [pc, #700]	; (8003278 <oscilloscope_process+0xd0c>)
 8002fbc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fc8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002fcc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695c      	ldr	r4, [r3, #20]
 8002fd4:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8003294 <oscilloscope_process+0xd28>
 8002fd8:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8003298 <oscilloscope_process+0xd2c>
 8002fdc:	f010 fc28 	bl	8013830 <nk_vec2>
 8002fe0:	eeb0 7a40 	vmov.f32	s14, s0
 8002fe4:	eef0 7a60 	vmov.f32	s15, s1
 8002fe8:	ed87 7a50 	vstr	s14, [r7, #320]	; 0x140
 8002fec:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 8002ff0:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8002ff4:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8002ff8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002ffc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003000:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8003004:	2314      	movs	r3, #20
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	eeb0 0a47 	vmov.f32	s0, s14
 800300c:	eef0 0a67 	vmov.f32	s1, s15
 8003010:	4623      	mov	r3, r4
 8003012:	2202      	movs	r2, #2
 8003014:	6800      	ldr	r0, [r0, #0]
 8003016:	f00c fbc9 	bl	800f7ac <nk_combo>
 800301a:	4602      	mov	r2, r0
 800301c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003020:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	615a      	str	r2, [r3, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 20, nk_vec2(60, 200));
 8003028:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800302c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003030:	4a92      	ldr	r2, [pc, #584]	; (800327c <oscilloscope_process+0xd10>)
 8003032:	ca07      	ldmia	r2, {r0, r1, r2}
 8003034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003038:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800303c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699c      	ldr	r4, [r3, #24]
 8003044:	eddf 0a93 	vldr	s1, [pc, #588]	; 8003294 <oscilloscope_process+0xd28>
 8003048:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8003298 <oscilloscope_process+0xd2c>
 800304c:	f010 fbf0 	bl	8013830 <nk_vec2>
 8003050:	eeb0 7a40 	vmov.f32	s14, s0
 8003054:	eef0 7a60 	vmov.f32	s15, s1
 8003058:	ed87 7a52 	vstr	s14, [r7, #328]	; 0x148
 800305c:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
 8003060:	ed97 7a52 	vldr	s14, [r7, #328]	; 0x148
 8003064:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8003068:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800306c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003070:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8003074:	2314      	movs	r3, #20
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	eeb0 0a47 	vmov.f32	s0, s14
 800307c:	eef0 0a67 	vmov.f32	s1, s15
 8003080:	4623      	mov	r3, r4
 8003082:	2203      	movs	r2, #3
 8003084:	6800      	ldr	r0, [r0, #0]
 8003086:	f00c fb91 	bl	800f7ac <nk_combo>
 800308a:	4602      	mov	r2, r0
 800308c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003090:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	619a      	str	r2, [r3, #24]
                osc->trigger_offset = nk_slider_float(ctx, -10.0f, &osc->trigger_offset, 10.0f, 1.0f);
 8003098:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800309c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f103 0210 	add.w	r2, r3, #16
 80030a6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80030aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80030b2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80030b6:	4611      	mov	r1, r2
 80030b8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	f015 fab9 	bl	8018634 <nk_slider_float>
 80030c2:	ee07 0a90 	vmov	s15, r0
 80030c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80030ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	edc3 7a04 	vstr	s15, [r3, #16]
                nk_tree_pop(ctx);
 80030d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80030dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	f018 fcea 	bl	801baba <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 80030e6:	4866      	ldr	r0, [pc, #408]	; (8003280 <oscilloscope_process+0xd14>)
 80030e8:	f018 ff78 	bl	801bfdc <nk_strlen>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80030f2:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80030f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80030fa:	9202      	str	r2, [sp, #8]
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <oscilloscope_process+0xd14>)
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	4a5f      	ldr	r2, [pc, #380]	; (8003284 <oscilloscope_process+0xd18>)
 8003106:	2101      	movs	r1, #1
 8003108:	6800      	ldr	r0, [r0, #0]
 800310a:	f018 fcb9 	bl	801ba80 <nk_tree_push_hashed>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 81bd 	beq.w	8003490 <oscilloscope_process+0xf24>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 20, nk_vec2(60, 200));
 8003116:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800311a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800311e:	4a5a      	ldr	r2, [pc, #360]	; (8003288 <oscilloscope_process+0xd1c>)
 8003120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003124:	e883 0003 	stmia.w	r3, {r0, r1}
 8003128:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800312c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003134:	eddf 0a57 	vldr	s1, [pc, #348]	; 8003294 <oscilloscope_process+0xd28>
 8003138:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8003298 <oscilloscope_process+0xd2c>
 800313c:	f010 fb78 	bl	8013830 <nk_vec2>
 8003140:	eeb0 7a40 	vmov.f32	s14, s0
 8003144:	eef0 7a60 	vmov.f32	s15, s1
 8003148:	ed87 7a54 	vstr	s14, [r7, #336]	; 0x150
 800314c:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
 8003150:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8003154:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8003158:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800315c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003160:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8003164:	2314      	movs	r3, #20
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	eeb0 0a47 	vmov.f32	s0, s14
 800316c:	eef0 0a67 	vmov.f32	s1, s15
 8003170:	4623      	mov	r3, r4
 8003172:	2202      	movs	r2, #2
 8003174:	6800      	ldr	r0, [r0, #0]
 8003176:	f00c fb19 	bl	800f7ac <nk_combo>
 800317a:	4602      	mov	r2, r0
 800317c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003180:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	679a      	str	r2, [r3, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8003188:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800318c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <oscilloscope_process+0xd08>)
 8003192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003196:	e883 0003 	stmia.w	r3, {r0, r1}
 800319a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800319e:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80031a2:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80031a6:	2202      	movs	r2, #2
 80031a8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80031ac:	2101      	movs	r1, #1
 80031ae:	6800      	ldr	r0, [r0, #0]
 80031b0:	f00f fd38 	bl	8012c24 <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 20, nk_vec2(60, 200));
 80031b4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80031b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031bc:	4a33      	ldr	r2, [pc, #204]	; (800328c <oscilloscope_process+0xd20>)
 80031be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80031c6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80031ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80031d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80031d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	337c      	adds	r3, #124	; 0x7c
 80031e8:	681d      	ldr	r5, [r3, #0]
 80031ea:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8003294 <oscilloscope_process+0xd28>
 80031ee:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003298 <oscilloscope_process+0xd2c>
 80031f2:	f010 fb1d 	bl	8013830 <nk_vec2>
 80031f6:	eeb0 7a40 	vmov.f32	s14, s0
 80031fa:	eef0 7a60 	vmov.f32	s15, s1
 80031fe:	ed87 7a56 	vstr	s14, [r7, #344]	; 0x158
 8003202:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
 8003206:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800320a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8003212:	ed97 7a56 	vldr	s14, [r7, #344]	; 0x158
 8003216:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800321a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800321e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003222:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8003226:	2314      	movs	r3, #20
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	eeb0 0a47 	vmov.f32	s0, s14
 800322e:	eef0 0a67 	vmov.f32	s1, s15
 8003232:	462b      	mov	r3, r5
 8003234:	2202      	movs	r2, #2
 8003236:	6800      	ldr	r0, [r0, #0]
 8003238:	f00c fab8 	bl	800f7ac <nk_combo>
 800323c:	4601      	mov	r1, r0
 800323e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003242:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4623      	mov	r3, r4
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4423      	add	r3, r4
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	337c      	adds	r3, #124	; 0x7c
 8003254:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 20, nk_vec2(60, 200));
 8003256:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800325a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800325e:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <oscilloscope_process+0xd24>)
 8003260:	461c      	mov	r4, r3
 8003262:	4615      	mov	r5, r2
 8003264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003266:	e019      	b.n	800329c <oscilloscope_process+0xd30>
 8003268:	08021194 	.word	0x08021194
 800326c:	080211ac 	.word	0x080211ac
 8003270:	08021294 	.word	0x08021294
 8003274:	080212d4 	.word	0x080212d4
 8003278:	080212ec 	.word	0x080212ec
 800327c:	0802130c 	.word	0x0802130c
 8003280:	080211b4 	.word	0x080211b4
 8003284:	080211cc 	.word	0x080211cc
 8003288:	08021320 	.word	0x08021320
 800328c:	080212b4 	.word	0x080212b4
 8003290:	08021348 	.word	0x08021348
 8003294:	43480000 	.word	0x43480000
 8003298:	42700000 	.word	0x42700000
 800329c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800329e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80032a6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80032aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80032b2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80032b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	3380      	adds	r3, #128	; 0x80
 80032c8:	681d      	ldr	r5, [r3, #0]
 80032ca:	ed5f 0a0e 	vldr	s1, [pc, #-56]	; 8003294 <oscilloscope_process+0xd28>
 80032ce:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 8003298 <oscilloscope_process+0xd2c>
 80032d2:	f010 faad 	bl	8013830 <nk_vec2>
 80032d6:	eeb0 7a40 	vmov.f32	s14, s0
 80032da:	eef0 7a60 	vmov.f32	s15, s1
 80032de:	ed87 7a58 	vstr	s14, [r7, #352]	; 0x160
 80032e2:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
 80032e6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80032ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80032f2:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 80032f6:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80032fa:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80032fe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003302:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8003306:	2314      	movs	r3, #20
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	eeb0 0a47 	vmov.f32	s0, s14
 800330e:	eef0 0a67 	vmov.f32	s1, s15
 8003312:	462b      	mov	r3, r5
 8003314:	2206      	movs	r2, #6
 8003316:	6800      	ldr	r0, [r0, #0]
 8003318:	f00c fa48 	bl	800f7ac <nk_combo>
 800331c:	4601      	mov	r1, r0
 800331e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003322:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4623      	mov	r3, r4
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4423      	add	r3, r4
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	3380      	adds	r3, #128	; 0x80
 8003334:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].offset = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].offset, 10.0f, 1.0f);
 8003336:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800333a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003342:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003346:	f5a3 71c2 	sub.w	r1, r3, #388	; 0x184
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	3380      	adds	r3, #128	; 0x80
 8003354:	680a      	ldr	r2, [r1, #0]
 8003356:	4413      	add	r3, r2
 8003358:	1d1a      	adds	r2, r3, #4
 800335a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800335e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003362:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003366:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800336a:	4611      	mov	r1, r2
 800336c:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	f015 f95f 	bl	8018634 <nk_slider_float>
 8003376:	ee07 0a90 	vmov	s15, r0
 800337a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800337e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800338e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	3384      	adds	r3, #132	; 0x84
 80033a0:	edc3 7a00 	vstr	s15, [r3]
                osc->waveforms[osc->waveform_selected].scale = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].scale, 10.0f, 1.0f);
 80033a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033b0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033b4:	f5a3 71c2 	sub.w	r1, r3, #388	; 0x184
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	3380      	adds	r3, #128	; 0x80
 80033c2:	680a      	ldr	r2, [r1, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80033d6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80033da:	4611      	mov	r1, r2
 80033dc:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	f015 f927 	bl	8018634 <nk_slider_float>
 80033e6:	ee07 0a90 	vmov	s15, r0
 80033ea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033fa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	3388      	adds	r3, #136	; 0x88
 8003410:	edc3 7a00 	vstr	s15, [r3]
                osc->waveforms[osc->waveform_selected].duty_cycle = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].duty_cycle, 10.0f, 1.0f);
 8003414:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003418:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003420:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003424:	f5a3 71c2 	sub.w	r1, r3, #388	; 0x184
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3388      	adds	r3, #136	; 0x88
 8003432:	680a      	ldr	r2, [r1, #0]
 8003434:	4413      	add	r3, r2
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800343c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003440:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003444:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003448:	4611      	mov	r1, r2
 800344a:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	f015 f8f0 	bl	8018634 <nk_slider_float>
 8003454:	ee07 0a90 	vmov	s15, r0
 8003458:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800345c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003468:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800346c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	338c      	adds	r3, #140	; 0x8c
 800347e:	edc3 7a00 	vstr	s15, [r3]
                nk_tree_pop(ctx);
 8003482:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003486:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	f018 fb15 	bl	801baba <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 8003490:	48de      	ldr	r0, [pc, #888]	; (800380c <oscilloscope_process+0x12a0>)
 8003492:	f018 fda3 	bl	801bfdc <nk_strlen>
 8003496:	4603      	mov	r3, r0
 8003498:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800349c:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80034a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	4bd8      	ldr	r3, [pc, #864]	; (800380c <oscilloscope_process+0x12a0>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2300      	movs	r3, #0
 80034ae:	4ad8      	ldr	r2, [pc, #864]	; (8003810 <oscilloscope_process+0x12a4>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	f018 fae4 	bl	801ba80 <nk_tree_push_hashed>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 816f 	beq.w	800379e <oscilloscope_process+0x1232>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(60, 200));
 80034c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80034c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034c8:	4ad2      	ldr	r2, [pc, #840]	; (8003814 <oscilloscope_process+0x12a8>)
 80034ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80034d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80034d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 80034e0:	eddf 0acd 	vldr	s1, [pc, #820]	; 8003818 <oscilloscope_process+0x12ac>
 80034e4:	ed9f 0acd 	vldr	s0, [pc, #820]	; 800381c <oscilloscope_process+0x12b0>
 80034e8:	f010 f9a2 	bl	8013830 <nk_vec2>
 80034ec:	eeb0 7a40 	vmov.f32	s14, s0
 80034f0:	eef0 7a60 	vmov.f32	s15, s1
 80034f4:	ed87 7a5a 	vstr	s14, [r7, #360]	; 0x168
 80034f8:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
 80034fc:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 8003500:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 8003504:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003508:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800350c:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8003510:	2314      	movs	r3, #20
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	eeb0 0a47 	vmov.f32	s0, s14
 8003518:	eef0 0a67 	vmov.f32	s1, s15
 800351c:	4623      	mov	r3, r4
 800351e:	2202      	movs	r2, #2
 8003520:	6800      	ldr	r0, [r0, #0]
 8003522:	f00c f943 	bl	800f7ac <nk_combo>
 8003526:	4602      	mov	r2, r0
 8003528:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800352c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 8003536:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800353a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800353e:	4ab8      	ldr	r2, [pc, #736]	; (8003820 <oscilloscope_process+0x12b4>)
 8003540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003544:	e883 0003 	stmia.w	r3, {r0, r1}
 8003548:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800354c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003550:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 8003554:	2202      	movs	r2, #2
 8003556:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800355a:	2101      	movs	r1, #1
 800355c:	6800      	ldr	r0, [r0, #0]
 800355e:	f00f fb61 	bl	8012c24 <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 20, nk_vec2(60, 200));
 8003562:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003566:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800356a:	4aae      	ldr	r2, [pc, #696]	; (8003824 <oscilloscope_process+0x12b8>)
 800356c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003570:	e883 0003 	stmia.w	r3, {r0, r1}
 8003574:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003578:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003582:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003586:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	33b0      	adds	r3, #176	; 0xb0
 8003598:	681d      	ldr	r5, [r3, #0]
 800359a:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8003818 <oscilloscope_process+0x12ac>
 800359e:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800381c <oscilloscope_process+0x12b0>
 80035a2:	f010 f945 	bl	8013830 <nk_vec2>
 80035a6:	eeb0 7a40 	vmov.f32	s14, s0
 80035aa:	eef0 7a60 	vmov.f32	s15, s1
 80035ae:	ed87 7a5c 	vstr	s14, [r7, #368]	; 0x170
 80035b2:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
 80035b6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80035ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 80035c4:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 80035c8:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 80035cc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80035d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80035d4:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 80035d8:	2314      	movs	r3, #20
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	eeb0 0a47 	vmov.f32	s0, s14
 80035e0:	eef0 0a67 	vmov.f32	s1, s15
 80035e4:	462b      	mov	r3, r5
 80035e6:	2202      	movs	r2, #2
 80035e8:	6800      	ldr	r0, [r0, #0]
 80035ea:	f00c f8df 	bl	800f7ac <nk_combo>
 80035ee:	4601      	mov	r1, r0
 80035f0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80035f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4623      	mov	r3, r4
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4423      	add	r3, r4
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	33b0      	adds	r3, #176	; 0xb0
 8003606:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 20, nk_vec2(60, 200));
 8003608:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800360c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003610:	4a85      	ldr	r2, [pc, #532]	; (8003828 <oscilloscope_process+0x12bc>)
 8003612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003616:	e883 0003 	stmia.w	r3, {r0, r1}
 800361a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800361e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003628:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800362c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	33b4      	adds	r3, #180	; 0xb4
 800363e:	681d      	ldr	r5, [r3, #0]
 8003640:	eddf 0a75 	vldr	s1, [pc, #468]	; 8003818 <oscilloscope_process+0x12ac>
 8003644:	ed9f 0a75 	vldr	s0, [pc, #468]	; 800381c <oscilloscope_process+0x12b0>
 8003648:	f010 f8f2 	bl	8013830 <nk_vec2>
 800364c:	eeb0 7a40 	vmov.f32	s14, s0
 8003650:	eef0 7a60 	vmov.f32	s15, s1
 8003654:	ed87 7a5e 	vstr	s14, [r7, #376]	; 0x178
 8003658:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
 800365c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003660:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800366a:	ed97 7a5e 	vldr	s14, [r7, #376]	; 0x178
 800366e:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 8003672:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003676:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800367a:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 800367e:	2314      	movs	r3, #20
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	eeb0 0a47 	vmov.f32	s0, s14
 8003686:	eef0 0a67 	vmov.f32	s1, s15
 800368a:	462b      	mov	r3, r5
 800368c:	2202      	movs	r2, #2
 800368e:	6800      	ldr	r0, [r0, #0]
 8003690:	f00c f88c 	bl	800f7ac <nk_combo>
 8003694:	4601      	mov	r1, r0
 8003696:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800369a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4623      	mov	r3, r4
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4423      	add	r3, r4
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	33b4      	adds	r3, #180	; 0xb4
 80036ac:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].offset = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].offset, 10.0f, 1.0f);
 80036ae:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80036b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80036bc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80036c0:	f5a3 71c2 	sub.w	r1, r3, #388	; 0x184
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	33b8      	adds	r3, #184	; 0xb8
 80036ce:	680a      	ldr	r2, [r1, #0]
 80036d0:	441a      	add	r2, r3
 80036d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80036d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80036de:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80036e2:	4611      	mov	r1, r2
 80036e4:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f014 ffa3 	bl	8018634 <nk_slider_float>
 80036ee:	ee07 0a90 	vmov	s15, r0
 80036f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80036f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003704:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003708:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	33b8      	adds	r3, #184	; 0xb8
 800371a:	edc3 7a00 	vstr	s15, [r3]
                osc->cursors[osc->cursor_selected].track = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].track, 10.0f, 1.0f);
 800371e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003722:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800372c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003730:	f5a3 71c2 	sub.w	r1, r3, #388	; 0x184
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	33b8      	adds	r3, #184	; 0xb8
 800373e:	680a      	ldr	r2, [r1, #0]
 8003740:	4413      	add	r3, r2
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003748:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800374c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003750:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003754:	4611      	mov	r1, r2
 8003756:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	f014 ff6a 	bl	8018634 <nk_slider_float>
 8003760:	ee07 0a90 	vmov	s15, r0
 8003764:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003768:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003776:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800377a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	33bc      	adds	r3, #188	; 0xbc
 800378c:	edc3 7a00 	vstr	s15, [r3]
                nk_tree_pop(ctx);
 8003790:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003794:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	f018 f98e 	bl	801baba <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 800379e:	4823      	ldr	r0, [pc, #140]	; (800382c <oscilloscope_process+0x12c0>)
 80037a0:	f018 fc1c 	bl	801bfdc <nk_strlen>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80037aa:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80037ae:	f240 22f1 	movw	r2, #753	; 0x2f1
 80037b2:	9202      	str	r2, [sp, #8]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	4b1d      	ldr	r3, [pc, #116]	; (800382c <oscilloscope_process+0x12c0>)
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <oscilloscope_process+0x12c4>)
 80037be:	2101      	movs	r1, #1
 80037c0:	6800      	ldr	r0, [r0, #0]
 80037c2:	f018 f95d 	bl	801ba80 <nk_tree_push_hashed>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00f      	beq.n	80037ec <oscilloscope_process+0x1280>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 80037cc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80037d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037d4:	2211      	movs	r2, #17
 80037d6:	4917      	ldr	r1, [pc, #92]	; (8003834 <oscilloscope_process+0x12c8>)
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	f017 fd0b 	bl	801b1f4 <nk_label>
                nk_tree_pop(ctx);
 80037de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80037e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	f018 f967 	bl	801baba <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 80037ec:	4812      	ldr	r0, [pc, #72]	; (8003838 <oscilloscope_process+0x12cc>)
 80037ee:	f018 fbf5 	bl	801bfdc <nk_strlen>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80037f8:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 80037fc:	f240 22f6 	movw	r2, #758	; 0x2f6
 8003800:	9202      	str	r2, [sp, #8]
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <oscilloscope_process+0x12cc>)
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	e017      	b.n	800383c <oscilloscope_process+0x12d0>
 800380c:	080211d8 	.word	0x080211d8
 8003810:	080211f0 	.word	0x080211f0
 8003814:	08021368 	.word	0x08021368
 8003818:	43480000 	.word	0x43480000
 800381c:	42700000 	.word	0x42700000
 8003820:	080212d4 	.word	0x080212d4
 8003824:	080212b4 	.word	0x080212b4
 8003828:	08021380 	.word	0x08021380
 800382c:	080211f8 	.word	0x080211f8
 8003830:	08021210 	.word	0x08021210
 8003834:	08021220 	.word	0x08021220
 8003838:	08021228 	.word	0x08021228
 800383c:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <oscilloscope_process+0x138c>)
 800383e:	2101      	movs	r1, #1
 8003840:	6800      	ldr	r0, [r0, #0]
 8003842:	f018 f91d 	bl	801ba80 <nk_tree_push_hashed>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d048      	beq.n	80038de <oscilloscope_process+0x1372>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 60});
 800384c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003850:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <oscilloscope_process+0x1390>)
 8003856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800385a:	e883 0003 	stmia.w	r3, {r0, r1}
 800385e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003862:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003866:	f5a2 70c4 	sub.w	r0, r2, #392	; 0x188
 800386a:	2202      	movs	r2, #2
 800386c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003870:	2101      	movs	r1, #1
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	f00f f9d6 	bl	8012c24 <nk_layout_row>

                float fps = 0.0f; // Calculate fps here
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 8003880:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003884:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003888:	2211      	movs	r2, #17
 800388a:	491d      	ldr	r1, [pc, #116]	; (8003900 <oscilloscope_process+0x1394>)
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	f017 fcb1 	bl	801b1f4 <nk_label>
                nk_label(ctx, "0.0000", NK_TEXT_LEFT); // Replace with actual fps
 8003892:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003896:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800389a:	2211      	movs	r2, #17
 800389c:	4919      	ldr	r1, [pc, #100]	; (8003904 <oscilloscope_process+0x1398>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	f017 fca8 	bl	801b1f4 <nk_label>

                float ratio = 0.0f; // Calculate memory ratio here
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                nk_label(ctx, "Memory", NK_TEXT_LEFT);
 80038ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80038b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038b4:	2211      	movs	r2, #17
 80038b6:	4914      	ldr	r1, [pc, #80]	; (8003908 <oscilloscope_process+0x139c>)
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f017 fc9b 	bl	801b1f4 <nk_label>
                nk_label(ctx, "0.0000%", NK_TEXT_LEFT); // Replace with actual memory ratio
 80038be:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80038c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038c6:	2211      	movs	r2, #17
 80038c8:	4910      	ldr	r1, [pc, #64]	; (800390c <oscilloscope_process+0x13a0>)
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	f017 fc92 	bl	801b1f4 <nk_label>

                nk_tree_pop(ctx);
 80038d0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80038d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	f018 f8ee 	bl	801baba <nk_tree_pop>
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 80038de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80038e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	f019 fe2c 	bl	801d544 <nk_end>
}
 80038ec:	bf00      	nop
 80038ee:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bdb0      	pop	{r4, r5, r7, pc}
 80038f6:	bf00      	nop
 80038f8:	08021240 	.word	0x08021240
 80038fc:	080212d4 	.word	0x080212d4
 8003900:	08021248 	.word	0x08021248
 8003904:	0802124c 	.word	0x0802124c
 8003908:	08021254 	.word	0x08021254
 800390c:	0802125c 	.word	0x0802125c

08003910 <nk_draw_fb>:



int quadrant = 0x01;
void nk_draw_fb( struct nk_context *ctx, const tFramebuf *pfb )
{
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	b096      	sub	sp, #88	; 0x58
 8003916:	af02      	add	r7, sp, #8
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
	  for( int y0 = 0 ; y0 < 320 ; y0 += 40 )
 800391c:	2300      	movs	r3, #0
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003920:	e3b0      	b.n	8004084 <nk_draw_fb+0x774>
	  {
	framebuf_fill( pfb, 0x00000000 );
 8003922:	2100      	movs	r1, #0
 8003924:	68b8      	ldr	r0, [r7, #8]
 8003926:	f009 fc5a 	bl	800d1de <framebuf_fill>

	  //lcd_rect( 0, 0, 480, 320, 0x0000 );
	  {
		  const struct nk_command *cmd = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
		  nk_foreach(cmd, ctx)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f00c fc78 	bl	8010224 <nk__begin>
 8003934:	64b8      	str	r0, [r7, #72]	; 0x48
 8003936:	e393      	b.n	8004060 <nk_draw_fb+0x750>
		  {
			  //printf( "cmd->type = %d\n", cmd->type );
			  switch (cmd->type) {
 8003938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b11      	cmp	r3, #17
 800393e:	f200 8389 	bhi.w	8004054 <nk_draw_fb+0x744>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <nk_draw_fb+0x38>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08004055 	.word	0x08004055
 800394c:	08003991 	.word	0x08003991
 8003950:	08003997 	.word	0x08003997
 8003954:	08004055 	.word	0x08004055
 8003958:	08003a8d 	.word	0x08003a8d
 800395c:	08003c93 	.word	0x08003c93
 8003960:	08004055 	.word	0x08004055
 8003964:	08003e39 	.word	0x08003e39
 8003968:	08003eb3 	.word	0x08003eb3
 800396c:	08004055 	.word	0x08004055
 8003970:	08004055 	.word	0x08004055
 8003974:	08004055 	.word	0x08004055
 8003978:	08003f8b 	.word	0x08003f8b
 800397c:	08004055 	.word	0x08004055
 8003980:	08004055 	.word	0x08004055
 8003984:	08004055 	.word	0x08004055
 8003988:	08003f27 	.word	0x08003f27
 800398c:	08003f55 	.word	0x08003f55
			  case NK_COMMAND_NOP: break;
			  case NK_COMMAND_SCISSOR: {
				  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	61fb      	str	r3, [r7, #28]
			  } break;
 8003994:	e35f      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_LINE: {
				  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
 8003996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003998:	623b      	str	r3, [r7, #32]
				  if( l->begin.y == l->end.y )
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d121      	bne.n	80039ee <nk_draw_fb+0xde>
				  {
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80039b0:	461e      	mov	r6, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039bc:	1ad4      	subs	r4, r2, r3
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80039cc:	1ad5      	subs	r5, r2, r3
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80039d4:	4613      	mov	r3, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe f8c8 	bl	8001b6c <nk_colot_to_rgb666>
 80039dc:	4603      	mov	r3, r0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	462b      	mov	r3, r5
 80039e2:	4622      	mov	r2, r4
 80039e4:	4631      	mov	r1, r6
 80039e6:	68b8      	ldr	r0, [r7, #8]
 80039e8:	f009 fc49 	bl	800d27e <framebuf_hline>
				  }
				  else
				  {
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
				  }
			  } break;
 80039ec:	e333      	b.n	8004056 <nk_draw_fb+0x746>
				  else if( l->begin.x == l->end.x )
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d121      	bne.n	8003a42 <nk_draw_fb+0x132>
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a04:	461e      	mov	r6, r3
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a10:	1ad4      	subs	r4, r2, r3
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a20:	1ad5      	subs	r5, r2, r3
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe f89e 	bl	8001b6c <nk_colot_to_rgb666>
 8003a30:	4603      	mov	r3, r0
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	462b      	mov	r3, r5
 8003a36:	4622      	mov	r2, r4
 8003a38:	4631      	mov	r1, r6
 8003a3a:	68b8      	ldr	r0, [r7, #8]
 8003a3c:	f009 fc34 	bl	800d2a8 <framebuf_vline>
			  } break;
 8003a40:	e309      	b.n	8004056 <nk_draw_fb+0x746>
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a48:	461e      	mov	r6, r3
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	1ad5      	subs	r5, r2, r3
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	1ad4      	subs	r4, r2, r3
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8003a70:	4613      	mov	r3, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe f87a 	bl	8001b6c <nk_colot_to_rgb666>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	9400      	str	r4, [sp, #0]
 8003a7e:	4643      	mov	r3, r8
 8003a80:	462a      	mov	r2, r5
 8003a82:	4631      	mov	r1, r6
 8003a84:	68b8      	ldr	r0, [r7, #8]
 8003a86:	f009 fcdb 	bl	800d440 <framebuf_line>
			  } break;
 8003a8a:	e2e4      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_RECT: {
				  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
				  //printf( "NK_COMMAND_RECT x: %d, y: %d, width: %d, height: %d, rounding: %d, thickness: %d\n", r->x, r->y, r->w, r->h, r->rounding, r->line_thickness );
				  //framebuf_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
				  int rad = 4;//r->rounding;
 8003a90:	2304      	movs	r3, #4
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_0 );
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	8a1b      	ldrh	r3, [r3, #16]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad4      	subs	r4, r2, r3
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab4:	8a52      	ldrh	r2, [r2, #18]
 8003ab6:	441a      	add	r2, r3
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	1ad5      	subs	r5, r2, r3
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	6958      	ldr	r0, [r3, #20]
 8003ac0:	f7fe f854 	bl	8001b6c <nk_colot_to_rgb666>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	9201      	str	r2, [sp, #4]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	462a      	mov	r2, r5
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	68b8      	ldr	r0, [r7, #8]
 8003ad4:	f009 fd4b 	bl	800d56e <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_90 );
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	18d4      	adds	r4, r2, r3
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af2:	8a52      	ldrh	r2, [r2, #18]
 8003af4:	441a      	add	r2, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1ad5      	subs	r5, r2, r3
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	6958      	ldr	r0, [r3, #20]
 8003afe:	f7fe f835 	bl	8001b6c <nk_colot_to_rgb666>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2202      	movs	r2, #2
 8003b06:	9201      	str	r2, [sp, #4]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	4621      	mov	r1, r4
 8003b10:	68b8      	ldr	r0, [r7, #8]
 8003b12:	f009 fd2c 	bl	800d56e <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_180 );
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	18d4      	adds	r4, r2, r3
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	1ad2      	subs	r2, r2, r3
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	18d5      	adds	r5, r2, r3
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	6958      	ldr	r0, [r3, #20]
 8003b36:	f7fe f819 	bl	8001b6c <nk_colot_to_rgb666>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	9201      	str	r2, [sp, #4]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	462a      	mov	r2, r5
 8003b46:	4621      	mov	r1, r4
 8003b48:	68b8      	ldr	r0, [r7, #8]
 8003b4a:	f009 fd10 	bl	800d56e <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_270 );
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	8a1b      	ldrh	r3, [r3, #16]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	1ad4      	subs	r4, r2, r3
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b66:	461a      	mov	r2, r3
 8003b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6a:	1ad2      	subs	r2, r2, r3
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	18d5      	adds	r5, r2, r3
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	6958      	ldr	r0, [r3, #20]
 8003b74:	f7fd fffa 	bl	8001b6c <nk_colot_to_rgb666>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	9201      	str	r2, [sp, #4]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	462a      	mov	r2, r5
 8003b84:	4621      	mov	r1, r4
 8003b86:	68b8      	ldr	r0, [r7, #8]
 8003b88:	f009 fcf1 	bl	800d56e <framebuf_circle_quadrant>
                    framebuf_hline( pfb, r->x+rad, r->y-y0, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b92:	461a      	mov	r2, r3
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	18d4      	adds	r4, r2, r3
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	1ad5      	subs	r5, r2, r3
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	8a1b      	ldrh	r3, [r3, #16]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	1ad6      	subs	r6, r2, r3
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	6958      	ldr	r0, [r3, #20]
 8003bb6:	f7fd ffd9 	bl	8001b6c <nk_colot_to_rgb666>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4633      	mov	r3, r6
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	68b8      	ldr	r0, [r7, #8]
 8003bc6:	f009 fb5a 	bl	800d27e <framebuf_hline>
                    framebuf_hline( pfb, r->x+rad, r->y-y0+r->h, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	18d4      	adds	r4, r2, r3
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be4:	8a52      	ldrh	r2, [r2, #18]
 8003be6:	189d      	adds	r5, r3, r2
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	8a1b      	ldrh	r3, [r3, #16]
 8003bec:	461a      	mov	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad6      	subs	r6, r2, r3
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	6958      	ldr	r0, [r3, #20]
 8003bfa:	f7fd ffb7 	bl	8001b6c <nk_colot_to_rgb666>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4633      	mov	r3, r6
 8003c04:	462a      	mov	r2, r5
 8003c06:	4621      	mov	r1, r4
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	f009 fb38 	bl	800d27e <framebuf_hline>
                    framebuf_vline( pfb, r->x, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c14:	461e      	mov	r6, r3
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	18d4      	adds	r4, r2, r3
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	8a5b      	ldrh	r3, [r3, #18]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	1ad5      	subs	r5, r2, r3
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	6958      	ldr	r0, [r3, #20]
 8003c38:	f7fd ff98 	bl	8001b6c <nk_colot_to_rgb666>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	462b      	mov	r3, r5
 8003c42:	4622      	mov	r2, r4
 8003c44:	4631      	mov	r1, r6
 8003c46:	68b8      	ldr	r0, [r7, #8]
 8003c48:	f009 fb2e 	bl	800d2a8 <framebuf_vline>
                    framebuf_vline( pfb, r->x+r->w, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	8a1b      	ldrh	r3, [r3, #16]
 8003c58:	18d4      	adds	r4, r2, r3
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c64:	1ad2      	subs	r2, r2, r3
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	18d5      	adds	r5, r2, r3
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	8a5b      	ldrh	r3, [r3, #18]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	1ad2      	subs	r2, r2, r3
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	1ad6      	subs	r6, r2, r3
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	6958      	ldr	r0, [r3, #20]
 8003c7c:	f7fd ff76 	bl	8001b6c <nk_colot_to_rgb666>
 8003c80:	4603      	mov	r3, r0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4633      	mov	r3, r6
 8003c86:	462a      	mov	r2, r5
 8003c88:	4621      	mov	r1, r4
 8003c8a:	68b8      	ldr	r0, [r7, #8]
 8003c8c:	f009 fb0c 	bl	800d2a8 <framebuf_vline>
			  } break;
 8003c90:	e1e1      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_RECT_FILLED: {
				  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
				  //framebuf_fill_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
                  int rad = 4;//r->rounding;
 8003c96:	2304      	movs	r3, #4
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
                  struct nk_color r_color = r->color;
 8003c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9c:	f107 0318 	add.w	r3, r7, #24
 8003ca0:	3212      	adds	r2, #18
 8003ca2:	6810      	ldr	r0, [r2, #0]
 8003ca4:	6018      	str	r0, [r3, #0]
                  if( r_color.r == 50 )
 8003ca6:	7e3b      	ldrb	r3, [r7, #24]
 8003ca8:	2b32      	cmp	r3, #50	; 0x32
 8003caa:	d107      	bne.n	8003cbc <nk_draw_fb+0x3ac>
                  {
                	  r_color.r = 40;
 8003cac:	2328      	movs	r3, #40	; 0x28
 8003cae:	763b      	strb	r3, [r7, #24]
                	  r_color.g = 40;
 8003cb0:	2328      	movs	r3, #40	; 0x28
 8003cb2:	767b      	strb	r3, [r7, #25]
                	  r_color.b = 40;
 8003cb4:	2328      	movs	r3, #40	; 0x28
 8003cb6:	76bb      	strb	r3, [r7, #26]
                	  r_color.a = 255;
 8003cb8:	23ff      	movs	r3, #255	; 0xff
 8003cba:	76fb      	strb	r3, [r7, #27]
                  }
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	89db      	ldrh	r3, [r3, #14]
 8003cc8:	441a      	add	r2, r3
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	1ad4      	subs	r4, r2, r3
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cdc:	8a12      	ldrh	r2, [r2, #16]
 8003cde:	441a      	add	r2, r3
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	1ad5      	subs	r5, r2, r3
 8003ce4:	69b8      	ldr	r0, [r7, #24]
 8003ce6:	f7fd ff41 	bl	8001b6c <nk_colot_to_rgb666>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2202      	movs	r2, #2
 8003cee:	9201      	str	r2, [sp, #4]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	462a      	mov	r2, r5
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	68b8      	ldr	r0, [r7, #8]
 8003cfa:	f009 fd4f 	bl	800d79c <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d04:	461a      	mov	r2, r3
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	18d4      	adds	r4, r2, r3
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d10:	461a      	mov	r2, r3
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d18:	8a12      	ldrh	r2, [r2, #16]
 8003d1a:	441a      	add	r2, r3
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	1ad5      	subs	r5, r2, r3
 8003d20:	69b8      	ldr	r0, [r7, #24]
 8003d22:	f7fd ff23 	bl	8001b6c <nk_colot_to_rgb666>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2202      	movs	r2, #2
 8003d2a:	9201      	str	r2, [sp, #4]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	462a      	mov	r2, r5
 8003d32:	4621      	mov	r1, r4
 8003d34:	68b8      	ldr	r0, [r7, #8]
 8003d36:	f009 fd31 	bl	800d79c <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d40:	461a      	mov	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	18d4      	adds	r4, r2, r3
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	1ad2      	subs	r2, r2, r3
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	18d5      	adds	r5, r2, r3
 8003d56:	69b8      	ldr	r0, [r7, #24]
 8003d58:	f7fd ff08 	bl	8001b6c <nk_colot_to_rgb666>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2202      	movs	r2, #2
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	462a      	mov	r2, r5
 8003d68:	4621      	mov	r1, r4
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f009 fd16 	bl	800d79c <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	89db      	ldrh	r3, [r3, #14]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	1ad4      	subs	r4, r2, r3
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	18d5      	adds	r5, r2, r3
 8003d92:	69b8      	ldr	r0, [r7, #24]
 8003d94:	f7fd feea 	bl	8001b6c <nk_colot_to_rgb666>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	9201      	str	r2, [sp, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	462a      	mov	r2, r5
 8003da4:	4621      	mov	r1, r4
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f009 fcf8 	bl	800d79c <framebuf_fill_circle_quadrant>
                    // up and down
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, r->h, nk_colot_to_rgb666( r_color ) );
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	18d4      	adds	r4, r2, r3
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	1ad5      	subs	r5, r2, r3
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	89db      	ldrh	r3, [r3, #14]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	1ad6      	subs	r6, r2, r3
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	8a1b      	ldrh	r3, [r3, #16]
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	69b8      	ldr	r0, [r7, #24]
 8003dda:	f7fd fec7 	bl	8001b6c <nk_colot_to_rgb666>
 8003dde:	4603      	mov	r3, r0
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	4633      	mov	r3, r6
 8003de8:	462a      	mov	r2, r5
 8003dea:	4621      	mov	r1, r4
 8003dec:	68b8      	ldr	r0, [r7, #8]
 8003dee:	f009 fa0e 	bl	800d20e <framebuf_fill_rect>
                    // middle
                    framebuf_fill_rect(  pfb, r->x, r->y-y0+rad, r->w, r->h-rad-rad, nk_colot_to_rgb666( r_color ) );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003df8:	461e      	mov	r6, r3
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	1ad2      	subs	r2, r2, r3
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	18d5      	adds	r5, r2, r3
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	89db      	ldrh	r3, [r3, #14]
 8003e0e:	4698      	mov	r8, r3
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	8a1b      	ldrh	r3, [r3, #16]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	1ad4      	subs	r4, r2, r3
 8003e1e:	69b8      	ldr	r0, [r7, #24]
 8003e20:	f7fd fea4 	bl	8001b6c <nk_colot_to_rgb666>
 8003e24:	4603      	mov	r3, r0
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	9400      	str	r4, [sp, #0]
 8003e2a:	4643      	mov	r3, r8
 8003e2c:	462a      	mov	r2, r5
 8003e2e:	4631      	mov	r1, r6
 8003e30:	68b8      	ldr	r0, [r7, #8]
 8003e32:	f009 f9ec 	bl	800d20e <framebuf_fill_rect>
			 } break;
 8003e36:	e10e      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_CIRCLE: {
				  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
 8003e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
				  framebuf_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	89db      	ldrh	r3, [r3, #14]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4c:	8a1b      	ldrh	r3, [r3, #16]
 8003e4e:	440b      	add	r3, r1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	da00      	bge.n	8003e56 <nk_draw_fb+0x546>
 8003e54:	3303      	adds	r3, #3
 8003e56:	109b      	asrs	r3, r3, #2
 8003e58:	18d4      	adds	r4, r2, r3
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	89db      	ldrh	r3, [r3, #14]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	8a1b      	ldrh	r3, [r3, #16]
 8003e70:	440b      	add	r3, r1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da00      	bge.n	8003e78 <nk_draw_fb+0x568>
 8003e76:	3303      	adds	r3, #3
 8003e78:	109b      	asrs	r3, r3, #2
 8003e7a:	18d5      	adds	r5, r2, r3
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	89db      	ldrh	r3, [r3, #14]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	8a1b      	ldrh	r3, [r3, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	da00      	bge.n	8003e8e <nk_draw_fb+0x57e>
 8003e8c:	3303      	adds	r3, #3
 8003e8e:	109b      	asrs	r3, r3, #2
 8003e90:	461e      	mov	r6, r3
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fe66 	bl	8001b6c <nk_colot_to_rgb666>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4633      	mov	r3, r6
 8003ea6:	462a      	mov	r2, r5
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	68b8      	ldr	r0, [r7, #8]
 8003eac:	f009 fadd 	bl	800d46a <framebuf_circle>
			  } break;
 8003eb0:	e0d1      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_CIRCLE_FILLED: {
				  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
				  framebuf_fill_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	899b      	ldrh	r3, [r3, #12]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	89db      	ldrh	r3, [r3, #14]
 8003ec8:	440b      	add	r3, r1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	da00      	bge.n	8003ed0 <nk_draw_fb+0x5c0>
 8003ece:	3303      	adds	r3, #3
 8003ed0:	109b      	asrs	r3, r3, #2
 8003ed2:	18d4      	adds	r4, r2, r3
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	899b      	ldrh	r3, [r3, #12]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	89db      	ldrh	r3, [r3, #14]
 8003eea:	440b      	add	r3, r1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da00      	bge.n	8003ef2 <nk_draw_fb+0x5e2>
 8003ef0:	3303      	adds	r3, #3
 8003ef2:	109b      	asrs	r3, r3, #2
 8003ef4:	18d5      	adds	r5, r2, r3
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	899b      	ldrh	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	89db      	ldrh	r3, [r3, #14]
 8003f00:	4413      	add	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da00      	bge.n	8003f08 <nk_draw_fb+0x5f8>
 8003f06:	3303      	adds	r3, #3
 8003f08:	109b      	asrs	r3, r3, #2
 8003f0a:	461e      	mov	r6, r3
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	6918      	ldr	r0, [r3, #16]
 8003f10:	f7fd fe2c 	bl	8001b6c <nk_colot_to_rgb666>
 8003f14:	4603      	mov	r3, r0
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4633      	mov	r3, r6
 8003f1a:	462a      	mov	r2, r5
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f009 fbc0 	bl	800d6a4 <framebuf_fill_circle>
			  } break;
 8003f24:	e097      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_TEXT: {
				  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
 8003f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f28:	643b      	str	r3, [r7, #64]	; 0x40
				  //framebuf_text( pfb, t->x, t->y-y0, (char *)t->string, nk_colot_to_rgb666( t->foreground ) );
				  lcd_text( pfb,  t->x, t->y-y0, (char *)t->string, 0xFFFF );
 8003f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f30:	b299      	uxth	r1, r3
 8003f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f4a:	9000      	str	r0, [sp, #0]
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f7fe f8bd 	bl	80020cc <lcd_text>
			  } break;
 8003f52:	e080      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_IMAGE: {
				  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
				  framebuf_fill_rect( pfb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 8003f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	1ad2      	subs	r2, r2, r3
 8003f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6e:	899b      	ldrh	r3, [r3, #12]
 8003f70:	461c      	mov	r4, r3
 8003f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f74:	89db      	ldrh	r3, [r3, #14]
 8003f76:	4619      	mov	r1, r3
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <nk_draw_fb+0x78c>)
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	9100      	str	r1, [sp, #0]
 8003f7e:	4623      	mov	r3, r4
 8003f80:	4601      	mov	r1, r0
 8003f82:	68b8      	ldr	r0, [r7, #8]
 8003f84:	f009 f943 	bl	800d20e <framebuf_fill_rect>
			  } break;
 8003f88:	e065      	b.n	8004056 <nk_draw_fb+0x746>
			  case NK_COMMAND_TRIANGLE_FILLED: {
				  const struct nk_command_triangle_filled *t = (const struct nk_command_triangle_filled*)cmd;
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
				  struct nk_color t_color = t->color;
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	617b      	str	r3, [r7, #20]
				if( 1 )
				{
				  t_color.r = 175;
 8003f94:	23af      	movs	r3, #175	; 0xaf
 8003f96:	753b      	strb	r3, [r7, #20]
				  t_color.g = 175;
 8003f98:	23af      	movs	r3, #175	; 0xaf
 8003f9a:	757b      	strb	r3, [r7, #21]
				  t_color.b = 175;
 8003f9c:	23af      	movs	r3, #175	; 0xaf
 8003f9e:	75bb      	strb	r3, [r7, #22]
				  t_color.a = 255;
 8003fa0:	23ff      	movs	r3, #255	; 0xff
 8003fa2:	75fb      	strb	r3, [r7, #23]
				}

				  framebuf_line( pfb, t->a.x, t->a.y-y0, t->b.x, t->b.y-y0, 0xFFFF );
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	1ad2      	subs	r2, r2, r3
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fbe:	461c      	mov	r4, r3
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fca:	1acb      	subs	r3, r1, r3
 8003fcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fd0:	9101      	str	r1, [sp, #4]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	68b8      	ldr	r0, [r7, #8]
 8003fda:	f009 fa31 	bl	800d440 <framebuf_line>
				  framebuf_line( pfb, t->b.x, t->b.y-y0, t->c.x, t->c.y-y0, 0xFFFF );
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ff8:	461c      	mov	r4, r3
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004000:	4619      	mov	r1, r3
 8004002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004004:	1acb      	subs	r3, r1, r3
 8004006:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800400a:	9101      	str	r1, [sp, #4]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4623      	mov	r3, r4
 8004010:	4601      	mov	r1, r0
 8004012:	68b8      	ldr	r0, [r7, #8]
 8004014:	f009 fa14 	bl	800d440 <framebuf_line>
				  framebuf_line( pfb, t->c.x, t->c.y-y0, t->a.x, t->a.y-y0, 0xFFFF );
 8004018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800401e:	4618      	mov	r0, r3
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004026:	461a      	mov	r2, r3
 8004028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004032:	461c      	mov	r4, r3
 8004034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004036:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800403a:	4619      	mov	r1, r3
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	1acb      	subs	r3, r1, r3
 8004040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004044:	9101      	str	r1, [sp, #4]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4623      	mov	r3, r4
 800404a:	4601      	mov	r1, r0
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	f009 f9f7 	bl	800d440 <framebuf_line>
			  } break;
 8004052:	e000      	b.n	8004056 <nk_draw_fb+0x746>
			  default: break;
 8004054:	bf00      	nop
		  nk_foreach(cmd, ctx)
 8004056:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f00c f94f 	bl	80102fc <nk__next>
 800405e:	64b8      	str	r0, [r7, #72]	; 0x48
 8004060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004062:	2b00      	cmp	r3, #0
 8004064:	f47f ac68 	bne.w	8003938 <nk_draw_fb+0x28>
			  }
		  }
	  }

		lcd_bmp( 0, y0, 480, 40, pfb->buf );
 8004068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406a:	b219      	sxth	r1, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2328      	movs	r3, #40	; 0x28
 8004074:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004078:	2000      	movs	r0, #0
 800407a:	f7fe f987 	bl	800238c <lcd_bmp>
	  for( int y0 = 0 ; y0 < 320 ; y0 += 40 )
 800407e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004080:	3328      	adds	r3, #40	; 0x28
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004086:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800408a:	f6ff ac4a 	blt.w	8003922 <nk_draw_fb+0x12>
	  }
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	3750      	adds	r7, #80	; 0x50
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800409a:	bf00      	nop
 800409c:	0003ffff 	.word	0x0003ffff

080040a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b096      	sub	sp, #88	; 0x58
 80040a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040a6:	f001 fdac 	bl	8005c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040aa:	f000 f905 	bl	80042b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040ae:	f7fd fc0d 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 80040b2:	f7fd fae1 	bl	8001678 <MX_DMA_Init>
  MX_QUADSPI1_Init();
 80040b6:	f000 facd 	bl	8004654 <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 80040ba:	f7fc fe0d 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 80040be:	f7fd f9d7 	bl	8001470 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80040c2:	f000 f947 	bl	8004354 <MX_OPAMP1_Init>
  MX_DAC1_Init();
 80040c6:	f7fd f98f 	bl	80013e8 <MX_DAC1_Init>
  MX_ADC3_Init();
 80040ca:	f7fc febf 	bl	8000e4c <MX_ADC3_Init>
  MX_ADC4_Init();
 80040ce:	f7fc ff37 	bl	8000f40 <MX_ADC4_Init>
  MX_ADC5_Init();
 80040d2:	f7fc ff9d 	bl	8001010 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 80040d6:	f000 f969 	bl	80043ac <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 80040da:	f000 f993 	bl	8004404 <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80040de:	f000 f9bd 	bl	800445c <MX_OPAMP6_Init>
  MX_FMC_Init();
 80040e2:	f7fd fb23 	bl	800172c <MX_FMC_Init>
  MX_SPI3_Init();
 80040e6:	f001 f9fd 	bl	80054e4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80040ea:	f001 fc01 	bl	80058f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80040ee:	f001 fc51 	bl	8005994 <MX_TIM2_Init>
  MX_TIM3_Init();
 80040f2:	f001 fcc3 	bl	8005a7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  float ax = 250/989.0;
 80040f6:	4b60      	ldr	r3, [pc, #384]	; (8004278 <main+0x1d8>)
 80040f8:	647b      	str	r3, [r7, #68]	; 0x44
  float bx = -15800/989.0;
 80040fa:	4b60      	ldr	r3, [pc, #384]	; (800427c <main+0x1dc>)
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
  float ay = 250/1407.0;
 80040fe:	4b60      	ldr	r3, [pc, #384]	; (8004280 <main+0x1e0>)
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
  float by = -1150/67.0;
 8004102:	4b60      	ldr	r3, [pc, #384]	; (8004284 <main+0x1e4>)
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
  uint16_t x = 0, y = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	857b      	strh	r3, [r7, #42]	; 0x2a
 800410a:	2300      	movs	r3, #0
 800410c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t x_bck = 0, y_bck = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004112:	2300      	movs	r3, #0
 8004114:	86bb      	strh	r3, [r7, #52]	; 0x34



  tTsc2046 tsc;
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by);
 8004116:	f107 000c 	add.w	r0, r7, #12
 800411a:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 800411e:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8004122:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8004126:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004132:	4955      	ldr	r1, [pc, #340]	; (8004288 <main+0x1e8>)
 8004134:	f019 fb1a 	bl	801d76c <tsc2046_init>

  lcd_config();
 8004138:	f7fd fcc4 	bl	8001ac4 <lcd_config>
  int d = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
  d = lcd_set_pixel_bench( 100, 100, 0xFFFF );
 8004140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	2064      	movs	r0, #100	; 0x64
 8004148:	f7fd fed0 	bl	8001eec <lcd_set_pixel_bench>
 800414c:	6338      	str	r0, [r7, #48]	; 0x30
  d = d+1;
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	3301      	adds	r3, #1
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
  static struct nk_buffer pool;
  static struct nk_user_font font;
  static uint8_t buf_cmds[1024*8] = {0};
  static uint8_t buf_pool[1024*8] = {0};

  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 8004154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004158:	494c      	ldr	r1, [pc, #304]	; (800428c <main+0x1ec>)
 800415a:	484d      	ldr	r0, [pc, #308]	; (8004290 <main+0x1f0>)
 800415c:	f009 fbf2 	bl	800d944 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 8004160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004164:	494b      	ldr	r1, [pc, #300]	; (8004294 <main+0x1f4>)
 8004166:	484c      	ldr	r0, [pc, #304]	; (8004298 <main+0x1f8>)
 8004168:	f009 fbec 	bl	800d944 <nk_buffer_init_fixed>

  font.height = fontUbuntuBookRNormal16.bbxh;
 800416c:	4b4b      	ldr	r3, [pc, #300]	; (800429c <main+0x1fc>)
 800416e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417a:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <main+0x200>)
 800417c:	edc3 7a01 	vstr	s15, [r3, #4]
  font.width = text_width_f;
 8004180:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <main+0x200>)
 8004182:	4a48      	ldr	r2, [pc, #288]	; (80042a4 <main+0x204>)
 8004184:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 8004186:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <main+0x200>)
 8004188:	4a43      	ldr	r2, [pc, #268]	; (8004298 <main+0x1f8>)
 800418a:	4941      	ldr	r1, [pc, #260]	; (8004290 <main+0x1f0>)
 800418c:	4846      	ldr	r0, [pc, #280]	; (80042a8 <main+0x208>)
 800418e:	f00b fc21 	bl	800f9d4 <nk_init_custom>

	static uint8_t fb_buf[480*40*2];
	tFramebuf fb;

	framebuf_init( &fb, 480, 40, fb_buf );
 8004192:	4638      	mov	r0, r7
 8004194:	4b45      	ldr	r3, [pc, #276]	; (80042ac <main+0x20c>)
 8004196:	2228      	movs	r2, #40	; 0x28
 8004198:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800419c:	f009 f803 	bl	800d1a6 <framebuf_init>

	  int pressed = 1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int pressed_bck = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
	  int pressed_bck2 = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	static struct Oscilloscope osc = {0};
  while( 1 )
  {
	  x_bck = x;
 80041ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041ae:	86fb      	strh	r3, [r7, #54]	; 0x36
	  y_bck = y;
 80041b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041b2:	86bb      	strh	r3, [r7, #52]	; 0x34
	  tsc2046_read( &tsc, &x, &y );
 80041b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041b8:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80041bc:	f107 030c 	add.w	r3, r7, #12
 80041c0:	4618      	mov	r0, r3
 80041c2:	f019 fb67 	bl	801d894 <tsc2046_read>

	  pressed_bck2 = pressed_bck;
 80041c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  pressed_bck = pressed;
 80041ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041cc:	64bb      	str	r3, [r7, #72]	; 0x48
	  pressed = (x!=0);
 80041ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c

	  if( (pressed || pressed_bck || pressed_bck2) )// && (pressed != pressed_bck) )
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <main+0x14e>
 80041e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <main+0x14e>
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d039      	beq.n	8004262 <main+0x1c2>
	  {
		  nk_input_begin( &ctx );
 80041ee:	482e      	ldr	r0, [pc, #184]	; (80042a8 <main+0x208>)
 80041f0:	f00d fee2 	bl	8011fb8 <nk_input_begin>
		  if( pressed )
 80041f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d012      	beq.n	8004220 <main+0x180>
		  {
			  nk_input_motion( &ctx, x, y );
 80041fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041fc:	4619      	mov	r1, r3
 80041fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004200:	461a      	mov	r2, r3
 8004202:	4829      	ldr	r0, [pc, #164]	; (80042a8 <main+0x208>)
 8004204:	f00d ff78 	bl	80120f8 <nk_input_motion>
			  nk_input_button( &ctx, 0, x, y, 1 );
 8004208:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800420a:	461a      	mov	r2, r3
 800420c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800420e:	4619      	mov	r1, r3
 8004210:	2301      	movs	r3, #1
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	460b      	mov	r3, r1
 8004216:	2100      	movs	r1, #0
 8004218:	4823      	ldr	r0, [pc, #140]	; (80042a8 <main+0x208>)
 800421a:	f00d ffb3 	bl	8012184 <nk_input_button>
 800421e:	e010      	b.n	8004242 <main+0x1a2>
		  }
		  else if( pressed_bck )
 8004220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <main+0x1a2>
		  {
			  nk_input_motion( &ctx, x_bck, y_bck );
 8004226:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004228:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800422a:	4619      	mov	r1, r3
 800422c:	481e      	ldr	r0, [pc, #120]	; (80042a8 <main+0x208>)
 800422e:	f00d ff63 	bl	80120f8 <nk_input_motion>
			  nk_input_button( &ctx, 0, x_bck, y_bck, 0 );
 8004232:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004234:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004236:	2100      	movs	r1, #0
 8004238:	9100      	str	r1, [sp, #0]
 800423a:	2100      	movs	r1, #0
 800423c:	481a      	ldr	r0, [pc, #104]	; (80042a8 <main+0x208>)
 800423e:	f00d ffa1 	bl	8012184 <nk_input_button>
		  }
		  nk_input_end( &ctx );
 8004242:	4819      	ldr	r0, [pc, #100]	; (80042a8 <main+0x208>)
 8004244:	f00d ff20 	bl	8012088 <nk_input_end>
		  oscilloscope_process(&osc, &ctx);
 8004248:	4917      	ldr	r1, [pc, #92]	; (80042a8 <main+0x208>)
 800424a:	4819      	ldr	r0, [pc, #100]	; (80042b0 <main+0x210>)
 800424c:	f7fe f98e 	bl	800256c <oscilloscope_process>
		  //if( pressed || pressed_bck )
		  {
			  nk_draw_fb( &ctx, &fb );
 8004250:	463b      	mov	r3, r7
 8004252:	4619      	mov	r1, r3
 8004254:	4814      	ldr	r0, [pc, #80]	; (80042a8 <main+0x208>)
 8004256:	f7ff fb5b 	bl	8003910 <nk_draw_fb>

		  }
		  nk_clear(&ctx);
 800425a:	4813      	ldr	r0, [pc, #76]	; (80042a8 <main+0x208>)
 800425c:	f00b fc22 	bl	800faa4 <nk_clear>
 8004260:	e008      	b.n	8004274 <main+0x1d4>
		  //HAL_Delay(10);
	  }
	  else if( nk_window_is_collapsed( &ctx, "STM32G4 Scope" ) )
 8004262:	4914      	ldr	r1, [pc, #80]	; (80042b4 <main+0x214>)
 8004264:	4810      	ldr	r0, [pc, #64]	; (80042a8 <main+0x208>)
 8004266:	f019 fa49 	bl	801d6fc <nk_window_is_collapsed>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d09d      	beq.n	80041ac <main+0x10c>
	  {
		  test_scope();
 8004270:	f000 fde2 	bl	8004e38 <test_scope>
	  x_bck = x;
 8004274:	e79a      	b.n	80041ac <main+0x10c>
 8004276:	bf00      	nop
 8004278:	3e816c75 	.word	0x3e816c75
 800427c:	c17f9c9a 	.word	0xc17f9c9a
 8004280:	3e35f289 	.word	0x3e35f289
 8004284:	c189503d 	.word	0xc189503d
 8004288:	200167dc 	.word	0x200167dc
 800428c:	2000082c 	.word	0x2000082c
 8004290:	200007f0 	.word	0x200007f0
 8004294:	20002868 	.word	0x20002868
 8004298:	2000282c 	.word	0x2000282c
 800429c:	080230b8 	.word	0x080230b8
 80042a0:	20004868 	.word	0x20004868
 80042a4:	08001a8d 	.word	0x08001a8d
 80042a8:	20004874 	.word	0x20004874
 80042ac:	20007edc 	.word	0x20007edc
 80042b0:	200114dc 	.word	0x200114dc
 80042b4:	080210e8 	.word	0x080210e8

080042b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b094      	sub	sp, #80	; 0x50
 80042bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042be:	f107 0318 	add.w	r3, r7, #24
 80042c2:	2238      	movs	r2, #56	; 0x38
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f01a f8fb 	bl	801e4c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80042da:	2000      	movs	r0, #0
 80042dc:	f005 faee 	bl	80098bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ea:	2302      	movs	r3, #2
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042ee:	2303      	movs	r3, #3
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80042f2:	2306      	movs	r3, #6
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80042f6:	2355      	movs	r3, #85	; 0x55
 80042f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042fa:	2302      	movs	r3, #2
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80042fe:	2308      	movs	r3, #8
 8004300:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004302:	2302      	movs	r3, #2
 8004304:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004306:	f107 0318 	add.w	r3, r7, #24
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fe64 	bl	8009fd8 <HAL_RCC_OscConfig>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004316:	f000 f818 	bl	800434a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800431a:	230f      	movs	r3, #15
 800431c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800431e:	2303      	movs	r3, #3
 8004320:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	2104      	movs	r1, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f006 f968 	bl	800a608 <HAL_RCC_ClockConfig>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800433e:	f000 f804 	bl	800434a <Error_Handler>
  }
}
 8004342:	bf00      	nop
 8004344:	3750      	adds	r7, #80	; 0x50
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800434e:	b672      	cpsid	i
}
 8004350:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004352:	e7fe      	b.n	8004352 <Error_Handler+0x8>

08004354 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 800435a:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <MX_OPAMP1_Init+0x54>)
 800435c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800435e:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 8004360:	2200      	movs	r2, #0
 8004362:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 800436c:	2208      	movs	r2, #8
 800436e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 8004372:	2201      	movs	r2, #1
 8004374:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 800437e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004382:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 8004386:	2200      	movs	r2, #0
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 800438c:	2200      	movs	r2, #0
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004390:	4804      	ldr	r0, [pc, #16]	; (80043a4 <MX_OPAMP1_Init+0x50>)
 8004392:	f005 f991 	bl	80096b8 <HAL_OPAMP_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 800439c:	f7ff ffd5 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80043a0:	bf00      	nop
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	200115bc 	.word	0x200115bc
 80043a8:	40010300 	.word	0x40010300

080043ac <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <MX_OPAMP3_Init+0x54>)
 80043b4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043be:	2240      	movs	r2, #64	; 0x40
 80043c0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043da:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043de:	2200      	movs	r2, #0
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80043e8:	4804      	ldr	r0, [pc, #16]	; (80043fc <MX_OPAMP3_Init+0x50>)
 80043ea:	f005 f965 	bl	80096b8 <HAL_OPAMP_Init>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 80043f4:	f7ff ffa9 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	200115f8 	.word	0x200115f8
 8004400:	40010308 	.word	0x40010308

08004404 <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <MX_OPAMP5_Init+0x50>)
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <MX_OPAMP5_Init+0x54>)
 800440c:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_OPAMP5_Init+0x50>)
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <MX_OPAMP5_Init+0x50>)
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_OPAMP5_Init+0x50>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_OPAMP5_Init+0x50>)
 8004422:	2201      	movs	r2, #1
 8004424:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <MX_OPAMP5_Init+0x50>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_OPAMP5_Init+0x50>)
 800442e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <MX_OPAMP5_Init+0x50>)
 8004436:	2200      	movs	r2, #0
 8004438:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_OPAMP5_Init+0x50>)
 800443c:	2200      	movs	r2, #0
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8004440:	4804      	ldr	r0, [pc, #16]	; (8004454 <MX_OPAMP5_Init+0x50>)
 8004442:	f005 f939 	bl	80096b8 <HAL_OPAMP_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_OPAMP5_Init+0x4c>
  {
    Error_Handler();
 800444c:	f7ff ff7d 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20011634 	.word	0x20011634
 8004458:	40010310 	.word	0x40010310

0800445c <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <MX_OPAMP6_Init+0x50>)
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <MX_OPAMP6_Init+0x54>)
 8004464:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_OPAMP6_Init+0x50>)
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <MX_OPAMP6_Init+0x50>)
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_OPAMP6_Init+0x50>)
 8004474:	2208      	movs	r2, #8
 8004476:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <MX_OPAMP6_Init+0x50>)
 800447a:	2201      	movs	r2, #1
 800447c:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <MX_OPAMP6_Init+0x50>)
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <MX_OPAMP6_Init+0x50>)
 8004486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800448a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <MX_OPAMP6_Init+0x50>)
 800448e:	2200      	movs	r2, #0
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <MX_OPAMP6_Init+0x50>)
 8004494:	2200      	movs	r2, #0
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <MX_OPAMP6_Init+0x50>)
 800449a:	f005 f90d 	bl	80096b8 <HAL_OPAMP_Init>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 80044a4:	f7ff ff51 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20011670 	.word	0x20011670
 80044b0:	40010314 	.word	0x40010314

080044b4 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	; 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	f107 031c 	add.w	r3, r7, #28
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <HAL_OPAMP_MspInit+0x148>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d119      	bne.n	800450a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	4a49      	ldr	r2, [pc, #292]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80044ee:	2388      	movs	r3, #136	; 0x88
 80044f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044f2:	2303      	movs	r3, #3
 80044f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fa:	f107 031c 	add.w	r3, r7, #28
 80044fe:	4619      	mov	r1, r3
 8004500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004504:	f004 ff3e 	bl	8009384 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 8004508:	e073      	b.n	80045f2 <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP3)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <HAL_OPAMP_MspInit+0x150>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d118      	bne.n	8004546 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	4a39      	ldr	r2, [pc, #228]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004520:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800452c:	2305      	movs	r3, #5
 800452e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004530:	2303      	movs	r3, #3
 8004532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004538:	f107 031c 	add.w	r3, r7, #28
 800453c:	4619      	mov	r1, r3
 800453e:	4832      	ldr	r0, [pc, #200]	; (8004608 <HAL_OPAMP_MspInit+0x154>)
 8004540:	f004 ff20 	bl	8009384 <HAL_GPIO_Init>
}
 8004544:	e055      	b.n	80045f2 <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP5)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a30      	ldr	r2, [pc, #192]	; (800460c <HAL_OPAMP_MspInit+0x158>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d119      	bne.n	8004584 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 8004552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004568:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800456c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800456e:	2303      	movs	r3, #3
 8004570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004576:	f107 031c 	add.w	r3, r7, #28
 800457a:	4619      	mov	r1, r3
 800457c:	4822      	ldr	r0, [pc, #136]	; (8004608 <HAL_OPAMP_MspInit+0x154>)
 800457e:	f004 ff01 	bl	8009384 <HAL_GPIO_Init>
}
 8004582:	e036      	b.n	80045f2 <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP6)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <HAL_OPAMP_MspInit+0x15c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d131      	bne.n	80045f2 <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a6:	4b16      	ldr	r3, [pc, #88]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_OPAMP_MspInit+0x14c>)
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045be:	2302      	movs	r3, #2
 80045c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c2:	2303      	movs	r3, #3
 80045c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ca:	f107 031c 	add.w	r3, r7, #28
 80045ce:	4619      	mov	r1, r3
 80045d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045d4:	f004 fed6 	bl	8009384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80045d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045de:	2303      	movs	r3, #3
 80045e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	4619      	mov	r1, r3
 80045ec:	4806      	ldr	r0, [pc, #24]	; (8004608 <HAL_OPAMP_MspInit+0x154>)
 80045ee:	f004 fec9 	bl	8009384 <HAL_GPIO_Init>
}
 80045f2:	bf00      	nop
 80045f4:	3730      	adds	r7, #48	; 0x30
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40010300 	.word	0x40010300
 8004600:	40021000 	.word	0x40021000
 8004604:	40010308 	.word	0x40010308
 8004608:	48000400 	.word	0x48000400
 800460c:	40010310 	.word	0x40010310
 8004610:	40010314 	.word	0x40010314

08004614 <HAL_QSPI_TxCpltCallback>:
    uint32_t SIOOMode,
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
    TxCpltCallback = 1;
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_QSPI_TxCpltCallback+0x1c>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	200116ac 	.word	0x200116ac

08004634 <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    RxCpltCallback = 1;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <HAL_QSPI_RxCpltCallback+0x1c>)
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	200116ad 	.word	0x200116ad

08004654 <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <MX_QUADSPI1_Init+0x54>)
 800465c:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 6;
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 8004660:	2206      	movs	r2, #6
 8004662:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 8004666:	2201      	movs	r2, #1
 8004668:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800466a:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 800466c:	2200      	movs	r2, #0
 800466e:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 8004672:	2217      	movs	r2, #23
 8004674:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 800467e:	2200      	movs	r2, #0
 8004680:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 800468a:	2200      	movs	r2, #0
 800468c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 800468e:	4805      	ldr	r0, [pc, #20]	; (80046a4 <MX_QUADSPI1_Init+0x50>)
 8004690:	f005 f9b8 	bl	8009a04 <HAL_QSPI_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 800469a:	f7ff fe56 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200116b0 	.word	0x200116b0
 80046a8:	a0001000 	.word	0xa0001000

080046ac <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b0a0      	sub	sp, #128	; 0x80
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046c4:	f107 0318 	add.w	r3, r7, #24
 80046c8:	2254      	movs	r2, #84	; 0x54
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f019 fef8 	bl	801e4c2 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a54      	ldr	r2, [pc, #336]	; (8004828 <HAL_QSPI_MspInit+0x17c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	f040 80a1 	bne.w	8004820 <HAL_QSPI_MspInit+0x174>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80046de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e8:	f107 0318 	add.w	r3, r7, #24
 80046ec:	4618      	mov	r0, r3
 80046ee:	f006 f97b 	bl	800a9e8 <HAL_RCCEx_PeriphCLKConfig>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80046f8:	f7ff fe27 	bl	800434a <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80046fc:	4b4b      	ldr	r3, [pc, #300]	; (800482c <HAL_QSPI_MspInit+0x180>)
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <HAL_QSPI_MspInit+0x180>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004706:	6513      	str	r3, [r2, #80]	; 0x50
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_QSPI_MspInit+0x180>)
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004714:	4b45      	ldr	r3, [pc, #276]	; (800482c <HAL_QSPI_MspInit+0x180>)
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	4a44      	ldr	r2, [pc, #272]	; (800482c <HAL_QSPI_MspInit+0x180>)
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004720:	4b42      	ldr	r3, [pc, #264]	; (800482c <HAL_QSPI_MspInit+0x180>)
 8004722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800472c:	4b3f      	ldr	r3, [pc, #252]	; (800482c <HAL_QSPI_MspInit+0x180>)
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	4a3e      	ldr	r2, [pc, #248]	; (800482c <HAL_QSPI_MspInit+0x180>)
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004738:	4b3c      	ldr	r3, [pc, #240]	; (800482c <HAL_QSPI_MspInit+0x180>)
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <HAL_QSPI_MspInit+0x180>)
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	4a38      	ldr	r2, [pc, #224]	; (800482c <HAL_QSPI_MspInit+0x180>)
 800474a:	f043 0308 	orr.w	r3, r3, #8
 800474e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <HAL_QSPI_MspInit+0x180>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> QUADSPI1_BK2_IO2
    PC4     ------> QUADSPI1_BK2_IO3
    PB10     ------> QUADSPI1_CLK
    PD3     ------> QUADSPI1_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800475c:	231e      	movs	r3, #30
 800475e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004760:	2302      	movs	r3, #2
 8004762:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004768:	2300      	movs	r3, #0
 800476a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800476c:	230a      	movs	r3, #10
 800476e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004770:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004774:	4619      	mov	r1, r3
 8004776:	482e      	ldr	r0, [pc, #184]	; (8004830 <HAL_QSPI_MspInit+0x184>)
 8004778:	f004 fe04 	bl	8009384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800477c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004780:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478a:	2300      	movs	r3, #0
 800478c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800478e:	230a      	movs	r3, #10
 8004790:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004792:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004796:	4619      	mov	r1, r3
 8004798:	4826      	ldr	r0, [pc, #152]	; (8004834 <HAL_QSPI_MspInit+0x188>)
 800479a:	f004 fdf3 	bl	8009384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800479e:	2308      	movs	r3, #8
 80047a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a2:	2302      	movs	r3, #2
 80047a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047aa:	2300      	movs	r3, #0
 80047ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80047ae:	230a      	movs	r3, #10
 80047b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80047b6:	4619      	mov	r1, r3
 80047b8:	481f      	ldr	r0, [pc, #124]	; (8004838 <HAL_QSPI_MspInit+0x18c>)
 80047ba:	f004 fde3 	bl	8009384 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA1_Channel1;
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_QSPI_MspInit+0x194>)
 80047c2:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047c6:	2228      	movs	r2, #40	; 0x28
 80047c8:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047cc:	2210      	movs	r2, #16
 80047ce:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047de:	2200      	movs	r2, #0
 80047e0:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e2:	4b16      	ldr	r3, [pc, #88]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 80047e8:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 80047f4:	4811      	ldr	r0, [pc, #68]	; (800483c <HAL_QSPI_MspInit+0x190>)
 80047f6:	f004 fa93 	bl	8008d20 <HAL_DMA_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_QSPI_MspInit+0x158>
    {
      Error_Handler();
 8004800:	f7ff fda3 	bl	800434a <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0d      	ldr	r2, [pc, #52]	; (800483c <HAL_QSPI_MspInit+0x190>)
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c
 800480a:	4a0c      	ldr	r2, [pc, #48]	; (800483c <HAL_QSPI_MspInit+0x190>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8004810:	2200      	movs	r2, #0
 8004812:	2100      	movs	r1, #0
 8004814:	205f      	movs	r0, #95	; 0x5f
 8004816:	f003 fe94 	bl	8008542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800481a:	205f      	movs	r0, #95	; 0x5f
 800481c:	f003 feab 	bl	8008576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8004820:	bf00      	nop
 8004822:	3780      	adds	r7, #128	; 0x80
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	a0001000 	.word	0xa0001000
 800482c:	40021000 	.word	0x40021000
 8004830:	48000800 	.word	0x48000800
 8004834:	48000400 	.word	0x48000400
 8004838:	48000c00 	.word	0x48000c00
 800483c:	200116fc 	.word	0x200116fc
 8004840:	40020008 	.word	0x40020008

08004844 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	605a      	str	r2, [r3, #4]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <scope_init>:
#include "scope.h"

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	4613      	mov	r3, r2
 80048d4:	813b      	strh	r3, [r7, #8]
	scope->trigger_level = trigger_level;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	897a      	ldrh	r2, [r7, #10]
 80048da:	82da      	strh	r2, [r3, #22]
	scope->sample_rate = sample_rate;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	893a      	ldrh	r2, [r7, #8]
 80048e0:	805a      	strh	r2, [r3, #2]
	scope->buffer1 = buffer1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]
	scope->buffer2 = buffer2;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	609a      	str	r2, [r3, #8]
	scope->buffer3 = buffer3;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	60da      	str	r2, [r3, #12]
	scope->buffer4 = buffer4;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	611a      	str	r2, [r3, #16]
	scope->len = len;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048fe:	829a      	strh	r2, [r3, #20]
	scope->trigger_location = 0;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	831a      	strh	r2, [r3, #24]
	scope->state = SCOPE_STATE_RESET;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]

	_scope = scope;
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <scope_init+0x98>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6013      	str	r3, [r2, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a12      	ldr	r2, [pc, #72]	; (8004960 <scope_init+0x9c>)
 8004916:	61da      	str	r2, [r3, #28]
	scope->hadc2 = &hadc3;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <scope_init+0xa0>)
 800491c:	621a      	str	r2, [r3, #32]
	scope->hadc3 = &hadc5;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a11      	ldr	r2, [pc, #68]	; (8004968 <scope_init+0xa4>)
 8004922:	625a      	str	r2, [r3, #36]	; 0x24
	scope->hadc4 = &hadc4;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a11      	ldr	r2, [pc, #68]	; (800496c <scope_init+0xa8>)
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <scope_init+0xac>)
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <scope_init+0xb0>)
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <scope_init+0xb4>)
 800493a:	635a      	str	r2, [r3, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a0f      	ldr	r2, [pc, #60]	; (800497c <scope_init+0xb8>)
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
	scope->htim1 = &htim1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <scope_init+0xbc>)
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
	scope->htim2 = &htim2;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <scope_init+0xc0>)
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	2001175c 	.word	0x2001175c
 8004960:	20000374 	.word	0x20000374
 8004964:	200003e0 	.word	0x200003e0
 8004968:	200004b8 	.word	0x200004b8
 800496c:	2000044c 	.word	0x2000044c
 8004970:	20000524 	.word	0x20000524
 8004974:	20000584 	.word	0x20000584
 8004978:	20000644 	.word	0x20000644
 800497c:	200005e4 	.word	0x200005e4
 8004980:	20016844 	.word	0x20016844
 8004984:	20016890 	.word	0x20016890

08004988 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e009      	b.n	80049aa <scope_start+0x22>
	{
		scope->CNDTRs[i] = 0;
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3310      	adds	r3, #16
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	2200      	movs	r2, #0
 80049a2:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	ddf2      	ble.n	8004996 <scope_start+0xe>
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 80049b0:	4b5b      	ldr	r3, [pc, #364]	; (8004b20 <scope_start+0x198>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4a5a      	ldr	r2, [pc, #360]	; (8004b20 <scope_start+0x198>)
 80049b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049ba:	6113      	str	r3, [r2, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 80049bc:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <scope_start+0x198>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a57      	ldr	r2, [pc, #348]	; (8004b20 <scope_start+0x198>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6093      	str	r3, [r2, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
 80049c8:	2303      	movs	r3, #3
 80049ca:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f7fb fdd1 	bl	8000574 <__aeabi_i2d>
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049da:	f7fb ff5f 	bl	800089c <__aeabi_ddiv>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4614      	mov	r4, r2
 80049e4:	461d      	mov	r5, r3
 80049e6:	68b8      	ldr	r0, [r7, #8]
 80049e8:	f7fb fdc4 	bl	8000574 <__aeabi_i2d>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fb ff52 	bl	800089c <__aeabi_ddiv>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	a345      	add	r3, pc, #276	; (adr r3, 8004b18 <scope_start+0x190>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fe1f 	bl	8000648 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	f7fc f8f1 	bl	8000bf8 <__aeabi_d2uiz>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4841      	ldr	r0, [pc, #260]	; (8004b24 <scope_start+0x19c>)
 8004a1e:	f003 ff07 	bl	8008830 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8004a22:	2100      	movs	r1, #0
 8004a24:	483f      	ldr	r0, [pc, #252]	; (8004b24 <scope_start+0x19c>)
 8004a26:	f003 fde2 	bl	80085ee <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 8004a2a:	483f      	ldr	r0, [pc, #252]	; (8004b28 <scope_start+0x1a0>)
 8004a2c:	f004 ff14 	bl	8009858 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8004a30:	483e      	ldr	r0, [pc, #248]	; (8004b2c <scope_start+0x1a4>)
 8004a32:	f004 ff11 	bl	8009858 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 8004a36:	483e      	ldr	r0, [pc, #248]	; (8004b30 <scope_start+0x1a8>)
 8004a38:	f004 ff0e 	bl	8009858 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 8004a3c:	483d      	ldr	r0, [pc, #244]	; (8004b34 <scope_start+0x1ac>)
 8004a3e:	f004 ff0b 	bl	8009858 <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	217f      	movs	r1, #127	; 0x7f
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f003 fb0d 	bl	8008068 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	217f      	movs	r1, #127	; 0x7f
 8004a54:	4618      	mov	r0, r3
 8004a56:	f003 fb07 	bl	8008068 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	217f      	movs	r1, #127	; 0x7f
 8004a60:	4618      	mov	r0, r3
 8004a62:	f003 fb01 	bl	8008068 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	217f      	movs	r1, #127	; 0x7f
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f003 fafb 	bl	8008068 <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff03 	bl	8004884 <LL_ADC_DisableIT_AWD1>
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff ff0d 	bl	80048a4 <LL_ADC_DisableIT_AWD2>
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a9e:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	625a      	str	r2, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69d8      	ldr	r0, [r3, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8a9b      	ldrh	r3, [r3, #20]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f001 fe81 	bl	80067c8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a18      	ldr	r0, [r3, #32]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6899      	ldr	r1, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8a9b      	ldrh	r3, [r3, #20]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f001 fe78 	bl	80067c8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68d9      	ldr	r1, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8a9b      	ldrh	r3, [r3, #20]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f001 fe6f 	bl	80067c8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6919      	ldr	r1, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8a9b      	ldrh	r3, [r3, #20]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f001 fe66 	bl	80067c8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	4618      	mov	r0, r3
 8004b02:	f006 fe81 	bl	800b808 <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bdb0      	pop	{r4, r5, r7, pc}
 8004b14:	f3af 8000 	nop.w
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	40affe00 	.word	0x40affe00
 8004b20:	e0042000 	.word	0xe0042000
 8004b24:	200006bc 	.word	0x200006bc
 8004b28:	200115bc 	.word	0x200115bc
 8004b2c:	200115f8 	.word	0x200115f8
 8004b30:	20011634 	.word	0x20011634
 8004b34:	20011670 	.word	0x20011670

08004b38 <scope_stop>:

void scope_stop( tScope *scope )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop( scope->htim1 );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	4618      	mov	r0, r3
 8004b46:	f006 fecf 	bl	800b8e8 <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f006 ffdf 	bl	800bb14 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f006 fec4 	bl	800b8e8 <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 ff03 	bl	8006970 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 fefe 	bl	8006970 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 fef9 	bl	8006970 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fef4 	bl	8006970 <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2205      	movs	r2, #5
 8004b8c:	701a      	strb	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <scope_is_busy>:

uint8_t scope_is_busy( tScope *scope )
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
	return scope->state != SCOPE_STATE_DONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <scope_get_trigger>:

int32_t scope_get_trigger( tScope *scope )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8a9b      	ldrh	r3, [r3, #20]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	1ad3      	subs	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_ADC_ConvHalfCpltCallback>:

// ********************** IRQs ********************** //
int cndtr1 = 0;
int cndtr2 = 0;
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
	{
	}
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8004bf4:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <HAL_ADC_ConvCpltCallback+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d120      	bne.n	8004c42 <HAL_ADC_ConvCpltCallback+0x56>
	{
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <HAL_ADC_ConvCpltCallback+0x60>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d11b      	bne.n	8004c42 <HAL_ADC_ConvCpltCallback+0x56>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_ADC_ConvCpltCallback+0x60>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 8004c12:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <HAL_ADC_ConvCpltCallback+0x60>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <HAL_ADC_ConvCpltCallback+0x64>)
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	64da      	str	r2, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_ADC_ConvCpltCallback+0x60>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	601a      	str	r2, [r3, #0]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <HAL_ADC_ConvCpltCallback+0x60>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fe07 	bl	8004844 <LL_ADC_EnableIT_AWD1>
			cndtr1 = 0;
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_ADC_ConvCpltCallback+0x64>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
			cndtr2 = 0;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_ADC_ConvCpltCallback+0x68>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2001175c 	.word	0x2001175c
 8004c50:	20011760 	.word	0x20011760
 8004c54:	20011764 	.word	0x20011764

08004c58 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8004c60:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d125      	bne.n	8004cb8 <HAL_ADC_LevelOutOfWindowCallback+0x60>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d120      	bne.n	8004cb8 <HAL_ADC_LevelOutOfWindowCallback+0x60>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	651a      	str	r2, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fdf4 	bl	8004884 <LL_ADC_DisableIT_AWD1>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ca8:	601a      	str	r2, [r3, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fdd6 	bl	8004864 <LL_ADC_EnableIT_AWD2>
		}
	}
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	2001175c 	.word	0x2001175c

08004cc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8004ccc:	4b2c      	ldr	r3, [pc, #176]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d14f      	bne.n	8004d78 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 8004cd8:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d14a      	bne.n	8004d78 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 8004cea:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc0>)
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 8004cf4:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0202 	mvn.w	r2, #2
 8004d00:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 8004d02:	4b1f      	ldr	r3, [pc, #124]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0204 	mvn.w	r2, #4
 8004d0e:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 8004d10:	4b1b      	ldr	r3, [pc, #108]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0201 	mvn.w	r2, #1
 8004d1c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 8004d1e:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f06f 0202 	mvn.w	r2, #2
 8004d2a:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0204 	mvn.w	r2, #4
 8004d38:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 8004d3a:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0201 	mvn.w	r2, #1
 8004d46:	611a      	str	r2, [r3, #16]
			start_cpu = SysTick->VAL;
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc4>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a0f      	ldr	r2, [pc, #60]	; (8004d8c <HAL_ADCEx_LevelOutOfWindow2Callback+0xc8>)
 8004d4e:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4618      	mov	r0, r3
 8004d58:	f006 fd56 	bl	800b808 <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f006 fe47 	bl	800b9f8 <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fd96 	bl	80048a4 <LL_ADC_DisableIT_AWD2>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2001175c 	.word	0x2001175c
 8004d84:	20011760 	.word	0x20011760
 8004d88:	e000e010 	.word	0xe000e010
 8004d8c:	20011768 	.word	0x20011768

08004d90 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	if( htim == _scope->htim2 ) // htim2
 8004d98:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d13c      	bne.n	8004e1e <HAL_TIM_OC_DelayElapsedCallback+0x8e>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 8004da4:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d137      	bne.n	8004e1e <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		{
			stop_cpu = SysTick->VAL;
 8004dae:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8004db4:	6013      	str	r3, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 8004dc8:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 fd8a 	bl	800b8e8 <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 8004dd4:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fdc8 	bl	8006970 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fdc2 	bl	8006970 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 fdbc 	bl	8006970 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 fdb6 	bl	8006970 <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f006 fe81 	bl	800bb14 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f006 fd65 	bl	800b8e8 <HAL_TIM_Base_Stop>
		}
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	2001175c 	.word	0x2001175c
 8004e2c:	e000e010 	.word	0xe000e010
 8004e30:	2001176c 	.word	0x2001176c
 8004e34:	20011764 	.word	0x20011764

08004e38 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( void )
{
 8004e38:	b5b0      	push	{r4, r5, r7, lr}
 8004e3a:	b092      	sub	sp, #72	; 0x48
 8004e3c:	af04      	add	r7, sp, #16
	// test scope

	uint16_t start = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	83fb      	strh	r3, [r7, #30]
	  static int trigger_bck = 0;
	  static int i = 0;

	if( _scope_init == 0 )
 8004e42:	4bab      	ldr	r3, [pc, #684]	; (80050f0 <test_scope+0x2b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d17b      	bne.n	8004f42 <test_scope+0x10a>
	{

		float freq = 3;
 8004e4a:	4baa      	ldr	r3, [pc, #680]	; (80050f4 <test_scope+0x2bc>)
 8004e4c:	61bb      	str	r3, [r7, #24]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
 8004e52:	e054      	b.n	8004efe <test_scope+0xc6>
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 8004e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004e5c:	ee17 0a90 	vmov	r0, s15
 8004e60:	f7fb fb9a 	bl	8000598 <__aeabi_f2d>
 8004e64:	a3a0      	add	r3, pc, #640	; (adr r3, 80050e8 <test_scope+0x2b0>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb fbed 	bl	8000648 <__aeabi_dmul>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4614      	mov	r4, r2
 8004e74:	461d      	mov	r5, r3
 8004e76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e78:	f7fb fb7c 	bl	8000574 <__aeabi_i2d>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	f7fb fbe0 	bl	8000648 <__aeabi_dmul>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	4b98      	ldr	r3, [pc, #608]	; (80050f8 <test_scope+0x2c0>)
 8004e96:	f7fb fd01 	bl	800089c <__aeabi_ddiv>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f7fb fec9 	bl	8000c38 <__aeabi_d2f>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	ee00 3a10 	vmov	s0, r3
 8004eac:	f01b fbd4 	bl	8020658 <sinf>
 8004eb0:	eef0 7a40 	vmov.f32	s15, s0
 8004eb4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80050fc <test_scope+0x2c4>
 8004eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ebc:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8005100 <test_scope+0x2c8>
 8004ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec8:	ee17 3a90 	vmov	r3, s15
 8004ecc:	b299      	uxth	r1, r3
 8004ece:	4a8d      	ldr	r2, [pc, #564]	; (8005104 <test_scope+0x2cc>)
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+((i*8)%2048);
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	425a      	negs	r2, r3
 8004edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004ee4:	bf58      	it	pl
 8004ee6:	4253      	negpl	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	b299      	uxth	r1, r3
 8004ef0:	4a85      	ldr	r2, [pc, #532]	; (8005108 <test_scope+0x2d0>)
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	3301      	adds	r3, #1
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	dba6      	blt.n	8004e54 <test_scope+0x1c>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 8004f06:	4b81      	ldr	r3, [pc, #516]	; (800510c <test_scope+0x2d4>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4a80      	ldr	r2, [pc, #512]	; (800510c <test_scope+0x2d4>)
 8004f0c:	f043 0302 	orr.w	r3, r3, #2
 8004f10:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 8004f12:	2300      	movs	r3, #0
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1a:	4a7a      	ldr	r2, [pc, #488]	; (8005104 <test_scope+0x2cc>)
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	487c      	ldr	r0, [pc, #496]	; (8005110 <test_scope+0x2d8>)
 8004f20:	f003 fbb8 	bl	8008694 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 8004f24:	2300      	movs	r3, #0
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f2c:	4a76      	ldr	r2, [pc, #472]	; (8005108 <test_scope+0x2d0>)
 8004f2e:	2110      	movs	r1, #16
 8004f30:	4877      	ldr	r0, [pc, #476]	; (8005110 <test_scope+0x2d8>)
 8004f32:	f003 fbaf 	bl	8008694 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 8004f36:	4877      	ldr	r0, [pc, #476]	; (8005114 <test_scope+0x2dc>)
 8004f38:	f006 fc66 	bl	800b808 <HAL_TIM_Base_Start>
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );


		_scope_init = 1;
 8004f3c:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <test_scope+0x2b8>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	601a      	str	r2, [r3, #0]


	{

		static int dd = 0;
		if( dd<10 )
 8004f42:	4b75      	ldr	r3, [pc, #468]	; (8005118 <test_scope+0x2e0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b09      	cmp	r3, #9
 8004f48:	dc05      	bgt.n	8004f56 <test_scope+0x11e>
		{
			dd++;
 8004f4a:	4b73      	ldr	r3, [pc, #460]	; (8005118 <test_scope+0x2e0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	4a71      	ldr	r2, [pc, #452]	; (8005118 <test_scope+0x2e0>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e04a      	b.n	8004fec <test_scope+0x1b4>
		}
		else
		{
			dd = 0;
 8004f56:	4b70      	ldr	r3, [pc, #448]	; (8005118 <test_scope+0x2e0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
			for( int d = 0 ; d < 480 ; d += 40 )
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f60:	e00c      	b.n	8004f7c <test_scope+0x144>
			{
				lcd_rect( d, 0, 1, 320, 0x55555555 );
 8004f62:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2100      	movs	r1, #0
 8004f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f72:	f7fc fe5b 	bl	8001c2c <lcd_rect>
			for( int d = 0 ; d < 480 ; d += 40 )
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	3328      	adds	r3, #40	; 0x28
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004f82:	dbee      	blt.n	8004f62 <test_scope+0x12a>
			}
			lcd_rect( 480, 0, 1, 320, 0x55555555 );
 8004f84:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004f8e:	2201      	movs	r2, #1
 8004f90:	2100      	movs	r1, #0
 8004f92:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004f96:	f7fc fe49 	bl	8001c2c <lcd_rect>
			for( int d = 0 ; d < 320 ; d += 40 )
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9e:	e00c      	b.n	8004fba <test_scope+0x182>
			{
				lcd_rect( 0, d, 480, 1, 0x55555555 );
 8004fa0:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7fc fe3c 	bl	8001c2c <lcd_rect>
			for( int d = 0 ; d < 320 ; d += 40 )
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	3328      	adds	r3, #40	; 0x28
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004fc0:	dbee      	blt.n	8004fa0 <test_scope+0x168>
			}
			lcd_rect( 0, 320, 480, 1, 0x55555555 );
 8004fc2:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004fce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f7fc fe2a 	bl	8001c2c <lcd_rect>

			lcd_rect( 0, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8004fd8:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004fe4:	2164      	movs	r1, #100	; 0x64
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fc fe20 	bl	8001c2c <lcd_rect>

		}


		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 8004fec:	4b4b      	ldr	r3, [pc, #300]	; (800511c <test_scope+0x2e4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <test_scope+0x1c4>
 8004ff8:	4849      	ldr	r0, [pc, #292]	; (8005120 <test_scope+0x2e8>)
 8004ffa:	e000      	b.n	8004ffe <test_scope+0x1c6>
 8004ffc:	4849      	ldr	r0, [pc, #292]	; (8005124 <test_scope+0x2ec>)
				(i&0x01)?buffer2:buffer6,
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <test_scope+0x2e4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <test_scope+0x1d6>
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <test_scope+0x2f0>)
 800500c:	e000      	b.n	8005010 <test_scope+0x1d8>
 800500e:	4b47      	ldr	r3, [pc, #284]	; (800512c <test_scope+0x2f4>)
				(i&0x01)?buffer3:buffer7,
 8005010:	4a42      	ldr	r2, [pc, #264]	; (800511c <test_scope+0x2e4>)
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	f002 0201 	and.w	r2, r2, #1
		scope_init( &scope, 2048, 1000000,
 8005018:	2a00      	cmp	r2, #0
 800501a:	d001      	beq.n	8005020 <test_scope+0x1e8>
 800501c:	4a44      	ldr	r2, [pc, #272]	; (8005130 <test_scope+0x2f8>)
 800501e:	e000      	b.n	8005022 <test_scope+0x1ea>
 8005020:	4a44      	ldr	r2, [pc, #272]	; (8005134 <test_scope+0x2fc>)
				(i&0x01)?buffer4:buffer8,
 8005022:	493e      	ldr	r1, [pc, #248]	; (800511c <test_scope+0x2e4>)
 8005024:	6809      	ldr	r1, [r1, #0]
 8005026:	f001 0101 	and.w	r1, r1, #1
		scope_init( &scope, 2048, 1000000,
 800502a:	2900      	cmp	r1, #0
 800502c:	d001      	beq.n	8005032 <test_scope+0x1fa>
 800502e:	4942      	ldr	r1, [pc, #264]	; (8005138 <test_scope+0x300>)
 8005030:	e000      	b.n	8005034 <test_scope+0x1fc>
 8005032:	4942      	ldr	r1, [pc, #264]	; (800513c <test_scope+0x304>)
 8005034:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005038:	9403      	str	r4, [sp, #12]
 800503a:	9102      	str	r1, [sp, #8]
 800503c:	9201      	str	r2, [sp, #4]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4603      	mov	r3, r0
 8005042:	f244 2240 	movw	r2, #16960	; 0x4240
 8005046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800504a:	483d      	ldr	r0, [pc, #244]	; (8005140 <test_scope+0x308>)
 800504c:	f7ff fc3a 	bl	80048c4 <scope_init>
				BUFFER_LEN );
		scope_start( &scope );
 8005050:	483b      	ldr	r0, [pc, #236]	; (8005140 <test_scope+0x308>)
 8005052:	f7ff fc99 	bl	8004988 <scope_start>
		while( scope_is_busy( &scope ) );
 8005056:	bf00      	nop
 8005058:	4839      	ldr	r0, [pc, #228]	; (8005140 <test_scope+0x308>)
 800505a:	f7ff fd9c 	bl	8004b96 <scope_is_busy>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f9      	bne.n	8005058 <test_scope+0x220>
		scope_stop( &scope );
 8005064:	4836      	ldr	r0, [pc, #216]	; (8005140 <test_scope+0x308>)
 8005066:	f7ff fd67 	bl	8004b38 <scope_stop>

		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 800506a:	4835      	ldr	r0, [pc, #212]	; (8005140 <test_scope+0x308>)
 800506c:	f7ff fda4 	bl	8004bb8 <scope_get_trigger>
 8005070:	4603      	mov	r3, r0
 8005072:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005076:	617b      	str	r3, [r7, #20]

		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 8005078:	2300      	movs	r3, #0
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
 800507c:	e21a      	b.n	80054b4 <test_scope+0x67c>
		//for( int jj = 0; jj < BUFFER_LEN; jj++ )
		{
			int j = (jj*BUFFER_LEN)/480.0;
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb fa76 	bl	8000574 <__aeabi_i2d>
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <test_scope+0x30c>)
 800508e:	f7fb fc05 	bl	800089c <__aeabi_ddiv>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f7fb fd85 	bl	8000ba8 <__aeabi_d2iz>
 800509e:	4603      	mov	r3, r0
 80050a0:	613b      	str	r3, [r7, #16]
			//int j = jj;
			int n = trigger + j;
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
			if( n < 0 )
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da04      	bge.n	80050ba <test_scope+0x282>
			{
				n += BUFFER_LEN;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	e007      	b.n	80050ca <test_scope+0x292>
			}
			else if( n >= BUFFER_LEN )
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	db03      	blt.n	80050ca <test_scope+0x292>
			{
				n -= BUFFER_LEN;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
			}

			int n2 = trigger_bck + j;
 80050ca:	4b1f      	ldr	r3, [pc, #124]	; (8005148 <test_scope+0x310>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	623b      	str	r3, [r7, #32]
			if( n2 < 0 )
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da38      	bge.n	800514c <test_scope+0x314>
			{
				n2 += BUFFER_LEN;
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e03b      	b.n	800515c <test_scope+0x324>
 80050e4:	f3af 8000 	nop.w
 80050e8:	54442d18 	.word	0x54442d18
 80050ec:	400921fb 	.word	0x400921fb
 80050f0:	20011770 	.word	0x20011770
 80050f4:	40400000 	.word	0x40400000
 80050f8:	40900000 	.word	0x40900000
 80050fc:	447fc000 	.word	0x447fc000
 8005100:	45000000 	.word	0x45000000
 8005104:	20011774 	.word	0x20011774
 8005108:	20011f74 	.word	0x20011f74
 800510c:	e0042000 	.word	0xe0042000
 8005110:	200006a8 	.word	0x200006a8
 8005114:	200168dc 	.word	0x200168dc
 8005118:	200167d0 	.word	0x200167d0
 800511c:	200167d4 	.word	0x200167d4
 8005120:	20012774 	.word	0x20012774
 8005124:	20014774 	.word	0x20014774
 8005128:	20012f74 	.word	0x20012f74
 800512c:	20014f74 	.word	0x20014f74
 8005130:	20013774 	.word	0x20013774
 8005134:	20015774 	.word	0x20015774
 8005138:	20013f74 	.word	0x20013f74
 800513c:	20015f74 	.word	0x20015f74
 8005140:	20016774 	.word	0x20016774
 8005144:	407e0000 	.word	0x407e0000
 8005148:	200167d8 	.word	0x200167d8
			}
			else if( n2 >= BUFFER_LEN )
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	db03      	blt.n	800515c <test_scope+0x324>
			{
				n2 -= BUFFER_LEN;
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800515a:	623b      	str	r3, [r7, #32]
			}
			//printf( "%d, ", buffer[n] );

			int x0, y0, y1;
			x0 = jj;//(j*480)/BUFFER_LEN;
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	60fb      	str	r3, [r7, #12]
			y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005160:	4bb7      	ldr	r3, [pc, #732]	; (8005440 <test_scope+0x608>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d011      	beq.n	8005190 <test_scope+0x358>
 800516c:	4ab5      	ldr	r2, [pc, #724]	; (8005444 <test_scope+0x60c>)
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005174:	461a      	mov	r2, r3
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	2b00      	cmp	r3, #0
 8005180:	da01      	bge.n	8005186 <test_scope+0x34e>
 8005182:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005186:	131b      	asrs	r3, r3, #12
 8005188:	425b      	negs	r3, r3
 800518a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800518e:	e010      	b.n	80051b2 <test_scope+0x37a>
 8005190:	4aad      	ldr	r2, [pc, #692]	; (8005448 <test_scope+0x610>)
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005198:	461a      	mov	r2, r3
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	da01      	bge.n	80051aa <test_scope+0x372>
 80051a6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80051aa:	131b      	asrs	r3, r3, #12
 80051ac:	425b      	negs	r3, r3
 80051ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80051b2:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 80051b4:	4ba2      	ldr	r3, [pc, #648]	; (8005440 <test_scope+0x608>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <test_scope+0x3ac>
 80051c0:	4aa1      	ldr	r2, [pc, #644]	; (8005448 <test_scope+0x610>)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c8:	461a      	mov	r2, r3
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	019b      	lsls	r3, r3, #6
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da01      	bge.n	80051da <test_scope+0x3a2>
 80051d6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80051da:	131b      	asrs	r3, r3, #12
 80051dc:	425b      	negs	r3, r3
 80051de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80051e2:	e010      	b.n	8005206 <test_scope+0x3ce>
 80051e4:	4a97      	ldr	r2, [pc, #604]	; (8005444 <test_scope+0x60c>)
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ec:	461a      	mov	r2, r3
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da01      	bge.n	80051fe <test_scope+0x3c6>
 80051fa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80051fe:	131b      	asrs	r3, r3, #12
 8005200:	425b      	negs	r3, r3
 8005202:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005206:	607b      	str	r3, [r7, #4]
			extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
			lcd_set_pixel( x0, y0, 0x00000000 );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	b21b      	sxth	r3, r3
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	b211      	sxth	r1, r2
 8005210:	2200      	movs	r2, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f7fc fdfc 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x0001C007 );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	b21b      	sxth	r3, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	b211      	sxth	r1, r2
 8005220:	4a8a      	ldr	r2, [pc, #552]	; (800544c <test_scope+0x614>)
 8005222:	4618      	mov	r0, r3
 8005224:	f7fc fdf4 	bl	8001e10 <lcd_set_pixel>

			y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8005228:	4b85      	ldr	r3, [pc, #532]	; (8005440 <test_scope+0x608>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <test_scope+0x420>
 8005234:	4a86      	ldr	r2, [pc, #536]	; (8005450 <test_scope+0x618>)
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523c:	461a      	mov	r2, r3
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	2b00      	cmp	r3, #0
 8005248:	da01      	bge.n	800524e <test_scope+0x416>
 800524a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800524e:	131b      	asrs	r3, r3, #12
 8005250:	425b      	negs	r3, r3
 8005252:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005256:	e010      	b.n	800527a <test_scope+0x442>
 8005258:	4a7e      	ldr	r2, [pc, #504]	; (8005454 <test_scope+0x61c>)
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005260:	461a      	mov	r2, r3
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	2b00      	cmp	r3, #0
 800526c:	da01      	bge.n	8005272 <test_scope+0x43a>
 800526e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005272:	131b      	asrs	r3, r3, #12
 8005274:	425b      	negs	r3, r3
 8005276:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800527a:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 800527c:	4b70      	ldr	r3, [pc, #448]	; (8005440 <test_scope+0x608>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d011      	beq.n	80052ac <test_scope+0x474>
 8005288:	4a72      	ldr	r2, [pc, #456]	; (8005454 <test_scope+0x61c>)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005290:	461a      	mov	r2, r3
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	2b00      	cmp	r3, #0
 800529c:	da01      	bge.n	80052a2 <test_scope+0x46a>
 800529e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80052a2:	131b      	asrs	r3, r3, #12
 80052a4:	425b      	negs	r3, r3
 80052a6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80052aa:	e010      	b.n	80052ce <test_scope+0x496>
 80052ac:	4a68      	ldr	r2, [pc, #416]	; (8005450 <test_scope+0x618>)
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	019b      	lsls	r3, r3, #6
 80052be:	2b00      	cmp	r3, #0
 80052c0:	da01      	bge.n	80052c6 <test_scope+0x48e>
 80052c2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80052c6:	131b      	asrs	r3, r3, #12
 80052c8:	425b      	negs	r3, r3
 80052ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80052ce:	607b      	str	r3, [r7, #4]
			lcd_set_pixel( x0, y0, 0x00000000 );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	b211      	sxth	r1, r2
 80052d8:	2200      	movs	r2, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fc fd98 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x00003F00 );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	b21b      	sxth	r3, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	b211      	sxth	r1, r2
 80052e8:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fc fd8f 	bl	8001e10 <lcd_set_pixel>

			y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 80052f2:	4b53      	ldr	r3, [pc, #332]	; (8005440 <test_scope+0x608>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d011      	beq.n	8005322 <test_scope+0x4ea>
 80052fe:	4a56      	ldr	r2, [pc, #344]	; (8005458 <test_scope+0x620>)
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005306:	461a      	mov	r2, r3
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	019b      	lsls	r3, r3, #6
 8005310:	2b00      	cmp	r3, #0
 8005312:	da01      	bge.n	8005318 <test_scope+0x4e0>
 8005314:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005318:	131b      	asrs	r3, r3, #12
 800531a:	425b      	negs	r3, r3
 800531c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005320:	e010      	b.n	8005344 <test_scope+0x50c>
 8005322:	4a4e      	ldr	r2, [pc, #312]	; (800545c <test_scope+0x624>)
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532a:	461a      	mov	r2, r3
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	019b      	lsls	r3, r3, #6
 8005334:	2b00      	cmp	r3, #0
 8005336:	da01      	bge.n	800533c <test_scope+0x504>
 8005338:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800533c:	131b      	asrs	r3, r3, #12
 800533e:	425b      	negs	r3, r3
 8005340:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005344:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8005346:	4b3e      	ldr	r3, [pc, #248]	; (8005440 <test_scope+0x608>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d011      	beq.n	8005376 <test_scope+0x53e>
 8005352:	4a42      	ldr	r2, [pc, #264]	; (800545c <test_scope+0x624>)
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535a:	461a      	mov	r2, r3
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	019b      	lsls	r3, r3, #6
 8005364:	2b00      	cmp	r3, #0
 8005366:	da01      	bge.n	800536c <test_scope+0x534>
 8005368:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800536c:	131b      	asrs	r3, r3, #12
 800536e:	425b      	negs	r3, r3
 8005370:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005374:	e010      	b.n	8005398 <test_scope+0x560>
 8005376:	4a38      	ldr	r2, [pc, #224]	; (8005458 <test_scope+0x620>)
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800537e:	461a      	mov	r2, r3
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	019b      	lsls	r3, r3, #6
 8005388:	2b00      	cmp	r3, #0
 800538a:	da01      	bge.n	8005390 <test_scope+0x558>
 800538c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005390:	131b      	asrs	r3, r3, #12
 8005392:	425b      	negs	r3, r3
 8005394:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005398:	607b      	str	r3, [r7, #4]
			lcd_set_pixel( x0, y0, 0x00000000 );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	b21b      	sxth	r3, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	b211      	sxth	r1, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fc fd33 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0x000001F8 );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	b211      	sxth	r1, r2
 80053b2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc fd2a 	bl	8001e10 <lcd_set_pixel>

			y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 80053bc:	4b20      	ldr	r3, [pc, #128]	; (8005440 <test_scope+0x608>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <test_scope+0x5b4>
 80053c8:	4a25      	ldr	r2, [pc, #148]	; (8005460 <test_scope+0x628>)
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d0:	461a      	mov	r2, r3
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da01      	bge.n	80053e2 <test_scope+0x5aa>
 80053de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80053e2:	131b      	asrs	r3, r3, #12
 80053e4:	425b      	negs	r3, r3
 80053e6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80053ea:	e010      	b.n	800540e <test_scope+0x5d6>
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <test_scope+0x62c>)
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da01      	bge.n	8005406 <test_scope+0x5ce>
 8005402:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005406:	131b      	asrs	r3, r3, #12
 8005408:	425b      	negs	r3, r3
 800540a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800540e:	60bb      	str	r3, [r7, #8]
			y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <test_scope+0x608>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d025      	beq.n	8005468 <test_scope+0x630>
 800541c:	4a11      	ldr	r2, [pc, #68]	; (8005464 <test_scope+0x62c>)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005424:	461a      	mov	r2, r3
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	019b      	lsls	r3, r3, #6
 800542e:	2b00      	cmp	r3, #0
 8005430:	da01      	bge.n	8005436 <test_scope+0x5fe>
 8005432:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005436:	131b      	asrs	r3, r3, #12
 8005438:	425b      	negs	r3, r3
 800543a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800543e:	e024      	b.n	800548a <test_scope+0x652>
 8005440:	200167d4 	.word	0x200167d4
 8005444:	20014774 	.word	0x20014774
 8005448:	20012774 	.word	0x20012774
 800544c:	0001c007 	.word	0x0001c007
 8005450:	20014f74 	.word	0x20014f74
 8005454:	20012f74 	.word	0x20012f74
 8005458:	20015774 	.word	0x20015774
 800545c:	20013774 	.word	0x20013774
 8005460:	20015f74 	.word	0x20015f74
 8005464:	20013f74 	.word	0x20013f74
 8005468:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <test_scope+0x6a0>)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005470:	461a      	mov	r2, r3
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	019b      	lsls	r3, r3, #6
 800547a:	2b00      	cmp	r3, #0
 800547c:	da01      	bge.n	8005482 <test_scope+0x64a>
 800547e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005482:	131b      	asrs	r3, r3, #12
 8005484:	425b      	negs	r3, r3
 8005486:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800548a:	607b      	str	r3, [r7, #4]
			lcd_set_pixel( x0, y0, 0x00000000 );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	b21b      	sxth	r3, r3
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	b211      	sxth	r1, r2
 8005494:	2200      	movs	r2, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fcba 	bl	8001e10 <lcd_set_pixel>
			lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	b21b      	sxth	r3, r3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	b211      	sxth	r1, r2
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fc fcb1 	bl	8001e10 <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	3301      	adds	r3, #1
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80054ba:	f6ff ade0 	blt.w	800507e <test_scope+0x246>

		}

		//lcd_rect( 240, 0, 1, 320, 0xFFFFFF00 );
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 80054be:	4b07      	ldr	r3, [pc, #28]	; (80054dc <test_scope+0x6a4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a05      	ldr	r2, [pc, #20]	; (80054dc <test_scope+0x6a4>)
 80054c6:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 80054c8:	4a05      	ldr	r2, [pc, #20]	; (80054e0 <test_scope+0x6a8>)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	6013      	str	r3, [r2, #0]
		//HAL_Delay( 10 );
	}
}
 80054ce:	bf00      	nop
 80054d0:	3738      	adds	r7, #56	; 0x38
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bdb0      	pop	{r4, r5, r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20015f74 	.word	0x20015f74
 80054dc:	200167d4 	.word	0x200167d4
 80054e0:	200167d8 	.word	0x200167d8

080054e4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <MX_SPI3_Init+0x74>)
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <MX_SPI3_Init+0x78>)
 80054ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <MX_SPI3_Init+0x74>)
 80054f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <MX_SPI3_Init+0x74>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <MX_SPI3_Init+0x74>)
 80054fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005502:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005504:	4b14      	ldr	r3, [pc, #80]	; (8005558 <MX_SPI3_Init+0x74>)
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <MX_SPI3_Init+0x74>)
 800550c:	2200      	movs	r2, #0
 800550e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <MX_SPI3_Init+0x74>)
 8005512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005516:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <MX_SPI3_Init+0x74>)
 800551a:	2230      	movs	r2, #48	; 0x30
 800551c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <MX_SPI3_Init+0x74>)
 8005520:	2200      	movs	r2, #0
 8005522:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <MX_SPI3_Init+0x74>)
 8005526:	2200      	movs	r2, #0
 8005528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <MX_SPI3_Init+0x74>)
 800552c:	2200      	movs	r2, #0
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <MX_SPI3_Init+0x74>)
 8005532:	2207      	movs	r2, #7
 8005534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <MX_SPI3_Init+0x74>)
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <MX_SPI3_Init+0x74>)
 800553e:	2200      	movs	r2, #0
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005542:	4805      	ldr	r0, [pc, #20]	; (8005558 <MX_SPI3_Init+0x74>)
 8005544:	f005 fc9e 	bl	800ae84 <HAL_SPI_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800554e:	f7fe fefc 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200167dc 	.word	0x200167dc
 800555c:	40003c00 	.word	0x40003c00

08005560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a17      	ldr	r2, [pc, #92]	; (80055dc <HAL_SPI_MspInit+0x7c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d128      	bne.n	80055d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005582:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <HAL_SPI_MspInit+0x80>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_SPI_MspInit+0x80>)
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	6593      	str	r3, [r2, #88]	; 0x58
 800558e:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <HAL_SPI_MspInit+0x80>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <HAL_SPI_MspInit+0x80>)
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <HAL_SPI_MspInit+0x80>)
 80055a0:	f043 0304 	orr.w	r3, r3, #4
 80055a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <HAL_SPI_MspInit+0x80>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80055b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80055b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b8:	2302      	movs	r3, #2
 80055ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80055c4:	2306      	movs	r3, #6
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055c8:	f107 0314 	add.w	r3, r7, #20
 80055cc:	4619      	mov	r1, r3
 80055ce:	4805      	ldr	r0, [pc, #20]	; (80055e4 <HAL_SPI_MspInit+0x84>)
 80055d0:	f003 fed8 	bl	8009384 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80055d4:	bf00      	nop
 80055d6:	3728      	adds	r7, #40	; 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40003c00 	.word	0x40003c00
 80055e0:	40021000 	.word	0x40021000
 80055e4:	48000800 	.word	0x48000800

080055e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <HAL_MspInit+0x48>)
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <HAL_MspInit+0x48>)
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	6613      	str	r3, [r2, #96]	; 0x60
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HAL_MspInit+0x48>)
 80055fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <HAL_MspInit+0x48>)
 8005608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560a:	4a09      	ldr	r2, [pc, #36]	; (8005630 <HAL_MspInit+0x48>)
 800560c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005610:	6593      	str	r3, [r2, #88]	; 0x58
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <HAL_MspInit+0x48>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800561e:	f000 fb97 	bl	8005d50 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8005622:	2002      	movs	r0, #2
 8005624:	f000 fb80 	bl	8005d28 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40021000 	.word	0x40021000

08005634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005638:	e7fe      	b.n	8005638 <NMI_Handler+0x4>

0800563a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800563e:	e7fe      	b.n	800563e <HardFault_Handler+0x4>

08005640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <MemManage_Handler+0x4>

08005646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <BusFault_Handler+0x4>

0800564c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <UsageFault_Handler+0x4>

08005652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800566e:	b480      	push	{r7}
 8005670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005680:	f000 fb12 	bl	8005ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005684:	bf00      	nop
 8005686:	bd80      	pop	{r7, pc}

08005688 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 800568c:	4802      	ldr	r0, [pc, #8]	; (8005698 <DMA1_Channel1_IRQHandler+0x10>)
 800568e:	f003 fd2a 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	200116fc 	.word	0x200116fc

0800569c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80056a0:	4802      	ldr	r0, [pc, #8]	; (80056ac <DMA1_Channel2_IRQHandler+0x10>)
 80056a2:	f003 fd20 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000524 	.word	0x20000524

080056b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80056b4:	4802      	ldr	r0, [pc, #8]	; (80056c0 <DMA1_Channel3_IRQHandler+0x10>)
 80056b6:	f003 fd16 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	200006d0 	.word	0x200006d0

080056c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <DMA1_Channel4_IRQHandler+0x10>)
 80056ca:	f003 fd0c 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000730 	.word	0x20000730

080056d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80056dc:	4802      	ldr	r0, [pc, #8]	; (80056e8 <DMA1_Channel5_IRQHandler+0x10>)
 80056de:	f003 fd02 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000584 	.word	0x20000584

080056ec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80056f0:	4802      	ldr	r0, [pc, #8]	; (80056fc <DMA1_Channel6_IRQHandler+0x10>)
 80056f2:	f003 fcf8 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200005e4 	.word	0x200005e4

08005700 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8005704:	4802      	ldr	r0, [pc, #8]	; (8005710 <DMA1_Channel7_IRQHandler+0x10>)
 8005706:	f003 fcee 	bl	80090e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000644 	.word	0x20000644

08005714 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <ADC1_2_IRQHandler+0x1c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	461a      	mov	r2, r3
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <ADC1_2_IRQHandler+0x20>)
 8005722:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005724:	4804      	ldr	r0, [pc, #16]	; (8005738 <ADC1_2_IRQHandler+0x24>)
 8005726:	f001 f985 	bl	8006a34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000524 	.word	0x20000524
 8005734:	20011760 	.word	0x20011760
 8005738:	20000374 	.word	0x20000374

0800573c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <TIM2_IRQHandler+0x1c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	461a      	mov	r2, r3
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <TIM2_IRQHandler+0x20>)
 800574a:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800574c:	4804      	ldr	r0, [pc, #16]	; (8005760 <TIM2_IRQHandler+0x24>)
 800574e:	f006 fa79 	bl	800bc44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005752:	bf00      	nop
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000524 	.word	0x20000524
 800575c:	20011764 	.word	0x20011764
 8005760:	20016890 	.word	0x20016890

08005764 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 8005768:	4802      	ldr	r0, [pc, #8]	; (8005774 <QUADSPI_IRQHandler+0x10>)
 800576a:	f004 f9c7 	bl	8009afc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	200116b0 	.word	0x200116b0

08005778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return 1;
 800577c:	2301      	movs	r3, #1
}
 800577e:	4618      	mov	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <_kill>:

int _kill(int pid, int sig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005792:	f018 fee9 	bl	801e568 <__errno>
 8005796:	4603      	mov	r3, r0
 8005798:	2216      	movs	r2, #22
 800579a:	601a      	str	r2, [r3, #0]
  return -1;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <_exit>:

void _exit (int status)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057b0:	f04f 31ff 	mov.w	r1, #4294967295
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff ffe7 	bl	8005788 <_kill>
  while (1) {}    /* Make sure we hang here */
 80057ba:	e7fe      	b.n	80057ba <_exit+0x12>

080057bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e00a      	b.n	80057e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057ce:	f3af 8000 	nop.w
 80057d2:	4601      	mov	r1, r0
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	60ba      	str	r2, [r7, #8]
 80057da:	b2ca      	uxtb	r2, r1
 80057dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	3301      	adds	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	dbf0      	blt.n	80057ce <_read+0x12>
  }

  return len;
 80057ec:	687b      	ldr	r3, [r7, #4]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800581e:	605a      	str	r2, [r3, #4]
  return 0;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <_isatty>:

int _isatty(int file)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005836:	2301      	movs	r3, #1
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005868:	4a14      	ldr	r2, [pc, #80]	; (80058bc <_sbrk+0x5c>)
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <_sbrk+0x60>)
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005874:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <_sbrk+0x64>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <_sbrk+0x64>)
 800587e:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <_sbrk+0x68>)
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <_sbrk+0x64>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d207      	bcs.n	80058a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005890:	f018 fe6a 	bl	801e568 <__errno>
 8005894:	4603      	mov	r3, r0
 8005896:	220c      	movs	r2, #12
 8005898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
 800589e:	e009      	b.n	80058b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <_sbrk+0x64>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <_sbrk+0x64>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <_sbrk+0x64>)
 80058b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20020000 	.word	0x20020000
 80058c0:	00000400 	.word	0x00000400
 80058c4:	20016840 	.word	0x20016840
 80058c8:	20016a78 	.word	0x20016a78

080058cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <SystemInit+0x20>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <SystemInit+0x20>)
 80058d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058e0:	bf00      	nop
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	609a      	str	r2, [r3, #8]
 8005902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800590e:	4b1f      	ldr	r3, [pc, #124]	; (800598c <MX_TIM1_Init+0x9c>)
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <MX_TIM1_Init+0xa0>)
 8005912:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <MX_TIM1_Init+0x9c>)
 8005916:	2254      	movs	r2, #84	; 0x54
 8005918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800591a:	4b1c      	ldr	r3, [pc, #112]	; (800598c <MX_TIM1_Init+0x9c>)
 800591c:	2200      	movs	r2, #0
 800591e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <MX_TIM1_Init+0x9c>)
 8005922:	2201      	movs	r2, #1
 8005924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005926:	4b19      	ldr	r3, [pc, #100]	; (800598c <MX_TIM1_Init+0x9c>)
 8005928:	2200      	movs	r2, #0
 800592a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800592c:	4b17      	ldr	r3, [pc, #92]	; (800598c <MX_TIM1_Init+0x9c>)
 800592e:	2200      	movs	r2, #0
 8005930:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005932:	4b16      	ldr	r3, [pc, #88]	; (800598c <MX_TIM1_Init+0x9c>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005938:	4814      	ldr	r0, [pc, #80]	; (800598c <MX_TIM1_Init+0x9c>)
 800593a:	f005 ff0d 	bl	800b758 <HAL_TIM_Base_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005944:	f7fe fd01 	bl	800434a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800594c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800594e:	f107 0310 	add.w	r3, r7, #16
 8005952:	4619      	mov	r1, r3
 8005954:	480d      	ldr	r0, [pc, #52]	; (800598c <MX_TIM1_Init+0x9c>)
 8005956:	f006 fb6f 	bl	800c038 <HAL_TIM_ConfigClockSource>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005960:	f7fe fcf3 	bl	800434a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005964:	2320      	movs	r3, #32
 8005966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005968:	2300      	movs	r3, #0
 800596a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4805      	ldr	r0, [pc, #20]	; (800598c <MX_TIM1_Init+0x9c>)
 8005976:	f007 f927 	bl	800cbc8 <HAL_TIMEx_MasterConfigSynchronization>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8005980:	f7fe fce3 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005984:	bf00      	nop
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20016844 	.word	0x20016844
 8005990:	40012c00 	.word	0x40012c00

08005994 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08e      	sub	sp, #56	; 0x38
 8005998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800599a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	609a      	str	r2, [r3, #8]
 80059a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059a8:	f107 031c 	add.w	r3, r7, #28
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059b4:	463b      	mov	r3, r7
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	609a      	str	r2, [r3, #8]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059c6:	4b2c      	ldr	r3, [pc, #176]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85-1;
 80059ce:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059d0:	2254      	movs	r2, #84	; 0x54
 80059d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059d4:	4b28      	ldr	r3, [pc, #160]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 80059da:	4b27      	ldr	r3, [pc, #156]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059dc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80059e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059e2:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059e8:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059ee:	4822      	ldr	r0, [pc, #136]	; (8005a78 <MX_TIM2_Init+0xe4>)
 80059f0:	f005 feb2 	bl	800b758 <HAL_TIM_Base_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80059fa:	f7fe fca6 	bl	800434a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a08:	4619      	mov	r1, r3
 8005a0a:	481b      	ldr	r0, [pc, #108]	; (8005a78 <MX_TIM2_Init+0xe4>)
 8005a0c:	f006 fb14 	bl	800c038 <HAL_TIM_ConfigClockSource>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005a16:	f7fe fc98 	bl	800434a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005a1a:	4817      	ldr	r0, [pc, #92]	; (8005a78 <MX_TIM2_Init+0xe4>)
 8005a1c:	f005 ff8b 	bl	800b936 <HAL_TIM_OC_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005a26:	f7fe fc90 	bl	800434a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a32:	f107 031c 	add.w	r3, r7, #28
 8005a36:	4619      	mov	r1, r3
 8005a38:	480f      	ldr	r0, [pc, #60]	; (8005a78 <MX_TIM2_Init+0xe4>)
 8005a3a:	f007 f8c5 	bl	800cbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005a44:	f7fe fc81 	bl	800434a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1023;
 8005a4c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4805      	ldr	r0, [pc, #20]	; (8005a78 <MX_TIM2_Init+0xe4>)
 8005a62:	f006 fa6f 	bl	800bf44 <HAL_TIM_OC_ConfigChannel>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005a6c:	f7fe fc6d 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a70:	bf00      	nop
 8005a72:	3738      	adds	r7, #56	; 0x38
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20016890 	.word	0x20016890

08005a7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a82:	f107 0310 	add.w	r3, r7, #16
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	609a      	str	r2, [r3, #8]
 8005a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	605a      	str	r2, [r3, #4]
 8005a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <MX_TIM3_Init+0x98>)
 8005a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85-1;
 8005aa0:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005aa2:	2254      	movs	r2, #84	; 0x54
 8005aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aa6:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ab2:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005abe:	4814      	ldr	r0, [pc, #80]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005ac0:	f005 fe4a 	bl	800b758 <HAL_TIM_Base_Init>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8005aca:	f7fe fc3e 	bl	800434a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	4619      	mov	r1, r3
 8005ada:	480d      	ldr	r0, [pc, #52]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005adc:	f006 faac 	bl	800c038 <HAL_TIM_ConfigClockSource>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005ae6:	f7fe fc30 	bl	800434a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005aea:	2320      	movs	r3, #32
 8005aec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4806      	ldr	r0, [pc, #24]	; (8005b10 <MX_TIM3_Init+0x94>)
 8005af8:	f007 f866 	bl	800cbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8005b02:	f7fe fc22 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b06:	bf00      	nop
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200168dc 	.word	0x200168dc
 8005b14:	40000400 	.word	0x40000400

08005b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <HAL_TIM_Base_MspInit+0x8c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10c      	bne.n	8005b44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b2a:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b34:	6613      	str	r3, [r2, #96]	; 0x60
 8005b36:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005b42:	e02a      	b.n	8005b9a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d114      	bne.n	8005b78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b4e:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b52:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005b66:	2200      	movs	r2, #0
 8005b68:	2100      	movs	r1, #0
 8005b6a:	201c      	movs	r0, #28
 8005b6c:	f002 fce9 	bl	8008542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005b70:	201c      	movs	r0, #28
 8005b72:	f002 fd00 	bl	8008576 <HAL_NVIC_EnableIRQ>
}
 8005b76:	e010      	b.n	8005b9a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0b      	ldr	r2, [pc, #44]	; (8005bac <HAL_TIM_Base_MspInit+0x94>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10b      	bne.n	8005b9a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b88:	f043 0302 	orr.w	r3, r3, #2
 8005b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_TIM_Base_MspInit+0x90>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40000400 	.word	0x40000400

08005bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005bb0:	480d      	ldr	r0, [pc, #52]	; (8005be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005bb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005bb4:	480d      	ldr	r0, [pc, #52]	; (8005bec <LoopForever+0x6>)
  ldr r1, =_edata
 8005bb6:	490e      	ldr	r1, [pc, #56]	; (8005bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005bb8:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <LoopForever+0xe>)
  movs r3, #0
 8005bba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005bbc:	e002      	b.n	8005bc4 <LoopCopyDataInit>

08005bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bc2:	3304      	adds	r3, #4

08005bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bc8:	d3f9      	bcc.n	8005bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bca:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005bcc:	4c0b      	ldr	r4, [pc, #44]	; (8005bfc <LoopForever+0x16>)
  movs r3, #0
 8005bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bd0:	e001      	b.n	8005bd6 <LoopFillZerobss>

08005bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bd4:	3204      	adds	r2, #4

08005bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bd8:	d3fb      	bcc.n	8005bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bda:	f7ff fe77 	bl	80058cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bde:	f018 fcc9 	bl	801e574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005be2:	f7fe fa5d 	bl	80040a0 <main>

08005be6 <LoopForever>:

LoopForever:
    b LoopForever
 8005be6:	e7fe      	b.n	8005be6 <LoopForever>
  ldr   r0, =_estack
 8005be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bf0:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8005bf4:	08023f30 	.word	0x08023f30
  ldr r2, =_sbss
 8005bf8:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8005bfc:	20016a78 	.word	0x20016a78

08005c00 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c00:	e7fe      	b.n	8005c00 <ADC3_IRQHandler>

08005c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c0c:	2003      	movs	r0, #3
 8005c0e:	f002 fc8d 	bl	800852c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c12:	2000      	movs	r0, #0
 8005c14:	f000 f80e 	bl	8005c34 <HAL_InitTick>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	e001      	b.n	8005c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005c24:	f7ff fce0 	bl	80055e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005c28:	79fb      	ldrb	r3, [r7, #7]

}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005c40:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <HAL_InitTick+0x68>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d022      	beq.n	8005c8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005c48:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <HAL_InitTick+0x6c>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_InitTick+0x68>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f002 fc98 	bl	8008592 <HAL_SYSTICK_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	d809      	bhi.n	8005c82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	f002 fc64 	bl	8008542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <HAL_InitTick+0x70>)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	e007      	b.n	8005c92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	e004      	b.n	8005c92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
 8005c8c:	e001      	b.n	8005c92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000010 	.word	0x20000010
 8005ca0:	20000008 	.word	0x20000008
 8005ca4:	2000000c 	.word	0x2000000c

08005ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_IncTick+0x1c>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <HAL_IncTick+0x20>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4a03      	ldr	r2, [pc, #12]	; (8005cc4 <HAL_IncTick+0x1c>)
 8005cb8:	6013      	str	r3, [r2, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	20016928 	.word	0x20016928
 8005cc8:	20000010 	.word	0x20000010

08005ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  return uwTick;
 8005cd0:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <HAL_GetTick+0x14>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20016928 	.word	0x20016928

08005ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005cec:	f7ff ffee 	bl	8005ccc <HAL_GetTick>
 8005cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d004      	beq.n	8005d08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_Delay+0x40>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d08:	bf00      	nop
 8005d0a:	f7ff ffdf 	bl	8005ccc <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d8f7      	bhi.n	8005d0a <HAL_Delay+0x26>
  {
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000010 	.word	0x20000010

08005d28 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 0202 	bic.w	r2, r3, #2
 8005d38:	4904      	ldr	r1, [pc, #16]	; (8005d4c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40010030 	.word	0x40010030

08005d50 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6013      	str	r3, [r2, #0]
}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010030 	.word	0x40010030

08005d70 <LL_ADC_SetCommonClock>:
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <LL_ADC_SetCommonPathInternalCh>:
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_ADC_GetCommonPathInternalCh>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <LL_ADC_SetOffset>:
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3360      	adds	r3, #96	; 0x60
 8005dea:	461a      	mov	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <LL_ADC_SetOffset+0x44>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	601a      	str	r2, [r3, #0]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	03fff000 	.word	0x03fff000

08005e20 <LL_ADC_GetOffsetChannel>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3360      	adds	r3, #96	; 0x60
 8005e2e:	461a      	mov	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <LL_ADC_SetOffsetState>:
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3360      	adds	r3, #96	; 0x60
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	601a      	str	r2, [r3, #0]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <LL_ADC_SetOffsetSign>:
{
 8005e82:	b480      	push	{r7}
 8005e84:	b087      	sub	sp, #28
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3360      	adds	r3, #96	; 0x60
 8005e92:	461a      	mov	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	601a      	str	r2, [r3, #0]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <LL_ADC_SetOffsetSaturation>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3360      	adds	r3, #96	; 0x60
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	615a      	str	r2, [r3, #20]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <LL_ADC_REG_SetSequencerRanks>:
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3330      	adds	r3, #48	; 0x30
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	f003 030c 	and.w	r3, r3, #12
 8005f56:	4413      	add	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	211f      	movs	r1, #31
 8005f66:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	401a      	ands	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0e9b      	lsrs	r3, r3, #26
 8005f72:	f003 011f 	and.w	r1, r3, #31
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	431a      	orrs	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LL_ADC_SetChannelSamplingTime>:
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	0e5b      	lsrs	r3, r3, #25
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	4413      	add	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	0d1b      	lsrs	r3, r3, #20
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	2107      	movs	r1, #7
 8005fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	401a      	ands	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	0d1b      	lsrs	r3, r3, #20
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <LL_ADC_SetChannelSingleDiff>:
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a0f      	ldr	r2, [pc, #60]	; (800605c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d10a      	bne.n	800603a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006038:	e00a      	b.n	8006050 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006046:	43db      	mvns	r3, r3
 8006048:	401a      	ands	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	407f0000 	.word	0x407f0000

08006060 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	330c      	adds	r3, #12
 8006070:	4618      	mov	r0, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	0d1b      	lsrs	r3, r3, #20
 8006076:	f003 0103 	and.w	r1, r3, #3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 0201 	and.w	r2, r3, #1
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4403      	add	r3, r0
 800608e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800609a:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800609e:	43db      	mvns	r3, r3
 80060a0:	401a      	ands	r2, r3
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	400b      	ands	r3, r1
 80060a8:	431a      	orrs	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <LL_ADC_ConfigAnalogWDThresholds>:
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3320      	adds	r3, #32
 80060cc:	461a      	mov	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	0d1b      	lsrs	r3, r3, #20
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	4413      	add	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	0419      	lsls	r1, r3, #16
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	430b      	orrs	r3, r1
 80060ec:	431a      	orrs	r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <LL_ADC_GetMultimode>:
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 031f 	and.w	r3, r3, #31
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <LL_ADC_GetMultiDMATransfer>:
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <LL_ADC_DisableDeepPowerDown>:
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006146:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6093      	str	r3, [r2, #8]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_ADC_IsDeepPowerDownEnabled>:
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800616a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616e:	d101      	bne.n	8006174 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_ADC_EnableInternalRegulator>:
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006192:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006196:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	609a      	str	r2, [r3, #8]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_ADC_IsInternalRegulatorEnabled>:
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061be:	d101      	bne.n	80061c4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <LL_ADC_Enable>:
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e6:	f043 0201 	orr.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <LL_ADC_Disable>:
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800620a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800620e:	f043 0202 	orr.w	r2, r3, #2
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	609a      	str	r2, [r3, #8]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_ADC_IsEnabled>:
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <LL_ADC_IsEnabled+0x18>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <LL_ADC_IsEnabled+0x1a>
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <LL_ADC_IsDisableOngoing>:
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d101      	bne.n	8006260 <LL_ADC_IsDisableOngoing+0x18>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <LL_ADC_IsDisableOngoing+0x1a>
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <LL_ADC_REG_StartConversion>:
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800627e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006282:	f043 0204 	orr.w	r2, r3, #4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	609a      	str	r2, [r3, #8]
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <LL_ADC_REG_StopConversion>:
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062aa:	f043 0210 	orr.w	r2, r3, #16
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	609a      	str	r2, [r3, #8]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <LL_ADC_REG_IsConversionOngoing>:
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d101      	bne.n	80062d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_ADC_INJ_StopConversion>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <LL_ADC_INJ_IsConversionOngoing>:
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d101      	bne.n	8006324 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <LL_ADC_ClearFlag_AWD1>:
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	601a      	str	r2, [r3, #0]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_ADC_ClearFlag_AWD2>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800635a:	601a      	str	r2, [r3, #0]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_ADC_ClearFlag_AWD3>:
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006376:	601a      	str	r2, [r3, #0]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_ADC_EnableIT_AWD1>:
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	605a      	str	r2, [r3, #4]
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <LL_ADC_EnableIT_AWD2>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	605a      	str	r2, [r3, #4]
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <LL_ADC_EnableIT_AWD3>:
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	605a      	str	r2, [r3, #4]
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_ADC_DisableIT_AWD1>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	605a      	str	r2, [r3, #4]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LL_ADC_DisableIT_AWD2>:
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	605a      	str	r2, [r3, #4]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	605a      	str	r2, [r3, #4]
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006450:	2300      	movs	r3, #0
 8006452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e1af      	b.n	80067be <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fa fe37 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fe68 	bl	800615a <LL_ADC_IsDeepPowerDownEnabled>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fe4e 	bl	8006136 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff fe83 	bl	80061aa <LL_ADC_IsInternalRegulatorEnabled>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d115      	bne.n	80064d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fe67 	bl	8006182 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064b4:	4b9f      	ldr	r3, [pc, #636]	; (8006734 <HAL_ADC_Init+0x2f0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	099b      	lsrs	r3, r3, #6
 80064ba:	4a9f      	ldr	r2, [pc, #636]	; (8006738 <HAL_ADC_Init+0x2f4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	099b      	lsrs	r3, r3, #6
 80064c2:	3301      	adds	r3, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80064c8:	e002      	b.n	80064d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f9      	bne.n	80064ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fe65 	bl	80061aa <LL_ADC_IsInternalRegulatorEnabled>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10d      	bne.n	8006502 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	f043 0210 	orr.w	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fed9 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 800650c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 8148 	bne.w	80067ac <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f040 8144 	bne.w	80067ac <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006528:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800652c:	f043 0202 	orr.w	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fe72 	bl	8006222 <LL_ADC_IsEnabled>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d141      	bne.n	80065c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800654c:	d004      	beq.n	8006558 <HAL_ADC_Init+0x114>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7a      	ldr	r2, [pc, #488]	; (800673c <HAL_ADC_Init+0x2f8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d10f      	bne.n	8006578 <HAL_ADC_Init+0x134>
 8006558:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800655c:	f7ff fe61 	bl	8006222 <LL_ADC_IsEnabled>
 8006560:	4604      	mov	r4, r0
 8006562:	4876      	ldr	r0, [pc, #472]	; (800673c <HAL_ADC_Init+0x2f8>)
 8006564:	f7ff fe5d 	bl	8006222 <LL_ADC_IsEnabled>
 8006568:	4603      	mov	r3, r0
 800656a:	4323      	orrs	r3, r4
 800656c:	2b00      	cmp	r3, #0
 800656e:	bf0c      	ite	eq
 8006570:	2301      	moveq	r3, #1
 8006572:	2300      	movne	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e012      	b.n	800659e <HAL_ADC_Init+0x15a>
 8006578:	4871      	ldr	r0, [pc, #452]	; (8006740 <HAL_ADC_Init+0x2fc>)
 800657a:	f7ff fe52 	bl	8006222 <LL_ADC_IsEnabled>
 800657e:	4604      	mov	r4, r0
 8006580:	4870      	ldr	r0, [pc, #448]	; (8006744 <HAL_ADC_Init+0x300>)
 8006582:	f7ff fe4e 	bl	8006222 <LL_ADC_IsEnabled>
 8006586:	4603      	mov	r3, r0
 8006588:	431c      	orrs	r4, r3
 800658a:	486f      	ldr	r0, [pc, #444]	; (8006748 <HAL_ADC_Init+0x304>)
 800658c:	f7ff fe49 	bl	8006222 <LL_ADC_IsEnabled>
 8006590:	4603      	mov	r3, r0
 8006592:	4323      	orrs	r3, r4
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf0c      	ite	eq
 8006598:	2301      	moveq	r3, #1
 800659a:	2300      	movne	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d012      	beq.n	80065c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065aa:	d004      	beq.n	80065b6 <HAL_ADC_Init+0x172>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a62      	ldr	r2, [pc, #392]	; (800673c <HAL_ADC_Init+0x2f8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Init+0x176>
 80065b6:	4a65      	ldr	r2, [pc, #404]	; (800674c <HAL_ADC_Init+0x308>)
 80065b8:	e000      	b.n	80065bc <HAL_ADC_Init+0x178>
 80065ba:	4a65      	ldr	r2, [pc, #404]	; (8006750 <HAL_ADC_Init+0x30c>)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f7ff fbd4 	bl	8005d70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	7f5b      	ldrb	r3, [r3, #29]
 80065cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80065d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80065de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d106      	bne.n	8006604 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	3b01      	subs	r3, #1
 80065fc:	045b      	lsls	r3, r3, #17
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4313      	orrs	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	4b4b      	ldr	r3, [pc, #300]	; (8006754 <HAL_ADC_Init+0x310>)
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	69b9      	ldr	r1, [r7, #24]
 8006630:	430b      	orrs	r3, r1
 8006632:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fe35 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8006654:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fe56 	bl	800630c <LL_ADC_INJ_IsConversionOngoing>
 8006660:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d17f      	bne.n	8006768 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d17c      	bne.n	8006768 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006672:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800667a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800667c:	4313      	orrs	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800668a:	f023 0302 	bic.w	r3, r3, #2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	69b9      	ldr	r1, [r7, #24]
 8006694:	430b      	orrs	r3, r1
 8006696:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80066b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80066bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6911      	ldr	r1, [r2, #16]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	430b      	orrs	r3, r1
 80066ca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80066ce:	e013      	b.n	80066f8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80066f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d12a      	bne.n	8006758 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800670c:	f023 0304 	bic.w	r3, r3, #4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006718:	4311      	orrs	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800671e:	4311      	orrs	r1, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006724:	430a      	orrs	r2, r1
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	611a      	str	r2, [r3, #16]
 8006732:	e019      	b.n	8006768 <HAL_ADC_Init+0x324>
 8006734:	20000008 	.word	0x20000008
 8006738:	053e2d63 	.word	0x053e2d63
 800673c:	50000100 	.word	0x50000100
 8006740:	50000400 	.word	0x50000400
 8006744:	50000500 	.word	0x50000500
 8006748:	50000600 	.word	0x50000600
 800674c:	50000300 	.word	0x50000300
 8006750:	50000700 	.word	0x50000700
 8006754:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10c      	bne.n	800678a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	f023 010f 	bic.w	r1, r3, #15
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	1e5a      	subs	r2, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
 8006788:	e007      	b.n	800679a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 020f 	bic.w	r2, r2, #15
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	f043 0201 	orr.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80067aa:	e007      	b.n	80067bc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b0:	f043 0210 	orr.w	r2, r3, #16
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80067bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3724      	adds	r7, #36	; 0x24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd90      	pop	{r4, r7, pc}
 80067c6:	bf00      	nop

080067c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067dc:	d004      	beq.n	80067e8 <HAL_ADC_Start_DMA+0x20>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5a      	ldr	r2, [pc, #360]	; (800694c <HAL_ADC_Start_DMA+0x184>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d101      	bne.n	80067ec <HAL_ADC_Start_DMA+0x24>
 80067e8:	4b59      	ldr	r3, [pc, #356]	; (8006950 <HAL_ADC_Start_DMA+0x188>)
 80067ea:	e000      	b.n	80067ee <HAL_ADC_Start_DMA+0x26>
 80067ec:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_ADC_Start_DMA+0x18c>)
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fc85 	bl	80060fe <LL_ADC_GetMultimode>
 80067f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fd5f 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 809b 	bne.w	800693e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_ADC_Start_DMA+0x4e>
 8006812:	2302      	movs	r3, #2
 8006814:	e096      	b.n	8006944 <HAL_ADC_Start_DMA+0x17c>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a4d      	ldr	r2, [pc, #308]	; (8006958 <HAL_ADC_Start_DMA+0x190>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d008      	beq.n	800683a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b05      	cmp	r3, #5
 8006832:	d002      	beq.n	800683a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b09      	cmp	r3, #9
 8006838:	d17a      	bne.n	8006930 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f001 fa6c 	bl	8007d18 <ADC_Enable>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d16d      	bne.n	8006926 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006852:	f023 0301 	bic.w	r3, r3, #1
 8006856:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3a      	ldr	r2, [pc, #232]	; (800694c <HAL_ADC_Start_DMA+0x184>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_ADC_Start_DMA+0xb4>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a3b      	ldr	r2, [pc, #236]	; (800695c <HAL_ADC_Start_DMA+0x194>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d002      	beq.n	8006878 <HAL_ADC_Start_DMA+0xb0>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	e003      	b.n	8006880 <HAL_ADC_Start_DMA+0xb8>
 8006878:	4b39      	ldr	r3, [pc, #228]	; (8006960 <HAL_ADC_Start_DMA+0x198>)
 800687a:	e001      	b.n	8006880 <HAL_ADC_Start_DMA+0xb8>
 800687c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	6812      	ldr	r2, [r2, #0]
 8006884:	4293      	cmp	r3, r2
 8006886:	d002      	beq.n	800688e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d105      	bne.n	800689a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068aa:	f023 0206 	bic.w	r2, r3, #6
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	661a      	str	r2, [r3, #96]	; 0x60
 80068b2:	e002      	b.n	80068ba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	4a29      	ldr	r2, [pc, #164]	; (8006964 <HAL_ADC_Start_DMA+0x19c>)
 80068c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	4a28      	ldr	r2, [pc, #160]	; (8006968 <HAL_ADC_Start_DMA+0x1a0>)
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_ADC_Start_DMA+0x1a4>)
 80068d0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	221c      	movs	r2, #28
 80068d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0210 	orr.w	r2, r2, #16
 80068f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0201 	orr.w	r2, r2, #1
 8006900:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3340      	adds	r3, #64	; 0x40
 800690c:	4619      	mov	r1, r3
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f002 faad 	bl	8008e70 <HAL_DMA_Start_IT>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fca5 	bl	800626e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006924:	e00d      	b.n	8006942 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800692e:	e008      	b.n	8006942 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800693c:	e001      	b.n	8006942 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800693e:	2302      	movs	r3, #2
 8006940:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	50000100 	.word	0x50000100
 8006950:	50000300 	.word	0x50000300
 8006954:	50000700 	.word	0x50000700
 8006958:	50000600 	.word	0x50000600
 800695c:	50000500 	.word	0x50000500
 8006960:	50000400 	.word	0x50000400
 8006964:	08007e9b 	.word	0x08007e9b
 8006968:	08007f73 	.word	0x08007f73
 800696c:	08007f8f 	.word	0x08007f8f

08006970 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_ADC_Stop_DMA+0x16>
 8006982:	2302      	movs	r3, #2
 8006984:	e051      	b.n	8006a2a <HAL_ADC_Stop_DMA+0xba>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800698e:	2103      	movs	r1, #3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f905 	bl	8007ba0 <ADC_ConversionStop>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d13f      	bne.n	8006a20 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d10f      	bne.n	80069de <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 facf 	bl	8008f66 <HAL_DMA_Abort>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0210 	bic.w	r2, r2, #16
 80069ec:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f9f1 	bl	8007ddc <ADC_Disable>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
 80069fe:	e002      	b.n	8006a06 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f9eb 	bl	8007ddc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	f043 0201 	orr.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a58:	d004      	beq.n	8006a64 <HAL_ADC_IRQHandler+0x30>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a8e      	ldr	r2, [pc, #568]	; (8006c98 <HAL_ADC_IRQHandler+0x264>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d101      	bne.n	8006a68 <HAL_ADC_IRQHandler+0x34>
 8006a64:	4b8d      	ldr	r3, [pc, #564]	; (8006c9c <HAL_ADC_IRQHandler+0x268>)
 8006a66:	e000      	b.n	8006a6a <HAL_ADC_IRQHandler+0x36>
 8006a68:	4b8d      	ldr	r3, [pc, #564]	; (8006ca0 <HAL_ADC_IRQHandler+0x26c>)
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fb47 	bl	80060fe <LL_ADC_GetMultimode>
 8006a70:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d017      	beq.n	8006aac <HAL_ADC_IRQHandler+0x78>
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d012      	beq.n	8006aac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a96:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fb62 	bl	8008168 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_ADC_IRQHandler+0x8c>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8094 	beq.w	8006bf4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 808e 	beq.w	8006bf4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fa0d 	bl	8005f14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d072      	beq.n	8006be6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a64      	ldr	r2, [pc, #400]	; (8006c98 <HAL_ADC_IRQHandler+0x264>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d009      	beq.n	8006b1e <HAL_ADC_IRQHandler+0xea>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a65      	ldr	r2, [pc, #404]	; (8006ca4 <HAL_ADC_IRQHandler+0x270>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d002      	beq.n	8006b1a <HAL_ADC_IRQHandler+0xe6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	e003      	b.n	8006b22 <HAL_ADC_IRQHandler+0xee>
 8006b1a:	4b63      	ldr	r3, [pc, #396]	; (8006ca8 <HAL_ADC_IRQHandler+0x274>)
 8006b1c:	e001      	b.n	8006b22 <HAL_ADC_IRQHandler+0xee>
 8006b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d008      	beq.n	8006b3c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d002      	beq.n	8006b3c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b09      	cmp	r3, #9
 8006b3a:	d104      	bne.n	8006b46 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	e014      	b.n	8006b70 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a53      	ldr	r2, [pc, #332]	; (8006c98 <HAL_ADC_IRQHandler+0x264>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d009      	beq.n	8006b64 <HAL_ADC_IRQHandler+0x130>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a53      	ldr	r2, [pc, #332]	; (8006ca4 <HAL_ADC_IRQHandler+0x270>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d002      	beq.n	8006b60 <HAL_ADC_IRQHandler+0x12c>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <HAL_ADC_IRQHandler+0x134>
 8006b60:	4b51      	ldr	r3, [pc, #324]	; (8006ca8 <HAL_ADC_IRQHandler+0x274>)
 8006b62:	e001      	b.n	8006b68 <HAL_ADC_IRQHandler+0x134>
 8006b64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b68:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d135      	bne.n	8006be6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d12e      	bne.n	8006be6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fb96 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11a      	bne.n	8006bce <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 020c 	bic.w	r2, r2, #12
 8006ba6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d112      	bne.n	8006be6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc4:	f043 0201 	orr.w	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bcc:	e00b      	b.n	8006be6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd2:	f043 0210 	orr.w	r2, r3, #16
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bde:	f043 0201 	orr.w	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fe f800 	bl	8004bec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	220c      	movs	r2, #12
 8006bf2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_ADC_IRQHandler+0x1d4>
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 80b3 	beq.w	8006d7a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80ad 	beq.w	8006d7a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff f9a8 	bl	8005f92 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006c42:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff f963 	bl	8005f14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c4e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a10      	ldr	r2, [pc, #64]	; (8006c98 <HAL_ADC_IRQHandler+0x264>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_ADC_IRQHandler+0x23a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a11      	ldr	r2, [pc, #68]	; (8006ca4 <HAL_ADC_IRQHandler+0x270>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d002      	beq.n	8006c6a <HAL_ADC_IRQHandler+0x236>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	e003      	b.n	8006c72 <HAL_ADC_IRQHandler+0x23e>
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <HAL_ADC_IRQHandler+0x274>)
 8006c6c:	e001      	b.n	8006c72 <HAL_ADC_IRQHandler+0x23e>
 8006c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d008      	beq.n	8006c8c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d002      	beq.n	8006c8c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b07      	cmp	r3, #7
 8006c8a:	d10f      	bne.n	8006cac <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	623b      	str	r3, [r7, #32]
 8006c94:	e01f      	b.n	8006cd6 <HAL_ADC_IRQHandler+0x2a2>
 8006c96:	bf00      	nop
 8006c98:	50000100 	.word	0x50000100
 8006c9c:	50000300 	.word	0x50000300
 8006ca0:	50000700 	.word	0x50000700
 8006ca4:	50000500 	.word	0x50000500
 8006ca8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a8b      	ldr	r2, [pc, #556]	; (8006ee0 <HAL_ADC_IRQHandler+0x4ac>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_ADC_IRQHandler+0x296>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a8a      	ldr	r2, [pc, #552]	; (8006ee4 <HAL_ADC_IRQHandler+0x4b0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d002      	beq.n	8006cc6 <HAL_ADC_IRQHandler+0x292>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	e003      	b.n	8006cce <HAL_ADC_IRQHandler+0x29a>
 8006cc6:	4b88      	ldr	r3, [pc, #544]	; (8006ee8 <HAL_ADC_IRQHandler+0x4b4>)
 8006cc8:	e001      	b.n	8006cce <HAL_ADC_IRQHandler+0x29a>
 8006cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006cce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d047      	beq.n	8006d6c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_ADC_IRQHandler+0x2c2>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d03f      	beq.n	8006d6c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d13a      	bne.n	8006d6c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d133      	bne.n	8006d6c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d12e      	bne.n	8006d6c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fafa 	bl	800630c <LL_ADC_INJ_IsConversionOngoing>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11a      	bne.n	8006d54 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d2c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d112      	bne.n	8006d6c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	f043 0201 	orr.w	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d52:	e00b      	b.n	8006d6c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	f043 0210 	orr.w	r2, r3, #16
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d64:	f043 0201 	orr.w	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f9dd 	bl	800812c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2260      	movs	r2, #96	; 0x60
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <HAL_ADC_IRQHandler+0x374>
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fd ff5c 	bl	8004c58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2280      	movs	r2, #128	; 0x80
 8006da6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d012      	beq.n	8006dd8 <HAL_ADC_IRQHandler+0x3a4>
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00d      	beq.n	8006dd8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fd ff7b 	bl	8004cc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d012      	beq.n	8006e08 <HAL_ADC_IRQHandler+0x3d4>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00d      	beq.n	8006e08 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 f9ab 	bl	8008154 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0310 	and.w	r3, r3, #16
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d043      	beq.n	8006e9a <HAL_ADC_IRQHandler+0x466>
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d03e      	beq.n	8006e9a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8006e24:	2301      	movs	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
 8006e28:	e021      	b.n	8006e6e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e38:	d004      	beq.n	8006e44 <HAL_ADC_IRQHandler+0x410>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a28      	ldr	r2, [pc, #160]	; (8006ee0 <HAL_ADC_IRQHandler+0x4ac>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d101      	bne.n	8006e48 <HAL_ADC_IRQHandler+0x414>
 8006e44:	4b29      	ldr	r3, [pc, #164]	; (8006eec <HAL_ADC_IRQHandler+0x4b8>)
 8006e46:	e000      	b.n	8006e4a <HAL_ADC_IRQHandler+0x416>
 8006e48:	4b29      	ldr	r3, [pc, #164]	; (8006ef0 <HAL_ADC_IRQHandler+0x4bc>)
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff f965 	bl	800611a <LL_ADC_GetMultiDMATransfer>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006e56:	2301      	movs	r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5a:	e008      	b.n	8006e6e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d10e      	bne.n	8006e92 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e84:	f043 0202 	orr.w	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f831 	bl	8006ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2210      	movs	r2, #16
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d018      	beq.n	8006ed6 <HAL_ADC_IRQHandler+0x4a2>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebe:	f043 0208 	orr.w	r2, r3, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ece:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f935 	bl	8008140 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006ed6:	bf00      	nop
 8006ed8:	3728      	adds	r7, #40	; 0x28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	50000100 	.word	0x50000100
 8006ee4:	50000500 	.word	0x50000500
 8006ee8:	50000400 	.word	0x50000400
 8006eec:	50000300 	.word	0x50000300
 8006ef0:	50000700 	.word	0x50000700

08006ef4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b0b6      	sub	sp, #216	; 0xd8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d102      	bne.n	8006f2c <HAL_ADC_ConfigChannel+0x24>
 8006f26:	2302      	movs	r3, #2
 8006f28:	f000 bc13 	b.w	8007752 <HAL_ADC_ConfigChannel+0x84a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff f9c0 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f040 83f3 	bne.w	800772c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7fe fff1 	bl	8005f3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff f9ae 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8006f62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f9ce 	bl	800630c <LL_ADC_INJ_IsConversionOngoing>
 8006f70:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 81d9 	bne.w	8007330 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 81d4 	bne.w	8007330 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f90:	d10f      	bne.n	8006fb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f7ff f80b 	bl	8005fb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe ff9f 	bl	8005eee <LL_ADC_SetSamplingTimeCommonConfig>
 8006fb0:	e00e      	b.n	8006fd0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fe fffa 	bl	8005fb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe ff8f 	bl	8005eee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	08db      	lsrs	r3, r3, #3
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d022      	beq.n	8007038 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6919      	ldr	r1, [r3, #16]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007002:	f7fe fee9 	bl	8005dd8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6919      	ldr	r1, [r3, #16]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	461a      	mov	r2, r3
 8007014:	f7fe ff35 	bl	8005e82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	6919      	ldr	r1, [r3, #16]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	7f1b      	ldrb	r3, [r3, #28]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d102      	bne.n	800702e <HAL_ADC_ConfigChannel+0x126>
 8007028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800702c:	e000      	b.n	8007030 <HAL_ADC_ConfigChannel+0x128>
 800702e:	2300      	movs	r3, #0
 8007030:	461a      	mov	r2, r3
 8007032:	f7fe ff41 	bl	8005eb8 <LL_ADC_SetOffsetSaturation>
 8007036:	e17b      	b.n	8007330 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe feee 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 8007044:	4603      	mov	r3, r0
 8007046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x15c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fee3 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 800705a:	4603      	mov	r3, r0
 800705c:	0e9b      	lsrs	r3, r3, #26
 800705e:	f003 021f 	and.w	r2, r3, #31
 8007062:	e01e      	b.n	80070a2 <HAL_ADC_ConfigChannel+0x19a>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fed8 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 8007070:	4603      	mov	r3, r0
 8007072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800707a:	fa93 f3a3 	rbit	r3, r3
 800707e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800708a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007092:	2320      	movs	r3, #32
 8007094:	e004      	b.n	80070a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800709a:	fab3 f383 	clz	r3, r3
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <HAL_ADC_ConfigChannel+0x1b2>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	0e9b      	lsrs	r3, r3, #26
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	e018      	b.n	80070ec <HAL_ADC_ConfigChannel+0x1e4>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80070ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80070d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80070de:	2320      	movs	r3, #32
 80070e0:	e004      	b.n	80070ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80070e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e6:	fab3 f383 	clz	r3, r3
 80070ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d106      	bne.n	80070fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fea7 	bl	8005e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	4618      	mov	r0, r3
 8007106:	f7fe fe8b 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 800710a:	4603      	mov	r3, r0
 800710c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_ADC_ConfigChannel+0x222>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2101      	movs	r1, #1
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fe80 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 8007120:	4603      	mov	r3, r0
 8007122:	0e9b      	lsrs	r3, r3, #26
 8007124:	f003 021f 	and.w	r2, r3, #31
 8007128:	e01e      	b.n	8007168 <HAL_ADC_ConfigChannel+0x260>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2101      	movs	r1, #1
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fe75 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 8007136:	4603      	mov	r3, r0
 8007138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007140:	fa93 f3a3 	rbit	r3, r3
 8007144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800714c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007158:	2320      	movs	r3, #32
 800715a:	e004      	b.n	8007166 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800715c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007160:	fab3 f383 	clz	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <HAL_ADC_ConfigChannel+0x278>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	0e9b      	lsrs	r3, r3, #26
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	e018      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x2aa>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800718c:	fa93 f3a3 	rbit	r3, r3
 8007190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007194:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800719c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80071a4:	2320      	movs	r3, #32
 80071a6:	e004      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80071a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d106      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fe44 	bl	8005e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2102      	movs	r1, #2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fe28 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <HAL_ADC_ConfigChannel+0x2e8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2102      	movs	r1, #2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fe fe1d 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 80071e6:	4603      	mov	r3, r0
 80071e8:	0e9b      	lsrs	r3, r3, #26
 80071ea:	f003 021f 	and.w	r2, r3, #31
 80071ee:	e01e      	b.n	800722e <HAL_ADC_ConfigChannel+0x326>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2102      	movs	r1, #2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fe12 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007206:	fa93 f3a3 	rbit	r3, r3
 800720a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800720e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800721e:	2320      	movs	r3, #32
 8007220:	e004      	b.n	800722c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007226:	fab3 f383 	clz	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <HAL_ADC_ConfigChannel+0x33e>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0e9b      	lsrs	r3, r3, #26
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	e016      	b.n	8007274 <HAL_ADC_ConfigChannel+0x36c>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007252:	fa93 f3a3 	rbit	r3, r3
 8007256:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800725a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800725e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007266:	2320      	movs	r3, #32
 8007268:	e004      	b.n	8007274 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800726a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800726e:	fab3 f383 	clz	r3, r3
 8007272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007274:	429a      	cmp	r2, r3
 8007276:	d106      	bne.n	8007286 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2200      	movs	r2, #0
 800727e:	2102      	movs	r1, #2
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe fde3 	bl	8005e4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2103      	movs	r1, #3
 800728c:	4618      	mov	r0, r3
 800728e:	f7fe fdc7 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 8007292:	4603      	mov	r3, r0
 8007294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <HAL_ADC_ConfigChannel+0x3aa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2103      	movs	r1, #3
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fdbc 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 80072a8:	4603      	mov	r3, r0
 80072aa:	0e9b      	lsrs	r3, r3, #26
 80072ac:	f003 021f 	and.w	r2, r3, #31
 80072b0:	e017      	b.n	80072e2 <HAL_ADC_ConfigChannel+0x3da>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2103      	movs	r1, #3
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe fdb1 	bl	8005e20 <LL_ADC_GetOffsetChannel>
 80072be:	4603      	mov	r3, r0
 80072c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c4:	fa93 f3a3 	rbit	r3, r3
 80072c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80072ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80072ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80072d4:	2320      	movs	r3, #32
 80072d6:	e003      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80072d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <HAL_ADC_ConfigChannel+0x3f2>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	0e9b      	lsrs	r3, r3, #26
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	e011      	b.n	800731e <HAL_ADC_ConfigChannel+0x416>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800730c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007312:	2320      	movs	r3, #32
 8007314:	e003      	b.n	800731e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	fab3 f383 	clz	r3, r3
 800731c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800731e:	429a      	cmp	r2, r3
 8007320:	d106      	bne.n	8007330 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2200      	movs	r2, #0
 8007328:	2103      	movs	r1, #3
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fd8e 	bl	8005e4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe ff74 	bl	8006222 <LL_ADC_IsEnabled>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 813d 	bne.w	80075bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	f7fe fe5e 	bl	8006010 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4aa2      	ldr	r2, [pc, #648]	; (80075e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	f040 812e 	bne.w	80075bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <HAL_ADC_ConfigChannel+0x480>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	0e9b      	lsrs	r3, r3, #26
 8007376:	3301      	adds	r3, #1
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	2b09      	cmp	r3, #9
 800737e:	bf94      	ite	ls
 8007380:	2301      	movls	r3, #1
 8007382:	2300      	movhi	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e019      	b.n	80073bc <HAL_ADC_ConfigChannel+0x4b4>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007390:	fa93 f3a3 	rbit	r3, r3
 8007394:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007398:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800739a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80073a0:	2320      	movs	r3, #32
 80073a2:	e003      	b.n	80073ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80073a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a6:	fab3 f383 	clz	r3, r3
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	3301      	adds	r3, #1
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	bf94      	ite	ls
 80073b6:	2301      	movls	r3, #1
 80073b8:	2300      	movhi	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d079      	beq.n	80074b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d107      	bne.n	80073dc <HAL_ADC_ConfigChannel+0x4d4>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	0e9b      	lsrs	r3, r3, #26
 80073d2:	3301      	adds	r3, #1
 80073d4:	069b      	lsls	r3, r3, #26
 80073d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073da:	e015      	b.n	8007408 <HAL_ADC_ConfigChannel+0x500>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	fa93 f3a3 	rbit	r3, r3
 80073e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80073f4:	2320      	movs	r3, #32
 80073f6:	e003      	b.n	8007400 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80073f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073fa:	fab3 f383 	clz	r3, r3
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	3301      	adds	r3, #1
 8007402:	069b      	lsls	r3, r3, #26
 8007404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HAL_ADC_ConfigChannel+0x520>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0e9b      	lsrs	r3, r3, #26
 800741a:	3301      	adds	r3, #1
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2101      	movs	r1, #1
 8007422:	fa01 f303 	lsl.w	r3, r1, r3
 8007426:	e017      	b.n	8007458 <HAL_ADC_ConfigChannel+0x550>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007430:	fa93 f3a3 	rbit	r3, r3
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007438:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800743a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007440:	2320      	movs	r3, #32
 8007442:	e003      	b.n	800744c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	3301      	adds	r3, #1
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	2101      	movs	r1, #1
 8007454:	fa01 f303 	lsl.w	r3, r1, r3
 8007458:	ea42 0103 	orr.w	r1, r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <HAL_ADC_ConfigChannel+0x576>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	0e9b      	lsrs	r3, r3, #26
 800746e:	3301      	adds	r3, #1
 8007470:	f003 021f 	and.w	r2, r3, #31
 8007474:	4613      	mov	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	051b      	lsls	r3, r3, #20
 800747c:	e018      	b.n	80074b0 <HAL_ADC_ConfigChannel+0x5a8>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	fa93 f3a3 	rbit	r3, r3
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800748c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007496:	2320      	movs	r3, #32
 8007498:	e003      	b.n	80074a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	fab3 f383 	clz	r3, r3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	3301      	adds	r3, #1
 80074a4:	f003 021f 	and.w	r2, r3, #31
 80074a8:	4613      	mov	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074b0:	430b      	orrs	r3, r1
 80074b2:	e07e      	b.n	80075b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d107      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x5c8>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	0e9b      	lsrs	r3, r3, #26
 80074c6:	3301      	adds	r3, #1
 80074c8:	069b      	lsls	r3, r3, #26
 80074ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074ce:	e015      	b.n	80074fc <HAL_ADC_ConfigChannel+0x5f4>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	fa93 f3a3 	rbit	r3, r3
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80074e8:	2320      	movs	r3, #32
 80074ea:	e003      	b.n	80074f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	fab3 f383 	clz	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3301      	adds	r3, #1
 80074f6:	069b      	lsls	r3, r3, #26
 80074f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <HAL_ADC_ConfigChannel+0x614>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	0e9b      	lsrs	r3, r3, #26
 800750e:	3301      	adds	r3, #1
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2101      	movs	r1, #1
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	e017      	b.n	800754c <HAL_ADC_ConfigChannel+0x644>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	fa93 f3a3 	rbit	r3, r3
 8007528:	61fb      	str	r3, [r7, #28]
  return result;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007534:	2320      	movs	r3, #32
 8007536:	e003      	b.n	8007540 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	fab3 f383 	clz	r3, r3
 800753e:	b2db      	uxtb	r3, r3
 8007540:	3301      	adds	r3, #1
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2101      	movs	r1, #1
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	ea42 0103 	orr.w	r1, r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <HAL_ADC_ConfigChannel+0x670>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0e9b      	lsrs	r3, r3, #26
 8007562:	3301      	adds	r3, #1
 8007564:	f003 021f 	and.w	r2, r3, #31
 8007568:	4613      	mov	r3, r2
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	4413      	add	r3, r2
 800756e:	3b1e      	subs	r3, #30
 8007570:	051b      	lsls	r3, r3, #20
 8007572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007576:	e01b      	b.n	80075b0 <HAL_ADC_ConfigChannel+0x6a8>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	fa93 f3a3 	rbit	r3, r3
 8007584:	613b      	str	r3, [r7, #16]
  return result;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007590:	2320      	movs	r3, #32
 8007592:	e003      	b.n	800759c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	fab3 f383 	clz	r3, r3
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	f003 021f 	and.w	r2, r3, #31
 80075a2:	4613      	mov	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4413      	add	r3, r2
 80075a8:	3b1e      	subs	r3, #30
 80075aa:	051b      	lsls	r3, r3, #20
 80075ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075b0:	430b      	orrs	r3, r1
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	6892      	ldr	r2, [r2, #8]
 80075b6:	4619      	mov	r1, r3
 80075b8:	f7fe fcfe 	bl	8005fb8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80be 	beq.w	8007746 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d2:	d004      	beq.n	80075de <HAL_ADC_ConfigChannel+0x6d6>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a04      	ldr	r2, [pc, #16]	; (80075ec <HAL_ADC_ConfigChannel+0x6e4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10a      	bne.n	80075f4 <HAL_ADC_ConfigChannel+0x6ec>
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80075e0:	e009      	b.n	80075f6 <HAL_ADC_ConfigChannel+0x6ee>
 80075e2:	bf00      	nop
 80075e4:	407f0000 	.word	0x407f0000
 80075e8:	80080000 	.word	0x80080000
 80075ec:	50000100 	.word	0x50000100
 80075f0:	50000300 	.word	0x50000300
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <HAL_ADC_ConfigChannel+0x854>)
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe fbe0 	bl	8005dbc <LL_ADC_GetCommonPathInternalCh>
 80075fc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a56      	ldr	r2, [pc, #344]	; (8007760 <HAL_ADC_ConfigChannel+0x858>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <HAL_ADC_ConfigChannel+0x70c>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a55      	ldr	r2, [pc, #340]	; (8007764 <HAL_ADC_ConfigChannel+0x85c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d13a      	bne.n	800768a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d134      	bne.n	800768a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007628:	d005      	beq.n	8007636 <HAL_ADC_ConfigChannel+0x72e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a4e      	ldr	r2, [pc, #312]	; (8007768 <HAL_ADC_ConfigChannel+0x860>)
 8007630:	4293      	cmp	r3, r2
 8007632:	f040 8085 	bne.w	8007740 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800763e:	d004      	beq.n	800764a <HAL_ADC_ConfigChannel+0x742>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a49      	ldr	r2, [pc, #292]	; (800776c <HAL_ADC_ConfigChannel+0x864>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d101      	bne.n	800764e <HAL_ADC_ConfigChannel+0x746>
 800764a:	4a49      	ldr	r2, [pc, #292]	; (8007770 <HAL_ADC_ConfigChannel+0x868>)
 800764c:	e000      	b.n	8007650 <HAL_ADC_ConfigChannel+0x748>
 800764e:	4a43      	ldr	r2, [pc, #268]	; (800775c <HAL_ADC_ConfigChannel+0x854>)
 8007650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe fb9b 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007660:	4b44      	ldr	r3, [pc, #272]	; (8007774 <HAL_ADC_ConfigChannel+0x86c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	099b      	lsrs	r3, r3, #6
 8007666:	4a44      	ldr	r2, [pc, #272]	; (8007778 <HAL_ADC_ConfigChannel+0x870>)
 8007668:	fba2 2303 	umull	r2, r3, r2, r3
 800766c:	099b      	lsrs	r3, r3, #6
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800767a:	e002      	b.n	8007682 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3b01      	subs	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f9      	bne.n	800767c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007688:	e05a      	b.n	8007740 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a3b      	ldr	r2, [pc, #236]	; (800777c <HAL_ADC_ConfigChannel+0x874>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d125      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x7d8>
 8007694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11f      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a31      	ldr	r2, [pc, #196]	; (800776c <HAL_ADC_ConfigChannel+0x864>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d104      	bne.n	80076b4 <HAL_ADC_ConfigChannel+0x7ac>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a34      	ldr	r2, [pc, #208]	; (8007780 <HAL_ADC_ConfigChannel+0x878>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d047      	beq.n	8007744 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076bc:	d004      	beq.n	80076c8 <HAL_ADC_ConfigChannel+0x7c0>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a2a      	ldr	r2, [pc, #168]	; (800776c <HAL_ADC_ConfigChannel+0x864>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x7c4>
 80076c8:	4a29      	ldr	r2, [pc, #164]	; (8007770 <HAL_ADC_ConfigChannel+0x868>)
 80076ca:	e000      	b.n	80076ce <HAL_ADC_ConfigChannel+0x7c6>
 80076cc:	4a23      	ldr	r2, [pc, #140]	; (800775c <HAL_ADC_ConfigChannel+0x854>)
 80076ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fe fb5c 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076de:	e031      	b.n	8007744 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a27      	ldr	r2, [pc, #156]	; (8007784 <HAL_ADC_ConfigChannel+0x87c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d12d      	bne.n	8007746 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d127      	bne.n	8007746 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	; (800776c <HAL_ADC_ConfigChannel+0x864>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d022      	beq.n	8007746 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007708:	d004      	beq.n	8007714 <HAL_ADC_ConfigChannel+0x80c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a17      	ldr	r2, [pc, #92]	; (800776c <HAL_ADC_ConfigChannel+0x864>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d101      	bne.n	8007718 <HAL_ADC_ConfigChannel+0x810>
 8007714:	4a16      	ldr	r2, [pc, #88]	; (8007770 <HAL_ADC_ConfigChannel+0x868>)
 8007716:	e000      	b.n	800771a <HAL_ADC_ConfigChannel+0x812>
 8007718:	4a10      	ldr	r2, [pc, #64]	; (800775c <HAL_ADC_ConfigChannel+0x854>)
 800771a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800771e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f7fe fb36 	bl	8005d96 <LL_ADC_SetCommonPathInternalCh>
 800772a:	e00c      	b.n	8007746 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800773e:	e002      	b.n	8007746 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007740:	bf00      	nop
 8007742:	e000      	b.n	8007746 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007744:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800774e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007752:	4618      	mov	r0, r3
 8007754:	37d8      	adds	r7, #216	; 0xd8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	50000700 	.word	0x50000700
 8007760:	c3210000 	.word	0xc3210000
 8007764:	90c00010 	.word	0x90c00010
 8007768:	50000600 	.word	0x50000600
 800776c:	50000100 	.word	0x50000100
 8007770:	50000300 	.word	0x50000300
 8007774:	20000008 	.word	0x20000008
 8007778:	053e2d63 	.word	0x053e2d63
 800777c:	c7520000 	.word	0xc7520000
 8007780:	50000500 	.word	0x50000500
 8007784:	cb840000 	.word	0xcb840000

08007788 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08e      	sub	sp, #56	; 0x38
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077a0:	d003      	beq.n	80077aa <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80077a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_ADC_AnalogWDGConfig+0x30>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e1ea      	b.n	8007b8e <HAL_ADC_AnalogWDGConfig+0x406>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe fd7a 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 80077ca:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fe fd9b 	bl	800630c <LL_ADC_INJ_IsConversionOngoing>
 80077d6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 8175 	bne.w	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 8171 	bne.w	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a90      	ldr	r2, [pc, #576]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	f040 808d 	bne.w	800790e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80077fc:	d034      	beq.n	8007868 <HAL_ADC_AnalogWDGConfig+0xe0>
 80077fe:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007802:	d856      	bhi.n	80078b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007808:	d04b      	beq.n	80078a2 <HAL_ADC_AnalogWDGConfig+0x11a>
 800780a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800780e:	d850      	bhi.n	80078b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007810:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007814:	d01b      	beq.n	800784e <HAL_ADC_AnalogWDGConfig+0xc6>
 8007816:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800781a:	d84a      	bhi.n	80078b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 800781c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007820:	d037      	beq.n	8007892 <HAL_ADC_AnalogWDGConfig+0x10a>
 8007822:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007826:	d844      	bhi.n	80078b2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8007828:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800782c:	d029      	beq.n	8007882 <HAL_ADC_AnalogWDGConfig+0xfa>
 800782e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007832:	d13e      	bne.n	80078b2 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007840:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007844:	461a      	mov	r2, r3
 8007846:	497a      	ldr	r1, [pc, #488]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007848:	f7fe fc0a 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800784c:	e039      	b.n	80078c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800785a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800785e:	461a      	mov	r2, r3
 8007860:	4973      	ldr	r1, [pc, #460]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8007862:	f7fe fbfd 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8007866:	e02c      	b.n	80078c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007874:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8007878:	461a      	mov	r2, r3
 800787a:	496d      	ldr	r1, [pc, #436]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800787c:	f7fe fbf0 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8007880:	e01f      	b.n	80078c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a6b      	ldr	r2, [pc, #428]	; (8007a34 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8007888:	4969      	ldr	r1, [pc, #420]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fbe8 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007890:	e017      	b.n	80078c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a68      	ldr	r2, [pc, #416]	; (8007a38 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8007898:	4965      	ldr	r1, [pc, #404]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fbe0 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80078a0:	e00f      	b.n	80078c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a65      	ldr	r2, [pc, #404]	; (8007a3c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80078a8:	4961      	ldr	r1, [pc, #388]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fbd8 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80078b0:	e007      	b.n	80078c2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2200      	movs	r2, #0
 80078b8:	495d      	ldr	r1, [pc, #372]	; (8007a30 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fbd0 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80078c0:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fd22 	bl	8006332 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	7b1b      	ldrb	r3, [r3, #12]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d105      	bne.n	8007902 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fd42 	bl	8006384 <LL_ADC_EnableIT_AWD1>
 8007900:	e0e3      	b.n	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fd6c 	bl	80063e4 <LL_ADC_DisableIT_AWD1>
 800790c:	e0dd      	b.n	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8007916:	d01d      	beq.n	8007954 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007918:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800791c:	f200 8092 	bhi.w	8007a44 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007924:	d07b      	beq.n	8007a1e <HAL_ADC_AnalogWDGConfig+0x296>
 8007926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800792a:	f200 808b 	bhi.w	8007a44 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800792e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007932:	d00f      	beq.n	8007954 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8007934:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007938:	f200 8084 	bhi.w	8007a44 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800793c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007940:	d06d      	beq.n	8007a1e <HAL_ADC_AnalogWDGConfig+0x296>
 8007942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007946:	d87d      	bhi.n	8007a44 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8007948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800794c:	d067      	beq.n	8007a1e <HAL_ADC_AnalogWDGConfig+0x296>
 800794e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007952:	d177      	bne.n	8007a44 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a39      	ldr	r2, [pc, #228]	; (8007a40 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d12f      	bne.n	80079be <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007966:	2b00      	cmp	r3, #0
 8007968:	d108      	bne.n	800797c <HAL_ADC_AnalogWDGConfig+0x1f4>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0e9b      	lsrs	r3, r3, #26
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2201      	movs	r2, #1
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	e016      	b.n	80079aa <HAL_ADC_AnalogWDGConfig+0x222>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	fa93 f3a3 	rbit	r3, r3
 8007988:	61bb      	str	r3, [r7, #24]
  return result;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8007994:	2320      	movs	r3, #32
 8007996:	e003      	b.n	80079a0 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	fab3 f383 	clz	r3, r3
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	2201      	movs	r2, #1
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	430b      	orrs	r3, r1
 80079b8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80079bc:	e04b      	b.n	8007a56 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d108      	bne.n	80079dc <HAL_ADC_AnalogWDGConfig+0x254>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	0e9b      	lsrs	r3, r3, #26
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2201      	movs	r2, #1
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	e016      	b.n	8007a0a <HAL_ADC_AnalogWDGConfig+0x282>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	fa93 f3a3 	rbit	r3, r3
 80079e8:	60fb      	str	r3, [r7, #12]
  return result;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 80079f4:	2320      	movs	r3, #32
 80079f6:	e003      	b.n	8007a00 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	fab3 f383 	clz	r3, r3
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2201      	movs	r2, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	430b      	orrs	r3, r1
 8007a18:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8007a1c:	e01b      	b.n	8007a56 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a05      	ldr	r2, [pc, #20]	; (8007a3c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7fe fb19 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007a2e:	e012      	b.n	8007a56 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8007a30:	7dc00000 	.word	0x7dc00000
 8007a34:	0087ffff 	.word	0x0087ffff
 8007a38:	0107ffff 	.word	0x0107ffff
 8007a3c:	0187ffff 	.word	0x0187ffff
 8007a40:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4619      	mov	r1, r3
 8007a50:	f7fe fb06 	bl	8006060 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007a54:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a4f      	ldr	r2, [pc, #316]	; (8007b98 <HAL_ADC_AnalogWDGConfig+0x410>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d11a      	bne.n	8007a96 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a64:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fc6b 	bl	800634c <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	7b1b      	ldrb	r3, [r3, #12]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d105      	bne.n	8007a8a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fc8e 	bl	80063a4 <LL_ADC_EnableIT_AWD2>
 8007a88:	e01f      	b.n	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fcb8 	bl	8006404 <LL_ADC_DisableIT_AWD2>
 8007a94:	e019      	b.n	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fc5e 	bl	8006368 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	7b1b      	ldrb	r3, [r3, #12]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fe fc83 	bl	80063c4 <LL_ADC_EnableIT_AWD3>
 8007abe:	e004      	b.n	8007aca <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fcad 	bl	8006424 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a33      	ldr	r2, [pc, #204]	; (8007b9c <HAL_ADC_AnalogWDGConfig+0x414>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d118      	bne.n	8007b06 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	08db      	lsrs	r3, r3, #3
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	633b      	str	r3, [r7, #48]	; 0x30
 8007b04:	e035      	b.n	8007b72 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0318 	and.w	r3, r3, #24
 8007b10:	2b18      	cmp	r3, #24
 8007b12:	d00f      	beq.n	8007b34 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	08db      	lsrs	r3, r3, #3
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	f1c3 0302 	rsb	r3, r3, #2
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	f003 031e 	and.w	r3, r3, #30
 8007b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b32:	e002      	b.n	8007b3a <HAL_ADC_AnalogWDGConfig+0x3b2>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0318 	and.w	r3, r3, #24
 8007b46:	2b18      	cmp	r3, #24
 8007b48:	d00f      	beq.n	8007b6a <HAL_ADC_AnalogWDGConfig+0x3e2>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	08db      	lsrs	r3, r3, #3
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	f1c3 0302 	rsb	r3, r3, #2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	f003 031e 	and.w	r3, r3, #30
 8007b64:	fa22 f303 	lsr.w	r3, r2, r3
 8007b68:	e002      	b.n	8007b70 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	6819      	ldr	r1, [r3, #0]
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b7e:	f7fe fa9c 	bl	80060ba <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3738      	adds	r7, #56	; 0x38
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	0017ffff 	.word	0x0017ffff
 8007b9c:	7dc00000 	.word	0x7dc00000

08007ba0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fb81 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8007bbc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fba2 	bl	800630c <LL_ADC_INJ_IsConversionOngoing>
 8007bc8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 8098 	beq.w	8007d08 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d02a      	beq.n	8007c3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7f5b      	ldrb	r3, [r3, #29]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d126      	bne.n	8007c3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7f1b      	ldrb	r3, [r3, #28]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d122      	bne.n	8007c3c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007bfa:	e014      	b.n	8007c26 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	4a45      	ldr	r2, [pc, #276]	; (8007d14 <ADC_ConversionStop+0x174>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d90d      	bls.n	8007c20 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c08:	f043 0210 	orr.w	r2, r3, #16
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	f043 0201 	orr.w	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e074      	b.n	8007d0a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	3301      	adds	r3, #1
 8007c24:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c30:	2b40      	cmp	r3, #64	; 0x40
 8007c32:	d1e3      	bne.n	8007bfc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2240      	movs	r2, #64	; 0x40
 8007c3a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d014      	beq.n	8007c6c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fb39 	bl	80062be <LL_ADC_REG_IsConversionOngoing>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00c      	beq.n	8007c6c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe faf6 	bl	8006248 <LL_ADC_IsDisableOngoing>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d104      	bne.n	8007c6c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fb15 	bl	8006296 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d014      	beq.n	8007c9c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fb48 	bl	800630c <LL_ADC_INJ_IsConversionOngoing>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00c      	beq.n	8007c9c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fade 	bl	8006248 <LL_ADC_IsDisableOngoing>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fb24 	bl	80062e4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d005      	beq.n	8007cae <ADC_ConversionStop+0x10e>
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d105      	bne.n	8007cb4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007ca8:	230c      	movs	r3, #12
 8007caa:	617b      	str	r3, [r7, #20]
        break;
 8007cac:	e005      	b.n	8007cba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007cae:	2308      	movs	r3, #8
 8007cb0:	617b      	str	r3, [r7, #20]
        break;
 8007cb2:	e002      	b.n	8007cba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	617b      	str	r3, [r7, #20]
        break;
 8007cb8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007cba:	f7fe f807 	bl	8005ccc <HAL_GetTick>
 8007cbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007cc0:	e01b      	b.n	8007cfa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007cc2:	f7fe f803 	bl	8005ccc <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b05      	cmp	r3, #5
 8007cce:	d914      	bls.n	8007cfa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00d      	beq.n	8007cfa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce2:	f043 0210 	orr.w	r2, r3, #16
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cee:	f043 0201 	orr.w	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e007      	b.n	8007d0a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1dc      	bne.n	8007cc2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3720      	adds	r7, #32
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	a33fffff 	.word	0xa33fffff

08007d18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fa7c 	bl	8006222 <LL_ADC_IsEnabled>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d14d      	bne.n	8007dcc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b28      	ldr	r3, [pc, #160]	; (8007dd8 <ADC_Enable+0xc0>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d42:	f043 0210 	orr.w	r2, r3, #16
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4e:	f043 0201 	orr.w	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e039      	b.n	8007dce <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fa37 	bl	80061d2 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007d64:	f7fd ffb2 	bl	8005ccc <HAL_GetTick>
 8007d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007d6a:	e028      	b.n	8007dbe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe fa56 	bl	8006222 <LL_ADC_IsEnabled>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe fa26 	bl	80061d2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007d86:	f7fd ffa1 	bl	8005ccc <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d914      	bls.n	8007dbe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d00d      	beq.n	8007dbe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da6:	f043 0210 	orr.w	r2, r3, #16
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db2:	f043 0201 	orr.w	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e007      	b.n	8007dce <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d1cf      	bne.n	8007d6c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	8000003f 	.word	0x8000003f

08007ddc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fa2d 	bl	8006248 <LL_ADC_IsDisableOngoing>
 8007dee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fa14 	bl	8006222 <LL_ADC_IsEnabled>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d047      	beq.n	8007e90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d144      	bne.n	8007e90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 030d 	and.w	r3, r3, #13
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d10c      	bne.n	8007e2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe f9ee 	bl	80061fa <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2203      	movs	r2, #3
 8007e24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007e26:	f7fd ff51 	bl	8005ccc <HAL_GetTick>
 8007e2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007e2c:	e029      	b.n	8007e82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e32:	f043 0210 	orr.w	r2, r3, #16
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3e:	f043 0201 	orr.w	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e023      	b.n	8007e92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007e4a:	f7fd ff3f 	bl	8005ccc <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d914      	bls.n	8007e82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00d      	beq.n	8007e82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6a:	f043 0210 	orr.w	r2, r3, #16
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e76:	f043 0201 	orr.w	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e007      	b.n	8007e92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1dc      	bne.n	8007e4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d14b      	bne.n	8007f4c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0308 	and.w	r3, r3, #8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d021      	beq.n	8007f12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe f81e 	bl	8005f14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d032      	beq.n	8007f44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d12b      	bne.n	8007f44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d11f      	bne.n	8007f44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f08:	f043 0201 	orr.w	r2, r3, #1
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f10:	e018      	b.n	8007f44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d111      	bne.n	8007f44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d105      	bne.n	8007f44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3c:	f043 0201 	orr.w	r2, r3, #1
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7fc fe51 	bl	8004bec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007f4a:	e00e      	b.n	8007f6a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7fe ffcb 	bl	8006ef4 <HAL_ADC_ErrorCallback>
}
 8007f5e:	e004      	b.n	8007f6a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7fc fe29 	bl	8004bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7fe ff9d 	bl	8006ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007fba:	bf00      	nop
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <LL_ADC_IsEnabled>:
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <LL_ADC_IsEnabled+0x18>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <LL_ADC_IsEnabled+0x1a>
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <LL_ADC_StartCalibration>:
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007ffa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008004:	4313      	orrs	r3, r2
 8008006:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	609a      	str	r2, [r3, #8]
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <LL_ADC_IsCalibrationOnGoing>:
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800802a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802e:	d101      	bne.n	8008034 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <LL_ADC_REG_IsConversionOngoing>:
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b04      	cmp	r3, #4
 8008054:	d101      	bne.n	800805a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008072:	2300      	movs	r3, #0
 8008074:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_ADCEx_Calibration_Start+0x1c>
 8008080:	2302      	movs	r3, #2
 8008082:	e04d      	b.n	8008120 <HAL_ADCEx_Calibration_Start+0xb8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fea5 	bl	8007ddc <ADC_Disable>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d136      	bne.n	800810a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80080a4:	f023 0302 	bic.w	r3, r3, #2
 80080a8:	f043 0202 	orr.w	r2, r3, #2
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff ff96 	bl	8007fe8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80080bc:	e014      	b.n	80080e8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a18      	ldr	r2, [pc, #96]	; (8008128 <HAL_ADCEx_Calibration_Start+0xc0>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d90d      	bls.n	80080e8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d0:	f023 0312 	bic.w	r3, r3, #18
 80080d4:	f043 0210 	orr.w	r2, r3, #16
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e01b      	b.n	8008120 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ff94 	bl	800801a <LL_ADC_IsCalibrationOnGoing>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e2      	bne.n	80080be <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fc:	f023 0303 	bic.w	r3, r3, #3
 8008100:	f043 0201 	orr.w	r2, r3, #1
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	65da      	str	r2, [r3, #92]	; 0x5c
 8008108:	e005      	b.n	8008116 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810e:	f043 0210 	orr.w	r2, r3, #16
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	0004de01 	.word	0x0004de01

0800812c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800817c:	b590      	push	{r4, r7, lr}
 800817e:	b0a1      	sub	sp, #132	; 0x84
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008196:	2302      	movs	r3, #2
 8008198:	e0e7      	b.n	800836a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80081a2:	2300      	movs	r3, #0
 80081a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80081a6:	2300      	movs	r3, #0
 80081a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b2:	d102      	bne.n	80081ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80081b4:	4b6f      	ldr	r3, [pc, #444]	; (8008374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80081b6:	60bb      	str	r3, [r7, #8]
 80081b8:	e009      	b.n	80081ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a6e      	ldr	r2, [pc, #440]	; (8008378 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d102      	bne.n	80081ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80081c4:	4b6d      	ldr	r3, [pc, #436]	; (800837c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80081c6:	60bb      	str	r3, [r7, #8]
 80081c8:	e001      	b.n	80081ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10b      	bne.n	80081ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d8:	f043 0220 	orr.w	r2, r3, #32
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0be      	b.n	800836a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff ff27 	bl	8008042 <LL_ADC_REG_IsConversionOngoing>
 80081f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff ff21 	bl	8008042 <LL_ADC_REG_IsConversionOngoing>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	f040 80a0 	bne.w	8008348 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800820a:	2b00      	cmp	r3, #0
 800820c:	f040 809c 	bne.w	8008348 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008218:	d004      	beq.n	8008224 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a55      	ldr	r2, [pc, #340]	; (8008374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d101      	bne.n	8008228 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008224:	4b56      	ldr	r3, [pc, #344]	; (8008380 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008226:	e000      	b.n	800822a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008228:	4b56      	ldr	r3, [pc, #344]	; (8008384 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800822a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d04b      	beq.n	80082cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	6859      	ldr	r1, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008246:	035b      	lsls	r3, r3, #13
 8008248:	430b      	orrs	r3, r1
 800824a:	431a      	orrs	r2, r3
 800824c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008258:	d004      	beq.n	8008264 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a45      	ldr	r2, [pc, #276]	; (8008374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d10f      	bne.n	8008284 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008264:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008268:	f7ff feab 	bl	8007fc2 <LL_ADC_IsEnabled>
 800826c:	4604      	mov	r4, r0
 800826e:	4841      	ldr	r0, [pc, #260]	; (8008374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008270:	f7ff fea7 	bl	8007fc2 <LL_ADC_IsEnabled>
 8008274:	4603      	mov	r3, r0
 8008276:	4323      	orrs	r3, r4
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	e012      	b.n	80082aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008284:	483c      	ldr	r0, [pc, #240]	; (8008378 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008286:	f7ff fe9c 	bl	8007fc2 <LL_ADC_IsEnabled>
 800828a:	4604      	mov	r4, r0
 800828c:	483b      	ldr	r0, [pc, #236]	; (800837c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800828e:	f7ff fe98 	bl	8007fc2 <LL_ADC_IsEnabled>
 8008292:	4603      	mov	r3, r0
 8008294:	431c      	orrs	r4, r3
 8008296:	483c      	ldr	r0, [pc, #240]	; (8008388 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008298:	f7ff fe93 	bl	8007fc2 <LL_ADC_IsEnabled>
 800829c:	4603      	mov	r3, r0
 800829e:	4323      	orrs	r3, r4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bf0c      	ite	eq
 80082a4:	2301      	moveq	r3, #1
 80082a6:	2300      	movne	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d056      	beq.n	800835c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80082ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80082b6:	f023 030f 	bic.w	r3, r3, #15
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	6811      	ldr	r1, [r2, #0]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	6892      	ldr	r2, [r2, #8]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	431a      	orrs	r2, r3
 80082c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80082ca:	e047      	b.n	800835c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80082cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082e0:	d004      	beq.n	80082ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a23      	ldr	r2, [pc, #140]	; (8008374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d10f      	bne.n	800830c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80082ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80082f0:	f7ff fe67 	bl	8007fc2 <LL_ADC_IsEnabled>
 80082f4:	4604      	mov	r4, r0
 80082f6:	481f      	ldr	r0, [pc, #124]	; (8008374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80082f8:	f7ff fe63 	bl	8007fc2 <LL_ADC_IsEnabled>
 80082fc:	4603      	mov	r3, r0
 80082fe:	4323      	orrs	r3, r4
 8008300:	2b00      	cmp	r3, #0
 8008302:	bf0c      	ite	eq
 8008304:	2301      	moveq	r3, #1
 8008306:	2300      	movne	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e012      	b.n	8008332 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800830c:	481a      	ldr	r0, [pc, #104]	; (8008378 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800830e:	f7ff fe58 	bl	8007fc2 <LL_ADC_IsEnabled>
 8008312:	4604      	mov	r4, r0
 8008314:	4819      	ldr	r0, [pc, #100]	; (800837c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008316:	f7ff fe54 	bl	8007fc2 <LL_ADC_IsEnabled>
 800831a:	4603      	mov	r3, r0
 800831c:	431c      	orrs	r4, r3
 800831e:	481a      	ldr	r0, [pc, #104]	; (8008388 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008320:	f7ff fe4f 	bl	8007fc2 <LL_ADC_IsEnabled>
 8008324:	4603      	mov	r3, r0
 8008326:	4323      	orrs	r3, r4
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d012      	beq.n	800835c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800833e:	f023 030f 	bic.w	r3, r3, #15
 8008342:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008344:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008346:	e009      	b.n	800835c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800835a:	e000      	b.n	800835e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800835c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008366:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800836a:	4618      	mov	r0, r3
 800836c:	3784      	adds	r7, #132	; 0x84
 800836e:	46bd      	mov	sp, r7
 8008370:	bd90      	pop	{r4, r7, pc}
 8008372:	bf00      	nop
 8008374:	50000100 	.word	0x50000100
 8008378:	50000400 	.word	0x50000400
 800837c:	50000500 	.word	0x50000500
 8008380:	50000300 	.word	0x50000300
 8008384:	50000700 	.word	0x50000700
 8008388:	50000600 	.word	0x50000600

0800838c <__NVIC_SetPriorityGrouping>:
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <__NVIC_SetPriorityGrouping+0x44>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083a8:	4013      	ands	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083be:	4a04      	ldr	r2, [pc, #16]	; (80083d0 <__NVIC_SetPriorityGrouping+0x44>)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	60d3      	str	r3, [r2, #12]
}
 80083c4:	bf00      	nop
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	e000ed00 	.word	0xe000ed00

080083d4 <__NVIC_GetPriorityGrouping>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <__NVIC_GetPriorityGrouping+0x18>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	0a1b      	lsrs	r3, r3, #8
 80083de:	f003 0307 	and.w	r3, r3, #7
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	e000ed00 	.word	0xe000ed00

080083f0 <__NVIC_EnableIRQ>:
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	db0b      	blt.n	800841a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	f003 021f 	and.w	r2, r3, #31
 8008408:	4907      	ldr	r1, [pc, #28]	; (8008428 <__NVIC_EnableIRQ+0x38>)
 800840a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	2001      	movs	r0, #1
 8008412:	fa00 f202 	lsl.w	r2, r0, r2
 8008416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	e000e100 	.word	0xe000e100

0800842c <__NVIC_SetPriority>:
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843c:	2b00      	cmp	r3, #0
 800843e:	db0a      	blt.n	8008456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	b2da      	uxtb	r2, r3
 8008444:	490c      	ldr	r1, [pc, #48]	; (8008478 <__NVIC_SetPriority+0x4c>)
 8008446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844a:	0112      	lsls	r2, r2, #4
 800844c:	b2d2      	uxtb	r2, r2
 800844e:	440b      	add	r3, r1
 8008450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008454:	e00a      	b.n	800846c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4908      	ldr	r1, [pc, #32]	; (800847c <__NVIC_SetPriority+0x50>)
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	3b04      	subs	r3, #4
 8008464:	0112      	lsls	r2, r2, #4
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	440b      	add	r3, r1
 800846a:	761a      	strb	r2, [r3, #24]
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	e000e100 	.word	0xe000e100
 800847c:	e000ed00 	.word	0xe000ed00

08008480 <NVIC_EncodePriority>:
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f1c3 0307 	rsb	r3, r3, #7
 800849a:	2b04      	cmp	r3, #4
 800849c:	bf28      	it	cs
 800849e:	2304      	movcs	r3, #4
 80084a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3304      	adds	r3, #4
 80084a6:	2b06      	cmp	r3, #6
 80084a8:	d902      	bls.n	80084b0 <NVIC_EncodePriority+0x30>
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	3b03      	subs	r3, #3
 80084ae:	e000      	b.n	80084b2 <NVIC_EncodePriority+0x32>
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	fa02 f303 	lsl.w	r3, r2, r3
 80084be:	43da      	mvns	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	401a      	ands	r2, r3
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084c8:	f04f 31ff 	mov.w	r1, #4294967295
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	fa01 f303 	lsl.w	r3, r1, r3
 80084d2:	43d9      	mvns	r1, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d8:	4313      	orrs	r3, r2
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3724      	adds	r7, #36	; 0x24
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <SysTick_Config>:
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084f8:	d301      	bcc.n	80084fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80084fa:	2301      	movs	r3, #1
 80084fc:	e00f      	b.n	800851e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084fe:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <SysTick_Config+0x40>)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3b01      	subs	r3, #1
 8008504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008506:	210f      	movs	r1, #15
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	f7ff ff8e 	bl	800842c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <SysTick_Config+0x40>)
 8008512:	2200      	movs	r2, #0
 8008514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008516:	4b04      	ldr	r3, [pc, #16]	; (8008528 <SysTick_Config+0x40>)
 8008518:	2207      	movs	r2, #7
 800851a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	e000e010 	.word	0xe000e010

0800852c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff ff29 	bl	800838c <__NVIC_SetPriorityGrouping>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	4603      	mov	r3, r0
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008550:	f7ff ff40 	bl	80083d4 <__NVIC_GetPriorityGrouping>
 8008554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	6978      	ldr	r0, [r7, #20]
 800855c:	f7ff ff90 	bl	8008480 <NVIC_EncodePriority>
 8008560:	4602      	mov	r2, r0
 8008562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff ff5f 	bl	800842c <__NVIC_SetPriority>
}
 800856e:	bf00      	nop
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	4603      	mov	r3, r0
 800857e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff ff33 	bl	80083f0 <__NVIC_EnableIRQ>
}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff ffa4 	bl	80084e8 <SysTick_Config>
 80085a0:	4603      	mov	r3, r0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e014      	b.n	80085e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	791b      	ldrb	r3, [r3, #4]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d105      	bne.n	80085d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7f8 ff89 	bl	80014e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	795b      	ldrb	r3, [r3, #5]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_DAC_Start+0x16>
 8008600:	2302      	movs	r3, #2
 8008602:	e043      	b.n	800868c <HAL_DAC_Start+0x9e>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6819      	ldr	r1, [r3, #0]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2201      	movs	r2, #1
 800861e:	409a      	lsls	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8008628:	2001      	movs	r0, #1
 800862a:	f7fd fb5b 	bl	8005ce4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10f      	bne.n	8008654 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800863e:	2b02      	cmp	r3, #2
 8008640:	d11d      	bne.n	800867e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f042 0201 	orr.w	r2, r2, #1
 8008650:	605a      	str	r2, [r3, #4]
 8008652:	e014      	b.n	800867e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2102      	movs	r1, #2
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	429a      	cmp	r2, r3
 800866c:	d107      	bne.n	800867e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0202 	orr.w	r2, r2, #2
 800867c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	795b      	ldrb	r3, [r3, #5]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_DAC_Start_DMA+0x1e>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e0ae      	b.n	8008810 <HAL_DAC_Start_DMA+0x17c>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2201      	movs	r2, #1
 80086b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2202      	movs	r2, #2
 80086bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d12f      	bne.n	8008724 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	4a53      	ldr	r2, [pc, #332]	; (8008818 <HAL_DAC_Start_DMA+0x184>)
 80086ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	4a52      	ldr	r2, [pc, #328]	; (800881c <HAL_DAC_Start_DMA+0x188>)
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	4a51      	ldr	r2, [pc, #324]	; (8008820 <HAL_DAC_Start_DMA+0x18c>)
 80086da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	d013      	beq.n	800871a <HAL_DAC_Start_DMA+0x86>
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d845      	bhi.n	8008784 <HAL_DAC_Start_DMA+0xf0>
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_DAC_Start_DMA+0x72>
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	2b04      	cmp	r3, #4
 8008702:	d005      	beq.n	8008710 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8008704:	e03e      	b.n	8008784 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	613b      	str	r3, [r7, #16]
        break;
 800870e:	e03c      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	613b      	str	r3, [r7, #16]
        break;
 8008718:	e037      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3310      	adds	r3, #16
 8008720:	613b      	str	r3, [r7, #16]
        break;
 8008722:	e032      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	4a3e      	ldr	r2, [pc, #248]	; (8008824 <HAL_DAC_Start_DMA+0x190>)
 800872a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a3d      	ldr	r2, [pc, #244]	; (8008828 <HAL_DAC_Start_DMA+0x194>)
 8008732:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a3c      	ldr	r2, [pc, #240]	; (800882c <HAL_DAC_Start_DMA+0x198>)
 800873a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800874a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d013      	beq.n	800877a <HAL_DAC_Start_DMA+0xe6>
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	2b08      	cmp	r3, #8
 8008756:	d817      	bhi.n	8008788 <HAL_DAC_Start_DMA+0xf4>
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_DAC_Start_DMA+0xd2>
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	2b04      	cmp	r3, #4
 8008762:	d005      	beq.n	8008770 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8008764:	e010      	b.n	8008788 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3314      	adds	r3, #20
 800876c:	613b      	str	r3, [r7, #16]
        break;
 800876e:	e00c      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3318      	adds	r3, #24
 8008776:	613b      	str	r3, [r7, #16]
        break;
 8008778:	e007      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	331c      	adds	r3, #28
 8008780:	613b      	str	r3, [r7, #16]
        break;
 8008782:	e002      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
        break;
 8008784:	bf00      	nop
 8008786:	e000      	b.n	800878a <HAL_DAC_Start_DMA+0xf6>
        break;
 8008788:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d111      	bne.n	80087b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800879e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6898      	ldr	r0, [r3, #8]
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	f000 fb61 	bl	8008e70 <HAL_DMA_Start_IT>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75fb      	strb	r3, [r7, #23]
 80087b2:	e010      	b.n	80087d6 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80087c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68d8      	ldr	r0, [r3, #12]
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	f000 fb4f 	bl	8008e70 <HAL_DMA_Start_IT>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10f      	bne.n	8008802 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	2201      	movs	r2, #1
 80087f0:	409a      	lsls	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80087fa:	2001      	movs	r0, #1
 80087fc:	f7fd fa72 	bl	8005ce4 <HAL_Delay>
 8008800:	e005      	b.n	800880e <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f043 0204 	orr.w	r2, r3, #4
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	08008c0d 	.word	0x08008c0d
 800881c:	08008c2f 	.word	0x08008c2f
 8008820:	08008c4b 	.word	0x08008c4b
 8008824:	08008cb5 	.word	0x08008cb5
 8008828:	08008cd7 	.word	0x08008cd7
 800882c:	08008cf3 	.word	0x08008cf3

08008830 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d105      	bne.n	8008860 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4413      	add	r3, r2
 800885a:	3308      	adds	r3, #8
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e004      	b.n	800886a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	3314      	adds	r3, #20
 8008868:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	461a      	mov	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	795b      	ldrb	r3, [r3, #5]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_DAC_ConfigChannel+0x18>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e192      	b.n	8008bfa <HAL_DAC_ConfigChannel+0x33e>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2202      	movs	r2, #2
 80088de:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d174      	bne.n	80089d2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80088e8:	f7fd f9f0 	bl	8005ccc <HAL_GetTick>
 80088ec:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d134      	bne.n	800895e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80088f4:	e011      	b.n	800891a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80088f6:	f7fd f9e9 	bl	8005ccc <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	d90a      	bls.n	800891a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f043 0208 	orr.w	r2, r3, #8
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2203      	movs	r2, #3
 8008914:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e16f      	b.n	8008bfa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e6      	bne.n	80088f6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8008928:	2001      	movs	r0, #1
 800892a:	f7fd f9db 	bl	8005ce4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008936:	641a      	str	r2, [r3, #64]	; 0x40
 8008938:	e01e      	b.n	8008978 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800893a:	f7fd f9c7 	bl	8005ccc <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	d90a      	bls.n	800895e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f043 0208 	orr.w	r2, r3, #8
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2203      	movs	r2, #3
 8008958:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e14d      	b.n	8008bfa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	2b00      	cmp	r3, #0
 8008966:	dbe8      	blt.n	800893a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8008968:	2001      	movs	r0, #1
 800896a:	f7fd f9bb 	bl	8005ce4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008976:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008988:	fa01 f303 	lsl.w	r3, r1, r3
 800898c:	43db      	mvns	r3, r3
 800898e:	ea02 0103 	and.w	r1, r2, r3
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	409a      	lsls	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	21ff      	movs	r1, #255	; 0xff
 80089b4:	fa01 f303 	lsl.w	r3, r1, r3
 80089b8:	43db      	mvns	r3, r3
 80089ba:	ea02 0103 	and.w	r1, r2, r3
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	409a      	lsls	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d11d      	bne.n	8008a16 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	221f      	movs	r2, #31
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	43db      	mvns	r3, r3
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	4013      	ands	r3, r2
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f003 0310 	and.w	r3, r3, #16
 8008a24:	2207      	movs	r2, #7
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	4013      	ands	r3, r2
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d102      	bne.n	8008a40 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	623b      	str	r3, [r7, #32]
 8008a3e:	e00f      	b.n	8008a60 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d102      	bne.n	8008a4e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	623b      	str	r3, [r7, #32]
 8008a4c:	e008      	b.n	8008a60 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008a56:	2301      	movs	r3, #1
 8008a58:	623b      	str	r3, [r7, #32]
 8008a5a:	e001      	b.n	8008a60 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	6a3a      	ldr	r2, [r7, #32]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0310 	and.w	r3, r3, #16
 8008a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	4013      	ands	r3, r2
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	791b      	ldrb	r3, [r3, #4]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d102      	bne.n	8008a94 <HAL_DAC_ConfigChannel+0x1d8>
 8008a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a92:	e000      	b.n	8008a96 <HAL_DAC_ConfigChannel+0x1da>
 8008a94:	2300      	movs	r3, #0
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f003 0310 	and.w	r3, r3, #16
 8008aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	4013      	ands	r3, r2
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	795b      	ldrb	r3, [r3, #5]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d102      	bne.n	8008ac0 <HAL_DAC_ConfigChannel+0x204>
 8008aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008abe:	e000      	b.n	8008ac2 <HAL_DAC_ConfigChannel+0x206>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d114      	bne.n	8008b02 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008ad8:	f001 ff34 	bl	800a944 <HAL_RCC_GetHCLKFreq>
 8008adc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4a48      	ldr	r2, [pc, #288]	; (8008c04 <HAL_DAC_ConfigChannel+0x348>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d904      	bls.n	8008af0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
 8008aee:	e00f      	b.n	8008b10 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	4a45      	ldr	r2, [pc, #276]	; (8008c08 <HAL_DAC_ConfigChannel+0x34c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d90a      	bls.n	8008b0e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
 8008b00:	e006      	b.n	8008b10 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b0c:	e000      	b.n	8008b10 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8008b0e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f003 0310 	and.w	r3, r3, #16
 8008b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43da      	mvns	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	400a      	ands	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b62:	4013      	ands	r3, r2
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f003 0310 	and.w	r3, r3, #16
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6819      	ldr	r1, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f003 0310 	and.w	r3, r3, #16
 8008b92:	22c0      	movs	r2, #192	; 0xc0
 8008b94:	fa02 f303 	lsl.w	r3, r2, r3
 8008b98:	43da      	mvns	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	400a      	ands	r2, r1
 8008ba0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	089b      	lsrs	r3, r3, #2
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	089b      	lsrs	r3, r3, #2
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	ea02 0103 	and.w	r1, r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f003 0310 	and.w	r3, r3, #16
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	409a      	lsls	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3728      	adds	r7, #40	; 0x28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	09896800 	.word	0x09896800
 8008c08:	04c4b400 	.word	0x04c4b400

08008c0c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff fe30 	bl	8008880 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	711a      	strb	r2, [r3, #4]
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7ff fe29 	bl	8008894 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f043 0204 	orr.w	r2, r3, #4
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff fe1f 	bl	80088a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	711a      	strb	r2, [r3, #4]
}
 8008c70:	bf00      	nop
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff ffd8 	bl	8008c78 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	711a      	strb	r2, [r3, #4]
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff ffd1 	bl	8008c8c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f043 0204 	orr.w	r2, r3, #4
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff ffc7 	bl	8008ca0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	711a      	strb	r2, [r3, #4]
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e08d      	b.n	8008e4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	4b47      	ldr	r3, [pc, #284]	; (8008e58 <HAL_DMA_Init+0x138>)
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d80f      	bhi.n	8008d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <HAL_DMA_Init+0x13c>)
 8008d46:	4413      	add	r3, r2
 8008d48:	4a45      	ldr	r2, [pc, #276]	; (8008e60 <HAL_DMA_Init+0x140>)
 8008d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4e:	091b      	lsrs	r3, r3, #4
 8008d50:	009a      	lsls	r2, r3, #2
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a42      	ldr	r2, [pc, #264]	; (8008e64 <HAL_DMA_Init+0x144>)
 8008d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8008d5c:	e00e      	b.n	8008d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	4b40      	ldr	r3, [pc, #256]	; (8008e68 <HAL_DMA_Init+0x148>)
 8008d66:	4413      	add	r3, r2
 8008d68:	4a3d      	ldr	r2, [pc, #244]	; (8008e60 <HAL_DMA_Init+0x140>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	009a      	lsls	r2, r3, #2
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a3c      	ldr	r2, [pc, #240]	; (8008e6c <HAL_DMA_Init+0x14c>)
 8008d7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa76 	bl	80092c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ddc:	d102      	bne.n	8008de4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dec:	b2d2      	uxtb	r2, r2
 8008dee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008df8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d010      	beq.n	8008e24 <HAL_DMA_Init+0x104>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d80c      	bhi.n	8008e24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa96 	bl	800933c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008e20:	605a      	str	r2, [r3, #4]
 8008e22:	e008      	b.n	8008e36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	40020407 	.word	0x40020407
 8008e5c:	bffdfff8 	.word	0xbffdfff8
 8008e60:	cccccccd 	.word	0xcccccccd
 8008e64:	40020000 	.word	0x40020000
 8008e68:	bffdfbf8 	.word	0xbffdfbf8
 8008e6c:	40020400 	.word	0x40020400

08008e70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_DMA_Start_IT+0x20>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e066      	b.n	8008f5e <HAL_DMA_Start_IT+0xee>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d155      	bne.n	8008f50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0201 	bic.w	r2, r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 f9bb 	bl	8009244 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 020e 	orr.w	r2, r2, #14
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e00f      	b.n	8008f08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0204 	bic.w	r2, r2, #4
 8008ef6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 020a 	orr.w	r2, r2, #10
 8008f06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d007      	beq.n	8008f3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0201 	orr.w	r2, r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	e005      	b.n	8008f5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d005      	beq.n	8008f8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2204      	movs	r2, #4
 8008f82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	e037      	b.n	8008ffa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 020e 	bic.w	r2, r2, #14
 8008f98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fa8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	f003 021f 	and.w	r2, r3, #31
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8008fcc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008fd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008ff8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d00d      	beq.n	800904c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2204      	movs	r2, #4
 8009034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	73fb      	strb	r3, [r7, #15]
 800904a:	e047      	b.n	80090dc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 020e 	bic.w	r2, r2, #14
 800905a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0201 	bic.w	r2, r2, #1
 800906a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800907a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009080:	f003 021f 	and.w	r2, r3, #31
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f202 	lsl.w	r2, r1, r2
 800908e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009098:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80090ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	4798      	blx	r3
    }
  }
  return status;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009102:	f003 031f 	and.w	r3, r3, #31
 8009106:	2204      	movs	r2, #4
 8009108:	409a      	lsls	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4013      	ands	r3, r2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d026      	beq.n	8009160 <HAL_DMA_IRQHandler+0x7a>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d021      	beq.n	8009160 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d107      	bne.n	800913a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0204 	bic.w	r2, r2, #4
 8009138:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913e:	f003 021f 	and.w	r2, r3, #31
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	2104      	movs	r1, #4
 8009148:	fa01 f202 	lsl.w	r2, r1, r2
 800914c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	2b00      	cmp	r3, #0
 8009154:	d071      	beq.n	800923a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800915e:	e06c      	b.n	800923a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2202      	movs	r2, #2
 800916a:	409a      	lsls	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d02e      	beq.n	80091d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d029      	beq.n	80091d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10b      	bne.n	80091a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 020a 	bic.w	r2, r2, #10
 800919a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a8:	f003 021f 	and.w	r2, r3, #31
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	2102      	movs	r1, #2
 80091b2:	fa01 f202 	lsl.w	r2, r1, r2
 80091b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d038      	beq.n	800923a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80091d0:	e033      	b.n	800923a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d6:	f003 031f 	and.w	r3, r3, #31
 80091da:	2208      	movs	r2, #8
 80091dc:	409a      	lsls	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4013      	ands	r3, r2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d02a      	beq.n	800923c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d025      	beq.n	800923c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 020e 	bic.w	r2, r2, #14
 80091fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009204:	f003 021f 	and.w	r2, r3, #31
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	2101      	movs	r1, #1
 800920e:	fa01 f202 	lsl.w	r2, r1, r2
 8009212:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922e:	2b00      	cmp	r3, #0
 8009230:	d004      	beq.n	800923c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800923a:	bf00      	nop
 800923c:	bf00      	nop
}
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800925a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009272:	f003 021f 	and.w	r2, r3, #31
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	2101      	movs	r1, #1
 800927c:	fa01 f202 	lsl.w	r2, r1, r2
 8009280:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b10      	cmp	r3, #16
 8009290:	d108      	bne.n	80092a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80092a2:	e007      	b.n	80092b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	60da      	str	r2, [r3, #12]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b16      	ldr	r3, [pc, #88]	; (8009328 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d802      	bhi.n	80092da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80092d4:	4b15      	ldr	r3, [pc, #84]	; (800932c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e001      	b.n	80092de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80092dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	3b08      	subs	r3, #8
 80092ea:	4a12      	ldr	r2, [pc, #72]	; (8009334 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80092ec:	fba2 2303 	umull	r2, r3, r2, r3
 80092f0:	091b      	lsrs	r3, r3, #4
 80092f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f8:	089b      	lsrs	r3, r3, #2
 80092fa:	009a      	lsls	r2, r3, #2
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	4413      	add	r3, r2
 8009300:	461a      	mov	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a0b      	ldr	r2, [pc, #44]	; (8009338 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800930a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f003 031f 	and.w	r3, r3, #31
 8009312:	2201      	movs	r2, #1
 8009314:	409a      	lsls	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	651a      	str	r2, [r3, #80]	; 0x50
}
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	40020407 	.word	0x40020407
 800932c:	40020800 	.word	0x40020800
 8009330:	40020820 	.word	0x40020820
 8009334:	cccccccd 	.word	0xcccccccd
 8009338:	40020880 	.word	0x40020880

0800933c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a08      	ldr	r2, [pc, #32]	; (8009380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800935e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3b01      	subs	r3, #1
 8009364:	f003 031f 	and.w	r3, r3, #31
 8009368:	2201      	movs	r2, #1
 800936a:	409a      	lsls	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	1000823f 	.word	0x1000823f
 8009380:	40020940 	.word	0x40020940

08009384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009392:	e15a      	b.n	800964a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	2101      	movs	r1, #1
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	fa01 f303 	lsl.w	r3, r1, r3
 80093a0:	4013      	ands	r3, r2
 80093a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 814c 	beq.w	8009644 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f003 0303 	and.w	r3, r3, #3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d005      	beq.n	80093c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d130      	bne.n	8009426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	005b      	lsls	r3, r3, #1
 80093ce:	2203      	movs	r2, #3
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	43db      	mvns	r3, r3
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4013      	ands	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68da      	ldr	r2, [r3, #12]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80093fa:	2201      	movs	r2, #1
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	43db      	mvns	r3, r3
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4013      	ands	r3, r2
 8009408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	091b      	lsrs	r3, r3, #4
 8009410:	f003 0201 	and.w	r2, r3, #1
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4313      	orrs	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	2b03      	cmp	r3, #3
 8009430:	d017      	beq.n	8009462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	2203      	movs	r2, #3
 800943e:	fa02 f303 	lsl.w	r3, r2, r3
 8009442:	43db      	mvns	r3, r3
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	4013      	ands	r3, r2
 8009448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	fa02 f303 	lsl.w	r3, r2, r3
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	2b02      	cmp	r3, #2
 800946c:	d123      	bne.n	80094b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	08da      	lsrs	r2, r3, #3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3208      	adds	r2, #8
 8009476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	220f      	movs	r2, #15
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	43db      	mvns	r3, r3
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4013      	ands	r3, r2
 8009490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	08da      	lsrs	r2, r3, #3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3208      	adds	r2, #8
 80094b0:	6939      	ldr	r1, [r7, #16]
 80094b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	2203      	movs	r2, #3
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	43db      	mvns	r3, r3
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4013      	ands	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f003 0203 	and.w	r2, r3, #3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 80a6 	beq.w	8009644 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094f8:	4b5b      	ldr	r3, [pc, #364]	; (8009668 <HAL_GPIO_Init+0x2e4>)
 80094fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094fc:	4a5a      	ldr	r2, [pc, #360]	; (8009668 <HAL_GPIO_Init+0x2e4>)
 80094fe:	f043 0301 	orr.w	r3, r3, #1
 8009502:	6613      	str	r3, [r2, #96]	; 0x60
 8009504:	4b58      	ldr	r3, [pc, #352]	; (8009668 <HAL_GPIO_Init+0x2e4>)
 8009506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	60bb      	str	r3, [r7, #8]
 800950e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009510:	4a56      	ldr	r2, [pc, #344]	; (800966c <HAL_GPIO_Init+0x2e8>)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	089b      	lsrs	r3, r3, #2
 8009516:	3302      	adds	r3, #2
 8009518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	220f      	movs	r2, #15
 8009528:	fa02 f303 	lsl.w	r3, r2, r3
 800952c:	43db      	mvns	r3, r3
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	4013      	ands	r3, r2
 8009532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800953a:	d01f      	beq.n	800957c <HAL_GPIO_Init+0x1f8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a4c      	ldr	r2, [pc, #304]	; (8009670 <HAL_GPIO_Init+0x2ec>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d019      	beq.n	8009578 <HAL_GPIO_Init+0x1f4>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a4b      	ldr	r2, [pc, #300]	; (8009674 <HAL_GPIO_Init+0x2f0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d013      	beq.n	8009574 <HAL_GPIO_Init+0x1f0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a4a      	ldr	r2, [pc, #296]	; (8009678 <HAL_GPIO_Init+0x2f4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d00d      	beq.n	8009570 <HAL_GPIO_Init+0x1ec>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a49      	ldr	r2, [pc, #292]	; (800967c <HAL_GPIO_Init+0x2f8>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d007      	beq.n	800956c <HAL_GPIO_Init+0x1e8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a48      	ldr	r2, [pc, #288]	; (8009680 <HAL_GPIO_Init+0x2fc>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d101      	bne.n	8009568 <HAL_GPIO_Init+0x1e4>
 8009564:	2305      	movs	r3, #5
 8009566:	e00a      	b.n	800957e <HAL_GPIO_Init+0x1fa>
 8009568:	2306      	movs	r3, #6
 800956a:	e008      	b.n	800957e <HAL_GPIO_Init+0x1fa>
 800956c:	2304      	movs	r3, #4
 800956e:	e006      	b.n	800957e <HAL_GPIO_Init+0x1fa>
 8009570:	2303      	movs	r3, #3
 8009572:	e004      	b.n	800957e <HAL_GPIO_Init+0x1fa>
 8009574:	2302      	movs	r3, #2
 8009576:	e002      	b.n	800957e <HAL_GPIO_Init+0x1fa>
 8009578:	2301      	movs	r3, #1
 800957a:	e000      	b.n	800957e <HAL_GPIO_Init+0x1fa>
 800957c:	2300      	movs	r3, #0
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	f002 0203 	and.w	r2, r2, #3
 8009584:	0092      	lsls	r2, r2, #2
 8009586:	4093      	lsls	r3, r2
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800958e:	4937      	ldr	r1, [pc, #220]	; (800966c <HAL_GPIO_Init+0x2e8>)
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	3302      	adds	r3, #2
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800959c:	4b39      	ldr	r3, [pc, #228]	; (8009684 <HAL_GPIO_Init+0x300>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	43db      	mvns	r3, r3
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4013      	ands	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80095c0:	4a30      	ldr	r2, [pc, #192]	; (8009684 <HAL_GPIO_Init+0x300>)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80095c6:	4b2f      	ldr	r3, [pc, #188]	; (8009684 <HAL_GPIO_Init+0x300>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	43db      	mvns	r3, r3
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4013      	ands	r3, r2
 80095d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80095ea:	4a26      	ldr	r2, [pc, #152]	; (8009684 <HAL_GPIO_Init+0x300>)
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80095f0:	4b24      	ldr	r3, [pc, #144]	; (8009684 <HAL_GPIO_Init+0x300>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4013      	ands	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009614:	4a1b      	ldr	r2, [pc, #108]	; (8009684 <HAL_GPIO_Init+0x300>)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800961a:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <HAL_GPIO_Init+0x300>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	43db      	mvns	r3, r3
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	4013      	ands	r3, r2
 8009628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4313      	orrs	r3, r2
 800963c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800963e:	4a11      	ldr	r2, [pc, #68]	; (8009684 <HAL_GPIO_Init+0x300>)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	3301      	adds	r3, #1
 8009648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	f47f ae9d 	bne.w	8009394 <HAL_GPIO_Init+0x10>
  }
}
 800965a:	bf00      	nop
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	40021000 	.word	0x40021000
 800966c:	40010000 	.word	0x40010000
 8009670:	48000400 	.word	0x48000400
 8009674:	48000800 	.word	0x48000800
 8009678:	48000c00 	.word	0x48000c00
 800967c:	48001000 	.word	0x48001000
 8009680:	48001400 	.word	0x48001400
 8009684:	40010400 	.word	0x40010400

08009688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	807b      	strh	r3, [r7, #2]
 8009694:	4613      	mov	r3, r2
 8009696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009698:	787b      	ldrb	r3, [r7, #1]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80096a4:	e002      	b.n	80096ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80096a6:	887a      	ldrh	r2, [r7, #2]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e0bb      	b.n	8009846 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	d101      	bne.n	80096de <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e0b3      	b.n	8009846 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d101      	bne.n	80096ee <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e0ab      	b.n	8009846 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096ee:	4b58      	ldr	r3, [pc, #352]	; (8009850 <HAL_OPAMP_Init+0x198>)
 80096f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096f2:	4a57      	ldr	r2, [pc, #348]	; (8009850 <HAL_OPAMP_Init+0x198>)
 80096f4:	f043 0301 	orr.w	r3, r3, #1
 80096f8:	6613      	str	r3, [r2, #96]	; 0x60
 80096fa:	4b55      	ldr	r3, [pc, #340]	; (8009850 <HAL_OPAMP_Init+0x198>)
 80096fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	60bb      	str	r3, [r7, #8]
 8009704:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7fa feca 	bl	80044b4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b40      	cmp	r3, #64	; 0x40
 8009726:	d003      	beq.n	8009730 <HAL_OPAMP_Init+0x78>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b60      	cmp	r3, #96	; 0x60
 800972e:	d133      	bne.n	8009798 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f023 0110 	bic.w	r1, r3, #16
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	430a      	orrs	r2, r1
 8009744:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	4b41      	ldr	r3, [pc, #260]	; (8009854 <HAL_OPAMP_Init+0x19c>)
 800974e:	4013      	ands	r3, r2
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6851      	ldr	r1, [r2, #4]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6892      	ldr	r2, [r2, #8]
 8009758:	4311      	orrs	r1, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6912      	ldr	r2, [r2, #16]
 800975e:	430a      	orrs	r2, r1
 8009760:	6879      	ldr	r1, [r7, #4]
 8009762:	7d09      	ldrb	r1, [r1, #20]
 8009764:	2901      	cmp	r1, #1
 8009766:	d102      	bne.n	800976e <HAL_OPAMP_Init+0xb6>
 8009768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800976c:	e000      	b.n	8009770 <HAL_OPAMP_Init+0xb8>
 800976e:	2100      	movs	r1, #0
 8009770:	4311      	orrs	r1, r2
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009776:	4311      	orrs	r1, r2
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800977c:	4311      	orrs	r1, r2
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009782:	04d2      	lsls	r2, r2, #19
 8009784:	4311      	orrs	r1, r2
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800978a:	0612      	lsls	r2, r2, #24
 800978c:	4311      	orrs	r1, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	430b      	orrs	r3, r1
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	e035      	b.n	8009804 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 0110 	bic.w	r1, r3, #16
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b27      	ldr	r3, [pc, #156]	; (8009854 <HAL_OPAMP_Init+0x19c>)
 80097b6:	4013      	ands	r3, r2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6851      	ldr	r1, [r2, #4]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	6892      	ldr	r2, [r2, #8]
 80097c0:	4311      	orrs	r1, r2
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	68d2      	ldr	r2, [r2, #12]
 80097c6:	4311      	orrs	r1, r2
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6912      	ldr	r2, [r2, #16]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	7d09      	ldrb	r1, [r1, #20]
 80097d2:	2901      	cmp	r1, #1
 80097d4:	d102      	bne.n	80097dc <HAL_OPAMP_Init+0x124>
 80097d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80097da:	e000      	b.n	80097de <HAL_OPAMP_Init+0x126>
 80097dc:	2100      	movs	r1, #0
 80097de:	4311      	orrs	r1, r2
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097e4:	4311      	orrs	r1, r2
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80097ea:	4311      	orrs	r1, r2
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80097f0:	04d2      	lsls	r2, r2, #19
 80097f2:	4311      	orrs	r1, r2
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097f8:	0612      	lsls	r2, r2, #24
 80097fa:	4311      	orrs	r1, r2
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6812      	ldr	r2, [r2, #0]
 8009800:	430b      	orrs	r3, r1
 8009802:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	db10      	blt.n	8009830 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699a      	ldr	r2, [r3, #24]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	430a      	orrs	r2, r1
 800982e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	40021000 	.word	0x40021000
 8009854:	e0003e11 	.word	0xe0003e11

08009858 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d102      	bne.n	8009870 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	73fb      	strb	r3, [r7, #15]
 800986e:	e01d      	b.n	80098ac <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b05      	cmp	r3, #5
 800987a:	d102      	bne.n	8009882 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
 8009880:	e014      	b.n	80098ac <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b01      	cmp	r3, #1
 800988c:	d10c      	bne.n	80098a8 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f042 0201 	orr.w	r2, r2, #1
 800989c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2204      	movs	r2, #4
 80098a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80098a6:	e001      	b.n	80098ac <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d141      	bne.n	800994e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80098ca:	4b4b      	ldr	r3, [pc, #300]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098d6:	d131      	bne.n	800993c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098d8:	4b47      	ldr	r3, [pc, #284]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098de:	4a46      	ldr	r2, [pc, #280]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80098e8:	4b43      	ldr	r3, [pc, #268]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098f0:	4a41      	ldr	r2, [pc, #260]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80098f8:	4b40      	ldr	r3, [pc, #256]	; (80099fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2232      	movs	r2, #50	; 0x32
 80098fe:	fb02 f303 	mul.w	r3, r2, r3
 8009902:	4a3f      	ldr	r2, [pc, #252]	; (8009a00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009904:	fba2 2303 	umull	r2, r3, r2, r3
 8009908:	0c9b      	lsrs	r3, r3, #18
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800990e:	e002      	b.n	8009916 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3b01      	subs	r3, #1
 8009914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009916:	4b38      	ldr	r3, [pc, #224]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800991e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009922:	d102      	bne.n	800992a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f2      	bne.n	8009910 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800992a:	4b33      	ldr	r3, [pc, #204]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009936:	d158      	bne.n	80099ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e057      	b.n	80099ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800993c:	4b2e      	ldr	r3, [pc, #184]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800993e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009942:	4a2d      	ldr	r2, [pc, #180]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800994c:	e04d      	b.n	80099ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009954:	d141      	bne.n	80099da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009956:	4b28      	ldr	r3, [pc, #160]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800995e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009962:	d131      	bne.n	80099c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009964:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800996a:	4a23      	ldr	r2, [pc, #140]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800996c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009970:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009974:	4b20      	ldr	r3, [pc, #128]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800997c:	4a1e      	ldr	r2, [pc, #120]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800997e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009982:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009984:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2232      	movs	r2, #50	; 0x32
 800998a:	fb02 f303 	mul.w	r3, r2, r3
 800998e:	4a1c      	ldr	r2, [pc, #112]	; (8009a00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009990:	fba2 2303 	umull	r2, r3, r2, r3
 8009994:	0c9b      	lsrs	r3, r3, #18
 8009996:	3301      	adds	r3, #1
 8009998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800999a:	e002      	b.n	80099a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3b01      	subs	r3, #1
 80099a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099a2:	4b15      	ldr	r3, [pc, #84]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ae:	d102      	bne.n	80099b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1f2      	bne.n	800999c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099b6:	4b10      	ldr	r3, [pc, #64]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c2:	d112      	bne.n	80099ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e011      	b.n	80099ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099c8:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ce:	4a0a      	ldr	r2, [pc, #40]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80099d8:	e007      	b.n	80099ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099e2:	4a05      	ldr	r2, [pc, #20]	; (80099f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	40007000 	.word	0x40007000
 80099fc:	20000008 	.word	0x20000008
 8009a00:	431bde83 	.word	0x431bde83

08009a04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009a0c:	f7fc f95e 	bl	8005ccc <HAL_GetTick>
 8009a10:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e069      	b.n	8009af0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7fa fe3b 	bl	80046ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009a36:	f241 3188 	movw	r1, #5000	; 0x1388
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa54 	bl	8009ee8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	021a      	lsls	r2, r3, #8
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	2120      	movs	r1, #32
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa7f 	bl	8009f6a <QSPI_WaitFlagStateUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d137      	bne.n	8009ae6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a80:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6852      	ldr	r2, [r2, #4]
 8009a88:	0611      	lsls	r1, r2, #24
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	68d2      	ldr	r2, [r2, #12]
 8009a8e:	4311      	orrs	r1, r2
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	69d2      	ldr	r2, [r2, #28]
 8009a94:	4311      	orrs	r1, r2
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6a12      	ldr	r2, [r2, #32]
 8009a9a:	4311      	orrs	r1, r2
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <HAL_QSPI_Init+0xf4>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	6912      	ldr	r2, [r2, #16]
 8009ab2:	0411      	lsls	r1, r2, #16
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6952      	ldr	r2, [r2, #20]
 8009ab8:	4311      	orrs	r1, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6992      	ldr	r2, [r2, #24]
 8009abe:	4311      	orrs	r1, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6812      	ldr	r2, [r2, #0]
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8009aee:	7afb      	ldrb	r3, [r7, #11]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	ffe0f8fe 	.word	0xffe0f8fe

08009afc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f003 0304 	and.w	r3, r3, #4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d064      	beq.n	8009be8 <HAL_QSPI_IRQHandler+0xec>
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d05f      	beq.n	8009be8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3320      	adds	r3, #32
 8009b2e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b12      	cmp	r3, #18
 8009b3a:	d125      	bne.n	8009b88 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8009b3c:	e01c      	b.n	8009b78 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00f      	beq.n	8009b66 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	781a      	ldrb	r2, [r3, #0]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	1e5a      	subs	r2, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b64:	e008      	b.n	8009b78 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b74:	601a      	str	r2, [r3, #0]
          break;
 8009b76:	e033      	b.n	8009be0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1db      	bne.n	8009b3e <HAL_QSPI_IRQHandler+0x42>
 8009b86:	e02b      	b.n	8009be0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b22      	cmp	r3, #34	; 0x22
 8009b92:	d125      	bne.n	8009be0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8009b94:	e01d      	b.n	8009bd2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d010      	beq.n	8009bc0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	1e5a      	subs	r2, r3, #1
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8009bbe:	e008      	b.n	8009bd2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009bce:	601a      	str	r2, [r3, #0]
          break;
 8009bd0:	e006      	b.n	8009be0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1da      	bne.n	8009b96 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f963 	bl	8009eac <HAL_QSPI_FifoThresholdCallback>
 8009be6:	e13c      	b.n	8009e62 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 80b0 	beq.w	8009d54 <HAL_QSPI_IRQHandler+0x258>
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 80aa 	beq.w	8009d54 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2202      	movs	r2, #2
 8009c06:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8009c16:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b12      	cmp	r3, #18
 8009c22:	d120      	bne.n	8009c66 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d011      	beq.n	8009c56 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f022 0204 	bic.w	r2, r2, #4
 8009c40:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0201 	bic.w	r2, r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7fa fcd8 	bl	8004614 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009c64:	e0fa      	b.n	8009e5c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b22      	cmp	r3, #34	; 0x22
 8009c70:	d143      	bne.n	8009cfa <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d012      	beq.n	8009ca6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0204 	bic.w	r2, r2, #4
 8009c8e:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0201 	bic.w	r2, r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	e021      	b.n	8009cea <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3320      	adds	r3, #32
 8009cac:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8009cae:	e013      	b.n	8009cd8 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d017      	beq.n	8009ce8 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	7812      	ldrb	r2, [r2, #0]
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	1e5a      	subs	r2, r3, #1
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e4      	bne.n	8009cb0 <HAL_QSPI_IRQHandler+0x1b4>
 8009ce6:	e000      	b.n	8009cea <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8009ce8:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7fa fc9e 	bl	8004634 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009cf8:	e0b0      	b.n	8009e5c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d107      	bne.n	8009d16 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f8c2 	bl	8009e98 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009d14:	e0a2      	b.n	8009e5c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	f040 809c 	bne.w	8009e5c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	695a      	ldr	r2, [r3, #20]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009d32:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d103      	bne.n	8009d4c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f89d 	bl	8009e84 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009d4a:	e087      	b.n	8009e5c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f88f 	bl	8009e70 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009d52:	e083      	b.n	8009e5c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f003 0308 	and.w	r3, r3, #8
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01f      	beq.n	8009d9e <HAL_QSPI_IRQHandler+0x2a2>
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01a      	beq.n	8009d9e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8009d8c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f892 	bl	8009ec0 <HAL_QSPI_StatusMatchCallback>
 8009d9c:	e061      	b.n	8009e62 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d047      	beq.n	8009e38 <HAL_QSPI_IRQHandler+0x33c>
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d042      	beq.n	8009e38 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2201      	movs	r2, #1
 8009db8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009dc8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dce:	f043 0202 	orr.w	r2, r3, #2
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d021      	beq.n	8009e28 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0204 	bic.w	r2, r2, #4
 8009df2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df8:	4a1c      	ldr	r2, [pc, #112]	; (8009e6c <HAL_QSPI_IRQHandler+0x370>)
 8009dfa:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff f909 	bl	8009018 <HAL_DMA_Abort_IT>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d029      	beq.n	8009e60 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e10:	f043 0204 	orr.w	r2, r3, #4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f825 	bl	8009e70 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009e26:	e01b      	b.n	8009e60 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f81d 	bl	8009e70 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009e36:	e013      	b.n	8009e60 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f003 0310 	and.w	r3, r3, #16
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00f      	beq.n	8009e62 <HAL_QSPI_IRQHandler+0x366>
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00a      	beq.n	8009e62 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2210      	movs	r2, #16
 8009e52:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f83d 	bl	8009ed4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8009e5a:	e002      	b.n	8009e62 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8009e5c:	bf00      	nop
 8009e5e:	e000      	b.n	8009e62 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8009e60:	bf00      	nop
}
 8009e62:	bf00      	nop
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	08009f05 	.word	0x08009f05

08009e70 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b08      	cmp	r3, #8
 8009f28:	d114      	bne.n	8009f54 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009f40:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f042 0202 	orr.w	r2, r2, #2
 8009f50:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8009f52:	e006      	b.n	8009f62 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff ff87 	bl	8009e70 <HAL_QSPI_ErrorCallback>
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	603b      	str	r3, [r7, #0]
 8009f76:	4613      	mov	r3, r2
 8009f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009f7a:	e01a      	b.n	8009fb2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f82:	d016      	beq.n	8009fb2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f84:	f7fb fea2 	bl	8005ccc <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	f043 0201 	orr.w	r2, r3, #1
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e00e      	b.n	8009fd0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689a      	ldr	r2, [r3, #8]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bf14      	ite	ne
 8009fc0:	2301      	movne	r3, #1
 8009fc2:	2300      	moveq	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d1d6      	bne.n	8009f7c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e306      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d075      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ff6:	4b97      	ldr	r3, [pc, #604]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 030c 	and.w	r3, r3, #12
 8009ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a000:	4b94      	ldr	r3, [pc, #592]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	2b0c      	cmp	r3, #12
 800a00e:	d102      	bne.n	800a016 <HAL_RCC_OscConfig+0x3e>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2b03      	cmp	r3, #3
 800a014:	d002      	beq.n	800a01c <HAL_RCC_OscConfig+0x44>
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d10b      	bne.n	800a034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a01c:	4b8d      	ldr	r3, [pc, #564]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d05b      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x108>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d157      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e2e1      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03c:	d106      	bne.n	800a04c <HAL_RCC_OscConfig+0x74>
 800a03e:	4b85      	ldr	r3, [pc, #532]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a84      	ldr	r2, [pc, #528]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	e01d      	b.n	800a088 <HAL_RCC_OscConfig+0xb0>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a054:	d10c      	bne.n	800a070 <HAL_RCC_OscConfig+0x98>
 800a056:	4b7f      	ldr	r3, [pc, #508]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a7e      	ldr	r2, [pc, #504]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a05c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	4b7c      	ldr	r3, [pc, #496]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a7b      	ldr	r2, [pc, #492]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	e00b      	b.n	800a088 <HAL_RCC_OscConfig+0xb0>
 800a070:	4b78      	ldr	r3, [pc, #480]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a77      	ldr	r2, [pc, #476]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	4b75      	ldr	r3, [pc, #468]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a74      	ldr	r2, [pc, #464]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d013      	beq.n	800a0b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a090:	f7fb fe1c 	bl	8005ccc <HAL_GetTick>
 800a094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a096:	e008      	b.n	800a0aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a098:	f7fb fe18 	bl	8005ccc <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b64      	cmp	r3, #100	; 0x64
 800a0a4:	d901      	bls.n	800a0aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e2a6      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0aa:	4b6a      	ldr	r3, [pc, #424]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0f0      	beq.n	800a098 <HAL_RCC_OscConfig+0xc0>
 800a0b6:	e014      	b.n	800a0e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b8:	f7fb fe08 	bl	8005ccc <HAL_GetTick>
 800a0bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c0:	f7fb fe04 	bl	8005ccc <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b64      	cmp	r3, #100	; 0x64
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e292      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a0d2:	4b60      	ldr	r3, [pc, #384]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1f0      	bne.n	800a0c0 <HAL_RCC_OscConfig+0xe8>
 800a0de:	e000      	b.n	800a0e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d075      	beq.n	800a1da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0ee:	4b59      	ldr	r3, [pc, #356]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f003 030c 	and.w	r3, r3, #12
 800a0f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0f8:	4b56      	ldr	r3, [pc, #344]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f003 0303 	and.w	r3, r3, #3
 800a100:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b0c      	cmp	r3, #12
 800a106:	d102      	bne.n	800a10e <HAL_RCC_OscConfig+0x136>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d002      	beq.n	800a114 <HAL_RCC_OscConfig+0x13c>
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	2b04      	cmp	r3, #4
 800a112:	d11f      	bne.n	800a154 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a114:	4b4f      	ldr	r3, [pc, #316]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d005      	beq.n	800a12c <HAL_RCC_OscConfig+0x154>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e265      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a12c:	4b49      	ldr	r3, [pc, #292]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	061b      	lsls	r3, r3, #24
 800a13a:	4946      	ldr	r1, [pc, #280]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a140:	4b45      	ldr	r3, [pc, #276]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f7fb fd75 	bl	8005c34 <HAL_InitTick>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d043      	beq.n	800a1d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e251      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d023      	beq.n	800a1a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a15c:	4b3d      	ldr	r3, [pc, #244]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a3c      	ldr	r2, [pc, #240]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a168:	f7fb fdb0 	bl	8005ccc <HAL_GetTick>
 800a16c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a16e:	e008      	b.n	800a182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a170:	f7fb fdac 	bl	8005ccc <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d901      	bls.n	800a182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e23a      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a182:	4b34      	ldr	r3, [pc, #208]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0f0      	beq.n	800a170 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a18e:	4b31      	ldr	r3, [pc, #196]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	061b      	lsls	r3, r3, #24
 800a19c:	492d      	ldr	r1, [pc, #180]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	604b      	str	r3, [r1, #4]
 800a1a2:	e01a      	b.n	800a1da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1a4:	4b2b      	ldr	r3, [pc, #172]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a2a      	ldr	r2, [pc, #168]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a1aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b0:	f7fb fd8c 	bl	8005ccc <HAL_GetTick>
 800a1b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a1b6:	e008      	b.n	800a1ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1b8:	f7fb fd88 	bl	8005ccc <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d901      	bls.n	800a1ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e216      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a1ca:	4b22      	ldr	r3, [pc, #136]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1f0      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x1e0>
 800a1d6:	e000      	b.n	800a1da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0308 	and.w	r3, r3, #8
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d041      	beq.n	800a26a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01c      	beq.n	800a228 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1ee:	4b19      	ldr	r3, [pc, #100]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a1f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1f4:	4a17      	ldr	r2, [pc, #92]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1fe:	f7fb fd65 	bl	8005ccc <HAL_GetTick>
 800a202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a204:	e008      	b.n	800a218 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a206:	f7fb fd61 	bl	8005ccc <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d901      	bls.n	800a218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e1ef      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a218:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0ef      	beq.n	800a206 <HAL_RCC_OscConfig+0x22e>
 800a226:	e020      	b.n	800a26a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a228:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a22a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a22e:	4a09      	ldr	r2, [pc, #36]	; (800a254 <HAL_RCC_OscConfig+0x27c>)
 800a230:	f023 0301 	bic.w	r3, r3, #1
 800a234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a238:	f7fb fd48 	bl	8005ccc <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a23e:	e00d      	b.n	800a25c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a240:	f7fb fd44 	bl	8005ccc <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d906      	bls.n	800a25c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e1d2      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
 800a252:	bf00      	nop
 800a254:	40021000 	.word	0x40021000
 800a258:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a25c:	4b8c      	ldr	r3, [pc, #560]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a25e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1ea      	bne.n	800a240 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0304 	and.w	r3, r3, #4
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 80a6 	beq.w	800a3c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a278:	2300      	movs	r3, #0
 800a27a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a27c:	4b84      	ldr	r3, [pc, #528]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a27e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <HAL_RCC_OscConfig+0x2b4>
 800a288:	2301      	movs	r3, #1
 800a28a:	e000      	b.n	800a28e <HAL_RCC_OscConfig+0x2b6>
 800a28c:	2300      	movs	r3, #0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00d      	beq.n	800a2ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a292:	4b7f      	ldr	r3, [pc, #508]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a296:	4a7e      	ldr	r2, [pc, #504]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a29c:	6593      	str	r3, [r2, #88]	; 0x58
 800a29e:	4b7c      	ldr	r3, [pc, #496]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2ae:	4b79      	ldr	r3, [pc, #484]	; (800a494 <HAL_RCC_OscConfig+0x4bc>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d118      	bne.n	800a2ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2ba:	4b76      	ldr	r3, [pc, #472]	; (800a494 <HAL_RCC_OscConfig+0x4bc>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a75      	ldr	r2, [pc, #468]	; (800a494 <HAL_RCC_OscConfig+0x4bc>)
 800a2c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2c6:	f7fb fd01 	bl	8005ccc <HAL_GetTick>
 800a2ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2cc:	e008      	b.n	800a2e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2ce:	f7fb fcfd 	bl	8005ccc <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d901      	bls.n	800a2e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e18b      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2e0:	4b6c      	ldr	r3, [pc, #432]	; (800a494 <HAL_RCC_OscConfig+0x4bc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0f0      	beq.n	800a2ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d108      	bne.n	800a306 <HAL_RCC_OscConfig+0x32e>
 800a2f4:	4b66      	ldr	r3, [pc, #408]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2fa:	4a65      	ldr	r2, [pc, #404]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a2fc:	f043 0301 	orr.w	r3, r3, #1
 800a300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a304:	e024      	b.n	800a350 <HAL_RCC_OscConfig+0x378>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	2b05      	cmp	r3, #5
 800a30c:	d110      	bne.n	800a330 <HAL_RCC_OscConfig+0x358>
 800a30e:	4b60      	ldr	r3, [pc, #384]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a314:	4a5e      	ldr	r2, [pc, #376]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a316:	f043 0304 	orr.w	r3, r3, #4
 800a31a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a31e:	4b5c      	ldr	r3, [pc, #368]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a324:	4a5a      	ldr	r2, [pc, #360]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a32e:	e00f      	b.n	800a350 <HAL_RCC_OscConfig+0x378>
 800a330:	4b57      	ldr	r3, [pc, #348]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a336:	4a56      	ldr	r2, [pc, #344]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a340:	4b53      	ldr	r3, [pc, #332]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a346:	4a52      	ldr	r2, [pc, #328]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a348:	f023 0304 	bic.w	r3, r3, #4
 800a34c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d016      	beq.n	800a386 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a358:	f7fb fcb8 	bl	8005ccc <HAL_GetTick>
 800a35c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a35e:	e00a      	b.n	800a376 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a360:	f7fb fcb4 	bl	8005ccc <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a36e:	4293      	cmp	r3, r2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e140      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a376:	4b46      	ldr	r3, [pc, #280]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0ed      	beq.n	800a360 <HAL_RCC_OscConfig+0x388>
 800a384:	e015      	b.n	800a3b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a386:	f7fb fca1 	bl	8005ccc <HAL_GetTick>
 800a38a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a38c:	e00a      	b.n	800a3a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a38e:	f7fb fc9d 	bl	8005ccc <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d901      	bls.n	800a3a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e129      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a3a4:	4b3a      	ldr	r3, [pc, #232]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1ed      	bne.n	800a38e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3b2:	7ffb      	ldrb	r3, [r7, #31]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d105      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3b8:	4b35      	ldr	r3, [pc, #212]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3bc:	4a34      	ldr	r2, [pc, #208]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a3be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d03c      	beq.n	800a44a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01c      	beq.n	800a412 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3d8:	4b2d      	ldr	r3, [pc, #180]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a3da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3de:	4a2c      	ldr	r2, [pc, #176]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a3e0:	f043 0301 	orr.w	r3, r3, #1
 800a3e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e8:	f7fb fc70 	bl	8005ccc <HAL_GetTick>
 800a3ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3f0:	f7fb fc6c 	bl	8005ccc <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e0fa      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a402:	4b23      	ldr	r3, [pc, #140]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0ef      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x418>
 800a410:	e01b      	b.n	800a44a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a412:	4b1f      	ldr	r3, [pc, #124]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a418:	4a1d      	ldr	r2, [pc, #116]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a41a:	f023 0301 	bic.w	r3, r3, #1
 800a41e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a422:	f7fb fc53 	bl	8005ccc <HAL_GetTick>
 800a426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a428:	e008      	b.n	800a43c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a42a:	f7fb fc4f 	bl	8005ccc <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d901      	bls.n	800a43c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e0dd      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a43c:	4b14      	ldr	r3, [pc, #80]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a43e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1ef      	bne.n	800a42a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80d1 	beq.w	800a5f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a454:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f003 030c 	and.w	r3, r3, #12
 800a45c:	2b0c      	cmp	r3, #12
 800a45e:	f000 808b 	beq.w	800a578 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d15e      	bne.n	800a528 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a08      	ldr	r2, [pc, #32]	; (800a490 <HAL_RCC_OscConfig+0x4b8>)
 800a470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a476:	f7fb fc29 	bl	8005ccc <HAL_GetTick>
 800a47a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a47c:	e00c      	b.n	800a498 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a47e:	f7fb fc25 	bl	8005ccc <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d905      	bls.n	800a498 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e0b3      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
 800a490:	40021000 	.word	0x40021000
 800a494:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a498:	4b59      	ldr	r3, [pc, #356]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1ec      	bne.n	800a47e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4a4:	4b56      	ldr	r3, [pc, #344]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	4b56      	ldr	r3, [pc, #344]	; (800a604 <HAL_RCC_OscConfig+0x62c>)
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6a11      	ldr	r1, [r2, #32]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4b4:	3a01      	subs	r2, #1
 800a4b6:	0112      	lsls	r2, r2, #4
 800a4b8:	4311      	orrs	r1, r2
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a4be:	0212      	lsls	r2, r2, #8
 800a4c0:	4311      	orrs	r1, r2
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a4c6:	0852      	lsrs	r2, r2, #1
 800a4c8:	3a01      	subs	r2, #1
 800a4ca:	0552      	lsls	r2, r2, #21
 800a4cc:	4311      	orrs	r1, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a4d2:	0852      	lsrs	r2, r2, #1
 800a4d4:	3a01      	subs	r2, #1
 800a4d6:	0652      	lsls	r2, r2, #25
 800a4d8:	4311      	orrs	r1, r2
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4de:	06d2      	lsls	r2, r2, #27
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	4947      	ldr	r1, [pc, #284]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4e8:	4b45      	ldr	r3, [pc, #276]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a44      	ldr	r2, [pc, #272]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a4ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a4f4:	4b42      	ldr	r3, [pc, #264]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	4a41      	ldr	r2, [pc, #260]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a4fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a500:	f7fb fbe4 	bl	8005ccc <HAL_GetTick>
 800a504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a508:	f7fb fbe0 	bl	8005ccc <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e06e      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a51a:	4b39      	ldr	r3, [pc, #228]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f0      	beq.n	800a508 <HAL_RCC_OscConfig+0x530>
 800a526:	e066      	b.n	800a5f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a528:	4b35      	ldr	r3, [pc, #212]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a34      	ldr	r2, [pc, #208]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a52e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a532:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a534:	4b32      	ldr	r3, [pc, #200]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	4a31      	ldr	r2, [pc, #196]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a53a:	f023 0303 	bic.w	r3, r3, #3
 800a53e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a540:	4b2f      	ldr	r3, [pc, #188]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	4a2e      	ldr	r2, [pc, #184]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a546:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a54a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a54e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a550:	f7fb fbbc 	bl	8005ccc <HAL_GetTick>
 800a554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a556:	e008      	b.n	800a56a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a558:	f7fb fbb8 	bl	8005ccc <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d901      	bls.n	800a56a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e046      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a56a:	4b25      	ldr	r3, [pc, #148]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1f0      	bne.n	800a558 <HAL_RCC_OscConfig+0x580>
 800a576:	e03e      	b.n	800a5f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d101      	bne.n	800a584 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a580:	2301      	movs	r3, #1
 800a582:	e039      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a584:	4b1e      	ldr	r3, [pc, #120]	; (800a600 <HAL_RCC_OscConfig+0x628>)
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f003 0203 	and.w	r2, r3, #3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	429a      	cmp	r2, r3
 800a596:	d12c      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d123      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d11b      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d113      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d4:	085b      	lsrs	r3, r3, #1
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d109      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e8:	085b      	lsrs	r3, r3, #1
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d001      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3720      	adds	r7, #32
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	40021000 	.word	0x40021000
 800a604:	019f800c 	.word	0x019f800c

0800a608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e11e      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a620:	4b91      	ldr	r3, [pc, #580]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d910      	bls.n	800a650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a62e:	4b8e      	ldr	r3, [pc, #568]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f023 020f 	bic.w	r2, r3, #15
 800a636:	498c      	ldr	r1, [pc, #560]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a63e:	4b8a      	ldr	r3, [pc, #552]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d001      	beq.n	800a650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e106      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d073      	beq.n	800a744 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d129      	bne.n	800a6b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a664:	4b81      	ldr	r3, [pc, #516]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0f4      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a674:	f000 f972 	bl	800a95c <RCC_GetSysClockFreqFromPLLSource>
 800a678:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4a7c      	ldr	r2, [pc, #496]	; (800a870 <HAL_RCC_ClockConfig+0x268>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d93f      	bls.n	800a702 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a682:	4b7a      	ldr	r3, [pc, #488]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d009      	beq.n	800a6a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a696:	2b00      	cmp	r3, #0
 800a698:	d033      	beq.n	800a702 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d12f      	bne.n	800a702 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a6a2:	4b72      	ldr	r3, [pc, #456]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6aa:	4a70      	ldr	r2, [pc, #448]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a6b2:	2380      	movs	r3, #128	; 0x80
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e024      	b.n	800a702 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6c0:	4b6a      	ldr	r3, [pc, #424]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d109      	bne.n	800a6e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0c6      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a6d0:	4b66      	ldr	r3, [pc, #408]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e0be      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a6e0:	f000 f8ce 	bl	800a880 <HAL_RCC_GetSysClockFreq>
 800a6e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	4a61      	ldr	r2, [pc, #388]	; (800a870 <HAL_RCC_ClockConfig+0x268>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d909      	bls.n	800a702 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a6ee:	4b5f      	ldr	r3, [pc, #380]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6f6:	4a5d      	ldr	r2, [pc, #372]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a6fe:	2380      	movs	r3, #128	; 0x80
 800a700:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a702:	4b5a      	ldr	r3, [pc, #360]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f023 0203 	bic.w	r2, r3, #3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	4957      	ldr	r1, [pc, #348]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a710:	4313      	orrs	r3, r2
 800a712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a714:	f7fb fada 	bl	8005ccc <HAL_GetTick>
 800a718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a71a:	e00a      	b.n	800a732 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a71c:	f7fb fad6 	bl	8005ccc <HAL_GetTick>
 800a720:	4602      	mov	r2, r0
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d901      	bls.n	800a732 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e095      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a732:	4b4e      	ldr	r3, [pc, #312]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f003 020c 	and.w	r2, r3, #12
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	429a      	cmp	r2, r3
 800a742:	d1eb      	bne.n	800a71c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0302 	and.w	r3, r3, #2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d023      	beq.n	800a798 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a75c:	4b43      	ldr	r3, [pc, #268]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4a42      	ldr	r2, [pc, #264]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a766:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0308 	and.w	r3, r3, #8
 800a770:	2b00      	cmp	r3, #0
 800a772:	d007      	beq.n	800a784 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a774:	4b3d      	ldr	r3, [pc, #244]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a77c:	4a3b      	ldr	r2, [pc, #236]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a77e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a784:	4b39      	ldr	r3, [pc, #228]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	4936      	ldr	r1, [pc, #216]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a792:	4313      	orrs	r3, r2
 800a794:	608b      	str	r3, [r1, #8]
 800a796:	e008      	b.n	800a7aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2b80      	cmp	r3, #128	; 0x80
 800a79c:	d105      	bne.n	800a7aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a79e:	4b33      	ldr	r3, [pc, #204]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	4a32      	ldr	r2, [pc, #200]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a7a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a7aa:	4b2f      	ldr	r3, [pc, #188]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d21d      	bcs.n	800a7f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7b8:	4b2b      	ldr	r3, [pc, #172]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f023 020f 	bic.w	r2, r3, #15
 800a7c0:	4929      	ldr	r1, [pc, #164]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a7c8:	f7fb fa80 	bl	8005ccc <HAL_GetTick>
 800a7cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7ce:	e00a      	b.n	800a7e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7d0:	f7fb fa7c 	bl	8005ccc <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d901      	bls.n	800a7e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e03b      	b.n	800a85e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7e6:	4b20      	ldr	r3, [pc, #128]	; (800a868 <HAL_RCC_ClockConfig+0x260>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d1ed      	bne.n	800a7d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d008      	beq.n	800a812 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a800:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	4917      	ldr	r1, [pc, #92]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a80e:	4313      	orrs	r3, r2
 800a810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0308 	and.w	r3, r3, #8
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d009      	beq.n	800a832 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a81e:	4b13      	ldr	r3, [pc, #76]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	490f      	ldr	r1, [pc, #60]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a832:	f000 f825 	bl	800a880 <HAL_RCC_GetSysClockFreq>
 800a836:	4602      	mov	r2, r0
 800a838:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <HAL_RCC_ClockConfig+0x264>)
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	091b      	lsrs	r3, r3, #4
 800a83e:	f003 030f 	and.w	r3, r3, #15
 800a842:	490c      	ldr	r1, [pc, #48]	; (800a874 <HAL_RCC_ClockConfig+0x26c>)
 800a844:	5ccb      	ldrb	r3, [r1, r3]
 800a846:	f003 031f 	and.w	r3, r3, #31
 800a84a:	fa22 f303 	lsr.w	r3, r2, r3
 800a84e:	4a0a      	ldr	r2, [pc, #40]	; (800a878 <HAL_RCC_ClockConfig+0x270>)
 800a850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a852:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <HAL_RCC_ClockConfig+0x274>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4618      	mov	r0, r3
 800a858:	f7fb f9ec 	bl	8005c34 <HAL_InitTick>
 800a85c:	4603      	mov	r3, r0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	40022000 	.word	0x40022000
 800a86c:	40021000 	.word	0x40021000
 800a870:	04c4b400 	.word	0x04c4b400
 800a874:	08022420 	.word	0x08022420
 800a878:	20000008 	.word	0x20000008
 800a87c:	2000000c 	.word	0x2000000c

0800a880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a886:	4b2c      	ldr	r3, [pc, #176]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f003 030c 	and.w	r3, r3, #12
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d102      	bne.n	800a898 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a892:	4b2a      	ldr	r3, [pc, #168]	; (800a93c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	e047      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a898:	4b27      	ldr	r3, [pc, #156]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 030c 	and.w	r3, r3, #12
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d102      	bne.n	800a8aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a8a4:	4b26      	ldr	r3, [pc, #152]	; (800a940 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a8a6:	613b      	str	r3, [r7, #16]
 800a8a8:	e03e      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a8aa:	4b23      	ldr	r3, [pc, #140]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f003 030c 	and.w	r3, r3, #12
 800a8b2:	2b0c      	cmp	r3, #12
 800a8b4:	d136      	bne.n	800a924 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a8b6:	4b20      	ldr	r3, [pc, #128]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f003 0303 	and.w	r3, r3, #3
 800a8be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a8c0:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	091b      	lsrs	r3, r3, #4
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d10c      	bne.n	800a8ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a8d4:	4a1a      	ldr	r2, [pc, #104]	; (800a940 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8dc:	4a16      	ldr	r2, [pc, #88]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8de:	68d2      	ldr	r2, [r2, #12]
 800a8e0:	0a12      	lsrs	r2, r2, #8
 800a8e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a8e6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ea:	617b      	str	r3, [r7, #20]
      break;
 800a8ec:	e00c      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a8ee:	4a13      	ldr	r2, [pc, #76]	; (800a93c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f6:	4a10      	ldr	r2, [pc, #64]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a8f8:	68d2      	ldr	r2, [r2, #12]
 800a8fa:	0a12      	lsrs	r2, r2, #8
 800a8fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a900:	fb02 f303 	mul.w	r3, r2, r3
 800a904:	617b      	str	r3, [r7, #20]
      break;
 800a906:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a908:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	0e5b      	lsrs	r3, r3, #25
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	3301      	adds	r3, #1
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a920:	613b      	str	r3, [r7, #16]
 800a922:	e001      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a928:	693b      	ldr	r3, [r7, #16]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	40021000 	.word	0x40021000
 800a93c:	00f42400 	.word	0x00f42400
 800a940:	016e3600 	.word	0x016e3600

0800a944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a948:	4b03      	ldr	r3, [pc, #12]	; (800a958 <HAL_RCC_GetHCLKFreq+0x14>)
 800a94a:	681b      	ldr	r3, [r3, #0]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20000008 	.word	0x20000008

0800a95c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a962:	4b1e      	ldr	r3, [pc, #120]	; (800a9dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a96c:	4b1b      	ldr	r3, [pc, #108]	; (800a9dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	091b      	lsrs	r3, r3, #4
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d10c      	bne.n	800a99a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a980:	4a17      	ldr	r2, [pc, #92]	; (800a9e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	fbb2 f3f3 	udiv	r3, r2, r3
 800a988:	4a14      	ldr	r2, [pc, #80]	; (800a9dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a98a:	68d2      	ldr	r2, [r2, #12]
 800a98c:	0a12      	lsrs	r2, r2, #8
 800a98e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a992:	fb02 f303 	mul.w	r3, r2, r3
 800a996:	617b      	str	r3, [r7, #20]
    break;
 800a998:	e00c      	b.n	800a9b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a99a:	4a12      	ldr	r2, [pc, #72]	; (800a9e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a2:	4a0e      	ldr	r2, [pc, #56]	; (800a9dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a9a4:	68d2      	ldr	r2, [r2, #12]
 800a9a6:	0a12      	lsrs	r2, r2, #8
 800a9a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9ac:	fb02 f303 	mul.w	r3, r2, r3
 800a9b0:	617b      	str	r3, [r7, #20]
    break;
 800a9b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a9b4:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	0e5b      	lsrs	r3, r3, #25
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	3301      	adds	r3, #1
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a9ce:	687b      	ldr	r3, [r7, #4]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	40021000 	.word	0x40021000
 800a9e0:	016e3600 	.word	0x016e3600
 800a9e4:	00f42400 	.word	0x00f42400

0800a9e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 8098 	beq.w	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa06:	2300      	movs	r3, #0
 800aa08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa0a:	4b43      	ldr	r3, [pc, #268]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10d      	bne.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa16:	4b40      	ldr	r3, [pc, #256]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	4a3f      	ldr	r2, [pc, #252]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa20:	6593      	str	r3, [r2, #88]	; 0x58
 800aa22:	4b3d      	ldr	r3, [pc, #244]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa2a:	60bb      	str	r3, [r7, #8]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa32:	4b3a      	ldr	r3, [pc, #232]	; (800ab1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a39      	ldr	r2, [pc, #228]	; (800ab1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa3e:	f7fb f945 	bl	8005ccc <HAL_GetTick>
 800aa42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa44:	e009      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa46:	f7fb f941 	bl	8005ccc <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d902      	bls.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	74fb      	strb	r3, [r7, #19]
        break;
 800aa58:	e005      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa5a:	4b30      	ldr	r3, [pc, #192]	; (800ab1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0ef      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800aa66:	7cfb      	ldrb	r3, [r7, #19]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d159      	bne.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aa6c:	4b2a      	ldr	r3, [pc, #168]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d01e      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d019      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa88:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa94:	4b20      	ldr	r3, [pc, #128]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9a:	4a1f      	ldr	r2, [pc, #124]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aaa4:	4b1c      	ldr	r3, [pc, #112]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaaa:	4a1b      	ldr	r2, [pc, #108]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aaac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aab4:	4a18      	ldr	r2, [pc, #96]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aac6:	f7fb f901 	bl	8005ccc <HAL_GetTick>
 800aaca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aacc:	e00b      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aace:	f7fb f8fd 	bl	8005ccc <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aadc:	4293      	cmp	r3, r2
 800aade:	d902      	bls.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	74fb      	strb	r3, [r7, #19]
            break;
 800aae4:	e006      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aae6:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0ec      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800aaf4:	7cfb      	ldrb	r3, [r7, #19]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10b      	bne.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aafa:	4b07      	ldr	r3, [pc, #28]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab08:	4903      	ldr	r1, [pc, #12]	; (800ab18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ab10:	e008      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab12:	7cfb      	ldrb	r3, [r7, #19]
 800ab14:	74bb      	strb	r3, [r7, #18]
 800ab16:	e005      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ab18:	40021000 	.word	0x40021000
 800ab1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab20:	7cfb      	ldrb	r3, [r7, #19]
 800ab22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab24:	7c7b      	ldrb	r3, [r7, #17]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d105      	bne.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab2a:	4ba7      	ldr	r3, [pc, #668]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab2e:	4aa6      	ldr	r2, [pc, #664]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab42:	4ba1      	ldr	r3, [pc, #644]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab48:	f023 0203 	bic.w	r2, r3, #3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	499d      	ldr	r1, [pc, #628]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00a      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab64:	4b98      	ldr	r3, [pc, #608]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6a:	f023 020c 	bic.w	r2, r3, #12
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	4995      	ldr	r1, [pc, #596]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0304 	and.w	r3, r3, #4
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab86:	4b90      	ldr	r3, [pc, #576]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	498c      	ldr	r1, [pc, #560]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aba8:	4b87      	ldr	r3, [pc, #540]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	4984      	ldr	r1, [pc, #528]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800abca:	4b7f      	ldr	r3, [pc, #508]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	497b      	ldr	r1, [pc, #492]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 0320 	and.w	r3, r3, #32
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00a      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800abec:	4b76      	ldr	r3, [pc, #472]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	4973      	ldr	r1, [pc, #460]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac0e:	4b6e      	ldr	r3, [pc, #440]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	496a      	ldr	r1, [pc, #424]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac30:	4b65      	ldr	r3, [pc, #404]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	4962      	ldr	r1, [pc, #392]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac52:	4b5d      	ldr	r3, [pc, #372]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	4959      	ldr	r1, [pc, #356]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac74:	4b54      	ldr	r3, [pc, #336]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac7a:	f023 0203 	bic.w	r2, r3, #3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	4951      	ldr	r1, [pc, #324]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac96:	4b4c      	ldr	r3, [pc, #304]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	4948      	ldr	r1, [pc, #288]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d015      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800acb8:	4b43      	ldr	r3, [pc, #268]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	4940      	ldr	r1, [pc, #256]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acd6:	d105      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acd8:	4b3b      	ldr	r3, [pc, #236]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	4a3a      	ldr	r2, [pc, #232]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acec:	2b00      	cmp	r3, #0
 800acee:	d015      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800acf0:	4b35      	ldr	r3, [pc, #212]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfe:	4932      	ldr	r1, [pc, #200]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad00:	4313      	orrs	r3, r2
 800ad02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad0e:	d105      	bne.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad10:	4b2d      	ldr	r3, [pc, #180]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	4a2c      	ldr	r2, [pc, #176]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d015      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad28:	4b27      	ldr	r3, [pc, #156]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	4924      	ldr	r1, [pc, #144]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad46:	d105      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad48:	4b1f      	ldr	r3, [pc, #124]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d015      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad60:	4b19      	ldr	r3, [pc, #100]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	4916      	ldr	r1, [pc, #88]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad7e:	d105      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad80:	4b11      	ldr	r3, [pc, #68]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	4a10      	ldr	r2, [pc, #64]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d019      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad98:	4b0b      	ldr	r3, [pc, #44]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	4908      	ldr	r1, [pc, #32]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adb6:	d109      	bne.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800adb8:	4b03      	ldr	r3, [pc, #12]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	4a02      	ldr	r2, [pc, #8]	; (800adc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800adbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adc2:	60d3      	str	r3, [r2, #12]
 800adc4:	e002      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800adc6:	bf00      	nop
 800adc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d015      	beq.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade6:	4926      	ldr	r1, [pc, #152]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ade8:	4313      	orrs	r3, r2
 800adea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf6:	d105      	bne.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800adf8:	4b21      	ldr	r3, [pc, #132]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	4a20      	ldr	r2, [pc, #128]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800adfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d015      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ae10:	4b1b      	ldr	r3, [pc, #108]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae16:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1e:	4918      	ldr	r1, [pc, #96]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae20:	4313      	orrs	r3, r2
 800ae22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae2e:	d105      	bne.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	4a12      	ldr	r2, [pc, #72]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d015      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae48:	4b0d      	ldr	r3, [pc, #52]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae56:	490a      	ldr	r1, [pc, #40]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae66:	d105      	bne.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae68:	4b05      	ldr	r3, [pc, #20]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	4a04      	ldr	r2, [pc, #16]	; (800ae80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ae6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ae74:	7cbb      	ldrb	r3, [r7, #18]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	40021000 	.word	0x40021000

0800ae84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e09d      	b.n	800afd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d108      	bne.n	800aeb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aea6:	d009      	beq.n	800aebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	61da      	str	r2, [r3, #28]
 800aeae:	e005      	b.n	800aebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7fa fb42 	bl	8005560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aefc:	d902      	bls.n	800af04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	e002      	b.n	800af0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800af12:	d007      	beq.n	800af24 <HAL_SPI_Init+0xa0>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800af1c:	d002      	beq.n	800af24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800af34:	431a      	orrs	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	f003 0302 	and.w	r3, r3, #2
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af52:	431a      	orrs	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af5c:	431a      	orrs	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af66:	ea42 0103 	orr.w	r1, r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	0c1b      	lsrs	r3, r3, #16
 800af80:	f003 0204 	and.w	r2, r3, #4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	f003 0310 	and.w	r3, r3, #16
 800af8c:	431a      	orrs	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af92:	f003 0308 	and.w	r3, r3, #8
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800afa0:	ea42 0103 	orr.w	r1, r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	430a      	orrs	r2, r1
 800afb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b08a      	sub	sp, #40	; 0x28
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800afe8:	2301      	movs	r3, #1
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <HAL_SPI_TransmitReceive+0x26>
 800affc:	2302      	movs	r3, #2
 800affe:	e1fb      	b.n	800b3f8 <HAL_SPI_TransmitReceive+0x41e>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b008:	f7fa fe60 	bl	8005ccc <HAL_GetTick>
 800b00c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b014:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b01c:	887b      	ldrh	r3, [r7, #2]
 800b01e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b020:	887b      	ldrh	r3, [r7, #2]
 800b022:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b024:	7efb      	ldrb	r3, [r7, #27]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d00e      	beq.n	800b048 <HAL_SPI_TransmitReceive+0x6e>
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b030:	d106      	bne.n	800b040 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <HAL_SPI_TransmitReceive+0x66>
 800b03a:	7efb      	ldrb	r3, [r7, #27]
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d003      	beq.n	800b048 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b040:	2302      	movs	r3, #2
 800b042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b046:	e1cd      	b.n	800b3e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <HAL_SPI_TransmitReceive+0x80>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <HAL_SPI_TransmitReceive+0x80>
 800b054:	887b      	ldrh	r3, [r7, #2]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d103      	bne.n	800b062 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b060:	e1c0      	b.n	800b3e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d003      	beq.n	800b076 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2205      	movs	r2, #5
 800b072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	887a      	ldrh	r2, [r7, #2]
 800b086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	887a      	ldrh	r2, [r7, #2]
 800b08e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	887a      	ldrh	r2, [r7, #2]
 800b09c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	887a      	ldrh	r2, [r7, #2]
 800b0a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b0b8:	d802      	bhi.n	800b0c0 <HAL_SPI_TransmitReceive+0xe6>
 800b0ba:	8a3b      	ldrh	r3, [r7, #16]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d908      	bls.n	800b0d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b0ce:	605a      	str	r2, [r3, #4]
 800b0d0:	e007      	b.n	800b0e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b0e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ec:	2b40      	cmp	r3, #64	; 0x40
 800b0ee:	d007      	beq.n	800b100 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b108:	d97c      	bls.n	800b204 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <HAL_SPI_TransmitReceive+0x13e>
 800b112:	8a7b      	ldrh	r3, [r7, #18]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d169      	bne.n	800b1ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11c:	881a      	ldrh	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b128:	1c9a      	adds	r2, r3, #2
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b132:	b29b      	uxth	r3, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b13c:	e056      	b.n	800b1ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d11b      	bne.n	800b184 <HAL_SPI_TransmitReceive+0x1aa>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d016      	beq.n	800b184 <HAL_SPI_TransmitReceive+0x1aa>
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d113      	bne.n	800b184 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	881a      	ldrh	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	1c9a      	adds	r2, r3, #2
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b176:	b29b      	uxth	r3, r3
 800b178:	3b01      	subs	r3, #1
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b180:	2300      	movs	r3, #0
 800b182:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d11c      	bne.n	800b1cc <HAL_SPI_TransmitReceive+0x1f2>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b198:	b29b      	uxth	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d016      	beq.n	800b1cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	b292      	uxth	r2, r2
 800b1aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b0:	1c9a      	adds	r2, r3, #2
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b1cc:	f7fa fd7e 	bl	8005ccc <HAL_GetTick>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d807      	bhi.n	800b1ec <HAL_SPI_TransmitReceive+0x212>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d003      	beq.n	800b1ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b1ea:	e0fb      	b.n	800b3e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1a3      	bne.n	800b13e <HAL_SPI_TransmitReceive+0x164>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d19d      	bne.n	800b13e <HAL_SPI_TransmitReceive+0x164>
 800b202:	e0df      	b.n	800b3c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <HAL_SPI_TransmitReceive+0x23a>
 800b20c:	8a7b      	ldrh	r3, [r7, #18]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	f040 80cb 	bne.w	800b3aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b218:	b29b      	uxth	r3, r3
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d912      	bls.n	800b244 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b222:	881a      	ldrh	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22e:	1c9a      	adds	r2, r3, #2
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b238:	b29b      	uxth	r3, r3
 800b23a:	3b02      	subs	r3, #2
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b242:	e0b2      	b.n	800b3aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	330c      	adds	r3, #12
 800b24e:	7812      	ldrb	r2, [r2, #0]
 800b250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b260:	b29b      	uxth	r3, r3
 800b262:	3b01      	subs	r3, #1
 800b264:	b29a      	uxth	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b26a:	e09e      	b.n	800b3aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b02      	cmp	r3, #2
 800b278:	d134      	bne.n	800b2e4 <HAL_SPI_TransmitReceive+0x30a>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b27e:	b29b      	uxth	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d02f      	beq.n	800b2e4 <HAL_SPI_TransmitReceive+0x30a>
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	2b01      	cmp	r3, #1
 800b288:	d12c      	bne.n	800b2e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b28e:	b29b      	uxth	r3, r3
 800b290:	2b01      	cmp	r3, #1
 800b292:	d912      	bls.n	800b2ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b298:	881a      	ldrh	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a4:	1c9a      	adds	r2, r3, #2
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	3b02      	subs	r3, #2
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b2b8:	e012      	b.n	800b2e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	7812      	ldrb	r2, [r2, #0]
 800b2c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d148      	bne.n	800b384 <HAL_SPI_TransmitReceive+0x3aa>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d042      	beq.n	800b384 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b304:	b29b      	uxth	r3, r3
 800b306:	2b01      	cmp	r3, #1
 800b308:	d923      	bls.n	800b352 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b314:	b292      	uxth	r2, r2
 800b316:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31c:	1c9a      	adds	r2, r3, #2
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b02      	subs	r3, #2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d81f      	bhi.n	800b380 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b34e:	605a      	str	r2, [r3, #4]
 800b350:	e016      	b.n	800b380 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f103 020c 	add.w	r2, r3, #12
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35e:	7812      	ldrb	r2, [r2, #0]
 800b360:	b2d2      	uxtb	r2, r2
 800b362:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b374:	b29b      	uxth	r3, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	b29a      	uxth	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b380:	2301      	movs	r3, #1
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b384:	f7fa fca2 	bl	8005ccc <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b390:	429a      	cmp	r2, r3
 800b392:	d803      	bhi.n	800b39c <HAL_SPI_TransmitReceive+0x3c2>
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d102      	bne.n	800b3a2 <HAL_SPI_TransmitReceive+0x3c8>
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d103      	bne.n	800b3aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b3a8:	e01c      	b.n	800b3e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f47f af5b 	bne.w	800b26c <HAL_SPI_TransmitReceive+0x292>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f47f af54 	bne.w	800b26c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3c4:	69fa      	ldr	r2, [r7, #28]
 800b3c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f000 f937 	bl	800b63c <SPI_EndRxTxTransaction>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d006      	beq.n	800b3e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	661a      	str	r2, [r3, #96]	; 0x60
 800b3e0:	e000      	b.n	800b3e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b3e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b3f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3728      	adds	r7, #40	; 0x28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	4613      	mov	r3, r2
 800b40e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b410:	f7fa fc5c 	bl	8005ccc <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b418:	1a9b      	subs	r3, r3, r2
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4413      	add	r3, r2
 800b41e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b420:	f7fa fc54 	bl	8005ccc <HAL_GetTick>
 800b424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b426:	4b39      	ldr	r3, [pc, #228]	; (800b50c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	015b      	lsls	r3, r3, #5
 800b42c:	0d1b      	lsrs	r3, r3, #20
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b436:	e054      	b.n	800b4e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d050      	beq.n	800b4e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b440:	f7fa fc44 	bl	8005ccc <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	69fa      	ldr	r2, [r7, #28]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d902      	bls.n	800b456 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d13d      	bne.n	800b4d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b46e:	d111      	bne.n	800b494 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b478:	d004      	beq.n	800b484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b482:	d107      	bne.n	800b494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b49c:	d10f      	bne.n	800b4be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e017      	b.n	800b502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	bf0c      	ite	eq
 800b4f2:	2301      	moveq	r3, #1
 800b4f4:	2300      	movne	r3, #0
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d19b      	bne.n	800b438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20000008 	.word	0x20000008

0800b510 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	; 0x28
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b522:	f7fa fbd3 	bl	8005ccc <HAL_GetTick>
 800b526:	4602      	mov	r2, r0
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	4413      	add	r3, r2
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b532:	f7fa fbcb 	bl	8005ccc <HAL_GetTick>
 800b536:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	330c      	adds	r3, #12
 800b53e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b540:	4b3d      	ldr	r3, [pc, #244]	; (800b638 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	00da      	lsls	r2, r3, #3
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	0d1b      	lsrs	r3, r3, #20
 800b550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b552:	fb02 f303 	mul.w	r3, r2, r3
 800b556:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b558:	e060      	b.n	800b61c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b560:	d107      	bne.n	800b572 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d104      	bne.n	800b572 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b570:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b578:	d050      	beq.n	800b61c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b57a:	f7fa fba7 	bl	8005ccc <HAL_GetTick>
 800b57e:	4602      	mov	r2, r0
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b586:	429a      	cmp	r2, r3
 800b588:	d902      	bls.n	800b590 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d13d      	bne.n	800b60c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b59e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5a8:	d111      	bne.n	800b5ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b2:	d004      	beq.n	800b5be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5bc:	d107      	bne.n	800b5ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d6:	d10f      	bne.n	800b5f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e010      	b.n	800b62e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	3b01      	subs	r3, #1
 800b61a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689a      	ldr	r2, [r3, #8]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	4013      	ands	r3, r2
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d196      	bne.n	800b55a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20000008 	.word	0x20000008

0800b63c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af02      	add	r7, sp, #8
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2200      	movs	r2, #0
 800b650:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff ff5b 	bl	800b510 <SPI_WaitFifoStateUntilTimeout>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d007      	beq.n	800b670 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b664:	f043 0220 	orr.w	r2, r3, #32
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e027      	b.n	800b6c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2200      	movs	r2, #0
 800b678:	2180      	movs	r1, #128	; 0x80
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f7ff fec0 	bl	800b400 <SPI_WaitFlagStateUntilTimeout>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d007      	beq.n	800b696 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b68a:	f043 0220 	orr.w	r2, r3, #32
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e014      	b.n	800b6c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7ff ff34 	bl	800b510 <SPI_WaitFifoStateUntilTimeout>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d007      	beq.n	800b6be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6b2:	f043 0220 	orr.w	r2, r3, #32
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e000      	b.n	800b6c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e038      	b.n	800b750 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7f6 f8e0 	bl	80018b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3308      	adds	r3, #8
 800b700:	4619      	mov	r1, r3
 800b702:	4610      	mov	r0, r2
 800b704:	f001 fb3c 	bl	800cd80 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	461a      	mov	r2, r3
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	f001 fc02 	bl	800cf1c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6858      	ldr	r0, [r3, #4]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	6879      	ldr	r1, [r7, #4]
 800b726:	f001 fc4b 	bl	800cfc0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	6892      	ldr	r2, [r2, #8]
 800b732:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	6892      	ldr	r2, [r2, #8]
 800b73e:	f041 0101 	orr.w	r1, r1, #1
 800b742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e049      	b.n	800b7fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7fa f9ca 	bl	8005b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3304      	adds	r3, #4
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f000 fd82 	bl	800c2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d001      	beq.n	800b820 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e04c      	b.n	800b8ba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a26      	ldr	r2, [pc, #152]	; (800b8c8 <HAL_TIM_Base_Start+0xc0>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d022      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b83a:	d01d      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a22      	ldr	r2, [pc, #136]	; (800b8cc <HAL_TIM_Base_Start+0xc4>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d018      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a21      	ldr	r2, [pc, #132]	; (800b8d0 <HAL_TIM_Base_Start+0xc8>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d013      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a1f      	ldr	r2, [pc, #124]	; (800b8d4 <HAL_TIM_Base_Start+0xcc>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00e      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a1e      	ldr	r2, [pc, #120]	; (800b8d8 <HAL_TIM_Base_Start+0xd0>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d009      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a1c      	ldr	r2, [pc, #112]	; (800b8dc <HAL_TIM_Base_Start+0xd4>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d004      	beq.n	800b878 <HAL_TIM_Base_Start+0x70>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a1b      	ldr	r2, [pc, #108]	; (800b8e0 <HAL_TIM_Base_Start+0xd8>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d115      	bne.n	800b8a4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	4b19      	ldr	r3, [pc, #100]	; (800b8e4 <HAL_TIM_Base_Start+0xdc>)
 800b880:	4013      	ands	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b06      	cmp	r3, #6
 800b888:	d015      	beq.n	800b8b6 <HAL_TIM_Base_Start+0xae>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b890:	d011      	beq.n	800b8b6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f042 0201 	orr.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a2:	e008      	b.n	800b8b6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0201 	orr.w	r2, r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	e000      	b.n	800b8b8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40012c00 	.word	0x40012c00
 800b8cc:	40000400 	.word	0x40000400
 800b8d0:	40000800 	.word	0x40000800
 800b8d4:	40000c00 	.word	0x40000c00
 800b8d8:	40013400 	.word	0x40013400
 800b8dc:	40014000 	.word	0x40014000
 800b8e0:	40015000 	.word	0x40015000
 800b8e4:	00010007 	.word	0x00010007

0800b8e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6a1a      	ldr	r2, [r3, #32]
 800b8f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10f      	bne.n	800b920 <HAL_TIM_Base_Stop+0x38>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6a1a      	ldr	r2, [r3, #32]
 800b906:	f244 4344 	movw	r3, #17476	; 0x4444
 800b90a:	4013      	ands	r3, r2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d107      	bne.n	800b920 <HAL_TIM_Base_Stop+0x38>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 0201 	bic.w	r2, r2, #1
 800b91e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	e049      	b.n	800b9dc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f841 	bl	800b9e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2202      	movs	r2, #2
 800b966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3304      	adds	r3, #4
 800b972:	4619      	mov	r1, r3
 800b974:	4610      	mov	r0, r2
 800b976:	f000 fc93 	bl	800c2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ba10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba20:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d108      	bne.n	800ba3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d105      	bne.n	800ba3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba2e:	7b7b      	ldrb	r3, [r7, #13]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d102      	bne.n	800ba3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba34:	7b3b      	ldrb	r3, [r7, #12]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d001      	beq.n	800ba3e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e059      	b.n	800baf2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2202      	movs	r2, #2
 800ba42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2202      	movs	r2, #2
 800ba4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2202      	movs	r2, #2
 800ba52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f042 0202 	orr.w	r2, r2, #2
 800ba6c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68da      	ldr	r2, [r3, #12]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f042 0204 	orr.w	r2, r2, #4
 800ba7c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2201      	movs	r2, #1
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 f878 	bl	800cb7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2201      	movs	r2, #1
 800ba92:	2104      	movs	r1, #4
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 f871 	bl	800cb7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a17      	ldr	r2, [pc, #92]	; (800bafc <HAL_TIM_OnePulse_Start_IT+0x104>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d018      	beq.n	800bad6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a15      	ldr	r2, [pc, #84]	; (800bb00 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d013      	beq.n	800bad6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a14      	ldr	r2, [pc, #80]	; (800bb04 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00e      	beq.n	800bad6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a12      	ldr	r2, [pc, #72]	; (800bb08 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d009      	beq.n	800bad6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d004      	beq.n	800bad6 <HAL_TIM_OnePulse_Start_IT+0xde>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a0f      	ldr	r2, [pc, #60]	; (800bb10 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d101      	bne.n	800bada <HAL_TIM_OnePulse_Start_IT+0xe2>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e000      	b.n	800badc <HAL_TIM_OnePulse_Start_IT+0xe4>
 800bada:	2300      	movs	r3, #0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d007      	beq.n	800baf0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800baee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	40012c00 	.word	0x40012c00
 800bb00:	40013400 	.word	0x40013400
 800bb04:	40014000 	.word	0x40014000
 800bb08:	40014400 	.word	0x40014400
 800bb0c:	40014800 	.word	0x40014800
 800bb10:	40015000 	.word	0x40015000

0800bb14 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68da      	ldr	r2, [r3, #12]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0202 	bic.w	r2, r2, #2
 800bb2c:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68da      	ldr	r2, [r3, #12]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f022 0204 	bic.w	r2, r2, #4
 800bb3c:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2200      	movs	r2, #0
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 f818 	bl	800cb7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2200      	movs	r2, #0
 800bb52:	2104      	movs	r1, #4
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 f811 	bl	800cb7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a33      	ldr	r2, [pc, #204]	; (800bc2c <HAL_TIM_OnePulse_Stop_IT+0x118>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d018      	beq.n	800bb96 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a31      	ldr	r2, [pc, #196]	; (800bc30 <HAL_TIM_OnePulse_Stop_IT+0x11c>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d013      	beq.n	800bb96 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a30      	ldr	r2, [pc, #192]	; (800bc34 <HAL_TIM_OnePulse_Stop_IT+0x120>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d00e      	beq.n	800bb96 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a2e      	ldr	r2, [pc, #184]	; (800bc38 <HAL_TIM_OnePulse_Stop_IT+0x124>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d009      	beq.n	800bb96 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a2d      	ldr	r2, [pc, #180]	; (800bc3c <HAL_TIM_OnePulse_Stop_IT+0x128>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d004      	beq.n	800bb96 <HAL_TIM_OnePulse_Stop_IT+0x82>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a2b      	ldr	r2, [pc, #172]	; (800bc40 <HAL_TIM_OnePulse_Stop_IT+0x12c>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d101      	bne.n	800bb9a <HAL_TIM_OnePulse_Stop_IT+0x86>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e000      	b.n	800bb9c <HAL_TIM_OnePulse_Stop_IT+0x88>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d017      	beq.n	800bbd0 <HAL_TIM_OnePulse_Stop_IT+0xbc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6a1a      	ldr	r2, [r3, #32]
 800bba6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10f      	bne.n	800bbd0 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6a1a      	ldr	r2, [r3, #32]
 800bbb6:	f244 4344 	movw	r3, #17476	; 0x4444
 800bbba:	4013      	ands	r3, r2
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d107      	bne.n	800bbd0 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6a1a      	ldr	r2, [r3, #32]
 800bbd6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbda:	4013      	ands	r3, r2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10f      	bne.n	800bc00 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6a1a      	ldr	r2, [r3, #32]
 800bbe6:	f244 4344 	movw	r3, #17476	; 0x4444
 800bbea:	4013      	ands	r3, r2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d107      	bne.n	800bc00 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0201 	bic.w	r2, r2, #1
 800bbfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	40012c00 	.word	0x40012c00
 800bc30:	40013400 	.word	0x40013400
 800bc34:	40014000 	.word	0x40014000
 800bc38:	40014400 	.word	0x40014400
 800bc3c:	40014800 	.word	0x40014800
 800bc40:	40015000 	.word	0x40015000

0800bc44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	f003 0302 	and.w	r3, r3, #2
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d122      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d11b      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0202 	mvn.w	r2, #2
 800bc70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 faec 	bl	800c264 <HAL_TIM_IC_CaptureCallback>
 800bc8c:	e005      	b.n	800bc9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7f9 f87e 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 faef 	bl	800c278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	f003 0304 	and.w	r3, r3, #4
 800bcaa:	2b04      	cmp	r3, #4
 800bcac:	d122      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f003 0304 	and.w	r3, r3, #4
 800bcb8:	2b04      	cmp	r3, #4
 800bcba:	d11b      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f06f 0204 	mvn.w	r2, #4
 800bcc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fac2 	bl	800c264 <HAL_TIM_IC_CaptureCallback>
 800bce0:	e005      	b.n	800bcee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7f9 f854 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fac5 	bl	800c278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f003 0308 	and.w	r3, r3, #8
 800bcfe:	2b08      	cmp	r3, #8
 800bd00:	d122      	bne.n	800bd48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 0308 	and.w	r3, r3, #8
 800bd0c:	2b08      	cmp	r3, #8
 800bd0e:	d11b      	bne.n	800bd48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f06f 0208 	mvn.w	r2, #8
 800bd18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2204      	movs	r2, #4
 800bd1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	f003 0303 	and.w	r3, r3, #3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fa98 	bl	800c264 <HAL_TIM_IC_CaptureCallback>
 800bd34:	e005      	b.n	800bd42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f9 f82a 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fa9b 	bl	800c278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	f003 0310 	and.w	r3, r3, #16
 800bd52:	2b10      	cmp	r3, #16
 800bd54:	d122      	bne.n	800bd9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	f003 0310 	and.w	r3, r3, #16
 800bd60:	2b10      	cmp	r3, #16
 800bd62:	d11b      	bne.n	800bd9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f06f 0210 	mvn.w	r2, #16
 800bd6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2208      	movs	r2, #8
 800bd72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa6e 	bl	800c264 <HAL_TIM_IC_CaptureCallback>
 800bd88:	e005      	b.n	800bd96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7f9 f800 	bl	8004d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fa71 	bl	800c278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d10e      	bne.n	800bdc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d107      	bne.n	800bdc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f06f 0201 	mvn.w	r2, #1
 800bdc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fa44 	bl	800c250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd2:	2b80      	cmp	r3, #128	; 0x80
 800bdd4:	d10e      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde0:	2b80      	cmp	r3, #128	; 0x80
 800bde2:	d107      	bne.n	800bdf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bdec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 ff8a 	bl	800cd08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be02:	d10e      	bne.n	800be22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be0e:	2b80      	cmp	r3, #128	; 0x80
 800be10:	d107      	bne.n	800be22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 ff7d 	bl	800cd1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2c:	2b40      	cmp	r3, #64	; 0x40
 800be2e:	d10e      	bne.n	800be4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3a:	2b40      	cmp	r3, #64	; 0x40
 800be3c:	d107      	bne.n	800be4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fa1f 	bl	800c28c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	f003 0320 	and.w	r3, r3, #32
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d10e      	bne.n	800be7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f003 0320 	and.w	r3, r3, #32
 800be66:	2b20      	cmp	r3, #32
 800be68:	d107      	bne.n	800be7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f06f 0220 	mvn.w	r2, #32
 800be72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 ff3d 	bl	800ccf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be88:	d10f      	bne.n	800beaa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be98:	d107      	bne.n	800beaa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 ff43 	bl	800cd30 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800beb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800beb8:	d10f      	bne.n	800beda <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bec8:	d107      	bne.n	800beda <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 ff35 	bl	800cd44 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bee8:	d10f      	bne.n	800bf0a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bef8:	d107      	bne.n	800bf0a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bf02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 ff27 	bl	800cd58 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf18:	d10f      	bne.n	800bf3a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf28:	d107      	bne.n	800bf3a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bf32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 ff19 	bl	800cd6c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf3a:	bf00      	nop
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d101      	bne.n	800bf62 <HAL_TIM_OC_ConfigChannel+0x1e>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e066      	b.n	800c030 <HAL_TIM_OC_ConfigChannel+0xec>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b14      	cmp	r3, #20
 800bf6e:	d857      	bhi.n	800c020 <HAL_TIM_OC_ConfigChannel+0xdc>
 800bf70:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <HAL_TIM_OC_ConfigChannel+0x34>)
 800bf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf76:	bf00      	nop
 800bf78:	0800bfcd 	.word	0x0800bfcd
 800bf7c:	0800c021 	.word	0x0800c021
 800bf80:	0800c021 	.word	0x0800c021
 800bf84:	0800c021 	.word	0x0800c021
 800bf88:	0800bfdb 	.word	0x0800bfdb
 800bf8c:	0800c021 	.word	0x0800c021
 800bf90:	0800c021 	.word	0x0800c021
 800bf94:	0800c021 	.word	0x0800c021
 800bf98:	0800bfe9 	.word	0x0800bfe9
 800bf9c:	0800c021 	.word	0x0800c021
 800bfa0:	0800c021 	.word	0x0800c021
 800bfa4:	0800c021 	.word	0x0800c021
 800bfa8:	0800bff7 	.word	0x0800bff7
 800bfac:	0800c021 	.word	0x0800c021
 800bfb0:	0800c021 	.word	0x0800c021
 800bfb4:	0800c021 	.word	0x0800c021
 800bfb8:	0800c005 	.word	0x0800c005
 800bfbc:	0800c021 	.word	0x0800c021
 800bfc0:	0800c021 	.word	0x0800c021
 800bfc4:	0800c021 	.word	0x0800c021
 800bfc8:	0800c013 	.word	0x0800c013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 fa0c 	bl	800c3f0 <TIM_OC1_SetConfig>
      break;
 800bfd8:	e025      	b.n	800c026 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 fa9f 	bl	800c524 <TIM_OC2_SetConfig>
      break;
 800bfe6:	e01e      	b.n	800c026 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fb2c 	bl	800c64c <TIM_OC3_SetConfig>
      break;
 800bff4:	e017      	b.n	800c026 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fbb7 	bl	800c770 <TIM_OC4_SetConfig>
      break;
 800c002:	e010      	b.n	800c026 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fc44 	bl	800c898 <TIM_OC5_SetConfig>
      break;
 800c010:	e009      	b.n	800c026 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 fca7 	bl	800c96c <TIM_OC6_SetConfig>
      break;
 800c01e:	e002      	b.n	800c026 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	75fb      	strb	r3, [r7, #23]
      break;
 800c024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d101      	bne.n	800c054 <HAL_TIM_ConfigClockSource+0x1c>
 800c050:	2302      	movs	r3, #2
 800c052:	e0ee      	b.n	800c232 <HAL_TIM_ConfigClockSource+0x1fa>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2202      	movs	r2, #2
 800c060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c07e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a6b      	ldr	r2, [pc, #428]	; (800c23c <HAL_TIM_ConfigClockSource+0x204>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	f000 80b9 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c094:	4a69      	ldr	r2, [pc, #420]	; (800c23c <HAL_TIM_ConfigClockSource+0x204>)
 800c096:	4293      	cmp	r3, r2
 800c098:	f200 80be 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c09c:	4a68      	ldr	r2, [pc, #416]	; (800c240 <HAL_TIM_ConfigClockSource+0x208>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	f000 80b1 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c0a4:	4a66      	ldr	r2, [pc, #408]	; (800c240 <HAL_TIM_ConfigClockSource+0x208>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	f200 80b6 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c0ac:	4a65      	ldr	r2, [pc, #404]	; (800c244 <HAL_TIM_ConfigClockSource+0x20c>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	f000 80a9 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c0b4:	4a63      	ldr	r2, [pc, #396]	; (800c244 <HAL_TIM_ConfigClockSource+0x20c>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	f200 80ae 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c0bc:	4a62      	ldr	r2, [pc, #392]	; (800c248 <HAL_TIM_ConfigClockSource+0x210>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	f000 80a1 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c0c4:	4a60      	ldr	r2, [pc, #384]	; (800c248 <HAL_TIM_ConfigClockSource+0x210>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	f200 80a6 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c0cc:	4a5f      	ldr	r2, [pc, #380]	; (800c24c <HAL_TIM_ConfigClockSource+0x214>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	f000 8099 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c0d4:	4a5d      	ldr	r2, [pc, #372]	; (800c24c <HAL_TIM_ConfigClockSource+0x214>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	f200 809e 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c0dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c0e0:	f000 8091 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c0e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c0e8:	f200 8096 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0f0:	f000 8089 	beq.w	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c0f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0f8:	f200 808e 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c100:	d03e      	beq.n	800c180 <HAL_TIM_ConfigClockSource+0x148>
 800c102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c106:	f200 8087 	bhi.w	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c10e:	f000 8086 	beq.w	800c21e <HAL_TIM_ConfigClockSource+0x1e6>
 800c112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c116:	d87f      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c118:	2b70      	cmp	r3, #112	; 0x70
 800c11a:	d01a      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x11a>
 800c11c:	2b70      	cmp	r3, #112	; 0x70
 800c11e:	d87b      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c120:	2b60      	cmp	r3, #96	; 0x60
 800c122:	d050      	beq.n	800c1c6 <HAL_TIM_ConfigClockSource+0x18e>
 800c124:	2b60      	cmp	r3, #96	; 0x60
 800c126:	d877      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c128:	2b50      	cmp	r3, #80	; 0x50
 800c12a:	d03c      	beq.n	800c1a6 <HAL_TIM_ConfigClockSource+0x16e>
 800c12c:	2b50      	cmp	r3, #80	; 0x50
 800c12e:	d873      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c130:	2b40      	cmp	r3, #64	; 0x40
 800c132:	d058      	beq.n	800c1e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800c134:	2b40      	cmp	r3, #64	; 0x40
 800c136:	d86f      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c138:	2b30      	cmp	r3, #48	; 0x30
 800c13a:	d064      	beq.n	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c13c:	2b30      	cmp	r3, #48	; 0x30
 800c13e:	d86b      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c140:	2b20      	cmp	r3, #32
 800c142:	d060      	beq.n	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c144:	2b20      	cmp	r3, #32
 800c146:	d867      	bhi.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d05c      	beq.n	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c14c:	2b10      	cmp	r3, #16
 800c14e:	d05a      	beq.n	800c206 <HAL_TIM_ConfigClockSource+0x1ce>
 800c150:	e062      	b.n	800c218 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6818      	ldr	r0, [r3, #0]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	6899      	ldr	r1, [r3, #8]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	f000 fceb 	bl	800cb3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	609a      	str	r2, [r3, #8]
      break;
 800c17e:	e04f      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	6899      	ldr	r1, [r3, #8]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	f000 fcd4 	bl	800cb3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689a      	ldr	r2, [r3, #8]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1a2:	609a      	str	r2, [r3, #8]
      break;
 800c1a4:	e03c      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	6859      	ldr	r1, [r3, #4]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f000 fc46 	bl	800ca44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2150      	movs	r1, #80	; 0x50
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 fc9f 	bl	800cb02 <TIM_ITRx_SetConfig>
      break;
 800c1c4:	e02c      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	6859      	ldr	r1, [r3, #4]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f000 fc65 	bl	800caa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2160      	movs	r1, #96	; 0x60
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 fc8f 	bl	800cb02 <TIM_ITRx_SetConfig>
      break;
 800c1e4:	e01c      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	6859      	ldr	r1, [r3, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f000 fc26 	bl	800ca44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2140      	movs	r1, #64	; 0x40
 800c1fe:	4618      	mov	r0, r3
 800c200:	f000 fc7f 	bl	800cb02 <TIM_ITRx_SetConfig>
      break;
 800c204:	e00c      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4619      	mov	r1, r3
 800c210:	4610      	mov	r0, r2
 800c212:	f000 fc76 	bl	800cb02 <TIM_ITRx_SetConfig>
      break;
 800c216:	e003      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	73fb      	strb	r3, [r7, #15]
      break;
 800c21c:	e000      	b.n	800c220 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800c21e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c230:	7bfb      	ldrb	r3, [r7, #15]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	00100070 	.word	0x00100070
 800c240:	00100050 	.word	0x00100050
 800c244:	00100040 	.word	0x00100040
 800c248:	00100030 	.word	0x00100030
 800c24c:	00100020 	.word	0x00100020

0800c250 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a46      	ldr	r2, [pc, #280]	; (800c3cc <TIM_Base_SetConfig+0x12c>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d017      	beq.n	800c2e8 <TIM_Base_SetConfig+0x48>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2be:	d013      	beq.n	800c2e8 <TIM_Base_SetConfig+0x48>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a43      	ldr	r2, [pc, #268]	; (800c3d0 <TIM_Base_SetConfig+0x130>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d00f      	beq.n	800c2e8 <TIM_Base_SetConfig+0x48>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a42      	ldr	r2, [pc, #264]	; (800c3d4 <TIM_Base_SetConfig+0x134>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d00b      	beq.n	800c2e8 <TIM_Base_SetConfig+0x48>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a41      	ldr	r2, [pc, #260]	; (800c3d8 <TIM_Base_SetConfig+0x138>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d007      	beq.n	800c2e8 <TIM_Base_SetConfig+0x48>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a40      	ldr	r2, [pc, #256]	; (800c3dc <TIM_Base_SetConfig+0x13c>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d003      	beq.n	800c2e8 <TIM_Base_SetConfig+0x48>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a3f      	ldr	r2, [pc, #252]	; (800c3e0 <TIM_Base_SetConfig+0x140>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d108      	bne.n	800c2fa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a33      	ldr	r2, [pc, #204]	; (800c3cc <TIM_Base_SetConfig+0x12c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d023      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c308:	d01f      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a30      	ldr	r2, [pc, #192]	; (800c3d0 <TIM_Base_SetConfig+0x130>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d01b      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a2f      	ldr	r2, [pc, #188]	; (800c3d4 <TIM_Base_SetConfig+0x134>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d017      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a2e      	ldr	r2, [pc, #184]	; (800c3d8 <TIM_Base_SetConfig+0x138>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d013      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a2d      	ldr	r2, [pc, #180]	; (800c3dc <TIM_Base_SetConfig+0x13c>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d00f      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a2d      	ldr	r2, [pc, #180]	; (800c3e4 <TIM_Base_SetConfig+0x144>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00b      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a2c      	ldr	r2, [pc, #176]	; (800c3e8 <TIM_Base_SetConfig+0x148>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d007      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a2b      	ldr	r2, [pc, #172]	; (800c3ec <TIM_Base_SetConfig+0x14c>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d003      	beq.n	800c34a <TIM_Base_SetConfig+0xaa>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a26      	ldr	r2, [pc, #152]	; (800c3e0 <TIM_Base_SetConfig+0x140>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d108      	bne.n	800c35c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4313      	orrs	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	4313      	orrs	r3, r2
 800c368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	689a      	ldr	r2, [r3, #8]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a12      	ldr	r2, [pc, #72]	; (800c3cc <TIM_Base_SetConfig+0x12c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d013      	beq.n	800c3b0 <TIM_Base_SetConfig+0x110>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a14      	ldr	r2, [pc, #80]	; (800c3dc <TIM_Base_SetConfig+0x13c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d00f      	beq.n	800c3b0 <TIM_Base_SetConfig+0x110>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a14      	ldr	r2, [pc, #80]	; (800c3e4 <TIM_Base_SetConfig+0x144>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d00b      	beq.n	800c3b0 <TIM_Base_SetConfig+0x110>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a13      	ldr	r2, [pc, #76]	; (800c3e8 <TIM_Base_SetConfig+0x148>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d007      	beq.n	800c3b0 <TIM_Base_SetConfig+0x110>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a12      	ldr	r2, [pc, #72]	; (800c3ec <TIM_Base_SetConfig+0x14c>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_Base_SetConfig+0x110>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a0d      	ldr	r2, [pc, #52]	; (800c3e0 <TIM_Base_SetConfig+0x140>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d103      	bne.n	800c3b8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	691a      	ldr	r2, [r3, #16]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	615a      	str	r2, [r3, #20]
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	40012c00 	.word	0x40012c00
 800c3d0:	40000400 	.word	0x40000400
 800c3d4:	40000800 	.word	0x40000800
 800c3d8:	40000c00 	.word	0x40000c00
 800c3dc:	40013400 	.word	0x40013400
 800c3e0:	40015000 	.word	0x40015000
 800c3e4:	40014000 	.word	0x40014000
 800c3e8:	40014400 	.word	0x40014400
 800c3ec:	40014800 	.word	0x40014800

0800c3f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	f023 0201 	bic.w	r2, r3, #1
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f023 0302 	bic.w	r3, r3, #2
 800c43c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	4313      	orrs	r3, r2
 800c446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a30      	ldr	r2, [pc, #192]	; (800c50c <TIM_OC1_SetConfig+0x11c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d013      	beq.n	800c478 <TIM_OC1_SetConfig+0x88>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a2f      	ldr	r2, [pc, #188]	; (800c510 <TIM_OC1_SetConfig+0x120>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d00f      	beq.n	800c478 <TIM_OC1_SetConfig+0x88>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a2e      	ldr	r2, [pc, #184]	; (800c514 <TIM_OC1_SetConfig+0x124>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d00b      	beq.n	800c478 <TIM_OC1_SetConfig+0x88>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a2d      	ldr	r2, [pc, #180]	; (800c518 <TIM_OC1_SetConfig+0x128>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d007      	beq.n	800c478 <TIM_OC1_SetConfig+0x88>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a2c      	ldr	r2, [pc, #176]	; (800c51c <TIM_OC1_SetConfig+0x12c>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d003      	beq.n	800c478 <TIM_OC1_SetConfig+0x88>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a2b      	ldr	r2, [pc, #172]	; (800c520 <TIM_OC1_SetConfig+0x130>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d10c      	bne.n	800c492 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f023 0308 	bic.w	r3, r3, #8
 800c47e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f023 0304 	bic.w	r3, r3, #4
 800c490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a1d      	ldr	r2, [pc, #116]	; (800c50c <TIM_OC1_SetConfig+0x11c>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d013      	beq.n	800c4c2 <TIM_OC1_SetConfig+0xd2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a1c      	ldr	r2, [pc, #112]	; (800c510 <TIM_OC1_SetConfig+0x120>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d00f      	beq.n	800c4c2 <TIM_OC1_SetConfig+0xd2>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <TIM_OC1_SetConfig+0x124>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00b      	beq.n	800c4c2 <TIM_OC1_SetConfig+0xd2>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a1a      	ldr	r2, [pc, #104]	; (800c518 <TIM_OC1_SetConfig+0x128>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d007      	beq.n	800c4c2 <TIM_OC1_SetConfig+0xd2>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a19      	ldr	r2, [pc, #100]	; (800c51c <TIM_OC1_SetConfig+0x12c>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d003      	beq.n	800c4c2 <TIM_OC1_SetConfig+0xd2>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a18      	ldr	r2, [pc, #96]	; (800c520 <TIM_OC1_SetConfig+0x130>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d111      	bne.n	800c4e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	621a      	str	r2, [r3, #32]
}
 800c500:	bf00      	nop
 800c502:	371c      	adds	r7, #28
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	40012c00 	.word	0x40012c00
 800c510:	40013400 	.word	0x40013400
 800c514:	40014000 	.word	0x40014000
 800c518:	40014400 	.word	0x40014400
 800c51c:	40014800 	.word	0x40014800
 800c520:	40015000 	.word	0x40015000

0800c524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	f023 0210 	bic.w	r2, r3, #16
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f023 0320 	bic.w	r3, r3, #32
 800c572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	011b      	lsls	r3, r3, #4
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a2c      	ldr	r2, [pc, #176]	; (800c634 <TIM_OC2_SetConfig+0x110>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d007      	beq.n	800c598 <TIM_OC2_SetConfig+0x74>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a2b      	ldr	r2, [pc, #172]	; (800c638 <TIM_OC2_SetConfig+0x114>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d003      	beq.n	800c598 <TIM_OC2_SetConfig+0x74>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a2a      	ldr	r2, [pc, #168]	; (800c63c <TIM_OC2_SetConfig+0x118>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d10d      	bne.n	800c5b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c59e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	011b      	lsls	r3, r3, #4
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a1f      	ldr	r2, [pc, #124]	; (800c634 <TIM_OC2_SetConfig+0x110>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d013      	beq.n	800c5e4 <TIM_OC2_SetConfig+0xc0>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a1e      	ldr	r2, [pc, #120]	; (800c638 <TIM_OC2_SetConfig+0x114>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d00f      	beq.n	800c5e4 <TIM_OC2_SetConfig+0xc0>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a1e      	ldr	r2, [pc, #120]	; (800c640 <TIM_OC2_SetConfig+0x11c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d00b      	beq.n	800c5e4 <TIM_OC2_SetConfig+0xc0>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a1d      	ldr	r2, [pc, #116]	; (800c644 <TIM_OC2_SetConfig+0x120>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d007      	beq.n	800c5e4 <TIM_OC2_SetConfig+0xc0>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a1c      	ldr	r2, [pc, #112]	; (800c648 <TIM_OC2_SetConfig+0x124>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d003      	beq.n	800c5e4 <TIM_OC2_SetConfig+0xc0>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a17      	ldr	r2, [pc, #92]	; (800c63c <TIM_OC2_SetConfig+0x118>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d113      	bne.n	800c60c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	4313      	orrs	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	621a      	str	r2, [r3, #32]
}
 800c626:	bf00      	nop
 800c628:	371c      	adds	r7, #28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	40012c00 	.word	0x40012c00
 800c638:	40013400 	.word	0x40013400
 800c63c:	40015000 	.word	0x40015000
 800c640:	40014000 	.word	0x40014000
 800c644:	40014400 	.word	0x40014400
 800c648:	40014800 	.word	0x40014800

0800c64c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b087      	sub	sp, #28
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c67a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f023 0303 	bic.w	r3, r3, #3
 800c686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	4313      	orrs	r3, r2
 800c690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	021b      	lsls	r3, r3, #8
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a2b      	ldr	r2, [pc, #172]	; (800c758 <TIM_OC3_SetConfig+0x10c>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d007      	beq.n	800c6be <TIM_OC3_SetConfig+0x72>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a2a      	ldr	r2, [pc, #168]	; (800c75c <TIM_OC3_SetConfig+0x110>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d003      	beq.n	800c6be <TIM_OC3_SetConfig+0x72>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a29      	ldr	r2, [pc, #164]	; (800c760 <TIM_OC3_SetConfig+0x114>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d10d      	bne.n	800c6da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a1e      	ldr	r2, [pc, #120]	; (800c758 <TIM_OC3_SetConfig+0x10c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d013      	beq.n	800c70a <TIM_OC3_SetConfig+0xbe>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a1d      	ldr	r2, [pc, #116]	; (800c75c <TIM_OC3_SetConfig+0x110>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d00f      	beq.n	800c70a <TIM_OC3_SetConfig+0xbe>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a1d      	ldr	r2, [pc, #116]	; (800c764 <TIM_OC3_SetConfig+0x118>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d00b      	beq.n	800c70a <TIM_OC3_SetConfig+0xbe>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a1c      	ldr	r2, [pc, #112]	; (800c768 <TIM_OC3_SetConfig+0x11c>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d007      	beq.n	800c70a <TIM_OC3_SetConfig+0xbe>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a1b      	ldr	r2, [pc, #108]	; (800c76c <TIM_OC3_SetConfig+0x120>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d003      	beq.n	800c70a <TIM_OC3_SetConfig+0xbe>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a16      	ldr	r2, [pc, #88]	; (800c760 <TIM_OC3_SetConfig+0x114>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d113      	bne.n	800c732 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	011b      	lsls	r3, r3, #4
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4313      	orrs	r3, r2
 800c724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	4313      	orrs	r3, r2
 800c730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	621a      	str	r2, [r3, #32]
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	40012c00 	.word	0x40012c00
 800c75c:	40013400 	.word	0x40013400
 800c760:	40015000 	.word	0x40015000
 800c764:	40014000 	.word	0x40014000
 800c768:	40014400 	.word	0x40014400
 800c76c:	40014800 	.word	0x40014800

0800c770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69db      	ldr	r3, [r3, #28]
 800c796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c79e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	021b      	lsls	r3, r3, #8
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	031b      	lsls	r3, r3, #12
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a2c      	ldr	r2, [pc, #176]	; (800c880 <TIM_OC4_SetConfig+0x110>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d007      	beq.n	800c7e4 <TIM_OC4_SetConfig+0x74>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a2b      	ldr	r2, [pc, #172]	; (800c884 <TIM_OC4_SetConfig+0x114>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d003      	beq.n	800c7e4 <TIM_OC4_SetConfig+0x74>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a2a      	ldr	r2, [pc, #168]	; (800c888 <TIM_OC4_SetConfig+0x118>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d10d      	bne.n	800c800 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	031b      	lsls	r3, r3, #12
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a1f      	ldr	r2, [pc, #124]	; (800c880 <TIM_OC4_SetConfig+0x110>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d013      	beq.n	800c830 <TIM_OC4_SetConfig+0xc0>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a1e      	ldr	r2, [pc, #120]	; (800c884 <TIM_OC4_SetConfig+0x114>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d00f      	beq.n	800c830 <TIM_OC4_SetConfig+0xc0>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a1e      	ldr	r2, [pc, #120]	; (800c88c <TIM_OC4_SetConfig+0x11c>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d00b      	beq.n	800c830 <TIM_OC4_SetConfig+0xc0>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a1d      	ldr	r2, [pc, #116]	; (800c890 <TIM_OC4_SetConfig+0x120>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d007      	beq.n	800c830 <TIM_OC4_SetConfig+0xc0>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a1c      	ldr	r2, [pc, #112]	; (800c894 <TIM_OC4_SetConfig+0x124>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d003      	beq.n	800c830 <TIM_OC4_SetConfig+0xc0>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a17      	ldr	r2, [pc, #92]	; (800c888 <TIM_OC4_SetConfig+0x118>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d113      	bne.n	800c858 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c836:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c83e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	019b      	lsls	r3, r3, #6
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	4313      	orrs	r3, r2
 800c84a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	019b      	lsls	r3, r3, #6
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	4313      	orrs	r3, r2
 800c856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	621a      	str	r2, [r3, #32]
}
 800c872:	bf00      	nop
 800c874:	371c      	adds	r7, #28
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	40012c00 	.word	0x40012c00
 800c884:	40013400 	.word	0x40013400
 800c888:	40015000 	.word	0x40015000
 800c88c:	40014000 	.word	0x40014000
 800c890:	40014400 	.word	0x40014400
 800c894:	40014800 	.word	0x40014800

0800c898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c8dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	041b      	lsls	r3, r3, #16
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a19      	ldr	r2, [pc, #100]	; (800c954 <TIM_OC5_SetConfig+0xbc>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d013      	beq.n	800c91a <TIM_OC5_SetConfig+0x82>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a18      	ldr	r2, [pc, #96]	; (800c958 <TIM_OC5_SetConfig+0xc0>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d00f      	beq.n	800c91a <TIM_OC5_SetConfig+0x82>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a17      	ldr	r2, [pc, #92]	; (800c95c <TIM_OC5_SetConfig+0xc4>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d00b      	beq.n	800c91a <TIM_OC5_SetConfig+0x82>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a16      	ldr	r2, [pc, #88]	; (800c960 <TIM_OC5_SetConfig+0xc8>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d007      	beq.n	800c91a <TIM_OC5_SetConfig+0x82>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a15      	ldr	r2, [pc, #84]	; (800c964 <TIM_OC5_SetConfig+0xcc>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d003      	beq.n	800c91a <TIM_OC5_SetConfig+0x82>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a14      	ldr	r2, [pc, #80]	; (800c968 <TIM_OC5_SetConfig+0xd0>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d109      	bne.n	800c92e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c920:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	021b      	lsls	r3, r3, #8
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	621a      	str	r2, [r3, #32]
}
 800c948:	bf00      	nop
 800c94a:	371c      	adds	r7, #28
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	40012c00 	.word	0x40012c00
 800c958:	40013400 	.word	0x40013400
 800c95c:	40014000 	.word	0x40014000
 800c960:	40014400 	.word	0x40014400
 800c964:	40014800 	.word	0x40014800
 800c968:	40015000 	.word	0x40015000

0800c96c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c99a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c99e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	021b      	lsls	r3, r3, #8
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	051b      	lsls	r3, r3, #20
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a1a      	ldr	r2, [pc, #104]	; (800ca2c <TIM_OC6_SetConfig+0xc0>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d013      	beq.n	800c9f0 <TIM_OC6_SetConfig+0x84>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a19      	ldr	r2, [pc, #100]	; (800ca30 <TIM_OC6_SetConfig+0xc4>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d00f      	beq.n	800c9f0 <TIM_OC6_SetConfig+0x84>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a18      	ldr	r2, [pc, #96]	; (800ca34 <TIM_OC6_SetConfig+0xc8>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d00b      	beq.n	800c9f0 <TIM_OC6_SetConfig+0x84>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a17      	ldr	r2, [pc, #92]	; (800ca38 <TIM_OC6_SetConfig+0xcc>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d007      	beq.n	800c9f0 <TIM_OC6_SetConfig+0x84>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a16      	ldr	r2, [pc, #88]	; (800ca3c <TIM_OC6_SetConfig+0xd0>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d003      	beq.n	800c9f0 <TIM_OC6_SetConfig+0x84>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a15      	ldr	r2, [pc, #84]	; (800ca40 <TIM_OC6_SetConfig+0xd4>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d109      	bne.n	800ca04 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	029b      	lsls	r3, r3, #10
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	621a      	str	r2, [r3, #32]
}
 800ca1e:	bf00      	nop
 800ca20:	371c      	adds	r7, #28
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	40012c00 	.word	0x40012c00
 800ca30:	40013400 	.word	0x40013400
 800ca34:	40014000 	.word	0x40014000
 800ca38:	40014400 	.word	0x40014400
 800ca3c:	40014800 	.word	0x40014800
 800ca40:	40015000 	.word	0x40015000

0800ca44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b087      	sub	sp, #28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	f023 0201 	bic.w	r2, r3, #1
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	699b      	ldr	r3, [r3, #24]
 800ca66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	011b      	lsls	r3, r3, #4
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f023 030a 	bic.w	r3, r3, #10
 800ca80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	4313      	orrs	r3, r2
 800ca88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	621a      	str	r2, [r3, #32]
}
 800ca96:	bf00      	nop
 800ca98:	371c      	adds	r7, #28
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b087      	sub	sp, #28
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	f023 0210 	bic.w	r2, r3, #16
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6a1b      	ldr	r3, [r3, #32]
 800cac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cacc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	031b      	lsls	r3, r3, #12
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	011b      	lsls	r3, r3, #4
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	693a      	ldr	r2, [r7, #16]
 800caf4:	621a      	str	r2, [r3, #32]
}
 800caf6:	bf00      	nop
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b085      	sub	sp, #20
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cb18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f043 0307 	orr.w	r3, r3, #7
 800cb28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	609a      	str	r2, [r3, #8]
}
 800cb30:	bf00      	nop
 800cb32:	3714      	adds	r7, #20
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	021a      	lsls	r2, r3, #8
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	431a      	orrs	r2, r3
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	609a      	str	r2, [r3, #8]
}
 800cb70:	bf00      	nop
 800cb72:	371c      	adds	r7, #28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b087      	sub	sp, #28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f003 031f 	and.w	r3, r3, #31
 800cb8e:	2201      	movs	r2, #1
 800cb90:	fa02 f303 	lsl.w	r3, r2, r3
 800cb94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6a1a      	ldr	r2, [r3, #32]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	43db      	mvns	r3, r3
 800cb9e:	401a      	ands	r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6a1a      	ldr	r2, [r3, #32]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	f003 031f 	and.w	r3, r3, #31
 800cbae:	6879      	ldr	r1, [r7, #4]
 800cbb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbb4:	431a      	orrs	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	621a      	str	r2, [r3, #32]
}
 800cbba:	bf00      	nop
 800cbbc:	371c      	adds	r7, #28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
	...

0800cbc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d101      	bne.n	800cbe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbdc:	2302      	movs	r3, #2
 800cbde:	e074      	b.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2202      	movs	r2, #2
 800cbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a34      	ldr	r2, [pc, #208]	; (800ccd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d009      	beq.n	800cc1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a33      	ldr	r2, [pc, #204]	; (800ccdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d004      	beq.n	800cc1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a31      	ldr	r2, [pc, #196]	; (800cce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d108      	bne.n	800cc30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cc36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a21      	ldr	r2, [pc, #132]	; (800ccd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d022      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc60:	d01d      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a1f      	ldr	r2, [pc, #124]	; (800cce4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d018      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a1d      	ldr	r2, [pc, #116]	; (800cce8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d013      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a1c      	ldr	r2, [pc, #112]	; (800ccec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d00e      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a15      	ldr	r2, [pc, #84]	; (800ccdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d009      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a18      	ldr	r2, [pc, #96]	; (800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d004      	beq.n	800cc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a11      	ldr	r2, [pc, #68]	; (800cce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d10c      	bne.n	800ccb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	40012c00 	.word	0x40012c00
 800ccdc:	40013400 	.word	0x40013400
 800cce0:	40015000 	.word	0x40015000
 800cce4:	40000400 	.word	0x40000400
 800cce8:	40000800 	.word	0x40000800
 800ccec:	40000c00 	.word	0x40000c00
 800ccf0:	40014000 	.word	0x40014000

0800ccf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccfc:	bf00      	nop
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cd4c:	bf00      	nop
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b087      	sub	sp, #28
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	6812      	ldr	r2, [r2, #0]
 800cd98:	f023 0101 	bic.w	r1, r3, #1
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	2b08      	cmp	r3, #8
 800cda8:	d102      	bne.n	800cdb0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800cdaa:	2340      	movs	r3, #64	; 0x40
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e001      	b.n	800cdb4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800cdc0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800cdc6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800cdcc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800cdd2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800cdd8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800cdde:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800cde4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800cdea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800cdf0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce08:	693a      	ldr	r2, [r7, #16]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1c:	693a      	ldr	r2, [r7, #16]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800ce22:	4b3d      	ldr	r3, [pc, #244]	; (800cf18 <FMC_NORSRAM_Init+0x198>)
 800ce24:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce2c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce34:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800ce3c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800ce44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	43db      	mvns	r3, r3
 800ce54:	ea02 0103 	and.w	r1, r2, r3
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	4319      	orrs	r1, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce6e:	d10c      	bne.n	800ce8a <FMC_NORSRAM_Init+0x10a>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d008      	beq.n	800ce8a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce84:	431a      	orrs	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d006      	beq.n	800cea0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d12f      	bne.n	800cf0a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	0c1b      	lsrs	r3, r3, #16
 800ceb0:	041b      	lsls	r3, r3, #16
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b04      	cmp	r3, #4
 800cec2:	d014      	beq.n	800ceee <FMC_NORSRAM_Init+0x16e>
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	d819      	bhi.n	800cefc <FMC_NORSRAM_Init+0x17c>
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <FMC_NORSRAM_Init+0x152>
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d007      	beq.n	800cee0 <FMC_NORSRAM_Init+0x160>
 800ced0:	e014      	b.n	800cefc <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	621a      	str	r2, [r3, #32]
        break;
 800cede:	e014      	b.n	800cf0a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	621a      	str	r2, [r3, #32]
        break;
 800ceec:	e00d      	b.n	800cf0a <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	621a      	str	r2, [r3, #32]
        break;
 800cefa:	e006      	b.n	800cf0a <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	621a      	str	r2, [r3, #32]
        break;
 800cf08:	bf00      	nop
    }
  }

  return HAL_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	371c      	adds	r7, #28
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	0008fb7f 	.word	0x0008fb7f

0800cf1c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b087      	sub	sp, #28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	011b      	lsls	r3, r3, #4
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	021b      	lsls	r3, r3, #8
 800cf44:	431a      	orrs	r2, r3
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	079b      	lsls	r3, r3, #30
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	431a      	orrs	r2, r3
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	695b      	ldr	r3, [r3, #20]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	051b      	lsls	r3, r3, #20
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	3b02      	subs	r3, #2
 800cf66:	061b      	lsls	r3, r3, #24
 800cf68:	ea42 0103 	orr.w	r1, r2, r3
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	3201      	adds	r2, #1
 800cf74:	4319      	orrs	r1, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf88:	d113      	bne.n	800cfb2 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf92:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	051b      	lsls	r3, r3, #20
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	431a      	orrs	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	371c      	adds	r7, #28
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
 800cfcc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfd4:	d121      	bne.n	800d01a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfde:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	6819      	ldr	r1, [r3, #0]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	011b      	lsls	r3, r3, #4
 800cfec:	4319      	orrs	r1, r3
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	021b      	lsls	r3, r3, #8
 800cff4:	4319      	orrs	r1, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	079b      	lsls	r3, r3, #30
 800cffc:	4319      	orrs	r1, r3
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	4319      	orrs	r1, r3
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	041b      	lsls	r3, r3, #16
 800d00a:	430b      	orrs	r3, r1
 800d00c:	ea42 0103 	orr.w	r1, r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d018:	e005      	b.n	800d026 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3714      	adds	r7, #20
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <setpixel>:
#include "framebuf.h"

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	603b      	str	r3, [r7, #0]
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	891b      	ldrh	r3, [r3, #8]
 800d04a:	4619      	mov	r1, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	fb03 f101 	mul.w	r1, r3, r1
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	440b      	add	r3, r1
 800d056:	005b      	lsls	r3, r3, #1
 800d058:	4413      	add	r3, r2
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	b292      	uxth	r2, r2
 800d05e:	801a      	strh	r2, [r3, #0]
}
 800d060:	bf00      	nop
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <setpixel_checked>:

void setpixel_checked(const tFramebuf *fb, int x, int y, int col, int mask) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	603b      	str	r3, [r7, #0]
    if (mask && 0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d017      	beq.n	800d0b0 <setpixel_checked+0x44>
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	db14      	blt.n	800d0b0 <setpixel_checked+0x44>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	889b      	ldrh	r3, [r3, #4]
 800d08a:	461a      	mov	r2, r3
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	4293      	cmp	r3, r2
 800d090:	da0e      	bge.n	800d0b0 <setpixel_checked+0x44>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	db0b      	blt.n	800d0b0 <setpixel_checked+0x44>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	88db      	ldrh	r3, [r3, #6]
 800d09c:	461a      	mov	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	da05      	bge.n	800d0b0 <setpixel_checked+0x44>
        setpixel(fb, x, y, col);
 800d0a4:	68b9      	ldr	r1, [r7, #8]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f7ff ffc2 	bl	800d034 <setpixel>
    }
}
 800d0b0:	bf00      	nop
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 800d0b8:	b480      	push	{r7}
 800d0ba:	b089      	sub	sp, #36	; 0x24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 800d0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	dd66      	ble.n	800d19a <fill_rect+0xe2>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	dd63      	ble.n	800d19a <fill_rect+0xe2>
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	dd5e      	ble.n	800d19a <fill_rect+0xe2>
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e0:	4413      	add	r3, r2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	dd59      	ble.n	800d19a <fill_rect+0xe2>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	88db      	ldrh	r3, [r3, #6]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	da53      	bge.n	800d19a <fill_rect+0xe2>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	889b      	ldrh	r3, [r3, #4]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	da4d      	bge.n	800d19a <fill_rect+0xe2>
        // No operation needed.
        return;
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	4413      	add	r3, r2
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	8892      	ldrh	r2, [r2, #4]
 800d108:	4293      	cmp	r3, r2
 800d10a:	bfa8      	it	ge
 800d10c:	4613      	movge	r3, r2
 800d10e:	617b      	str	r3, [r7, #20]
    int yend = MIN(fb->height, y + h);
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	4413      	add	r3, r2
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	88d2      	ldrh	r2, [r2, #6]
 800d11a:	4293      	cmp	r3, r2
 800d11c:	bfa8      	it	ge
 800d11e:	4613      	movge	r3, r2
 800d120:	613b      	str	r3, [r7, #16]
    x = MAX(x, 0);
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d128:	60bb      	str	r3, [r7, #8]
    y = MAX(y, 0);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d130:	607b      	str	r3, [r7, #4]

    w = xend - x;
 800d132:	697a      	ldr	r2, [r7, #20]
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	603b      	str	r3, [r7, #0]
    h = yend - y;
 800d13a:	693a      	ldr	r2, [r7, #16]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	1ad3      	subs	r3, r2, r3
 800d140:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	891b      	ldrh	r3, [r3, #8]
 800d14a:	4619      	mov	r1, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	fb03 f101 	mul.w	r1, r3, r1
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	440b      	add	r3, r1
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	4413      	add	r3, r2
 800d15a:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800d15c:	e017      	b.n	800d18e <fill_rect+0xd6>
        for (unsigned int ww = w; ww; --ww) {
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	61bb      	str	r3, [r7, #24]
 800d162:	e008      	b.n	800d176 <fill_rect+0xbe>
            *b++ = col;
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	1c9a      	adds	r2, r3, #2
 800d168:	61fa      	str	r2, [r7, #28]
 800d16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d16c:	b292      	uxth	r2, r2
 800d16e:	801a      	strh	r2, [r3, #0]
        for (unsigned int ww = w; ww; --ww) {
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	3b01      	subs	r3, #1
 800d174:	61bb      	str	r3, [r7, #24]
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1f3      	bne.n	800d164 <fill_rect+0xac>
        }
        b += fb->stride - w;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	891b      	ldrh	r3, [r3, #8]
 800d180:	461a      	mov	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	4413      	add	r3, r2
 800d18c:	61fb      	str	r3, [r7, #28]
    while (h--) {
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	1e5a      	subs	r2, r3, #1
 800d192:	62ba      	str	r2, [r7, #40]	; 0x28
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1e2      	bne.n	800d15e <fill_rect+0xa6>
 800d198:	e000      	b.n	800d19c <fill_rect+0xe4>
        return;
 800d19a:	bf00      	nop
    }

}
 800d19c:	3724      	adds	r7, #36	; 0x24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr

0800d1a6 <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
 800d1a6:	b480      	push	{r7}
 800d1a8:	b085      	sub	sp, #20
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	60f8      	str	r0, [r7, #12]
 800d1ae:	607b      	str	r3, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	817b      	strh	r3, [r7, #10]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	813b      	strh	r3, [r7, #8]
    fb->width = width;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	897a      	ldrh	r2, [r7, #10]
 800d1bc:	809a      	strh	r2, [r3, #4]
    fb->height = height;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	893a      	ldrh	r2, [r7, #8]
 800d1c2:	80da      	strh	r2, [r3, #6]
	fb->buf = buf;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	601a      	str	r2, [r3, #0]
	fb->stride = fb->width;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	889a      	ldrh	r2, [r3, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	811a      	strh	r2, [r3, #8]
}
 800d1d2:	bf00      	nop
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af02      	add	r7, sp, #8
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	889b      	ldrh	r3, [r3, #4]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	88db      	ldrh	r3, [r3, #6]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	9200      	str	r2, [sp, #0]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2100      	movs	r1, #0
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7ff ff59 	bl	800d0b8 <fill_rect>
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800d20e:	b580      	push	{r7, lr}
 800d210:	b086      	sub	sp, #24
 800d212:	af02      	add	r7, sp, #8
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	603b      	str	r3, [r7, #0]
    fill_rect( fb, x, y, w, h, col );
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	68b9      	ldr	r1, [r7, #8]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff ff44 	bl	800d0b8 <fill_rect>
}
 800d230:	bf00      	nop
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	db14      	blt.n	800d276 <framebuf_pixel+0x3e>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	889b      	ldrh	r3, [r3, #4]
 800d250:	461a      	mov	r2, r3
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	4293      	cmp	r3, r2
 800d256:	da0e      	bge.n	800d276 <framebuf_pixel+0x3e>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	db0b      	blt.n	800d276 <framebuf_pixel+0x3e>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	88db      	ldrh	r3, [r3, #6]
 800d262:	461a      	mov	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4293      	cmp	r3, r2
 800d268:	da05      	bge.n	800d276 <framebuf_pixel+0x3e>
		setpixel( fb, x, y,  col );
 800d26a:	68b9      	ldr	r1, [r7, #8]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7ff fedf 	bl	800d034 <setpixel>
    }
}
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 800d27e:	b580      	push	{r7, lr}
 800d280:	b086      	sub	sp, #24
 800d282:	af02      	add	r7, sp, #8
 800d284:	60f8      	str	r0, [r7, #12]
 800d286:	60b9      	str	r1, [r7, #8]
 800d288:	607a      	str	r2, [r7, #4]
 800d28a:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	2301      	movs	r3, #1
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f7ff ff0c 	bl	800d0b8 <fill_rect>
}
 800d2a0:	bf00      	nop
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af02      	add	r7, sp, #8
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, 1, h, col );
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	2301      	movs	r3, #1
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff fef7 	bl	800d0b8 <fill_rect>
}
 800d2ca:	bf00      	nop
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <line>:
	fill_rect( fb, x, y + h - 1, w, 1, col );
	fill_rect( fb, x, y, 1, h, col );
	fill_rect( fb, x + w - 1, y, 1, h, col );
}

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b08c      	sub	sp, #48	; 0x30
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	60f8      	str	r0, [r7, #12]
 800d2da:	60b9      	str	r1, [r7, #8]
 800d2dc:	607a      	str	r2, [r7, #4]
 800d2de:	603b      	str	r3, [r7, #0]
	int dx = x2 - x1;
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sx;
    if (dx > 0) {
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	dd02      	ble.n	800d2f4 <line+0x22>
        sx = 1;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2f2:	e005      	b.n	800d300 <line+0x2e>
    } else {
        dx = -dx;
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	425b      	negs	r3, r3
 800d2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        sx = -1;
 800d2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d2fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int dy = y2 - y1;
 800d300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	627b      	str	r3, [r7, #36]	; 0x24
    int sy;
    if (dy > 0) {
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	dd02      	ble.n	800d314 <line+0x42>
        sy = 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	623b      	str	r3, [r7, #32]
 800d312:	e005      	b.n	800d320 <line+0x4e>
    } else {
        dy = -dy;
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	425b      	negs	r3, r3
 800d318:	627b      	str	r3, [r7, #36]	; 0x24
        sy = -1;
 800d31a:	f04f 33ff 	mov.w	r3, #4294967295
 800d31e:	623b      	str	r3, [r7, #32]
    }

    int steep;
    if (dy > dx) {
 800d320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d324:	429a      	cmp	r2, r3
 800d326:	dd14      	ble.n	800d352 <line+0x80>
        int temp;
        temp = x1;
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	613b      	str	r3, [r7, #16]
        x1 = y1;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	60bb      	str	r3, [r7, #8]
        y1 = temp;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	607b      	str	r3, [r7, #4]
        temp = dx;
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	613b      	str	r3, [r7, #16]
        dx = dy;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	62fb      	str	r3, [r7, #44]	; 0x2c
        dy = temp;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	627b      	str	r3, [r7, #36]	; 0x24
        temp = sx;
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	613b      	str	r3, [r7, #16]
        sx = sy;
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28
        sy = temp;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	623b      	str	r3, [r7, #32]
        steep = 1;
 800d34c:	2301      	movs	r3, #1
 800d34e:	61fb      	str	r3, [r7, #28]
 800d350:	e001      	b.n	800d356 <line+0x84>
    } else {
        steep = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	61fb      	str	r3, [r7, #28]
    }

    int e = 2 * dy - dx;
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	005a      	lsls	r2, r3, #1
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800d360:	2300      	movs	r3, #0
 800d362:	617b      	str	r3, [r7, #20]
 800d364:	e04c      	b.n	800d400 <line+0x12e>
        if (steep) {
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d018      	beq.n	800d39e <line+0xcc>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	db37      	blt.n	800d3e2 <line+0x110>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	889b      	ldrh	r3, [r3, #4]
 800d376:	461a      	mov	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4293      	cmp	r3, r2
 800d37c:	da31      	bge.n	800d3e2 <line+0x110>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	db2e      	blt.n	800d3e2 <line+0x110>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	88db      	ldrh	r3, [r3, #6]
 800d388:	461a      	mov	r2, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	da28      	bge.n	800d3e2 <line+0x110>
                setpixel(fb, y1, x1, col);
 800d390:	6879      	ldr	r1, [r7, #4]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7ff fe4c 	bl	800d034 <setpixel>
 800d39c:	e021      	b.n	800d3e2 <line+0x110>
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	db1e      	blt.n	800d3e2 <line+0x110>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	889b      	ldrh	r3, [r3, #4]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	da18      	bge.n	800d3e2 <line+0x110>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	db15      	blt.n	800d3e2 <line+0x110>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	88db      	ldrh	r3, [r3, #6]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	da0f      	bge.n	800d3e2 <line+0x110>
                setpixel(fb, x1, y1, col);
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f7ff fe33 	bl	800d034 <setpixel>
            }
        }
        while (e >= 0) {
 800d3ce:	e008      	b.n	800d3e2 <line+0x110>
            y1 += sy;
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	607b      	str	r3, [r7, #4]
            e -= 2 * dx;
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	69ba      	ldr	r2, [r7, #24]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	61bb      	str	r3, [r7, #24]
        while (e >= 0) {
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	daf3      	bge.n	800d3d0 <line+0xfe>
        }
        x1 += sx;
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	4413      	add	r3, r2
 800d3ee:	60bb      	str	r3, [r7, #8]
        e += 2 * dy;
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	69ba      	ldr	r2, [r7, #24]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d404:	429a      	cmp	r2, r3
 800d406:	dbae      	blt.n	800d366 <line+0x94>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	db14      	blt.n	800d438 <line+0x166>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	889b      	ldrh	r3, [r3, #4]
 800d412:	461a      	mov	r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	4293      	cmp	r3, r2
 800d418:	da0e      	bge.n	800d438 <line+0x166>
 800d41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	db0b      	blt.n	800d438 <line+0x166>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	88db      	ldrh	r3, [r3, #6]
 800d424:	461a      	mov	r2, r3
 800d426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d428:	4293      	cmp	r3, r2
 800d42a:	da05      	bge.n	800d438 <line+0x166>
        setpixel(fb, x2, y2, col);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff fdfe 	bl	800d034 <setpixel>
    }
}
 800d438:	bf00      	nop
 800d43a:	3730      	adds	r7, #48	; 0x30
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af02      	add	r7, sp, #8
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	603b      	str	r3, [r7, #0]
    line( fb, x1, y1, x2, y2, col );
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	68b9      	ldr	r1, [r7, #8]
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f7ff ff38 	bl	800d2d2 <line>
}
 800d462:	bf00      	nop
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b088      	sub	sp, #32
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	607a      	str	r2, [r7, #4]
 800d476:	603b      	str	r3, [r7, #0]
    int x = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	f1c3 0303 	rsb	r3, r3, #3
 800d488:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800d48a:	e067      	b.n	800d55c <framebuf_circle+0xf2>
        framebuf_pixel(fb, xc + x, yc + y, col);
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	18d1      	adds	r1, r2, r3
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	441a      	add	r2, r3
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f7ff fecc 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	1ad1      	subs	r1, r2, r3
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	441a      	add	r2, r3
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff fec2 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	18d1      	adds	r1, r2, r3
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	1ad2      	subs	r2, r2, r3
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff feb8 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	1ad1      	subs	r1, r2, r3
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	1ad2      	subs	r2, r2, r3
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f7ff feae 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	18d1      	adds	r1, r2, r3
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	441a      	add	r2, r3
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff fea4 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	1ad1      	subs	r1, r2, r3
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	441a      	add	r2, r3
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f7ff fe9a 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 800d504:	68ba      	ldr	r2, [r7, #8]
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	18d1      	adds	r1, r2, r3
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	1ad2      	subs	r2, r2, r3
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7ff fe90 	bl	800d238 <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	1ad1      	subs	r1, r2, r3
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	1ad2      	subs	r2, r2, r3
 800d524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff fe86 	bl	800d238 <framebuf_pixel>

        if (d < 0) {
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	da06      	bge.n	800d540 <framebuf_circle+0xd6>
            d = d + 4 * x + 6;
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	009a      	lsls	r2, r3, #2
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	4413      	add	r3, r2
 800d53a:	3306      	adds	r3, #6
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	e00a      	b.n	800d556 <framebuf_circle+0xec>
        } else {
            d = d + 4 * (x - y) + 10;
 800d540:	69fa      	ldr	r2, [r7, #28]
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	009a      	lsls	r2, r3, #2
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	4413      	add	r3, r2
 800d54c:	330a      	adds	r3, #10
 800d54e:	617b      	str	r3, [r7, #20]
            y--;
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	3b01      	subs	r3, #1
 800d554:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	3301      	adds	r3, #1
 800d55a:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800d55c:	69fa      	ldr	r2, [r7, #28]
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	429a      	cmp	r2, r3
 800d562:	dd93      	ble.n	800d48c <framebuf_circle+0x22>
    }
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	3720      	adds	r7, #32
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <framebuf_circle_quadrant>:
#define QUADRANT_0   0x01
#define QUADRANT_90  0x02
#define QUADRANT_180 0x04
#define QUADRANT_270 0x08
void framebuf_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800d56e:	b580      	push	{r7, lr}
 800d570:	b088      	sub	sp, #32
 800d572:	af00      	add	r7, sp, #0
 800d574:	60f8      	str	r0, [r7, #12]
 800d576:	60b9      	str	r1, [r7, #8]
 800d578:	607a      	str	r2, [r7, #4]
 800d57a:	603b      	str	r3, [r7, #0]
    int x = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	005b      	lsls	r3, r3, #1
 800d588:	f1c3 0303 	rsb	r3, r3, #3
 800d58c:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800d58e:	e07f      	b.n	800d690 <framebuf_circle_quadrant+0x122>
        if (quadrant & QUADRANT_0) {
 800d590:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d013      	beq.n	800d5c4 <framebuf_circle_quadrant+0x56>
            framebuf_pixel(fb, xc + x, yc + y, col);
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	18d1      	adds	r1, r2, r3
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	441a      	add	r2, r3
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f7ff fe44 	bl	800d238 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc + x, col);
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	18d1      	adds	r1, r2, r3
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	441a      	add	r2, r3
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f7ff fe3a 	bl	800d238 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_90) {
 800d5c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d5c8:	f003 0302 	and.w	r3, r3, #2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d013      	beq.n	800d5f8 <framebuf_circle_quadrant+0x8a>
            framebuf_pixel(fb, xc - x, yc + y, col);
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	1ad1      	subs	r1, r2, r3
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	441a      	add	r2, r3
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f7ff fe2a 	bl	800d238 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc + x, col);
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	1ad1      	subs	r1, r2, r3
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	441a      	add	r2, r3
 800d5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff fe20 	bl	800d238 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_180) {
 800d5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d5fc:	f003 0304 	and.w	r3, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	d013      	beq.n	800d62c <framebuf_circle_quadrant+0xbe>
            framebuf_pixel(fb, xc - x, yc - y, col);
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	1ad1      	subs	r1, r2, r3
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	1ad2      	subs	r2, r2, r3
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f7ff fe10 	bl	800d238 <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc - x, col);
 800d618:	68ba      	ldr	r2, [r7, #8]
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	1ad1      	subs	r1, r2, r3
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	1ad2      	subs	r2, r2, r3
 800d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f7ff fe06 	bl	800d238 <framebuf_pixel>
        }
        if (quadrant & QUADRANT_270) {
 800d62c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d630:	f003 0308 	and.w	r3, r3, #8
 800d634:	2b00      	cmp	r3, #0
 800d636:	d013      	beq.n	800d660 <framebuf_circle_quadrant+0xf2>
            framebuf_pixel(fb, xc + x, yc - y, col);
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	18d1      	adds	r1, r2, r3
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	1ad2      	subs	r2, r2, r3
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff fdf6 	bl	800d238 <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc - x, col);
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	18d1      	adds	r1, r2, r3
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	1ad2      	subs	r2, r2, r3
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f7ff fdec 	bl	800d238 <framebuf_pixel>
        }

        if (d < 0) {
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	da06      	bge.n	800d674 <framebuf_circle_quadrant+0x106>
            d = d + 4 * x + 6;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	009a      	lsls	r2, r3, #2
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	3306      	adds	r3, #6
 800d670:	617b      	str	r3, [r7, #20]
 800d672:	e00a      	b.n	800d68a <framebuf_circle_quadrant+0x11c>
        } else {
            d = d + 4 * (x - y) + 10;
 800d674:	69fa      	ldr	r2, [r7, #28]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	009a      	lsls	r2, r3, #2
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	4413      	add	r3, r2
 800d680:	330a      	adds	r3, #10
 800d682:	617b      	str	r3, [r7, #20]
            y--;
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	3b01      	subs	r3, #1
 800d688:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	3301      	adds	r3, #1
 800d68e:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800d690:	69fa      	ldr	r2, [r7, #28]
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	429a      	cmp	r2, r3
 800d696:	f77f af7b 	ble.w	800d590 <framebuf_circle_quadrant+0x22>
    }
}
 800d69a:	bf00      	nop
 800d69c:	bf00      	nop
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08a      	sub	sp, #40	; 0x28
 800d6a8:	af02      	add	r7, sp, #8
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
 800d6b0:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	1ad1      	subs	r1, r2, r3
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	005a      	lsls	r2, r3, #1
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f7ff fdda 	bl	800d27e <framebuf_hline>

    int x = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	f1c3 0303 	rsb	r3, r3, #3
 800d6da:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800d6dc:	e055      	b.n	800d78a <framebuf_fill_circle+0xe6>
        if (y > 0) {
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	dd1b      	ble.n	800d71c <framebuf_fill_circle+0x78>
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	1ad1      	subs	r1, r2, r3
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	1ad2      	subs	r2, r2, r3
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	0058      	lsls	r0, r3, #1
 800d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7ff fdbf 	bl	800d27e <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	1ad1      	subs	r1, r2, r3
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	441a      	add	r2, r3
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	0058      	lsls	r0, r3, #1
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	4603      	mov	r3, r0
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f7ff fdb1 	bl	800d27e <framebuf_hline>
        }

        if (x > 0) {
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dd1b      	ble.n	800d75a <framebuf_fill_circle+0xb6>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	1ad1      	subs	r1, r2, r3
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	1ad2      	subs	r2, r2, r3
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	0058      	lsls	r0, r3, #1
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	4603      	mov	r3, r0
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7ff fda0 	bl	800d27e <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	1ad1      	subs	r1, r2, r3
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	441a      	add	r2, r3
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	0058      	lsls	r0, r3, #1
 800d74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	4603      	mov	r3, r0
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7ff fd92 	bl	800d27e <framebuf_hline>
        }

        if (d < 0) {
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	da06      	bge.n	800d76e <framebuf_fill_circle+0xca>
            d = d + 4 * x + 6;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	009a      	lsls	r2, r3, #2
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	4413      	add	r3, r2
 800d768:	3306      	adds	r3, #6
 800d76a:	617b      	str	r3, [r7, #20]
 800d76c:	e00a      	b.n	800d784 <framebuf_fill_circle+0xe0>
        } else {
            d = d + 4 * (x - y) + 10;
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	009a      	lsls	r2, r3, #2
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	4413      	add	r3, r2
 800d77a:	330a      	adds	r3, #10
 800d77c:	617b      	str	r3, [r7, #20]
            y--;
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	3b01      	subs	r3, #1
 800d782:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	3301      	adds	r3, #1
 800d788:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800d78a:	69fa      	ldr	r2, [r7, #28]
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	429a      	cmp	r2, r3
 800d790:	dda5      	ble.n	800d6de <framebuf_fill_circle+0x3a>
    }
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <framebuf_fill_circle_quadrant>:

void framebuf_fill_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08a      	sub	sp, #40	; 0x28
 800d7a0:	af02      	add	r7, sp, #8
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	1ad1      	subs	r1, r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	005a      	lsls	r2, r3, #1
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff fd5e 	bl	800d27e <framebuf_hline>

    int x = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	f1c3 0303 	rsb	r3, r3, #3
 800d7d2:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800d7d4:	e0ab      	b.n	800d92e <framebuf_fill_circle_quadrant+0x192>
        if (quadrant & QUADRANT_0) {
 800d7d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d01e      	beq.n	800d820 <framebuf_fill_circle_quadrant+0x84>
            if (y > 0) {
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	dd1b      	ble.n	800d820 <framebuf_fill_circle_quadrant+0x84>
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	18d1      	adds	r1, r2, r3
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	1ad2      	subs	r2, r2, r3
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	0058      	lsls	r0, r3, #1
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	9300      	str	r3, [sp, #0]
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f7ff fd3d 	bl	800d27e <framebuf_hline>
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	18d1      	adds	r1, r2, r3
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	441a      	add	r2, r3
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	0058      	lsls	r0, r3, #1
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	4603      	mov	r3, r0
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff fd2f 	bl	800d27e <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_90) {
 800d820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01e      	beq.n	800d86a <framebuf_fill_circle_quadrant+0xce>
            if (x > 0) {
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	dd1b      	ble.n	800d86a <framebuf_fill_circle_quadrant+0xce>
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	1ad1      	subs	r1, r2, r3
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	1ad2      	subs	r2, r2, r3
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	0058      	lsls	r0, r3, #1
 800d842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	4603      	mov	r3, r0
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f7ff fd18 	bl	800d27e <framebuf_hline>
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	1ad1      	subs	r1, r2, r3
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	441a      	add	r2, r3
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	0058      	lsls	r0, r3, #1
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	4603      	mov	r3, r0
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f7ff fd0a 	bl	800d27e <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_180) {
 800d86a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d86e:	f003 0304 	and.w	r3, r3, #4
 800d872:	2b00      	cmp	r3, #0
 800d874:	d01e      	beq.n	800d8b4 <framebuf_fill_circle_quadrant+0x118>
            if (y > 0) {
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dd1b      	ble.n	800d8b4 <framebuf_fill_circle_quadrant+0x118>
                framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	1ad1      	subs	r1, r2, r3
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	1ad2      	subs	r2, r2, r3
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	0058      	lsls	r0, r3, #1
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	4603      	mov	r3, r0
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f7ff fcf3 	bl	800d27e <framebuf_hline>
                framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	1ad1      	subs	r1, r2, r3
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	441a      	add	r2, r3
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	0058      	lsls	r0, r3, #1
 800d8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f7ff fce5 	bl	800d27e <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_270) {
 800d8b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d8b8:	f003 0308 	and.w	r3, r3, #8
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d01e      	beq.n	800d8fe <framebuf_fill_circle_quadrant+0x162>
            if (x > 0) {
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	dd1b      	ble.n	800d8fe <framebuf_fill_circle_quadrant+0x162>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	18d1      	adds	r1, r2, r3
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	1ad2      	subs	r2, r2, r3
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	0058      	lsls	r0, r3, #1
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4603      	mov	r3, r0
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f7ff fcce 	bl	800d27e <framebuf_hline>
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	18d1      	adds	r1, r2, r3
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	441a      	add	r2, r3
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	0058      	lsls	r0, r3, #1
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f7ff fcc0 	bl	800d27e <framebuf_hline>
            }
        }

        if (d < 0) {
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2b00      	cmp	r3, #0
 800d902:	da06      	bge.n	800d912 <framebuf_fill_circle_quadrant+0x176>
            d = d + 4 * x + 6;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	009a      	lsls	r2, r3, #2
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	4413      	add	r3, r2
 800d90c:	3306      	adds	r3, #6
 800d90e:	617b      	str	r3, [r7, #20]
 800d910:	e00a      	b.n	800d928 <framebuf_fill_circle_quadrant+0x18c>
        } else {
            d = d + 4 * (x - y) + 10;
 800d912:	69fa      	ldr	r2, [r7, #28]
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	009a      	lsls	r2, r3, #2
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	4413      	add	r3, r2
 800d91e:	330a      	adds	r3, #10
 800d920:	617b      	str	r3, [r7, #20]
            y--;
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	3b01      	subs	r3, #1
 800d926:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	3301      	adds	r3, #1
 800d92c:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800d92e:	69fa      	ldr	r2, [r7, #28]
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	429a      	cmp	r2, r3
 800d934:	f77f af4f 	ble.w	800d7d6 <framebuf_fill_circle_quadrant+0x3a>
    }
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	3720      	adds	r7, #32
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
    NK_ASSERT(b);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d105      	bne.n	800d962 <nk_buffer_init_fixed+0x1e>
 800d956:	4b1b      	ldr	r3, [pc, #108]	; (800d9c4 <nk_buffer_init_fixed+0x80>)
 800d958:	4a1b      	ldr	r2, [pc, #108]	; (800d9c8 <nk_buffer_init_fixed+0x84>)
 800d95a:	2136      	movs	r1, #54	; 0x36
 800d95c:	481b      	ldr	r0, [pc, #108]	; (800d9cc <nk_buffer_init_fixed+0x88>)
 800d95e:	f010 f807 	bl	801d970 <__assert_func>
    NK_ASSERT(m);
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d105      	bne.n	800d974 <nk_buffer_init_fixed+0x30>
 800d968:	4b19      	ldr	r3, [pc, #100]	; (800d9d0 <nk_buffer_init_fixed+0x8c>)
 800d96a:	4a17      	ldr	r2, [pc, #92]	; (800d9c8 <nk_buffer_init_fixed+0x84>)
 800d96c:	2137      	movs	r1, #55	; 0x37
 800d96e:	4817      	ldr	r0, [pc, #92]	; (800d9cc <nk_buffer_init_fixed+0x88>)
 800d970:	f00f fffe 	bl	801d970 <__assert_func>
    NK_ASSERT(size);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d105      	bne.n	800d986 <nk_buffer_init_fixed+0x42>
 800d97a:	4b16      	ldr	r3, [pc, #88]	; (800d9d4 <nk_buffer_init_fixed+0x90>)
 800d97c:	4a12      	ldr	r2, [pc, #72]	; (800d9c8 <nk_buffer_init_fixed+0x84>)
 800d97e:	2138      	movs	r1, #56	; 0x38
 800d980:	4812      	ldr	r0, [pc, #72]	; (800d9cc <nk_buffer_init_fixed+0x88>)
 800d982:	f00f fff5 	bl	801d970 <__assert_func>
    if (!b || !m || !size) return;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d016      	beq.n	800d9ba <nk_buffer_init_fixed+0x76>
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d013      	beq.n	800d9ba <nk_buffer_init_fixed+0x76>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d010      	beq.n	800d9ba <nk_buffer_init_fixed+0x76>

    nk_zero(b, sizeof(*b));
 800d998:	213c      	movs	r1, #60	; 0x3c
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	f00e fb00 	bl	801bfa0 <nk_zero>
    b->type = NK_BUFFER_FIXED;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	771a      	strb	r2, [r3, #28]
    b->memory.ptr = m;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	621a      	str	r2, [r3, #32]
    b->memory.size = size;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	625a      	str	r2, [r3, #36]	; 0x24
    b->size = size;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	639a      	str	r2, [r3, #56]	; 0x38
 800d9b8:	e000      	b.n	800d9bc <nk_buffer_init_fixed+0x78>
    if (!b || !m || !size) return;
 800d9ba:	bf00      	nop
}
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	0802139c 	.word	0x0802139c
 800d9c8:	080230c8 	.word	0x080230c8
 800d9cc:	080213a0 	.word	0x080213a0
 800d9d0:	080213d0 	.word	0x080213d0
 800d9d4:	080213d4 	.word	0x080213d4

0800d9d8 <nk_buffer_align>:
NK_LIB void*
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	70fb      	strb	r3, [r7, #3]
    void *memory = 0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	617b      	str	r3, [r7, #20]
    switch (type) {
 800d9ea:	78fb      	ldrb	r3, [r7, #3]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d018      	beq.n	800da22 <nk_buffer_align+0x4a>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00f      	beq.n	800da16 <nk_buffer_align+0x3e>
            memory = NK_ALIGN_PTR(unaligned, align);
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	461a      	mov	r2, r3
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	425b      	negs	r3, r3
 800da04:	4013      	ands	r3, r2
 800da06:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	461a      	mov	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800da14:	e01a      	b.n	800da4c <nk_buffer_align+0x74>
            memory = unaligned;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	601a      	str	r2, [r3, #0]
        break;
 800da20:	e014      	b.n	800da4c <nk_buffer_align+0x74>
    case NK_BUFFER_BACK:
        if (align) {
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00b      	beq.n	800da40 <nk_buffer_align+0x68>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	425a      	negs	r2, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4013      	ands	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800da3e:	e004      	b.n	800da4a <nk_buffer_align+0x72>
            memory = unaligned;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	601a      	str	r2, [r3, #0]
        break;
 800da4a:	bf00      	nop
    }
    return memory;
 800da4c:	697b      	ldr	r3, [r7, #20]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	371c      	adds	r7, #28
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
	...

0800da5c <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b08a      	sub	sp, #40	; 0x28
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d105      	bne.n	800da7a <nk_buffer_realloc+0x1e>
 800da6e:	4b3c      	ldr	r3, [pc, #240]	; (800db60 <nk_buffer_realloc+0x104>)
 800da70:	4a3c      	ldr	r2, [pc, #240]	; (800db64 <nk_buffer_realloc+0x108>)
 800da72:	2165      	movs	r1, #101	; 0x65
 800da74:	483c      	ldr	r0, [pc, #240]	; (800db68 <nk_buffer_realloc+0x10c>)
 800da76:	f00f ff7b 	bl	801d970 <__assert_func>
    NK_ASSERT(size);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d105      	bne.n	800da8c <nk_buffer_realloc+0x30>
 800da80:	4b3a      	ldr	r3, [pc, #232]	; (800db6c <nk_buffer_realloc+0x110>)
 800da82:	4a38      	ldr	r2, [pc, #224]	; (800db64 <nk_buffer_realloc+0x108>)
 800da84:	2166      	movs	r1, #102	; 0x66
 800da86:	4838      	ldr	r0, [pc, #224]	; (800db68 <nk_buffer_realloc+0x10c>)
 800da88:	f00f ff72 	bl	801d970 <__assert_func>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00a      	beq.n	800daa8 <nk_buffer_realloc+0x4c>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d007      	beq.n	800daa8 <nk_buffer_realloc+0x4c>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d003      	beq.n	800daa8 <nk_buffer_realloc+0x4c>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d101      	bne.n	800daac <nk_buffer_realloc+0x50>
        return 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	e054      	b.n	800db56 <nk_buffer_realloc+0xfa>

    buffer_size = b->memory.size;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	695b      	ldr	r3, [r3, #20]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	6a11      	ldr	r1, [r2, #32]
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	6900      	ldr	r0, [r0, #16]
 800dac0:	4798      	blx	r3
 800dac2:	6238      	str	r0, [r7, #32]
    NK_ASSERT(temp);
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d105      	bne.n	800dad6 <nk_buffer_realloc+0x7a>
 800daca:	4b29      	ldr	r3, [pc, #164]	; (800db70 <nk_buffer_realloc+0x114>)
 800dacc:	4a25      	ldr	r2, [pc, #148]	; (800db64 <nk_buffer_realloc+0x108>)
 800dace:	216c      	movs	r1, #108	; 0x6c
 800dad0:	4825      	ldr	r0, [pc, #148]	; (800db68 <nk_buffer_realloc+0x10c>)
 800dad2:	f00f ff4d 	bl	801d970 <__assert_func>
    if (!temp) return 0;
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <nk_buffer_realloc+0x84>
 800dadc:	2300      	movs	r3, #0
 800dade:	e03a      	b.n	800db56 <nk_buffer_realloc+0xfa>

    *size = capacity;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	601a      	str	r2, [r3, #0]
    if (temp != b->memory.ptr) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	6a3a      	ldr	r2, [r7, #32]
 800daec:	429a      	cmp	r2, r3
 800daee:	d00d      	beq.n	800db0c <nk_buffer_realloc+0xb0>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6a1b      	ldr	r3, [r3, #32]
 800daf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf6:	4619      	mov	r1, r3
 800daf8:	6a38      	ldr	r0, [r7, #32]
 800dafa:	f00e f901 	bl	801bd00 <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	6a11      	ldr	r1, [r2, #32]
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	6910      	ldr	r0, [r2, #16]
 800db0a:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db12:	429a      	cmp	r2, r3
 800db14:	d104      	bne.n	800db20 <nk_buffer_realloc+0xc4>
        /* no back buffer so just set correct size */
        b->size = capacity;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	639a      	str	r2, [r3, #56]	; 0x38
        return temp;
 800db1c:	6a3b      	ldr	r3, [r7, #32]
 800db1e:	e01a      	b.n	800db56 <nk_buffer_realloc+0xfa>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	61fb      	str	r3, [r7, #28]
        dst = nk_ptr_add(void, temp, capacity - back_size);
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	6a3a      	ldr	r2, [r7, #32]
 800db32:	4413      	add	r3, r2
 800db34:	61bb      	str	r3, [r7, #24]
        src = nk_ptr_add(void, temp, b->size);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3a:	6a3a      	ldr	r2, [r7, #32]
 800db3c:	4413      	add	r3, r2
 800db3e:	617b      	str	r3, [r7, #20]
        NK_MEMCPY(dst, src, back_size);
 800db40:	69fa      	ldr	r2, [r7, #28]
 800db42:	6979      	ldr	r1, [r7, #20]
 800db44:	69b8      	ldr	r0, [r7, #24]
 800db46:	f00e f8db 	bl	801bd00 <nk_memcopy>
        b->size = capacity - back_size;
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	1ad2      	subs	r2, r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return temp;
 800db54:	6a3b      	ldr	r3, [r7, #32]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3728      	adds	r7, #40	; 0x28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	0802139c 	.word	0x0802139c
 800db64:	080230e0 	.word	0x080230e0
 800db68:	080213a0 	.word	0x080213a0
 800db6c:	080213d4 	.word	0x080213d4
 800db70:	080213dc 	.word	0x080213dc

0800db74 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08a      	sub	sp, #40	; 0x28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	607a      	str	r2, [r7, #4]
 800db7e:	603b      	str	r3, [r7, #0]
 800db80:	460b      	mov	r3, r1
 800db82:	72fb      	strb	r3, [r7, #11]
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d105      	bne.n	800db96 <nk_buffer_alloc+0x22>
 800db8a:	4b7a      	ldr	r3, [pc, #488]	; (800dd74 <nk_buffer_alloc+0x200>)
 800db8c:	4a7a      	ldr	r2, [pc, #488]	; (800dd78 <nk_buffer_alloc+0x204>)
 800db8e:	218e      	movs	r1, #142	; 0x8e
 800db90:	487a      	ldr	r0, [pc, #488]	; (800dd7c <nk_buffer_alloc+0x208>)
 800db92:	f00f feed 	bl	801d970 <__assert_func>
    NK_ASSERT(size);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d105      	bne.n	800dba8 <nk_buffer_alloc+0x34>
 800db9c:	4b78      	ldr	r3, [pc, #480]	; (800dd80 <nk_buffer_alloc+0x20c>)
 800db9e:	4a76      	ldr	r2, [pc, #472]	; (800dd78 <nk_buffer_alloc+0x204>)
 800dba0:	218f      	movs	r1, #143	; 0x8f
 800dba2:	4876      	ldr	r0, [pc, #472]	; (800dd7c <nk_buffer_alloc+0x208>)
 800dba4:	f00f fee4 	bl	801d970 <__assert_func>
    if (!b || !size) return 0;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <nk_buffer_alloc+0x40>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <nk_buffer_alloc+0x44>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	e0d9      	b.n	800dd6c <nk_buffer_alloc+0x1f8>
    b->needed += size;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	441a      	add	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 800dbc4:	7afb      	ldrb	r3, [r7, #11]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d106      	bne.n	800dbd8 <nk_buffer_alloc+0x64>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6a1a      	ldr	r2, [r3, #32]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	4413      	add	r3, r2
 800dbd4:	623b      	str	r3, [r7, #32]
 800dbd6:	e007      	b.n	800dbe8 <nk_buffer_alloc+0x74>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6a1a      	ldr	r2, [r3, #32]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	1acb      	subs	r3, r1, r3
 800dbe4:	4413      	add	r3, r2
 800dbe6:	623b      	str	r3, [r7, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 800dbe8:	7afb      	ldrb	r3, [r7, #11]
 800dbea:	f107 0214 	add.w	r2, r7, #20
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	6a38      	ldr	r0, [r7, #32]
 800dbf2:	f7ff fef1 	bl	800d9d8 <nk_buffer_align>
 800dbf6:	61f8      	str	r0, [r7, #28]

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
 800dbf8:	7afb      	ldrb	r3, [r7, #11]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10e      	bne.n	800dc1c <nk_buffer_alloc+0xa8>
        full = ((b->allocated + size + alignment) > b->size);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	441a      	add	r2, r3
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	441a      	add	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	bf8c      	ite	hi
 800dc12:	2301      	movhi	r3, #1
 800dc14:	2300      	movls	r3, #0
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	627b      	str	r3, [r7, #36]	; 0x24
 800dc1a:	e012      	b.n	800dc42 <nk_buffer_alloc+0xce>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc20:	6979      	ldr	r1, [r7, #20]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4419      	add	r1, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2a:	428b      	cmp	r3, r1
 800dc2c:	bf28      	it	cs
 800dc2e:	460b      	movcs	r3, r1
 800dc30:	1ad2      	subs	r2, r2, r3
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc36:	429a      	cmp	r2, r3
 800dc38:	bf94      	ite	ls
 800dc3a:	2301      	movls	r3, #1
 800dc3c:	2300      	movhi	r3, #0
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	627b      	str	r3, [r7, #36]	; 0x24

    if (full) {
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d071      	beq.n	800dd2c <nk_buffer_alloc+0x1b8>
        nk_size capacity;
        if (b->type != NK_BUFFER_DYNAMIC)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	7f1b      	ldrb	r3, [r3, #28]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d001      	beq.n	800dc54 <nk_buffer_alloc+0xe0>
            return 0;
 800dc50:	2300      	movs	r3, #0
 800dc52:	e08b      	b.n	800dd6c <nk_buffer_alloc+0x1f8>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	695b      	ldr	r3, [r3, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d003      	beq.n	800dc64 <nk_buffer_alloc+0xf0>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	699b      	ldr	r3, [r3, #24]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d105      	bne.n	800dc70 <nk_buffer_alloc+0xfc>
 800dc64:	4b47      	ldr	r3, [pc, #284]	; (800dd84 <nk_buffer_alloc+0x210>)
 800dc66:	4a44      	ldr	r2, [pc, #272]	; (800dd78 <nk_buffer_alloc+0x204>)
 800dc68:	21a2      	movs	r1, #162	; 0xa2
 800dc6a:	4844      	ldr	r0, [pc, #272]	; (800dd7c <nk_buffer_alloc+0x208>)
 800dc6c:	f00f fe80 	bl	801d970 <__assert_func>
        if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	7f1b      	ldrb	r3, [r3, #28]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d107      	bne.n	800dc88 <nk_buffer_alloc+0x114>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	695b      	ldr	r3, [r3, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d003      	beq.n	800dc88 <nk_buffer_alloc+0x114>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d101      	bne.n	800dc8c <nk_buffer_alloc+0x118>
            return 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	e06f      	b.n	800dd6c <nk_buffer_alloc+0x1f8>

        /* buffer is full so allocate bigger buffer if dynamic */
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	ee07 3a90 	vmov	s15, r3
 800dc94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800dc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dca6:	ee17 3a90 	vmov	r3, s15
 800dcaa:	61bb      	str	r3, [r7, #24]
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f005 fcdf 	bl	8013678 <nk_round_up_pow2>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d208      	bcs.n	800dcd4 <nk_buffer_alloc+0x160>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4413      	add	r3, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f005 fcd4 	bl	8013678 <nk_round_up_pow2>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	e000      	b.n	800dcd6 <nk_buffer_alloc+0x162>
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	61bb      	str	r3, [r7, #24]
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3324      	adds	r3, #36	; 0x24
 800dcdc:	461a      	mov	r2, r3
 800dcde:	69b9      	ldr	r1, [r7, #24]
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f7ff febb 	bl	800da5c <nk_buffer_realloc>
 800dce6:	4602      	mov	r2, r0
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	621a      	str	r2, [r3, #32]
        if (!b->memory.ptr) return 0;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6a1b      	ldr	r3, [r3, #32]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <nk_buffer_alloc+0x184>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e039      	b.n	800dd6c <nk_buffer_alloc+0x1f8>

        /* align newly allocated pointer */
        if (type == NK_BUFFER_FRONT)
 800dcf8:	7afb      	ldrb	r3, [r7, #11]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d106      	bne.n	800dd0c <nk_buffer_alloc+0x198>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	6a1a      	ldr	r2, [r3, #32]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd06:	4413      	add	r3, r2
 800dd08:	623b      	str	r3, [r7, #32]
 800dd0a:	e007      	b.n	800dd1c <nk_buffer_alloc+0x1a8>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6a1a      	ldr	r2, [r3, #32]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	1acb      	subs	r3, r1, r3
 800dd18:	4413      	add	r3, r2
 800dd1a:	623b      	str	r3, [r7, #32]
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800dd1c:	7afb      	ldrb	r3, [r7, #11]
 800dd1e:	f107 0214 	add.w	r2, r7, #20
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6a38      	ldr	r0, [r7, #32]
 800dd26:	f7ff fe57 	bl	800d9d8 <nk_buffer_align>
 800dd2a:	61f8      	str	r0, [r7, #28]
    }
    if (type == NK_BUFFER_FRONT)
 800dd2c:	7afb      	ldrb	r3, [r7, #11]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d108      	bne.n	800dd44 <nk_buffer_alloc+0x1d0>
        b->allocated += size + alignment;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd36:	6979      	ldr	r1, [r7, #20]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	440b      	add	r3, r1
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd42:	e007      	b.n	800dd54 <nk_buffer_alloc+0x1e0>
    else b->size -= (size + alignment);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd48:	6979      	ldr	r1, [r7, #20]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	440b      	add	r3, r1
 800dd4e:	1ad2      	subs	r2, r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	639a      	str	r2, [r3, #56]	; 0x38
    b->needed += alignment;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	441a      	add	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	631a      	str	r2, [r3, #48]	; 0x30
    b->calls++;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd64:	1c5a      	adds	r2, r3, #1
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	635a      	str	r2, [r3, #52]	; 0x34
    return memory;
 800dd6a:	69fb      	ldr	r3, [r7, #28]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3728      	adds	r7, #40	; 0x28
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	0802139c 	.word	0x0802139c
 800dd78:	080230f4 	.word	0x080230f4
 800dd7c:	080213a0 	.word	0x080213a0
 800dd80:	080213d4 	.word	0x080213d4
 800dd84:	080213e4 	.word	0x080213e4

0800dd88 <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(buffer);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d105      	bne.n	800dda6 <nk_buffer_reset+0x1e>
 800dd9a:	4b2c      	ldr	r3, [pc, #176]	; (800de4c <nk_buffer_reset+0xc4>)
 800dd9c:	4a2c      	ldr	r2, [pc, #176]	; (800de50 <nk_buffer_reset+0xc8>)
 800dd9e:	21ce      	movs	r1, #206	; 0xce
 800dda0:	482c      	ldr	r0, [pc, #176]	; (800de54 <nk_buffer_reset+0xcc>)
 800dda2:	f00f fde5 	bl	801d970 <__assert_func>
    if (!buffer) return;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d04b      	beq.n	800de44 <nk_buffer_reset+0xbc>
    if (type == NK_BUFFER_BACK) {
 800ddac:	78fb      	ldrb	r3, [r7, #3]
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d124      	bne.n	800ddfc <nk_buffer_reset+0x74>
        /* reset back buffer either back to marker or empty */
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	6879      	ldr	r1, [r7, #4]
 800ddba:	00db      	lsls	r3, r3, #3
 800ddbc:	440b      	add	r3, r1
 800ddbe:	6859      	ldr	r1, [r3, #4]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc4:	1acb      	subs	r3, r1, r3
 800ddc6:	441a      	add	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800ddcc:	78fa      	ldrb	r2, [r7, #3]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d007      	beq.n	800dde8 <nk_buffer_reset+0x60>
            buffer->size = buffer->marker[type].offset;
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	00db      	lsls	r3, r3, #3
 800ddde:	4413      	add	r3, r2
 800dde0:	685a      	ldr	r2, [r3, #4]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	639a      	str	r2, [r3, #56]	; 0x38
 800dde6:	e003      	b.n	800ddf0 <nk_buffer_reset+0x68>
        else buffer->size = buffer->memory.size;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	639a      	str	r2, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 800ddf0:	78fa      	ldrb	r2, [r7, #3]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ddfa:	e024      	b.n	800de46 <nk_buffer_reset+0xbe>
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	440b      	add	r3, r1
 800de08:	6859      	ldr	r1, [r3, #4]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0e:	1acb      	subs	r3, r1, r3
 800de10:	441a      	add	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800de16:	78fa      	ldrb	r2, [r7, #3]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d007      	beq.n	800de32 <nk_buffer_reset+0xaa>
            buffer->allocated = buffer->marker[type].offset;
 800de22:	78fb      	ldrb	r3, [r7, #3]
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	00db      	lsls	r3, r3, #3
 800de28:	4413      	add	r3, r2
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	62da      	str	r2, [r3, #44]	; 0x2c
 800de30:	e002      	b.n	800de38 <nk_buffer_reset+0xb0>
        else buffer->allocated = 0;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	62da      	str	r2, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 800de38:	78fa      	ldrb	r2, [r7, #3]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2100      	movs	r1, #0
 800de3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800de42:	e000      	b.n	800de46 <nk_buffer_reset+0xbe>
    if (!buffer) return;
 800de44:	bf00      	nop
    }
}
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	08021404 	.word	0x08021404
 800de50:	08023104 	.word	0x08023104
 800de54:	080213a0 	.word	0x080213a0

0800de58 <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d105      	bne.n	800de72 <nk_buffer_clear+0x1a>
 800de66:	4b0d      	ldr	r3, [pc, #52]	; (800de9c <nk_buffer_clear+0x44>)
 800de68:	4a0d      	ldr	r2, [pc, #52]	; (800dea0 <nk_buffer_clear+0x48>)
 800de6a:	21e3      	movs	r1, #227	; 0xe3
 800de6c:	480d      	ldr	r0, [pc, #52]	; (800dea4 <nk_buffer_clear+0x4c>)
 800de6e:	f00f fd7f 	bl	801d970 <__assert_func>
    if (!b) return;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00d      	beq.n	800de94 <nk_buffer_clear+0x3c>
    b->allocated = 0;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	62da      	str	r2, [r3, #44]	; 0x2c
    b->size = b->memory.size;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	639a      	str	r2, [r3, #56]	; 0x38
    b->calls = 0;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	635a      	str	r2, [r3, #52]	; 0x34
    b->needed = 0;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	631a      	str	r2, [r3, #48]	; 0x30
 800de92:	e000      	b.n	800de96 <nk_buffer_clear+0x3e>
    if (!b) return;
 800de94:	bf00      	nop
}
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	0802139c 	.word	0x0802139c
 800dea0:	08023114 	.word	0x08023114
 800dea4:	080213a0 	.word	0x080213a0

0800dea8 <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b0a0      	sub	sp, #128	; 0x80
 800deac:	af02      	add	r7, sp, #8
 800deae:	6278      	str	r0, [r7, #36]	; 0x24
 800deb0:	eeb0 6a40 	vmov.f32	s12, s0
 800deb4:	eef0 6a60 	vmov.f32	s13, s1
 800deb8:	eeb0 7a41 	vmov.f32	s14, s2
 800debc:	eef0 7a61 	vmov.f32	s15, s3
 800dec0:	60fa      	str	r2, [r7, #12]
 800dec2:	60bb      	str	r3, [r7, #8]
 800dec4:	ed87 2a01 	vstr	s4, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dece:	ed87 6a04 	vstr	s12, [r7, #16]
 800ded2:	edc7 6a05 	vstr	s13, [r7, #20]
 800ded6:	ed87 7a06 	vstr	s14, [r7, #24]
 800deda:	edc7 7a07 	vstr	s15, [r7, #28]
    switch (type) {
 800dede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dee2:	3b01      	subs	r3, #1
 800dee4:	2b0b      	cmp	r3, #11
 800dee6:	f200 815e 	bhi.w	800e1a6 <nk_draw_symbol+0x2fe>
 800deea:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <nk_draw_symbol+0x48>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df21 	.word	0x0800df21
 800def4:	0800df21 	.word	0x0800df21
 800def8:	0800dfa9 	.word	0x0800dfa9
 800defc:	0800dfa9 	.word	0x0800dfa9
 800df00:	0800dfa9 	.word	0x0800dfa9
 800df04:	0800dfa9 	.word	0x0800dfa9
 800df08:	0800e10b 	.word	0x0800e10b
 800df0c:	0800e10b 	.word	0x0800e10b
 800df10:	0800e10b 	.word	0x0800e10b
 800df14:	0800e10b 	.word	0x0800e10b
 800df18:	0800df21 	.word	0x0800df21
 800df1c:	0800df21 	.word	0x0800df21
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 800df20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df24:	2b01      	cmp	r3, #1
 800df26:	d00d      	beq.n	800df44 <nk_draw_symbol+0x9c>
 800df28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d007      	beq.n	800df40 <nk_draw_symbol+0x98>
 800df30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df34:	2b0b      	cmp	r3, #11
 800df36:	d101      	bne.n	800df3c <nk_draw_symbol+0x94>
 800df38:	4b9e      	ldr	r3, [pc, #632]	; (800e1b4 <nk_draw_symbol+0x30c>)
 800df3a:	e004      	b.n	800df46 <nk_draw_symbol+0x9e>
 800df3c:	4b9e      	ldr	r3, [pc, #632]	; (800e1b8 <nk_draw_symbol+0x310>)
 800df3e:	e002      	b.n	800df46 <nk_draw_symbol+0x9e>
 800df40:	4b9e      	ldr	r3, [pc, #632]	; (800e1bc <nk_draw_symbol+0x314>)
 800df42:	e000      	b.n	800df46 <nk_draw_symbol+0x9e>
 800df44:	4b9e      	ldr	r3, [pc, #632]	; (800e1c0 <nk_draw_symbol+0x318>)
 800df46:	673b      	str	r3, [r7, #112]	; 0x70
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 800df48:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800e1c4 <nk_draw_symbol+0x31c>
 800df4c:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800e1c4 <nk_draw_symbol+0x31c>
 800df50:	f005 fc6e 	bl	8013830 <nk_vec2>
 800df54:	eeb0 7a40 	vmov.f32	s14, s0
 800df58:	eef0 7a60 	vmov.f32	s15, s1
 800df5c:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800df60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        text.background = background;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	64bb      	str	r3, [r7, #72]	; 0x48
        text.text = foreground;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	64fb      	str	r3, [r7, #76]	; 0x4c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 800df6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800df70:	ed97 6a04 	vldr	s12, [r7, #16]
 800df74:	edd7 6a05 	vldr	s13, [r7, #20]
 800df78:	ed97 7a06 	vldr	s14, [r7, #24]
 800df7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800df80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	2312      	movs	r3, #18
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	4613      	mov	r3, r2
 800df8c:	2201      	movs	r2, #1
 800df8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df90:	eeb0 0a46 	vmov.f32	s0, s12
 800df94:	eef0 0a66 	vmov.f32	s1, s13
 800df98:	eeb0 1a47 	vmov.f32	s2, s14
 800df9c:	eef0 1a67 	vmov.f32	s3, s15
 800dfa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfa2:	f00c fe43 	bl	801ac2c <nk_widget_text>
    } break;
 800dfa6:	e101      	b.n	800e1ac <nk_draw_symbol+0x304>
    case NK_SYMBOL_CIRCLE_SOLID:
    case NK_SYMBOL_CIRCLE_OUTLINE:
    case NK_SYMBOL_RECT_SOLID:
    case NK_SYMBOL_RECT_OUTLINE: {
        /* simple empty/filled shapes */
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 800dfa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfac:	2b05      	cmp	r3, #5
 800dfae:	d003      	beq.n	800dfb8 <nk_draw_symbol+0x110>
 800dfb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfb4:	2b06      	cmp	r3, #6
 800dfb6:	d155      	bne.n	800e064 <nk_draw_symbol+0x1bc>
            nk_fill_rect(out, content,  0, foreground);
 800dfb8:	ed97 6a04 	vldr	s12, [r7, #16]
 800dfbc:	edd7 6a05 	vldr	s13, [r7, #20]
 800dfc0:	ed97 7a06 	vldr	s14, [r7, #24]
 800dfc4:	edd7 7a07 	vldr	s15, [r7, #28]
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800e1c4 <nk_draw_symbol+0x31c>
 800dfce:	eeb0 0a46 	vmov.f32	s0, s12
 800dfd2:	eef0 0a66 	vmov.f32	s1, s13
 800dfd6:	eeb0 1a47 	vmov.f32	s2, s14
 800dfda:	eef0 1a67 	vmov.f32	s3, s15
 800dfde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfe0:	f002 fe18 	bl	8010c14 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800dfe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dfe8:	2b06      	cmp	r3, #6
 800dfea:	f040 808d 	bne.w	800e108 <nk_draw_symbol+0x260>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800dfee:	ed97 6a04 	vldr	s12, [r7, #16]
 800dff2:	edd7 6a05 	vldr	s13, [r7, #20]
 800dff6:	ed97 7a06 	vldr	s14, [r7, #24]
 800dffa:	edd7 7a07 	vldr	s15, [r7, #28]
 800dffe:	ed97 2a01 	vldr	s4, [r7, #4]
 800e002:	eeb0 0a46 	vmov.f32	s0, s12
 800e006:	eef0 0a66 	vmov.f32	s1, s13
 800e00a:	eeb0 1a47 	vmov.f32	s2, s14
 800e00e:	eef0 1a67 	vmov.f32	s3, s15
 800e012:	f005 fb8d 	bl	8013730 <nk_shrink_rect>
 800e016:	eeb0 6a40 	vmov.f32	s12, s0
 800e01a:	eef0 6a60 	vmov.f32	s13, s1
 800e01e:	eeb0 7a41 	vmov.f32	s14, s2
 800e022:	eef0 7a61 	vmov.f32	s15, s3
 800e026:	ed87 6a14 	vstr	s12, [r7, #80]	; 0x50
 800e02a:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 800e02e:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 800e032:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800e036:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800e03a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800e03e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800e042:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800e1c4 <nk_draw_symbol+0x31c>
 800e04c:	eeb0 0a46 	vmov.f32	s0, s12
 800e050:	eef0 0a66 	vmov.f32	s1, s13
 800e054:	eeb0 1a47 	vmov.f32	s2, s14
 800e058:	eef0 1a67 	vmov.f32	s3, s15
 800e05c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e05e:	f002 fdd9 	bl	8010c14 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800e062:	e051      	b.n	800e108 <nk_draw_symbol+0x260>
        } else {
            nk_fill_circle(out, content, foreground);
 800e064:	ed97 6a04 	vldr	s12, [r7, #16]
 800e068:	edd7 6a05 	vldr	s13, [r7, #20]
 800e06c:	ed97 7a06 	vldr	s14, [r7, #24]
 800e070:	edd7 7a07 	vldr	s15, [r7, #28]
 800e074:	68b9      	ldr	r1, [r7, #8]
 800e076:	eeb0 0a46 	vmov.f32	s0, s12
 800e07a:	eef0 0a66 	vmov.f32	s1, s13
 800e07e:	eeb0 1a47 	vmov.f32	s2, s14
 800e082:	eef0 1a67 	vmov.f32	s3, s15
 800e086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e088:	f002 feba 	bl	8010e00 <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 800e08c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e090:	2b04      	cmp	r3, #4
 800e092:	f040 808a 	bne.w	800e1aa <nk_draw_symbol+0x302>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 800e096:	ed97 6a04 	vldr	s12, [r7, #16]
 800e09a:	edd7 6a05 	vldr	s13, [r7, #20]
 800e09e:	ed97 7a06 	vldr	s14, [r7, #24]
 800e0a2:	edd7 7a07 	vldr	s15, [r7, #28]
 800e0a6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800e0aa:	eeb0 0a46 	vmov.f32	s0, s12
 800e0ae:	eef0 0a66 	vmov.f32	s1, s13
 800e0b2:	eeb0 1a47 	vmov.f32	s2, s14
 800e0b6:	eef0 1a67 	vmov.f32	s3, s15
 800e0ba:	f005 fb39 	bl	8013730 <nk_shrink_rect>
 800e0be:	eeb0 6a40 	vmov.f32	s12, s0
 800e0c2:	eef0 6a60 	vmov.f32	s13, s1
 800e0c6:	eeb0 7a41 	vmov.f32	s14, s2
 800e0ca:	eef0 7a61 	vmov.f32	s15, s3
 800e0ce:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 800e0d2:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 800e0d6:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 800e0da:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800e0de:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800e0e2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800e0e6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800e0ea:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800e0ee:	68f9      	ldr	r1, [r7, #12]
 800e0f0:	eeb0 0a46 	vmov.f32	s0, s12
 800e0f4:	eef0 0a66 	vmov.f32	s1, s13
 800e0f8:	eeb0 1a47 	vmov.f32	s2, s14
 800e0fc:	eef0 1a67 	vmov.f32	s3, s15
 800e100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e102:	f002 fe7d 	bl	8010e00 <nk_fill_circle>
        }
    } break;
 800e106:	e050      	b.n	800e1aa <nk_draw_symbol+0x302>
 800e108:	e04f      	b.n	800e1aa <nk_draw_symbol+0x302>
    case NK_SYMBOL_TRIANGLE_DOWN:
    case NK_SYMBOL_TRIANGLE_LEFT:
    case NK_SYMBOL_TRIANGLE_RIGHT: {
        enum nk_heading heading;
        struct nk_vec2 points[3];
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 800e10a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e10e:	2b0a      	cmp	r3, #10
 800e110:	d00d      	beq.n	800e12e <nk_draw_symbol+0x286>
 800e112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e116:	2b09      	cmp	r3, #9
 800e118:	d007      	beq.n	800e12a <nk_draw_symbol+0x282>
 800e11a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e11e:	2b07      	cmp	r3, #7
 800e120:	d101      	bne.n	800e126 <nk_draw_symbol+0x27e>
 800e122:	2300      	movs	r3, #0
 800e124:	e004      	b.n	800e130 <nk_draw_symbol+0x288>
 800e126:	2302      	movs	r3, #2
 800e128:	e002      	b.n	800e130 <nk_draw_symbol+0x288>
 800e12a:	2303      	movs	r3, #3
 800e12c:	e000      	b.n	800e130 <nk_draw_symbol+0x288>
 800e12e:	2301      	movs	r3, #1
 800e130:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
            (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;
        nk_triangle_from_direction(points, content, 0, 0, heading);
 800e134:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800e138:	ed97 6a04 	vldr	s12, [r7, #16]
 800e13c:	edd7 6a05 	vldr	s13, [r7, #20]
 800e140:	ed97 7a06 	vldr	s14, [r7, #24]
 800e144:	edd7 7a07 	vldr	s15, [r7, #28]
 800e148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e14c:	4611      	mov	r1, r2
 800e14e:	eddf 2a1d 	vldr	s5, [pc, #116]	; 800e1c4 <nk_draw_symbol+0x31c>
 800e152:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800e1c4 <nk_draw_symbol+0x31c>
 800e156:	eeb0 0a46 	vmov.f32	s0, s12
 800e15a:	eef0 0a66 	vmov.f32	s1, s13
 800e15e:	eeb0 1a47 	vmov.f32	s2, s14
 800e162:	eef0 1a67 	vmov.f32	s3, s15
 800e166:	4618      	mov	r0, r3
 800e168:	f005 fc34 	bl	80139d4 <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 800e16c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e170:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e174:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800e178:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800e17c:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800e180:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800e184:	68b9      	ldr	r1, [r7, #8]
 800e186:	eef0 2a45 	vmov.f32	s5, s10
 800e18a:	eeb0 2a65 	vmov.f32	s4, s11
 800e18e:	eef0 1a46 	vmov.f32	s3, s12
 800e192:	eeb0 1a66 	vmov.f32	s2, s13
 800e196:	eef0 0a47 	vmov.f32	s1, s14
 800e19a:	eeb0 0a67 	vmov.f32	s0, s15
 800e19e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1a0:	f002 ff18 	bl	8010fd4 <nk_fill_triangle>
            points[2].x, points[2].y, foreground);
    } break;
 800e1a4:	e002      	b.n	800e1ac <nk_draw_symbol+0x304>
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
 800e1a6:	bf00      	nop
 800e1a8:	e000      	b.n	800e1ac <nk_draw_symbol+0x304>
    } break;
 800e1aa:	bf00      	nop
    }
}
 800e1ac:	bf00      	nop
 800e1ae:	3778      	adds	r7, #120	; 0x78
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08021420 	.word	0x08021420
 800e1b8:	08021424 	.word	0x08021424
 800e1bc:	08021428 	.word	0x08021428
 800e1c0:	0802142c 	.word	0x0802142c
 800e1c4:	00000000 	.word	0x00000000

0800e1c8 <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	61f8      	str	r0, [r7, #28]
 800e1d0:	eeb0 6a40 	vmov.f32	s12, s0
 800e1d4:	eef0 6a60 	vmov.f32	s13, s1
 800e1d8:	eeb0 7a41 	vmov.f32	s14, s2
 800e1dc:	eef0 7a61 	vmov.f32	s15, s3
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	ed87 6a03 	vstr	s12, [r7, #12]
 800e1e8:	edc7 6a04 	vstr	s13, [r7, #16]
 800e1ec:	ed87 7a05 	vstr	s14, [r7, #20]
 800e1f0:	edc7 7a06 	vstr	s15, [r7, #24]
 800e1f4:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	627b      	str	r3, [r7, #36]	; 0x24
    nk_widget_state_reset(state);
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 0302 	and.w	r3, r3, #2
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <nk_button_behavior+0x46>
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	2206      	movs	r2, #6
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	e002      	b.n	800e214 <nk_button_behavior+0x4c>
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	2204      	movs	r2, #4
 800e212:	601a      	str	r2, [r3, #0]
    if (!i) return 0;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d101      	bne.n	800e21e <nk_button_behavior+0x56>
 800e21a:	2300      	movs	r3, #0
 800e21c:	e088      	b.n	800e330 <nk_button_behavior+0x168>
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 800e21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e222:	edd7 6a04 	vldr	s13, [r7, #16]
 800e226:	ed97 7a05 	vldr	s14, [r7, #20]
 800e22a:	edd7 7a06 	vldr	s15, [r7, #24]
 800e22e:	eeb0 0a46 	vmov.f32	s0, s12
 800e232:	eef0 0a66 	vmov.f32	s1, s13
 800e236:	eeb0 1a47 	vmov.f32	s2, s14
 800e23a:	eef0 1a67 	vmov.f32	s3, s15
 800e23e:	68b8      	ldr	r0, [r7, #8]
 800e240:	f004 f929 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d032      	beq.n	800e2b0 <nk_button_behavior+0xe8>
        *state = NK_WIDGET_STATE_HOVERED;
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	2212      	movs	r2, #18
 800e24e:	601a      	str	r2, [r3, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 800e250:	2100      	movs	r1, #0
 800e252:	68b8      	ldr	r0, [r7, #8]
 800e254:	f004 f9c3 	bl	80125de <nk_input_is_mouse_down>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <nk_button_behavior+0x9c>
            *state = NK_WIDGET_STATE_ACTIVE;
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	2222      	movs	r2, #34	; 0x22
 800e262:	601a      	str	r2, [r3, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 800e264:	ed97 6a03 	vldr	s12, [r7, #12]
 800e268:	edd7 6a04 	vldr	s13, [r7, #16]
 800e26c:	ed97 7a05 	vldr	s14, [r7, #20]
 800e270:	edd7 7a06 	vldr	s15, [r7, #24]
 800e274:	eeb0 0a46 	vmov.f32	s0, s12
 800e278:	eef0 0a66 	vmov.f32	s1, s13
 800e27c:	eeb0 1a47 	vmov.f32	s2, s14
 800e280:	eef0 1a67 	vmov.f32	s3, s15
 800e284:	2100      	movs	r1, #0
 800e286:	68b8      	ldr	r0, [r7, #8]
 800e288:	f004 f843 	bl	8012312 <nk_input_has_mouse_click_in_button_rect>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00e      	beq.n	800e2b0 <nk_button_behavior+0xe8>
            ret = (behavior != NK_BUTTON_DEFAULT) ?
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d005      	beq.n	800e2a4 <nk_button_behavior+0xdc>
 800e298:	2100      	movs	r1, #0
 800e29a:	68b8      	ldr	r0, [r7, #8]
 800e29c:	f004 f99f 	bl	80125de <nk_input_is_mouse_down>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	e004      	b.n	800e2ae <nk_button_behavior+0xe6>
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
                nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	68b8      	ldr	r0, [r7, #8]
 800e2a8:	f004 f9b1 	bl	801260e <nk_input_is_mouse_pressed>
 800e2ac:	4603      	mov	r3, r0
            ret = (behavior != NK_BUTTON_DEFAULT) ?
 800e2ae:	627b      	str	r3, [r7, #36]	; 0x24
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 0310 	and.w	r3, r3, #16
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d01c      	beq.n	800e2f6 <nk_button_behavior+0x12e>
 800e2bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2c0:	edd7 6a04 	vldr	s13, [r7, #16]
 800e2c4:	ed97 7a05 	vldr	s14, [r7, #20]
 800e2c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800e2cc:	eeb0 0a46 	vmov.f32	s0, s12
 800e2d0:	eef0 0a66 	vmov.f32	s1, s13
 800e2d4:	eeb0 1a47 	vmov.f32	s2, s14
 800e2d8:	eef0 1a67 	vmov.f32	s3, s15
 800e2dc:	68b8      	ldr	r0, [r7, #8]
 800e2de:	f004 f92c 	bl	801253a <nk_input_is_mouse_prev_hovering_rect>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d106      	bne.n	800e2f6 <nk_button_behavior+0x12e>
        *state |= NK_WIDGET_STATE_ENTERED;
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f043 0208 	orr.w	r2, r3, #8
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	e01b      	b.n	800e32e <nk_button_behavior+0x166>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800e2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2fa:	edd7 6a04 	vldr	s13, [r7, #16]
 800e2fe:	ed97 7a05 	vldr	s14, [r7, #20]
 800e302:	edd7 7a06 	vldr	s15, [r7, #24]
 800e306:	eeb0 0a46 	vmov.f32	s0, s12
 800e30a:	eef0 0a66 	vmov.f32	s1, s13
 800e30e:	eeb0 1a47 	vmov.f32	s2, s14
 800e312:	eef0 1a67 	vmov.f32	s3, s15
 800e316:	68b8      	ldr	r0, [r7, #8]
 800e318:	f004 f90f 	bl	801253a <nk_input_is_mouse_prev_hovering_rect>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d005      	beq.n	800e32e <nk_button_behavior+0x166>
        *state |= NK_WIDGET_STATE_LEFT;
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	601a      	str	r2, [r3, #0]
    return ret;
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e330:	4618      	mov	r0, r3
 800e332:	3728      	adds	r7, #40	; 0x28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
 800e344:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f003 0310 	and.w	r3, r3, #16
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d003      	beq.n	800e358 <nk_draw_button+0x20>
        background = &style->hover;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	331c      	adds	r3, #28
 800e354:	617b      	str	r3, [r7, #20]
 800e356:	e00a      	b.n	800e36e <nk_draw_button+0x36>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f003 0320 	and.w	r3, r3, #32
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <nk_draw_button+0x32>
        background = &style->active;
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	3338      	adds	r3, #56	; 0x38
 800e366:	617b      	str	r3, [r7, #20]
 800e368:	e001      	b.n	800e36e <nk_draw_button+0x36>
    else background = &style->normal;
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	617b      	str	r3, [r7, #20]

    switch(background->type) {
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	2b02      	cmp	r3, #2
 800e374:	d01e      	beq.n	800e3b4 <nk_draw_button+0x7c>
 800e376:	2b02      	cmp	r3, #2
 800e378:	dc71      	bgt.n	800e45e <nk_draw_button+0x126>
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d033      	beq.n	800e3e6 <nk_draw_button+0xae>
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d16d      	bne.n	800e45e <nk_draw_button+0x126>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	1d19      	adds	r1, r3, #4
 800e386:	4a38      	ldr	r2, [pc, #224]	; (800e468 <nk_draw_button+0x130>)
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	ed93 6a00 	vldr	s12, [r3]
 800e38e:	edd3 6a01 	vldr	s13, [r3, #4]
 800e392:	ed93 7a02 	vldr	s14, [r3, #8]
 800e396:	edd3 7a03 	vldr	s15, [r3, #12]
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	eeb0 0a46 	vmov.f32	s0, s12
 800e3a0:	eef0 0a66 	vmov.f32	s1, s13
 800e3a4:	eeb0 1a47 	vmov.f32	s2, s14
 800e3a8:	eef0 1a67 	vmov.f32	s3, s15
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f002 ff8b 	bl	80112c8 <nk_draw_image>
            break;
 800e3b2:	e054      	b.n	800e45e <nk_draw_button+0x126>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	1d19      	adds	r1, r3, #4
 800e3b8:	4a2b      	ldr	r2, [pc, #172]	; (800e468 <nk_draw_button+0x130>)
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	ed93 6a00 	vldr	s12, [r3]
 800e3c0:	edd3 6a01 	vldr	s13, [r3, #4]
 800e3c4:	ed93 7a02 	vldr	s14, [r3, #8]
 800e3c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800e3cc:	6812      	ldr	r2, [r2, #0]
 800e3ce:	eeb0 0a46 	vmov.f32	s0, s12
 800e3d2:	eef0 0a66 	vmov.f32	s1, s13
 800e3d6:	eeb0 1a47 	vmov.f32	s2, s14
 800e3da:	eef0 1a67 	vmov.f32	s3, s15
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f003 f864 	bl	80114ac <nk_draw_nine_slice>
            break;
 800e3e4:	e03b      	b.n	800e45e <nk_draw_button+0x126>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	ed93 6a00 	vldr	s12, [r3]
 800e3f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800e3f8:	ed93 7a02 	vldr	s14, [r3, #8]
 800e3fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800e400:	6851      	ldr	r1, [r2, #4]
 800e402:	eeb0 2a65 	vmov.f32	s4, s11
 800e406:	eeb0 0a46 	vmov.f32	s0, s12
 800e40a:	eef0 0a66 	vmov.f32	s1, s13
 800e40e:	eeb0 1a47 	vmov.f32	s2, s14
 800e412:	eef0 1a67 	vmov.f32	s3, s15
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f002 fbfc 	bl	8010c14 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	ed93 6a00 	vldr	s12, [r3]
 800e430:	edd3 6a01 	vldr	s13, [r3, #4]
 800e434:	ed93 7a02 	vldr	s14, [r3, #8]
 800e438:	edd3 7a03 	vldr	s15, [r3, #12]
 800e43c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e43e:	eef0 2a45 	vmov.f32	s5, s10
 800e442:	eeb0 2a65 	vmov.f32	s4, s11
 800e446:	eeb0 0a46 	vmov.f32	s0, s12
 800e44a:	eef0 0a66 	vmov.f32	s1, s13
 800e44e:	eeb0 1a47 	vmov.f32	s2, s14
 800e452:	eef0 1a67 	vmov.f32	s3, s15
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f002 fad4 	bl	8010a04 <nk_stroke_rect>
            break;
 800e45c:	bf00      	nop
    }
    return background;
 800e45e:	697b      	ldr	r3, [r7, #20]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	08023124 	.word	0x08023124

0800e46c <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08c      	sub	sp, #48	; 0x30
 800e470:	af00      	add	r7, sp, #0
 800e472:	61f8      	str	r0, [r7, #28]
 800e474:	61b9      	str	r1, [r7, #24]
 800e476:	eeb0 6a40 	vmov.f32	s12, s0
 800e47a:	eef0 6a60 	vmov.f32	s13, s1
 800e47e:	eeb0 7a41 	vmov.f32	s14, s2
 800e482:	eef0 7a61 	vmov.f32	s15, s3
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
 800e48a:	ed87 6a02 	vstr	s12, [r7, #8]
 800e48e:	edc7 6a03 	vstr	s13, [r7, #12]
 800e492:	ed87 7a04 	vstr	s14, [r7, #16]
 800e496:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect bounds;
    NK_ASSERT(style);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d105      	bne.n	800e4ac <nk_do_button+0x40>
 800e4a0:	4b5d      	ldr	r3, [pc, #372]	; (800e618 <nk_do_button+0x1ac>)
 800e4a2:	4a5e      	ldr	r2, [pc, #376]	; (800e61c <nk_do_button+0x1b0>)
 800e4a4:	2179      	movs	r1, #121	; 0x79
 800e4a6:	485e      	ldr	r0, [pc, #376]	; (800e620 <nk_do_button+0x1b4>)
 800e4a8:	f00f fa62 	bl	801d970 <__assert_func>
    NK_ASSERT(state);
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d105      	bne.n	800e4be <nk_do_button+0x52>
 800e4b2:	4b5c      	ldr	r3, [pc, #368]	; (800e624 <nk_do_button+0x1b8>)
 800e4b4:	4a59      	ldr	r2, [pc, #356]	; (800e61c <nk_do_button+0x1b0>)
 800e4b6:	217a      	movs	r1, #122	; 0x7a
 800e4b8:	4859      	ldr	r0, [pc, #356]	; (800e620 <nk_do_button+0x1b4>)
 800e4ba:	f00f fa59 	bl	801d970 <__assert_func>
    NK_ASSERT(out);
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d105      	bne.n	800e4d0 <nk_do_button+0x64>
 800e4c4:	4b58      	ldr	r3, [pc, #352]	; (800e628 <nk_do_button+0x1bc>)
 800e4c6:	4a55      	ldr	r2, [pc, #340]	; (800e61c <nk_do_button+0x1b0>)
 800e4c8:	217b      	movs	r1, #123	; 0x7b
 800e4ca:	4855      	ldr	r0, [pc, #340]	; (800e620 <nk_do_button+0x1b4>)
 800e4cc:	f00f fa50 	bl	801d970 <__assert_func>
    if (!out || !style)
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d002      	beq.n	800e4dc <nk_do_button+0x70>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <nk_do_button+0x74>
        return nk_false;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	e097      	b.n	800e610 <nk_do_button+0x1a4>

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800e4e0:	ed97 7a02 	vldr	s14, [r7, #8]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800e4ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e4f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800e4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e504:	edc3 7a00 	vstr	s15, [r3]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 800e508:	ed97 7a03 	vldr	s14, [r7, #12]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800e512:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e51c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800e526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	edc3 7a01 	vstr	s15, [r3, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 800e530:	ed97 7a04 	vldr	s14, [r7, #16]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800e53a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e544:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800e54e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55c:	edc3 7a02 	vstr	s15, [r3, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 800e560:	ed97 7a05 	vldr	s14, [r7, #20]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800e56a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e574:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800e57e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58c:	edc3 7a03 	vstr	s15, [r3, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 800e590:	ed97 7a02 	vldr	s14, [r7, #8]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800e59a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e59e:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.y = r.y - style->touch_padding.y;
 800e5a2:	ed97 7a03 	vldr	s14, [r7, #12]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800e5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = r.w + 2 * style->touch_padding.x;
 800e5b4:	ed97 7a04 	vldr	s14, [r7, #16]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800e5be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e5c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    bounds.h = r.h + 2 * style->touch_padding.y;
 800e5ca:	ed97 7a05 	vldr	s14, [r7, #20]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800e5d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e5d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return nk_button_behavior(state, bounds, in, behavior);
 800e5e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e5e4:	ed97 6a08 	vldr	s12, [r7, #32]
 800e5e8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e5ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e5f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	eeb0 0a46 	vmov.f32	s0, s12
 800e5fc:	eef0 0a66 	vmov.f32	s1, s13
 800e600:	eeb0 1a47 	vmov.f32	s2, s14
 800e604:	eef0 1a67 	vmov.f32	s3, s15
 800e608:	69f8      	ldr	r0, [r7, #28]
 800e60a:	f7ff fddd 	bl	800e1c8 <nk_button_behavior>
 800e60e:	4603      	mov	r3, r0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3730      	adds	r7, #48	; 0x30
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	08021430 	.word	0x08021430
 800e61c:	08023128 	.word	0x08023128
 800e620:	08021438 	.word	0x08021438
 800e624:	08021454 	.word	0x08021454
 800e628:	0802145c 	.word	0x0802145c

0800e62c <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b08c      	sub	sp, #48	; 0x30
 800e630:	af02      	add	r7, sp, #8
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	683a      	ldr	r2, [r7, #0]
 800e63e:	68b9      	ldr	r1, [r7, #8]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7ff fe79 	bl	800e338 <nk_draw_button>
 800e646:	6278      	str	r0, [r7, #36]	; 0x24

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d103      	bne.n	800e658 <nk_draw_button_text+0x2c>
        text.background = background->data.color;
 800e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	61fb      	str	r3, [r7, #28]
 800e656:	e002      	b.n	800e65e <nk_draw_button_text+0x32>
    else text.background = style->text_background;
 800e658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e65c:	61fb      	str	r3, [r7, #28]
    if (state & NK_WIDGET_STATE_HOVER)
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	f003 0310 	and.w	r3, r3, #16
 800e664:	2b00      	cmp	r3, #0
 800e666:	d003      	beq.n	800e670 <nk_draw_button_text+0x44>
        text.text = style->text_hover;
 800e668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e66c:	623b      	str	r3, [r7, #32]
 800e66e:	e00b      	b.n	800e688 <nk_draw_button_text+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	f003 0320 	and.w	r3, r3, #32
 800e676:	2b00      	cmp	r3, #0
 800e678:	d003      	beq.n	800e682 <nk_draw_button_text+0x56>
        text.text = style->text_active;
 800e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e67e:	623b      	str	r3, [r7, #32]
 800e680:	e002      	b.n	800e688 <nk_draw_button_text+0x5c>
    else text.text = style->text_normal;
 800e682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e686:	623b      	str	r3, [r7, #32]

    text.padding = nk_vec2(0,0);
 800e688:	eddf 0a17 	vldr	s1, [pc, #92]	; 800e6e8 <nk_draw_button_text+0xbc>
 800e68c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800e6e8 <nk_draw_button_text+0xbc>
 800e690:	f005 f8ce 	bl	8013830 <nk_vec2>
 800e694:	eeb0 7a40 	vmov.f32	s14, s0
 800e698:	eef0 7a60 	vmov.f32	s15, s1
 800e69c:	ed87 7a05 	vstr	s14, [r7, #20]
 800e6a0:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800e6a4:	f107 0214 	add.w	r2, r7, #20
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	ed93 6a00 	vldr	s12, [r3]
 800e6ae:	edd3 6a01 	vldr	s13, [r3, #4]
 800e6b2:	ed93 7a02 	vldr	s14, [r3, #8]
 800e6b6:	edd3 7a03 	vldr	s15, [r3, #12]
 800e6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6bc:	9301      	str	r3, [sp, #4]
 800e6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6c8:	eeb0 0a46 	vmov.f32	s0, s12
 800e6cc:	eef0 0a66 	vmov.f32	s1, s13
 800e6d0:	eeb0 1a47 	vmov.f32	s2, s14
 800e6d4:	eef0 1a67 	vmov.f32	s3, s15
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f00c faa7 	bl	801ac2c <nk_widget_text>
}
 800e6de:	bf00      	nop
 800e6e0:	3728      	adds	r7, #40	; 0x28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	00000000 	.word	0x00000000

0800e6ec <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b094      	sub	sp, #80	; 0x50
 800e6f0:	af06      	add	r7, sp, #24
 800e6f2:	61f8      	str	r0, [r7, #28]
 800e6f4:	61b9      	str	r1, [r7, #24]
 800e6f6:	eeb0 6a40 	vmov.f32	s12, s0
 800e6fa:	eef0 6a60 	vmov.f32	s13, s1
 800e6fe:	eeb0 7a41 	vmov.f32	s14, s2
 800e702:	eef0 7a61 	vmov.f32	s15, s3
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
 800e70a:	ed87 6a02 	vstr	s12, [r7, #8]
 800e70e:	edc7 6a03 	vstr	s13, [r7, #12]
 800e712:	ed87 7a04 	vstr	s14, [r7, #16]
 800e716:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect content;
    int ret = nk_false;
 800e71a:	2300      	movs	r3, #0
 800e71c:	637b      	str	r3, [r7, #52]	; 0x34

    NK_ASSERT(state);
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d105      	bne.n	800e730 <nk_do_button_text+0x44>
 800e724:	4b43      	ldr	r3, [pc, #268]	; (800e834 <nk_do_button_text+0x148>)
 800e726:	4a44      	ldr	r2, [pc, #272]	; (800e838 <nk_do_button_text+0x14c>)
 800e728:	21ad      	movs	r1, #173	; 0xad
 800e72a:	4844      	ldr	r0, [pc, #272]	; (800e83c <nk_do_button_text+0x150>)
 800e72c:	f00f f920 	bl	801d970 <__assert_func>
    NK_ASSERT(style);
 800e730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e732:	2b00      	cmp	r3, #0
 800e734:	d105      	bne.n	800e742 <nk_do_button_text+0x56>
 800e736:	4b42      	ldr	r3, [pc, #264]	; (800e840 <nk_do_button_text+0x154>)
 800e738:	4a3f      	ldr	r2, [pc, #252]	; (800e838 <nk_do_button_text+0x14c>)
 800e73a:	21ae      	movs	r1, #174	; 0xae
 800e73c:	483f      	ldr	r0, [pc, #252]	; (800e83c <nk_do_button_text+0x150>)
 800e73e:	f00f f917 	bl	801d970 <__assert_func>
    NK_ASSERT(out);
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d105      	bne.n	800e754 <nk_do_button_text+0x68>
 800e748:	4b3e      	ldr	r3, [pc, #248]	; (800e844 <nk_do_button_text+0x158>)
 800e74a:	4a3b      	ldr	r2, [pc, #236]	; (800e838 <nk_do_button_text+0x14c>)
 800e74c:	21af      	movs	r1, #175	; 0xaf
 800e74e:	483b      	ldr	r0, [pc, #236]	; (800e83c <nk_do_button_text+0x150>)
 800e750:	f00f f90e 	bl	801d970 <__assert_func>
    NK_ASSERT(string);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d105      	bne.n	800e766 <nk_do_button_text+0x7a>
 800e75a:	4b3b      	ldr	r3, [pc, #236]	; (800e848 <nk_do_button_text+0x15c>)
 800e75c:	4a36      	ldr	r2, [pc, #216]	; (800e838 <nk_do_button_text+0x14c>)
 800e75e:	21b0      	movs	r1, #176	; 0xb0
 800e760:	4836      	ldr	r0, [pc, #216]	; (800e83c <nk_do_button_text+0x150>)
 800e762:	f00f f905 	bl	801d970 <__assert_func>
    NK_ASSERT(font);
 800e766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d105      	bne.n	800e778 <nk_do_button_text+0x8c>
 800e76c:	4b37      	ldr	r3, [pc, #220]	; (800e84c <nk_do_button_text+0x160>)
 800e76e:	4a32      	ldr	r2, [pc, #200]	; (800e838 <nk_do_button_text+0x14c>)
 800e770:	21b1      	movs	r1, #177	; 0xb1
 800e772:	4832      	ldr	r0, [pc, #200]	; (800e83c <nk_do_button_text+0x150>)
 800e774:	f00f f8fc 	bl	801d970 <__assert_func>
    if (!out || !style || !font || !string)
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d008      	beq.n	800e790 <nk_do_button_text+0xa4>
 800e77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e780:	2b00      	cmp	r3, #0
 800e782:	d005      	beq.n	800e790 <nk_do_button_text+0xa4>
 800e784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e786:	2b00      	cmp	r3, #0
 800e788:	d002      	beq.n	800e790 <nk_do_button_text+0xa4>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d101      	bne.n	800e794 <nk_do_button_text+0xa8>
        return nk_false;
 800e790:	2300      	movs	r3, #0
 800e792:	e04b      	b.n	800e82c <nk_do_button_text+0x140>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800e794:	ed97 6a02 	vldr	s12, [r7, #8]
 800e798:	edd7 6a03 	vldr	s13, [r7, #12]
 800e79c:	ed97 7a04 	vldr	s14, [r7, #16]
 800e7a0:	edd7 7a05 	vldr	s15, [r7, #20]
 800e7a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7a8:	9301      	str	r3, [sp, #4]
 800e7aa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b4:	eeb0 0a46 	vmov.f32	s0, s12
 800e7b8:	eef0 0a66 	vmov.f32	s1, s13
 800e7bc:	eeb0 1a47 	vmov.f32	s2, s14
 800e7c0:	eef0 1a67 	vmov.f32	s3, s15
 800e7c4:	69b9      	ldr	r1, [r7, #24]
 800e7c6:	69f8      	ldr	r0, [r7, #28]
 800e7c8:	f7ff fe50 	bl	800e46c <nk_do_button>
 800e7cc:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800e7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d007      	beq.n	800e7e8 <nk_do_button_text+0xfc>
 800e7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7e0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800e7e4:	69b8      	ldr	r0, [r7, #24]
 800e7e6:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	6818      	ldr	r0, [r3, #0]
 800e7ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e7f0:	f107 0108 	add.w	r1, r7, #8
 800e7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f6:	9304      	str	r3, [sp, #16]
 800e7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7fa:	9303      	str	r3, [sp, #12]
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	9302      	str	r3, [sp, #8]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	4603      	mov	r3, r0
 800e80a:	69b8      	ldr	r0, [r7, #24]
 800e80c:	f7ff ff0e 	bl	800e62c <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800e810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e816:	2b00      	cmp	r3, #0
 800e818:	d007      	beq.n	800e82a <nk_do_button_text+0x13e>
 800e81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e81c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e822:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800e826:	69b8      	ldr	r0, [r7, #24]
 800e828:	4798      	blx	r3
    return ret;
 800e82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3738      	adds	r7, #56	; 0x38
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	08021454 	.word	0x08021454
 800e838:	08023138 	.word	0x08023138
 800e83c:	08021438 	.word	0x08021438
 800e840:	08021430 	.word	0x08021430
 800e844:	0802145c 	.word	0x0802145c
 800e848:	08021460 	.word	0x08021460
 800e84c:	08021468 	.word	0x08021468

0800e850 <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b08a      	sub	sp, #40	; 0x28
 800e854:	af02      	add	r7, sp, #8
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 800e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e860:	683a      	ldr	r2, [r7, #0]
 800e862:	68b9      	ldr	r1, [r7, #8]
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7ff fd67 	bl	800e338 <nk_draw_button>
 800e86a:	61f8      	str	r0, [r7, #28]
    if (background->type == NK_STYLE_ITEM_COLOR)
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d103      	bne.n	800e87c <nk_draw_button_symbol+0x2c>
        bg = background->data.color;
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	617b      	str	r3, [r7, #20]
 800e87a:	e002      	b.n	800e882 <nk_draw_button_symbol+0x32>
    else bg = style->text_background;
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e880:	617b      	str	r3, [r7, #20]

    if (state & NK_WIDGET_STATE_HOVER)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	f003 0310 	and.w	r3, r3, #16
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <nk_draw_button_symbol+0x44>
        sym = style->text_hover;
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e890:	61bb      	str	r3, [r7, #24]
 800e892:	e00b      	b.n	800e8ac <nk_draw_button_symbol+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	f003 0320 	and.w	r3, r3, #32
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <nk_draw_button_symbol+0x56>
        sym = style->text_active;
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8a2:	61bb      	str	r3, [r7, #24]
 800e8a4:	e002      	b.n	800e8ac <nk_draw_button_symbol+0x5c>
    else sym = style->text_normal;
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8aa:	61bb      	str	r3, [r7, #24]
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	ed93 6a00 	vldr	s12, [r3]
 800e8b2:	edd3 6a01 	vldr	s13, [r3, #4]
 800e8b6:	ed93 7a02 	vldr	s14, [r3, #8]
 800e8ba:	edd3 7a03 	vldr	s15, [r3, #12]
 800e8be:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	697a      	ldr	r2, [r7, #20]
 800e8ce:	eeb0 0a46 	vmov.f32	s0, s12
 800e8d2:	eef0 0a66 	vmov.f32	s1, s13
 800e8d6:	eeb0 1a47 	vmov.f32	s2, s14
 800e8da:	eef0 1a67 	vmov.f32	s3, s15
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f7ff fae2 	bl	800dea8 <nk_draw_symbol>
}
 800e8e4:	bf00      	nop
 800e8e6:	3720      	adds	r7, #32
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b092      	sub	sp, #72	; 0x48
 800e8f0:	af04      	add	r7, sp, #16
 800e8f2:	61f8      	str	r0, [r7, #28]
 800e8f4:	61b9      	str	r1, [r7, #24]
 800e8f6:	eeb0 6a40 	vmov.f32	s12, s0
 800e8fa:	eef0 6a60 	vmov.f32	s13, s1
 800e8fe:	eeb0 7a41 	vmov.f32	s14, s2
 800e902:	eef0 7a61 	vmov.f32	s15, s3
 800e906:	4611      	mov	r1, r2
 800e908:	461a      	mov	r2, r3
 800e90a:	ed87 6a02 	vstr	s12, [r7, #8]
 800e90e:	edc7 6a03 	vstr	s13, [r7, #12]
 800e912:	ed87 7a04 	vstr	s14, [r7, #16]
 800e916:	edc7 7a05 	vstr	s15, [r7, #20]
 800e91a:	460b      	mov	r3, r1
 800e91c:	71fb      	strb	r3, [r7, #7]
 800e91e:	4613      	mov	r3, r2
 800e920:	71bb      	strb	r3, [r7, #6]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d105      	bne.n	800e934 <nk_do_button_symbol+0x48>
 800e928:	4b3c      	ldr	r3, [pc, #240]	; (800ea1c <nk_do_button_symbol+0x130>)
 800e92a:	4a3d      	ldr	r2, [pc, #244]	; (800ea20 <nk_do_button_symbol+0x134>)
 800e92c:	21db      	movs	r1, #219	; 0xdb
 800e92e:	483d      	ldr	r0, [pc, #244]	; (800ea24 <nk_do_button_symbol+0x138>)
 800e930:	f00f f81e 	bl	801d970 <__assert_func>
    NK_ASSERT(style);
 800e934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e936:	2b00      	cmp	r3, #0
 800e938:	d105      	bne.n	800e946 <nk_do_button_symbol+0x5a>
 800e93a:	4b3b      	ldr	r3, [pc, #236]	; (800ea28 <nk_do_button_symbol+0x13c>)
 800e93c:	4a38      	ldr	r2, [pc, #224]	; (800ea20 <nk_do_button_symbol+0x134>)
 800e93e:	21dc      	movs	r1, #220	; 0xdc
 800e940:	4838      	ldr	r0, [pc, #224]	; (800ea24 <nk_do_button_symbol+0x138>)
 800e942:	f00f f815 	bl	801d970 <__assert_func>
    NK_ASSERT(font);
 800e946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d105      	bne.n	800e958 <nk_do_button_symbol+0x6c>
 800e94c:	4b37      	ldr	r3, [pc, #220]	; (800ea2c <nk_do_button_symbol+0x140>)
 800e94e:	4a34      	ldr	r2, [pc, #208]	; (800ea20 <nk_do_button_symbol+0x134>)
 800e950:	21dd      	movs	r1, #221	; 0xdd
 800e952:	4834      	ldr	r0, [pc, #208]	; (800ea24 <nk_do_button_symbol+0x138>)
 800e954:	f00f f80c 	bl	801d970 <__assert_func>
    NK_ASSERT(out);
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d105      	bne.n	800e96a <nk_do_button_symbol+0x7e>
 800e95e:	4b34      	ldr	r3, [pc, #208]	; (800ea30 <nk_do_button_symbol+0x144>)
 800e960:	4a2f      	ldr	r2, [pc, #188]	; (800ea20 <nk_do_button_symbol+0x134>)
 800e962:	21de      	movs	r1, #222	; 0xde
 800e964:	482f      	ldr	r0, [pc, #188]	; (800ea24 <nk_do_button_symbol+0x138>)
 800e966:	f00f f803 	bl	801d970 <__assert_func>
    if (!out || !style || !font || !state)
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d008      	beq.n	800e982 <nk_do_button_symbol+0x96>
 800e970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e972:	2b00      	cmp	r3, #0
 800e974:	d005      	beq.n	800e982 <nk_do_button_symbol+0x96>
 800e976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <nk_do_button_symbol+0x96>
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <nk_do_button_symbol+0x9a>
        return nk_false;
 800e982:	2300      	movs	r3, #0
 800e984:	e046      	b.n	800ea14 <nk_do_button_symbol+0x128>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800e986:	ed97 6a02 	vldr	s12, [r7, #8]
 800e98a:	edd7 6a03 	vldr	s13, [r7, #12]
 800e98e:	ed97 7a04 	vldr	s14, [r7, #16]
 800e992:	edd7 7a05 	vldr	s15, [r7, #20]
 800e996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e99a:	9301      	str	r3, [sp, #4]
 800e99c:	79bb      	ldrb	r3, [r7, #6]
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9a4:	eeb0 0a46 	vmov.f32	s0, s12
 800e9a8:	eef0 0a66 	vmov.f32	s1, s13
 800e9ac:	eeb0 1a47 	vmov.f32	s2, s14
 800e9b0:	eef0 1a67 	vmov.f32	s3, s15
 800e9b4:	69b9      	ldr	r1, [r7, #24]
 800e9b6:	69f8      	ldr	r0, [r7, #28]
 800e9b8:	f7ff fd58 	bl	800e46c <nk_do_button>
 800e9bc:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800e9be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d007      	beq.n	800e9d8 <nk_do_button_symbol+0xec>
 800e9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800e9d4:	69b8      	ldr	r0, [r7, #24]
 800e9d6:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e9e0:	f107 0108 	add.w	r1, r7, #8
 800e9e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9e6:	9302      	str	r3, [sp, #8]
 800e9e8:	79fb      	ldrb	r3, [r7, #7]
 800e9ea:	9301      	str	r3, [sp, #4]
 800e9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	69b8      	ldr	r0, [r7, #24]
 800e9f4:	f7ff ff2c 	bl	800e850 <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800e9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d007      	beq.n	800ea12 <nk_do_button_symbol+0x126>
 800ea02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea0a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800ea0e:	69b8      	ldr	r0, [r7, #24]
 800ea10:	4798      	blx	r3
    return ret;
 800ea12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3738      	adds	r7, #56	; 0x38
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	08021454 	.word	0x08021454
 800ea20:	0802314c 	.word	0x0802314c
 800ea24:	08021438 	.word	0x08021438
 800ea28:	08021430 	.word	0x08021430
 800ea2c:	08021468 	.word	0x08021468
 800ea30:	0802145c 	.word	0x0802145c

0800ea34 <nk_button_set_behavior>:
    if (style->draw_end) style->draw_end(out, style->userdata);
    return ret;
}
NK_API void
nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <nk_button_set_behavior+0x20>
 800ea46:	4b0b      	ldr	r3, [pc, #44]	; (800ea74 <nk_button_set_behavior+0x40>)
 800ea48:	4a0b      	ldr	r2, [pc, #44]	; (800ea78 <nk_button_set_behavior+0x44>)
 800ea4a:	f240 118b 	movw	r1, #395	; 0x18b
 800ea4e:	480b      	ldr	r0, [pc, #44]	; (800ea7c <nk_button_set_behavior+0x48>)
 800ea50:	f00e ff8e 	bl	801d970 <__assert_func>
    if (!ctx) return;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d007      	beq.n	800ea6a <nk_button_set_behavior+0x36>
    ctx->button_behavior = behavior;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea60:	461a      	mov	r2, r3
 800ea62:	78fb      	ldrb	r3, [r7, #3]
 800ea64:	f882 3ad8 	strb.w	r3, [r2, #2776]	; 0xad8
 800ea68:	e000      	b.n	800ea6c <nk_button_set_behavior+0x38>
    if (!ctx) return;
 800ea6a:	bf00      	nop
}
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	08021470 	.word	0x08021470
 800ea78:	08023160 	.word	0x08023160
 800ea7c:	08021438 	.word	0x08021438

0800ea80 <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b093      	sub	sp, #76	; 0x4c
 800ea84:	af06      	add	r7, sp, #24
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	603b      	str	r3, [r7, #0]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d106      	bne.n	800eaa2 <nk_button_text_styled+0x22>
 800ea94:	4b4f      	ldr	r3, [pc, #316]	; (800ebd4 <nk_button_text_styled+0x154>)
 800ea96:	4a50      	ldr	r2, [pc, #320]	; (800ebd8 <nk_button_text_styled+0x158>)
 800ea98:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800ea9c:	484f      	ldr	r0, [pc, #316]	; (800ebdc <nk_button_text_styled+0x15c>)
 800ea9e:	f00e ff67 	bl	801d970 <__assert_func>
    NK_ASSERT(style);
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d106      	bne.n	800eab6 <nk_button_text_styled+0x36>
 800eaa8:	4b4d      	ldr	r3, [pc, #308]	; (800ebe0 <nk_button_text_styled+0x160>)
 800eaaa:	4a4b      	ldr	r2, [pc, #300]	; (800ebd8 <nk_button_text_styled+0x158>)
 800eaac:	f240 11c1 	movw	r1, #449	; 0x1c1
 800eab0:	484a      	ldr	r0, [pc, #296]	; (800ebdc <nk_button_text_styled+0x15c>)
 800eab2:	f00e ff5d 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eabc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d106      	bne.n	800ead2 <nk_button_text_styled+0x52>
 800eac4:	4b47      	ldr	r3, [pc, #284]	; (800ebe4 <nk_button_text_styled+0x164>)
 800eac6:	4a44      	ldr	r2, [pc, #272]	; (800ebd8 <nk_button_text_styled+0x158>)
 800eac8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800eacc:	4843      	ldr	r0, [pc, #268]	; (800ebdc <nk_button_text_styled+0x15c>)
 800eace:	f00e ff4f 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ead8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800eadc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d106      	bne.n	800eaf2 <nk_button_text_styled+0x72>
 800eae4:	4b40      	ldr	r3, [pc, #256]	; (800ebe8 <nk_button_text_styled+0x168>)
 800eae6:	4a3c      	ldr	r2, [pc, #240]	; (800ebd8 <nk_button_text_styled+0x158>)
 800eae8:	f240 11c3 	movw	r1, #451	; 0x1c3
 800eaec:	483b      	ldr	r0, [pc, #236]	; (800ebdc <nk_button_text_styled+0x15c>)
 800eaee:	f00e ff3f 	bl	801d970 <__assert_func>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d012      	beq.n	800eb1e <nk_button_text_styled+0x9e>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00f      	beq.n	800eb1e <nk_button_text_styled+0x9e>
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb04:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d008      	beq.n	800eb1e <nk_button_text_styled+0x9e>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb12:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800eb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d101      	bne.n	800eb22 <nk_button_text_styled+0xa2>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	e054      	b.n	800ebcc <nk_button_text_styled+0x14c>

    win = ctx->current;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eb28:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800eb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800eb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800eb36:	f107 0310 	add.w	r3, r7, #16
 800eb3a:	68f9      	ldr	r1, [r7, #12]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f00d fc3f 	bl	801c3c0 <nk_widget>
 800eb42:	4603      	mov	r3, r0
 800eb44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!state) return 0;
 800eb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d101      	bne.n	800eb54 <nk_button_text_styled+0xd4>
 800eb50:	2300      	movs	r3, #0
 800eb52:	e03b      	b.n	800ebcc <nk_button_text_styled+0x14c>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800eb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d007      	beq.n	800eb6c <nk_button_text_styled+0xec>
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d101      	bne.n	800eb6c <nk_button_text_styled+0xec>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	e000      	b.n	800eb6e <nk_button_text_styled+0xee>
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	623b      	str	r3, [r7, #32]
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800eb76:	3014      	adds	r0, #20
 800eb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7a:	f103 0464 	add.w	r4, r3, #100	; 0x64
                    title, len, style->text_alignment, ctx->button_behavior,
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800eb88:	f892 2ad8 	ldrb.w	r2, [r2, #2776]	; 0xad8
 800eb8c:	68f9      	ldr	r1, [r7, #12]
 800eb8e:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 800eb92:	ed97 6a04 	vldr	s12, [r7, #16]
 800eb96:	edd7 6a05 	vldr	s13, [r7, #20]
 800eb9a:	ed97 7a06 	vldr	s14, [r7, #24]
 800eb9e:	edd7 7a07 	vldr	s15, [r7, #28]
 800eba2:	9104      	str	r1, [sp, #16]
 800eba4:	6a39      	ldr	r1, [r7, #32]
 800eba6:	9103      	str	r1, [sp, #12]
 800eba8:	68b9      	ldr	r1, [r7, #8]
 800ebaa:	9102      	str	r1, [sp, #8]
 800ebac:	9201      	str	r2, [sp, #4]
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	eeb0 0a46 	vmov.f32	s0, s12
 800ebb8:	eef0 0a66 	vmov.f32	s1, s13
 800ebbc:	eeb0 1a47 	vmov.f32	s2, s14
 800ebc0:	eef0 1a67 	vmov.f32	s3, s15
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	f7ff fd91 	bl	800e6ec <nk_do_button_text>
 800ebca:	4603      	mov	r3, r0
                    style, in, ctx->style.font);
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3734      	adds	r7, #52	; 0x34
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd90      	pop	{r4, r7, pc}
 800ebd4:	08021470 	.word	0x08021470
 800ebd8:	08023178 	.word	0x08023178
 800ebdc:	08021438 	.word	0x08021438
 800ebe0:	08021430 	.word	0x08021430
 800ebe4:	080214ec 	.word	0x080214ec
 800ebe8:	080214fc 	.word	0x080214fc

0800ebec <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
    NK_ASSERT(ctx);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d106      	bne.n	800ec0c <nk_button_text+0x20>
 800ebfe:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <nk_button_text+0x44>)
 800ec00:	4a0c      	ldr	r2, [pc, #48]	; (800ec34 <nk_button_text+0x48>)
 800ec02:	f240 11d3 	movw	r1, #467	; 0x1d3
 800ec06:	480c      	ldr	r0, [pc, #48]	; (800ec38 <nk_button_text+0x4c>)
 800ec08:	f00e feb2 	bl	801d970 <__assert_func>
    if (!ctx) return 0;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <nk_button_text+0x2a>
 800ec12:	2300      	movs	r3, #0
 800ec14:	e008      	b.n	800ec28 <nk_button_text+0x3c>
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7ff ff2d 	bl	800ea80 <nk_button_text_styled>
 800ec26:	4603      	mov	r3, r0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	08021470 	.word	0x08021470
 800ec34:	08023190 	.word	0x08023190
 800ec38:	08021438 	.word	0x08021438

0800ec3c <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
    return nk_button_text(ctx, title, nk_strlen(title));
 800ec46:	6838      	ldr	r0, [r7, #0]
 800ec48:	f00d f9c8 	bl	801bfdc <nk_strlen>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	461a      	mov	r2, r3
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff ffca 	bl	800ebec <nk_button_text>
 800ec58:	4603      	mov	r3, r0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <nk_button_symbol_styled>:
    return ret;
}
NK_API nk_bool
nk_button_symbol_styled(struct nk_context *ctx,
    const struct nk_style_button *style, enum nk_symbol_type symbol)
{
 800ec64:	b590      	push	{r4, r7, lr}
 800ec66:	b091      	sub	sp, #68	; 0x44
 800ec68:	af04      	add	r7, sp, #16
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	71fb      	strb	r3, [r7, #7]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d106      	bne.n	800ec86 <nk_button_symbol_styled+0x22>
 800ec78:	4b46      	ldr	r3, [pc, #280]	; (800ed94 <nk_button_symbol_styled+0x130>)
 800ec7a:	4a47      	ldr	r2, [pc, #284]	; (800ed98 <nk_button_symbol_styled+0x134>)
 800ec7c:	f240 210e 	movw	r1, #526	; 0x20e
 800ec80:	4846      	ldr	r0, [pc, #280]	; (800ed9c <nk_button_symbol_styled+0x138>)
 800ec82:	f00e fe75 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ec8c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <nk_button_symbol_styled+0x3e>
 800ec94:	4b42      	ldr	r3, [pc, #264]	; (800eda0 <nk_button_symbol_styled+0x13c>)
 800ec96:	4a40      	ldr	r2, [pc, #256]	; (800ed98 <nk_button_symbol_styled+0x134>)
 800ec98:	f240 210f 	movw	r1, #527	; 0x20f
 800ec9c:	483f      	ldr	r0, [pc, #252]	; (800ed9c <nk_button_symbol_styled+0x138>)
 800ec9e:	f00e fe67 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800eca8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ecac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d106      	bne.n	800ecc2 <nk_button_symbol_styled+0x5e>
 800ecb4:	4b3b      	ldr	r3, [pc, #236]	; (800eda4 <nk_button_symbol_styled+0x140>)
 800ecb6:	4a38      	ldr	r2, [pc, #224]	; (800ed98 <nk_button_symbol_styled+0x134>)
 800ecb8:	f44f 7104 	mov.w	r1, #528	; 0x210
 800ecbc:	4837      	ldr	r0, [pc, #220]	; (800ed9c <nk_button_symbol_styled+0x138>)
 800ecbe:	f00e fe57 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00f      	beq.n	800ece8 <nk_button_symbol_styled+0x84>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ecce:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d008      	beq.n	800ece8 <nk_button_symbol_styled+0x84>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ecdc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ece0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d101      	bne.n	800ecec <nk_button_symbol_styled+0x88>
        return 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	e04f      	b.n	800ed8c <nk_button_symbol_styled+0x128>

    win = ctx->current;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ecf2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ecf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecfe:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800ed00:	f107 0310 	add.w	r3, r7, #16
 800ed04:	68f9      	ldr	r1, [r7, #12]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f00d fb5a 	bl	801c3c0 <nk_widget>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return 0;
 800ed12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d101      	bne.n	800ed1e <nk_button_symbol_styled+0xba>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e036      	b.n	800ed8c <nk_button_symbol_styled+0x128>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800ed1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d007      	beq.n	800ed36 <nk_button_symbol_styled+0xd2>
 800ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d101      	bne.n	800ed36 <nk_button_symbol_styled+0xd2>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	e000      	b.n	800ed38 <nk_button_symbol_styled+0xd4>
 800ed36:	2300      	movs	r3, #0
 800ed38:	623b      	str	r3, [r7, #32]
    return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800ed40:	3014      	adds	r0, #20
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ed4e:	f893 4ad8 	ldrb.w	r4, [r3, #2776]	; 0xad8
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800ed58:	79fa      	ldrb	r2, [r7, #7]
 800ed5a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ed5e:	edd7 6a05 	vldr	s13, [r7, #20]
 800ed62:	ed97 7a06 	vldr	s14, [r7, #24]
 800ed66:	edd7 7a07 	vldr	s15, [r7, #28]
 800ed6a:	9302      	str	r3, [sp, #8]
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	4623      	mov	r3, r4
 800ed76:	eeb0 0a46 	vmov.f32	s0, s12
 800ed7a:	eef0 0a66 	vmov.f32	s1, s13
 800ed7e:	eeb0 1a47 	vmov.f32	s2, s14
 800ed82:	eef0 1a67 	vmov.f32	s3, s15
 800ed86:	f7ff fdb1 	bl	800e8ec <nk_do_button_symbol>
 800ed8a:	4603      	mov	r3, r0
            symbol, ctx->button_behavior, style, in, ctx->style.font);
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3734      	adds	r7, #52	; 0x34
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd90      	pop	{r4, r7, pc}
 800ed94:	08021470 	.word	0x08021470
 800ed98:	080231a0 	.word	0x080231a0
 800ed9c:	08021438 	.word	0x08021438
 800eda0:	080214ec 	.word	0x080214ec
 800eda4:	080214fc 	.word	0x080214fc

0800eda8 <nk_button_symbol>:
NK_API nk_bool
nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d106      	bne.n	800edc8 <nk_button_symbol+0x20>
 800edba:	4b0c      	ldr	r3, [pc, #48]	; (800edec <nk_button_symbol+0x44>)
 800edbc:	4a0c      	ldr	r2, [pc, #48]	; (800edf0 <nk_button_symbol+0x48>)
 800edbe:	f240 211f 	movw	r1, #543	; 0x21f
 800edc2:	480c      	ldr	r0, [pc, #48]	; (800edf4 <nk_button_symbol+0x4c>)
 800edc4:	f00e fdd4 	bl	801d970 <__assert_func>
    if (!ctx) return 0;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d101      	bne.n	800edd2 <nk_button_symbol+0x2a>
 800edce:	2300      	movs	r3, #0
 800edd0:	e008      	b.n	800ede4 <nk_button_symbol+0x3c>
    return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800edd8:	78fa      	ldrb	r2, [r7, #3]
 800edda:	4619      	mov	r1, r3
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff ff41 	bl	800ec64 <nk_button_symbol_styled>
 800ede2:	4603      	mov	r3, r0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	08021470 	.word	0x08021470
 800edf0:	080231b8 	.word	0x080231b8
 800edf4:	08021438 	.word	0x08021438

0800edf8 <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b087      	sub	sp, #28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	603b      	str	r3, [r7, #0]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	db07      	blt.n	800ee1c <nk_rgba+0x24>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2bfe      	cmp	r3, #254	; 0xfe
 800ee10:	dc02      	bgt.n	800ee18 <nk_rgba+0x20>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	e002      	b.n	800ee1e <nk_rgba+0x26>
 800ee18:	23ff      	movs	r3, #255	; 0xff
 800ee1a:	e000      	b.n	800ee1e <nk_rgba+0x26>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	db07      	blt.n	800ee36 <nk_rgba+0x3e>
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	2bfe      	cmp	r3, #254	; 0xfe
 800ee2a:	dc02      	bgt.n	800ee32 <nk_rgba+0x3a>
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	e002      	b.n	800ee38 <nk_rgba+0x40>
 800ee32:	23ff      	movs	r3, #255	; 0xff
 800ee34:	e000      	b.n	800ee38 <nk_rgba+0x40>
 800ee36:	2300      	movs	r3, #0
 800ee38:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	db07      	blt.n	800ee50 <nk_rgba+0x58>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2bfe      	cmp	r3, #254	; 0xfe
 800ee44:	dc02      	bgt.n	800ee4c <nk_rgba+0x54>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	e002      	b.n	800ee52 <nk_rgba+0x5a>
 800ee4c:	23ff      	movs	r3, #255	; 0xff
 800ee4e:	e000      	b.n	800ee52 <nk_rgba+0x5a>
 800ee50:	2300      	movs	r3, #0
 800ee52:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	db07      	blt.n	800ee6a <nk_rgba+0x72>
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2bfe      	cmp	r3, #254	; 0xfe
 800ee5e:	dc02      	bgt.n	800ee66 <nk_rgba+0x6e>
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	e002      	b.n	800ee6c <nk_rgba+0x74>
 800ee66:	23ff      	movs	r3, #255	; 0xff
 800ee68:	e000      	b.n	800ee6c <nk_rgba+0x74>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	74fb      	strb	r3, [r7, #19]
    return ret;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	617b      	str	r3, [r7, #20]
 800ee72:	2300      	movs	r3, #0
 800ee74:	7d3a      	ldrb	r2, [r7, #20]
 800ee76:	f362 0307 	bfi	r3, r2, #0, #8
 800ee7a:	7d7a      	ldrb	r2, [r7, #21]
 800ee7c:	f362 230f 	bfi	r3, r2, #8, #8
 800ee80:	7dba      	ldrb	r2, [r7, #22]
 800ee82:	f362 4317 	bfi	r3, r2, #16, #8
 800ee86:	7dfa      	ldrb	r2, [r7, #23]
 800ee88:	f362 631f 	bfi	r3, r2, #24, #8
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	371c      	adds	r7, #28
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b087      	sub	sp, #28
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	db07      	blt.n	800eeba <nk_rgb+0x22>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2bfe      	cmp	r3, #254	; 0xfe
 800eeae:	dc02      	bgt.n	800eeb6 <nk_rgb+0x1e>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	e002      	b.n	800eebc <nk_rgb+0x24>
 800eeb6:	23ff      	movs	r3, #255	; 0xff
 800eeb8:	e000      	b.n	800eebc <nk_rgb+0x24>
 800eeba:	2300      	movs	r3, #0
 800eebc:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	db07      	blt.n	800eed4 <nk_rgb+0x3c>
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2bfe      	cmp	r3, #254	; 0xfe
 800eec8:	dc02      	bgt.n	800eed0 <nk_rgb+0x38>
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	e002      	b.n	800eed6 <nk_rgb+0x3e>
 800eed0:	23ff      	movs	r3, #255	; 0xff
 800eed2:	e000      	b.n	800eed6 <nk_rgb+0x3e>
 800eed4:	2300      	movs	r3, #0
 800eed6:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	db07      	blt.n	800eeee <nk_rgb+0x56>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2bfe      	cmp	r3, #254	; 0xfe
 800eee2:	dc02      	bgt.n	800eeea <nk_rgb+0x52>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	e002      	b.n	800eef0 <nk_rgb+0x58>
 800eeea:	23ff      	movs	r3, #255	; 0xff
 800eeec:	e000      	b.n	800eef0 <nk_rgb+0x58>
 800eeee:	2300      	movs	r3, #0
 800eef0:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)255;
 800eef2:	23ff      	movs	r3, #255	; 0xff
 800eef4:	74fb      	strb	r3, [r7, #19]
    return ret;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	617b      	str	r3, [r7, #20]
 800eefa:	2300      	movs	r3, #0
 800eefc:	7d3a      	ldrb	r2, [r7, #20]
 800eefe:	f362 0307 	bfi	r3, r2, #0, #8
 800ef02:	7d7a      	ldrb	r2, [r7, #21]
 800ef04:	f362 230f 	bfi	r3, r2, #8, #8
 800ef08:	7dba      	ldrb	r2, [r7, #22]
 800ef0a:	f362 4317 	bfi	r3, r2, #16, #8
 800ef0e:	7dfa      	ldrb	r2, [r7, #23]
 800ef10:	f362 631f 	bfi	r3, r2, #24, #8
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	371c      	adds	r7, #28
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 800ef20:	b590      	push	{r4, r7, lr}
 800ef22:	b097      	sub	sp, #92	; 0x5c
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6278      	str	r0, [r7, #36]	; 0x24
 800ef28:	6239      	str	r1, [r7, #32]
 800ef2a:	eeb0 5a40 	vmov.f32	s10, s0
 800ef2e:	eef0 5a60 	vmov.f32	s11, s1
 800ef32:	617a      	str	r2, [r7, #20]
 800ef34:	eeb0 6a41 	vmov.f32	s12, s2
 800ef38:	eef0 6a61 	vmov.f32	s13, s3
 800ef3c:	eeb0 7a42 	vmov.f32	s14, s4
 800ef40:	eef0 7a62 	vmov.f32	s15, s5
 800ef44:	ed87 5a06 	vstr	s10, [r7, #24]
 800ef48:	edc7 5a07 	vstr	s11, [r7, #28]
 800ef4c:	ed87 6a01 	vstr	s12, [r7, #4]
 800ef50:	edc7 6a02 	vstr	s13, [r7, #8]
 800ef54:	ed87 7a03 	vstr	s14, [r7, #12]
 800ef58:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *popup;
    int is_open = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	657b      	str	r3, [r7, #84]	; 0x54
    int is_active = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	653b      	str	r3, [r7, #80]	; 0x50
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d105      	bne.n	800ef76 <nk_combo_begin+0x56>
 800ef6a:	4b75      	ldr	r3, [pc, #468]	; (800f140 <nk_combo_begin+0x220>)
 800ef6c:	4a75      	ldr	r2, [pc, #468]	; (800f144 <nk_combo_begin+0x224>)
 800ef6e:	2113      	movs	r1, #19
 800ef70:	4875      	ldr	r0, [pc, #468]	; (800f148 <nk_combo_begin+0x228>)
 800ef72:	f00e fcfd 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 800ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ef7c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d105      	bne.n	800ef90 <nk_combo_begin+0x70>
 800ef84:	4b71      	ldr	r3, [pc, #452]	; (800f14c <nk_combo_begin+0x22c>)
 800ef86:	4a6f      	ldr	r2, [pc, #444]	; (800f144 <nk_combo_begin+0x224>)
 800ef88:	2114      	movs	r1, #20
 800ef8a:	486f      	ldr	r0, [pc, #444]	; (800f148 <nk_combo_begin+0x228>)
 800ef8c:	f00e fcf0 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ef96:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800ef9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d105      	bne.n	800efae <nk_combo_begin+0x8e>
 800efa2:	4b6b      	ldr	r3, [pc, #428]	; (800f150 <nk_combo_begin+0x230>)
 800efa4:	4a67      	ldr	r2, [pc, #412]	; (800f144 <nk_combo_begin+0x224>)
 800efa6:	2115      	movs	r1, #21
 800efa8:	4867      	ldr	r0, [pc, #412]	; (800f148 <nk_combo_begin+0x228>)
 800efaa:	f00e fce1 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00f      	beq.n	800efd4 <nk_combo_begin+0xb4>
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800efba:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d008      	beq.n	800efd4 <nk_combo_begin+0xb4>
 800efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800efc8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800efcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d101      	bne.n	800efd8 <nk_combo_begin+0xb8>
        return 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e0af      	b.n	800f138 <nk_combo_begin+0x218>

    popup = win->popup.win;
 800efd8:	6a3b      	ldr	r3, [r7, #32]
 800efda:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800efde:	64fb      	str	r3, [r7, #76]	; 0x4c
    body.x = header.x;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	62bb      	str	r3, [r7, #40]	; 0x28
    body.w = size.x;
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	633b      	str	r3, [r7, #48]	; 0x30
    body.y = header.y + header.h-ctx->style.window.combo_border;
 800efe8:	ed97 7a02 	vldr	s14, [r7, #8]
 800efec:	edd7 7a04 	vldr	s15, [r7, #16]
 800eff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800effa:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 800effe:	edd3 7a00 	vldr	s15, [r3]
 800f002:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f006:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    body.h = size.y;
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	637b      	str	r3, [r7, #52]	; 0x34

    hash = win->popup.combo_count++;
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f014:	1c59      	adds	r1, r3, #1
 800f016:	6a3a      	ldr	r2, [r7, #32]
 800f018:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800f01c:	64bb      	str	r3, [r7, #72]	; 0x48
    is_open = (popup) ? nk_true:nk_false;
 800f01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f020:	2b00      	cmp	r3, #0
 800f022:	bf14      	ite	ne
 800f024:	2301      	movne	r3, #1
 800f026:	2300      	moveq	r3, #0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	657b      	str	r3, [r7, #84]	; 0x54
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 800f02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00c      	beq.n	800f04c <nk_combo_begin+0x12c>
 800f032:	6a3b      	ldr	r3, [r7, #32]
 800f034:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d106      	bne.n	800f04c <nk_combo_begin+0x12c>
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f044:	2b20      	cmp	r3, #32
 800f046:	d101      	bne.n	800f04c <nk_combo_begin+0x12c>
 800f048:	2301      	movs	r3, #1
 800f04a:	e000      	b.n	800f04e <nk_combo_begin+0x12e>
 800f04c:	2300      	movs	r3, #0
 800f04e:	653b      	str	r3, [r7, #80]	; 0x50
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d005      	beq.n	800f062 <nk_combo_begin+0x142>
 800f056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <nk_combo_begin+0x142>
 800f05c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00e      	beq.n	800f080 <nk_combo_begin+0x160>
 800f062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <nk_combo_begin+0x14e>
 800f068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d008      	beq.n	800f080 <nk_combo_begin+0x160>
 800f06e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f070:	2b00      	cmp	r3, #0
 800f072:	d107      	bne.n	800f084 <nk_combo_begin+0x164>
        (!is_open && !is_active && !is_clicked)) return 0;
 800f074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f076:	2b00      	cmp	r3, #0
 800f078:	d104      	bne.n	800f084 <nk_combo_begin+0x164>
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d101      	bne.n	800f084 <nk_combo_begin+0x164>
 800f080:	2300      	movs	r3, #0
 800f082:	e059      	b.n	800f138 <nk_combo_begin+0x218>
    if (!nk_nonblock_begin(ctx, 0, body,
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d01d      	beq.n	800f0c6 <nk_combo_begin+0x1a6>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800f08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d01a      	beq.n	800f0c6 <nk_combo_begin+0x1a6>
 800f090:	eddf 1a30 	vldr	s3, [pc, #192]	; 800f154 <nk_combo_begin+0x234>
 800f094:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800f154 <nk_combo_begin+0x234>
 800f098:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800f154 <nk_combo_begin+0x234>
 800f09c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800f154 <nk_combo_begin+0x234>
 800f0a0:	f004 fb14 	bl	80136cc <nk_rect>
 800f0a4:	eeb0 6a40 	vmov.f32	s12, s0
 800f0a8:	eef0 6a60 	vmov.f32	s13, s1
 800f0ac:	eeb0 7a41 	vmov.f32	s14, s2
 800f0b0:	eef0 7a61 	vmov.f32	s15, s3
 800f0b4:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800f0b8:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800f0bc:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800f0c0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    if (!nk_nonblock_begin(ctx, 0, body,
 800f0c4:	e005      	b.n	800f0d2 <nk_combo_begin+0x1b2>
 800f0c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800f0ca:	1d3b      	adds	r3, r7, #4
 800f0cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f0d2:	ed97 4a0e 	vldr	s8, [r7, #56]	; 0x38
 800f0d6:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800f0da:	ed97 5a10 	vldr	s10, [r7, #64]	; 0x40
 800f0de:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800f0e2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800f0e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f0ea:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f0ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f0f2:	2220      	movs	r2, #32
 800f0f4:	eeb0 2a44 	vmov.f32	s4, s8
 800f0f8:	eef0 2a64 	vmov.f32	s5, s9
 800f0fc:	eeb0 3a45 	vmov.f32	s6, s10
 800f100:	eef0 3a65 	vmov.f32	s7, s11
 800f104:	eeb0 0a46 	vmov.f32	s0, s12
 800f108:	eef0 0a66 	vmov.f32	s1, s13
 800f10c:	eeb0 1a47 	vmov.f32	s2, s14
 800f110:	eef0 1a67 	vmov.f32	s3, s15
 800f114:	2100      	movs	r1, #0
 800f116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f118:	f007 f93a 	bl	8016390 <nk_nonblock_begin>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d101      	bne.n	800f126 <nk_combo_begin+0x206>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800f122:	2300      	movs	r3, #0
 800f124:	e008      	b.n	800f138 <nk_combo_begin+0x218>

    win->popup.type = NK_PANEL_COMBO;
 800f126:	6a3b      	ldr	r3, [r7, #32]
 800f128:	2220      	movs	r2, #32
 800f12a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    win->popup.name = hash;
 800f12e:	6a3b      	ldr	r3, [r7, #32]
 800f130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f132:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    return 1;
 800f136:	2301      	movs	r3, #1
}
 800f138:	4618      	mov	r0, r3
 800f13a:	375c      	adds	r7, #92	; 0x5c
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd90      	pop	{r4, r7, pc}
 800f140:	08021514 	.word	0x08021514
 800f144:	080231d0 	.word	0x080231d0
 800f148:	08021518 	.word	0x08021518
 800f14c:	08021534 	.word	0x08021534
 800f150:	08021544 	.word	0x08021544
 800f154:	00000000 	.word	0x00000000

0800f158 <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 800f158:	b5b0      	push	{r4, r5, r7, lr}
 800f15a:	b0a6      	sub	sp, #152	; 0x98
 800f15c:	af04      	add	r7, sp, #16
 800f15e:	6178      	str	r0, [r7, #20]
 800f160:	6139      	str	r1, [r7, #16]
 800f162:	60fa      	str	r2, [r7, #12]
 800f164:	eeb0 7a40 	vmov.f32	s14, s0
 800f168:	eef0 7a60 	vmov.f32	s15, s1
 800f16c:	ed87 7a01 	vstr	s14, [r7, #4]
 800f170:	edc7 7a02 	vstr	s15, [r7, #8]
    const struct nk_input *in;
    struct nk_window *win;
    struct nk_style *style;

    enum nk_widget_layout_states s;
    int is_clicked = nk_false;
 800f174:	2300      	movs	r3, #0
 800f176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d105      	bne.n	800f18c <nk_combo_begin_text+0x34>
 800f180:	4bc3      	ldr	r3, [pc, #780]	; (800f490 <nk_combo_begin_text+0x338>)
 800f182:	4ac4      	ldr	r2, [pc, #784]	; (800f494 <nk_combo_begin_text+0x33c>)
 800f184:	2139      	movs	r1, #57	; 0x39
 800f186:	48c4      	ldr	r0, [pc, #784]	; (800f498 <nk_combo_begin_text+0x340>)
 800f188:	f00e fbf2 	bl	801d970 <__assert_func>
    NK_ASSERT(selected);
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d105      	bne.n	800f19e <nk_combo_begin_text+0x46>
 800f192:	4bc2      	ldr	r3, [pc, #776]	; (800f49c <nk_combo_begin_text+0x344>)
 800f194:	4abf      	ldr	r2, [pc, #764]	; (800f494 <nk_combo_begin_text+0x33c>)
 800f196:	213a      	movs	r1, #58	; 0x3a
 800f198:	48bf      	ldr	r0, [pc, #764]	; (800f498 <nk_combo_begin_text+0x340>)
 800f19a:	f00e fbe9 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1a4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d105      	bne.n	800f1b8 <nk_combo_begin_text+0x60>
 800f1ac:	4bbc      	ldr	r3, [pc, #752]	; (800f4a0 <nk_combo_begin_text+0x348>)
 800f1ae:	4ab9      	ldr	r2, [pc, #740]	; (800f494 <nk_combo_begin_text+0x33c>)
 800f1b0:	213b      	movs	r1, #59	; 0x3b
 800f1b2:	48b9      	ldr	r0, [pc, #740]	; (800f498 <nk_combo_begin_text+0x340>)
 800f1b4:	f00e fbdc 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1be:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d105      	bne.n	800f1d6 <nk_combo_begin_text+0x7e>
 800f1ca:	4bb6      	ldr	r3, [pc, #728]	; (800f4a4 <nk_combo_begin_text+0x34c>)
 800f1cc:	4ab1      	ldr	r2, [pc, #708]	; (800f494 <nk_combo_begin_text+0x33c>)
 800f1ce:	213c      	movs	r1, #60	; 0x3c
 800f1d0:	48b1      	ldr	r0, [pc, #708]	; (800f498 <nk_combo_begin_text+0x340>)
 800f1d2:	f00e fbcd 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d012      	beq.n	800f202 <nk_combo_begin_text+0xaa>
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00b      	beq.n	800f202 <nk_combo_begin_text+0xaa>
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f1f0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <nk_combo_begin_text+0xaa>
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <nk_combo_begin_text+0xae>
        return 0;
 800f202:	2300      	movs	r3, #0
 800f204:	e28f      	b.n	800f726 <nk_combo_begin_text+0x5ce>

    win = ctx->current;
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f20c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f210:	67bb      	str	r3, [r7, #120]	; 0x78
    style = &ctx->style;
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f218:	677b      	str	r3, [r7, #116]	; 0x74
    s = nk_widget(&header, ctx);
 800f21a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f21e:	6979      	ldr	r1, [r7, #20]
 800f220:	4618      	mov	r0, r3
 800f222:	f00d f8cd 	bl	801c3c0 <nk_widget>
 800f226:	4603      	mov	r3, r0
 800f228:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if (s == NK_WIDGET_INVALID)
 800f22c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f230:	2b00      	cmp	r3, #0
 800f232:	d101      	bne.n	800f238 <nk_combo_begin_text+0xe0>
        return 0;
 800f234:	2300      	movs	r3, #0
 800f236:	e276      	b.n	800f726 <nk_combo_begin_text+0x5ce>

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 800f238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f23a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f244:	2b00      	cmp	r3, #0
 800f246:	d105      	bne.n	800f254 <nk_combo_begin_text+0xfc>
 800f248:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f24c:	2b02      	cmp	r3, #2
 800f24e:	d001      	beq.n	800f254 <nk_combo_begin_text+0xfc>
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	e000      	b.n	800f256 <nk_combo_begin_text+0xfe>
 800f254:	2300      	movs	r3, #0
 800f256:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 800f25e:	3314      	adds	r3, #20
 800f260:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800f264:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f268:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f26c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f270:	2200      	movs	r2, #0
 800f272:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f274:	eeb0 0a46 	vmov.f32	s0, s12
 800f278:	eef0 0a66 	vmov.f32	s1, s13
 800f27c:	eeb0 1a47 	vmov.f32	s2, s14
 800f280:	eef0 1a67 	vmov.f32	s3, s15
 800f284:	4618      	mov	r0, r3
 800f286:	f7fe ff9f 	bl	800e1c8 <nk_button_behavior>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d002      	beq.n	800f296 <nk_combo_begin_text+0x13e>
        is_clicked = nk_true;
 800f290:	2301      	movs	r3, #1
 800f292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f29c:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800f2a0:	f003 0320 	and.w	r3, r3, #32
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00c      	beq.n	800f2c2 <nk_combo_begin_text+0x16a>
        background = &style->combo.active;
 800f2a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2aa:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 800f2ae:	3318      	adds	r3, #24
 800f2b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_active;
 800f2b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2ba:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800f2be:	657b      	str	r3, [r7, #84]	; 0x54
 800f2c0:	e020      	b.n	800f304 <nk_combo_begin_text+0x1ac>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2c8:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800f2cc:	f003 0310 	and.w	r3, r3, #16
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00c      	beq.n	800f2ee <nk_combo_begin_text+0x196>
        background = &style->combo.hover;
 800f2d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2d6:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800f2da:	331c      	adds	r3, #28
 800f2dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_hover;
 800f2e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2e6:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 800f2ea:	657b      	str	r3, [r7, #84]	; 0x54
 800f2ec:	e00a      	b.n	800f304 <nk_combo_begin_text+0x1ac>
    } else {
        background = &style->combo.normal;
 800f2ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2f0:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800f2f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_normal;
 800f2f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2fe:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 800f302:	657b      	str	r3, [r7, #84]	; 0x54
    }

    switch(background->type) {
 800f304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d02b      	beq.n	800f366 <nk_combo_begin_text+0x20e>
 800f30e:	2b02      	cmp	r3, #2
 800f310:	f300 80a1 	bgt.w	800f456 <nk_combo_begin_text+0x2fe>
 800f314:	2b00      	cmp	r3, #0
 800f316:	d04a      	beq.n	800f3ae <nk_combo_begin_text+0x256>
 800f318:	2b01      	cmp	r3, #1
 800f31a:	f040 809c 	bne.w	800f456 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 800f31e:	2300      	movs	r3, #0
 800f320:	2200      	movs	r2, #0
 800f322:	2100      	movs	r1, #0
 800f324:	2000      	movs	r0, #0
 800f326:	f7ff fd67 	bl	800edf8 <nk_rgba>
 800f32a:	4603      	mov	r3, r0
 800f32c:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 800f32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f330:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800f334:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f338:	3304      	adds	r3, #4
 800f33a:	4a5b      	ldr	r2, [pc, #364]	; (800f4a8 <nk_combo_begin_text+0x350>)
 800f33c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800f340:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f344:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f348:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f34c:	6812      	ldr	r2, [r2, #0]
 800f34e:	4619      	mov	r1, r3
 800f350:	eeb0 0a46 	vmov.f32	s0, s12
 800f354:	eef0 0a66 	vmov.f32	s1, s13
 800f358:	eeb0 1a47 	vmov.f32	s2, s14
 800f35c:	eef0 1a67 	vmov.f32	s3, s15
 800f360:	f001 ffb2 	bl	80112c8 <nk_draw_image>
            break;
 800f364:	e077      	b.n	800f456 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 800f366:	2300      	movs	r3, #0
 800f368:	2200      	movs	r2, #0
 800f36a:	2100      	movs	r1, #0
 800f36c:	2000      	movs	r0, #0
 800f36e:	f7ff fd43 	bl	800edf8 <nk_rgba>
 800f372:	4603      	mov	r3, r0
 800f374:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 800f376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f378:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800f37c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f380:	3304      	adds	r3, #4
 800f382:	4a49      	ldr	r2, [pc, #292]	; (800f4a8 <nk_combo_begin_text+0x350>)
 800f384:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800f388:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f38c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f390:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	4619      	mov	r1, r3
 800f398:	eeb0 0a46 	vmov.f32	s0, s12
 800f39c:	eef0 0a66 	vmov.f32	s1, s13
 800f3a0:	eeb0 1a47 	vmov.f32	s2, s14
 800f3a4:	eef0 1a67 	vmov.f32	s3, s15
 800f3a8:	f002 f880 	bl	80114ac <nk_draw_nine_slice>
            break;
 800f3ac:	e053      	b.n	800f456 <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 800f3ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	653b      	str	r3, [r7, #80]	; 0x50
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 800f3b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3b8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800f3bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f3c2:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800f3c6:	edd3 5a00 	vldr	s11, [r3]
 800f3ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f3ce:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800f3d2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f3d6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f3da:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f3de:	6859      	ldr	r1, [r3, #4]
 800f3e0:	eeb0 2a65 	vmov.f32	s4, s11
 800f3e4:	eeb0 0a46 	vmov.f32	s0, s12
 800f3e8:	eef0 0a66 	vmov.f32	s1, s13
 800f3ec:	eeb0 1a47 	vmov.f32	s2, s14
 800f3f0:	eef0 1a67 	vmov.f32	s3, s15
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	f001 fc0d 	bl	8010c14 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 800f3fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3fc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800f400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f406:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 800f40a:	edd3 5a00 	vldr	s11, [r3]
 800f40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f414:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 800f418:	ed93 5a00 	vldr	s10, [r3]
 800f41c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f422:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 800f426:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800f42a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f42e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f432:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	; 0x5d4
 800f436:	eef0 2a45 	vmov.f32	s5, s10
 800f43a:	eeb0 2a65 	vmov.f32	s4, s11
 800f43e:	eeb0 0a46 	vmov.f32	s0, s12
 800f442:	eef0 0a66 	vmov.f32	s1, s13
 800f446:	eeb0 1a47 	vmov.f32	s2, s14
 800f44a:	eef0 1a67 	vmov.f32	s3, s15
 800f44e:	4610      	mov	r0, r2
 800f450:	f001 fad8 	bl	8010a04 <nk_stroke_rect>
            break;
 800f454:	bf00      	nop
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f45c:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 800f460:	f003 0310 	and.w	r3, r3, #16
 800f464:	2b00      	cmp	r3, #0
 800f466:	d007      	beq.n	800f478 <nk_combo_begin_text+0x320>
            sym = style->combo.sym_hover;
 800f468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f46e:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 800f472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f476:	e022      	b.n	800f4be <nk_combo_begin_text+0x366>
        else if (is_clicked)
 800f478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d017      	beq.n	800f4b0 <nk_combo_begin_text+0x358>
            sym = style->combo.sym_active;
 800f480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f486:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 800f48a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f48e:	e016      	b.n	800f4be <nk_combo_begin_text+0x366>
 800f490:	08021514 	.word	0x08021514
 800f494:	080231e0 	.word	0x080231e0
 800f498:	08021518 	.word	0x08021518
 800f49c:	0802155c 	.word	0x0802155c
 800f4a0:	08021534 	.word	0x08021534
 800f4a4:	08021544 	.word	0x08021544
 800f4a8:	080231cc 	.word	0x080231cc
 800f4ac:	00000000 	.word	0x00000000
        else
            sym = style->combo.sym_normal;
 800f4b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4b6:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 800f4ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;
 800f4be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	bf14      	ite	ne
 800f4c6:	2301      	movne	r3, #1
 800f4c8:	2300      	moveq	r3, #0
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	66bb      	str	r3, [r7, #104]	; 0x68

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 800f4ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800f4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4d8:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800f4dc:	edd3 7a00 	vldr	s15, [r3]
 800f4e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f4e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4e8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 800f4ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f4f0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800f4f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f4fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f506:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 800f50a:	edd3 7a00 	vldr	s15, [r3]
 800f50e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f512:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        button.y = header.y + style->combo.button_padding.y;
 800f516:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f51a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f520:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800f524:	edd3 7a00 	vldr	s15, [r3]
 800f528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f52c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        button.h = button.w;
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	637b      	str	r3, [r7, #52]	; 0x34

        content.x = button.x + style->combo.button.padding.x;
 800f534:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f53a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f53e:	f203 6364 	addw	r3, r3, #1636	; 0x664
 800f542:	edd3 7a00 	vldr	s15, [r3]
 800f546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f54a:	edc7 7a06 	vstr	s15, [r7, #24]
        content.y = button.y + style->combo.button.padding.y;
 800f54e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f558:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800f55c:	edd3 7a00 	vldr	s15, [r3]
 800f560:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f564:	edc7 7a07 	vstr	s15, [r7, #28]
        content.w = button.w - 2 * style->combo.button.padding.x;
 800f568:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f56c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f572:	f203 6364 	addw	r3, r3, #1636	; 0x664
 800f576:	edd3 7a00 	vldr	s15, [r3]
 800f57a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f57e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f582:	edc7 7a08 	vstr	s15, [r7, #32]
        content.h = button.h - 2 * style->combo.button.padding.y;
 800f586:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f58a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f590:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800f594:	edd3 7a00 	vldr	s15, [r3]
 800f598:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f59c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 800f5a4:	ed5f 0a3f 	vldr	s1, [pc, #-252]	; 800f4ac <nk_combo_begin_text+0x354>
 800f5a8:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 800f4ac <nk_combo_begin_text+0x354>
 800f5ac:	f004 f940 	bl	8013830 <nk_vec2>
 800f5b0:	eeb0 7a40 	vmov.f32	s14, s0
 800f5b4:	eef0 7a60 	vmov.f32	s15, s1
 800f5b8:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800f5bc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        label.x = header.x + style->combo.content_padding.x;
 800f5c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f5c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ca:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800f5ce:	edd3 7a00 	vldr	s15, [r3]
 800f5d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.y = header.y + style->combo.content_padding.y;
 800f5da:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5e4:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800f5e8:	edd3 7a00 	vldr	s15, [r3]
 800f5ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.h = header.h - 2 * style->combo.content_padding.y;
 800f5f4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800f5f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5fe:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800f602:	edd3 7a00 	vldr	s15, [r3]
 800f606:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f60a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f60e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        if (draw_button_symbol)
 800f612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f614:	2b00      	cmp	r3, #0
 800f616:	d01a      	beq.n	800f64e <nk_combo_begin_text+0x4f6>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 800f618:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f622:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800f626:	edd3 6a00 	vldr	s13, [r3]
 800f62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f630:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800f634:	edd3 7a00 	vldr	s15, [r3]
 800f638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f63c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f640:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f644:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f648:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800f64c:	e00e      	b.n	800f66c <nk_combo_begin_text+0x514>
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
 800f64e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f658:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800f65c:	edd3 7a00 	vldr	s15, [r3]
 800f660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f664:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f668:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        nk_widget_text(&win->buffer, label, selected, len, &text,
 800f66c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f66e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800f678:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f67c:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800f680:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800f684:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f688:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	2311      	movs	r3, #17
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	4613      	mov	r3, r2
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	6939      	ldr	r1, [r7, #16]
 800f698:	eeb0 0a46 	vmov.f32	s0, s12
 800f69c:	eef0 0a66 	vmov.f32	s1, s13
 800f6a0:	eeb0 1a47 	vmov.f32	s2, s14
 800f6a4:	eef0 1a67 	vmov.f32	s3, s15
 800f6a8:	f00b fac0 	bl	801ac2c <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
 800f6ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d01a      	beq.n	800f6e8 <nk_combo_begin_text+0x590>
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800f6b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6b4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f6be:	f8d3 5ad4 	ldr.w	r5, [r3, #2772]	; 0xad4
                &ctx->style.combo.button, sym, style->font);
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 800f6c8:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 800f6ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f6cc:	6812      	ldr	r2, [r2, #0]
 800f6ce:	f107 0418 	add.w	r4, r7, #24
 800f6d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f6d6:	9202      	str	r2, [sp, #8]
 800f6d8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800f6dc:	9201      	str	r2, [sp, #4]
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	462b      	mov	r3, r5
 800f6e2:	4622      	mov	r2, r4
 800f6e4:	f7ff f8b4 	bl	800e850 <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 800f6e8:	ed97 5a16 	vldr	s10, [r7, #88]	; 0x58
 800f6ec:	edd7 5a17 	vldr	s11, [r7, #92]	; 0x5c
 800f6f0:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800f6f4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800f6f8:	ed97 7a01 	vldr	s14, [r7, #4]
 800f6fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800f700:	eeb0 1a45 	vmov.f32	s2, s10
 800f704:	eef0 1a65 	vmov.f32	s3, s11
 800f708:	eeb0 2a46 	vmov.f32	s4, s12
 800f70c:	eef0 2a66 	vmov.f32	s5, s13
 800f710:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f714:	eeb0 0a47 	vmov.f32	s0, s14
 800f718:	eef0 0a67 	vmov.f32	s1, s15
 800f71c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f71e:	6978      	ldr	r0, [r7, #20]
 800f720:	f7ff fbfe 	bl	800ef20 <nk_combo_begin>
 800f724:	4603      	mov	r3, r0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3788      	adds	r7, #136	; 0x88
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bdb0      	pop	{r4, r5, r7, pc}
 800f72e:	bf00      	nop

0800f730 <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b084      	sub	sp, #16
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	eeb0 7a40 	vmov.f32	s14, s0
 800f73e:	eef0 7a60 	vmov.f32	s15, s1
 800f742:	ed87 7a00 	vstr	s14, [r7]
 800f746:	edc7 7a01 	vstr	s15, [r7, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 800f74a:	68b8      	ldr	r0, [r7, #8]
 800f74c:	f00c fc46 	bl	801bfdc <nk_strlen>
 800f750:	4603      	mov	r3, r0
 800f752:	ed97 7a00 	vldr	s14, [r7]
 800f756:	edd7 7a01 	vldr	s15, [r7, #4]
 800f75a:	eeb0 0a47 	vmov.f32	s0, s14
 800f75e:	eef0 0a67 	vmov.f32	s1, s15
 800f762:	461a      	mov	r2, r3
 800f764:	68b9      	ldr	r1, [r7, #8]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7ff fcf6 	bl	800f158 <nk_combo_begin_text>
 800f76c:	4603      	mov	r3, r0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <nk_combo_item_label>:
{
    return nk_contextual_item_text(ctx, text, len, align);
}
NK_API nk_bool
nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b084      	sub	sp, #16
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	60f8      	str	r0, [r7, #12]
 800f77e:	60b9      	str	r1, [r7, #8]
 800f780:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_label(ctx, label, align);
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	68b9      	ldr	r1, [r7, #8]
 800f786:	68f8      	ldr	r0, [r7, #12]
 800f788:	f000 feaa 	bl	80104e0 <nk_contextual_item_label>
 800f78c:	4603      	mov	r3, r0
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <nk_combo_end>:
    const char *label, nk_flags alignment)
{
    return nk_contextual_item_symbol_label(ctx, sym, label, alignment);
}
NK_API void nk_combo_end(struct nk_context *ctx)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b082      	sub	sp, #8
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
    nk_contextual_end(ctx);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 ff00 	bl	80105a4 <nk_contextual_end>
}
 800f7a4:	bf00      	nop
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08c      	sub	sp, #48	; 0x30
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6178      	str	r0, [r7, #20]
 800f7b4:	6139      	str	r1, [r7, #16]
 800f7b6:	60fa      	str	r2, [r7, #12]
 800f7b8:	60bb      	str	r3, [r7, #8]
 800f7ba:	eeb0 7a40 	vmov.f32	s14, s0
 800f7be:	eef0 7a60 	vmov.f32	s15, s1
 800f7c2:	ed87 7a00 	vstr	s14, [r7]
 800f7c6:	edc7 7a01 	vstr	s15, [r7, #4]
    int i = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d106      	bne.n	800f7e2 <nk_combo+0x36>
 800f7d4:	4b61      	ldr	r3, [pc, #388]	; (800f95c <nk_combo+0x1b0>)
 800f7d6:	4a62      	ldr	r2, [pc, #392]	; (800f960 <nk_combo+0x1b4>)
 800f7d8:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800f7dc:	4861      	ldr	r0, [pc, #388]	; (800f964 <nk_combo+0x1b8>)
 800f7de:	f00e f8c7 	bl	801d970 <__assert_func>
    NK_ASSERT(items);
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d106      	bne.n	800f7f6 <nk_combo+0x4a>
 800f7e8:	4b5f      	ldr	r3, [pc, #380]	; (800f968 <nk_combo+0x1bc>)
 800f7ea:	4a5d      	ldr	r2, [pc, #372]	; (800f960 <nk_combo+0x1b4>)
 800f7ec:	f240 21c1 	movw	r1, #705	; 0x2c1
 800f7f0:	485c      	ldr	r0, [pc, #368]	; (800f964 <nk_combo+0x1b8>)
 800f7f2:	f00e f8bd 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f7fc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f800:	2b00      	cmp	r3, #0
 800f802:	d106      	bne.n	800f812 <nk_combo+0x66>
 800f804:	4b59      	ldr	r3, [pc, #356]	; (800f96c <nk_combo+0x1c0>)
 800f806:	4a56      	ldr	r2, [pc, #344]	; (800f960 <nk_combo+0x1b4>)
 800f808:	f240 21c2 	movw	r1, #706	; 0x2c2
 800f80c:	4855      	ldr	r0, [pc, #340]	; (800f964 <nk_combo+0x1b8>)
 800f80e:	f00e f8af 	bl	801d970 <__assert_func>
    if (!ctx || !items ||!count)
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d005      	beq.n	800f824 <nk_combo+0x78>
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <nk_combo+0x78>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <nk_combo+0x7c>
        return selected;
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	e094      	b.n	800f952 <nk_combo+0x1a6>

    item_spacing = ctx->style.window.spacing;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f82e:	461a      	mov	r2, r3
 800f830:	f107 0320 	add.w	r3, r7, #32
 800f834:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 800f838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f83c:	e883 0003 	stmia.w	r3, {r0, r1}
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f84c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	4619      	mov	r1, r3
 800f858:	4610      	mov	r0, r2
 800f85a:	f004 fba3 	bl	8013fa4 <nk_panel_get_padding>
 800f85e:	eeb0 7a40 	vmov.f32	s14, s0
 800f862:	eef0 7a60 	vmov.f32	s15, s1
 800f866:	ed87 7a06 	vstr	s14, [r7, #24]
 800f86a:	edc7 7a07 	vstr	s15, [r7, #28]
    max_height = count * item_height + count * (int)item_spacing.y;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f872:	fb03 f202 	mul.w	r2, r3, r2
 800f876:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f87a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f87e:	ee17 1a90 	vmov	r1, s15
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	fb01 f303 	mul.w	r3, r1, r3
 800f888:	4413      	add	r3, r2
 800f88a:	62bb      	str	r3, [r7, #40]	; 0x28
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 800f88c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f894:	ee17 2a90 	vmov	r2, s15
 800f898:	edd7 7a07 	vldr	s15, [r7, #28]
 800f89c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f8a0:	ee17 3a90 	vmov	r3, s15
 800f8a4:	4413      	add	r3, r2
 800f8a6:	005b      	lsls	r3, r3, #1
 800f8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8aa:	4413      	add	r3, r2
 800f8ac:	62bb      	str	r3, [r7, #40]	; 0x28
    size.y = NK_MIN(size.y, (float)max_height);
 800f8ae:	ed97 7a01 	vldr	s14, [r7, #4]
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	ee07 3a90 	vmov	s15, r3
 800f8b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c4:	d502      	bpl.n	800f8cc <nk_combo+0x120>
 800f8c6:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8ca:	e004      	b.n	800f8d6 <nk_combo+0x12a>
 800f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ce:	ee07 3a90 	vmov	s15, r3
 800f8d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8d6:	edc7 7a01 	vstr	s15, [r7, #4]
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	ed97 7a00 	vldr	s14, [r7]
 800f8e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8ec:	eeb0 0a47 	vmov.f32	s0, s14
 800f8f0:	eef0 0a67 	vmov.f32	s1, s15
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6978      	ldr	r0, [r7, #20]
 800f8f8:	f7ff ff1a 	bl	800f730 <nk_combo_begin_label>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d026      	beq.n	800f950 <nk_combo+0x1a4>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 800f902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f904:	ee07 3a90 	vmov	s15, r3
 800f908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f90c:	2101      	movs	r1, #1
 800f90e:	eeb0 0a67 	vmov.f32	s0, s15
 800f912:	6978      	ldr	r0, [r7, #20]
 800f914:	f003 f972 	bl	8012bfc <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 800f918:	2300      	movs	r3, #0
 800f91a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f91c:	e011      	b.n	800f942 <nk_combo+0x196>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 800f91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	4413      	add	r3, r2
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2211      	movs	r2, #17
 800f92a:	4619      	mov	r1, r3
 800f92c:	6978      	ldr	r0, [r7, #20]
 800f92e:	f7ff ff22 	bl	800f776 <nk_combo_item_label>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d001      	beq.n	800f93c <nk_combo+0x190>
                selected = i;
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < count; ++i) {
 800f93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93e:	3301      	adds	r3, #1
 800f940:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	429a      	cmp	r2, r3
 800f948:	dbe9      	blt.n	800f91e <nk_combo+0x172>
        }
        nk_combo_end(ctx);
 800f94a:	6978      	ldr	r0, [r7, #20]
 800f94c:	f7ff ff23 	bl	800f796 <nk_combo_end>
    }
    return selected;
 800f950:	68bb      	ldr	r3, [r7, #8]
}
 800f952:	4618      	mov	r0, r3
 800f954:	3730      	adds	r7, #48	; 0x30
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	08021514 	.word	0x08021514
 800f960:	080231f4 	.word	0x080231f4
 800f964:	08021518 	.word	0x08021518
 800f968:	08021568 	.word	0x08021568
 800f96c:	08021534 	.word	0x08021534

0800f970 <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d105      	bne.n	800f98c <nk_setup+0x1c>
 800f980:	4b11      	ldr	r3, [pc, #68]	; (800f9c8 <nk_setup+0x58>)
 800f982:	4a12      	ldr	r2, [pc, #72]	; (800f9cc <nk_setup+0x5c>)
 800f984:	210c      	movs	r1, #12
 800f986:	4812      	ldr	r0, [pc, #72]	; (800f9d0 <nk_setup+0x60>)
 800f988:	f00d fff2 	bl	801d970 <__assert_func>
    if (!ctx) return;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d016      	beq.n	800f9c0 <nk_setup+0x50>
    nk_zero_struct(*ctx);
 800f992:	f243 6168 	movw	r1, #13928	; 0x3668
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f00c fb02 	bl	801bfa0 <nk_zero>
    nk_style_default(ctx);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f008 ff1b 	bl	80187d8 <nk_style_default>
    ctx->seq = 1;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
    if (font) ctx->style.font = font;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d005      	beq.n	800f9c2 <nk_setup+0x52>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800f9be:	e000      	b.n	800f9c2 <nk_setup+0x52>
    if (!ctx) return;
 800f9c0:	bf00      	nop
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	0802159c 	.word	0x0802159c
 800f9cc:	08023214 	.word	0x08023214
 800f9d0:	080215a0 	.word	0x080215a0

0800f9d4 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 800f9d4:	b5b0      	push	{r4, r5, r7, lr}
 800f9d6:	b086      	sub	sp, #24
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
 800f9e0:	603b      	str	r3, [r7, #0]
    NK_ASSERT(cmds);
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d105      	bne.n	800f9f4 <nk_init_custom+0x20>
 800f9e8:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <nk_init_custom+0xc0>)
 800f9ea:	4a2b      	ldr	r2, [pc, #172]	; (800fa98 <nk_init_custom+0xc4>)
 800f9ec:	2130      	movs	r1, #48	; 0x30
 800f9ee:	482b      	ldr	r0, [pc, #172]	; (800fa9c <nk_init_custom+0xc8>)
 800f9f0:	f00d ffbe 	bl	801d970 <__assert_func>
    NK_ASSERT(pool);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d105      	bne.n	800fa06 <nk_init_custom+0x32>
 800f9fa:	4b29      	ldr	r3, [pc, #164]	; (800faa0 <nk_init_custom+0xcc>)
 800f9fc:	4a26      	ldr	r2, [pc, #152]	; (800fa98 <nk_init_custom+0xc4>)
 800f9fe:	2131      	movs	r1, #49	; 0x31
 800fa00:	4826      	ldr	r0, [pc, #152]	; (800fa9c <nk_init_custom+0xc8>)
 800fa02:	f00d ffb5 	bl	801d970 <__assert_func>
    if (!cmds || !pool) return 0;
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d002      	beq.n	800fa12 <nk_init_custom+0x3e>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d101      	bne.n	800fa16 <nk_init_custom+0x42>
 800fa12:	2300      	movs	r3, #0
 800fa14:	e039      	b.n	800fa8a <nk_init_custom+0xb6>

    nk_setup(ctx, font);
 800fa16:	6839      	ldr	r1, [r7, #0]
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	f7ff ffa9 	bl	800f970 <nk_setup>
    ctx->memory = *cmds;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa24:	461a      	mov	r2, r3
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	f602 248c 	addw	r4, r2, #2700	; 0xa8c
 800fa2c:	461d      	mov	r5, r3
 800fa2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	7f1b      	ldrb	r3, [r3, #28]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10b      	bne.n	800fa62 <nk_init_custom+0x8e>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800fa50:	3324      	adds	r3, #36	; 0x24
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	6a11      	ldr	r1, [r2, #32]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f006 fbf4 	bl	8016248 <nk_pool_init_fixed>
 800fa60:	e00b      	b.n	800fa7a <nk_init_custom+0xa6>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3310      	adds	r3, #16
 800fa66:	617b      	str	r3, [r7, #20]
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800fa6e:	3324      	adds	r3, #36	; 0x24
 800fa70:	2210      	movs	r2, #16
 800fa72:	6979      	ldr	r1, [r7, #20]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f006 fbbb 	bl	80161f0 <nk_pool_init>
    }
    ctx->use_pool = nk_true;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fa80:	461a      	mov	r2, r3
 800fa82:	2301      	movs	r3, #1
 800fa84:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
    return 1;
 800fa88:	2301      	movs	r3, #1
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bdb0      	pop	{r4, r5, r7, pc}
 800fa92:	bf00      	nop
 800fa94:	080215c8 	.word	0x080215c8
 800fa98:	08023220 	.word	0x08023220
 800fa9c:	080215a0 	.word	0x080215a0
 800faa0:	080215d0 	.word	0x080215d0

0800faa4 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b086      	sub	sp, #24
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d105      	bne.n	800fabe <nk_clear+0x1a>
 800fab2:	4b96      	ldr	r3, [pc, #600]	; (800fd0c <nk_clear+0x268>)
 800fab4:	4a96      	ldr	r2, [pc, #600]	; (800fd10 <nk_clear+0x26c>)
 800fab6:	2172      	movs	r1, #114	; 0x72
 800fab8:	4896      	ldr	r0, [pc, #600]	; (800fd14 <nk_clear+0x270>)
 800faba:	f00d ff59 	bl	801d970 <__assert_func>

    if (!ctx) return;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 811e 	beq.w	800fd02 <nk_clear+0x25e>
    if (ctx->use_pool)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800facc:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d007      	beq.n	800fae4 <nk_clear+0x40>
        nk_buffer_clear(&ctx->memory);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800fada:	330c      	adds	r3, #12
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fe f9bb 	bl	800de58 <nk_buffer_clear>
 800fae2:	e007      	b.n	800faf4 <nk_clear+0x50>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 800faea:	330c      	adds	r3, #12
 800faec:	2100      	movs	r1, #0
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fe f94a 	bl	800dd88 <nk_buffer_reset>

    ctx->build = 0;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fafa:	461a      	mov	r2, r3
 800fafc:	2300      	movs	r3, #0
 800fafe:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    ctx->memory.calls = 0;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb08:	461a      	mov	r2, r3
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	f8c2 3ac0 	str.w	r3, [r2, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fb16:	461a      	mov	r2, r3
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f8c2 3ad4 	str.w	r3, [r2, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 800fb30:	3334      	adds	r3, #52	; 0x34
 800fb32:	2228      	movs	r2, #40	; 0x28
 800fb34:	2100      	movs	r1, #0
 800fb36:	4618      	mov	r0, r3
 800fb38:	f00c f9c1 	bl	801bebe <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb42:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 800fb46:	617b      	str	r3, [r7, #20]
    while (iter) {
 800fb48:	e0cb      	b.n	800fce2 <nk_clear+0x23e>
        /* make sure valid minimized windows do not get removed */
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d013      	beq.n	800fb7e <nk_clear+0xda>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10d      	bne.n	800fb7e <nk_clear+0xda>
            iter->seq == ctx->seq) {
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb6c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
            !(iter->flags & NK_WINDOW_CLOSED) &&
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d104      	bne.n	800fb7e <nk_clear+0xda>
            iter = iter->next;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800fb7a:	617b      	str	r3, [r7, #20]
            continue;
 800fb7c:	e0b1      	b.n	800fce2 <nk_clear+0x23e>
        }
        /* remove hotness from hidden or closed windows*/
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d105      	bne.n	800fb96 <nk_clear+0xf2>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d03a      	beq.n	800fc0c <nk_clear+0x168>
            iter == ctx->active) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb9c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
            (iter->flags & NK_WINDOW_CLOSED)) &&
 800fba0:	697a      	ldr	r2, [r7, #20]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d132      	bne.n	800fc0c <nk_clear+0x168>
            ctx->active = iter->prev;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800fbb2:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = iter->prev;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800fbc2:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (!ctx->end)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbcc:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d106      	bne.n	800fbe2 <nk_clear+0x13e>
                ctx->begin = 0;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbda:	461a      	mov	r2, r3
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (ctx->active)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbe8:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00d      	beq.n	800fc0c <nk_clear+0x168>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fbf6:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800fbfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fc02:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 800fc06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fc0a:	649a      	str	r2, [r3, #72]	; 0x48
        }
        /* free unused popup windows */
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d015      	beq.n	800fc42 <nk_clear+0x19e>
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fc1c:	681a      	ldr	r2, [r3, #0]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fc24:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d00a      	beq.n	800fc42 <nk_clear+0x19e>
            nk_free_window(ctx, iter->popup.win);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fc32:	4619      	mov	r1, r3
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f00c fde4 	bl	801c802 <nk_free_window>
            iter->popup.win = 0;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800fc48:	613b      	str	r3, [r7, #16]
        while (it) {
 800fc4a:	e025      	b.n	800fc98 <nk_clear+0x1f4>
            n = it->next;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800fc52:	60bb      	str	r3, [r7, #8]
            if (it->seq != ctx->seq) {
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fc5e:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d016      	beq.n	800fc94 <nk_clear+0x1f0>
                nk_remove_table(iter, it);
 800fc66:	6939      	ldr	r1, [r7, #16]
 800fc68:	6978      	ldr	r0, [r7, #20]
 800fc6a:	f00a fef0 	bl	801aa4e <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 800fc6e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800fc72:	6938      	ldr	r0, [r7, #16]
 800fc74:	f00c f994 	bl	801bfa0 <nk_zero>
                nk_free_table(ctx, it);
 800fc78:	6939      	ldr	r1, [r7, #16]
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f00a fe95 	bl	801a9aa <nk_free_table>
                if (it == iter->tables)
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800fc86:	693a      	ldr	r2, [r7, #16]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d103      	bne.n	800fc94 <nk_clear+0x1f0>
                    iter->tables = n;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	68ba      	ldr	r2, [r7, #8]
 800fc90:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
            } it = n;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	613b      	str	r3, [r7, #16]
        while (it) {
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d1d6      	bne.n	800fc4c <nk_clear+0x1a8>
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fca8:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d105      	bne.n	800fcbc <nk_clear+0x218>
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00e      	beq.n	800fcda <nk_clear+0x236>
            next = iter->next;
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800fcc2:	60fb      	str	r3, [r7, #12]
            nk_remove_window(ctx, iter);
 800fcc4:	6979      	ldr	r1, [r7, #20]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f00c ff1c 	bl	801cb04 <nk_remove_window>
            nk_free_window(ctx, iter);
 800fccc:	6979      	ldr	r1, [r7, #20]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f00c fd97 	bl	801c802 <nk_free_window>
            iter = next;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	e003      	b.n	800fce2 <nk_clear+0x23e>
        } else iter = iter->next;
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800fce0:	617b      	str	r3, [r7, #20]
    while (iter) {
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f47f af30 	bne.w	800fb4a <nk_clear+0xa6>
    }
    ctx->seq++;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fcf0:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800fcfc:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
 800fd00:	e000      	b.n	800fd04 <nk_clear+0x260>
    if (!ctx) return;
 800fd02:	bf00      	nop
}
 800fd04:	3718      	adds	r7, #24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	0802159c 	.word	0x0802159c
 800fd10:	08023230 	.word	0x08023230
 800fd14:	080215a0 	.word	0x080215a0

0800fd18 <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 800fd18:	b590      	push	{r4, r7, lr}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d105      	bne.n	800fd34 <nk_start_buffer+0x1c>
 800fd28:	4b17      	ldr	r3, [pc, #92]	; (800fd88 <nk_start_buffer+0x70>)
 800fd2a:	4a18      	ldr	r2, [pc, #96]	; (800fd8c <nk_start_buffer+0x74>)
 800fd2c:	21b2      	movs	r1, #178	; 0xb2
 800fd2e:	4818      	ldr	r0, [pc, #96]	; (800fd90 <nk_start_buffer+0x78>)
 800fd30:	f00d fe1e 	bl	801d970 <__assert_func>
    NK_ASSERT(buffer);
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d105      	bne.n	800fd46 <nk_start_buffer+0x2e>
 800fd3a:	4b16      	ldr	r3, [pc, #88]	; (800fd94 <nk_start_buffer+0x7c>)
 800fd3c:	4a13      	ldr	r2, [pc, #76]	; (800fd8c <nk_start_buffer+0x74>)
 800fd3e:	21b3      	movs	r1, #179	; 0xb3
 800fd40:	4813      	ldr	r0, [pc, #76]	; (800fd90 <nk_start_buffer+0x78>)
 800fd42:	f00d fe15 	bl	801d970 <__assert_func>
    if (!ctx || !buffer) return;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d019      	beq.n	800fd80 <nk_start_buffer+0x68>
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d016      	beq.n	800fd80 <nk_start_buffer+0x68>
    buffer->begin = ctx->memory.allocated;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd58:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	61da      	str	r2, [r3, #28]
    buffer->end = buffer->begin;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	69da      	ldr	r2, [r3, #28]
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	621a      	str	r2, [r3, #32]
    buffer->last = buffer->begin;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	69da      	ldr	r2, [r3, #28]
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->clip = nk_null_rect;
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	4a09      	ldr	r2, [pc, #36]	; (800fd98 <nk_start_buffer+0x80>)
 800fd74:	1d1c      	adds	r4, r3, #4
 800fd76:	4613      	mov	r3, r2
 800fd78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fd7e:	e000      	b.n	800fd82 <nk_start_buffer+0x6a>
    if (!ctx || !buffer) return;
 800fd80:	bf00      	nop
}
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd90      	pop	{r4, r7, pc}
 800fd88:	0802159c 	.word	0x0802159c
 800fd8c:	0802323c 	.word	0x0802323c
 800fd90:	080215a0 	.word	0x080215a0
 800fd94:	080215e0 	.word	0x080215e0
 800fd98:	08023200 	.word	0x08023200

0800fd9c <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d105      	bne.n	800fdb8 <nk_start+0x1c>
 800fdac:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <nk_start+0x44>)
 800fdae:	4a0d      	ldr	r2, [pc, #52]	; (800fde4 <nk_start+0x48>)
 800fdb0:	21bd      	movs	r1, #189	; 0xbd
 800fdb2:	480d      	ldr	r0, [pc, #52]	; (800fde8 <nk_start+0x4c>)
 800fdb4:	f00d fddc 	bl	801d970 <__assert_func>
    NK_ASSERT(win);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d105      	bne.n	800fdca <nk_start+0x2e>
 800fdbe:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <nk_start+0x50>)
 800fdc0:	4a08      	ldr	r2, [pc, #32]	; (800fde4 <nk_start+0x48>)
 800fdc2:	21be      	movs	r1, #190	; 0xbe
 800fdc4:	4808      	ldr	r0, [pc, #32]	; (800fde8 <nk_start+0x4c>)
 800fdc6:	f00d fdd3 	bl	801d970 <__assert_func>
    nk_start_buffer(ctx, &win->buffer);
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	3364      	adds	r3, #100	; 0x64
 800fdce:	4619      	mov	r1, r3
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7ff ffa1 	bl	800fd18 <nk_start_buffer>
}
 800fdd6:	bf00      	nop
 800fdd8:	3708      	adds	r7, #8
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	0802159c 	.word	0x0802159c
 800fde4:	0802324c 	.word	0x0802324c
 800fde8:	080215a0 	.word	0x080215a0
 800fdec:	080215e8 	.word	0x080215e8

0800fdf0 <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <nk_start_popup+0x1c>
 800fe00:	4b19      	ldr	r3, [pc, #100]	; (800fe68 <nk_start_popup+0x78>)
 800fe02:	4a1a      	ldr	r2, [pc, #104]	; (800fe6c <nk_start_popup+0x7c>)
 800fe04:	21c5      	movs	r1, #197	; 0xc5
 800fe06:	481a      	ldr	r0, [pc, #104]	; (800fe70 <nk_start_popup+0x80>)
 800fe08:	f00d fdb2 	bl	801d970 <__assert_func>
    NK_ASSERT(win);
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d105      	bne.n	800fe1e <nk_start_popup+0x2e>
 800fe12:	4b18      	ldr	r3, [pc, #96]	; (800fe74 <nk_start_popup+0x84>)
 800fe14:	4a15      	ldr	r2, [pc, #84]	; (800fe6c <nk_start_popup+0x7c>)
 800fe16:	21c6      	movs	r1, #198	; 0xc6
 800fe18:	4815      	ldr	r0, [pc, #84]	; (800fe70 <nk_start_popup+0x80>)
 800fe1a:	f00d fda9 	bl	801d970 <__assert_func>
    if (!ctx || !win) return;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d01d      	beq.n	800fe60 <nk_start_popup+0x70>
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d01a      	beq.n	800fe60 <nk_start_popup+0x70>

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800fe30:	60fb      	str	r3, [r7, #12]
    buf->begin = win->buffer.end;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	601a      	str	r2, [r3, #0]
    buf->end = win->buffer.end;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	60da      	str	r2, [r3, #12]
    buf->parent = win->buffer.last;
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	605a      	str	r2, [r3, #4]
    buf->last = buf->begin;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	609a      	str	r2, [r3, #8]
    buf->active = nk_true;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	611a      	str	r2, [r3, #16]
 800fe5e:	e000      	b.n	800fe62 <nk_start_popup+0x72>
    if (!ctx || !win) return;
 800fe60:	bf00      	nop
}
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	0802159c 	.word	0x0802159c
 800fe6c:	08023258 	.word	0x08023258
 800fe70:	080215a0 	.word	0x080215a0
 800fe74:	080215e8 	.word	0x080215e8

0800fe78 <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d105      	bne.n	800fe94 <nk_finish_popup+0x1c>
 800fe88:	4b13      	ldr	r3, [pc, #76]	; (800fed8 <nk_finish_popup+0x60>)
 800fe8a:	4a14      	ldr	r2, [pc, #80]	; (800fedc <nk_finish_popup+0x64>)
 800fe8c:	21d5      	movs	r1, #213	; 0xd5
 800fe8e:	4814      	ldr	r0, [pc, #80]	; (800fee0 <nk_finish_popup+0x68>)
 800fe90:	f00d fd6e 	bl	801d970 <__assert_func>
    NK_ASSERT(win);
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d105      	bne.n	800fea6 <nk_finish_popup+0x2e>
 800fe9a:	4b12      	ldr	r3, [pc, #72]	; (800fee4 <nk_finish_popup+0x6c>)
 800fe9c:	4a0f      	ldr	r2, [pc, #60]	; (800fedc <nk_finish_popup+0x64>)
 800fe9e:	21d6      	movs	r1, #214	; 0xd6
 800fea0:	480f      	ldr	r0, [pc, #60]	; (800fee0 <nk_finish_popup+0x68>)
 800fea2:	f00d fd65 	bl	801d970 <__assert_func>
    if (!ctx || !win) return;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d011      	beq.n	800fed0 <nk_finish_popup+0x58>
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00e      	beq.n	800fed0 <nk_finish_popup+0x58>

    buf = &win->popup.buf;
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800feb8:	60fb      	str	r3, [r7, #12]
    buf->last = win->buffer.last;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	609a      	str	r2, [r3, #8]
    buf->end = win->buffer.end;
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	60da      	str	r2, [r3, #12]
 800fece:	e000      	b.n	800fed2 <nk_finish_popup+0x5a>
    if (!ctx || !win) return;
 800fed0:	bf00      	nop
}
 800fed2:	3710      	adds	r7, #16
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	0802159c 	.word	0x0802159c
 800fedc:	08023268 	.word	0x08023268
 800fee0:	080215a0 	.word	0x080215a0
 800fee4:	080215e8 	.word	0x080215e8

0800fee8 <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d105      	bne.n	800ff04 <nk_finish_buffer+0x1c>
 800fef8:	4b10      	ldr	r3, [pc, #64]	; (800ff3c <nk_finish_buffer+0x54>)
 800fefa:	4a11      	ldr	r2, [pc, #68]	; (800ff40 <nk_finish_buffer+0x58>)
 800fefc:	21e0      	movs	r1, #224	; 0xe0
 800fefe:	4811      	ldr	r0, [pc, #68]	; (800ff44 <nk_finish_buffer+0x5c>)
 800ff00:	f00d fd36 	bl	801d970 <__assert_func>
    NK_ASSERT(buffer);
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d105      	bne.n	800ff16 <nk_finish_buffer+0x2e>
 800ff0a:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <nk_finish_buffer+0x60>)
 800ff0c:	4a0c      	ldr	r2, [pc, #48]	; (800ff40 <nk_finish_buffer+0x58>)
 800ff0e:	21e1      	movs	r1, #225	; 0xe1
 800ff10:	480c      	ldr	r0, [pc, #48]	; (800ff44 <nk_finish_buffer+0x5c>)
 800ff12:	f00d fd2d 	bl	801d970 <__assert_func>
    if (!ctx || !buffer) return;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00a      	beq.n	800ff32 <nk_finish_buffer+0x4a>
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d007      	beq.n	800ff32 <nk_finish_buffer+0x4a>
    buffer->end = ctx->memory.allocated;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff28:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	621a      	str	r2, [r3, #32]
 800ff30:	e000      	b.n	800ff34 <nk_finish_buffer+0x4c>
    if (!ctx || !buffer) return;
 800ff32:	bf00      	nop
}
 800ff34:	3708      	adds	r7, #8
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	0802159c 	.word	0x0802159c
 800ff40:	08023278 	.word	0x08023278
 800ff44:	080215a0 	.word	0x080215a0
 800ff48:	080215e0 	.word	0x080215e0

0800ff4c <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d105      	bne.n	800ff68 <nk_finish+0x1c>
 800ff5c:	4b1c      	ldr	r3, [pc, #112]	; (800ffd0 <nk_finish+0x84>)
 800ff5e:	4a1d      	ldr	r2, [pc, #116]	; (800ffd4 <nk_finish+0x88>)
 800ff60:	21ec      	movs	r1, #236	; 0xec
 800ff62:	481d      	ldr	r0, [pc, #116]	; (800ffd8 <nk_finish+0x8c>)
 800ff64:	f00d fd04 	bl	801d970 <__assert_func>
    NK_ASSERT(win);
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d105      	bne.n	800ff7a <nk_finish+0x2e>
 800ff6e:	4b1b      	ldr	r3, [pc, #108]	; (800ffdc <nk_finish+0x90>)
 800ff70:	4a18      	ldr	r2, [pc, #96]	; (800ffd4 <nk_finish+0x88>)
 800ff72:	21ed      	movs	r1, #237	; 0xed
 800ff74:	4818      	ldr	r0, [pc, #96]	; (800ffd8 <nk_finish+0x8c>)
 800ff76:	f00d fcfb 	bl	801d970 <__assert_func>
    if (!ctx || !win) return;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d021      	beq.n	800ffc4 <nk_finish+0x78>
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d01e      	beq.n	800ffc4 <nk_finish+0x78>
    nk_finish_buffer(ctx, &win->buffer);
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	3364      	adds	r3, #100	; 0x64
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7ff ffab 	bl	800fee8 <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d015      	beq.n	800ffc8 <nk_finish+0x7c>

    buf = &win->popup.buf;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800ffa2:	617b      	str	r3, [r7, #20]
    memory = ctx->memory.memory.ptr;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffaa:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800ffae:	613b      	str	r3, [r7, #16]
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	693a      	ldr	r2, [r7, #16]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	60fb      	str	r3, [r7, #12]
    parent_last->next = buf->end;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	68da      	ldr	r2, [r3, #12]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	605a      	str	r2, [r3, #4]
 800ffc2:	e002      	b.n	800ffca <nk_finish+0x7e>
    if (!ctx || !win) return;
 800ffc4:	bf00      	nop
 800ffc6:	e000      	b.n	800ffca <nk_finish+0x7e>
    if (!win->popup.buf.active) return;
 800ffc8:	bf00      	nop
}
 800ffca:	3718      	adds	r7, #24
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	0802159c 	.word	0x0802159c
 800ffd4:	0802328c 	.word	0x0802328c
 800ffd8:	080215a0 	.word	0x080215a0
 800ffdc:	080215e8 	.word	0x080215e8

0800ffe0 <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08e      	sub	sp, #56	; 0x38
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
    struct nk_window *it = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command *cmd = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	633b      	str	r3, [r7, #48]	; 0x30
    nk_byte *buffer = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d105      	bne.n	801000a <nk_build+0x2a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010010:	2b00      	cmp	r3, #0
 8010012:	d05d      	beq.n	80100d0 <nk_build+0xf0>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 801001a:	2b00      	cmp	r3, #0
 801001c:	d158      	bne.n	80100d0 <nk_build+0xf0>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010024:	2b00      	cmp	r3, #0
 8010026:	d053      	beq.n	80100d0 <nk_build+0xf0>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 801002e:	627b      	str	r3, [r7, #36]	; 0x24
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010036:	3334      	adds	r3, #52	; 0x34
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	f502 51d4 	add.w	r1, r2, #6784	; 0x1a80
 801003e:	310c      	adds	r1, #12
 8010040:	2200      	movs	r2, #0
 8010042:	4618      	mov	r0, r3
 8010044:	f000 fb94 	bl	8010770 <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 801004e:	3334      	adds	r3, #52	; 0x34
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f7ff fe60 	bl	800fd18 <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	edd3 7a06 	vldr	s15, [r3, #24]
 8010064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010068:	edc7 7a03 	vstr	s15, [r7, #12]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	edd3 7a07 	vldr	s15, [r3, #28]
 8010078:	ee77 7a67 	vsub.f32	s15, s14, s15
 801007c:	edc7 7a04 	vstr	s15, [r7, #16]
        mouse_bounds.w = cursor->size.x;
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	691b      	ldr	r3, [r3, #16]
 8010084:	617b      	str	r3, [r7, #20]
        mouse_bounds.h = cursor->size.y;
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	695b      	ldr	r3, [r3, #20]
 801008a:	61bb      	str	r3, [r7, #24]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010092:	3334      	adds	r3, #52	; 0x34
 8010094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010096:	4a62      	ldr	r2, [pc, #392]	; (8010220 <nk_build+0x240>)
 8010098:	ed97 6a03 	vldr	s12, [r7, #12]
 801009c:	edd7 6a04 	vldr	s13, [r7, #16]
 80100a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80100a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80100a8:	6812      	ldr	r2, [r2, #0]
 80100aa:	eeb0 0a46 	vmov.f32	s0, s12
 80100ae:	eef0 0a66 	vmov.f32	s1, s13
 80100b2:	eeb0 1a47 	vmov.f32	s2, s14
 80100b6:	eef0 1a67 	vmov.f32	s3, s15
 80100ba:	4618      	mov	r0, r3
 80100bc:	f001 f904 	bl	80112c8 <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80100c6:	3334      	adds	r3, #52	; 0x34
 80100c8:	4619      	mov	r1, r3
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7ff ff0c 	bl	800fee8 <nk_finish_buffer>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80100d6:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80100da:	637b      	str	r3, [r7, #52]	; 0x34
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100e2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80100e6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (it != 0) {
 80100e8:	e04d      	b.n	8010186 <nk_build+0x1a6>
        struct nk_window *next = it->next;
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80100f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100fe:	429a      	cmp	r2, r3
 8010100:	d03c      	beq.n	801017c <nk_build+0x19c>
 8010102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801010a:	2b00      	cmp	r3, #0
 801010c:	d136      	bne.n	801017c <nk_build+0x19c>
            it->seq != ctx->seq)
 801010e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010118:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 801011c:	429a      	cmp	r2, r3
 801011e:	d12d      	bne.n	801017c <nk_build+0x19c>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 8010120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010128:	4413      	add	r3, r2
 801012a:	633b      	str	r3, [r7, #48]	; 0x30
        while (next && ((next->buffer.last == next->buffer.begin) ||
 801012c:	e003      	b.n	8010136 <nk_build+0x156>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 801012e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010130:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010134:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010138:	2b00      	cmp	r3, #0
 801013a:	d016      	beq.n	801016a <nk_build+0x18a>
 801013c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010148:	429a      	cmp	r2, r3
 801014a:	d0f0      	beq.n	801012e <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 801014c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010154:	2b00      	cmp	r3, #0
 8010156:	d1ea      	bne.n	801012e <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8010158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010162:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010166:	429a      	cmp	r2, r3
 8010168:	d1e1      	bne.n	801012e <nk_build+0x14e>

        if (next) cmd->next = next->buffer.begin;
 801016a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016c:	2b00      	cmp	r3, #0
 801016e:	d007      	beq.n	8010180 <nk_build+0x1a0>
 8010170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010172:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8010176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010178:	605a      	str	r2, [r3, #4]
 801017a:	e002      	b.n	8010182 <nk_build+0x1a2>
            goto cont;
 801017c:	bf00      	nop
 801017e:	e000      	b.n	8010182 <nk_build+0x1a2>
        cont: it = next;
 8010180:	bf00      	nop
 8010182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010184:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8010186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010188:	2b00      	cmp	r3, #0
 801018a:	d1ae      	bne.n	80100ea <nk_build+0x10a>
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010192:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010196:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8010198:	e01c      	b.n	80101d4 <nk_build+0x1f4>
        struct nk_window *next = it->next;
 801019a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801019c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80101a0:	623b      	str	r3, [r7, #32]
        struct nk_popup_buffer *buf;
        if (!it->popup.buf.active)
 80101a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d010      	beq.n	80101ce <nk_build+0x1ee>
            goto skip;

        buf = &it->popup.buf;
 80101ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80101b2:	61fb      	str	r3, [r7, #28]
        cmd->next = buf->begin;
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ba:	605a      	str	r2, [r3, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101c2:	4413      	add	r3, r2
 80101c4:	633b      	str	r3, [r7, #48]	; 0x30
        buf->active = nk_false;
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	2200      	movs	r2, #0
 80101ca:	611a      	str	r2, [r3, #16]
 80101cc:	e000      	b.n	80101d0 <nk_build+0x1f0>
            goto skip;
 80101ce:	bf00      	nop
        skip: it = next;
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 80101d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d1df      	bne.n	801019a <nk_build+0x1ba>
    }
    if (cmd) {
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d01a      	beq.n	8010216 <nk_build+0x236>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80101e6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80101f0:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d007      	beq.n	8010208 <nk_build+0x228>
            cmd->next = ctx->overlay.begin;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80101fe:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 8010202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010204:	605a      	str	r2, [r3, #4]
        else cmd->next = ctx->memory.allocated;
    }
}
 8010206:	e006      	b.n	8010216 <nk_build+0x236>
        else cmd->next = ctx->memory.allocated;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801020e:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	605a      	str	r2, [r3, #4]
}
 8010216:	bf00      	nop
 8010218:	3738      	adds	r7, #56	; 0x38
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	08023210 	.word	0x08023210

08010224 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d106      	bne.n	8010240 <nk__begin+0x1c>
 8010232:	4b2f      	ldr	r3, [pc, #188]	; (80102f0 <nk__begin+0xcc>)
 8010234:	4a2f      	ldr	r2, [pc, #188]	; (80102f4 <nk__begin+0xd0>)
 8010236:	f44f 719d 	mov.w	r1, #314	; 0x13a
 801023a:	482f      	ldr	r0, [pc, #188]	; (80102f8 <nk__begin+0xd4>)
 801023c:	f00d fb98 	bl	801d970 <__assert_func>
    if (!ctx) return 0;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d101      	bne.n	801024a <nk__begin+0x26>
 8010246:	2300      	movs	r3, #0
 8010248:	e04e      	b.n	80102e8 <nk__begin+0xc4>
    if (!ctx->count) return 0;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010250:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8010254:	2b00      	cmp	r3, #0
 8010256:	d101      	bne.n	801025c <nk__begin+0x38>
 8010258:	2300      	movs	r3, #0
 801025a:	e045      	b.n	80102e8 <nk__begin+0xc4>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010262:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010266:	60bb      	str	r3, [r7, #8]
    if (!ctx->build) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801026e:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8010272:	2b00      	cmp	r3, #0
 8010274:	d109      	bne.n	801028a <nk__begin+0x66>
        nk_build(ctx);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff feb2 	bl	800ffe0 <nk_build>
        ctx->build = nk_true;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010282:	461a      	mov	r2, r3
 8010284:	2301      	movs	r3, #1
 8010286:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    }
    iter = ctx->begin;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010290:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010294:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8010296:	e003      	b.n	80102a0 <nk__begin+0x7c>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
        iter = iter->next;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801029e:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d016      	beq.n	80102d4 <nk__begin+0xb0>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d0f0      	beq.n	8010298 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1ea      	bne.n	8010298 <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80102cc:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d1e1      	bne.n	8010298 <nk__begin+0x74>
    if (!iter) return 0;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d101      	bne.n	80102de <nk__begin+0xba>
 80102da:	2300      	movs	r3, #0
 80102dc:	e004      	b.n	80102e8 <nk__begin+0xc4>
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	4413      	add	r3, r2
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	0802159c 	.word	0x0802159c
 80102f4:	08023298 	.word	0x08023298
 80102f8:	080215a0 	.word	0x080215a0

080102fc <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d106      	bne.n	801031a <nk__next+0x1e>
 801030c:	4b18      	ldr	r3, [pc, #96]	; (8010370 <nk__next+0x74>)
 801030e:	4a19      	ldr	r2, [pc, #100]	; (8010374 <nk__next+0x78>)
 8010310:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010314:	4818      	ldr	r0, [pc, #96]	; (8010378 <nk__next+0x7c>)
 8010316:	f00d fb2b 	bl	801d970 <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d009      	beq.n	8010334 <nk__next+0x38>
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d006      	beq.n	8010334 <nk__next+0x38>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801032c:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <nk__next+0x3c>
 8010334:	2300      	movs	r3, #0
 8010336:	e016      	b.n	8010366 <nk__next+0x6a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010342:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 8010346:	429a      	cmp	r2, r3
 8010348:	d301      	bcc.n	801034e <nk__next+0x52>
 801034a:	2300      	movs	r3, #0
 801034c:	e00b      	b.n	8010366 <nk__next+0x6a>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010354:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010358:	60fb      	str	r3, [r7, #12]
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	68fa      	ldr	r2, [r7, #12]
 8010360:	4413      	add	r3, r2
 8010362:	60bb      	str	r3, [r7, #8]
    return next;
 8010364:	68bb      	ldr	r3, [r7, #8]
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	0802159c 	.word	0x0802159c
 8010374:	080232a4 	.word	0x080232a4
 8010378:	080215a0 	.word	0x080215a0

0801037c <nk_contextual_item_text>:
    return ret;
}
NK_API nk_bool
nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,
    nk_flags alignment)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b092      	sub	sp, #72	; 0x48
 8010380:	af06      	add	r7, sp, #24
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	603b      	str	r3, [r7, #0]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d105      	bne.n	801039c <nk_contextual_item_text+0x20>
 8010390:	4b4e      	ldr	r3, [pc, #312]	; (80104cc <nk_contextual_item_text+0x150>)
 8010392:	4a4f      	ldr	r2, [pc, #316]	; (80104d0 <nk_contextual_item_text+0x154>)
 8010394:	214f      	movs	r1, #79	; 0x4f
 8010396:	484f      	ldr	r0, [pc, #316]	; (80104d4 <nk_contextual_item_text+0x158>)
 8010398:	f00d faea 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d105      	bne.n	80103b6 <nk_contextual_item_text+0x3a>
 80103aa:	4b4b      	ldr	r3, [pc, #300]	; (80104d8 <nk_contextual_item_text+0x15c>)
 80103ac:	4a48      	ldr	r2, [pc, #288]	; (80104d0 <nk_contextual_item_text+0x154>)
 80103ae:	2150      	movs	r1, #80	; 0x50
 80103b0:	4848      	ldr	r0, [pc, #288]	; (80104d4 <nk_contextual_item_text+0x158>)
 80103b2:	f00d fadd 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103bc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80103c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d105      	bne.n	80103d4 <nk_contextual_item_text+0x58>
 80103c8:	4b44      	ldr	r3, [pc, #272]	; (80104dc <nk_contextual_item_text+0x160>)
 80103ca:	4a41      	ldr	r2, [pc, #260]	; (80104d0 <nk_contextual_item_text+0x154>)
 80103cc:	2151      	movs	r1, #81	; 0x51
 80103ce:	4841      	ldr	r0, [pc, #260]	; (80104d4 <nk_contextual_item_text+0x158>)
 80103d0:	f00d face 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00f      	beq.n	80103fa <nk_contextual_item_text+0x7e>
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103e0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d008      	beq.n	80103fa <nk_contextual_item_text+0x7e>
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80103ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80103f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d101      	bne.n	80103fe <nk_contextual_item_text+0x82>
        return 0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	e061      	b.n	80104c2 <nk_contextual_item_text+0x146>

    win = ctx->current;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010404:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010408:	62fb      	str	r3, [r7, #44]	; 0x2c
    style = &ctx->style;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010410:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 8010412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010414:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8010418:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801041c:	f107 0310 	add.w	r3, r7, #16
 8010420:	eeb0 0a47 	vmov.f32	s0, s14
 8010424:	eef0 0a67 	vmov.f32	s1, s15
 8010428:	68f9      	ldr	r1, [r7, #12]
 801042a:	4618      	mov	r0, r3
 801042c:	f00c f974 	bl	801c718 <nk_widget_fitting>
 8010430:	4603      	mov	r3, r0
 8010432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return nk_false;
 8010436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <nk_contextual_item_text+0xc6>
 801043e:	2300      	movs	r3, #0
 8010440:	e03f      	b.n	80104c2 <nk_contextual_item_text+0x146>

    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8010442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010446:	2b02      	cmp	r3, #2
 8010448:	d009      	beq.n	801045e <nk_contextual_item_text+0xe2>
 801044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010456:	2b00      	cmp	r3, #0
 8010458:	d101      	bne.n	801045e <nk_contextual_item_text+0xe2>
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	e000      	b.n	8010460 <nk_contextual_item_text+0xe4>
 801045e:	2300      	movs	r3, #0
 8010460:	623b      	str	r3, [r7, #32]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 8010468:	3014      	adds	r0, #20
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010472:	33d0      	adds	r3, #208	; 0xd0
        text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {
 8010474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010476:	6812      	ldr	r2, [r2, #0]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8010478:	ed97 6a04 	vldr	s12, [r7, #16]
 801047c:	edd7 6a05 	vldr	s13, [r7, #20]
 8010480:	ed97 7a06 	vldr	s14, [r7, #24]
 8010484:	edd7 7a07 	vldr	s15, [r7, #28]
 8010488:	9204      	str	r2, [sp, #16]
 801048a:	6a3a      	ldr	r2, [r7, #32]
 801048c:	9203      	str	r2, [sp, #12]
 801048e:	9302      	str	r3, [sp, #8]
 8010490:	2300      	movs	r3, #0
 8010492:	9301      	str	r3, [sp, #4]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	eeb0 0a46 	vmov.f32	s0, s12
 80104a0:	eef0 0a66 	vmov.f32	s1, s13
 80104a4:	eeb0 1a47 	vmov.f32	s2, s14
 80104a8:	eef0 1a67 	vmov.f32	s3, s15
 80104ac:	f7fe f91e 	bl	800e6ec <nk_do_button_text>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d004      	beq.n	80104c0 <nk_contextual_item_text+0x144>
        nk_contextual_close(ctx);
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f000 f826 	bl	8010508 <nk_contextual_close>
        return nk_true;
 80104bc:	2301      	movs	r3, #1
 80104be:	e000      	b.n	80104c2 <nk_contextual_item_text+0x146>
    }
    return nk_false;
 80104c0:	2300      	movs	r3, #0
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3730      	adds	r7, #48	; 0x30
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	080215ec 	.word	0x080215ec
 80104d0:	080232b0 	.word	0x080232b0
 80104d4:	080215f0 	.word	0x080215f0
 80104d8:	08021610 	.word	0x08021610
 80104dc:	08021620 	.word	0x08021620

080104e0 <nk_contextual_item_label>:
NK_API nk_bool
nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 80104ec:	68b8      	ldr	r0, [r7, #8]
 80104ee:	f00b fd75 	bl	801bfdc <nk_strlen>
 80104f2:	4602      	mov	r2, r0
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	68b9      	ldr	r1, [r7, #8]
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f7ff ff3f 	bl	801037c <nk_contextual_item_text>
 80104fe:	4603      	mov	r3, r0
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d105      	bne.n	8010522 <nk_contextual_close+0x1a>
 8010516:	4b1e      	ldr	r3, [pc, #120]	; (8010590 <nk_contextual_close+0x88>)
 8010518:	4a1e      	ldr	r2, [pc, #120]	; (8010594 <nk_contextual_close+0x8c>)
 801051a:	21b2      	movs	r1, #178	; 0xb2
 801051c:	481e      	ldr	r0, [pc, #120]	; (8010598 <nk_contextual_close+0x90>)
 801051e:	f00d fa27 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010528:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801052c:	2b00      	cmp	r3, #0
 801052e:	d105      	bne.n	801053c <nk_contextual_close+0x34>
 8010530:	4b1a      	ldr	r3, [pc, #104]	; (801059c <nk_contextual_close+0x94>)
 8010532:	4a18      	ldr	r2, [pc, #96]	; (8010594 <nk_contextual_close+0x8c>)
 8010534:	21b3      	movs	r1, #179	; 0xb3
 8010536:	4818      	ldr	r0, [pc, #96]	; (8010598 <nk_contextual_close+0x90>)
 8010538:	f00d fa1a 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010542:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801054a:	2b00      	cmp	r3, #0
 801054c:	d105      	bne.n	801055a <nk_contextual_close+0x52>
 801054e:	4b14      	ldr	r3, [pc, #80]	; (80105a0 <nk_contextual_close+0x98>)
 8010550:	4a10      	ldr	r2, [pc, #64]	; (8010594 <nk_contextual_close+0x8c>)
 8010552:	21b4      	movs	r1, #180	; 0xb4
 8010554:	4810      	ldr	r0, [pc, #64]	; (8010598 <nk_contextual_close+0x90>)
 8010556:	f00d fa0b 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d013      	beq.n	8010588 <nk_contextual_close+0x80>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010566:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00c      	beq.n	8010588 <nk_contextual_close+0x80>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010574:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801057c:	2b00      	cmp	r3, #0
 801057e:	d003      	beq.n	8010588 <nk_contextual_close+0x80>
    nk_popup_close(ctx);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f006 f8b3 	bl	80166ec <nk_popup_close>
 8010586:	e000      	b.n	801058a <nk_contextual_close+0x82>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 8010588:	bf00      	nop
}
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	080215ec 	.word	0x080215ec
 8010594:	080232c8 	.word	0x080232c8
 8010598:	080215f0 	.word	0x080215f0
 801059c:	08021610 	.word	0x08021610
 80105a0:	08021620 	.word	0x08021620

080105a4 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b08d      	sub	sp, #52	; 0x34
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d105      	bne.n	80105be <nk_contextual_end+0x1a>
 80105b2:	4b69      	ldr	r3, [pc, #420]	; (8010758 <nk_contextual_end+0x1b4>)
 80105b4:	4a69      	ldr	r2, [pc, #420]	; (801075c <nk_contextual_end+0x1b8>)
 80105b6:	21bd      	movs	r1, #189	; 0xbd
 80105b8:	4869      	ldr	r0, [pc, #420]	; (8010760 <nk_contextual_end+0x1bc>)
 80105ba:	f00d f9d9 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80105c4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d105      	bne.n	80105d8 <nk_contextual_end+0x34>
 80105cc:	4b65      	ldr	r3, [pc, #404]	; (8010764 <nk_contextual_end+0x1c0>)
 80105ce:	4a63      	ldr	r2, [pc, #396]	; (801075c <nk_contextual_end+0x1b8>)
 80105d0:	21be      	movs	r1, #190	; 0xbe
 80105d2:	4863      	ldr	r0, [pc, #396]	; (8010760 <nk_contextual_end+0x1bc>)
 80105d4:	f00d f9cc 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current) return;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 80b8 	beq.w	8010750 <nk_contextual_end+0x1ac>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80105e6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f000 80b0 	beq.w	8010750 <nk_contextual_end+0x1ac>

    popup = ctx->current;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80105f6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80105fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    panel = popup->layout;
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010602:	62bb      	str	r3, [r7, #40]	; 0x28
    NK_ASSERT(popup->parent);
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801060a:	2b00      	cmp	r3, #0
 801060c:	d105      	bne.n	801061a <nk_contextual_end+0x76>
 801060e:	4b56      	ldr	r3, [pc, #344]	; (8010768 <nk_contextual_end+0x1c4>)
 8010610:	4a52      	ldr	r2, [pc, #328]	; (801075c <nk_contextual_end+0x1b8>)
 8010612:	21c3      	movs	r1, #195	; 0xc3
 8010614:	4852      	ldr	r0, [pc, #328]	; (8010760 <nk_contextual_end+0x1bc>)
 8010616:	f00d f9ab 	bl	801d970 <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8010622:	2b00      	cmp	r3, #0
 8010624:	d105      	bne.n	8010632 <nk_contextual_end+0x8e>
 8010626:	4b51      	ldr	r3, [pc, #324]	; (801076c <nk_contextual_end+0x1c8>)
 8010628:	4a4c      	ldr	r2, [pc, #304]	; (801075c <nk_contextual_end+0x1b8>)
 801062a:	21c4      	movs	r1, #196	; 0xc4
 801062c:	484c      	ldr	r0, [pc, #304]	; (8010760 <nk_contextual_end+0x1bc>)
 801062e:	f00d f99f 	bl	801d970 <__assert_func>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 8010632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801063a:	2b00      	cmp	r3, #0
 801063c:	d07b      	beq.n	8010736 <nk_contextual_end+0x192>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 801063e:	f107 0310 	add.w	r3, r7, #16
 8010642:	2200      	movs	r2, #0
 8010644:	601a      	str	r2, [r3, #0]
 8010646:	605a      	str	r2, [r3, #4]
 8010648:	609a      	str	r2, [r3, #8]
 801064a:	60da      	str	r2, [r3, #12]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010654:	edd3 6a03 	vldr	s13, [r3, #12]
 8010658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065a:	edd3 7a05 	vldr	s15, [r3, #20]
 801065e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066a:	d53d      	bpl.n	80106e8 <nk_contextual_end+0x144>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8010672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f003 fc93 	bl	8013fa4 <nk_panel_get_padding>
 801067e:	eeb0 7a40 	vmov.f32	s14, s0
 8010682:	eef0 7a60 	vmov.f32	s15, s1
 8010686:	ed87 7a02 	vstr	s14, [r7, #8]
 801068a:	edc7 7a03 	vstr	s15, [r7, #12]
            body = panel->bounds;
 801068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010690:	f107 0410 	add.w	r4, r7, #16
 8010694:	3308      	adds	r3, #8
 8010696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80106a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80106a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80106b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80106ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80106c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106c8:	edc7 7a05 	vstr	s15, [r7, #20]
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 80106cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80106d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80106d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80106e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2100      	movs	r1, #0
 80106ec:	4618      	mov	r0, r3
 80106ee:	f001 ff8e 	bl	801260e <nk_input_is_mouse_pressed>
 80106f2:	6278      	str	r0, [r7, #36]	; 0x24
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80106fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80106fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8010702:	edd7 7a07 	vldr	s15, [r7, #28]
 8010706:	eeb0 0a46 	vmov.f32	s0, s12
 801070a:	eef0 0a66 	vmov.f32	s1, s13
 801070e:	eeb0 1a47 	vmov.f32	s2, s14
 8010712:	eef0 1a67 	vmov.f32	s3, s15
 8010716:	4618      	mov	r0, r3
 8010718:	f001 febd 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 801071c:	6238      	str	r0, [r7, #32]
        if (pressed && in_body)
 801071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010720:	2b00      	cmp	r3, #0
 8010722:	d008      	beq.n	8010736 <nk_contextual_end+0x192>
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d005      	beq.n	8010736 <nk_contextual_end+0x192>
            popup->flags |= NK_WINDOW_HIDDEN;
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801072e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8010732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010734:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <nk_contextual_end+0x1a4>
        popup->seq = 0;
 8010742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010744:	2200      	movs	r2, #0
 8010746:	601a      	str	r2, [r3, #0]
    nk_popup_end(ctx);
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f006 f81b 	bl	8016784 <nk_popup_end>
    return;
 801074e:	e000      	b.n	8010752 <nk_contextual_end+0x1ae>
    if (!ctx || !ctx->current) return;
 8010750:	bf00      	nop
}
 8010752:	3734      	adds	r7, #52	; 0x34
 8010754:	46bd      	mov	sp, r7
 8010756:	bd90      	pop	{r4, r7, pc}
 8010758:	080215ec 	.word	0x080215ec
 801075c:	080232dc 	.word	0x080232dc
 8010760:	080215f0 	.word	0x080215f0
 8010764:	08021610 	.word	0x08021610
 8010768:	08021638 	.word	0x08021638
 801076c:	08021648 	.word	0x08021648

08010770 <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	4613      	mov	r3, r2
 801077c:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(cb);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d105      	bne.n	8010790 <nk_command_buffer_init+0x20>
 8010784:	4b15      	ldr	r3, [pc, #84]	; (80107dc <nk_command_buffer_init+0x6c>)
 8010786:	4a16      	ldr	r2, [pc, #88]	; (80107e0 <nk_command_buffer_init+0x70>)
 8010788:	210d      	movs	r1, #13
 801078a:	4816      	ldr	r0, [pc, #88]	; (80107e4 <nk_command_buffer_init+0x74>)
 801078c:	f00d f8f0 	bl	801d970 <__assert_func>
    NK_ASSERT(b);
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d105      	bne.n	80107a2 <nk_command_buffer_init+0x32>
 8010796:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <nk_command_buffer_init+0x78>)
 8010798:	4a11      	ldr	r2, [pc, #68]	; (80107e0 <nk_command_buffer_init+0x70>)
 801079a:	210e      	movs	r1, #14
 801079c:	4811      	ldr	r0, [pc, #68]	; (80107e4 <nk_command_buffer_init+0x74>)
 801079e:	f00d f8e7 	bl	801d970 <__assert_func>
    if (!cb || !b) return;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d015      	beq.n	80107d4 <nk_command_buffer_init+0x64>
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d012      	beq.n	80107d4 <nk_command_buffer_init+0x64>
    cb->base = b;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	601a      	str	r2, [r3, #0]
    cb->use_clipping = (int)clip;
 80107b4:	79fa      	ldrb	r2, [r7, #7]
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	615a      	str	r2, [r3, #20]
    cb->begin = b->allocated;
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	61da      	str	r2, [r3, #28]
    cb->end = b->allocated;
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	621a      	str	r2, [r3, #32]
    cb->last = b->allocated;
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	625a      	str	r2, [r3, #36]	; 0x24
 80107d2:	e000      	b.n	80107d6 <nk_command_buffer_init+0x66>
    if (!cb || !b) return;
 80107d4:	bf00      	nop
}
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	0802166c 	.word	0x0802166c
 80107e0:	08023300 	.word	0x08023300
 80107e4:	08021670 	.word	0x08021670
 80107e8:	0802168c 	.word	0x0802168c

080107ec <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 80107ec:	b590      	push	{r4, r7, lr}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d105      	bne.n	8010806 <nk_command_buffer_reset+0x1a>
 80107fa:	4b0f      	ldr	r3, [pc, #60]	; (8010838 <nk_command_buffer_reset+0x4c>)
 80107fc:	4a0f      	ldr	r2, [pc, #60]	; (801083c <nk_command_buffer_reset+0x50>)
 80107fe:	2119      	movs	r1, #25
 8010800:	480f      	ldr	r0, [pc, #60]	; (8010840 <nk_command_buffer_reset+0x54>)
 8010802:	f00d f8b5 	bl	801d970 <__assert_func>
    if (!b) return;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d010      	beq.n	801082e <nk_command_buffer_reset+0x42>
    b->begin = 0;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	61da      	str	r2, [r3, #28]
    b->end = 0;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	621a      	str	r2, [r3, #32]
    b->last = 0;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	625a      	str	r2, [r3, #36]	; 0x24
    b->clip = nk_null_rect;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4a08      	ldr	r2, [pc, #32]	; (8010844 <nk_command_buffer_reset+0x58>)
 8010822:	1d1c      	adds	r4, r3, #4
 8010824:	4613      	mov	r3, r2
 8010826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801082c:	e000      	b.n	8010830 <nk_command_buffer_reset+0x44>
    if (!b) return;
 801082e:	bf00      	nop
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 8010830:	370c      	adds	r7, #12
 8010832:	46bd      	mov	sp, r7
 8010834:	bd90      	pop	{r4, r7, pc}
 8010836:	bf00      	nop
 8010838:	0802168c 	.word	0x0802168c
 801083c:	08023318 	.word	0x08023318
 8010840:	08021670 	.word	0x08021670
 8010844:	080232f0 	.word	0x080232f0

08010848 <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b088      	sub	sp, #32
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	460b      	mov	r3, r1
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	72fb      	strb	r3, [r7, #11]
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d105      	bne.n	8010868 <nk_command_buffer_push+0x20>
 801085c:	4b28      	ldr	r3, [pc, #160]	; (8010900 <nk_command_buffer_push+0xb8>)
 801085e:	4a29      	ldr	r2, [pc, #164]	; (8010904 <nk_command_buffer_push+0xbc>)
 8010860:	212d      	movs	r1, #45	; 0x2d
 8010862:	4829      	ldr	r0, [pc, #164]	; (8010908 <nk_command_buffer_push+0xc0>)
 8010864:	f00d f884 	bl	801d970 <__assert_func>
    NK_ASSERT(b->base);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <nk_command_buffer_push+0x34>
 8010870:	4b26      	ldr	r3, [pc, #152]	; (801090c <nk_command_buffer_push+0xc4>)
 8010872:	4a24      	ldr	r2, [pc, #144]	; (8010904 <nk_command_buffer_push+0xbc>)
 8010874:	212e      	movs	r1, #46	; 0x2e
 8010876:	4824      	ldr	r0, [pc, #144]	; (8010908 <nk_command_buffer_push+0xc0>)
 8010878:	f00d f87a 	bl	801d970 <__assert_func>
    if (!b) return 0;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d101      	bne.n	8010886 <nk_command_buffer_push+0x3e>
 8010882:	2300      	movs	r3, #0
 8010884:	e037      	b.n	80108f6 <nk_command_buffer_push+0xae>
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	6818      	ldr	r0, [r3, #0]
 801088a:	4b21      	ldr	r3, [pc, #132]	; (8010910 <nk_command_buffer_push+0xc8>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	2100      	movs	r1, #0
 8010892:	f7fd f96f 	bl	800db74 <nk_buffer_alloc>
 8010896:	61f8      	str	r0, [r7, #28]
    if (!cmd) return 0;
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d101      	bne.n	80108a2 <nk_command_buffer_push+0x5a>
 801089e:	2300      	movs	r3, #0
 80108a0:	e029      	b.n	80108f6 <nk_command_buffer_push+0xae>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6a1b      	ldr	r3, [r3, #32]
 80108a8:	69fa      	ldr	r2, [r7, #28]
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	461a      	mov	r2, r3
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	625a      	str	r2, [r3, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 80108b2:	69fa      	ldr	r2, [r7, #28]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4413      	add	r3, r2
 80108b8:	61bb      	str	r3, [r7, #24]
    memory = NK_ALIGN_PTR(unaligned, align);
 80108ba:	4b15      	ldr	r3, [pc, #84]	; (8010910 <nk_command_buffer_push+0xc8>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	3b01      	subs	r3, #1
 80108c0:	69ba      	ldr	r2, [r7, #24]
 80108c2:	4413      	add	r3, r2
 80108c4:	461a      	mov	r2, r3
 80108c6:	4b12      	ldr	r3, [pc, #72]	; (8010910 <nk_command_buffer_push+0xc8>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	425b      	negs	r3, r3
 80108cc:	4013      	ands	r3, r2
 80108ce:	617b      	str	r3, [r7, #20]
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 80108d0:	697a      	ldr	r2, [r7, #20]
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	613b      	str	r3, [r7, #16]
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	7afa      	ldrb	r2, [r7, #11]
 80108dc:	701a      	strb	r2, [r3, #0]
    cmd->next = b->base->allocated + alignment;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	441a      	add	r2, r3
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	605a      	str	r2, [r3, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	685a      	ldr	r2, [r3, #4]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	621a      	str	r2, [r3, #32]
    return cmd;
 80108f4:	69fb      	ldr	r3, [r7, #28]
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3720      	adds	r7, #32
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	0802168c 	.word	0x0802168c
 8010904:	08023330 	.word	0x08023330
 8010908:	08021670 	.word	0x08021670
 801090c:	08021690 	.word	0x08021690
 8010910:	08023348 	.word	0x08023348

08010914 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b088      	sub	sp, #32
 8010918:	af00      	add	r7, sp, #0
 801091a:	6178      	str	r0, [r7, #20]
 801091c:	eeb0 6a40 	vmov.f32	s12, s0
 8010920:	eef0 6a60 	vmov.f32	s13, s1
 8010924:	eeb0 7a41 	vmov.f32	s14, s2
 8010928:	eef0 7a61 	vmov.f32	s15, s3
 801092c:	ed87 6a01 	vstr	s12, [r7, #4]
 8010930:	edc7 6a02 	vstr	s13, [r7, #8]
 8010934:	ed87 7a03 	vstr	s14, [r7, #12]
 8010938:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d105      	bne.n	801094e <nk_push_scissor+0x3a>
 8010942:	4b2d      	ldr	r3, [pc, #180]	; (80109f8 <nk_push_scissor+0xe4>)
 8010944:	4a2d      	ldr	r2, [pc, #180]	; (80109fc <nk_push_scissor+0xe8>)
 8010946:	2148      	movs	r1, #72	; 0x48
 8010948:	482d      	ldr	r0, [pc, #180]	; (8010a00 <nk_push_scissor+0xec>)
 801094a:	f00d f811 	bl	801d970 <__assert_func>
    if (!b) return;
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d04b      	beq.n	80109ec <nk_push_scissor+0xd8>

    b->clip.x = r.x;
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	605a      	str	r2, [r3, #4]
    b->clip.y = r.y;
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	609a      	str	r2, [r3, #8]
    b->clip.w = r.w;
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	60da      	str	r2, [r3, #12]
    b->clip.h = r.h;
 8010966:	693a      	ldr	r2, [r7, #16]
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	611a      	str	r2, [r3, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 801096c:	2210      	movs	r2, #16
 801096e:	2101      	movs	r1, #1
 8010970:	6978      	ldr	r0, [r7, #20]
 8010972:	f7ff ff69 	bl	8010848 <nk_command_buffer_push>
 8010976:	61f8      	str	r0, [r7, #28]

    if (!cmd) return;
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d038      	beq.n	80109f0 <nk_push_scissor+0xdc>
    cmd->x = (short)r.x;
 801097e:	edd7 7a01 	vldr	s15, [r7, #4]
 8010982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010986:	ee17 3a90 	vmov	r3, s15
 801098a:	b21a      	sxth	r2, r3
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8010990:	edd7 7a02 	vldr	s15, [r7, #8]
 8010994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010998:	ee17 3a90 	vmov	r3, s15
 801099c:	b21a      	sxth	r2, r3
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 80109a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80109a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80109aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ae:	dd07      	ble.n	80109c0 <nk_push_scissor+0xac>
 80109b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80109b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109b8:	ee17 3a90 	vmov	r3, s15
 80109bc:	b29a      	uxth	r2, r3
 80109be:	e000      	b.n	80109c2 <nk_push_scissor+0xae>
 80109c0:	2200      	movs	r2, #0
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 80109c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80109ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	dd07      	ble.n	80109e4 <nk_push_scissor+0xd0>
 80109d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80109d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109dc:	ee17 3a90 	vmov	r3, s15
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	e000      	b.n	80109e6 <nk_push_scissor+0xd2>
 80109e4:	2200      	movs	r2, #0
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	81da      	strh	r2, [r3, #14]
 80109ea:	e002      	b.n	80109f2 <nk_push_scissor+0xde>
    if (!b) return;
 80109ec:	bf00      	nop
 80109ee:	e000      	b.n	80109f2 <nk_push_scissor+0xde>
    if (!cmd) return;
 80109f0:	bf00      	nop
}
 80109f2:	3720      	adds	r7, #32
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	0802168c 	.word	0x0802168c
 80109fc:	0802334c 	.word	0x0802334c
 8010a00:	08021670 	.word	0x08021670

08010a04 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b08a      	sub	sp, #40	; 0x28
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	61f8      	str	r0, [r7, #28]
 8010a0c:	eeb0 6a40 	vmov.f32	s12, s0
 8010a10:	eef0 6a60 	vmov.f32	s13, s1
 8010a14:	eeb0 7a41 	vmov.f32	s14, s2
 8010a18:	eef0 7a61 	vmov.f32	s15, s3
 8010a1c:	ed87 2a02 	vstr	s4, [r7, #8]
 8010a20:	edc7 2a01 	vstr	s5, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
 8010a26:	ed87 6a03 	vstr	s12, [r7, #12]
 8010a2a:	edc7 6a04 	vstr	s13, [r7, #16]
 8010a2e:	ed87 7a05 	vstr	s14, [r7, #20]
 8010a32:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d105      	bne.n	8010a48 <nk_stroke_rect+0x44>
 8010a3c:	4b72      	ldr	r3, [pc, #456]	; (8010c08 <nk_stroke_rect+0x204>)
 8010a3e:	4a73      	ldr	r2, [pc, #460]	; (8010c0c <nk_stroke_rect+0x208>)
 8010a40:	2185      	movs	r1, #133	; 0x85
 8010a42:	4873      	ldr	r0, [pc, #460]	; (8010c10 <nk_stroke_rect+0x20c>)
 8010a44:	f00c ff94 	bl	801d970 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f000 80d4 	beq.w	8010bf8 <nk_stroke_rect+0x1f4>
 8010a50:	78fb      	ldrb	r3, [r7, #3]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	f000 80d0 	beq.w	8010bf8 <nk_stroke_rect+0x1f4>
 8010a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8010a5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	f000 80c8 	beq.w	8010bf8 <nk_stroke_rect+0x1f4>
 8010a68:	edd7 7a06 	vldr	s15, [r7, #24]
 8010a6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a74:	f000 80c0 	beq.w	8010bf8 <nk_stroke_rect+0x1f4>
 8010a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8010a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a84:	f240 80b8 	bls.w	8010bf8 <nk_stroke_rect+0x1f4>
    if (b->use_clipping) {
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d05e      	beq.n	8010b4e <nk_stroke_rect+0x14a>
        const struct nk_rect *clip = &b->clip;
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	3304      	adds	r3, #4
 8010a94:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8010a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a98:	ed93 7a00 	vldr	s14, [r3]
 8010a9c:	edd7 6a03 	vldr	s13, [r7, #12]
 8010aa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8010aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab0:	bf4c      	ite	mi
 8010ab2:	2301      	movmi	r3, #1
 8010ab4:	2300      	movpl	r3, #0
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	f083 0301 	eor.w	r3, r3, #1
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f040 809c 	bne.w	8010bfc <nk_stroke_rect+0x1f8>
 8010ac4:	ed97 7a03 	vldr	s14, [r7, #12]
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aca:	edd3 6a00 	vldr	s13, [r3]
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	edd3 7a02 	vldr	s15, [r3, #8]
 8010ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae0:	bf4c      	ite	mi
 8010ae2:	2301      	movmi	r3, #1
 8010ae4:	2300      	movpl	r3, #0
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f083 0301 	eor.w	r3, r3, #1
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f040 8084 	bne.w	8010bfc <nk_stroke_rect+0x1f8>
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af6:	ed93 7a01 	vldr	s14, [r3, #4]
 8010afa:	edd7 6a04 	vldr	s13, [r7, #16]
 8010afe:	edd7 7a06 	vldr	s15, [r7, #24]
 8010b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0e:	bf4c      	ite	mi
 8010b10:	2301      	movmi	r3, #1
 8010b12:	2300      	movpl	r3, #0
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	f083 0301 	eor.w	r3, r3, #1
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d16d      	bne.n	8010bfc <nk_stroke_rect+0x1f8>
 8010b20:	ed97 7a04 	vldr	s14, [r7, #16]
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	edd3 6a01 	vldr	s13, [r3, #4]
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8010b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3c:	bf4c      	ite	mi
 8010b3e:	2301      	movmi	r3, #1
 8010b40:	2300      	movpl	r3, #0
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	f083 0301 	eor.w	r3, r3, #1
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d156      	bne.n	8010bfc <nk_stroke_rect+0x1f8>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 8010b4e:	2218      	movs	r2, #24
 8010b50:	2104      	movs	r1, #4
 8010b52:	69f8      	ldr	r0, [r7, #28]
 8010b54:	f7ff fe78 	bl	8010848 <nk_command_buffer_push>
 8010b58:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8010b5a:	6a3b      	ldr	r3, [r7, #32]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d04f      	beq.n	8010c00 <nk_stroke_rect+0x1fc>
    cmd->rounding = (unsigned short)rounding;
 8010b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8010b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b68:	ee17 3a90 	vmov	r3, s15
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	6a3b      	ldr	r3, [r7, #32]
 8010b70:	811a      	strh	r2, [r3, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 8010b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8010b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b7a:	ee17 3a90 	vmov	r3, s15
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	6a3b      	ldr	r3, [r7, #32]
 8010b82:	815a      	strh	r2, [r3, #10]
    cmd->x = (short)rect.x;
 8010b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b8c:	ee17 3a90 	vmov	r3, s15
 8010b90:	b21a      	sxth	r2, r3
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	819a      	strh	r2, [r3, #12]
    cmd->y = (short)rect.y;
 8010b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8010b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b9e:	ee17 3a90 	vmov	r3, s15
 8010ba2:	b21a      	sxth	r2, r3
 8010ba4:	6a3b      	ldr	r3, [r7, #32]
 8010ba6:	81da      	strh	r2, [r3, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8010ba8:	edd7 7a05 	vldr	s15, [r7, #20]
 8010bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb4:	dd07      	ble.n	8010bc6 <nk_stroke_rect+0x1c2>
 8010bb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8010bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010bbe:	ee17 3a90 	vmov	r3, s15
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	e000      	b.n	8010bc8 <nk_stroke_rect+0x1c4>
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	821a      	strh	r2, [r3, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8010bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8010bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd8:	dd07      	ble.n	8010bea <nk_stroke_rect+0x1e6>
 8010bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8010bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010be2:	ee17 3a90 	vmov	r3, s15
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	e000      	b.n	8010bec <nk_stroke_rect+0x1e8>
 8010bea:	2200      	movs	r2, #0
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	683a      	ldr	r2, [r7, #0]
 8010bf4:	615a      	str	r2, [r3, #20]
 8010bf6:	e004      	b.n	8010c02 <nk_stroke_rect+0x1fe>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8010bf8:	bf00      	nop
 8010bfa:	e002      	b.n	8010c02 <nk_stroke_rect+0x1fe>
            clip->x, clip->y, clip->w, clip->h)) return;
 8010bfc:	bf00      	nop
 8010bfe:	e000      	b.n	8010c02 <nk_stroke_rect+0x1fe>
    if (!cmd) return;
 8010c00:	bf00      	nop
}
 8010c02:	3728      	adds	r7, #40	; 0x28
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0802168c 	.word	0x0802168c
 8010c0c:	0802335c 	.word	0x0802335c
 8010c10:	08021670 	.word	0x08021670

08010c14 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08a      	sub	sp, #40	; 0x28
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	61f8      	str	r0, [r7, #28]
 8010c1c:	eeb0 6a40 	vmov.f32	s12, s0
 8010c20:	eef0 6a60 	vmov.f32	s13, s1
 8010c24:	eeb0 7a41 	vmov.f32	s14, s2
 8010c28:	eef0 7a61 	vmov.f32	s15, s3
 8010c2c:	ed87 2a02 	vstr	s4, [r7, #8]
 8010c30:	6079      	str	r1, [r7, #4]
 8010c32:	ed87 6a03 	vstr	s12, [r7, #12]
 8010c36:	edc7 6a04 	vstr	s13, [r7, #16]
 8010c3a:	ed87 7a05 	vstr	s14, [r7, #20]
 8010c3e:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d105      	bne.n	8010c54 <nk_fill_rect+0x40>
 8010c48:	4b6a      	ldr	r3, [pc, #424]	; (8010df4 <nk_fill_rect+0x1e0>)
 8010c4a:	4a6b      	ldr	r2, [pc, #428]	; (8010df8 <nk_fill_rect+0x1e4>)
 8010c4c:	219c      	movs	r1, #156	; 0x9c
 8010c4e:	486b      	ldr	r0, [pc, #428]	; (8010dfc <nk_fill_rect+0x1e8>)
 8010c50:	f00c fe8e 	bl	801d970 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f000 80c4 	beq.w	8010de4 <nk_fill_rect+0x1d0>
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f000 80c0 	beq.w	8010de4 <nk_fill_rect+0x1d0>
 8010c64:	edd7 7a05 	vldr	s15, [r7, #20]
 8010c68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	f000 80b8 	beq.w	8010de4 <nk_fill_rect+0x1d0>
 8010c74:	edd7 7a06 	vldr	s15, [r7, #24]
 8010c78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c80:	f000 80b0 	beq.w	8010de4 <nk_fill_rect+0x1d0>
    if (b->use_clipping) {
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	695b      	ldr	r3, [r3, #20]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d05d      	beq.n	8010d48 <nk_fill_rect+0x134>
        const struct nk_rect *clip = &b->clip;
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	3304      	adds	r3, #4
 8010c90:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	ed93 7a00 	vldr	s14, [r3]
 8010c98:	edd7 6a03 	vldr	s13, [r7, #12]
 8010c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cac:	bf4c      	ite	mi
 8010cae:	2301      	movmi	r3, #1
 8010cb0:	2300      	movpl	r3, #0
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	f083 0301 	eor.w	r3, r3, #1
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f040 8094 	bne.w	8010de8 <nk_fill_rect+0x1d4>
 8010cc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	edd3 6a00 	vldr	s13, [r3]
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	edd3 7a02 	vldr	s15, [r3, #8]
 8010cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cdc:	bf4c      	ite	mi
 8010cde:	2301      	movmi	r3, #1
 8010ce0:	2300      	movpl	r3, #0
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	f083 0301 	eor.w	r3, r3, #1
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d17c      	bne.n	8010de8 <nk_fill_rect+0x1d4>
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8010cf4:	edd7 6a04 	vldr	s13, [r7, #16]
 8010cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d08:	bf4c      	ite	mi
 8010d0a:	2301      	movmi	r3, #1
 8010d0c:	2300      	movpl	r3, #0
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	f083 0301 	eor.w	r3, r3, #1
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d166      	bne.n	8010de8 <nk_fill_rect+0x1d4>
 8010d1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d20:	edd3 6a01 	vldr	s13, [r3, #4]
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8010d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d36:	bf4c      	ite	mi
 8010d38:	2301      	movmi	r3, #1
 8010d3a:	2300      	movpl	r3, #0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	f083 0301 	eor.w	r3, r3, #1
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d14f      	bne.n	8010de8 <nk_fill_rect+0x1d4>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 8010d48:	2218      	movs	r2, #24
 8010d4a:	2105      	movs	r1, #5
 8010d4c:	69f8      	ldr	r0, [r7, #28]
 8010d4e:	f7ff fd7b 	bl	8010848 <nk_command_buffer_push>
 8010d52:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d048      	beq.n	8010dec <nk_fill_rect+0x1d8>
    cmd->rounding = (unsigned short)rounding;
 8010d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8010d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d62:	ee17 3a90 	vmov	r3, s15
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	6a3b      	ldr	r3, [r7, #32]
 8010d6a:	811a      	strh	r2, [r3, #8]
    cmd->x = (short)rect.x;
 8010d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d74:	ee17 3a90 	vmov	r3, s15
 8010d78:	b21a      	sxth	r2, r3
 8010d7a:	6a3b      	ldr	r3, [r7, #32]
 8010d7c:	815a      	strh	r2, [r3, #10]
    cmd->y = (short)rect.y;
 8010d7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8010d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d86:	ee17 3a90 	vmov	r3, s15
 8010d8a:	b21a      	sxth	r2, r3
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	819a      	strh	r2, [r3, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8010d90:	edd7 7a05 	vldr	s15, [r7, #20]
 8010d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9c:	dd07      	ble.n	8010dae <nk_fill_rect+0x19a>
 8010d9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010da6:	ee17 3a90 	vmov	r3, s15
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	e000      	b.n	8010db0 <nk_fill_rect+0x19c>
 8010dae:	2200      	movs	r2, #0
 8010db0:	6a3b      	ldr	r3, [r7, #32]
 8010db2:	81da      	strh	r2, [r3, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8010db4:	edd7 7a06 	vldr	s15, [r7, #24]
 8010db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc0:	dd07      	ble.n	8010dd2 <nk_fill_rect+0x1be>
 8010dc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8010dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010dca:	ee17 3a90 	vmov	r3, s15
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	e000      	b.n	8010dd4 <nk_fill_rect+0x1c0>
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	6a3b      	ldr	r3, [r7, #32]
 8010dd6:	821a      	strh	r2, [r3, #16]
    cmd->color = c;
 8010dd8:	6a3b      	ldr	r3, [r7, #32]
 8010dda:	3312      	adds	r3, #18
 8010ddc:	1d3a      	adds	r2, r7, #4
 8010dde:	6810      	ldr	r0, [r2, #0]
 8010de0:	6018      	str	r0, [r3, #0]
 8010de2:	e004      	b.n	8010dee <nk_fill_rect+0x1da>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8010de4:	bf00      	nop
 8010de6:	e002      	b.n	8010dee <nk_fill_rect+0x1da>
            clip->x, clip->y, clip->w, clip->h)) return;
 8010de8:	bf00      	nop
 8010dea:	e000      	b.n	8010dee <nk_fill_rect+0x1da>
    if (!cmd) return;
 8010dec:	bf00      	nop
}
 8010dee:	3728      	adds	r7, #40	; 0x28
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	0802168c 	.word	0x0802168c
 8010df8:	0802336c 	.word	0x0802336c
 8010dfc:	08021670 	.word	0x08021670

08010e00 <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6178      	str	r0, [r7, #20]
 8010e08:	eeb0 6a40 	vmov.f32	s12, s0
 8010e0c:	eef0 6a60 	vmov.f32	s13, s1
 8010e10:	eeb0 7a41 	vmov.f32	s14, s2
 8010e14:	eef0 7a61 	vmov.f32	s15, s3
 8010e18:	6039      	str	r1, [r7, #0]
 8010e1a:	ed87 6a01 	vstr	s12, [r7, #4]
 8010e1e:	edc7 6a02 	vstr	s13, [r7, #8]
 8010e22:	ed87 7a03 	vstr	s14, [r7, #12]
 8010e26:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d105      	bne.n	8010e3c <nk_fill_circle+0x3c>
 8010e30:	4b65      	ldr	r3, [pc, #404]	; (8010fc8 <nk_fill_circle+0x1c8>)
 8010e32:	4a66      	ldr	r2, [pc, #408]	; (8010fcc <nk_fill_circle+0x1cc>)
 8010e34:	21e2      	movs	r1, #226	; 0xe2
 8010e36:	4866      	ldr	r0, [pc, #408]	; (8010fd0 <nk_fill_circle+0x1d0>)
 8010e38:	f00c fd9a 	bl	801d970 <__assert_func>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f000 80b9 	beq.w	8010fb6 <nk_fill_circle+0x1b6>
 8010e44:	78fb      	ldrb	r3, [r7, #3]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 80b5 	beq.w	8010fb6 <nk_fill_circle+0x1b6>
 8010e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010e50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e58:	f000 80ad 	beq.w	8010fb6 <nk_fill_circle+0x1b6>
 8010e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010e60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e68:	f000 80a5 	beq.w	8010fb6 <nk_fill_circle+0x1b6>
    if (b->use_clipping) {
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	695b      	ldr	r3, [r3, #20]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d05d      	beq.n	8010f30 <nk_fill_circle+0x130>
        const struct nk_rect *clip = &b->clip;
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	3304      	adds	r3, #4
 8010e78:	61fb      	str	r3, [r7, #28]
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	ed93 7a00 	vldr	s14, [r3]
 8010e80:	edd7 6a01 	vldr	s13, [r7, #4]
 8010e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8010e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e94:	bf4c      	ite	mi
 8010e96:	2301      	movmi	r3, #1
 8010e98:	2300      	movpl	r3, #0
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	f083 0301 	eor.w	r3, r3, #1
 8010ea0:	b2db      	uxtb	r3, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f040 8089 	bne.w	8010fba <nk_fill_circle+0x1ba>
 8010ea8:	ed97 7a01 	vldr	s14, [r7, #4]
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	edd3 6a00 	vldr	s13, [r3]
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8010eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec4:	bf4c      	ite	mi
 8010ec6:	2301      	movmi	r3, #1
 8010ec8:	2300      	movpl	r3, #0
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	f083 0301 	eor.w	r3, r3, #1
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d171      	bne.n	8010fba <nk_fill_circle+0x1ba>
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	ed93 7a01 	vldr	s14, [r3, #4]
 8010edc:	edd7 6a02 	vldr	s13, [r7, #8]
 8010ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8010ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef0:	bf4c      	ite	mi
 8010ef2:	2301      	movmi	r3, #1
 8010ef4:	2300      	movpl	r3, #0
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	f083 0301 	eor.w	r3, r3, #1
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d15b      	bne.n	8010fba <nk_fill_circle+0x1ba>
 8010f02:	ed97 7a02 	vldr	s14, [r7, #8]
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	edd3 6a01 	vldr	s13, [r3, #4]
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1e:	bf4c      	ite	mi
 8010f20:	2301      	movmi	r3, #1
 8010f22:	2300      	movpl	r3, #0
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	f083 0301 	eor.w	r3, r3, #1
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d144      	bne.n	8010fba <nk_fill_circle+0x1ba>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 8010f30:	2214      	movs	r2, #20
 8010f32:	2108      	movs	r1, #8
 8010f34:	6978      	ldr	r0, [r7, #20]
 8010f36:	f7ff fc87 	bl	8010848 <nk_command_buffer_push>
 8010f3a:	61b8      	str	r0, [r7, #24]
    if (!cmd) return;
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d03d      	beq.n	8010fbe <nk_fill_circle+0x1be>
    cmd->x = (short)r.x;
 8010f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8010f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f4a:	ee17 3a90 	vmov	r3, s15
 8010f4e:	b21a      	sxth	r2, r3
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8010f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8010f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f5c:	ee17 3a90 	vmov	r3, s15
 8010f60:	b21a      	sxth	r2, r3
 8010f62:	69bb      	ldr	r3, [r7, #24]
 8010f64:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 8010f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f72:	d501      	bpl.n	8010f78 <nk_fill_circle+0x178>
 8010f74:	2200      	movs	r2, #0
 8010f76:	e006      	b.n	8010f86 <nk_fill_circle+0x186>
 8010f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8010f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f80:	ee17 3a90 	vmov	r3, s15
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 8010f8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8010f8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f96:	d501      	bpl.n	8010f9c <nk_fill_circle+0x19c>
 8010f98:	2200      	movs	r2, #0
 8010f9a:	e006      	b.n	8010faa <nk_fill_circle+0x1aa>
 8010f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fa4:	ee17 3a90 	vmov	r3, s15
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	81da      	strh	r2, [r3, #14]
    cmd->color = c;
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	683a      	ldr	r2, [r7, #0]
 8010fb2:	611a      	str	r2, [r3, #16]
 8010fb4:	e004      	b.n	8010fc0 <nk_fill_circle+0x1c0>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8010fb6:	bf00      	nop
 8010fb8:	e002      	b.n	8010fc0 <nk_fill_circle+0x1c0>
            return;
 8010fba:	bf00      	nop
 8010fbc:	e000      	b.n	8010fc0 <nk_fill_circle+0x1c0>
    if (!cmd) return;
 8010fbe:	bf00      	nop
}
 8010fc0:	3720      	adds	r7, #32
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	0802168c 	.word	0x0802168c
 8010fcc:	0802337c 	.word	0x0802337c
 8010fd0:	08021670 	.word	0x08021670

08010fd4 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08a      	sub	sp, #40	; 0x28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	61f8      	str	r0, [r7, #28]
 8010fdc:	ed87 0a06 	vstr	s0, [r7, #24]
 8010fe0:	edc7 0a05 	vstr	s1, [r7, #20]
 8010fe4:	ed87 1a04 	vstr	s2, [r7, #16]
 8010fe8:	edc7 1a03 	vstr	s3, [r7, #12]
 8010fec:	ed87 2a02 	vstr	s4, [r7, #8]
 8010ff0:	edc7 2a01 	vstr	s5, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d106      	bne.n	801100a <nk_fill_triangle+0x36>
 8010ffc:	4baf      	ldr	r3, [pc, #700]	; (80112bc <nk_fill_triangle+0x2e8>)
 8010ffe:	4ab0      	ldr	r2, [pc, #704]	; (80112c0 <nk_fill_triangle+0x2ec>)
 8011000:	f240 1135 	movw	r1, #309	; 0x135
 8011004:	48af      	ldr	r0, [pc, #700]	; (80112c4 <nk_fill_triangle+0x2f0>)
 8011006:	f00c fcb3 	bl	801d970 <__assert_func>
    if (!b || c.a == 0) return;
 801100a:	69fb      	ldr	r3, [r7, #28]
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 814b 	beq.w	80112a8 <nk_fill_triangle+0x2d4>
 8011012:	78fb      	ldrb	r3, [r7, #3]
 8011014:	2b00      	cmp	r3, #0
 8011016:	f000 8147 	beq.w	80112a8 <nk_fill_triangle+0x2d4>
    if (!b) return;
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 8145 	beq.w	80112ac <nk_fill_triangle+0x2d8>
    if (b->use_clipping) {
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	695b      	ldr	r3, [r3, #20]
 8011026:	2b00      	cmp	r3, #0
 8011028:	f000 80fb 	beq.w	8011222 <nk_fill_triangle+0x24e>
        const struct nk_rect *clip = &b->clip;
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	3304      	adds	r3, #4
 8011030:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8011032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011034:	edd3 7a00 	vldr	s15, [r3]
 8011038:	ed97 7a06 	vldr	s14, [r7, #24]
 801103c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011044:	bfac      	ite	ge
 8011046:	2301      	movge	r3, #1
 8011048:	2300      	movlt	r3, #0
 801104a:	b2db      	uxtb	r3, r3
 801104c:	f083 0301 	eor.w	r3, r3, #1
 8011050:	b2db      	uxtb	r3, r3
 8011052:	2b00      	cmp	r3, #0
 8011054:	d140      	bne.n	80110d8 <nk_fill_triangle+0x104>
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	ed93 7a00 	vldr	s14, [r3]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011066:	ed97 7a06 	vldr	s14, [r7, #24]
 801106a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011072:	bf4c      	ite	mi
 8011074:	2301      	movmi	r3, #1
 8011076:	2300      	movpl	r3, #0
 8011078:	b2db      	uxtb	r3, r3
 801107a:	f083 0301 	eor.w	r3, r3, #1
 801107e:	b2db      	uxtb	r3, r3
 8011080:	2b00      	cmp	r3, #0
 8011082:	d129      	bne.n	80110d8 <nk_fill_triangle+0x104>
 8011084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011086:	edd3 7a01 	vldr	s15, [r3, #4]
 801108a:	ed97 7a05 	vldr	s14, [r7, #20]
 801108e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011096:	bfac      	ite	ge
 8011098:	2301      	movge	r3, #1
 801109a:	2300      	movlt	r3, #0
 801109c:	b2db      	uxtb	r3, r3
 801109e:	f083 0301 	eor.w	r3, r3, #1
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d117      	bne.n	80110d8 <nk_fill_triangle+0x104>
 80110a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80110ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80110b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80110bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c4:	bf4c      	ite	mi
 80110c6:	2301      	movmi	r3, #1
 80110c8:	2300      	movpl	r3, #0
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	f083 0301 	eor.w	r3, r3, #1
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 80a5 	beq.w	8011222 <nk_fill_triangle+0x24e>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 80110d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110da:	edd3 7a00 	vldr	s15, [r3]
 80110de:	ed97 7a04 	vldr	s14, [r7, #16]
 80110e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ea:	bfac      	ite	ge
 80110ec:	2301      	movge	r3, #1
 80110ee:	2300      	movlt	r3, #0
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	f083 0301 	eor.w	r3, r3, #1
 80110f6:	b2db      	uxtb	r3, r3
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d13f      	bne.n	801117c <nk_fill_triangle+0x1a8>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 80110fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fe:	ed93 7a00 	vldr	s14, [r3]
 8011102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011104:	edd3 7a02 	vldr	s15, [r3, #8]
 8011108:	ee77 7a27 	vadd.f32	s15, s14, s15
 801110c:	ed97 7a04 	vldr	s14, [r7, #16]
 8011110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011118:	bf4c      	ite	mi
 801111a:	2301      	movmi	r3, #1
 801111c:	2300      	movpl	r3, #0
 801111e:	b2db      	uxtb	r3, r3
 8011120:	f083 0301 	eor.w	r3, r3, #1
 8011124:	b2db      	uxtb	r3, r3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d128      	bne.n	801117c <nk_fill_triangle+0x1a8>
 801112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011130:	ed97 7a03 	vldr	s14, [r7, #12]
 8011134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113c:	bfac      	ite	ge
 801113e:	2301      	movge	r3, #1
 8011140:	2300      	movlt	r3, #0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f083 0301 	eor.w	r3, r3, #1
 8011148:	b2db      	uxtb	r3, r3
 801114a:	2b00      	cmp	r3, #0
 801114c:	d116      	bne.n	801117c <nk_fill_triangle+0x1a8>
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	ed93 7a01 	vldr	s14, [r3, #4]
 8011154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011156:	edd3 7a03 	vldr	s15, [r3, #12]
 801115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801115e:	ed97 7a03 	vldr	s14, [r7, #12]
 8011162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116a:	bf4c      	ite	mi
 801116c:	2301      	movmi	r3, #1
 801116e:	2300      	movpl	r3, #0
 8011170:	b2db      	uxtb	r3, r3
 8011172:	f083 0301 	eor.w	r3, r3, #1
 8011176:	b2db      	uxtb	r3, r3
 8011178:	2b00      	cmp	r3, #0
 801117a:	d052      	beq.n	8011222 <nk_fill_triangle+0x24e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 801117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117e:	edd3 7a00 	vldr	s15, [r3]
 8011182:	ed97 7a02 	vldr	s14, [r7, #8]
 8011186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118e:	bfac      	ite	ge
 8011190:	2301      	movge	r3, #1
 8011192:	2300      	movlt	r3, #0
 8011194:	b2db      	uxtb	r3, r3
 8011196:	f083 0301 	eor.w	r3, r3, #1
 801119a:	b2db      	uxtb	r3, r3
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 801119c:	2b00      	cmp	r3, #0
 801119e:	f040 8087 	bne.w	80112b0 <nk_fill_triangle+0x2dc>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 80111a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a4:	ed93 7a00 	vldr	s14, [r3]
 80111a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80111ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80111b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111be:	bf4c      	ite	mi
 80111c0:	2301      	movmi	r3, #1
 80111c2:	2300      	movpl	r3, #0
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	f083 0301 	eor.w	r3, r3, #1
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d16f      	bne.n	80112b0 <nk_fill_triangle+0x2dc>
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80111d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80111da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80111de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e2:	bfac      	ite	ge
 80111e4:	2301      	movge	r3, #1
 80111e6:	2300      	movlt	r3, #0
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	f083 0301 	eor.w	r3, r3, #1
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d15d      	bne.n	80112b0 <nk_fill_triangle+0x2dc>
 80111f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8011200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011204:	ed97 7a01 	vldr	s14, [r7, #4]
 8011208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011210:	bf4c      	ite	mi
 8011212:	2301      	movmi	r3, #1
 8011214:	2300      	movpl	r3, #0
 8011216:	b2db      	uxtb	r3, r3
 8011218:	f083 0301 	eor.w	r3, r3, #1
 801121c:	b2db      	uxtb	r3, r3
 801121e:	2b00      	cmp	r3, #0
 8011220:	d146      	bne.n	80112b0 <nk_fill_triangle+0x2dc>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 8011222:	2218      	movs	r2, #24
 8011224:	210c      	movs	r1, #12
 8011226:	69f8      	ldr	r0, [r7, #28]
 8011228:	f7ff fb0e 	bl	8010848 <nk_command_buffer_push>
 801122c:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 801122e:	6a3b      	ldr	r3, [r7, #32]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d03f      	beq.n	80112b4 <nk_fill_triangle+0x2e0>
    cmd->a.x = (short)x0;
 8011234:	edd7 7a06 	vldr	s15, [r7, #24]
 8011238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801123c:	ee17 3a90 	vmov	r3, s15
 8011240:	b21a      	sxth	r2, r3
 8011242:	6a3b      	ldr	r3, [r7, #32]
 8011244:	811a      	strh	r2, [r3, #8]
    cmd->a.y = (short)y0;
 8011246:	edd7 7a05 	vldr	s15, [r7, #20]
 801124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801124e:	ee17 3a90 	vmov	r3, s15
 8011252:	b21a      	sxth	r2, r3
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	815a      	strh	r2, [r3, #10]
    cmd->b.x = (short)x1;
 8011258:	edd7 7a04 	vldr	s15, [r7, #16]
 801125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011260:	ee17 3a90 	vmov	r3, s15
 8011264:	b21a      	sxth	r2, r3
 8011266:	6a3b      	ldr	r3, [r7, #32]
 8011268:	819a      	strh	r2, [r3, #12]
    cmd->b.y = (short)y1;
 801126a:	edd7 7a03 	vldr	s15, [r7, #12]
 801126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011272:	ee17 3a90 	vmov	r3, s15
 8011276:	b21a      	sxth	r2, r3
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	81da      	strh	r2, [r3, #14]
    cmd->c.x = (short)x2;
 801127c:	edd7 7a02 	vldr	s15, [r7, #8]
 8011280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011284:	ee17 3a90 	vmov	r3, s15
 8011288:	b21a      	sxth	r2, r3
 801128a:	6a3b      	ldr	r3, [r7, #32]
 801128c:	821a      	strh	r2, [r3, #16]
    cmd->c.y = (short)y2;
 801128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011296:	ee17 3a90 	vmov	r3, s15
 801129a:	b21a      	sxth	r2, r3
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	683a      	ldr	r2, [r7, #0]
 80112a4:	615a      	str	r2, [r3, #20]
 80112a6:	e006      	b.n	80112b6 <nk_fill_triangle+0x2e2>
    if (!b || c.a == 0) return;
 80112a8:	bf00      	nop
 80112aa:	e004      	b.n	80112b6 <nk_fill_triangle+0x2e2>
    if (!b) return;
 80112ac:	bf00      	nop
 80112ae:	e002      	b.n	80112b6 <nk_fill_triangle+0x2e2>
            return;
 80112b0:	bf00      	nop
 80112b2:	e000      	b.n	80112b6 <nk_fill_triangle+0x2e2>
    if (!cmd) return;
 80112b4:	bf00      	nop
}
 80112b6:	3728      	adds	r7, #40	; 0x28
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	0802168c 	.word	0x0802168c
 80112c0:	0802338c 	.word	0x0802338c
 80112c4:	08021670 	.word	0x08021670

080112c8 <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 80112c8:	b590      	push	{r4, r7, lr}
 80112ca:	b08b      	sub	sp, #44	; 0x2c
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	61f8      	str	r0, [r7, #28]
 80112d0:	eeb0 6a40 	vmov.f32	s12, s0
 80112d4:	eef0 6a60 	vmov.f32	s13, s1
 80112d8:	eeb0 7a41 	vmov.f32	s14, s2
 80112dc:	eef0 7a61 	vmov.f32	s15, s3
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
 80112e4:	ed87 6a03 	vstr	s12, [r7, #12]
 80112e8:	edc7 6a04 	vstr	s13, [r7, #16]
 80112ec:	ed87 7a05 	vstr	s14, [r7, #20]
 80112f0:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d106      	bne.n	8011308 <nk_draw_image+0x40>
 80112fa:	4b69      	ldr	r3, [pc, #420]	; (80114a0 <nk_draw_image+0x1d8>)
 80112fc:	4a69      	ldr	r2, [pc, #420]	; (80114a4 <nk_draw_image+0x1dc>)
 80112fe:	f240 118f 	movw	r1, #399	; 0x18f
 8011302:	4869      	ldr	r0, [pc, #420]	; (80114a8 <nk_draw_image+0x1e0>)
 8011304:	f00c fb34 	bl	801d970 <__assert_func>
    if (!b) return;
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 80bf 	beq.w	801148e <nk_draw_image+0x1c6>
    if (b->use_clipping) {
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	695b      	ldr	r3, [r3, #20]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d06f      	beq.n	80113f8 <nk_draw_image+0x130>
        const struct nk_rect *c = &b->clip;
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	3304      	adds	r3, #4
 801131c:	627b      	str	r3, [r7, #36]	; 0x24
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	edd3 7a02 	vldr	s15, [r3, #8]
 8011324:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	f000 80b1 	beq.w	8011492 <nk_draw_image+0x1ca>
 8011330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011332:	edd3 7a03 	vldr	s15, [r3, #12]
 8011336:	eef5 7a40 	vcmp.f32	s15, #0.0
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	f000 80a8 	beq.w	8011492 <nk_draw_image+0x1ca>
 8011342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011344:	ed93 7a00 	vldr	s14, [r3]
 8011348:	edd7 6a03 	vldr	s13, [r7, #12]
 801134c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135c:	bf4c      	ite	mi
 801135e:	2301      	movmi	r3, #1
 8011360:	2300      	movpl	r3, #0
 8011362:	b2db      	uxtb	r3, r3
 8011364:	f083 0301 	eor.w	r3, r3, #1
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	f040 8091 	bne.w	8011492 <nk_draw_image+0x1ca>
 8011370:	ed97 7a03 	vldr	s14, [r7, #12]
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	edd3 6a00 	vldr	s13, [r3]
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801138c:	bf4c      	ite	mi
 801138e:	2301      	movmi	r3, #1
 8011390:	2300      	movpl	r3, #0
 8011392:	b2db      	uxtb	r3, r3
 8011394:	f083 0301 	eor.w	r3, r3, #1
 8011398:	b2db      	uxtb	r3, r3
 801139a:	2b00      	cmp	r3, #0
 801139c:	d179      	bne.n	8011492 <nk_draw_image+0x1ca>
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80113a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80113a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80113ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b8:	bf4c      	ite	mi
 80113ba:	2301      	movmi	r3, #1
 80113bc:	2300      	movpl	r3, #0
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	f083 0301 	eor.w	r3, r3, #1
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d163      	bne.n	8011492 <nk_draw_image+0x1ca>
 80113ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80113d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80113da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	bf4c      	ite	mi
 80113e8:	2301      	movmi	r3, #1
 80113ea:	2300      	movpl	r3, #0
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	f083 0301 	eor.w	r3, r3, #1
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d14c      	bne.n	8011492 <nk_draw_image+0x1ca>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 80113f8:	2224      	movs	r2, #36	; 0x24
 80113fa:	2111      	movs	r1, #17
 80113fc:	69f8      	ldr	r0, [r7, #28]
 80113fe:	f7ff fa23 	bl	8010848 <nk_command_buffer_push>
 8011402:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011404:	6a3b      	ldr	r3, [r7, #32]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d045      	beq.n	8011496 <nk_draw_image+0x1ce>
    cmd->x = (short)r.x;
 801140a:	edd7 7a03 	vldr	s15, [r7, #12]
 801140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011412:	ee17 3a90 	vmov	r3, s15
 8011416:	b21a      	sxth	r2, r3
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 801141c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011424:	ee17 3a90 	vmov	r3, s15
 8011428:	b21a      	sxth	r2, r3
 801142a:	6a3b      	ldr	r3, [r7, #32]
 801142c:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 801142e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143a:	dd07      	ble.n	801144c <nk_draw_image+0x184>
 801143c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011444:	ee17 3a90 	vmov	r3, s15
 8011448:	b29a      	uxth	r2, r3
 801144a:	e000      	b.n	801144e <nk_draw_image+0x186>
 801144c:	2200      	movs	r2, #0
 801144e:	6a3b      	ldr	r3, [r7, #32]
 8011450:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 8011452:	edd7 7a06 	vldr	s15, [r7, #24]
 8011456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145e:	dd07      	ble.n	8011470 <nk_draw_image+0x1a8>
 8011460:	edd7 7a06 	vldr	s15, [r7, #24]
 8011464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011468:	ee17 3a90 	vmov	r3, s15
 801146c:	b29a      	uxth	r2, r3
 801146e:	e000      	b.n	8011472 <nk_draw_image+0x1aa>
 8011470:	2200      	movs	r2, #0
 8011472:	6a3b      	ldr	r3, [r7, #32]
 8011474:	81da      	strh	r2, [r3, #14]
    cmd->img = *img;
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	f103 0410 	add.w	r4, r3, #16
 801147e:	4613      	mov	r3, r2
 8011480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmd->col = col;
 8011486:	6a3b      	ldr	r3, [r7, #32]
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	621a      	str	r2, [r3, #32]
 801148c:	e004      	b.n	8011498 <nk_draw_image+0x1d0>
    if (!b) return;
 801148e:	bf00      	nop
 8011490:	e002      	b.n	8011498 <nk_draw_image+0x1d0>
            return;
 8011492:	bf00      	nop
 8011494:	e000      	b.n	8011498 <nk_draw_image+0x1d0>
    if (!cmd) return;
 8011496:	bf00      	nop
}
 8011498:	372c      	adds	r7, #44	; 0x2c
 801149a:	46bd      	mov	sp, r7
 801149c:	bd90      	pop	{r4, r7, pc}
 801149e:	bf00      	nop
 80114a0:	0802168c 	.word	0x0802168c
 80114a4:	080233a0 	.word	0x080233a0
 80114a8:	08021670 	.word	0x08021670

080114ac <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b0b4      	sub	sp, #208	; 0xd0
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	61f8      	str	r0, [r7, #28]
 80114b4:	eeb0 6a40 	vmov.f32	s12, s0
 80114b8:	eef0 6a60 	vmov.f32	s13, s1
 80114bc:	eeb0 7a41 	vmov.f32	s14, s2
 80114c0:	eef0 7a61 	vmov.f32	s15, s3
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	ed87 6a03 	vstr	s12, [r7, #12]
 80114cc:	edc7 6a04 	vstr	s13, [r7, #16]
 80114d0:	ed87 7a05 	vstr	s14, [r7, #20]
 80114d4:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 80114de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80114e2:	891b      	ldrh	r3, [r3, #8]
 80114e4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    rgnY = slcimg->region[1];
 80114e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80114ec:	895b      	ldrh	r3, [r3, #10]
 80114ee:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    rgnW = slcimg->region[2];
 80114f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80114f6:	899b      	ldrh	r3, [r3, #12]
 80114f8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    rgnH = slcimg->region[3];
 80114fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011500:	89db      	ldrh	r3, [r3, #14]
 8011502:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

    /* top-left */
    img.handle = slcimg->handle;
 8011506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	627b      	str	r3, [r7, #36]	; 0x24
    img.w = slcimg->w;
 801150e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011512:	889b      	ldrh	r3, [r3, #4]
 8011514:	853b      	strh	r3, [r7, #40]	; 0x28
    img.h = slcimg->h;
 8011516:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801151a:	88db      	ldrh	r3, [r3, #6]
 801151c:	857b      	strh	r3, [r7, #42]	; 0x2a
    img.region[0] = rgnX;
 801151e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011522:	85bb      	strh	r3, [r7, #44]	; 0x2c
    img.region[1] = rgnY;
 8011524:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011528:	85fb      	strh	r3, [r7, #46]	; 0x2e
    img.region[2] = slc->l;
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	8a1b      	ldrh	r3, [r3, #16]
 801152e:	863b      	strh	r3, [r7, #48]	; 0x30
    img.region[3] = slc->t;
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	8a5b      	ldrh	r3, [r3, #18]
 8011534:	867b      	strh	r3, [r7, #50]	; 0x32

    nk_draw_image(b,
 8011536:	edd7 7a03 	vldr	s15, [r7, #12]
 801153a:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8011542:	ee06 3a90 	vmov	s13, r3
 8011546:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 801154e:	ee06 3a10 	vmov	s12, r3
 8011552:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8011556:	eef0 1a46 	vmov.f32	s3, s12
 801155a:	eeb0 1a66 	vmov.f32	s2, s13
 801155e:	eef0 0a47 	vmov.f32	s1, s14
 8011562:	eeb0 0a67 	vmov.f32	s0, s15
 8011566:	f002 f8b1 	bl	80136cc <nk_rect>
 801156a:	eeb0 6a40 	vmov.f32	s12, s0
 801156e:	eef0 6a60 	vmov.f32	s13, s1
 8011572:	eeb0 7a41 	vmov.f32	s14, s2
 8011576:	eef0 7a61 	vmov.f32	s15, s3
 801157a:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 801157e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8011582:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8011586:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 801158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801158e:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8011592:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8011596:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801159a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	4619      	mov	r1, r3
 80115a2:	eeb0 0a46 	vmov.f32	s0, s12
 80115a6:	eef0 0a66 	vmov.f32	s1, s13
 80115aa:	eeb0 1a47 	vmov.f32	s2, s14
 80115ae:	eef0 1a67 	vmov.f32	s3, s15
 80115b2:	69f8      	ldr	r0, [r7, #28]
 80115b4:	f7ff fe88 	bl	80112c8 <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	8a1a      	ldrh	r2, [r3, #16]
 80115bc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80115c0:	4413      	add	r3, r2
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80115c6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80115ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	8a1b      	ldrh	r3, [r3, #16]
 80115d0:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	8a9b      	ldrh	r3, [r3, #20]
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	b29b      	uxth	r3, r3
 80115e0:	863b      	strh	r3, [r7, #48]	; 0x30
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	8a5b      	ldrh	r3, [r3, #18]
 80115e6:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 80115e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	8a1b      	ldrh	r3, [r3, #16]
 80115f0:	ee07 3a90 	vmov	s15, r3
 80115f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80115f8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80115fc:	ed97 6a04 	vldr	s12, [r7, #16]
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8011600:	ed97 7a05 	vldr	s14, [r7, #20]
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	8a1b      	ldrh	r3, [r3, #16]
 8011608:	ee07 3a90 	vmov	s15, r3
 801160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	8a9b      	ldrh	r3, [r3, #20]
 8011618:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801161c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011620:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 8011628:	ee07 3a10 	vmov	s14, r3
 801162c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011630:	eef0 1a47 	vmov.f32	s3, s14
 8011634:	eeb0 1a67 	vmov.f32	s2, s15
 8011638:	eef0 0a46 	vmov.f32	s1, s12
 801163c:	eeb0 0a66 	vmov.f32	s0, s13
 8011640:	f002 f844 	bl	80136cc <nk_rect>
 8011644:	eeb0 6a40 	vmov.f32	s12, s0
 8011648:	eef0 6a60 	vmov.f32	s13, s1
 801164c:	eeb0 7a41 	vmov.f32	s14, s2
 8011650:	eef0 7a61 	vmov.f32	s15, s3
 8011654:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 8011658:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 801165c:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8011660:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8011664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011668:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 801166c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8011670:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011674:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	4619      	mov	r1, r3
 801167c:	eeb0 0a46 	vmov.f32	s0, s12
 8011680:	eef0 0a66 	vmov.f32	s1, s13
 8011684:	eeb0 1a47 	vmov.f32	s2, s14
 8011688:	eef0 1a67 	vmov.f32	s3, s15
 801168c:	69f8      	ldr	r0, [r7, #28]
 801168e:	f7ff fe1b 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 8011692:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8011696:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 801169a:	4413      	add	r3, r2
 801169c:	b29a      	uxth	r2, r3
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	8a9b      	ldrh	r3, [r3, #20]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80116a8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80116ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	8a9b      	ldrh	r3, [r3, #20]
 80116b2:	863b      	strh	r3, [r7, #48]	; 0x30
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	8a5b      	ldrh	r3, [r3, #18]
 80116b8:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 80116ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80116be:	edd7 7a05 	vldr	s15, [r7, #20]
 80116c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	8a9b      	ldrh	r3, [r3, #20]
 80116ca:	ee07 3a90 	vmov	s15, r3
 80116ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80116d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116d6:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 80116de:	ee06 3a90 	vmov	s13, r3
 80116e2:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80116ea:	ee06 3a10 	vmov	s12, r3
 80116ee:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80116f2:	eef0 1a46 	vmov.f32	s3, s12
 80116f6:	eeb0 1a66 	vmov.f32	s2, s13
 80116fa:	eef0 0a47 	vmov.f32	s1, s14
 80116fe:	eeb0 0a67 	vmov.f32	s0, s15
 8011702:	f001 ffe3 	bl	80136cc <nk_rect>
 8011706:	eeb0 6a40 	vmov.f32	s12, s0
 801170a:	eef0 6a60 	vmov.f32	s13, s1
 801170e:	eeb0 7a41 	vmov.f32	s14, s2
 8011712:	eef0 7a61 	vmov.f32	s15, s3
 8011716:	ed87 6a15 	vstr	s12, [r7, #84]	; 0x54
 801171a:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 801171e:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8011722:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8011726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801172a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 801172e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8011732:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011736:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	4619      	mov	r1, r3
 801173e:	eeb0 0a46 	vmov.f32	s0, s12
 8011742:	eef0 0a66 	vmov.f32	s1, s13
 8011746:	eeb0 1a47 	vmov.f32	s2, s14
 801174a:	eef0 1a67 	vmov.f32	s3, s15
 801174e:	69f8      	ldr	r0, [r7, #28]
 8011750:	f7ff fdba 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 8011754:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011758:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	8a5a      	ldrh	r2, [r3, #18]
 801175e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011762:	4413      	add	r3, r2
 8011764:	b29b      	uxth	r3, r3
 8011766:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	8a1b      	ldrh	r3, [r3, #16]
 801176c:	863b      	strh	r3, [r7, #48]	; 0x30
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	8a5b      	ldrh	r3, [r3, #18]
 8011772:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	b29a      	uxth	r2, r3
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	8adb      	ldrh	r3, [r3, #22]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	b29b      	uxth	r3, r3
 8011782:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8011784:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8011788:	ed97 7a04 	vldr	s14, [r7, #16]
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	8a5b      	ldrh	r3, [r3, #18]
 8011790:	ee07 3a90 	vmov	s15, r3
 8011794:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011798:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80117a0:	ee07 3a90 	vmov	s15, r3
 80117a4:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 80117a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	8a5b      	ldrh	r3, [r3, #18]
 80117b0:	ee07 3a90 	vmov	s15, r3
 80117b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	8adb      	ldrh	r3, [r3, #22]
 80117c0:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80117c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117cc:	eef0 1a67 	vmov.f32	s3, s15
 80117d0:	eeb0 1a65 	vmov.f32	s2, s11
 80117d4:	eef0 0a46 	vmov.f32	s1, s12
 80117d8:	eeb0 0a66 	vmov.f32	s0, s13
 80117dc:	f001 ff76 	bl	80136cc <nk_rect>
 80117e0:	eeb0 6a40 	vmov.f32	s12, s0
 80117e4:	eef0 6a60 	vmov.f32	s13, s1
 80117e8:	eeb0 7a41 	vmov.f32	s14, s2
 80117ec:	eef0 7a61 	vmov.f32	s15, s3
 80117f0:	ed87 6a19 	vstr	s12, [r7, #100]	; 0x64
 80117f4:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 80117f8:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 80117fc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8011800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011804:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8011808:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801180c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8011810:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	4619      	mov	r1, r3
 8011818:	eeb0 0a46 	vmov.f32	s0, s12
 801181c:	eef0 0a66 	vmov.f32	s1, s13
 8011820:	eeb0 1a47 	vmov.f32	s2, s14
 8011824:	eef0 1a67 	vmov.f32	s3, s15
 8011828:	69f8      	ldr	r0, [r7, #28]
 801182a:	f7ff fd4d 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	8a1a      	ldrh	r2, [r3, #16]
 8011832:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011836:	4413      	add	r3, r2
 8011838:	b29b      	uxth	r3, r3
 801183a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	8a5a      	ldrh	r2, [r3, #18]
 8011840:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011844:	4413      	add	r3, r2
 8011846:	b29b      	uxth	r3, r3
 8011848:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	8a1b      	ldrh	r3, [r3, #16]
 801184e:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	b29a      	uxth	r2, r3
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	8a9b      	ldrh	r3, [r3, #20]
 801185a:	1ad3      	subs	r3, r2, r3
 801185c:	b29b      	uxth	r3, r3
 801185e:	863b      	strh	r3, [r7, #48]	; 0x30
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	8a5b      	ldrh	r3, [r3, #18]
 8011864:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8011868:	1ad3      	subs	r3, r2, r3
 801186a:	b29a      	uxth	r2, r3
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	8adb      	ldrh	r3, [r3, #22]
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	b29b      	uxth	r3, r3
 8011874:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8011876:	ed97 7a03 	vldr	s14, [r7, #12]
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	8a1b      	ldrh	r3, [r3, #16]
 801187e:	ee07 3a90 	vmov	s15, r3
 8011882:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011886:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801188a:	ed97 7a04 	vldr	s14, [r7, #16]
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	8a5b      	ldrh	r3, [r3, #18]
 8011892:	ee07 3a90 	vmov	s15, r3
 8011896:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801189a:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801189e:	ed97 7a05 	vldr	s14, [r7, #20]
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	8a1b      	ldrh	r3, [r3, #16]
 80118a6:	ee07 3a90 	vmov	s15, r3
 80118aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	8a9b      	ldrh	r3, [r3, #20]
 80118b6:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80118ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118be:	ee77 5a67 	vsub.f32	s11, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 80118c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	8a5b      	ldrh	r3, [r3, #18]
 80118ca:	ee07 3a90 	vmov	s15, r3
 80118ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	8adb      	ldrh	r3, [r3, #22]
 80118da:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80118de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118e6:	eef0 1a67 	vmov.f32	s3, s15
 80118ea:	eeb0 1a65 	vmov.f32	s2, s11
 80118ee:	eef0 0a46 	vmov.f32	s1, s12
 80118f2:	eeb0 0a66 	vmov.f32	s0, s13
 80118f6:	f001 fee9 	bl	80136cc <nk_rect>
 80118fa:	eeb0 6a40 	vmov.f32	s12, s0
 80118fe:	eef0 6a60 	vmov.f32	s13, s1
 8011902:	eeb0 7a41 	vmov.f32	s14, s2
 8011906:	eef0 7a61 	vmov.f32	s15, s3
 801190a:	ed87 6a1d 	vstr	s12, [r7, #116]	; 0x74
 801190e:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 8011912:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 8011916:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 801191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801191e:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 8011922:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8011926:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801192a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	4619      	mov	r1, r3
 8011932:	eeb0 0a46 	vmov.f32	s0, s12
 8011936:	eef0 0a66 	vmov.f32	s1, s13
 801193a:	eeb0 1a47 	vmov.f32	s2, s14
 801193e:	eef0 1a67 	vmov.f32	s3, s15
 8011942:	69f8      	ldr	r0, [r7, #28]
 8011944:	f7ff fcc0 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 8011948:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 801194c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8011950:	4413      	add	r3, r2
 8011952:	b29a      	uxth	r2, r3
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	8a9b      	ldrh	r3, [r3, #20]
 8011958:	1ad3      	subs	r3, r2, r3
 801195a:	b29b      	uxth	r3, r3
 801195c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	8a5a      	ldrh	r2, [r3, #18]
 8011962:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8011966:	4413      	add	r3, r2
 8011968:	b29b      	uxth	r3, r3
 801196a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	8a9b      	ldrh	r3, [r3, #20]
 8011970:	863b      	strh	r3, [r7, #48]	; 0x30
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	8a5b      	ldrh	r3, [r3, #18]
 8011976:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801197a:	1ad3      	subs	r3, r2, r3
 801197c:	b29a      	uxth	r2, r3
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	8adb      	ldrh	r3, [r3, #22]
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	b29b      	uxth	r3, r3
 8011986:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8011988:	ed97 7a03 	vldr	s14, [r7, #12]
 801198c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	8a9b      	ldrh	r3, [r3, #20]
 8011998:	ee07 3a90 	vmov	s15, r3
 801199c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80119a0:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80119a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	8a5b      	ldrh	r3, [r3, #18]
 80119ac:	ee07 3a90 	vmov	s15, r3
 80119b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 80119b4:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 80119bc:	ee07 3a90 	vmov	s15, r3
 80119c0:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 80119c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	8a5b      	ldrh	r3, [r3, #18]
 80119cc:	ee07 3a90 	vmov	s15, r3
 80119d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	8adb      	ldrh	r3, [r3, #22]
 80119dc:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80119e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119e8:	eef0 1a67 	vmov.f32	s3, s15
 80119ec:	eeb0 1a65 	vmov.f32	s2, s11
 80119f0:	eef0 0a46 	vmov.f32	s1, s12
 80119f4:	eeb0 0a66 	vmov.f32	s0, s13
 80119f8:	f001 fe68 	bl	80136cc <nk_rect>
 80119fc:	eeb0 6a40 	vmov.f32	s12, s0
 8011a00:	eef0 6a60 	vmov.f32	s13, s1
 8011a04:	eeb0 7a41 	vmov.f32	s14, s2
 8011a08:	eef0 7a61 	vmov.f32	s15, s3
 8011a0c:	ed87 6a21 	vstr	s12, [r7, #132]	; 0x84
 8011a10:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 8011a14:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 8011a18:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 8011a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a20:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8011a24:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8011a28:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8011a2c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	4619      	mov	r1, r3
 8011a34:	eeb0 0a46 	vmov.f32	s0, s12
 8011a38:	eef0 0a66 	vmov.f32	s1, s13
 8011a3c:	eeb0 1a47 	vmov.f32	s2, s14
 8011a40:	eef0 1a67 	vmov.f32	s3, s15
 8011a44:	69f8      	ldr	r0, [r7, #28]
 8011a46:	f7ff fc3f 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 8011a4a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011a4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011a50:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8011a54:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8011a58:	4413      	add	r3, r2
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	8adb      	ldrh	r3, [r3, #22]
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	8a1b      	ldrh	r3, [r3, #16]
 8011a6a:	863b      	strh	r3, [r7, #48]	; 0x30
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	8adb      	ldrh	r3, [r3, #22]
 8011a70:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8011a72:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8011a76:	ed97 7a04 	vldr	s14, [r7, #16]
 8011a7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	8adb      	ldrh	r3, [r3, #22]
 8011a86:	ee07 3a90 	vmov	s15, r3
 8011a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8011a96:	ee07 3a10 	vmov	s14, r3
 8011a9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8011aa2:	ee06 3a10 	vmov	s12, r3
 8011aa6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8011aaa:	eef0 1a46 	vmov.f32	s3, s12
 8011aae:	eeb0 1a47 	vmov.f32	s2, s14
 8011ab2:	eef0 0a67 	vmov.f32	s1, s15
 8011ab6:	eeb0 0a66 	vmov.f32	s0, s13
 8011aba:	f001 fe07 	bl	80136cc <nk_rect>
 8011abe:	eeb0 6a40 	vmov.f32	s12, s0
 8011ac2:	eef0 6a60 	vmov.f32	s13, s1
 8011ac6:	eeb0 7a41 	vmov.f32	s14, s2
 8011aca:	eef0 7a61 	vmov.f32	s15, s3
 8011ace:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 8011ad2:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8011ad6:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8011ada:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8011ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ae2:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8011ae6:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8011aea:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8011aee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	4619      	mov	r1, r3
 8011af6:	eeb0 0a46 	vmov.f32	s0, s12
 8011afa:	eef0 0a66 	vmov.f32	s1, s13
 8011afe:	eeb0 1a47 	vmov.f32	s2, s14
 8011b02:	eef0 1a67 	vmov.f32	s3, s15
 8011b06:	69f8      	ldr	r0, [r7, #28]
 8011b08:	f7ff fbde 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	8a1a      	ldrh	r2, [r3, #16]
 8011b10:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8011b14:	4413      	add	r3, r2
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011b1a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8011b1e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8011b22:	4413      	add	r3, r2
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	8adb      	ldrh	r3, [r3, #22]
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	8a1b      	ldrh	r3, [r3, #16]
 8011b34:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8011b38:	1ad3      	subs	r3, r2, r3
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	8a9b      	ldrh	r3, [r3, #20]
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	863b      	strh	r3, [r7, #48]	; 0x30
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	8adb      	ldrh	r3, [r3, #22]
 8011b4a:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8011b4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	8a1b      	ldrh	r3, [r3, #16]
 8011b54:	ee07 3a90 	vmov	s15, r3
 8011b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011b5c:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8011b60:	ed97 7a04 	vldr	s14, [r7, #16]
 8011b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	8adb      	ldrh	r3, [r3, #22]
 8011b70:	ee07 3a90 	vmov	s15, r3
 8011b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011b78:	ee37 6a67 	vsub.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8011b7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	8a1b      	ldrh	r3, [r3, #16]
 8011b84:	ee07 3a90 	vmov	s15, r3
 8011b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	8a9b      	ldrh	r3, [r3, #20]
 8011b94:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8011b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8011ba4:	ee07 3a10 	vmov	s14, r3
 8011ba8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011bac:	eef0 1a47 	vmov.f32	s3, s14
 8011bb0:	eeb0 1a67 	vmov.f32	s2, s15
 8011bb4:	eef0 0a46 	vmov.f32	s1, s12
 8011bb8:	eeb0 0a66 	vmov.f32	s0, s13
 8011bbc:	f001 fd86 	bl	80136cc <nk_rect>
 8011bc0:	eeb0 6a40 	vmov.f32	s12, s0
 8011bc4:	eef0 6a60 	vmov.f32	s13, s1
 8011bc8:	eeb0 7a41 	vmov.f32	s14, s2
 8011bcc:	eef0 7a61 	vmov.f32	s15, s3
 8011bd0:	ed87 6a29 	vstr	s12, [r7, #164]	; 0xa4
 8011bd4:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 8011bd8:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 8011bdc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8011be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011be4:	ed97 6a29 	vldr	s12, [r7, #164]	; 0xa4
 8011be8:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8011bec:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011bf0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	eeb0 0a46 	vmov.f32	s0, s12
 8011bfc:	eef0 0a66 	vmov.f32	s1, s13
 8011c00:	eeb0 1a47 	vmov.f32	s2, s14
 8011c04:	eef0 1a67 	vmov.f32	s3, s15
 8011c08:	69f8      	ldr	r0, [r7, #28]
 8011c0a:	f7ff fb5d 	bl	80112c8 <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 8011c0e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8011c12:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8011c16:	4413      	add	r3, r2
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	8a9b      	ldrh	r3, [r3, #20]
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011c24:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8011c28:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8011c2c:	4413      	add	r3, r2
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	8adb      	ldrh	r3, [r3, #22]
 8011c34:	1ad3      	subs	r3, r2, r3
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	8a9b      	ldrh	r3, [r3, #20]
 8011c3e:	863b      	strh	r3, [r7, #48]	; 0x30
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	8adb      	ldrh	r3, [r3, #22]
 8011c44:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8011c46:	ed97 7a03 	vldr	s14, [r7, #12]
 8011c4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	8a9b      	ldrh	r3, [r3, #20]
 8011c56:	ee07 3a90 	vmov	s15, r3
 8011c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011c5e:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8011c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8011c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	8adb      	ldrh	r3, [r3, #22]
 8011c72:	ee07 3a90 	vmov	s15, r3
 8011c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8011c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8011c82:	ee07 3a10 	vmov	s14, r3
 8011c86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8011c8e:	ee06 3a10 	vmov	s12, r3
 8011c92:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8011c96:	eef0 1a46 	vmov.f32	s3, s12
 8011c9a:	eeb0 1a47 	vmov.f32	s2, s14
 8011c9e:	eef0 0a67 	vmov.f32	s1, s15
 8011ca2:	eeb0 0a66 	vmov.f32	s0, s13
 8011ca6:	f001 fd11 	bl	80136cc <nk_rect>
 8011caa:	eeb0 6a40 	vmov.f32	s12, s0
 8011cae:	eef0 6a60 	vmov.f32	s13, s1
 8011cb2:	eeb0 7a41 	vmov.f32	s14, s2
 8011cb6:	eef0 7a61 	vmov.f32	s15, s3
 8011cba:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8011cbe:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8011cc2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8011cc6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8011cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cce:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8011cd2:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8011cd6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8011cda:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	eeb0 0a46 	vmov.f32	s0, s12
 8011ce6:	eef0 0a66 	vmov.f32	s1, s13
 8011cea:	eeb0 1a47 	vmov.f32	s2, s14
 8011cee:	eef0 1a67 	vmov.f32	s3, s15
 8011cf2:	69f8      	ldr	r0, [r7, #28]
 8011cf4:	f7ff fae8 	bl	80112c8 <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 8011cf8:	bf00      	nop
 8011cfa:	37d0      	adds	r7, #208	; 0xd0
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b092      	sub	sp, #72	; 0x48
 8011d04:	af04      	add	r7, sp, #16
 8011d06:	61f8      	str	r0, [r7, #28]
 8011d08:	eeb0 6a40 	vmov.f32	s12, s0
 8011d0c:	eef0 6a60 	vmov.f32	s13, s1
 8011d10:	eeb0 7a41 	vmov.f32	s14, s2
 8011d14:	eef0 7a61 	vmov.f32	s15, s3
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
 8011d1c:	603b      	str	r3, [r7, #0]
 8011d1e:	ed87 6a03 	vstr	s12, [r7, #12]
 8011d22:	edc7 6a04 	vstr	s13, [r7, #16]
 8011d26:	ed87 7a05 	vstr	s14, [r7, #20]
 8011d2a:	edc7 7a06 	vstr	s15, [r7, #24]
    float text_width = 0;
 8011d2e:	f04f 0300 	mov.w	r3, #0
 8011d32:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d106      	bne.n	8011d48 <nk_draw_text+0x48>
 8011d3a:	4b93      	ldr	r3, [pc, #588]	; (8011f88 <nk_draw_text+0x288>)
 8011d3c:	4a93      	ldr	r2, [pc, #588]	; (8011f8c <nk_draw_text+0x28c>)
 8011d3e:	f240 210d 	movw	r1, #525	; 0x20d
 8011d42:	4893      	ldr	r0, [pc, #588]	; (8011f90 <nk_draw_text+0x290>)
 8011d44:	f00b fe14 	bl	801d970 <__assert_func>
    NK_ASSERT(font);
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <nk_draw_text+0x5c>
 8011d4e:	4b91      	ldr	r3, [pc, #580]	; (8011f94 <nk_draw_text+0x294>)
 8011d50:	4a8e      	ldr	r2, [pc, #568]	; (8011f8c <nk_draw_text+0x28c>)
 8011d52:	f240 210e 	movw	r1, #526	; 0x20e
 8011d56:	488e      	ldr	r0, [pc, #568]	; (8011f90 <nk_draw_text+0x290>)
 8011d58:	f00b fe0a 	bl	801d970 <__assert_func>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f000 8107 	beq.w	8011f72 <nk_draw_text+0x272>
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 8103 	beq.w	8011f72 <nk_draw_text+0x272>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f000 80ff 	beq.w	8011f72 <nk_draw_text+0x272>
 8011d74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d104      	bne.n	8011d86 <nk_draw_text+0x86>
 8011d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f000 80f6 	beq.w	8011f72 <nk_draw_text+0x272>
    if (b->use_clipping) {
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	695b      	ldr	r3, [r3, #20]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d072      	beq.n	8011e74 <nk_draw_text+0x174>
        const struct nk_rect *c = &b->clip;
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	3304      	adds	r3, #4
 8011d92:	633b      	str	r3, [r7, #48]	; 0x30
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8011d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d96:	edd3 7a02 	vldr	s15, [r3, #8]
 8011d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da2:	f000 80e8 	beq.w	8011f76 <nk_draw_text+0x276>
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	edd3 7a03 	vldr	s15, [r3, #12]
 8011dac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db4:	f000 80df 	beq.w	8011f76 <nk_draw_text+0x276>
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	ed93 7a00 	vldr	s14, [r3]
 8011dbe:	edd7 6a03 	vldr	s13, [r7, #12]
 8011dc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8011dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd2:	bf4c      	ite	mi
 8011dd4:	2301      	movmi	r3, #1
 8011dd6:	2300      	movpl	r3, #0
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	f083 0301 	eor.w	r3, r3, #1
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f040 80c8 	bne.w	8011f76 <nk_draw_text+0x276>
 8011de6:	ed97 7a03 	vldr	s14, [r7, #12]
 8011dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dec:	edd3 6a00 	vldr	s13, [r3]
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	edd3 7a02 	vldr	s15, [r3, #8]
 8011df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e02:	bf4c      	ite	mi
 8011e04:	2301      	movmi	r3, #1
 8011e06:	2300      	movpl	r3, #0
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	f083 0301 	eor.w	r3, r3, #1
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f040 80b0 	bne.w	8011f76 <nk_draw_text+0x276>
 8011e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e18:	ed93 7a01 	vldr	s14, [r3, #4]
 8011e1c:	edd7 6a04 	vldr	s13, [r7, #16]
 8011e20:	edd7 7a06 	vldr	s15, [r7, #24]
 8011e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e30:	bf4c      	ite	mi
 8011e32:	2301      	movmi	r3, #1
 8011e34:	2300      	movpl	r3, #0
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	f083 0301 	eor.w	r3, r3, #1
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f040 8099 	bne.w	8011f76 <nk_draw_text+0x276>
 8011e44:	ed97 7a04 	vldr	s14, [r7, #16]
 8011e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	edd3 7a03 	vldr	s15, [r3, #12]
 8011e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e60:	bf4c      	ite	mi
 8011e62:	2301      	movmi	r3, #1
 8011e64:	2300      	movpl	r3, #0
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	f083 0301 	eor.w	r3, r3, #1
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f040 8081 	bne.w	8011f76 <nk_draw_text+0x276>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	689b      	ldr	r3, [r3, #8]
 8011e78:	683a      	ldr	r2, [r7, #0]
 8011e7a:	edd2 7a01 	vldr	s15, [r2, #4]
 8011e7e:	6838      	ldr	r0, [r7, #0]
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	68b9      	ldr	r1, [r7, #8]
 8011e84:	eeb0 0a67 	vmov.f32	s0, s15
 8011e88:	6800      	ldr	r0, [r0, #0]
 8011e8a:	4798      	blx	r3
 8011e8c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    if (text_width > r.w){
 8011e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8011e94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea0:	dd17      	ble.n	8011ed2 <nk_draw_text+0x1d2>
        int glyphs = 0;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	62bb      	str	r3, [r7, #40]	; 0x28
        float txt_width = (float)text_width;
 8011ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ea8:	627b      	str	r3, [r7, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 8011eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8011eae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	9302      	str	r3, [sp, #8]
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	68b9      	ldr	r1, [r7, #8]
 8011eca:	6838      	ldr	r0, [r7, #0]
 8011ecc:	f00a f9d4 	bl	801c278 <nk_text_clamp>
 8011ed0:	6078      	str	r0, [r7, #4]
    }

    if (!length) return;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d050      	beq.n	8011f7a <nk_draw_text+0x27a>
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	3329      	adds	r3, #41	; 0x29
 8011edc:	461a      	mov	r2, r3
 8011ede:	2110      	movs	r1, #16
 8011ee0:	69f8      	ldr	r0, [r7, #28]
 8011ee2:	f7fe fcb1 	bl	8010848 <nk_command_buffer_push>
 8011ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (!cmd) return;
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d047      	beq.n	8011f7e <nk_draw_text+0x27e>
    cmd->x = (short)r.x;
 8011eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8011ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ef6:	ee17 3a90 	vmov	r3, s15
 8011efa:	b21a      	sxth	r2, r3
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efe:	829a      	strh	r2, [r3, #20]
    cmd->y = (short)r.y;
 8011f00:	edd7 7a04 	vldr	s15, [r7, #16]
 8011f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f08:	ee17 3a90 	vmov	r3, s15
 8011f0c:	b21a      	sxth	r2, r3
 8011f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f10:	82da      	strh	r2, [r3, #22]
    cmd->w = (unsigned short)r.w;
 8011f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8011f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011f1a:	ee17 3a90 	vmov	r3, s15
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f22:	831a      	strh	r2, [r3, #24]
    cmd->h = (unsigned short)r.h;
 8011f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8011f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011f2c:	ee17 3a90 	vmov	r3, s15
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f34:	835a      	strh	r2, [r3, #26]
    cmd->background = bg;
 8011f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f3a:	60da      	str	r2, [r3, #12]
    cmd->foreground = fg;
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f40:	611a      	str	r2, [r3, #16]
    cmd->font = font;
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	683a      	ldr	r2, [r7, #0]
 8011f46:	609a      	str	r2, [r3, #8]
    cmd->length = length;
 8011f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	621a      	str	r2, [r3, #32]
    cmd->height = font->height;
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	685a      	ldr	r2, [r3, #4]
 8011f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f54:	61da      	str	r2, [r3, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 8011f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f58:	3324      	adds	r3, #36	; 0x24
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	68b9      	ldr	r1, [r7, #8]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f009 fece 	bl	801bd00 <nk_memcopy>
    cmd->string[length] = '\0';
 8011f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	4413      	add	r3, r2
 8011f6a:	3324      	adds	r3, #36	; 0x24
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	701a      	strb	r2, [r3, #0]
 8011f70:	e006      	b.n	8011f80 <nk_draw_text+0x280>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8011f72:	bf00      	nop
 8011f74:	e004      	b.n	8011f80 <nk_draw_text+0x280>
            return;
 8011f76:	bf00      	nop
 8011f78:	e002      	b.n	8011f80 <nk_draw_text+0x280>
    if (!length) return;
 8011f7a:	bf00      	nop
 8011f7c:	e000      	b.n	8011f80 <nk_draw_text+0x280>
    if (!cmd) return;
 8011f7e:	bf00      	nop
}
 8011f80:	3738      	adds	r7, #56	; 0x38
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	0802168c 	.word	0x0802168c
 8011f8c:	080233b0 	.word	0x080233b0
 8011f90:	08021670 	.word	0x08021670
 8011f94:	08021698 	.word	0x08021698

08011f98 <nk_handle_ptr>:
 *                          IMAGE
 *
 * ===============================================================*/
NK_API nk_handle
nk_handle_ptr(void *ptr)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
    nk_handle handle = {0};
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	60fb      	str	r3, [r7, #12]
    handle.ptr = ptr;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	60fb      	str	r3, [r7, #12]
    return handle;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3714      	adds	r7, #20
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr
	...

08011fb8 <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 8011fb8:	b590      	push	{r4, r7, lr}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d105      	bne.n	8011fd2 <nk_input_begin+0x1a>
 8011fc6:	4b2c      	ldr	r3, [pc, #176]	; (8012078 <nk_input_begin+0xc0>)
 8011fc8:	4a2c      	ldr	r2, [pc, #176]	; (801207c <nk_input_begin+0xc4>)
 8011fca:	210e      	movs	r1, #14
 8011fcc:	482c      	ldr	r0, [pc, #176]	; (8012080 <nk_input_begin+0xc8>)
 8011fce:	f00b fccf 	bl	801d970 <__assert_func>
    if (!ctx) return;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d04b      	beq.n	8012070 <nk_input_begin+0xb8>
    in = &ctx->input;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8011fdc:	2300      	movs	r3, #0
 8011fde:	60fb      	str	r3, [r7, #12]
 8011fe0:	e00a      	b.n	8011ff8 <nk_input_begin+0x40>
        in->mouse.buttons[i].clicked = 0;
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	3310      	adds	r3, #16
 8011fe8:	011b      	lsls	r3, r3, #4
 8011fea:	4413      	add	r3, r2
 8011fec:	3308      	adds	r3, #8
 8011fee:	2200      	movs	r2, #0
 8011ff0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	60fb      	str	r3, [r7, #12]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2b03      	cmp	r3, #3
 8011ffc:	ddf1      	ble.n	8011fe2 <nk_input_begin+0x2a>

    in->keyboard.text_len = 0;
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	2200      	movs	r2, #0
 8012002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 8012006:	68bc      	ldr	r4, [r7, #8]
 8012008:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8012084 <nk_input_begin+0xcc>
 801200c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012084 <nk_input_begin+0xcc>
 8012010:	f001 fc0e 	bl	8013830 <nk_vec2>
 8012014:	eeb0 7a40 	vmov.f32	s14, s0
 8012018:	eef0 7a60 	vmov.f32	s15, s1
 801201c:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
 8012020:	edc4 7a58 	vstr	s15, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    in->mouse.delta.x = 0;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	f04f 0200 	mov.w	r2, #0
 8012042:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    in->mouse.delta.y = 0;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	f04f 0200 	mov.w	r2, #0
 801204c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 8012050:	2300      	movs	r3, #0
 8012052:	60fb      	str	r3, [r7, #12]
 8012054:	e008      	b.n	8012068 <nk_input_begin+0xb0>
        in->keyboard.keys[i].clicked = 0;
 8012056:	68ba      	ldr	r2, [r7, #8]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	00db      	lsls	r3, r3, #3
 801205c:	4413      	add	r3, r2
 801205e:	2200      	movs	r2, #0
 8012060:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	3301      	adds	r3, #1
 8012066:	60fb      	str	r3, [r7, #12]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b1d      	cmp	r3, #29
 801206c:	ddf3      	ble.n	8012056 <nk_input_begin+0x9e>
 801206e:	e000      	b.n	8012072 <nk_input_begin+0xba>
    if (!ctx) return;
 8012070:	bf00      	nop
}
 8012072:	3714      	adds	r7, #20
 8012074:	46bd      	mov	sp, r7
 8012076:	bd90      	pop	{r4, r7, pc}
 8012078:	080216a0 	.word	0x080216a0
 801207c:	080233c0 	.word	0x080233c0
 8012080:	080216a4 	.word	0x080216a4
 8012084:	00000000 	.word	0x00000000

08012088 <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d105      	bne.n	80120a2 <nk_input_end+0x1a>
 8012096:	4b15      	ldr	r3, [pc, #84]	; (80120ec <nk_input_end+0x64>)
 8012098:	4a15      	ldr	r2, [pc, #84]	; (80120f0 <nk_input_end+0x68>)
 801209a:	2121      	movs	r1, #33	; 0x21
 801209c:	4815      	ldr	r0, [pc, #84]	; (80120f4 <nk_input_end+0x6c>)
 801209e:	f00b fc67 	bl	801d970 <__assert_func>
    if (!ctx) return;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d01c      	beq.n	80120e2 <nk_input_end+0x5a>
    in = &ctx->input;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	60fb      	str	r3, [r7, #12]
    if (in->mouse.grab)
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d003      	beq.n	80120be <nk_input_end+0x36>
        in->mouse.grab = 0;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    if (in->mouse.ungrab) {
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00d      	beq.n	80120e4 <nk_input_end+0x5c>
        in->mouse.grabbed = 0;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2200      	movs	r2, #0
 80120d4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 80120e0:	e000      	b.n	80120e4 <nk_input_end+0x5c>
    if (!ctx) return;
 80120e2:	bf00      	nop
    }
}
 80120e4:	3710      	adds	r7, #16
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	080216a0 	.word	0x080216a0
 80120f0:	080233d0 	.word	0x080233d0
 80120f4:	080216a4 	.word	0x080216a4

080120f8 <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	60b9      	str	r1, [r7, #8]
 8012102:	607a      	str	r2, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d105      	bne.n	8012116 <nk_input_motion+0x1e>
 801210a:	4b1b      	ldr	r3, [pc, #108]	; (8012178 <nk_input_motion+0x80>)
 801210c:	4a1b      	ldr	r2, [pc, #108]	; (801217c <nk_input_motion+0x84>)
 801210e:	2130      	movs	r1, #48	; 0x30
 8012110:	481b      	ldr	r0, [pc, #108]	; (8012180 <nk_input_motion+0x88>)
 8012112:	f00b fc2d 	bl	801d970 <__assert_func>
    if (!ctx) return;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d028      	beq.n	801216e <nk_input_motion+0x76>
    in = &ctx->input;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	617b      	str	r3, [r7, #20]
    in->mouse.pos.x = (float)x;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	ee07 3a90 	vmov	s15, r3
 8012126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	ee07 3a90 	vmov	s15, r3
 8012136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 801214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8012162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
 801216c:	e000      	b.n	8012170 <nk_input_motion+0x78>
    if (!ctx) return;
 801216e:	bf00      	nop
}
 8012170:	3718      	adds	r7, #24
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	080216a0 	.word	0x080216a0
 801217c:	080233e0 	.word	0x080233e0
 8012180:	080216a4 	.word	0x080216a4

08012184 <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b086      	sub	sp, #24
 8012188:	af00      	add	r7, sp, #0
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	607a      	str	r2, [r7, #4]
 801218e:	603b      	str	r3, [r7, #0]
 8012190:	460b      	mov	r3, r1
 8012192:	72fb      	strb	r3, [r7, #11]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d105      	bne.n	80121a6 <nk_input_button+0x22>
 801219a:	4b1d      	ldr	r3, [pc, #116]	; (8012210 <nk_input_button+0x8c>)
 801219c:	4a1d      	ldr	r2, [pc, #116]	; (8012214 <nk_input_button+0x90>)
 801219e:	214c      	movs	r1, #76	; 0x4c
 80121a0:	481d      	ldr	r0, [pc, #116]	; (8012218 <nk_input_button+0x94>)
 80121a2:	f00b fbe5 	bl	801d970 <__assert_func>
    if (!ctx) return;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d02b      	beq.n	8012204 <nk_input_button+0x80>
    in = &ctx->input;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	617b      	str	r3, [r7, #20]
    if (in->mouse.buttons[id].down == down) return;
 80121b0:	7afb      	ldrb	r3, [r7, #11]
 80121b2:	697a      	ldr	r2, [r7, #20]
 80121b4:	3310      	adds	r3, #16
 80121b6:	011b      	lsls	r3, r3, #4
 80121b8:	4413      	add	r3, r2
 80121ba:	3304      	adds	r3, #4
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	6a3a      	ldr	r2, [r7, #32]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d021      	beq.n	8012208 <nk_input_button+0x84>

    btn = &in->mouse.buttons[id];
 80121c4:	7afb      	ldrb	r3, [r7, #11]
 80121c6:	3310      	adds	r3, #16
 80121c8:	011b      	lsls	r3, r3, #4
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	4413      	add	r3, r2
 80121ce:	3304      	adds	r3, #4
 80121d0:	613b      	str	r3, [r7, #16]
    btn->clicked_pos.x = (float)x;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	ee07 3a90 	vmov	s15, r3
 80121d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	edc3 7a02 	vstr	s15, [r3, #8]
    btn->clicked_pos.y = (float)y;
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	ee07 3a90 	vmov	s15, r3
 80121e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	edc3 7a03 	vstr	s15, [r3, #12]
    btn->down = down;
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	6a3a      	ldr	r2, [r7, #32]
 80121f6:	601a      	str	r2, [r3, #0]
    btn->clicked++;
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	1c5a      	adds	r2, r3, #1
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	605a      	str	r2, [r3, #4]
 8012202:	e002      	b.n	801220a <nk_input_button+0x86>
    if (!ctx) return;
 8012204:	bf00      	nop
 8012206:	e000      	b.n	801220a <nk_input_button+0x86>
    if (in->mouse.buttons[id].down == down) return;
 8012208:	bf00      	nop
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 801220a:	3718      	adds	r7, #24
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	080216a0 	.word	0x080216a0
 8012214:	080233f0 	.word	0x080233f0
 8012218:	080216a4 	.word	0x080216a4

0801221c <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 801221c:	b480      	push	{r7}
 801221e:	b089      	sub	sp, #36	; 0x24
 8012220:	af00      	add	r7, sp, #0
 8012222:	6178      	str	r0, [r7, #20]
 8012224:	460b      	mov	r3, r1
 8012226:	eeb0 6a40 	vmov.f32	s12, s0
 801222a:	eef0 6a60 	vmov.f32	s13, s1
 801222e:	eeb0 7a41 	vmov.f32	s14, s2
 8012232:	eef0 7a61 	vmov.f32	s15, s3
 8012236:	74fb      	strb	r3, [r7, #19]
 8012238:	ed87 6a00 	vstr	s12, [r7]
 801223c:	edc7 6a01 	vstr	s13, [r7, #4]
 8012240:	ed87 7a02 	vstr	s14, [r7, #8]
 8012244:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d101      	bne.n	8012252 <nk_input_has_mouse_click_in_rect+0x36>
 801224e:	2300      	movs	r3, #0
 8012250:	e059      	b.n	8012306 <nk_input_has_mouse_click_in_rect+0xea>
    btn = &i->mouse.buttons[id];
 8012252:	7cfb      	ldrb	r3, [r7, #19]
 8012254:	3310      	adds	r3, #16
 8012256:	011b      	lsls	r3, r3, #4
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	4413      	add	r3, r2
 801225c:	3304      	adds	r3, #4
 801225e:	61fb      	str	r3, [r7, #28]
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 8012260:	ed97 7a00 	vldr	s14, [r7]
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	edd3 7a02 	vldr	s15, [r3, #8]
 801226a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012272:	bf94      	ite	ls
 8012274:	2301      	movls	r3, #1
 8012276:	2300      	movhi	r3, #0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	f083 0301 	eor.w	r3, r3, #1
 801227e:	b2db      	uxtb	r3, r3
 8012280:	2b00      	cmp	r3, #0
 8012282:	d13d      	bne.n	8012300 <nk_input_has_mouse_click_in_rect+0xe4>
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	ed93 7a02 	vldr	s14, [r3, #8]
 801228a:	edd7 6a00 	vldr	s13, [r7]
 801228e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801229e:	bf4c      	ite	mi
 80122a0:	2301      	movmi	r3, #1
 80122a2:	2300      	movpl	r3, #0
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	f083 0301 	eor.w	r3, r3, #1
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d127      	bne.n	8012300 <nk_input_has_mouse_click_in_rect+0xe4>
 80122b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80122ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c2:	bf94      	ite	ls
 80122c4:	2301      	movls	r3, #1
 80122c6:	2300      	movhi	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	f083 0301 	eor.w	r3, r3, #1
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d115      	bne.n	8012300 <nk_input_has_mouse_click_in_rect+0xe4>
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80122da:	edd7 6a01 	vldr	s13, [r7, #4]
 80122de:	edd7 7a03 	vldr	s15, [r7, #12]
 80122e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ee:	bf4c      	ite	mi
 80122f0:	2301      	movmi	r3, #1
 80122f2:	2300      	movpl	r3, #0
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	f083 0301 	eor.w	r3, r3, #1
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <nk_input_has_mouse_click_in_rect+0xe8>
        return nk_false;
 8012300:	2300      	movs	r3, #0
 8012302:	e000      	b.n	8012306 <nk_input_has_mouse_click_in_rect+0xea>
    return nk_true;
 8012304:	2301      	movs	r3, #1
}
 8012306:	4618      	mov	r0, r3
 8012308:	3724      	adds	r7, #36	; 0x24
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr

08012312 <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8012312:	b480      	push	{r7}
 8012314:	b089      	sub	sp, #36	; 0x24
 8012316:	af00      	add	r7, sp, #0
 8012318:	6178      	str	r0, [r7, #20]
 801231a:	460b      	mov	r3, r1
 801231c:	eeb0 6a40 	vmov.f32	s12, s0
 8012320:	eef0 6a60 	vmov.f32	s13, s1
 8012324:	eeb0 7a41 	vmov.f32	s14, s2
 8012328:	eef0 7a61 	vmov.f32	s15, s3
 801232c:	74fb      	strb	r3, [r7, #19]
 801232e:	ed87 6a00 	vstr	s12, [r7]
 8012332:	edc7 6a01 	vstr	s13, [r7, #4]
 8012336:	ed87 7a02 	vstr	s14, [r7, #8]
 801233a:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d101      	bne.n	8012348 <nk_input_has_mouse_click_in_button_rect+0x36>
 8012344:	2300      	movs	r3, #0
 8012346:	e059      	b.n	80123fc <nk_input_has_mouse_click_in_button_rect+0xea>
    btn = &i->mouse.buttons[id];
 8012348:	7cfb      	ldrb	r3, [r7, #19]
 801234a:	3310      	adds	r3, #16
 801234c:	011b      	lsls	r3, r3, #4
 801234e:	697a      	ldr	r2, [r7, #20]
 8012350:	4413      	add	r3, r2
 8012352:	3304      	adds	r3, #4
 8012354:	61fb      	str	r3, [r7, #28]
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 8012356:	ed97 7a00 	vldr	s14, [r7]
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012368:	bf94      	ite	ls
 801236a:	2301      	movls	r3, #1
 801236c:	2300      	movhi	r3, #0
 801236e:	b2db      	uxtb	r3, r3
 8012370:	f083 0301 	eor.w	r3, r3, #1
 8012374:	b2db      	uxtb	r3, r3
 8012376:	2b00      	cmp	r3, #0
 8012378:	d13d      	bne.n	80123f6 <nk_input_has_mouse_click_in_button_rect+0xe4>
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012380:	edd7 6a00 	vldr	s13, [r7]
 8012384:	edd7 7a02 	vldr	s15, [r7, #8]
 8012388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012394:	bf4c      	ite	mi
 8012396:	2301      	movmi	r3, #1
 8012398:	2300      	movpl	r3, #0
 801239a:	b2db      	uxtb	r3, r3
 801239c:	f083 0301 	eor.w	r3, r3, #1
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d127      	bne.n	80123f6 <nk_input_has_mouse_click_in_button_rect+0xe4>
 80123a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80123b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b8:	bf94      	ite	ls
 80123ba:	2301      	movls	r3, #1
 80123bc:	2300      	movhi	r3, #0
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	f083 0301 	eor.w	r3, r3, #1
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d115      	bne.n	80123f6 <nk_input_has_mouse_click_in_button_rect+0xe4>
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80123d0:	edd7 6a01 	vldr	s13, [r7, #4]
 80123d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80123d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80123e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e4:	bf4c      	ite	mi
 80123e6:	2301      	movmi	r3, #1
 80123e8:	2300      	movpl	r3, #0
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f083 0301 	eor.w	r3, r3, #1
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <nk_input_has_mouse_click_in_button_rect+0xe8>
#endif
        return nk_false;
 80123f6:	2300      	movs	r3, #0
 80123f8:	e000      	b.n	80123fc <nk_input_has_mouse_click_in_button_rect+0xea>
    return nk_true;
 80123fa:	2301      	movs	r3, #1
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3724      	adds	r7, #36	; 0x24
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b08a      	sub	sp, #40	; 0x28
 801240c:	af00      	add	r7, sp, #0
 801240e:	61f8      	str	r0, [r7, #28]
 8012410:	460b      	mov	r3, r1
 8012412:	eeb0 6a40 	vmov.f32	s12, s0
 8012416:	eef0 6a60 	vmov.f32	s13, s1
 801241a:	eeb0 7a41 	vmov.f32	s14, s2
 801241e:	eef0 7a61 	vmov.f32	s15, s3
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	76fb      	strb	r3, [r7, #27]
 8012426:	ed87 6a02 	vstr	s12, [r7, #8]
 801242a:	edc7 6a03 	vstr	s13, [r7, #12]
 801242e:	ed87 7a04 	vstr	s14, [r7, #16]
 8012432:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d101      	bne.n	8012440 <nk_input_has_mouse_click_down_in_rect+0x38>
 801243c:	2300      	movs	r3, #0
 801243e:	e026      	b.n	801248e <nk_input_has_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 8012440:	7efb      	ldrb	r3, [r7, #27]
 8012442:	3310      	adds	r3, #16
 8012444:	011b      	lsls	r3, r3, #4
 8012446:	69fa      	ldr	r2, [r7, #28]
 8012448:	4413      	add	r3, r2
 801244a:	3304      	adds	r3, #4
 801244c:	627b      	str	r3, [r7, #36]	; 0x24
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 801244e:	ed97 6a02 	vldr	s12, [r7, #8]
 8012452:	edd7 6a03 	vldr	s13, [r7, #12]
 8012456:	ed97 7a04 	vldr	s14, [r7, #16]
 801245a:	edd7 7a05 	vldr	s15, [r7, #20]
 801245e:	7efb      	ldrb	r3, [r7, #27]
 8012460:	eeb0 0a46 	vmov.f32	s0, s12
 8012464:	eef0 0a66 	vmov.f32	s1, s13
 8012468:	eeb0 1a47 	vmov.f32	s2, s14
 801246c:	eef0 1a67 	vmov.f32	s3, s15
 8012470:	4619      	mov	r1, r3
 8012472:	69f8      	ldr	r0, [r7, #28]
 8012474:	f7ff fed2 	bl	801221c <nk_input_has_mouse_click_in_rect>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d006      	beq.n	801248c <nk_input_has_mouse_click_down_in_rect+0x84>
 801247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	687a      	ldr	r2, [r7, #4]
 8012484:	429a      	cmp	r2, r3
 8012486:	d101      	bne.n	801248c <nk_input_has_mouse_click_down_in_rect+0x84>
 8012488:	2301      	movs	r3, #1
 801248a:	e000      	b.n	801248e <nk_input_has_mouse_click_down_in_rect+0x86>
 801248c:	2300      	movs	r3, #0
}
 801248e:	4618      	mov	r0, r3
 8012490:	3728      	adds	r7, #40	; 0x28
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8012496:	b480      	push	{r7}
 8012498:	b087      	sub	sp, #28
 801249a:	af00      	add	r7, sp, #0
 801249c:	6178      	str	r0, [r7, #20]
 801249e:	eeb0 6a40 	vmov.f32	s12, s0
 80124a2:	eef0 6a60 	vmov.f32	s13, s1
 80124a6:	eeb0 7a41 	vmov.f32	s14, s2
 80124aa:	eef0 7a61 	vmov.f32	s15, s3
 80124ae:	ed87 6a01 	vstr	s12, [r7, #4]
 80124b2:	edc7 6a02 	vstr	s13, [r7, #8]
 80124b6:	ed87 7a03 	vstr	s14, [r7, #12]
 80124ba:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d101      	bne.n	80124c8 <nk_input_is_mouse_hovering_rect+0x32>
 80124c4:	2300      	movs	r3, #0
 80124c6:	e032      	b.n	801252e <nk_input_is_mouse_hovering_rect+0x98>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 80124c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80124d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124da:	d827      	bhi.n	801252c <nk_input_is_mouse_hovering_rect+0x96>
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80124e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80124e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80124ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80124f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f6:	d519      	bpl.n	801252c <nk_input_is_mouse_hovering_rect+0x96>
 80124f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8012502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801250a:	d80f      	bhi.n	801252c <nk_input_is_mouse_hovering_rect+0x96>
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8012512:	edd7 6a02 	vldr	s13, [r7, #8]
 8012516:	edd7 7a04 	vldr	s15, [r7, #16]
 801251a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801251e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	d501      	bpl.n	801252c <nk_input_is_mouse_hovering_rect+0x96>
 8012528:	2301      	movs	r3, #1
 801252a:	e000      	b.n	801252e <nk_input_is_mouse_hovering_rect+0x98>
 801252c:	2300      	movs	r3, #0
}
 801252e:	4618      	mov	r0, r3
 8012530:	371c      	adds	r7, #28
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr

0801253a <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 801253a:	b480      	push	{r7}
 801253c:	b087      	sub	sp, #28
 801253e:	af00      	add	r7, sp, #0
 8012540:	6178      	str	r0, [r7, #20]
 8012542:	eeb0 6a40 	vmov.f32	s12, s0
 8012546:	eef0 6a60 	vmov.f32	s13, s1
 801254a:	eeb0 7a41 	vmov.f32	s14, s2
 801254e:	eef0 7a61 	vmov.f32	s15, s3
 8012552:	ed87 6a01 	vstr	s12, [r7, #4]
 8012556:	edc7 6a02 	vstr	s13, [r7, #8]
 801255a:	ed87 7a03 	vstr	s14, [r7, #12]
 801255e:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d101      	bne.n	801256c <nk_input_is_mouse_prev_hovering_rect+0x32>
 8012568:	2300      	movs	r3, #0
 801256a:	e032      	b.n	80125d2 <nk_input_is_mouse_prev_hovering_rect+0x98>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 801256c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8012576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257e:	d827      	bhi.n	80125d0 <nk_input_is_mouse_prev_hovering_rect+0x96>
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8012586:	edd7 6a01 	vldr	s13, [r7, #4]
 801258a:	edd7 7a03 	vldr	s15, [r7, #12]
 801258e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259a:	d519      	bpl.n	80125d0 <nk_input_is_mouse_prev_hovering_rect+0x96>
 801259c:	ed97 7a02 	vldr	s14, [r7, #8]
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80125a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ae:	d80f      	bhi.n	80125d0 <nk_input_is_mouse_prev_hovering_rect+0x96>
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 80125b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80125ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80125be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ca:	d501      	bpl.n	80125d0 <nk_input_is_mouse_prev_hovering_rect+0x96>
 80125cc:	2301      	movs	r3, #1
 80125ce:	e000      	b.n	80125d2 <nk_input_is_mouse_prev_hovering_rect+0x98>
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	371c      	adds	r7, #28
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr

080125de <nk_input_is_mouse_down>:
    if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
 80125de:	b480      	push	{r7}
 80125e0:	b083      	sub	sp, #12
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
 80125e6:	460b      	mov	r3, r1
 80125e8:	70fb      	strb	r3, [r7, #3]
    if (!i) return nk_false;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d101      	bne.n	80125f4 <nk_input_is_mouse_down+0x16>
 80125f0:	2300      	movs	r3, #0
 80125f2:	e006      	b.n	8012602 <nk_input_is_mouse_down+0x24>
    return i->mouse.buttons[id].down;
 80125f4:	78fb      	ldrb	r3, [r7, #3]
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	3310      	adds	r3, #16
 80125fa:	011b      	lsls	r3, r3, #4
 80125fc:	4413      	add	r3, r2
 80125fe:	3304      	adds	r3, #4
 8012600:	681b      	ldr	r3, [r3, #0]
}
 8012602:	4618      	mov	r0, r3
 8012604:	370c      	adds	r7, #12
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr

0801260e <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
 801260e:	b480      	push	{r7}
 8012610:	b085      	sub	sp, #20
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
 8012616:	460b      	mov	r3, r1
 8012618:	70fb      	strb	r3, [r7, #3]
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d101      	bne.n	8012624 <nk_input_is_mouse_pressed+0x16>
 8012620:	2300      	movs	r3, #0
 8012622:	e011      	b.n	8012648 <nk_input_is_mouse_pressed+0x3a>
    b = &i->mouse.buttons[id];
 8012624:	78fb      	ldrb	r3, [r7, #3]
 8012626:	3310      	adds	r3, #16
 8012628:	011b      	lsls	r3, r3, #4
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	4413      	add	r3, r2
 801262e:	3304      	adds	r3, #4
 8012630:	60fb      	str	r3, [r7, #12]
    if (b->down && b->clicked)
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d005      	beq.n	8012646 <nk_input_is_mouse_pressed+0x38>
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d001      	beq.n	8012646 <nk_input_is_mouse_pressed+0x38>
        return nk_true;
 8012642:	2301      	movs	r3, #1
 8012644:	e000      	b.n	8012648 <nk_input_is_mouse_pressed+0x3a>
    return nk_false;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <nk_input_is_key_pressed>:
    if (!i) return nk_false;
    return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	460b      	mov	r3, r1
 801265e:	70fb      	strb	r3, [r7, #3]
    const struct nk_key *k;
    if (!i) return nk_false;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <nk_input_is_key_pressed+0x16>
 8012666:	2300      	movs	r3, #0
 8012668:	e017      	b.n	801269a <nk_input_is_key_pressed+0x46>
    k = &i->keyboard.keys[key];
 801266a:	78fb      	ldrb	r3, [r7, #3]
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	4413      	add	r3, r2
 8012672:	60fb      	str	r3, [r7, #12]
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d003      	beq.n	8012684 <nk_input_is_key_pressed+0x30>
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d107      	bne.n	8012694 <nk_input_is_key_pressed+0x40>
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d105      	bne.n	8012698 <nk_input_is_key_pressed+0x44>
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	2b01      	cmp	r3, #1
 8012692:	d901      	bls.n	8012698 <nk_input_is_key_pressed+0x44>
        return nk_true;
 8012694:	2301      	movs	r3, #1
 8012696:	e000      	b.n	801269a <nk_input_is_key_pressed+0x46>
    return nk_false;
 8012698:	2300      	movs	r3, #0
}
 801269a:	4618      	mov	r0, r3
 801269c:	3714      	adds	r7, #20
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr
	...

080126a8 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	ed87 0a00 	vstr	s0, [r7]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d105      	bne.n	80126c6 <nk_layout_set_min_row_height+0x1e>
 80126ba:	4b23      	ldr	r3, [pc, #140]	; (8012748 <nk_layout_set_min_row_height+0xa0>)
 80126bc:	4a23      	ldr	r2, [pc, #140]	; (801274c <nk_layout_set_min_row_height+0xa4>)
 80126be:	210f      	movs	r1, #15
 80126c0:	4823      	ldr	r0, [pc, #140]	; (8012750 <nk_layout_set_min_row_height+0xa8>)
 80126c2:	f00b f955 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80126cc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d105      	bne.n	80126e0 <nk_layout_set_min_row_height+0x38>
 80126d4:	4b1f      	ldr	r3, [pc, #124]	; (8012754 <nk_layout_set_min_row_height+0xac>)
 80126d6:	4a1d      	ldr	r2, [pc, #116]	; (801274c <nk_layout_set_min_row_height+0xa4>)
 80126d8:	2110      	movs	r1, #16
 80126da:	481d      	ldr	r0, [pc, #116]	; (8012750 <nk_layout_set_min_row_height+0xa8>)
 80126dc:	f00b f948 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80126e6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80126ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d105      	bne.n	80126fe <nk_layout_set_min_row_height+0x56>
 80126f2:	4b19      	ldr	r3, [pc, #100]	; (8012758 <nk_layout_set_min_row_height+0xb0>)
 80126f4:	4a15      	ldr	r2, [pc, #84]	; (801274c <nk_layout_set_min_row_height+0xa4>)
 80126f6:	2111      	movs	r1, #17
 80126f8:	4815      	ldr	r0, [pc, #84]	; (8012750 <nk_layout_set_min_row_height+0xa8>)
 80126fa:	f00b f939 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d01d      	beq.n	8012740 <nk_layout_set_min_row_height+0x98>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801270a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801270e:	2b00      	cmp	r3, #0
 8012710:	d016      	beq.n	8012740 <nk_layout_set_min_row_height+0x98>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012718:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801271c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00d      	beq.n	8012740 <nk_layout_set_min_row_height+0x98>
        return;

    win = ctx->current;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801272a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801272e:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012736:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = height;
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	683a      	ldr	r2, [r7, #0]
 801273c:	671a      	str	r2, [r3, #112]	; 0x70
 801273e:	e000      	b.n	8012742 <nk_layout_set_min_row_height+0x9a>
        return;
 8012740:	bf00      	nop
}
 8012742:	3710      	adds	r7, #16
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	080216c0 	.word	0x080216c0
 801274c:	08023400 	.word	0x08023400
 8012750:	080216c4 	.word	0x080216c4
 8012754:	080216e0 	.word	0x080216e0
 8012758:	080216f0 	.word	0x080216f0

0801275c <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d105      	bne.n	8012776 <nk_layout_reset_min_row_height+0x1a>
 801276a:	4b34      	ldr	r3, [pc, #208]	; (801283c <nk_layout_reset_min_row_height+0xe0>)
 801276c:	4a34      	ldr	r2, [pc, #208]	; (8012840 <nk_layout_reset_min_row_height+0xe4>)
 801276e:	211f      	movs	r1, #31
 8012770:	4834      	ldr	r0, [pc, #208]	; (8012844 <nk_layout_reset_min_row_height+0xe8>)
 8012772:	f00b f8fd 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801277c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012780:	2b00      	cmp	r3, #0
 8012782:	d105      	bne.n	8012790 <nk_layout_reset_min_row_height+0x34>
 8012784:	4b30      	ldr	r3, [pc, #192]	; (8012848 <nk_layout_reset_min_row_height+0xec>)
 8012786:	4a2e      	ldr	r2, [pc, #184]	; (8012840 <nk_layout_reset_min_row_height+0xe4>)
 8012788:	2120      	movs	r1, #32
 801278a:	482e      	ldr	r0, [pc, #184]	; (8012844 <nk_layout_reset_min_row_height+0xe8>)
 801278c:	f00b f8f0 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012796:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801279a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d105      	bne.n	80127ae <nk_layout_reset_min_row_height+0x52>
 80127a2:	4b2a      	ldr	r3, [pc, #168]	; (801284c <nk_layout_reset_min_row_height+0xf0>)
 80127a4:	4a26      	ldr	r2, [pc, #152]	; (8012840 <nk_layout_reset_min_row_height+0xe4>)
 80127a6:	2121      	movs	r1, #33	; 0x21
 80127a8:	4826      	ldr	r0, [pc, #152]	; (8012844 <nk_layout_reset_min_row_height+0xe8>)
 80127aa:	f00b f8e1 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d03e      	beq.n	8012832 <nk_layout_reset_min_row_height+0xd6>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80127ba:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d037      	beq.n	8012832 <nk_layout_reset_min_row_height+0xd6>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80127c8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80127cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d02e      	beq.n	8012832 <nk_layout_reset_min_row_height+0xd6>
        return;

    win = ctx->current;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80127da:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80127de:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127e6:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = ctx->style.font->height;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80127ee:	685a      	ldr	r2, [r3, #4]
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	671a      	str	r2, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8012800:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801281a:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 801281e:	edd3 7a00 	vldr	s15, [r3]
 8012822:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012826:	ee77 7a27 	vadd.f32	s15, s14, s15
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8012830:	e000      	b.n	8012834 <nk_layout_reset_min_row_height+0xd8>
        return;
 8012832:	bf00      	nop
}
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	080216c0 	.word	0x080216c0
 8012840:	08023420 	.word	0x08023420
 8012844:	080216c4 	.word	0x080216c4
 8012848:	080216e0 	.word	0x080216e0
 801284c:	080216f0 	.word	0x080216f0

08012850 <nk_layout_row_calculate_usable_space>:
NK_LIB float
nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,
    float total_space, int columns)
{
 8012850:	b480      	push	{r7}
 8012852:	b089      	sub	sp, #36	; 0x24
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	460b      	mov	r3, r1
 801285a:	ed87 0a01 	vstr	s0, [r7, #4]
 801285e:	603a      	str	r2, [r7, #0]
 8012860:	72fb      	strb	r3, [r7, #11]

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012868:	461a      	mov	r2, r3
 801286a:	f107 0310 	add.w	r3, r7, #16
 801286e:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8012872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012876:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	2b00      	cmp	r3, #0
 801287e:	dd06      	ble.n	801288e <nk_layout_row_calculate_usable_space+0x3e>
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	3b01      	subs	r3, #1
 8012884:	ee07 3a90 	vmov	s15, r3
 8012888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801288c:	e001      	b.n	8012892 <nk_layout_row_calculate_usable_space+0x42>
 801288e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80128c4 <nk_layout_row_calculate_usable_space+0x74>
 8012892:	ed97 7a04 	vldr	s14, [r7, #16]
 8012896:	ee67 7a87 	vmul.f32	s15, s15, s14
 801289a:	edc7 7a07 	vstr	s15, [r7, #28]
    panel_space  = total_space - panel_spacing;
 801289e:	ed97 7a01 	vldr	s14, [r7, #4]
 80128a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80128a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128aa:	edc7 7a06 	vstr	s15, [r7, #24]
    return panel_space;
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	ee07 3a90 	vmov	s15, r3
}
 80128b4:	eeb0 0a67 	vmov.f32	s0, s15
 80128b8:	3724      	adds	r7, #36	; 0x24
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	00000000 	.word	0x00000000

080128c8 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b08e      	sub	sp, #56	; 0x38
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	60b9      	str	r1, [r7, #8]
 80128d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80128d6:	603a      	str	r2, [r7, #0]
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d105      	bne.n	80128ea <nk_panel_layout+0x22>
 80128de:	4b78      	ldr	r3, [pc, #480]	; (8012ac0 <nk_panel_layout+0x1f8>)
 80128e0:	4a78      	ldr	r2, [pc, #480]	; (8012ac4 <nk_panel_layout+0x1fc>)
 80128e2:	2148      	movs	r1, #72	; 0x48
 80128e4:	4878      	ldr	r0, [pc, #480]	; (8012ac8 <nk_panel_layout+0x200>)
 80128e6:	f00b f843 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80128f0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d105      	bne.n	8012904 <nk_panel_layout+0x3c>
 80128f8:	4b74      	ldr	r3, [pc, #464]	; (8012acc <nk_panel_layout+0x204>)
 80128fa:	4a72      	ldr	r2, [pc, #456]	; (8012ac4 <nk_panel_layout+0x1fc>)
 80128fc:	2149      	movs	r1, #73	; 0x49
 80128fe:	4872      	ldr	r0, [pc, #456]	; (8012ac8 <nk_panel_layout+0x200>)
 8012900:	f00b f836 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801290a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801290e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d105      	bne.n	8012922 <nk_panel_layout+0x5a>
 8012916:	4b6e      	ldr	r3, [pc, #440]	; (8012ad0 <nk_panel_layout+0x208>)
 8012918:	4a6a      	ldr	r2, [pc, #424]	; (8012ac4 <nk_panel_layout+0x1fc>)
 801291a:	214a      	movs	r1, #74	; 0x4a
 801291c:	486a      	ldr	r0, [pc, #424]	; (8012ac8 <nk_panel_layout+0x200>)
 801291e:	f00b f827 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	f000 80c6 	beq.w	8012ab6 <nk_panel_layout+0x1ee>
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012930:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012934:	2b00      	cmp	r3, #0
 8012936:	f000 80be 	beq.w	8012ab6 <nk_panel_layout+0x1ee>
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012940:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012948:	2b00      	cmp	r3, #0
 801294a:	f000 80b4 	beq.w	8012ab6 <nk_panel_layout+0x1ee>
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012954:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801295c:	633b      	str	r3, [r7, #48]	; 0x30
    out = &win->buffer;
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	3364      	adds	r3, #100	; 0x64
 8012962:	62fb      	str	r3, [r7, #44]	; 0x2c
    color = style->window.background;
 8012964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801296a:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801296e:	623b      	str	r3, [r7, #32]
    item_spacing = style->window.spacing;
 8012970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012976:	461a      	mov	r2, r3
 8012978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801297c:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8012980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012984:	e883 0003 	stmia.w	r3, {r0, r1}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 8012988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012990:	2b00      	cmp	r3, #0
 8012992:	d005      	beq.n	80129a0 <nk_panel_layout+0xd8>
 8012994:	4b4f      	ldr	r3, [pc, #316]	; (8012ad4 <nk_panel_layout+0x20c>)
 8012996:	4a4b      	ldr	r2, [pc, #300]	; (8012ac4 <nk_panel_layout+0x1fc>)
 8012998:	215a      	movs	r1, #90	; 0x5a
 801299a:	484b      	ldr	r0, [pc, #300]	; (8012ac8 <nk_panel_layout+0x200>)
 801299c:	f00a ffe8 	bl	801d970 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 80129a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d005      	beq.n	80129b8 <nk_panel_layout+0xf0>
 80129ac:	4b4a      	ldr	r3, [pc, #296]	; (8012ad8 <nk_panel_layout+0x210>)
 80129ae:	4a45      	ldr	r2, [pc, #276]	; (8012ac4 <nk_panel_layout+0x1fc>)
 80129b0:	215b      	movs	r1, #91	; 0x5b
 80129b2:	4845      	ldr	r0, [pc, #276]	; (8012ac8 <nk_panel_layout+0x200>)
 80129b4:	f00a ffdc 	bl	801d970 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 80129b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d005      	beq.n	80129d0 <nk_panel_layout+0x108>
 80129c4:	4b45      	ldr	r3, [pc, #276]	; (8012adc <nk_panel_layout+0x214>)
 80129c6:	4a3f      	ldr	r2, [pc, #252]	; (8012ac4 <nk_panel_layout+0x1fc>)
 80129c8:	215c      	movs	r1, #92	; 0x5c
 80129ca:	483f      	ldr	r0, [pc, #252]	; (8012ac8 <nk_panel_layout+0x200>)
 80129cc:	f00a ffd0 	bl	801d970 <__assert_func>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 80129d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d2:	2200      	movs	r2, #0
 80129d4:	669a      	str	r2, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 80129d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80129dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129de:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80129e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    layout->row.columns = cols;
 80129ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 80129f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80129f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80129fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fe:	d117      	bne.n	8012a30 <nk_panel_layout+0x168>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 8012a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a02:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8012a06:	ed97 7a01 	vldr	s14, [r7, #4]
 8012a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a12:	d503      	bpl.n	8012a1c <nk_panel_layout+0x154>
 8012a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a16:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8012a1a:	e001      	b.n	8012a20 <nk_panel_layout+0x158>
 8012a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8012a20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a2a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8012a2e:	e008      	b.n	8012a42 <nk_panel_layout+0x17a>
    else layout->row.height = height + item_spacing.y;
 8012a30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8012a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a3e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    layout->row.item_offset = 0;
 8012a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a44:	f04f 0200 	mov.w	r2, #0
 8012a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 8012a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d02f      	beq.n	8012ab8 <nk_panel_layout+0x1f0>
        /* draw background for dynamic panels */
        struct nk_rect background;
        background.x = win->bounds.x;
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a5c:	613b      	str	r3, [r7, #16]
        background.w = win->bounds.w;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a62:	61bb      	str	r3, [r7, #24]
        background.y = layout->at_y - 1.0f;
 8012a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a72:	edc7 7a05 	vstr	s15, [r7, #20]
        background.h = layout->row.height + 1.0f;
 8012a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a78:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8012a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a84:	edc7 7a07 	vstr	s15, [r7, #28]
        nk_fill_rect(out, background, 0, color);
 8012a88:	ed97 6a04 	vldr	s12, [r7, #16]
 8012a8c:	edd7 6a05 	vldr	s13, [r7, #20]
 8012a90:	ed97 7a06 	vldr	s14, [r7, #24]
 8012a94:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a98:	6a39      	ldr	r1, [r7, #32]
 8012a9a:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8012ae0 <nk_panel_layout+0x218>
 8012a9e:	eeb0 0a46 	vmov.f32	s0, s12
 8012aa2:	eef0 0a66 	vmov.f32	s1, s13
 8012aa6:	eeb0 1a47 	vmov.f32	s2, s14
 8012aaa:	eef0 1a67 	vmov.f32	s3, s15
 8012aae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ab0:	f7fe f8b0 	bl	8010c14 <nk_fill_rect>
 8012ab4:	e000      	b.n	8012ab8 <nk_panel_layout+0x1f0>
        return;
 8012ab6:	bf00      	nop
    }
}
 8012ab8:	3738      	adds	r7, #56	; 0x38
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	080216c0 	.word	0x080216c0
 8012ac4:	08023440 	.word	0x08023440
 8012ac8:	080216c4 	.word	0x080216c4
 8012acc:	080216e0 	.word	0x080216e0
 8012ad0:	080216f0 	.word	0x080216f0
 8012ad4:	08021708 	.word	0x08021708
 8012ad8:	08021730 	.word	0x08021730
 8012adc:	08021754 	.word	0x08021754
 8012ae0:	00000000 	.word	0x00000000

08012ae4 <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b088      	sub	sp, #32
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6178      	str	r0, [r7, #20]
 8012aec:	ed87 0a03 	vstr	s0, [r7, #12]
 8012af0:	60ba      	str	r2, [r7, #8]
 8012af2:	607b      	str	r3, [r7, #4]
 8012af4:	460b      	mov	r3, r1
 8012af6:	74fb      	strb	r3, [r7, #19]
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d105      	bne.n	8012b0a <nk_row_layout+0x26>
 8012afe:	4b3a      	ldr	r3, [pc, #232]	; (8012be8 <nk_row_layout+0x104>)
 8012b00:	4a3a      	ldr	r2, [pc, #232]	; (8012bec <nk_row_layout+0x108>)
 8012b02:	2177      	movs	r1, #119	; 0x77
 8012b04:	483a      	ldr	r0, [pc, #232]	; (8012bf0 <nk_row_layout+0x10c>)
 8012b06:	f00a ff33 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012b10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d105      	bne.n	8012b24 <nk_row_layout+0x40>
 8012b18:	4b36      	ldr	r3, [pc, #216]	; (8012bf4 <nk_row_layout+0x110>)
 8012b1a:	4a34      	ldr	r2, [pc, #208]	; (8012bec <nk_row_layout+0x108>)
 8012b1c:	2178      	movs	r1, #120	; 0x78
 8012b1e:	4834      	ldr	r0, [pc, #208]	; (8012bf0 <nk_row_layout+0x10c>)
 8012b20:	f00a ff26 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012b2a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d105      	bne.n	8012b42 <nk_row_layout+0x5e>
 8012b36:	4b30      	ldr	r3, [pc, #192]	; (8012bf8 <nk_row_layout+0x114>)
 8012b38:	4a2c      	ldr	r2, [pc, #176]	; (8012bec <nk_row_layout+0x108>)
 8012b3a:	2179      	movs	r1, #121	; 0x79
 8012b3c:	482c      	ldr	r0, [pc, #176]	; (8012bf0 <nk_row_layout+0x10c>)
 8012b3e:	f00a ff17 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d04a      	beq.n	8012bde <nk_row_layout+0xfa>
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012b4e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d043      	beq.n	8012bde <nk_row_layout+0xfa>
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012b5c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d03a      	beq.n	8012bde <nk_row_layout+0xfa>
        return;

    win = ctx->current;
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012b6e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012b72:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8012b74:	68ba      	ldr	r2, [r7, #8]
 8012b76:	ed97 0a03 	vldr	s0, [r7, #12]
 8012b7a:	69f9      	ldr	r1, [r7, #28]
 8012b7c:	6978      	ldr	r0, [r7, #20]
 8012b7e:	f7ff fea3 	bl	80128c8 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 8012b82:	7cfb      	ldrb	r3, [r7, #19]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d106      	bne.n	8012b96 <nk_row_layout+0xb2>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b8e:	2200      	movs	r2, #0
 8012b90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8012b94:	e005      	b.n	8012ba2 <nk_row_layout+0xbe>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b9c:	2204      	movs	r2, #4
 8012b9e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    win->layout->row.ratio = 0;
 8012ba2:	69fb      	ldr	r3, [r7, #28]
 8012ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ba8:	2200      	movs	r2, #0
 8012baa:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012bb2:	f04f 0200 	mov.w	r2, #0
 8012bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    win->layout->row.item_offset = 0;
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012bc0:	f04f 0200 	mov.w	r2, #0
 8012bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 8012bc8:	69fb      	ldr	r3, [r7, #28]
 8012bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	ee07 2a90 	vmov	s15, r2
 8012bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bd8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8012bdc:	e000      	b.n	8012be0 <nk_row_layout+0xfc>
        return;
 8012bde:	bf00      	nop
}
 8012be0:	3720      	adds	r7, #32
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	080216c0 	.word	0x080216c0
 8012bec:	08023450 	.word	0x08023450
 8012bf0:	080216c4 	.word	0x080216c4
 8012bf4:	080216e0 	.word	0x080216e0
 8012bf8:	080216f0 	.word	0x080216f0

08012bfc <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	ed87 0a02 	vstr	s0, [r7, #8]
 8012c08:	6079      	str	r1, [r7, #4]
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8012c12:	2100      	movs	r1, #0
 8012c14:	68f8      	ldr	r0, [r7, #12]
 8012c16:	f7ff ff65 	bl	8012ae4 <nk_row_layout>
}
 8012c1a:	bf00      	nop
 8012c1c:	3710      	adds	r7, #16
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
	...

08012c24 <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b08c      	sub	sp, #48	; 0x30
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6178      	str	r0, [r7, #20]
 8012c2c:	ed87 0a03 	vstr	s0, [r7, #12]
 8012c30:	60ba      	str	r2, [r7, #8]
 8012c32:	607b      	str	r3, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	74fb      	strb	r3, [r7, #19]
    int i;
    int n_undef = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d105      	bne.n	8012c4e <nk_layout_row+0x2a>
 8012c42:	4b73      	ldr	r3, [pc, #460]	; (8012e10 <nk_layout_row+0x1ec>)
 8012c44:	4a73      	ldr	r2, [pc, #460]	; (8012e14 <nk_layout_row+0x1f0>)
 8012c46:	21ed      	movs	r1, #237	; 0xed
 8012c48:	4873      	ldr	r0, [pc, #460]	; (8012e18 <nk_layout_row+0x1f4>)
 8012c4a:	f00a fe91 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012c54:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d105      	bne.n	8012c68 <nk_layout_row+0x44>
 8012c5c:	4b6f      	ldr	r3, [pc, #444]	; (8012e1c <nk_layout_row+0x1f8>)
 8012c5e:	4a6d      	ldr	r2, [pc, #436]	; (8012e14 <nk_layout_row+0x1f0>)
 8012c60:	21ee      	movs	r1, #238	; 0xee
 8012c62:	486d      	ldr	r0, [pc, #436]	; (8012e18 <nk_layout_row+0x1f4>)
 8012c64:	f00a fe84 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012c6e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d105      	bne.n	8012c86 <nk_layout_row+0x62>
 8012c7a:	4b69      	ldr	r3, [pc, #420]	; (8012e20 <nk_layout_row+0x1fc>)
 8012c7c:	4a65      	ldr	r2, [pc, #404]	; (8012e14 <nk_layout_row+0x1f0>)
 8012c7e:	21ef      	movs	r1, #239	; 0xef
 8012c80:	4865      	ldr	r0, [pc, #404]	; (8012e18 <nk_layout_row+0x1f4>)
 8012c82:	f00a fe75 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f000 80bd 	beq.w	8012e08 <nk_layout_row+0x1e4>
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012c94:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f000 80b5 	beq.w	8012e08 <nk_layout_row+0x1e4>
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012ca4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f000 80ab 	beq.w	8012e08 <nk_layout_row+0x1e4>
        return;

    win = ctx->current;
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012cb8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012cbc:	623b      	str	r3, [r7, #32]
    layout = win->layout;
 8012cbe:	6a3b      	ldr	r3, [r7, #32]
 8012cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012cc4:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8012cc6:	68ba      	ldr	r2, [r7, #8]
 8012cc8:	ed97 0a03 	vldr	s0, [r7, #12]
 8012ccc:	6a39      	ldr	r1, [r7, #32]
 8012cce:	6978      	ldr	r0, [r7, #20]
 8012cd0:	f7ff fdfa 	bl	80128c8 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 8012cd4:	7cfb      	ldrb	r3, [r7, #19]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d17b      	bne.n	8012dd2 <nk_layout_row+0x1ae>
        /* calculate width of undefined widget ratios */
        float r = 0;
 8012cda:	f04f 0300 	mov.w	r3, #0
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
        layout->row.ratio = ratio;
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	687a      	ldr	r2, [r7, #4]
 8012ce4:	679a      	str	r2, [r3, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012cea:	e01d      	b.n	8012d28 <nk_layout_row+0x104>
            if (ratio[i] < 0.0f)
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	009b      	lsls	r3, r3, #2
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	edd3 7a00 	vldr	s15, [r3]
 8012cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d00:	d503      	bpl.n	8012d0a <nk_layout_row+0xe6>
                n_undef++;
 8012d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d04:	3301      	adds	r3, #1
 8012d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d08:	e00b      	b.n	8012d22 <nk_layout_row+0xfe>
            else r += ratio[i];
 8012d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0c:	009b      	lsls	r3, r3, #2
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	4413      	add	r3, r2
 8012d12:	edd3 7a00 	vldr	s15, [r3]
 8012d16:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (i = 0; i < cols; ++i) {
 8012d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d24:	3301      	adds	r3, #1
 8012d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	dbdd      	blt.n	8012cec <nk_layout_row+0xc8>
        }
        r = NK_SATURATE(1.0f - r);
 8012d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d48:	dc0a      	bgt.n	8012d60 <nk_layout_row+0x13c>
 8012d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d5e:	dd16      	ble.n	8012d8e <nk_layout_row+0x16a>
 8012d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d78:	dd02      	ble.n	8012d80 <nk_layout_row+0x15c>
 8012d7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d7e:	e008      	b.n	8012d92 <nk_layout_row+0x16e>
 8012d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d8c:	e001      	b.n	8012d92 <nk_layout_row+0x16e>
 8012d8e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012e24 <nk_layout_row+0x200>
 8012d92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        layout->row.type = NK_LAYOUT_DYNAMIC;
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	2203      	movs	r2, #3
 8012d9a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 8012d9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012da2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012daa:	dd0c      	ble.n	8012dc6 <nk_layout_row+0x1a2>
 8012dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	dd09      	ble.n	8012dc6 <nk_layout_row+0x1a2>
 8012db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db4:	ee07 3a90 	vmov	s15, r3
 8012db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012dbc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8012dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dc4:	e001      	b.n	8012dca <nk_layout_row+0x1a6>
 8012dc6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012e24 <nk_layout_row+0x200>
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8012dd0:	e00f      	b.n	8012df2 <nk_layout_row+0x1ce>
    } else {
        layout->row.ratio = ratio;
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	687a      	ldr	r2, [r7, #4]
 8012dd6:	679a      	str	r2, [r3, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	2207      	movs	r2, #7
 8012ddc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = 0;
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	f04f 0200 	mov.w	r2, #0
 8012de6:	67da      	str	r2, [r3, #124]	; 0x7c
        layout->row.item_offset = 0;
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	f04f 0200 	mov.w	r2, #0
 8012dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }
    layout->row.item_offset = 0;
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	f04f 0200 	mov.w	r2, #0
 8012df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    layout->row.filled = 0;
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	f04f 0200 	mov.w	r2, #0
 8012e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8012e06:	e000      	b.n	8012e0a <nk_layout_row+0x1e6>
        return;
 8012e08:	bf00      	nop
}
 8012e0a:	3730      	adds	r7, #48	; 0x30
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	080216c0 	.word	0x080216c0
 8012e14:	08023460 	.word	0x08023460
 8012e18:	080216c4 	.word	0x080216c4
 8012e1c:	080216e0 	.word	0x080216e0
 8012e20:	080216f0 	.word	0x080216f0
 8012e24:	00000000 	.word	0x00000000

08012e28 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b086      	sub	sp, #24
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
    struct nk_panel *layout = win->layout;
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012e38:	617b      	str	r3, [r7, #20]
    struct nk_vec2 spacing = ctx->style.window.spacing;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012e40:	461a      	mov	r2, r3
 8012e42:	f107 0308 	add.w	r3, r7, #8
 8012e46:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 8012e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e4e:	e883 0003 	stmia.w	r3, {r0, r1}
    const float row_height = layout->row.height - spacing.y;
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8012e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8012e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e60:	edc7 7a04 	vstr	s15, [r7, #16]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e68:	461a      	mov	r2, r3
 8012e6a:	ed97 0a04 	vldr	s0, [r7, #16]
 8012e6e:	6839      	ldr	r1, [r7, #0]
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7ff fd29 	bl	80128c8 <nk_panel_layout>
}
 8012e76:	bf00      	nop
 8012e78:	3718      	adds	r7, #24
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
	...

08012e80 <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b092      	sub	sp, #72	; 0x48
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	60f8      	str	r0, [r7, #12]
 8012e88:	60b9      	str	r1, [r7, #8]
 8012e8a:	607a      	str	r2, [r7, #4]
 8012e8c:	603b      	str	r3, [r7, #0]
    struct nk_panel *layout;
    const struct nk_style *style;

    struct nk_vec2 spacing;

    float item_offset = 0;
 8012e8e:	f04f 0300 	mov.w	r3, #0
 8012e92:	647b      	str	r3, [r7, #68]	; 0x44
    float item_width = 0;
 8012e94:	f04f 0300 	mov.w	r3, #0
 8012e98:	643b      	str	r3, [r7, #64]	; 0x40
    float item_spacing = 0;
 8012e9a:	f04f 0300 	mov.w	r3, #0
 8012e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    float panel_space = 0;
 8012ea0:	f04f 0300 	mov.w	r3, #0
 8012ea4:	63bb      	str	r3, [r7, #56]	; 0x38

    NK_ASSERT(ctx);
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d106      	bne.n	8012eba <nk_layout_widget_space+0x3a>
 8012eac:	4bc4      	ldr	r3, [pc, #784]	; (80131c0 <nk_layout_widget_space+0x340>)
 8012eae:	4ac5      	ldr	r2, [pc, #788]	; (80131c4 <nk_layout_widget_space+0x344>)
 8012eb0:	f240 214d 	movw	r1, #589	; 0x24d
 8012eb4:	48c4      	ldr	r0, [pc, #784]	; (80131c8 <nk_layout_widget_space+0x348>)
 8012eb6:	f00a fd5b 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012ec0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <nk_layout_widget_space+0x56>
 8012ec8:	4bc0      	ldr	r3, [pc, #768]	; (80131cc <nk_layout_widget_space+0x34c>)
 8012eca:	4abe      	ldr	r2, [pc, #760]	; (80131c4 <nk_layout_widget_space+0x344>)
 8012ecc:	f240 214e 	movw	r1, #590	; 0x24e
 8012ed0:	48bd      	ldr	r0, [pc, #756]	; (80131c8 <nk_layout_widget_space+0x348>)
 8012ed2:	f00a fd4d 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012edc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d106      	bne.n	8012ef6 <nk_layout_widget_space+0x76>
 8012ee8:	4bb9      	ldr	r3, [pc, #740]	; (80131d0 <nk_layout_widget_space+0x350>)
 8012eea:	4ab6      	ldr	r2, [pc, #728]	; (80131c4 <nk_layout_widget_space+0x344>)
 8012eec:	f240 214f 	movw	r1, #591	; 0x24f
 8012ef0:	48b5      	ldr	r0, [pc, #724]	; (80131c8 <nk_layout_widget_space+0x348>)
 8012ef2:	f00a fd3d 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	f000 8340 	beq.w	801357e <nk_layout_widget_space+0x6fe>
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f04:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	f000 8338 	beq.w	801357e <nk_layout_widget_space+0x6fe>
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f14:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 832e 	beq.w	801357e <nk_layout_widget_space+0x6fe>
        return;

    win = ctx->current;
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8012f28:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8012f2c:	607b      	str	r3, [r7, #4]
    layout = win->layout;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f34:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8012f3c:	633b      	str	r3, [r7, #48]	; 0x30
    NK_ASSERT(bounds);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d106      	bne.n	8012f52 <nk_layout_widget_space+0xd2>
 8012f44:	4ba3      	ldr	r3, [pc, #652]	; (80131d4 <nk_layout_widget_space+0x354>)
 8012f46:	4a9f      	ldr	r2, [pc, #636]	; (80131c4 <nk_layout_widget_space+0x344>)
 8012f48:	f240 2156 	movw	r1, #598	; 0x256
 8012f4c:	489e      	ldr	r0, [pc, #632]	; (80131c8 <nk_layout_widget_space+0x348>)
 8012f4e:	f00a fd0f 	bl	801d970 <__assert_func>

    spacing = style->window.spacing;
 8012f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f58:	461a      	mov	r2, r3
 8012f5a:	f107 0314 	add.w	r3, r7, #20
 8012f5e:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8012f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f66:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8012f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f72:	7819      	ldrb	r1, [r3, #0]
 8012f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f76:	edd3 7a04 	vldr	s15, [r3, #16]
 8012f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f7e:	461a      	mov	r2, r3
 8012f80:	eeb0 0a67 	vmov.f32	s0, s15
 8012f84:	f7ff fc64 	bl	8012850 <nk_layout_row_calculate_usable_space>
 8012f88:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 8012f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f8e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8012f92:	2b08      	cmp	r3, #8
 8012f94:	f200 828b 	bhi.w	80134ae <nk_layout_widget_space+0x62e>
 8012f98:	a201      	add	r2, pc, #4	; (adr r2, 8012fa0 <nk_layout_widget_space+0x120>)
 8012f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f9e:	bf00      	nop
 8012fa0:	08012fc5 	.word	0x08012fc5
 8012fa4:	08013047 	.word	0x08013047
 8012fa8:	080130c9 	.word	0x080130c9
 8012fac:	080131ab 	.word	0x080131ab
 8012fb0:	0801328f 	.word	0x0801328f
 8012fb4:	080132c7 	.word	0x080132c7
 8012fb8:	0801330b 	.word	0x0801330b
 8012fbc:	080133c5 	.word	0x080133c5
 8012fc0:	08013411 	.word	0x08013411
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 8012fc4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd4:	dd02      	ble.n	8012fdc <nk_layout_widget_space+0x15c>
 8012fd6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8012fda:	e001      	b.n	8012fe0 <nk_layout_widget_space+0x160>
 8012fdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fe4:	ee07 3a10 	vmov	s14, r3
 8012fe8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012fec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012ff0:	ed87 7a07 	vstr	s14, [r7, #28]
        item_offset = (float)layout->row.index * w;
 8012ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ff8:	ee07 3a90 	vmov	s15, r3
 8012ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013000:	ed97 7a07 	vldr	s14, [r7, #28]
 8013004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013008:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 801300c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013018:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801301c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013020:	ed97 7a07 	vldr	s14, [r7, #28]
 8013024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013028:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 801302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013030:	ee07 3a90 	vmov	s15, r3
 8013034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013038:	edd7 7a05 	vldr	s15, [r7, #20]
 801303c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013040:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 8013044:	e243      	b.n	80134ce <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_DYNAMIC_ROW: {
        /* scaling single ratio widget width */
        float w = layout->row.item_width * panel_space;
 8013046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013048:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 801304c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013054:	edc7 7a08 	vstr	s15, [r7, #32]
        item_offset = layout->row.item_offset;
 8013058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801305e:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8013060:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801306c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013074:	ed97 7a08 	vldr	s14, [r7, #32]
 8013078:	ee77 7a27 	vadd.f32	s15, s14, s15
 801307c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = 0;
 8013080:	f04f 0300 	mov.w	r3, #0
 8013084:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (modify) {
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	f000 8217 	beq.w	80134bc <nk_layout_widget_space+0x63c>
            layout->row.item_offset += w + spacing.x;
 801308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013090:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013094:	edd7 6a05 	vldr	s13, [r7, #20]
 8013098:	edd7 7a08 	vldr	s15, [r7, #32]
 801309c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130a6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 80130aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ac:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80130b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130b2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80130b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130bc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            layout->row.index = 0;
 80130c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c2:	2200      	movs	r2, #0
 80130c4:	669a      	str	r2, [r3, #104]	; 0x68
        }
    } break;
 80130c6:	e1f9      	b.n	80134bc <nk_layout_widget_space+0x63c>
    case NK_LAYOUT_DYNAMIC_FREE: {
        /* panel width depended free widget placing */
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 80130c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80130ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80130d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130d6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80130da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	edc3 7a00 	vstr	s15, [r3]
        bounds->x -= (float)*layout->offset_x;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	ed93 7a00 	vldr	s14, [r3]
 80130ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f0:	699b      	ldr	r3, [r3, #24]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	ee07 3a90 	vmov	s15, r3
 80130f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 8013106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013108:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8013112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013114:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8013118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	ed93 7a01 	vldr	s14, [r3, #4]
 801312c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312e:	69db      	ldr	r3, [r3, #28]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	ee07 3a90 	vmov	s15, r3
 8013136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801313a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 8013144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013146:	ed93 7a04 	vldr	s14, [r3, #16]
 801314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801314c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8013150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	edd3 6a00 	vldr	s13, [r3]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	edd3 7a00 	vldr	s15, [r3]
 8013160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013168:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801316c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	edc3 7a02 	vstr	s15, [r3, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 8013176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013178:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 801317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801317e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8013182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	edd3 6a01 	vldr	s13, [r3, #4]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801319a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 80131a8:	e1ea      	b.n	8013580 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_DYNAMIC: {
        /* scaling arrays of panel width ratios for every widget */
        float ratio, w;
        NK_ASSERT(layout->row.ratio);
 80131aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d114      	bne.n	80131dc <nk_layout_widget_space+0x35c>
 80131b2:	4b09      	ldr	r3, [pc, #36]	; (80131d8 <nk_layout_widget_space+0x358>)
 80131b4:	4a03      	ldr	r2, [pc, #12]	; (80131c4 <nk_layout_widget_space+0x344>)
 80131b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80131ba:	4803      	ldr	r0, [pc, #12]	; (80131c8 <nk_layout_widget_space+0x348>)
 80131bc:	f00a fbd8 	bl	801d970 <__assert_func>
 80131c0:	080216c0 	.word	0x080216c0
 80131c4:	08023470 	.word	0x08023470
 80131c8:	080216c4 	.word	0x080216c4
 80131cc:	080216e0 	.word	0x080216e0
 80131d0:	080216f0 	.word	0x080216f0
 80131d4:	08021820 	.word	0x08021820
 80131d8:	08021828 	.word	0x08021828
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80131dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80131e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	4413      	add	r3, r2
 80131e8:	edd3 7a00 	vldr	s15, [r3]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 80131ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80131f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f4:	d502      	bpl.n	80131fc <nk_layout_widget_space+0x37c>
 80131f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131fa:	e006      	b.n	801320a <nk_layout_widget_space+0x38a>
 80131fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fe:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8013200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	4413      	add	r3, r2
 8013208:	681b      	ldr	r3, [r3, #0]
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 801320a:	62bb      	str	r3, [r7, #40]	; 0x28

        w = (ratio * panel_space);
 801320c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8013210:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013218:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        item_spacing = (float)layout->row.index * spacing.x;
 801321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801321e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013220:	ee07 3a90 	vmov	s15, r3
 8013224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013228:	edd7 7a05 	vldr	s15, [r7, #20]
 801322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013230:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_offset = layout->row.item_offset;
 8013234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801323a:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 801323c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013248:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801324c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013250:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013258:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

        if (modify) {
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	f000 812e 	beq.w	80134c0 <nk_layout_widget_space+0x640>
            layout->row.item_offset += w;
 8013264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013266:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801326a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801326e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013274:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += ratio;
 8013278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801327a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 801327e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013288:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
        }
    } break;
 801328c:	e118      	b.n	80134c0 <nk_layout_widget_space+0x640>
    case NK_LAYOUT_STATIC_FIXED: {
        /* non-scaling fixed widgets item width */
        item_width = layout->row.item_width;
 801328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013292:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = (float)layout->row.index * item_width;
 8013294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013298:	ee07 3a90 	vmov	s15, r3
 801329c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132a0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80132a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132a8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 80132ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132b0:	ee07 3a90 	vmov	s15, r3
 80132b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80132b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80132bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 80132c4:	e103      	b.n	80134ce <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_STATIC_ROW: {
        /* scaling single ratio widget width */
        item_width = layout->row.item_width;
 80132c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80132ca:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80132cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132d2:	647b      	str	r3, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 80132d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132d8:	ee07 3a90 	vmov	s15, r3
 80132dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80132e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80132e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += item_width;
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 80e8 	beq.w	80134c4 <nk_layout_widget_space+0x644>
 80132f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80132fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80132fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013304:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8013308:	e0dc      	b.n	80134c4 <nk_layout_widget_space+0x644>
    case NK_LAYOUT_STATIC_FREE: {
        /* free widget placing */
        bounds->x = layout->at_x + layout->row.item.x;
 801330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330c:	ed93 7a08 	vldr	s14, [r3, #32]
 8013310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013312:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8013316:	ee77 7a27 	vadd.f32	s15, s14, s15
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	edc3 7a00 	vstr	s15, [r3]
        bounds->w = layout->row.item.w;
 8013320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013322:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	609a      	str	r2, [r3, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	ed93 7a00 	vldr	s14, [r3]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	edd3 7a02 	vldr	s15, [r3, #8]
 8013336:	ee37 7a27 	vadd.f32	s14, s14, s15
 801333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013348:	dd0d      	ble.n	8013366 <nk_layout_widget_space+0x4e6>
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00a      	beq.n	8013366 <nk_layout_widget_space+0x4e6>
            layout->max_x = (bounds->x + bounds->w);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	ed93 7a00 	vldr	s14, [r3]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	edd3 7a02 	vldr	s15, [r3, #8]
 801335c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013362:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	ed93 7a00 	vldr	s14, [r3]
 801336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	ee07 3a90 	vmov	s15, r3
 8013376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801337a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + layout->row.item.y;
 8013384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013386:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8013390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	ed93 7a01 	vldr	s14, [r3, #4]
 80133a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a2:	69db      	ldr	r3, [r3, #28]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	ee07 3a90 	vmov	s15, r3
 80133aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->h = layout->row.item.h;
 80133b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	60da      	str	r2, [r3, #12]
        return;
 80133c2:	e0dd      	b.n	8013580 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_STATIC: {
        /* non-scaling array of panel pixel width for every widget */
        item_spacing = (float)layout->row.index * spacing.x;
 80133c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80133c8:	ee07 3a90 	vmov	s15, r3
 80133cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80133d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80133d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_width = layout->row.ratio[layout->row.index];
 80133dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80133e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	4413      	add	r3, r2
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80133ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80133f2:	647b      	str	r3, [r7, #68]	; 0x44
        if (modify) layout->row.item_offset += item_width;
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d066      	beq.n	80134c8 <nk_layout_widget_space+0x648>
 80133fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133fc:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8013400:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8013404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 801340e:	e05b      	b.n	80134c8 <nk_layout_widget_space+0x648>
    case NK_LAYOUT_TEMPLATE: {
        /* stretchy row layout with combined dynamic/static widget width*/
        float w;
        NK_ASSERT(layout->row.index < layout->row.columns);
 8013410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013412:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013418:	429a      	cmp	r2, r3
 801341a:	db06      	blt.n	801342a <nk_layout_widget_space+0x5aa>
 801341c:	4b5a      	ldr	r3, [pc, #360]	; (8013588 <nk_layout_widget_space+0x708>)
 801341e:	4a5b      	ldr	r2, [pc, #364]	; (801358c <nk_layout_widget_space+0x70c>)
 8013420:	f240 21b1 	movw	r1, #689	; 0x2b1
 8013424:	485a      	ldr	r0, [pc, #360]	; (8013590 <nk_layout_widget_space+0x710>)
 8013426:	f00a faa3 	bl	801d970 <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 801342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801342c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801342e:	2b0f      	cmp	r3, #15
 8013430:	dd06      	ble.n	8013440 <nk_layout_widget_space+0x5c0>
 8013432:	4b58      	ldr	r3, [pc, #352]	; (8013594 <nk_layout_widget_space+0x714>)
 8013434:	4a55      	ldr	r2, [pc, #340]	; (801358c <nk_layout_widget_space+0x70c>)
 8013436:	f240 21b2 	movw	r1, #690	; 0x2b2
 801343a:	4855      	ldr	r0, [pc, #340]	; (8013590 <nk_layout_widget_space+0x710>)
 801343c:	f00a fa98 	bl	801d970 <__assert_func>
        w = layout->row.templates[layout->row.index];
 8013440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013446:	3326      	adds	r3, #38	; 0x26
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4413      	add	r3, r2
 801344c:	3308      	adds	r3, #8
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	62fb      	str	r3, [r7, #44]	; 0x2c
        item_offset = layout->row.item_offset;
 8013452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013458:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 801345a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801345e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013466:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801346a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801346e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8013472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013476:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 801347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801347e:	ee07 3a90 	vmov	s15, r3
 8013482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013486:	edd7 7a05 	vldr	s15, [r7, #20]
 801348a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801348e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += w;
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d019      	beq.n	80134cc <nk_layout_widget_space+0x64c>
 8013498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801349a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801349e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80134a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134a8:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 80134ac:	e00e      	b.n	80134cc <nk_layout_widget_space+0x64c>
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
 80134ae:	4b3a      	ldr	r3, [pc, #232]	; (8013598 <nk_layout_widget_space+0x718>)
 80134b0:	4a36      	ldr	r2, [pc, #216]	; (801358c <nk_layout_widget_space+0x70c>)
 80134b2:	f240 21ba 	movw	r1, #698	; 0x2ba
 80134b6:	4836      	ldr	r0, [pc, #216]	; (8013590 <nk_layout_widget_space+0x710>)
 80134b8:	f00a fa5a 	bl	801d970 <__assert_func>
    } break;
 80134bc:	bf00      	nop
 80134be:	e006      	b.n	80134ce <nk_layout_widget_space+0x64e>
    } break;
 80134c0:	bf00      	nop
 80134c2:	e004      	b.n	80134ce <nk_layout_widget_space+0x64e>
    } break;
 80134c4:	bf00      	nop
 80134c6:	e002      	b.n	80134ce <nk_layout_widget_space+0x64e>
    } break;
 80134c8:	bf00      	nop
 80134ca:	e000      	b.n	80134ce <nk_layout_widget_space+0x64e>
    } break;
 80134cc:	bf00      	nop
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80134d2:	609a      	str	r2, [r3, #8]
    bounds->h = layout->row.height - spacing.y;
 80134d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80134da:	edd7 7a06 	vldr	s15, [r7, #24]
 80134de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	edc3 7a03 	vstr	s15, [r3, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 80134e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80134ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f0:	69db      	ldr	r3, [r3, #28]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	ee07 3a90 	vmov	s15, r3
 80134f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 8013506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013508:	ed93 7a08 	vldr	s14, [r3, #32]
 801350c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013514:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013518:	ee77 7a27 	vadd.f32	s15, s14, s15
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	edc3 7a00 	vstr	s15, [r3]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	ed93 7a00 	vldr	s14, [r3]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	edd3 7a02 	vldr	s15, [r3, #8]
 801352e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013534:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013540:	dd0d      	ble.n	801355e <nk_layout_widget_space+0x6de>
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00a      	beq.n	801355e <nk_layout_widget_space+0x6de>
        layout->max_x = bounds->x + bounds->w;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	ed93 7a00 	vldr	s14, [r3]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	edd3 7a02 	vldr	s15, [r3, #8]
 8013554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	ed93 7a00 	vldr	s14, [r3]
 8013564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013566:	699b      	ldr	r3, [r3, #24]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	ee07 3a90 	vmov	s15, r3
 801356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	edc3 7a00 	vstr	s15, [r3]
 801357c:	e000      	b.n	8013580 <nk_layout_widget_space+0x700>
        return;
 801357e:	bf00      	nop
}
 8013580:	3748      	adds	r7, #72	; 0x48
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	0802183c 	.word	0x0802183c
 801358c:	08023470 	.word	0x08023470
 8013590:	080216c4 	.word	0x080216c4
 8013594:	08021864 	.word	0x08021864
 8013598:	0802187c 	.word	0x0802187c

0801359c <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d106      	bne.n	80135ba <nk_panel_alloc_space+0x1e>
 80135ac:	4b2d      	ldr	r3, [pc, #180]	; (8013664 <nk_panel_alloc_space+0xc8>)
 80135ae:	4a2e      	ldr	r2, [pc, #184]	; (8013668 <nk_panel_alloc_space+0xcc>)
 80135b0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80135b4:	482d      	ldr	r0, [pc, #180]	; (801366c <nk_panel_alloc_space+0xd0>)
 80135b6:	f00a f9db 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80135c0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d106      	bne.n	80135d6 <nk_panel_alloc_space+0x3a>
 80135c8:	4b29      	ldr	r3, [pc, #164]	; (8013670 <nk_panel_alloc_space+0xd4>)
 80135ca:	4a27      	ldr	r2, [pc, #156]	; (8013668 <nk_panel_alloc_space+0xcc>)
 80135cc:	f240 21cd 	movw	r1, #717	; 0x2cd
 80135d0:	4826      	ldr	r0, [pc, #152]	; (801366c <nk_panel_alloc_space+0xd0>)
 80135d2:	f00a f9cd 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80135dc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80135e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d106      	bne.n	80135f6 <nk_panel_alloc_space+0x5a>
 80135e8:	4b22      	ldr	r3, [pc, #136]	; (8013674 <nk_panel_alloc_space+0xd8>)
 80135ea:	4a1f      	ldr	r2, [pc, #124]	; (8013668 <nk_panel_alloc_space+0xcc>)
 80135ec:	f240 21ce 	movw	r1, #718	; 0x2ce
 80135f0:	481e      	ldr	r0, [pc, #120]	; (801366c <nk_panel_alloc_space+0xd0>)
 80135f2:	f00a f9bd 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d02f      	beq.n	801365c <nk_panel_alloc_space+0xc0>
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013602:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013606:	2b00      	cmp	r3, #0
 8013608:	d028      	beq.n	801365c <nk_panel_alloc_space+0xc0>
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013610:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013618:	2b00      	cmp	r3, #0
 801361a:	d01f      	beq.n	801365c <nk_panel_alloc_space+0xc0>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013622:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8013626:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801362e:	60bb      	str	r3, [r7, #8]
    if (layout->row.index >= layout->row.columns)
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013638:	429a      	cmp	r2, r3
 801363a:	db03      	blt.n	8013644 <nk_panel_alloc_space+0xa8>
        nk_panel_alloc_row(ctx, win);
 801363c:	68f9      	ldr	r1, [r7, #12]
 801363e:	6838      	ldr	r0, [r7, #0]
 8013640:	f7ff fbf2 	bl	8012e28 <nk_panel_alloc_row>

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 8013644:	2301      	movs	r3, #1
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	6839      	ldr	r1, [r7, #0]
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7ff fc18 	bl	8012e80 <nk_layout_widget_space>
    layout->row.index++;
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013654:	1c5a      	adds	r2, r3, #1
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	669a      	str	r2, [r3, #104]	; 0x68
 801365a:	e000      	b.n	801365e <nk_panel_alloc_space+0xc2>
        return;
 801365c:	bf00      	nop
}
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	080216c0 	.word	0x080216c0
 8013668:	08023488 	.word	0x08023488
 801366c:	080216c4 	.word	0x080216c4
 8013670:	080216e0 	.word	0x080216e0
 8013674:	080216f0 	.word	0x080216f0

08013678 <nk_round_up_pow2>:
    return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*(a7 + x*a8)))))));
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
 8013678:	b480      	push	{r7}
 801367a:	b083      	sub	sp, #12
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
    v--;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	3b01      	subs	r3, #1
 8013684:	607b      	str	r3, [r7, #4]
    v |= v >> 1;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	085b      	lsrs	r3, r3, #1
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	4313      	orrs	r3, r2
 801368e:	607b      	str	r3, [r7, #4]
    v |= v >> 2;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	089b      	lsrs	r3, r3, #2
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	4313      	orrs	r3, r2
 8013698:	607b      	str	r3, [r7, #4]
    v |= v >> 4;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	091b      	lsrs	r3, r3, #4
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	4313      	orrs	r3, r2
 80136a2:	607b      	str	r3, [r7, #4]
    v |= v >> 8;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	0a1b      	lsrs	r3, r3, #8
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	4313      	orrs	r3, r2
 80136ac:	607b      	str	r3, [r7, #4]
    v |= v >> 16;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	0c1b      	lsrs	r3, r3, #16
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	4313      	orrs	r3, r2
 80136b6:	607b      	str	r3, [r7, #4]
    v++;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	3301      	adds	r3, #1
 80136bc:	607b      	str	r3, [r7, #4]
    return v;
 80136be:	687b      	ldr	r3, [r7, #4]
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	370c      	adds	r7, #12
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr

080136cc <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 80136cc:	b490      	push	{r4, r7}
 80136ce:	b090      	sub	sp, #64	; 0x40
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	ed87 0a07 	vstr	s0, [r7, #28]
 80136d6:	edc7 0a06 	vstr	s1, [r7, #24]
 80136da:	ed87 1a05 	vstr	s2, [r7, #20]
 80136de:	edc7 1a04 	vstr	s3, [r7, #16]
    struct nk_rect r;
    r.x = x; r.y = y;
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	623b      	str	r3, [r7, #32]
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	627b      	str	r3, [r7, #36]	; 0x24
    r.w = w; r.h = h;
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 80136f2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80136f6:	f107 0320 	add.w	r3, r7, #32
 80136fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80136fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013702:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013708:	ee06 0a10 	vmov	s12, r0
 801370c:	ee06 1a90 	vmov	s13, r1
 8013710:	ee07 2a10 	vmov	s14, r2
 8013714:	ee07 3a90 	vmov	s15, r3
}
 8013718:	eeb0 0a46 	vmov.f32	s0, s12
 801371c:	eef0 0a66 	vmov.f32	s1, s13
 8013720:	eeb0 1a47 	vmov.f32	s2, s14
 8013724:	eef0 1a67 	vmov.f32	s3, s15
 8013728:	3740      	adds	r7, #64	; 0x40
 801372a:	46bd      	mov	sp, r7
 801372c:	bc90      	pop	{r4, r7}
 801372e:	4770      	bx	lr

08013730 <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 8013730:	b490      	push	{r4, r7}
 8013732:	b092      	sub	sp, #72	; 0x48
 8013734:	af00      	add	r7, sp, #0
 8013736:	eeb0 6a40 	vmov.f32	s12, s0
 801373a:	eef0 6a60 	vmov.f32	s13, s1
 801373e:	eeb0 7a41 	vmov.f32	s14, s2
 8013742:	eef0 7a61 	vmov.f32	s15, s3
 8013746:	ed87 2a05 	vstr	s4, [r7, #20]
 801374a:	ed87 6a06 	vstr	s12, [r7, #24]
 801374e:	edc7 6a07 	vstr	s13, [r7, #28]
 8013752:	ed87 7a08 	vstr	s14, [r7, #32]
 8013756:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 801375a:	ed97 7a08 	vldr	s14, [r7, #32]
 801375e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013762:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801376e:	d504      	bpl.n	801377a <nk_shrink_rect+0x4a>
 8013770:	edd7 7a05 	vldr	s15, [r7, #20]
 8013774:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013778:	e001      	b.n	801377e <nk_shrink_rect+0x4e>
 801377a:	edd7 7a08 	vldr	s15, [r7, #32]
 801377e:	edc7 7a08 	vstr	s15, [r7, #32]
    r.h = NK_MAX(r.h, 2 * amount);
 8013782:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013786:	edd7 7a05 	vldr	s15, [r7, #20]
 801378a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801378e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013796:	d504      	bpl.n	80137a2 <nk_shrink_rect+0x72>
 8013798:	edd7 7a05 	vldr	s15, [r7, #20]
 801379c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80137a0:	e001      	b.n	80137a6 <nk_shrink_rect+0x76>
 80137a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80137a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    res.x = r.x + amount;
 80137aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80137ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80137b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    res.y = r.y + amount;
 80137ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80137be:	edd7 7a05 	vldr	s15, [r7, #20]
 80137c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    res.w = r.w - 2 * amount;
 80137ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80137ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80137d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80137d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    res.h = r.h - 2 * amount;
 80137de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80137e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80137e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80137ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return res;
 80137f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80137f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80137fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013808:	ee06 0a10 	vmov	s12, r0
 801380c:	ee06 1a90 	vmov	s13, r1
 8013810:	ee07 2a10 	vmov	s14, r2
 8013814:	ee07 3a90 	vmov	s15, r3
}
 8013818:	eeb0 0a46 	vmov.f32	s0, s12
 801381c:	eef0 0a66 	vmov.f32	s1, s13
 8013820:	eeb0 1a47 	vmov.f32	s2, s14
 8013824:	eef0 1a67 	vmov.f32	s3, s15
 8013828:	3748      	adds	r7, #72	; 0x48
 801382a:	46bd      	mov	sp, r7
 801382c:	bc90      	pop	{r4, r7}
 801382e:	4770      	bx	lr

08013830 <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 8013830:	b480      	push	{r7}
 8013832:	b089      	sub	sp, #36	; 0x24
 8013834:	af00      	add	r7, sp, #0
 8013836:	ed87 0a03 	vstr	s0, [r7, #12]
 801383a:	edc7 0a02 	vstr	s1, [r7, #8]
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	613b      	str	r3, [r7, #16]
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	617b      	str	r3, [r7, #20]
    return ret;
 8013846:	f107 0318 	add.w	r3, r7, #24
 801384a:	f107 0210 	add.w	r2, r7, #16
 801384e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013852:	e883 0003 	stmia.w	r3, {r0, r1}
 8013856:	69ba      	ldr	r2, [r7, #24]
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	ee07 2a10 	vmov	s14, r2
 801385e:	ee07 3a90 	vmov	s15, r3
}
 8013862:	eeb0 0a47 	vmov.f32	s0, s14
 8013866:	eef0 0a67 	vmov.f32	s1, s15
 801386a:	3724      	adds	r7, #36	; 0x24
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr

08013874 <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b086      	sub	sp, #24
 8013878:	af00      	add	r7, sp, #0
 801387a:	6178      	str	r0, [r7, #20]
 801387c:	6139      	str	r1, [r7, #16]
 801387e:	ed87 0a03 	vstr	s0, [r7, #12]
 8013882:	edc7 0a02 	vstr	s1, [r7, #8]
 8013886:	ed87 1a01 	vstr	s2, [r7, #4]
 801388a:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(a);
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d106      	bne.n	80138a2 <nk_unify+0x2e>
 8013894:	4b4b      	ldr	r3, [pc, #300]	; (80139c4 <nk_unify+0x150>)
 8013896:	4a4c      	ldr	r2, [pc, #304]	; (80139c8 <nk_unify+0x154>)
 8013898:	f240 1101 	movw	r1, #257	; 0x101
 801389c:	484b      	ldr	r0, [pc, #300]	; (80139cc <nk_unify+0x158>)
 801389e:	f00a f867 	bl	801d970 <__assert_func>
    NK_ASSERT(clip);
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d106      	bne.n	80138b6 <nk_unify+0x42>
 80138a8:	4b49      	ldr	r3, [pc, #292]	; (80139d0 <nk_unify+0x15c>)
 80138aa:	4a47      	ldr	r2, [pc, #284]	; (80139c8 <nk_unify+0x154>)
 80138ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 80138b0:	4846      	ldr	r0, [pc, #280]	; (80139cc <nk_unify+0x158>)
 80138b2:	f00a f85d 	bl	801d970 <__assert_func>
    clip->x = NK_MAX(a->x, x0);
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	edd3 7a00 	vldr	s15, [r3]
 80138bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80138c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80138c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c8:	dd01      	ble.n	80138ce <nk_unify+0x5a>
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	e001      	b.n	80138d2 <nk_unify+0x5e>
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	697a      	ldr	r2, [r7, #20]
 80138d4:	6013      	str	r3, [r2, #0]
    clip->y = NK_MAX(a->y, y0);
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80138dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80138e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80138e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e8:	dd01      	ble.n	80138ee <nk_unify+0x7a>
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	e001      	b.n	80138f2 <nk_unify+0x7e>
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	697a      	ldr	r2, [r7, #20]
 80138f4:	6053      	str	r3, [r2, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	ed93 7a00 	vldr	s14, [r3]
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8013902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013906:	ed97 7a01 	vldr	s14, [r7, #4]
 801390a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013912:	dd08      	ble.n	8013926 <nk_unify+0xb2>
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	ed93 7a00 	vldr	s14, [r3]
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013924:	e001      	b.n	801392a <nk_unify+0xb6>
 8013926:	edd7 7a01 	vldr	s15, [r7, #4]
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	ed93 7a00 	vldr	s14, [r3]
 8013930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	edc3 7a02 	vstr	s15, [r3, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	ed93 7a01 	vldr	s14, [r3, #4]
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	edd3 7a03 	vldr	s15, [r3, #12]
 8013946:	ee77 7a27 	vadd.f32	s15, s14, s15
 801394a:	ed97 7a00 	vldr	s14, [r7]
 801394e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013956:	dd08      	ble.n	801396a <nk_unify+0xf6>
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	ed93 7a01 	vldr	s14, [r3, #4]
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	edd3 7a03 	vldr	s15, [r3, #12]
 8013964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013968:	e001      	b.n	801396e <nk_unify+0xfa>
 801396a:	edd7 7a00 	vldr	s15, [r7]
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	ed93 7a01 	vldr	s14, [r3, #4]
 8013974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	edc3 7a03 	vstr	s15, [r3, #12]
    clip->w = NK_MAX(0, clip->w);
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	edd3 7a02 	vldr	s15, [r3, #8]
 8013984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398c:	dd02      	ble.n	8013994 <nk_unify+0x120>
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	e001      	b.n	8013998 <nk_unify+0x124>
 8013994:	f04f 0300 	mov.w	r3, #0
 8013998:	697a      	ldr	r2, [r7, #20]
 801399a:	6093      	str	r3, [r2, #8]
    clip->h = NK_MAX(0, clip->h);
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	edd3 7a03 	vldr	s15, [r3, #12]
 80139a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80139a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139aa:	dd02      	ble.n	80139b2 <nk_unify+0x13e>
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	e001      	b.n	80139b6 <nk_unify+0x142>
 80139b2:	f04f 0300 	mov.w	r3, #0
 80139b6:	697a      	ldr	r2, [r7, #20]
 80139b8:	60d3      	str	r3, [r2, #12]
}
 80139ba:	bf00      	nop
 80139bc:	3718      	adds	r7, #24
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	08021880 	.word	0x08021880
 80139c8:	080234a0 	.word	0x080234a0
 80139cc:	08021884 	.word	0x08021884
 80139d0:	080218a0 	.word	0x080218a0

080139d4 <nk_triangle_from_direction>:

NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
 80139d4:	b590      	push	{r4, r7, lr}
 80139d6:	b08b      	sub	sp, #44	; 0x2c
 80139d8:	af00      	add	r7, sp, #0
 80139da:	61f8      	str	r0, [r7, #28]
 80139dc:	eeb0 6a40 	vmov.f32	s12, s0
 80139e0:	eef0 6a60 	vmov.f32	s13, s1
 80139e4:	eeb0 7a41 	vmov.f32	s14, s2
 80139e8:	eef0 7a61 	vmov.f32	s15, s3
 80139ec:	ed87 2a02 	vstr	s4, [r7, #8]
 80139f0:	edc7 2a01 	vstr	s5, [r7, #4]
 80139f4:	460b      	mov	r3, r1
 80139f6:	ed87 6a03 	vstr	s12, [r7, #12]
 80139fa:	edc7 6a04 	vstr	s13, [r7, #16]
 80139fe:	ed87 7a05 	vstr	s14, [r7, #20]
 8013a02:	edc7 7a06 	vstr	s15, [r7, #24]
 8013a06:	70fb      	strb	r3, [r7, #3]
    float w_half, h_half;
    NK_ASSERT(result);
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d106      	bne.n	8013a1c <nk_triangle_from_direction+0x48>
 8013a0e:	4bcf      	ldr	r3, [pc, #828]	; (8013d4c <nk_triangle_from_direction+0x378>)
 8013a10:	4acf      	ldr	r2, [pc, #828]	; (8013d50 <nk_triangle_from_direction+0x37c>)
 8013a12:	f44f 7188 	mov.w	r1, #272	; 0x110
 8013a16:	48cf      	ldr	r0, [pc, #828]	; (8013d54 <nk_triangle_from_direction+0x380>)
 8013a18:	f009 ffaa 	bl	801d970 <__assert_func>

    r.w = NK_MAX(2 * pad_x, r.w);
 8013a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8013a20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8013a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a30:	d502      	bpl.n	8013a38 <nk_triangle_from_direction+0x64>
 8013a32:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a36:	e003      	b.n	8013a40 <nk_triangle_from_direction+0x6c>
 8013a38:	edd7 7a02 	vldr	s15, [r7, #8]
 8013a3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013a40:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = NK_MAX(2 * pad_y, r.h);
 8013a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8013a48:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8013a4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8013a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a58:	d502      	bpl.n	8013a60 <nk_triangle_from_direction+0x8c>
 8013a5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8013a5e:	e003      	b.n	8013a68 <nk_triangle_from_direction+0x94>
 8013a60:	edd7 7a01 	vldr	s15, [r7, #4]
 8013a64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013a68:	edc7 7a06 	vstr	s15, [r7, #24]
    r.w = r.w - 2 * pad_x;
 8013a6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8013a70:	edd7 7a02 	vldr	s15, [r7, #8]
 8013a74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a7c:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = r.h - 2 * pad_y;
 8013a80:	ed97 7a06 	vldr	s14, [r7, #24]
 8013a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8013a88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a90:	edc7 7a06 	vstr	s15, [r7, #24]

    r.x = r.x + pad_x;
 8013a94:	ed97 7a03 	vldr	s14, [r7, #12]
 8013a98:	edd7 7a02 	vldr	s15, [r7, #8]
 8013a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013aa0:	edc7 7a03 	vstr	s15, [r7, #12]
    r.y = r.y + pad_y;
 8013aa4:	ed97 7a04 	vldr	s14, [r7, #16]
 8013aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ab0:	edc7 7a04 	vstr	s15, [r7, #16]

    w_half = r.w / 2.0f;
 8013ab4:	ed97 7a05 	vldr	s14, [r7, #20]
 8013ab8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013ac0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    h_half = r.h / 2.0f;
 8013ac4:	ed97 7a06 	vldr	s14, [r7, #24]
 8013ac8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013ad0:	edc7 7a08 	vstr	s15, [r7, #32]

    if (direction == NK_UP) {
 8013ad4:	78fb      	ldrb	r3, [r7, #3]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d14d      	bne.n	8013b76 <nk_triangle_from_direction+0x1a2>
        result[0] = nk_vec2(r.x + w_half, r.y);
 8013ada:	ed97 7a03 	vldr	s14, [r7, #12]
 8013ade:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ae6:	ed97 7a04 	vldr	s14, [r7, #16]
 8013aea:	eef0 0a47 	vmov.f32	s1, s14
 8013aee:	eeb0 0a67 	vmov.f32	s0, s15
 8013af2:	f7ff fe9d 	bl	8013830 <nk_vec2>
 8013af6:	eeb0 7a40 	vmov.f32	s14, s0
 8013afa:	eef0 7a60 	vmov.f32	s15, s1
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	ed83 7a00 	vstr	s14, [r3]
 8013b04:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 8013b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8013b0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8013b10:	ee77 6a27 	vadd.f32	s13, s14, s15
 8013b14:	ed97 7a04 	vldr	s14, [r7, #16]
 8013b18:	edd7 7a06 	vldr	s15, [r7, #24]
 8013b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	f103 0408 	add.w	r4, r3, #8
 8013b26:	eef0 0a67 	vmov.f32	s1, s15
 8013b2a:	eeb0 0a66 	vmov.f32	s0, s13
 8013b2e:	f7ff fe7f 	bl	8013830 <nk_vec2>
 8013b32:	eeb0 7a40 	vmov.f32	s14, s0
 8013b36:	eef0 7a60 	vmov.f32	s15, s1
 8013b3a:	ed84 7a00 	vstr	s14, [r4]
 8013b3e:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8013b42:	edd7 6a03 	vldr	s13, [r7, #12]
 8013b46:	ed97 7a04 	vldr	s14, [r7, #16]
 8013b4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8013b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	f103 0410 	add.w	r4, r3, #16
 8013b58:	eef0 0a67 	vmov.f32	s1, s15
 8013b5c:	eeb0 0a66 	vmov.f32	s0, s13
 8013b60:	f7ff fe66 	bl	8013830 <nk_vec2>
 8013b64:	eeb0 7a40 	vmov.f32	s14, s0
 8013b68:	eef0 7a60 	vmov.f32	s15, s1
 8013b6c:	ed84 7a00 	vstr	s14, [r4]
 8013b70:	edc4 7a01 	vstr	s15, [r4, #4]
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
    }
}
 8013b74:	e0e6      	b.n	8013d44 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_RIGHT) {
 8013b76:	78fb      	ldrb	r3, [r7, #3]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d149      	bne.n	8013c10 <nk_triangle_from_direction+0x23c>
        result[0] = nk_vec2(r.x, r.y);
 8013b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013b80:	ed97 7a04 	vldr	s14, [r7, #16]
 8013b84:	eef0 0a47 	vmov.f32	s1, s14
 8013b88:	eeb0 0a67 	vmov.f32	s0, s15
 8013b8c:	f7ff fe50 	bl	8013830 <nk_vec2>
 8013b90:	eeb0 7a40 	vmov.f32	s14, s0
 8013b94:	eef0 7a60 	vmov.f32	s15, s1
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	ed83 7a00 	vstr	s14, [r3]
 8013b9e:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 8013ba2:	ed97 7a03 	vldr	s14, [r7, #12]
 8013ba6:	edd7 7a05 	vldr	s15, [r7, #20]
 8013baa:	ee77 6a27 	vadd.f32	s13, s14, s15
 8013bae:	ed97 7a04 	vldr	s14, [r7, #16]
 8013bb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8013bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	f103 0408 	add.w	r4, r3, #8
 8013bc0:	eef0 0a67 	vmov.f32	s1, s15
 8013bc4:	eeb0 0a66 	vmov.f32	s0, s13
 8013bc8:	f7ff fe32 	bl	8013830 <nk_vec2>
 8013bcc:	eeb0 7a40 	vmov.f32	s14, s0
 8013bd0:	eef0 7a60 	vmov.f32	s15, s1
 8013bd4:	ed84 7a00 	vstr	s14, [r4]
 8013bd8:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8013bdc:	edd7 6a03 	vldr	s13, [r7, #12]
 8013be0:	ed97 7a04 	vldr	s14, [r7, #16]
 8013be4:	edd7 7a06 	vldr	s15, [r7, #24]
 8013be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	f103 0410 	add.w	r4, r3, #16
 8013bf2:	eef0 0a67 	vmov.f32	s1, s15
 8013bf6:	eeb0 0a66 	vmov.f32	s0, s13
 8013bfa:	f7ff fe19 	bl	8013830 <nk_vec2>
 8013bfe:	eeb0 7a40 	vmov.f32	s14, s0
 8013c02:	eef0 7a60 	vmov.f32	s15, s1
 8013c06:	ed84 7a00 	vstr	s14, [r4]
 8013c0a:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8013c0e:	e099      	b.n	8013d44 <nk_triangle_from_direction+0x370>
    } else if (direction == NK_DOWN) {
 8013c10:	78fb      	ldrb	r3, [r7, #3]
 8013c12:	2b02      	cmp	r3, #2
 8013c14:	d149      	bne.n	8013caa <nk_triangle_from_direction+0x2d6>
        result[0] = nk_vec2(r.x, r.y);
 8013c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8013c1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8013c1e:	eef0 0a47 	vmov.f32	s1, s14
 8013c22:	eeb0 0a67 	vmov.f32	s0, s15
 8013c26:	f7ff fe03 	bl	8013830 <nk_vec2>
 8013c2a:	eeb0 7a40 	vmov.f32	s14, s0
 8013c2e:	eef0 7a60 	vmov.f32	s15, s1
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	ed83 7a00 	vstr	s14, [r3]
 8013c38:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8013c3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8013c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8013c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c48:	ed97 7a04 	vldr	s14, [r7, #16]
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	f103 0408 	add.w	r4, r3, #8
 8013c52:	eef0 0a47 	vmov.f32	s1, s14
 8013c56:	eeb0 0a67 	vmov.f32	s0, s15
 8013c5a:	f7ff fde9 	bl	8013830 <nk_vec2>
 8013c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8013c62:	eef0 7a60 	vmov.f32	s15, s1
 8013c66:	ed84 7a00 	vstr	s14, [r4]
 8013c6a:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 8013c6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8013c72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013c76:	ee77 6a27 	vadd.f32	s13, s14, s15
 8013c7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8013c7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8013c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	f103 0410 	add.w	r4, r3, #16
 8013c8c:	eef0 0a67 	vmov.f32	s1, s15
 8013c90:	eeb0 0a66 	vmov.f32	s0, s13
 8013c94:	f7ff fdcc 	bl	8013830 <nk_vec2>
 8013c98:	eeb0 7a40 	vmov.f32	s14, s0
 8013c9c:	eef0 7a60 	vmov.f32	s15, s1
 8013ca0:	ed84 7a00 	vstr	s14, [r4]
 8013ca4:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8013ca8:	e04c      	b.n	8013d44 <nk_triangle_from_direction+0x370>
        result[0] = nk_vec2(r.x, r.y + h_half);
 8013caa:	edd7 6a03 	vldr	s13, [r7, #12]
 8013cae:	ed97 7a04 	vldr	s14, [r7, #16]
 8013cb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8013cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cba:	eef0 0a67 	vmov.f32	s1, s15
 8013cbe:	eeb0 0a66 	vmov.f32	s0, s13
 8013cc2:	f7ff fdb5 	bl	8013830 <nk_vec2>
 8013cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8013cca:	eef0 7a60 	vmov.f32	s15, s1
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	ed83 7a00 	vstr	s14, [r3]
 8013cd4:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8013cd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8013cdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8013ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ce4:	ed97 7a04 	vldr	s14, [r7, #16]
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f103 0408 	add.w	r4, r3, #8
 8013cee:	eef0 0a47 	vmov.f32	s1, s14
 8013cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8013cf6:	f7ff fd9b 	bl	8013830 <nk_vec2>
 8013cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8013cfe:	eef0 7a60 	vmov.f32	s15, s1
 8013d02:	ed84 7a00 	vstr	s14, [r4]
 8013d06:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 8013d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8013d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8013d12:	ee77 6a27 	vadd.f32	s13, s14, s15
 8013d16:	ed97 7a04 	vldr	s14, [r7, #16]
 8013d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8013d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	f103 0410 	add.w	r4, r3, #16
 8013d28:	eef0 0a67 	vmov.f32	s1, s15
 8013d2c:	eeb0 0a66 	vmov.f32	s0, s13
 8013d30:	f7ff fd7e 	bl	8013830 <nk_vec2>
 8013d34:	eeb0 7a40 	vmov.f32	s14, s0
 8013d38:	eef0 7a60 	vmov.f32	s15, s1
 8013d3c:	ed84 7a00 	vstr	s14, [r4]
 8013d40:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8013d44:	bf00      	nop
 8013d46:	372c      	adds	r7, #44	; 0x2c
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd90      	pop	{r4, r7, pc}
 8013d4c:	080218a8 	.word	0x080218a8
 8013d50:	080234ac 	.word	0x080234ac
 8013d54:	08021884 	.word	0x08021884

08013d58 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b084      	sub	sp, #16
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    if (ctx->freelist) {
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d66:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d00e      	beq.n	8013d8c <nk_create_page_element+0x34>
        /* unlink page element from free list */
        elem = ctx->freelist;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d74:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8013d78:	60fb      	str	r3, [r7, #12]
        ctx->freelist = elem->next;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8013d80:	687a      	ldr	r2, [r7, #4]
 8013d82:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8013d86:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
 8013d8a:	e036      	b.n	8013dfa <nk_create_page_element+0xa2>
    } else if (ctx->use_pool) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d92:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d015      	beq.n	8013dc6 <nk_create_page_element+0x6e>
        /* allocate page element from memory pool */
        elem = nk_pool_alloc(&ctx->pool);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8013da0:	3324      	adds	r3, #36	; 0x24
 8013da2:	4618      	mov	r0, r3
 8013da4:	f002 fa88 	bl	80162b8 <nk_pool_alloc>
 8013da8:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d105      	bne.n	8013dbc <nk_create_page_element+0x64>
 8013db0:	4b1b      	ldr	r3, [pc, #108]	; (8013e20 <nk_create_page_element+0xc8>)
 8013db2:	4a1c      	ldr	r2, [pc, #112]	; (8013e24 <nk_create_page_element+0xcc>)
 8013db4:	2114      	movs	r1, #20
 8013db6:	481c      	ldr	r0, [pc, #112]	; (8013e28 <nk_create_page_element+0xd0>)
 8013db8:	f009 fdda 	bl	801d970 <__assert_func>
        if (!elem) return 0;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d11b      	bne.n	8013dfa <nk_create_page_element+0xa2>
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	e027      	b.n	8013e16 <nk_create_page_element+0xbe>
    } else {
        /* allocate new page element from back of fixed size memory buffer */
        NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
 8013dcc:	300c      	adds	r0, #12
 8013dce:	4b17      	ldr	r3, [pc, #92]	; (8013e2c <nk_create_page_element+0xd4>)
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	4b17      	ldr	r3, [pc, #92]	; (8013e30 <nk_create_page_element+0xd8>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	f7f9 fecc 	bl	800db74 <nk_buffer_alloc>
 8013ddc:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d105      	bne.n	8013df0 <nk_create_page_element+0x98>
 8013de4:	4b0e      	ldr	r3, [pc, #56]	; (8013e20 <nk_create_page_element+0xc8>)
 8013de6:	4a0f      	ldr	r2, [pc, #60]	; (8013e24 <nk_create_page_element+0xcc>)
 8013de8:	211b      	movs	r1, #27
 8013dea:	480f      	ldr	r0, [pc, #60]	; (8013e28 <nk_create_page_element+0xd0>)
 8013dec:	f009 fdc0 	bl	801d970 <__assert_func>
        if (!elem) return 0;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d101      	bne.n	8013dfa <nk_create_page_element+0xa2>
 8013df6:	2300      	movs	r3, #0
 8013df8:	e00d      	b.n	8013e16 <nk_create_page_element+0xbe>
    }
    nk_zero_struct(*elem);
 8013dfa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f008 f8ce 	bl	801bfa0 <nk_zero>
    elem->next = 0;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2200      	movs	r2, #0
 8013e08:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    elem->prev = 0;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    return elem;
 8013e14:	68fb      	ldr	r3, [r7, #12]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	080218b0 	.word	0x080218b0
 8013e24:	080234c8 	.word	0x080234c8
 8013e28:	080218b8 	.word	0x080218b8
 8013e2c:	080234e0 	.word	0x080234e0
 8013e30:	080234e4 	.word	0x080234e4

08013e34 <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
    /* link table into freelist */
    if (!ctx->freelist) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e44:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d107      	bne.n	8013e5c <nk_link_page_element_into_freelist+0x28>
        ctx->freelist = elem;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e52:	461a      	mov	r2, r3
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
    } else {
        elem->next = ctx->freelist;
        ctx->freelist = elem;
    }
}
 8013e5a:	e00e      	b.n	8013e7a <nk_link_page_element_into_freelist+0x46>
        elem->next = ctx->freelist;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e62:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        ctx->freelist = elem;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e72:	461a      	mov	r2, r3
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
}
 8013e7a:	bf00      	nop
 8013e7c:	370c      	adds	r7, #12
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr

08013e86 <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b084      	sub	sp, #16
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
 8013e8e:	6039      	str	r1, [r7, #0]
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e96:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d004      	beq.n	8013ea8 <nk_free_page_element+0x22>
        nk_link_page_element_into_freelist(ctx, elem);
 8013e9e:	6839      	ldr	r1, [r7, #0]
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f7ff ffc7 	bl	8013e34 <nk_link_page_element_into_freelist>
        return;
 8013ea6:	e024      	b.n	8013ef2 <nk_free_page_element+0x6c>
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013eae:	60fb      	str	r3, [r7, #12]
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013eb6:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ec0:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8013ec4:	4413      	add	r3, r2
 8013ec6:	60bb      	str	r3, [r7, #8]
    if (elem_end == buffer_end)
 8013ec8:	68fa      	ldr	r2, [r7, #12]
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d10c      	bne.n	8013eea <nk_free_page_element+0x64>
        ctx->memory.size -= sizeof(struct nk_page_element);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ed6:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8013eda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013ee4:	f8c2 3ac4 	str.w	r3, [r2, #2756]	; 0xac4
 8013ee8:	e003      	b.n	8013ef2 <nk_free_page_element+0x6c>
    else nk_link_page_element_into_freelist(ctx, elem);}
 8013eea:	6839      	ldr	r1, [r7, #0]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f7ff ffa1 	bl	8013e34 <nk_link_page_element_into_freelist>
}
 8013ef2:	3710      	adds	r7, #16
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7ff ff29 	bl	8013d58 <nk_create_page_element>
 8013f06:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d101      	bne.n	8013f12 <nk_create_panel+0x1a>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	e005      	b.n	8013f1e <nk_create_panel+0x26>
    nk_zero_struct(*elem);
 8013f12:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8013f16:	68f8      	ldr	r0, [r7, #12]
 8013f18:	f008 f842 	bl	801bfa0 <nk_zero>
    return &elem->data.pan;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}

08013f26 <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 8013f26:	b580      	push	{r7, lr}
 8013f28:	b084      	sub	sp, #16
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	6078      	str	r0, [r7, #4]
 8013f2e:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 8013f38:	68b9      	ldr	r1, [r7, #8]
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f7ff ffa3 	bl	8013e86 <nk_free_page_element>
}
 8013f40:	bf00      	nop
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b085      	sub	sp, #20
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
    nk_bool active = 0;
 8013f52:	2300      	movs	r3, #0
 8013f54:	60fb      	str	r3, [r7, #12]
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f003 0318 	and.w	r3, r3, #24
 8013f5c:	60fb      	str	r3, [r7, #12]
    active = active || (flags & NK_WINDOW_TITLE);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d104      	bne.n	8013f6e <nk_panel_has_header+0x26>
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d001      	beq.n	8013f72 <nk_panel_has_header+0x2a>
 8013f6e:	2301      	movs	r3, #1
 8013f70:	e000      	b.n	8013f74 <nk_panel_has_header+0x2c>
 8013f72:	2300      	movs	r3, #0
 8013f74:	60fb      	str	r3, [r7, #12]
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d009      	beq.n	8013f90 <nk_panel_has_header+0x48>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d104      	bne.n	8013f90 <nk_panel_has_header+0x48>
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d001      	beq.n	8013f90 <nk_panel_has_header+0x48>
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	e000      	b.n	8013f92 <nk_panel_has_header+0x4a>
 8013f90:	2300      	movs	r3, #0
 8013f92:	60fb      	str	r3, [r7, #12]
    return active;
 8013f94:	68fb      	ldr	r3, [r7, #12]
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3714      	adds	r7, #20
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr
	...

08013fa4 <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b087      	sub	sp, #28
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	460b      	mov	r3, r1
 8013fae:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8013fb0:	7afb      	ldrb	r3, [r7, #11]
 8013fb2:	2b80      	cmp	r3, #128	; 0x80
 8013fb4:	f000 809a 	beq.w	80140ec <nk_panel_get_padding+0x148>
 8013fb8:	2b80      	cmp	r3, #128	; 0x80
 8013fba:	dc49      	bgt.n	8014050 <nk_panel_get_padding+0xac>
 8013fbc:	2b20      	cmp	r3, #32
 8013fbe:	dc45      	bgt.n	801404c <nk_panel_get_padding+0xa8>
 8013fc0:	2b02      	cmp	r3, #2
 8013fc2:	db45      	blt.n	8014050 <nk_panel_get_padding+0xac>
 8013fc4:	3b02      	subs	r3, #2
 8013fc6:	2b1e      	cmp	r3, #30
 8013fc8:	d842      	bhi.n	8014050 <nk_panel_get_padding+0xac>
 8013fca:	a201      	add	r2, pc, #4	; (adr r2, 8013fd0 <nk_panel_get_padding+0x2c>)
 8013fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd0:	0801406b 	.word	0x0801406b
 8013fd4:	08014051 	.word	0x08014051
 8013fd8:	08014085 	.word	0x08014085
 8013fdc:	08014051 	.word	0x08014051
 8013fe0:	08014051 	.word	0x08014051
 8013fe4:	08014051 	.word	0x08014051
 8013fe8:	08014051 	.word	0x08014051
 8013fec:	08014051 	.word	0x08014051
 8013ff0:	08014051 	.word	0x08014051
 8013ff4:	08014051 	.word	0x08014051
 8013ff8:	08014051 	.word	0x08014051
 8013ffc:	08014051 	.word	0x08014051
 8014000:	08014051 	.word	0x08014051
 8014004:	08014051 	.word	0x08014051
 8014008:	0801409f 	.word	0x0801409f
 801400c:	08014051 	.word	0x08014051
 8014010:	08014051 	.word	0x08014051
 8014014:	08014051 	.word	0x08014051
 8014018:	08014051 	.word	0x08014051
 801401c:	08014051 	.word	0x08014051
 8014020:	08014051 	.word	0x08014051
 8014024:	08014051 	.word	0x08014051
 8014028:	08014051 	.word	0x08014051
 801402c:	08014051 	.word	0x08014051
 8014030:	08014051 	.word	0x08014051
 8014034:	08014051 	.word	0x08014051
 8014038:	08014051 	.word	0x08014051
 801403c:	08014051 	.word	0x08014051
 8014040:	08014051 	.word	0x08014051
 8014044:	08014051 	.word	0x08014051
 8014048:	080140b9 	.word	0x080140b9
 801404c:	2b40      	cmp	r3, #64	; 0x40
 801404e:	d040      	beq.n	80140d2 <nk_panel_get_padding+0x12e>
    default:
    case NK_PANEL_WINDOW: return style->window.padding;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014056:	461a      	mov	r2, r3
 8014058:	f107 0310 	add.w	r3, r7, #16
 801405c:	f602 02ec 	addw	r2, r2, #2284	; 0x8ec
 8014060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014064:	e883 0003 	stmia.w	r3, {r0, r1}
 8014068:	e04c      	b.n	8014104 <nk_panel_get_padding+0x160>
    case NK_PANEL_GROUP: return style->window.group_padding;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014070:	461a      	mov	r2, r3
 8014072:	f107 0310 	add.w	r3, r7, #16
 8014076:	f602 02f4 	addw	r2, r2, #2292	; 0x8f4
 801407a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801407e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014082:	e03f      	b.n	8014104 <nk_panel_get_padding+0x160>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801408a:	461a      	mov	r2, r3
 801408c:	f107 0310 	add.w	r3, r7, #16
 8014090:	f602 02fc 	addw	r2, r2, #2300	; 0x8fc
 8014094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014098:	e883 0003 	stmia.w	r3, {r0, r1}
 801409c:	e032      	b.n	8014104 <nk_panel_get_padding+0x160>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140a4:	461a      	mov	r2, r3
 80140a6:	f107 0310 	add.w	r3, r7, #16
 80140aa:	f602 120c 	addw	r2, r2, #2316	; 0x90c
 80140ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80140b6:	e025      	b.n	8014104 <nk_panel_get_padding+0x160>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140be:	461a      	mov	r2, r3
 80140c0:	f107 0310 	add.w	r3, r7, #16
 80140c4:	f602 1204 	addw	r2, r2, #2308	; 0x904
 80140c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80140d0:	e018      	b.n	8014104 <nk_panel_get_padding+0x160>
    case NK_PANEL_MENU: return style->window.menu_padding;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140d8:	461a      	mov	r2, r3
 80140da:	f107 0310 	add.w	r3, r7, #16
 80140de:	f602 1214 	addw	r2, r2, #2324	; 0x914
 80140e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80140ea:	e00b      	b.n	8014104 <nk_panel_get_padding+0x160>
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140f2:	461a      	mov	r2, r3
 80140f4:	f107 0310 	add.w	r3, r7, #16
 80140f8:	f602 1214 	addw	r2, r2, #2324	; 0x914
 80140fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014100:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8014104:	693a      	ldr	r2, [r7, #16]
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	ee07 2a10 	vmov	s14, r2
 801410c:	ee07 3a90 	vmov	s15, r3
 8014110:	eeb0 0a47 	vmov.f32	s0, s14
 8014114:	eef0 0a67 	vmov.f32	s1, s15
 8014118:	371c      	adds	r7, #28
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr
 8014122:	bf00      	nop

08014124 <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
 8014124:	b480      	push	{r7}
 8014126:	b085      	sub	sp, #20
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	4613      	mov	r3, r2
 8014130:	71fb      	strb	r3, [r7, #7]
    if (flags & NK_WINDOW_BORDER) {
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	f003 0301 	and.w	r3, r3, #1
 8014138:	2b00      	cmp	r3, #0
 801413a:	f000 8080 	beq.w	801423e <nk_panel_get_border+0x11a>
        switch (type) {
 801413e:	79fb      	ldrb	r3, [r7, #7]
 8014140:	2b80      	cmp	r3, #128	; 0x80
 8014142:	d075      	beq.n	8014230 <nk_panel_get_border+0x10c>
 8014144:	2b80      	cmp	r3, #128	; 0x80
 8014146:	dc49      	bgt.n	80141dc <nk_panel_get_border+0xb8>
 8014148:	2b20      	cmp	r3, #32
 801414a:	dc45      	bgt.n	80141d8 <nk_panel_get_border+0xb4>
 801414c:	2b02      	cmp	r3, #2
 801414e:	db45      	blt.n	80141dc <nk_panel_get_border+0xb8>
 8014150:	3b02      	subs	r3, #2
 8014152:	2b1e      	cmp	r3, #30
 8014154:	d842      	bhi.n	80141dc <nk_panel_get_border+0xb8>
 8014156:	a201      	add	r2, pc, #4	; (adr r2, 801415c <nk_panel_get_border+0x38>)
 8014158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801415c:	080141eb 	.word	0x080141eb
 8014160:	080141dd 	.word	0x080141dd
 8014164:	080141f9 	.word	0x080141f9
 8014168:	080141dd 	.word	0x080141dd
 801416c:	080141dd 	.word	0x080141dd
 8014170:	080141dd 	.word	0x080141dd
 8014174:	080141dd 	.word	0x080141dd
 8014178:	080141dd 	.word	0x080141dd
 801417c:	080141dd 	.word	0x080141dd
 8014180:	080141dd 	.word	0x080141dd
 8014184:	080141dd 	.word	0x080141dd
 8014188:	080141dd 	.word	0x080141dd
 801418c:	080141dd 	.word	0x080141dd
 8014190:	080141dd 	.word	0x080141dd
 8014194:	08014207 	.word	0x08014207
 8014198:	080141dd 	.word	0x080141dd
 801419c:	080141dd 	.word	0x080141dd
 80141a0:	080141dd 	.word	0x080141dd
 80141a4:	080141dd 	.word	0x080141dd
 80141a8:	080141dd 	.word	0x080141dd
 80141ac:	080141dd 	.word	0x080141dd
 80141b0:	080141dd 	.word	0x080141dd
 80141b4:	080141dd 	.word	0x080141dd
 80141b8:	080141dd 	.word	0x080141dd
 80141bc:	080141dd 	.word	0x080141dd
 80141c0:	080141dd 	.word	0x080141dd
 80141c4:	080141dd 	.word	0x080141dd
 80141c8:	080141dd 	.word	0x080141dd
 80141cc:	080141dd 	.word	0x080141dd
 80141d0:	080141dd 	.word	0x080141dd
 80141d4:	08014215 	.word	0x08014215
 80141d8:	2b40      	cmp	r3, #64	; 0x40
 80141da:	d022      	beq.n	8014222 <nk_panel_get_border+0xfe>
        default:
        case NK_PANEL_WINDOW: return style->window.border;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141e2:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	e02b      	b.n	8014242 <nk_panel_get_border+0x11e>
        case NK_PANEL_GROUP: return style->window.group_border;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141f0:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	e024      	b.n	8014242 <nk_panel_get_border+0x11e>
        case NK_PANEL_POPUP: return style->window.popup_border;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141fe:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	e01d      	b.n	8014242 <nk_panel_get_border+0x11e>
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801420c:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	e016      	b.n	8014242 <nk_panel_get_border+0x11e>
        case NK_PANEL_COMBO: return style->window.combo_border;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801421a:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	e00f      	b.n	8014242 <nk_panel_get_border+0x11e>
        case NK_PANEL_MENU: return style->window.menu_border;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014228:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	e008      	b.n	8014242 <nk_panel_get_border+0x11e>
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014236:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	e001      	b.n	8014242 <nk_panel_get_border+0x11e>
    }} else return 0;
 801423e:	f04f 0300 	mov.w	r3, #0
}
 8014242:	ee07 3a90 	vmov	s15, r3
 8014246:	eeb0 0a67 	vmov.f32	s0, s15
 801424a:	3714      	adds	r7, #20
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr

08014254 <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 8014254:	b480      	push	{r7}
 8014256:	b085      	sub	sp, #20
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	460b      	mov	r3, r1
 801425e:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 8014260:	78fb      	ldrb	r3, [r7, #3]
 8014262:	2b80      	cmp	r3, #128	; 0x80
 8014264:	d076      	beq.n	8014354 <nk_panel_get_border_color+0x100>
 8014266:	2b80      	cmp	r3, #128	; 0x80
 8014268:	dc4a      	bgt.n	8014300 <nk_panel_get_border_color+0xac>
 801426a:	2b20      	cmp	r3, #32
 801426c:	dc46      	bgt.n	80142fc <nk_panel_get_border_color+0xa8>
 801426e:	2b02      	cmp	r3, #2
 8014270:	db46      	blt.n	8014300 <nk_panel_get_border_color+0xac>
 8014272:	3b02      	subs	r3, #2
 8014274:	2b1e      	cmp	r3, #30
 8014276:	d843      	bhi.n	8014300 <nk_panel_get_border_color+0xac>
 8014278:	a201      	add	r2, pc, #4	; (adr r2, 8014280 <nk_panel_get_border_color+0x2c>)
 801427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801427e:	bf00      	nop
 8014280:	0801430f 	.word	0x0801430f
 8014284:	08014301 	.word	0x08014301
 8014288:	0801431d 	.word	0x0801431d
 801428c:	08014301 	.word	0x08014301
 8014290:	08014301 	.word	0x08014301
 8014294:	08014301 	.word	0x08014301
 8014298:	08014301 	.word	0x08014301
 801429c:	08014301 	.word	0x08014301
 80142a0:	08014301 	.word	0x08014301
 80142a4:	08014301 	.word	0x08014301
 80142a8:	08014301 	.word	0x08014301
 80142ac:	08014301 	.word	0x08014301
 80142b0:	08014301 	.word	0x08014301
 80142b4:	08014301 	.word	0x08014301
 80142b8:	0801432b 	.word	0x0801432b
 80142bc:	08014301 	.word	0x08014301
 80142c0:	08014301 	.word	0x08014301
 80142c4:	08014301 	.word	0x08014301
 80142c8:	08014301 	.word	0x08014301
 80142cc:	08014301 	.word	0x08014301
 80142d0:	08014301 	.word	0x08014301
 80142d4:	08014301 	.word	0x08014301
 80142d8:	08014301 	.word	0x08014301
 80142dc:	08014301 	.word	0x08014301
 80142e0:	08014301 	.word	0x08014301
 80142e4:	08014301 	.word	0x08014301
 80142e8:	08014301 	.word	0x08014301
 80142ec:	08014301 	.word	0x08014301
 80142f0:	08014301 	.word	0x08014301
 80142f4:	08014301 	.word	0x08014301
 80142f8:	08014339 	.word	0x08014339
 80142fc:	2b40      	cmp	r3, #64	; 0x40
 80142fe:	d022      	beq.n	8014346 <nk_panel_get_border_color+0xf2>
    default:
    case NK_PANEL_WINDOW: return style->window.border_color;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014306:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	e028      	b.n	8014360 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_GROUP: return style->window.group_border_color;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014314:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8014318:	60fb      	str	r3, [r7, #12]
 801431a:	e021      	b.n	8014360 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014322:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 8014326:	60fb      	str	r3, [r7, #12]
 8014328:	e01a      	b.n	8014360 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014330:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8014334:	60fb      	str	r3, [r7, #12]
 8014336:	e013      	b.n	8014360 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801433e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8014342:	60fb      	str	r3, [r7, #12]
 8014344:	e00c      	b.n	8014360 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801434c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 8014350:	60fb      	str	r3, [r7, #12]
 8014352:	e005      	b.n	8014360 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801435a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 801435e:	60fb      	str	r3, [r7, #12]
}
 8014360:	2300      	movs	r3, #0
 8014362:	7b3a      	ldrb	r2, [r7, #12]
 8014364:	f362 0307 	bfi	r3, r2, #0, #8
 8014368:	7b7a      	ldrb	r2, [r7, #13]
 801436a:	f362 230f 	bfi	r3, r2, #8, #8
 801436e:	7bba      	ldrb	r2, [r7, #14]
 8014370:	f362 4317 	bfi	r3, r2, #16, #8
 8014374:	7bfa      	ldrb	r2, [r7, #15]
 8014376:	f362 631f 	bfi	r3, r2, #24, #8
 801437a:	4618      	mov	r0, r3
 801437c:	3714      	adds	r7, #20
 801437e:	46bd      	mov	sp, r7
 8014380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014384:	4770      	bx	lr
 8014386:	bf00      	nop

08014388 <nk_panel_is_sub>:
NK_LIB nk_bool
nk_panel_is_sub(enum nk_panel_type type)
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	4603      	mov	r3, r0
 8014390:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_SUB)?1:0;
 8014392:	79fb      	ldrb	r3, [r7, #7]
 8014394:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
 8014398:	2b00      	cmp	r3, #0
 801439a:	bf14      	ite	ne
 801439c:	2301      	movne	r3, #1
 801439e:	2300      	moveq	r3, #0
 80143a0:	b2db      	uxtb	r3, r3
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	370c      	adds	r7, #12
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <nk_panel_is_nonblock>:
NK_LIB nk_bool
nk_panel_is_nonblock(enum nk_panel_type type)
{
 80143ae:	b480      	push	{r7}
 80143b0:	b083      	sub	sp, #12
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	4603      	mov	r3, r0
 80143b6:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
 80143b8:	79fb      	ldrb	r3, [r7, #7]
 80143ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	bf14      	ite	ne
 80143c2:	2301      	movne	r3, #1
 80143c4:	2300      	moveq	r3, #0
 80143c6:	b2db      	uxtb	r3, r3
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <nk_panel_begin>:
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 80143d4:	b590      	push	{r4, r7, lr}
 80143d6:	b0b7      	sub	sp, #220	; 0xdc
 80143d8:	af04      	add	r7, sp, #16
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	60b9      	str	r1, [r7, #8]
 80143de:	4613      	mov	r3, r2
 80143e0:	71fb      	strb	r3, [r7, #7]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d105      	bne.n	80143f4 <nk_panel_begin+0x20>
 80143e8:	4b7e      	ldr	r3, [pc, #504]	; (80145e4 <nk_panel_begin+0x210>)
 80143ea:	4a7f      	ldr	r2, [pc, #508]	; (80145e8 <nk_panel_begin+0x214>)
 80143ec:	2163      	movs	r1, #99	; 0x63
 80143ee:	487f      	ldr	r0, [pc, #508]	; (80145ec <nk_panel_begin+0x218>)
 80143f0:	f009 fabe 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80143fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d105      	bne.n	801440e <nk_panel_begin+0x3a>
 8014402:	4b7b      	ldr	r3, [pc, #492]	; (80145f0 <nk_panel_begin+0x21c>)
 8014404:	4a78      	ldr	r2, [pc, #480]	; (80145e8 <nk_panel_begin+0x214>)
 8014406:	2164      	movs	r1, #100	; 0x64
 8014408:	4878      	ldr	r0, [pc, #480]	; (80145ec <nk_panel_begin+0x218>)
 801440a:	f009 fab1 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014414:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801441c:	2b00      	cmp	r3, #0
 801441e:	d105      	bne.n	801442c <nk_panel_begin+0x58>
 8014420:	4b74      	ldr	r3, [pc, #464]	; (80145f4 <nk_panel_begin+0x220>)
 8014422:	4a71      	ldr	r2, [pc, #452]	; (80145e8 <nk_panel_begin+0x214>)
 8014424:	2165      	movs	r1, #101	; 0x65
 8014426:	4871      	ldr	r0, [pc, #452]	; (80145ec <nk_panel_begin+0x218>)
 8014428:	f009 faa2 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d00f      	beq.n	8014452 <nk_panel_begin+0x7e>
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014438:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801443c:	2b00      	cmp	r3, #0
 801443e:	d008      	beq.n	8014452 <nk_panel_begin+0x7e>
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014446:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801444a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801444e:	2b00      	cmp	r3, #0
 8014450:	d102      	bne.n	8014458 <nk_panel_begin+0x84>
 8014452:	2300      	movs	r3, #0
 8014454:	f000 bef7 	b.w	8015246 <nk_panel_begin+0xe72>
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801445e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8014462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014466:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801446a:	4618      	mov	r0, r3
 801446c:	f007 fd98 	bl	801bfa0 <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014476:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801447a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801447c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014480:	2b00      	cmp	r3, #0
 8014482:	d109      	bne.n	8014498 <nk_panel_begin+0xc4>
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801448a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014494:	2b00      	cmp	r3, #0
 8014496:	d017      	beq.n	80144c8 <nk_panel_begin+0xf4>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801449e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80144a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144a6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80144aa:	4618      	mov	r0, r3
 80144ac:	f007 fd78 	bl	801bfa0 <nk_zero>
        ctx->current->layout->type = panel_type;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80144b6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80144ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144be:	79fa      	ldrb	r2, [r7, #7]
 80144c0:	701a      	strb	r2, [r3, #0]
        return 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	f000 bebf 	b.w	8015246 <nk_panel_begin+0xe72>
    }
    /* pull state into local stack */
    style = &ctx->style;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80144ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    font = style->font;
 80144d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    win = ctx->current;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80144e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80144e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    layout = win->layout;
 80144ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80144ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    out = &win->buffer;
 80144f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80144fa:	3364      	adds	r3, #100	; 0x64
 80144fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 8014500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801450a:	2b00      	cmp	r3, #0
 801450c:	d101      	bne.n	8014512 <nk_panel_begin+0x13e>
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	e000      	b.n	8014514 <nk_panel_begin+0x140>
 8014512:	2300      	movs	r3, #0
 8014514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 8014518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014520:	461a      	mov	r2, r3
 8014522:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014526:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 801452a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801452e:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, panel_type);
 8014532:	79fb      	ldrb	r3, [r7, #7]
 8014534:	4619      	mov	r1, r3
 8014536:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801453a:	f7ff fd33 	bl	8013fa4 <nk_panel_get_padding>
 801453e:	eeb0 7a40 	vmov.f32	s14, s0
 8014542:	eef0 7a60 	vmov.f32	s15, s1
 8014546:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 801454a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 801454e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014554:	f003 0302 	and.w	r3, r3, #2
 8014558:	2b00      	cmp	r3, #0
 801455a:	f000 80bf 	beq.w	80146dc <nk_panel_begin+0x308>
 801455e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014568:	2b00      	cmp	r3, #0
 801456a:	f040 80b7 	bne.w	80146dc <nk_panel_begin+0x308>
        unsigned int left_mouse_clicked;
        int left_mouse_click_in_cursor;

        /* calculate draggable window space */
        struct nk_rect header;
        header.x = win->bounds.x;
 801456e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014574:	67bb      	str	r3, [r7, #120]	; 0x78
        header.y = win->bounds.y;
 8014576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801457c:	67fb      	str	r3, [r7, #124]	; 0x7c
        header.w = win->bounds.w;
 801457e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (nk_panel_has_header(win->flags, title)) {
 8014588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801458c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801458e:	68b9      	ldr	r1, [r7, #8]
 8014590:	4618      	mov	r0, r3
 8014592:	f7ff fcd9 	bl	8013f48 <nk_panel_has_header>
 8014596:	4603      	mov	r3, r0
 8014598:	2b00      	cmp	r3, #0
 801459a:	d02d      	beq.n	80145f8 <nk_panel_begin+0x224>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 801459c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80145a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80145a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80145a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145ac:	f603 0344 	addw	r3, r3, #2116	; 0x844
 80145b0:	edd3 7a00 	vldr	s15, [r3]
 80145b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80145b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145bc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            header.h += 2.0f * style->window.header.label_padding.y;
 80145c0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80145c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80145c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145cc:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80145d0:	edd3 7a00 	vldr	s15, [r3]
 80145d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80145d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145dc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 80145e0:	e00e      	b.n	8014600 <nk_panel_begin+0x22c>
 80145e2:	bf00      	nop
 80145e4:	080218dc 	.word	0x080218dc
 80145e8:	080234fc 	.word	0x080234fc
 80145ec:	080218e0 	.word	0x080218e0
 80145f0:	080218fc 	.word	0x080218fc
 80145f4:	0802190c 	.word	0x0802190c
        } else header.h = panel_padding.y;
 80145f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80145fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* window movement by dragging */
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8014600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014604:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8014608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 801460c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014610:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8014614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8014618:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 801461c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8014620:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014624:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014628:	2201      	movs	r2, #1
 801462a:	eeb0 0a46 	vmov.f32	s0, s12
 801462e:	eef0 0a66 	vmov.f32	s1, s13
 8014632:	eeb0 1a47 	vmov.f32	s2, s14
 8014636:	eef0 1a67 	vmov.f32	s3, s15
 801463a:	2100      	movs	r1, #0
 801463c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014640:	f7fd fee2 	bl	8012408 <nk_input_has_mouse_click_down_in_rect>
 8014644:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            NK_BUTTON_LEFT, header, nk_true);
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8014648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801464c:	2b00      	cmp	r3, #0
 801464e:	d045      	beq.n	80146dc <nk_panel_begin+0x308>
 8014650:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014654:	2b00      	cmp	r3, #0
 8014656:	d041      	beq.n	80146dc <nk_panel_begin+0x308>
 8014658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801465c:	2b00      	cmp	r3, #0
 801465e:	d13d      	bne.n	80146dc <nk_panel_begin+0x308>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 8014660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014664:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8014668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801466c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8014670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014678:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 801467c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014680:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8014684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014688:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801468c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014694:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 8014698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801469c:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 80146a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80146a4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80146a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80146b0:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 80146b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80146b8:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 80146bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80146c0:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80146c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80146cc:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        }
    }

    /* setup panel */
    layout->type = panel_type;
 80146dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146e0:	79fa      	ldrb	r2, [r7, #7]
 80146e2:	701a      	strb	r2, [r3, #0]
    layout->flags = win->flags;
 80146e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80146e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80146ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80146ee:	605a      	str	r2, [r3, #4]
    layout->bounds = win->bounds;
 80146f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80146f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80146f8:	f102 0408 	add.w	r4, r2, #8
 80146fc:	334c      	adds	r3, #76	; 0x4c
 80146fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 8014704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014708:	ed93 7a02 	vldr	s14, [r3, #8]
 801470c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014718:	edc3 7a02 	vstr	s15, [r3, #8]
    layout->bounds.w -= 2*panel_padding.x;
 801471c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014720:	ed93 7a04 	vldr	s14, [r3, #16]
 8014724:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014728:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801472c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014734:	edc3 7a04 	vstr	s15, [r3, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 8014738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801473e:	f003 0301 	and.w	r3, r3, #1
 8014742:	2b00      	cmp	r3, #0
 8014744:	d03b      	beq.n	80147be <nk_panel_begin+0x3ea>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 8014746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801474a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801474c:	79fa      	ldrb	r2, [r7, #7]
 801474e:	4619      	mov	r1, r3
 8014750:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8014754:	f7ff fce6 	bl	8014124 <nk_panel_get_border>
 8014758:	eef0 7a40 	vmov.f32	s15, s0
 801475c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014760:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 8014764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014768:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 801476c:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8014770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014774:	ed93 6a02 	vldr	s12, [r3, #8]
 8014778:	edd3 6a03 	vldr	s13, [r3, #12]
 801477c:	ed93 7a04 	vldr	s14, [r3, #16]
 8014780:	edd3 7a05 	vldr	s15, [r3, #20]
 8014784:	eeb0 2a65 	vmov.f32	s4, s11
 8014788:	eeb0 0a46 	vmov.f32	s0, s12
 801478c:	eef0 0a66 	vmov.f32	s1, s13
 8014790:	eeb0 1a47 	vmov.f32	s2, s14
 8014794:	eef0 1a67 	vmov.f32	s3, s15
 8014798:	f7fe ffca 	bl	8013730 <nk_shrink_rect>
 801479c:	eeb0 6a40 	vmov.f32	s12, s0
 80147a0:	eef0 6a60 	vmov.f32	s13, s1
 80147a4:	eeb0 7a41 	vmov.f32	s14, s2
 80147a8:	eef0 7a61 	vmov.f32	s15, s3
 80147ac:	ed84 6a02 	vstr	s12, [r4, #8]
 80147b0:	edc4 6a03 	vstr	s13, [r4, #12]
 80147b4:	ed84 7a04 	vstr	s14, [r4, #16]
 80147b8:	edc4 7a05 	vstr	s15, [r4, #20]
 80147bc:	e004      	b.n	80147c8 <nk_panel_begin+0x3f4>
    } else layout->border = 0;
 80147be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147c2:	f04f 0200 	mov.w	r2, #0
 80147c6:	635a      	str	r2, [r3, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 80147c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147cc:	68da      	ldr	r2, [r3, #12]
 80147ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147d2:	625a      	str	r2, [r3, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 80147d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147d8:	689a      	ldr	r2, [r3, #8]
 80147da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147de:	621a      	str	r2, [r3, #32]
    layout->max_x = 0;
 80147e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147e4:	f04f 0200 	mov.w	r2, #0
 80147e8:	629a      	str	r2, [r3, #40]	; 0x28
    layout->header_height = 0;
 80147ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147ee:	f04f 0200 	mov.w	r2, #0
 80147f2:	631a      	str	r2, [r3, #48]	; 0x30
    layout->footer_height = 0;
 80147f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80147f8:	f04f 0200 	mov.w	r2, #0
 80147fc:	62da      	str	r2, [r3, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 80147fe:	68f8      	ldr	r0, [r7, #12]
 8014800:	f7fd ffac 	bl	801275c <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 8014804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014808:	2200      	movs	r2, #0
 801480a:	669a      	str	r2, [r3, #104]	; 0x68
    layout->row.columns = 0;
 801480c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014810:	2200      	movs	r2, #0
 8014812:	675a      	str	r2, [r3, #116]	; 0x74
    layout->row.ratio = 0;
 8014814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014818:	2200      	movs	r2, #0
 801481a:	679a      	str	r2, [r3, #120]	; 0x78
    layout->row.item_width = 0;
 801481c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014820:	f04f 0200 	mov.w	r2, #0
 8014824:	67da      	str	r2, [r3, #124]	; 0x7c
    layout->row.tree_depth = 0;
 8014826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801482a:	2200      	movs	r2, #0
 801482c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 8014830:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014838:	66da      	str	r2, [r3, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 801483a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801483e:	2201      	movs	r2, #1
 8014840:	639a      	str	r2, [r3, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 8014842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014848:	f003 0320 	and.w	r3, r3, #32
 801484c:	2b00      	cmp	r3, #0
 801484e:	d10b      	bne.n	8014868 <nk_panel_begin+0x494>
        layout->bounds.w -= scrollbar_size.x;
 8014850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014854:	ed93 7a04 	vldr	s14, [r3, #16]
 8014858:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801485c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014864:	edc3 7a04 	vstr	s15, [r3, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 8014868:	79fb      	ldrb	r3, [r7, #7]
 801486a:	4618      	mov	r0, r3
 801486c:	f7ff fd9f 	bl	80143ae <nk_panel_is_nonblock>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d125      	bne.n	80148c2 <nk_panel_begin+0x4ee>
        layout->footer_height = 0;
 8014876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801487a:	f04f 0200 	mov.w	r2, #0
 801487e:	62da      	str	r2, [r3, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 8014880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014886:	f003 0320 	and.w	r3, r3, #32
 801488a:	2b00      	cmp	r3, #0
 801488c:	d006      	beq.n	801489c <nk_panel_begin+0x4c8>
 801488e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014894:	f003 0304 	and.w	r3, r3, #4
 8014898:	2b00      	cmp	r3, #0
 801489a:	d004      	beq.n	80148a6 <nk_panel_begin+0x4d2>
            layout->footer_height = scrollbar_size.y;
 801489c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80148a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80148a4:	62da      	str	r2, [r3, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 80148a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80148aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80148ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80148b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80148b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80148be:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 80148c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148c8:	68b9      	ldr	r1, [r7, #8]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7ff fb3c 	bl	8013f48 <nk_panel_has_header>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f000 83bc 	beq.w	8015050 <nk_panel_begin+0xc7c>
    {
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;
 80148d8:	2300      	movs	r3, #0
 80148da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /* calculate header bounds */
        header.x = win->bounds.x;
 80148de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148e4:	65bb      	str	r3, [r7, #88]	; 0x58
        header.y = win->bounds.y;
 80148e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148ec:	65fb      	str	r3, [r7, #92]	; 0x5c
        header.w = win->bounds.w;
 80148ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148f4:	663b      	str	r3, [r7, #96]	; 0x60
        header.h = font->height + 2.0f * style->window.header.padding.y;
 80148f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80148fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80148fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014906:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801490a:	edd3 7a00 	vldr	s15, [r3]
 801490e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014916:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        header.h += (2.0f * style->window.header.label_padding.y);
 801491a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801491e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014926:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801492a:	edd3 7a00 	vldr	s15, [r3]
 801492e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014936:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        /* shrink panel by header */
        layout->header_height = header.h;
 801493a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801493c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014940:	631a      	str	r2, [r3, #48]	; 0x30
        layout->bounds.y += header.h;
 8014942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014946:	ed93 7a03 	vldr	s14, [r3, #12]
 801494a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801494e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014956:	edc3 7a03 	vstr	s15, [r3, #12]
        layout->bounds.h -= header.h;
 801495a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801495e:	ed93 7a05 	vldr	s14, [r3, #20]
 8014962:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8014966:	ee77 7a67 	vsub.f32	s15, s14, s15
 801496a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801496e:	edc3 7a05 	vstr	s15, [r3, #20]
        layout->at_y += header.h;
 8014972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014976:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801497a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801497e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014986:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014990:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8014994:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014998:	429a      	cmp	r2, r3
 801499a:	d112      	bne.n	80149c2 <nk_panel_begin+0x5ee>
            background = &style->window.header.active;
 801499c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80149a0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80149a4:	3304      	adds	r3, #4
 80149a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_active;
 80149aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80149ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149b2:	461a      	mov	r2, r3
 80149b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80149b8:	f602 023b 	addw	r2, r2, #2107	; 0x83b
 80149bc:	6810      	ldr	r0, [r2, #0]
 80149be:	6018      	str	r0, [r3, #0]
 80149c0:	e03b      	b.n	8014a3a <nk_panel_begin+0x666>
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80149c8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80149cc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80149d0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80149d4:	eeb0 0a46 	vmov.f32	s0, s12
 80149d8:	eef0 0a66 	vmov.f32	s1, s13
 80149dc:	eeb0 1a47 	vmov.f32	s2, s14
 80149e0:	eef0 1a67 	vmov.f32	s3, s15
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7fd fd56 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d012      	beq.n	8014a16 <nk_panel_begin+0x642>
            background = &style->window.header.hover;
 80149f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80149f4:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 80149f8:	3308      	adds	r3, #8
 80149fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_hover;
 80149fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a06:	461a      	mov	r2, r3
 8014a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014a0c:	f602 0237 	addw	r2, r2, #2103	; 0x837
 8014a10:	6810      	ldr	r0, [r2, #0]
 8014a12:	6018      	str	r0, [r3, #0]
 8014a14:	e011      	b.n	8014a3a <nk_panel_begin+0x666>
        } else {
            background = &style->window.header.normal;
 8014a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014a1a:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 8014a1e:	330c      	adds	r3, #12
 8014a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_normal;
 8014a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014a32:	f602 0233 	addw	r2, r2, #2099	; 0x833
 8014a36:	6810      	ldr	r0, [r2, #0]
 8014a38:	6018      	str	r0, [r3, #0]
        }

        /* draw header background */
        header.h += 1.0f;
 8014a3a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8014a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a46:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        switch(background->type) {
 8014a4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	2b02      	cmp	r3, #2
 8014a52:	d02a      	beq.n	8014aaa <nk_panel_begin+0x6d6>
 8014a54:	2b02      	cmp	r3, #2
 8014a56:	dc6b      	bgt.n	8014b30 <nk_panel_begin+0x75c>
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d04b      	beq.n	8014af4 <nk_panel_begin+0x720>
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d167      	bne.n	8014b30 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_IMAGE:
                text.background = nk_rgba(0,0,0,0);
 8014a60:	2300      	movs	r3, #0
 8014a62:	2200      	movs	r2, #0
 8014a64:	2100      	movs	r1, #0
 8014a66:	2000      	movs	r0, #0
 8014a68:	f7fa f9c6 	bl	800edf8 <nk_rgba>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 8014a70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014a74:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8014a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	4ad9      	ldr	r2, [pc, #868]	; (8014de4 <nk_panel_begin+0xa10>)
 8014a80:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8014a84:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8014a88:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014a8c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8014a90:	6812      	ldr	r2, [r2, #0]
 8014a92:	4619      	mov	r1, r3
 8014a94:	eeb0 0a46 	vmov.f32	s0, s12
 8014a98:	eef0 0a66 	vmov.f32	s1, s13
 8014a9c:	eeb0 1a47 	vmov.f32	s2, s14
 8014aa0:	eef0 1a67 	vmov.f32	s3, s15
 8014aa4:	f7fc fc10 	bl	80112c8 <nk_draw_image>
                break;
 8014aa8:	e042      	b.n	8014b30 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_NINE_SLICE:
                text.background = nk_rgba(0, 0, 0, 0);
 8014aaa:	2300      	movs	r3, #0
 8014aac:	2200      	movs	r2, #0
 8014aae:	2100      	movs	r1, #0
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	f7fa f9a1 	bl	800edf8 <nk_rgba>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 8014aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014abe:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8014ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014ac6:	3304      	adds	r3, #4
 8014ac8:	4ac6      	ldr	r2, [pc, #792]	; (8014de4 <nk_panel_begin+0xa10>)
 8014aca:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8014ace:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8014ad2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014ad6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8014ada:	6812      	ldr	r2, [r2, #0]
 8014adc:	4619      	mov	r1, r3
 8014ade:	eeb0 0a46 	vmov.f32	s0, s12
 8014ae2:	eef0 0a66 	vmov.f32	s1, s13
 8014ae6:	eeb0 1a47 	vmov.f32	s2, s14
 8014aea:	eef0 1a67 	vmov.f32	s3, s15
 8014aee:	f7fc fcdd 	bl	80114ac <nk_draw_nine_slice>
                break;
 8014af2:	e01d      	b.n	8014b30 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_COLOR:
                text.background = background->data.color;
 8014af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	673b      	str	r3, [r7, #112]	; 0x70
                nk_fill_rect(out, header, 0, background->data.color);
 8014afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014b00:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8014b04:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8014b08:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014b0c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8014b10:	6859      	ldr	r1, [r3, #4]
 8014b12:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8014de8 <nk_panel_begin+0xa14>
 8014b16:	eeb0 0a46 	vmov.f32	s0, s12
 8014b1a:	eef0 0a66 	vmov.f32	s1, s13
 8014b1e:	eeb0 1a47 	vmov.f32	s2, s14
 8014b22:	eef0 1a67 	vmov.f32	s3, s15
 8014b26:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8014b2a:	f7fc f873 	bl	8010c14 <nk_fill_rect>
                break;
 8014b2e:	bf00      	nop
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 8014b30:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b3c:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8014b40:	edd3 7a00 	vldr	s15, [r3]
 8014b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b48:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 8014b4c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8014b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b58:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8014b5c:	edd3 7a00 	vldr	s15, [r3]
 8014b60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b68:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        button.w = button.h;
 8014b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b6e:	653b      	str	r3, [r7, #80]	; 0x50
        if (win->flags & NK_WINDOW_CLOSABLE) {
 8014b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b76:	f003 0308 	and.w	r3, r3, #8
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	f000 80ad 	beq.w	8014cda <nk_panel_begin+0x906>
            nk_flags ws = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	647b      	str	r3, [r7, #68]	; 0x44
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8014b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b8c:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d132      	bne.n	8014bfa <nk_panel_begin+0x826>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 8014b94:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014b98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ba0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8014ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bac:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014bb0:	edd3 7a00 	vldr	s15, [r3]
 8014bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bbc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8014bc0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014bc4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8014bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bd0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8014bd4:	edd3 7a00 	vldr	s15, [r3]
 8014bd8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014be4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014be8:	edd3 7a00 	vldr	s15, [r3]
 8014bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bf4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8014bf8:	e029      	b.n	8014c4e <nk_panel_begin+0x87a>
            } else {
                button.x = header.x + style->window.header.padding.x;
 8014bfa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c06:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014c0a:	edd3 7a00 	vldr	s15, [r3]
 8014c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c12:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8014c16:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014c1a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8014c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c26:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8014c2a:	edd3 7a00 	vldr	s15, [r3]
 8014c2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c3a:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014c3e:	edd3 7a00 	vldr	s15, [r3]
 8014c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c4a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8014c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c52:	f103 0164 	add.w	r1, r3, #100	; 0x64
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 8014c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c5e:	f893 4830 	ldrb.w	r4, [r3, #2096]	; 0x830
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8014c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c66:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8014c6a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014c6e:	6812      	ldr	r2, [r2, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8014c70:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8014c74:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8014c78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014c7c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014c80:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8014c84:	9202      	str	r2, [sp, #8]
 8014c86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014c8a:	9201      	str	r2, [sp, #4]
 8014c8c:	9300      	str	r3, [sp, #0]
 8014c8e:	2300      	movs	r3, #0
 8014c90:	4622      	mov	r2, r4
 8014c92:	eeb0 0a46 	vmov.f32	s0, s12
 8014c96:	eef0 0a66 	vmov.f32	s1, s13
 8014c9a:	eeb0 1a47 	vmov.f32	s2, s14
 8014c9e:	eef0 1a67 	vmov.f32	s3, s15
 8014ca2:	f7f9 fe23 	bl	800e8ec <nk_do_button_symbol>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d016      	beq.n	8014cda <nk_panel_begin+0x906>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8014cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d10f      	bne.n	8014cda <nk_panel_begin+0x906>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
 8014cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8014cc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014cc8:	605a      	str	r2, [r3, #4]
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 8014cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8014cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014cd8:	605a      	str	r2, [r3, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 8014cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ce0:	f003 0310 	and.w	r3, r3, #16
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	f000 80c9 	beq.w	8014e7c <nk_panel_begin+0xaa8>
            nk_flags ws = 0;
 8014cea:	2300      	movs	r3, #0
 8014cec:	643b      	str	r3, [r7, #64]	; 0x40
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8014cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cf6:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d141      	bne.n	8014d82 <nk_panel_begin+0x9ae>
                button.x = (header.w + header.x) - button.w;
 8014cfe:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014d02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014d06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d0a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8014d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d12:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 8014d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d1c:	f003 0308 	and.w	r3, r3, #8
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d11b      	bne.n	8014d5c <nk_panel_begin+0x988>
                    button.x -= style->window.header.padding.x;
 8014d24:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d30:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014d34:	edd3 7a00 	vldr	s15, [r3]
 8014d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d3c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    header.w -= style->window.header.padding.x;
 8014d40:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d4c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014d50:	edd3 7a00 	vldr	s15, [r3]
 8014d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d58:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
                }
                header.w -= button.w + style->window.header.spacing.x;
 8014d5c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014d60:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8014d64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d6c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8014d70:	edd3 7a00 	vldr	s15, [r3]
 8014d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d7c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8014d80:	e01d      	b.n	8014dbe <nk_panel_begin+0x9ea>
            } else {
                button.x = header.x;
 8014d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d84:	64bb      	str	r3, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8014d86:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014d8a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8014d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014d96:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8014d9a:	edd3 7a00 	vldr	s15, [r3]
 8014d9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014daa:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014dae:	edd3 7a00 	vldr	s15, [r3]
 8014db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dba:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8014dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014dc2:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8014dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d00b      	beq.n	8014dec <nk_panel_begin+0xa18>
 8014dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ddc:	f893 2832 	ldrb.w	r2, [r3, #2098]	; 0x832
 8014de0:	e00a      	b.n	8014df8 <nk_panel_begin+0xa24>
 8014de2:	bf00      	nop
 8014de4:	080234f8 	.word	0x080234f8
 8014de8:	00000000 	.word	0x00000000
 8014dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014df4:	f893 2831 	ldrb.w	r2, [r3, #2097]	; 0x831
 8014df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014dfc:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8014e00:	3318      	adds	r3, #24
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8014e02:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8014e06:	6809      	ldr	r1, [r1, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8014e08:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8014e0c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8014e10:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014e14:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014e18:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8014e1c:	9102      	str	r1, [sp, #8]
 8014e1e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8014e22:	9101      	str	r1, [sp, #4]
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	2300      	movs	r3, #0
 8014e28:	eeb0 0a46 	vmov.f32	s0, s12
 8014e2c:	eef0 0a66 	vmov.f32	s1, s13
 8014e30:	eeb0 1a47 	vmov.f32	s2, s14
 8014e34:	eef0 1a67 	vmov.f32	s3, s15
 8014e38:	4621      	mov	r1, r4
 8014e3a:	f7f9 fd57 	bl	800e8ec <nk_do_button_symbol>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d01b      	beq.n	8014e7c <nk_panel_begin+0xaa8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8014e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d114      	bne.n	8014e7c <nk_panel_begin+0xaa8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8014e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e56:	685b      	ldr	r3, [r3, #4]
 8014e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d005      	beq.n	8014e6c <nk_panel_begin+0xa98>
 8014e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014e6a:	e004      	b.n	8014e76 <nk_panel_begin+0xaa2>
                    layout->flags | NK_WINDOW_MINIMIZED;
 8014e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e70:	685b      	ldr	r3, [r3, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8014e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8014e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014e7a:	6053      	str	r3, [r2, #4]
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 8014e7c:	68b8      	ldr	r0, [r7, #8]
 8014e7e:	f007 f8ad 	bl	801bfdc <nk_strlen>
 8014e82:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        struct nk_rect label = {0,0,0,0};
 8014e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	601a      	str	r2, [r3, #0]
 8014e8e:	605a      	str	r2, [r3, #4]
 8014e90:	609a      	str	r2, [r3, #8]
 8014e92:	60da      	str	r2, [r3, #12]
        float t = font->width(font->userdata, font->height, title, text_len);
 8014e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014e98:	689b      	ldr	r3, [r3, #8]
 8014e9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8014e9e:	edd2 7a01 	vldr	s15, [r2, #4]
 8014ea2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014ea6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014eaa:	68b9      	ldr	r1, [r7, #8]
 8014eac:	eeb0 0a67 	vmov.f32	s0, s15
 8014eb0:	6800      	ldr	r0, [r0, #0]
 8014eb2:	4798      	blx	r3
 8014eb4:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        text.padding = nk_vec2(0,0);
 8014eb8:	ed5f 0a35 	vldr	s1, [pc, #-212]	; 8014de8 <nk_panel_begin+0xa14>
 8014ebc:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 8014de8 <nk_panel_begin+0xa14>
 8014ec0:	f7fe fcb6 	bl	8013830 <nk_vec2>
 8014ec4:	eeb0 7a40 	vmov.f32	s14, s0
 8014ec8:	eef0 7a60 	vmov.f32	s15, s1
 8014ecc:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8014ed0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        label.x = header.x + style->window.header.padding.x;
 8014ed4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ee0:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8014ee4:	edd3 7a00 	vldr	s15, [r3]
 8014ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014eec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.x += style->window.header.label_padding.x;
 8014ef0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8014ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014efc:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8014f00:	edd3 7a00 	vldr	s15, [r3]
 8014f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.y = header.y + style->window.header.label_padding.y;
 8014f0c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014f10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f18:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8014f1c:	edd3 7a00 	vldr	s15, [r3]
 8014f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        label.h = font->height + 2 * style->window.header.label_padding.y;
 8014f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014f2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f38:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8014f3c:	edd3 7a00 	vldr	s15, [r3]
 8014f40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f48:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.w = t + 2 * style->window.header.spacing.x;
 8014f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f54:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8014f58:	edd3 7a00 	vldr	s15, [r3]
 8014f5c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8014f60:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8014f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 8014f6c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014f70:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8014f74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014f78:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014f7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014f80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f8c:	d50a      	bpl.n	8014fa4 <nk_panel_begin+0xbd0>
 8014f8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9a:	bf4c      	ite	mi
 8014f9c:	2301      	movmi	r3, #1
 8014f9e:	2300      	movpl	r3, #0
 8014fa0:	b2db      	uxtb	r3, r3
 8014fa2:	e011      	b.n	8014fc8 <nk_panel_begin+0xbf4>
 8014fa4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014fa8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014fb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc0:	bf4c      	ite	mi
 8014fc2:	2301      	movmi	r3, #1
 8014fc4:	2300      	movpl	r3, #0
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d002      	beq.n	8014fd2 <nk_panel_begin+0xbfe>
 8014fcc:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8014de8 <nk_panel_begin+0xa14>
 8014fd0:	e01d      	b.n	801500e <nk_panel_begin+0xc3a>
 8014fd2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014fd6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8014fda:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014fde:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014fe2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014fe6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff2:	d502      	bpl.n	8014ffa <nk_panel_begin+0xc26>
 8014ff4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014ff8:	e009      	b.n	801500e <nk_panel_begin+0xc3a>
 8014ffa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014ffe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015006:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801500a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801500e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 8015012:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015016:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801501a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801501e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015022:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801502a:	9301      	str	r3, [sp, #4]
 801502c:	2311      	movs	r3, #17
 801502e:	9300      	str	r3, [sp, #0]
 8015030:	4613      	mov	r3, r2
 8015032:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015036:	68b9      	ldr	r1, [r7, #8]
 8015038:	eeb0 0a46 	vmov.f32	s0, s12
 801503c:	eef0 0a66 	vmov.f32	s1, s13
 8015040:	eeb0 1a47 	vmov.f32	s2, s14
 8015044:	eef0 1a67 	vmov.f32	s3, s15
 8015048:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801504c:	f005 fdee 	bl	801ac2c <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 8015050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801505a:	2b00      	cmp	r3, #0
 801505c:	f040 808d 	bne.w	801517a <nk_panel_begin+0xda6>
 8015060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801506a:	2b00      	cmp	r3, #0
 801506c:	f040 8085 	bne.w	801517a <nk_panel_begin+0xda6>
        struct nk_rect body;
        body.x = win->bounds.x;
 8015070:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015076:	623b      	str	r3, [r7, #32]
        body.w = win->bounds.w;
 8015078:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801507e:	62bb      	str	r3, [r7, #40]	; 0x28
        body.y = (win->bounds.y + layout->header_height);
 8015080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015084:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8015088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801508c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015094:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        body.h = (win->bounds.h - layout->header_height);
 8015098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801509c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80150a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80150a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80150a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150ac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        switch(style->window.fixed_background.type) {
 80150b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80150b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80150b8:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 80150bc:	2b02      	cmp	r3, #2
 80150be:	d022      	beq.n	8015106 <nk_panel_begin+0xd32>
 80150c0:	2b02      	cmp	r3, #2
 80150c2:	dc5a      	bgt.n	801517a <nk_panel_begin+0xda6>
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d03b      	beq.n	8015140 <nk_panel_begin+0xd6c>
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d156      	bne.n	801517a <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 80150cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80150d0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80150d4:	331c      	adds	r3, #28
 80150d6:	4a5e      	ldr	r2, [pc, #376]	; (8015250 <nk_panel_begin+0xe7c>)
 80150d8:	ed97 6a08 	vldr	s12, [r7, #32]
 80150dc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80150e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80150e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80150e8:	6812      	ldr	r2, [r2, #0]
 80150ea:	4619      	mov	r1, r3
 80150ec:	eeb0 0a46 	vmov.f32	s0, s12
 80150f0:	eef0 0a66 	vmov.f32	s1, s13
 80150f4:	eeb0 1a47 	vmov.f32	s2, s14
 80150f8:	eef0 1a67 	vmov.f32	s3, s15
 80150fc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8015100:	f7fc f8e2 	bl	80112c8 <nk_draw_image>
                break;
 8015104:	e039      	b.n	801517a <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 8015106:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801510a:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801510e:	331c      	adds	r3, #28
 8015110:	4a4f      	ldr	r2, [pc, #316]	; (8015250 <nk_panel_begin+0xe7c>)
 8015112:	ed97 6a08 	vldr	s12, [r7, #32]
 8015116:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801511a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801511e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015122:	6812      	ldr	r2, [r2, #0]
 8015124:	4619      	mov	r1, r3
 8015126:	eeb0 0a46 	vmov.f32	s0, s12
 801512a:	eef0 0a66 	vmov.f32	s1, s13
 801512e:	eeb0 1a47 	vmov.f32	s2, s14
 8015132:	eef0 1a67 	vmov.f32	s3, s15
 8015136:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801513a:	f7fc f9b7 	bl	80114ac <nk_draw_nine_slice>
                break;
 801513e:	e01c      	b.n	801517a <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 8015140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015148:	ed97 6a08 	vldr	s12, [r7, #32]
 801514c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8015150:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015154:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015158:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 801515c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8015254 <nk_panel_begin+0xe80>
 8015160:	eeb0 0a46 	vmov.f32	s0, s12
 8015164:	eef0 0a66 	vmov.f32	s1, s13
 8015168:	eeb0 1a47 	vmov.f32	s2, s14
 801516c:	eef0 1a67 	vmov.f32	s3, s15
 8015170:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8015174:	f7fb fd4e 	bl	8010c14 <nk_fill_rect>
                break;
 8015178:	bf00      	nop
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 801517a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801517e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015182:	f102 043c 	add.w	r4, r2, #60	; 0x3c
 8015186:	3308      	adds	r3, #8
 8015188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801518a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 801518e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015192:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801519a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 801519e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80151a2:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 80151a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80151aa:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80151ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80151b2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 80151b6:	ee77 5a27 	vadd.f32	s11, s14, s15
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 80151ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80151be:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80151c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80151c6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 80151ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151ce:	f107 0310 	add.w	r3, r7, #16
 80151d2:	eef0 1a67 	vmov.f32	s3, s15
 80151d6:	eeb0 1a65 	vmov.f32	s2, s11
 80151da:	eef0 0a46 	vmov.f32	s1, s12
 80151de:	eeb0 0a66 	vmov.f32	s0, s13
 80151e2:	4611      	mov	r1, r2
 80151e4:	4618      	mov	r0, r3
 80151e6:	f7fe fb45 	bl	8013874 <nk_unify>
    nk_push_scissor(out, clip);
 80151ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80151ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80151f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80151f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80151fa:	eeb0 0a46 	vmov.f32	s0, s12
 80151fe:	eef0 0a66 	vmov.f32	s1, s13
 8015202:	eeb0 1a47 	vmov.f32	s2, s14
 8015206:	eef0 1a67 	vmov.f32	s3, s15
 801520a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801520e:	f7fb fb81 	bl	8010914 <nk_push_scissor>
    layout->clip = clip;}
 8015212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015216:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801521a:	f107 0310 	add.w	r3, r7, #16
 801521e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 8015224:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015228:	685b      	ldr	r3, [r3, #4]
 801522a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801522e:	2b00      	cmp	r3, #0
 8015230:	d108      	bne.n	8015244 <nk_panel_begin+0xe70>
 8015232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801523c:	2b00      	cmp	r3, #0
 801523e:	d101      	bne.n	8015244 <nk_panel_begin+0xe70>
 8015240:	2301      	movs	r3, #1
 8015242:	e000      	b.n	8015246 <nk_panel_begin+0xe72>
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	37cc      	adds	r7, #204	; 0xcc
 801524a:	46bd      	mov	sp, r7
 801524c:	bd90      	pop	{r4, r7, pc}
 801524e:	bf00      	nop
 8015250:	080234f8 	.word	0x080234f8
 8015254:	00000000 	.word	0x00000000

08015258 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 8015258:	b590      	push	{r4, r7, lr}
 801525a:	b0b3      	sub	sp, #204	; 0xcc
 801525c:	af02      	add	r7, sp, #8
 801525e:	6078      	str	r0, [r7, #4]
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d106      	bne.n	8015274 <nk_panel_end+0x1c>
 8015266:	4b31      	ldr	r3, [pc, #196]	; (801532c <nk_panel_end+0xd4>)
 8015268:	4a31      	ldr	r2, [pc, #196]	; (8015330 <nk_panel_end+0xd8>)
 801526a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 801526e:	4831      	ldr	r0, [pc, #196]	; (8015334 <nk_panel_end+0xdc>)
 8015270:	f008 fb7e 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801527a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801527e:	2b00      	cmp	r3, #0
 8015280:	d106      	bne.n	8015290 <nk_panel_end+0x38>
 8015282:	4b2d      	ldr	r3, [pc, #180]	; (8015338 <nk_panel_end+0xe0>)
 8015284:	4a2a      	ldr	r2, [pc, #168]	; (8015330 <nk_panel_end+0xd8>)
 8015286:	f240 1153 	movw	r1, #339	; 0x153
 801528a:	482a      	ldr	r0, [pc, #168]	; (8015334 <nk_panel_end+0xdc>)
 801528c:	f008 fb70 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015296:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801529a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d106      	bne.n	80152b0 <nk_panel_end+0x58>
 80152a2:	4b26      	ldr	r3, [pc, #152]	; (801533c <nk_panel_end+0xe4>)
 80152a4:	4a22      	ldr	r2, [pc, #136]	; (8015330 <nk_panel_end+0xd8>)
 80152a6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80152aa:	4822      	ldr	r0, [pc, #136]	; (8015334 <nk_panel_end+0xdc>)
 80152ac:	f008 fb60 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 8792 	beq.w	80161dc <nk_panel_end+0xf84>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80152be:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f000 878a 	beq.w	80161dc <nk_panel_end+0xf84>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80152ce:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80152d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	f000 8780 	beq.w	80161dc <nk_panel_end+0xf84>
        return;

    window = ctx->current;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80152e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80152e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    layout = window->layout;
 80152ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80152ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80152f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    style = &ctx->style;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80152fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    out = &window->buffer;
 8015300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015304:	3364      	adds	r3, #100	; 0x64
 8015306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 801530a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015314:	2b00      	cmp	r3, #0
 8015316:	d113      	bne.n	8015340 <nk_panel_end+0xe8>
 8015318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015322:	2b00      	cmp	r3, #0
 8015324:	d10c      	bne.n	8015340 <nk_panel_end+0xe8>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	e00b      	b.n	8015342 <nk_panel_end+0xea>
 801532a:	bf00      	nop
 801532c:	080218dc 	.word	0x080218dc
 8015330:	0802350c 	.word	0x0802350c
 8015334:	080218e0 	.word	0x080218e0
 8015338:	080218fc 	.word	0x080218fc
 801533c:	0802190c 	.word	0x0802190c
 8015340:	2300      	movs	r3, #0
 8015342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (!nk_panel_is_sub(layout->type))
 8015346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	4618      	mov	r0, r3
 801534e:	f7ff f81b 	bl	8014388 <nk_panel_is_sub>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d114      	bne.n	8015382 <nk_panel_end+0x12a>
        nk_push_scissor(out, nk_null_rect);
 8015358:	4bcb      	ldr	r3, [pc, #812]	; (8015688 <nk_panel_end+0x430>)
 801535a:	ed93 6a00 	vldr	s12, [r3]
 801535e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015362:	ed93 7a02 	vldr	s14, [r3, #8]
 8015366:	edd3 7a03 	vldr	s15, [r3, #12]
 801536a:	eeb0 0a46 	vmov.f32	s0, s12
 801536e:	eef0 0a66 	vmov.f32	s1, s13
 8015372:	eeb0 1a47 	vmov.f32	s2, s14
 8015376:	eef0 1a67 	vmov.f32	s3, s15
 801537a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801537e:	f7fb fac9 	bl	8010914 <nk_push_scissor>

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 8015382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801538a:	461a      	mov	r2, r3
 801538c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015390:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 8015394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015398:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, layout->type);
 801539c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	4619      	mov	r1, r3
 80153a4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80153a8:	f7fe fdfc 	bl	8013fa4 <nk_panel_get_padding>
 80153ac:	eeb0 7a40 	vmov.f32	s14, s0
 80153b0:	eef0 7a60 	vmov.f32	s15, s1
 80153b4:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80153b8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 80153bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80153c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153c8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80153cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153d4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 80153d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	f000 8111 	beq.w	801560a <nk_panel_end+0x3b2>
 80153e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f040 8109 	bne.w	801560a <nk_panel_end+0x3b2>
    {
        /* update panel height to fit dynamic growth */
        struct nk_rect empty_space;
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 80153f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80153fc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8015400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015404:	edd3 6a03 	vldr	s13, [r3, #12]
 8015408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801540c:	edd3 7a05 	vldr	s15, [r3, #20]
 8015410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541c:	d50d      	bpl.n	801543a <nk_panel_end+0x1e2>
            layout->bounds.h = layout->at_y - layout->bounds.y;
 801541e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015422:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8015426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801542a:	edd3 7a03 	vldr	s15, [r3, #12]
 801542e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015436:	edc3 7a05 	vstr	s15, [r3, #20]

        /* fill top empty space */
        empty_space.x = window->bounds.x;
 801543a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801543e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015440:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8015442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015446:	68db      	ldr	r3, [r3, #12]
 8015448:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.h = panel_padding.y;
 801544a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801544c:	65fb      	str	r3, [r7, #92]	; 0x5c
        empty_space.w = window->bounds.w;
 801544e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015454:	65bb      	str	r3, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8015456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801545a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801545e:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8015462:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8015466:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801546a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801546e:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8015472:	ed9f 2a86 	vldr	s4, [pc, #536]	; 801568c <nk_panel_end+0x434>
 8015476:	eeb0 0a46 	vmov.f32	s0, s12
 801547a:	eef0 0a66 	vmov.f32	s1, s13
 801547e:	eeb0 1a47 	vmov.f32	s2, s14
 8015482:	eef0 1a67 	vmov.f32	s3, s15
 8015486:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801548a:	f7fb fbc3 	bl	8010c14 <nk_fill_rect>

        /* fill left empty space */
        empty_space.x = window->bounds.x;
 801548e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015494:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8015496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 801549e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80154a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80154a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80154aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154ae:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 80154b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80154b6:	695b      	ldr	r3, [r3, #20]
 80154b8:	65fb      	str	r3, [r7, #92]	; 0x5c
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80154ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80154be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154c2:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80154c6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80154ca:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80154ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80154d2:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80154d6:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 801568c <nk_panel_end+0x434>
 80154da:	eeb0 0a46 	vmov.f32	s0, s12
 80154de:	eef0 0a66 	vmov.f32	s1, s13
 80154e2:	eeb0 1a47 	vmov.f32	s2, s14
 80154e6:	eef0 1a67 	vmov.f32	s3, s15
 80154ea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80154ee:	f7fb fb91 	bl	8010c14 <nk_fill_rect>

        /* fill right empty space */
        empty_space.x = layout->bounds.x + layout->bounds.w;
 80154f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80154f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80154fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80154fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8015502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015506:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 801550a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 8015512:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801551a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801551e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015522:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 8015526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801552a:	695b      	ldr	r3, [r3, #20]
 801552c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 801552e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015532:	69db      	ldr	r3, [r3, #28]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d10e      	bne.n	8015558 <nk_panel_end+0x300>
 801553a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	f003 0320 	and.w	r3, r3, #32
 8015544:	2b00      	cmp	r3, #0
 8015546:	d107      	bne.n	8015558 <nk_panel_end+0x300>
            empty_space.w += scrollbar_size.x;
 8015548:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801554c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8015550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015554:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8015558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801555c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015560:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8015564:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8015568:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801556c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015570:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8015574:	ed9f 2a45 	vldr	s4, [pc, #276]	; 801568c <nk_panel_end+0x434>
 8015578:	eeb0 0a46 	vmov.f32	s0, s12
 801557c:	eef0 0a66 	vmov.f32	s1, s13
 8015580:	eeb0 1a47 	vmov.f32	s2, s14
 8015584:	eef0 1a67 	vmov.f32	s3, s15
 8015588:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801558c:	f7fb fb42 	bl	8010c14 <nk_fill_rect>

        /* fill bottom empty space */
        if (layout->footer_height > 0) {
 8015590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015594:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8015598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a0:	dd33      	ble.n	801560a <nk_panel_end+0x3b2>
            empty_space.x = window->bounds.x;
 80155a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155a8:	653b      	str	r3, [r7, #80]	; 0x50
            empty_space.y = layout->bounds.y + layout->bounds.h;
 80155aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80155ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80155b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80155b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80155ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155be:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            empty_space.w = window->bounds.w;
 80155c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80155c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155c8:	65bb      	str	r3, [r7, #88]	; 0x58
            empty_space.h = layout->footer_height;
 80155ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80155ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155d0:	65fb      	str	r3, [r7, #92]	; 0x5c
            nk_fill_rect(out, empty_space, 0, style->window.background);
 80155d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80155d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80155da:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80155de:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80155e2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80155e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80155ea:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80155ee:	ed9f 2a27 	vldr	s4, [pc, #156]	; 801568c <nk_panel_end+0x434>
 80155f2:	eeb0 0a46 	vmov.f32	s0, s12
 80155f6:	eef0 0a66 	vmov.f32	s1, s13
 80155fa:	eeb0 1a47 	vmov.f32	s2, s14
 80155fe:	eef0 1a67 	vmov.f32	s3, s15
 8015602:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015606:	f7fb fb05 	bl	8010c14 <nk_fill_rect>
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 801560a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	f003 0320 	and.w	r3, r3, #32
 8015614:	2b00      	cmp	r3, #0
 8015616:	f040 8232 	bne.w	8015a7e <nk_panel_end+0x826>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 801561a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8015624:	2b00      	cmp	r3, #0
 8015626:	f040 822a 	bne.w	8015a7e <nk_panel_end+0x826>
        window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)
 801562a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801562e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8015632:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8015636:	eef4 7ac7 	vcmpe.f32	s15, s14
 801563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563e:	f140 821e 	bpl.w	8015a7e <nk_panel_end+0x826>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 8015642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	4618      	mov	r0, r3
 801564a:	f7fe fe9d 	bl	8014388 <nk_panel_is_sub>
 801564e:	4603      	mov	r3, r0
 8015650:	2b00      	cmp	r3, #0
 8015652:	f000 80cb 	beq.w	80157ec <nk_panel_end+0x594>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
 8015656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801565a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            struct nk_panel *root_panel = window->layout;
 801565e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 801566a:	e005      	b.n	8015678 <nk_panel_end+0x420>
                root_panel = root_panel->parent;
 801566c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015670:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 8015678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801567c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8015680:	2b00      	cmp	r3, #0
 8015682:	d1f3      	bne.n	801566c <nk_panel_end+0x414>
            while (root_window->parent)
 8015684:	e012      	b.n	80156ac <nk_panel_end+0x454>
 8015686:	bf00      	nop
 8015688:	080234e8 	.word	0x080234e8
 801568c:	00000000 	.word	0x00000000
 8015690:	3dcccccd 	.word	0x3dcccccd
 8015694:	3c23d70a 	.word	0x3c23d70a
 8015698:	3d4ccccd 	.word	0x3d4ccccd
 801569c:	3ba3d70a 	.word	0x3ba3d70a
                root_window = root_window->parent;
 80156a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80156a4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80156a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while (root_window->parent)
 80156ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80156b0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d1f3      	bne.n	80156a0 <nk_panel_end+0x448>

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
 80156b8:	2300      	movs	r3, #0
 80156ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if ((root_window == ctx->active) && layout->has_scrolling) {
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156c4:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 80156c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80156cc:	429a      	cmp	r2, r3
 80156ce:	f040 80d2 	bne.w	8015876 <nk_panel_end+0x61e>
 80156d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80156d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f000 80cc 	beq.w	8015876 <nk_panel_end+0x61e>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 80156de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80156e2:	ed93 6a02 	vldr	s12, [r3, #8]
 80156e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80156ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80156ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80156f2:	eeb0 0a46 	vmov.f32	s0, s12
 80156f6:	eef0 0a66 	vmov.f32	s1, s13
 80156fa:	eeb0 1a47 	vmov.f32	s2, s14
 80156fe:	eef0 1a67 	vmov.f32	s3, s15
 8015702:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015706:	f7fc fec6 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	f000 80b2 	beq.w	8015876 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 8015712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015716:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801571a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801571e:	edd3 6a02 	vldr	s13, [r3, #8]
 8015722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015726:	edd3 7a04 	vldr	s15, [r3, #16]
 801572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 801572e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015736:	f140 809e 	bpl.w	8015876 <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 801573a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801573e:	ed93 7a02 	vldr	s14, [r3, #8]
 8015742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015746:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 801574a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801574e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8015752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801575e:	f140 808a 	bpl.w	8015876 <nk_panel_end+0x61e>
 8015762:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015766:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801576a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801576e:	edd3 6a03 	vldr	s13, [r3, #12]
 8015772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015776:	edd3 7a05 	vldr	s15, [r3, #20]
 801577a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801577e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015786:	d576      	bpl.n	8015876 <nk_panel_end+0x61e>
 8015788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801578c:	ed93 7a03 	vldr	s14, [r3, #12]
 8015790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015794:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8015798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801579c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80157a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80157a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ac:	d563      	bpl.n	8015876 <nk_panel_end+0x61e>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 80157ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80157b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 80157ba:	e009      	b.n	80157d0 <nk_panel_end+0x578>
                        root_panel->has_scrolling = nk_false;
 80157bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157c0:	2200      	movs	r2, #0
 80157c2:	639a      	str	r2, [r3, #56]	; 0x38
                        root_panel = root_panel->parent;
 80157c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157c8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80157cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 80157d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157d4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d1ef      	bne.n	80157bc <nk_panel_end+0x564>
                    }
                    root_panel->has_scrolling = nk_false;
 80157dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80157e0:	2200      	movs	r2, #0
 80157e2:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 80157e4:	2301      	movs	r3, #1
 80157e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80157ea:	e044      	b.n	8015876 <nk_panel_end+0x61e>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
 80157ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fe fdc8 	bl	8014388 <nk_panel_is_sub>
 80157f8:	4603      	mov	r3, r0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d138      	bne.n	8015870 <nk_panel_end+0x618>
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015804:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8015808:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801580c:	429a      	cmp	r2, r3
 801580e:	d106      	bne.n	801581e <nk_panel_end+0x5c6>
 8015810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015816:	2b00      	cmp	r3, #0
 8015818:	d001      	beq.n	801581e <nk_panel_end+0x5c6>
 801581a:	2301      	movs	r3, #1
 801581c:	e000      	b.n	8015820 <nk_panel_end+0x5c8>
 801581e:	2300      	movs	r3, #0
 8015820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 8015824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015828:	2b00      	cmp	r3, #0
 801582a:	d01b      	beq.n	8015864 <nk_panel_end+0x60c>
 801582c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015830:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8015834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801583c:	dc08      	bgt.n	8015850 <nk_panel_end+0x5f8>
 801583e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015842:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 8015846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801584e:	dd09      	ble.n	8015864 <nk_panel_end+0x60c>
 8015850:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015854:	2b00      	cmp	r3, #0
 8015856:	d005      	beq.n	8015864 <nk_panel_end+0x60c>
                window->scrolled = nk_true;
 8015858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801585c:	2201      	movs	r2, #1
 801585e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8015862:	e008      	b.n	8015876 <nk_panel_end+0x61e>
            else window->scrolled = nk_false;
 8015864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015868:	2200      	movs	r2, #0
 801586a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801586e:	e002      	b.n	8015876 <nk_panel_end+0x61e>
        } else scroll_has_scrolling = nk_false;
 8015870:	2300      	movs	r3, #0
 8015872:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 8015876:	2300      	movs	r3, #0
 8015878:	63fb      	str	r3, [r7, #60]	; 0x3c
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 801587a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801587e:	ed93 7a02 	vldr	s14, [r3, #8]
 8015882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015886:	edd3 7a04 	vldr	s15, [r3, #16]
 801588a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801588e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015896:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y;
 801589a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	647b      	str	r3, [r7, #68]	; 0x44
            scroll.w = scrollbar_size.x;
 80158a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158a4:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = layout->bounds.h;
 80158a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80158aa:	695b      	ldr	r3, [r3, #20]
 80158ac:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_y;
 80158ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80158b2:	69db      	ldr	r3, [r3, #28]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	ee07 3a90 	vmov	s15, r3
 80158ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80158be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_step = scroll.h * 0.10f;
 80158c2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80158c6:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 8015690 <nk_panel_end+0x438>
 80158ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80158ce:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = scroll.h * 0.01f;
 80158d2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80158d6:	ed1f 7a91 	vldr	s14, [pc, #-580]	; 8015694 <nk_panel_end+0x43c>
 80158da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80158de:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 80158e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80158e6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80158ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80158ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80158f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158fa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8015904:	3318      	adds	r3, #24
 8015906:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801590a:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 801590c:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8015910:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8015914:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015918:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801591c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8015920:	9201      	str	r2, [sp, #4]
 8015922:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015926:	9200      	str	r2, [sp, #0]
 8015928:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 801592c:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8015930:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8015934:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8015938:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801593c:	eeb0 0a46 	vmov.f32	s0, s12
 8015940:	eef0 0a66 	vmov.f32	s1, s13
 8015944:	eeb0 1a47 	vmov.f32	s2, s14
 8015948:	eef0 1a67 	vmov.f32	s3, s15
 801594c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015950:	f001 fc82 	bl	8017258 <nk_do_scrollbarv>
 8015954:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_y = (nk_uint)scroll_offset;
 8015958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801595c:	69db      	ldr	r3, [r3, #28]
 801595e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015966:	ee17 2a90 	vmov	r2, s15
 801596a:	601a      	str	r2, [r3, #0]
            if (in && scroll_has_scrolling)
 801596c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015970:	2b00      	cmp	r3, #0
 8015972:	d009      	beq.n	8015988 <nk_panel_end+0x730>
 8015974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015978:	2b00      	cmp	r3, #0
 801597a:	d005      	beq.n	8015988 <nk_panel_end+0x730>
                in->mouse.scroll_delta.y = 0;
 801597c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015980:	f04f 0200 	mov.w	r2, #0
 8015984:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 8015988:	2300      	movs	r3, #0
 801598a:	63bb      	str	r3, [r7, #56]	; 0x38
            scroll.x = layout->bounds.x;
 801598c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015990:	689b      	ldr	r3, [r3, #8]
 8015992:	643b      	str	r3, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y + layout->bounds.h;
 8015994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015998:	ed93 7a03 	vldr	s14, [r3, #12]
 801599c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80159a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159a8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            scroll.w = layout->bounds.w;
 80159ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159b0:	691b      	ldr	r3, [r3, #16]
 80159b2:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = scrollbar_size.y;
 80159b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80159b6:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_x;
 80159b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159bc:	699b      	ldr	r3, [r3, #24]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	ee07 3a90 	vmov	s15, r3
 80159c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80159c8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 80159cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159d0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80159d4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80159d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80159e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159e4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_step = layout->max_x * 0.05f;
 80159e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80159ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80159f0:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 8015698 <nk_panel_end+0x440>
 80159f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80159f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = layout->max_x * 0.005f;
 80159fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015a00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8015a04:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 801569c <nk_panel_end+0x444>
 8015a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a0c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8015a16:	330c      	adds	r3, #12
 8015a18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015a1c:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 8015a1e:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8015a22:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8015a26:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015a2a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8015a2e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015a32:	9201      	str	r2, [sp, #4]
 8015a34:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015a38:	9200      	str	r2, [sp, #0]
 8015a3a:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8015a3e:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8015a42:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8015a46:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8015a4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015a4e:	eeb0 0a46 	vmov.f32	s0, s12
 8015a52:	eef0 0a66 	vmov.f32	s1, s13
 8015a56:	eeb0 1a47 	vmov.f32	s2, s14
 8015a5a:	eef0 1a67 	vmov.f32	s3, s15
 8015a5e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8015a62:	f001 fe97 	bl	8017794 <nk_do_scrollbarh>
 8015a66:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_x = (nk_uint)scroll_offset;
 8015a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015a6e:	699b      	ldr	r3, [r3, #24]
 8015a70:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015a78:	ee17 2a90 	vmov	r2, s15
 8015a7c:	601a      	str	r2, [r3, #0]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 8015a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d051      	beq.n	8015b30 <nk_panel_end+0x8d8>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8015a92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a9a:	d10f      	bne.n	8015abc <nk_panel_end+0x864>
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015aa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aaa:	d107      	bne.n	8015abc <nk_panel_end+0x864>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8015ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aba:	d001      	beq.n	8015ac0 <nk_panel_end+0x868>
 8015abc:	2301      	movs	r3, #1
 8015abe:	e000      	b.n	8015ac2 <nk_panel_end+0x86a>
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int is_window_hovered = nk_window_is_hovered(ctx);
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f007 fda6 	bl	801d618 <nk_window_is_hovered>
 8015acc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ad6:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8015ada:	f003 0302 	and.w	r3, r3, #2
 8015ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 8015ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d103      	bne.n	8015af2 <nk_panel_end+0x89a>
 8015aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d107      	bne.n	8015b02 <nk_panel_end+0x8aa>
 8015af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d113      	bne.n	8015b22 <nk_panel_end+0x8ca>
 8015afa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d10f      	bne.n	8015b22 <nk_panel_end+0x8ca>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 8015b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b06:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015b10:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8015b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b1c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8015b20:	e00c      	b.n	8015b3c <nk_panel_end+0x8e4>
        else window->scrollbar_hiding_timer = 0;
 8015b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b26:	f04f 0200 	mov.w	r2, #0
 8015b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8015b2e:	e005      	b.n	8015b3c <nk_panel_end+0x8e4>
    } else window->scrollbar_hiding_timer = 0;
 8015b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b34:	f04f 0200 	mov.w	r2, #0
 8015b38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 8015b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	f003 0301 	and.w	r3, r3, #1
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d078      	beq.n	8015c3c <nk_panel_end+0x9e4>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 8015b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b4e:	781b      	ldrb	r3, [r3, #0]
 8015b50:	4619      	mov	r1, r3
 8015b52:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8015b56:	f7fe fb7d 	bl	8014254 <nk_panel_get_border_color>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	637b      	str	r3, [r7, #52]	; 0x34
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8015b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d014      	beq.n	8015b96 <nk_panel_end+0x93e>
            ? (style->window.border + window->bounds.y + layout->header_height)
 8015b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b74:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8015b78:	ed93 7a00 	vldr	s14, [r3]
 8015b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b80:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8015b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b8c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8015b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b94:	e021      	b.n	8015bda <nk_panel_end+0x982>
 8015b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015b9a:	685b      	ldr	r3, [r3, #4]
 8015b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d010      	beq.n	8015bc6 <nk_panel_end+0x96e>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 8015ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015ba8:	ed93 7a03 	vldr	s14, [r3, #12]
 8015bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bb0:	edd3 7a05 	vldr	s15, [r3, #20]
 8015bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015bbc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                : (window->bounds.y + window->bounds.h));
 8015bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bc4:	e009      	b.n	8015bda <nk_panel_end+0x982>
 8015bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015bca:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8015bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015bd2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8015bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8015bda:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        struct nk_rect b = window->bounds;
 8015bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015be2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8015be6:	334c      	adds	r3, #76	; 0x4c
 8015be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 8015bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015bf2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8015bf6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bfe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 8015c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c06:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8015c0a:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8015c0e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8015c12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015c16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015c1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c1c:	eef0 2a65 	vmov.f32	s5, s11
 8015c20:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8015d9c <nk_panel_end+0xb44>
 8015c24:	eeb0 0a46 	vmov.f32	s0, s12
 8015c28:	eef0 0a66 	vmov.f32	s1, s13
 8015c2c:	eeb0 1a47 	vmov.f32	s2, s14
 8015c30:	eef0 1a67 	vmov.f32	s3, s15
 8015c34:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015c38:	f7fa fee4 	bl	8010a04 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 8015c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	f003 0304 	and.w	r3, r3, #4
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	f000 81e1 	beq.w	801600e <nk_panel_end+0xdb6>
 8015c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f000 81dc 	beq.w	801600e <nk_panel_end+0xdb6>
 8015c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	f040 81d4 	bne.w	801600e <nk_panel_end+0xdb6>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
 8015c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c68:	61fb      	str	r3, [r7, #28]
        scaler.h = scrollbar_size.y;
 8015c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015c6c:	623b      	str	r3, [r7, #32]
        scaler.y = layout->bounds.y + layout->bounds.h;
 8015c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c72:	ed93 7a03 	vldr	s14, [r3, #12]
 8015c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8015c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c82:	edc7 7a06 	vstr	s15, [r7, #24]
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 8015c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d00e      	beq.n	8015cb2 <nk_panel_end+0xa5a>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 8015c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015c98:	ed93 7a02 	vldr	s14, [r3, #8]
 8015c9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015ca0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015ca4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cac:	edc7 7a05 	vstr	s15, [r7, #20]
 8015cb0:	e00f      	b.n	8015cd2 <nk_panel_end+0xa7a>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8015cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8015cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8015cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cc6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cce:	edc7 7a05 	vstr	s15, [r7, #20]
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 8015cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015cd6:	685b      	ldr	r3, [r3, #4]
 8015cd8:	f003 0320 	and.w	r3, r3, #32
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d007      	beq.n	8015cf0 <nk_panel_end+0xa98>
            scaler.x -= scaler.w;
 8015ce0:	ed97 7a05 	vldr	s14, [r7, #20]
 8015ce4:	edd7 7a07 	vldr	s15, [r7, #28]
 8015ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cec:	edc7 7a05 	vstr	s15, [r7, #20]

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 8015cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015cf4:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8015cf8:	3314      	adds	r3, #20
 8015cfa:	67bb      	str	r3, [r7, #120]	; 0x78
        if (item->type == NK_STYLE_ITEM_IMAGE)
 8015cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	2b01      	cmp	r3, #1
 8015d02:	d119      	bne.n	8015d38 <nk_panel_end+0xae0>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 8015d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d06:	3304      	adds	r3, #4
 8015d08:	4a25      	ldr	r2, [pc, #148]	; (8015da0 <nk_panel_end+0xb48>)
 8015d0a:	ed97 6a05 	vldr	s12, [r7, #20]
 8015d0e:	edd7 6a06 	vldr	s13, [r7, #24]
 8015d12:	ed97 7a07 	vldr	s14, [r7, #28]
 8015d16:	edd7 7a08 	vldr	s15, [r7, #32]
 8015d1a:	6812      	ldr	r2, [r2, #0]
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	eeb0 0a46 	vmov.f32	s0, s12
 8015d22:	eef0 0a66 	vmov.f32	s1, s13
 8015d26:	eeb0 1a47 	vmov.f32	s2, s14
 8015d2a:	eef0 1a67 	vmov.f32	s3, s15
 8015d2e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015d32:	f7fb fac9 	bl	80112c8 <nk_draw_image>
 8015d36:	e063      	b.n	8015e00 <nk_panel_end+0xba8>
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8015d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015d3c:	685b      	ldr	r3, [r3, #4]
 8015d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d02e      	beq.n	8015da4 <nk_panel_end+0xb4c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8015d46:	edd7 6a05 	vldr	s13, [r7, #20]
 8015d4a:	ed97 6a06 	vldr	s12, [r7, #24]
 8015d4e:	edd7 5a05 	vldr	s11, [r7, #20]
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8015d52:	ed97 7a06 	vldr	s14, [r7, #24]
 8015d56:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8015d5a:	ee37 5a27 	vadd.f32	s10, s14, s15
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8015d5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8015d62:	edd7 7a07 	vldr	s15, [r7, #28]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8015d66:	ee77 4a27 	vadd.f32	s9, s14, s15
                    scaler.y + scaler.h, item->data.color);
 8015d6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8015d6e:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8015d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d78:	6859      	ldr	r1, [r3, #4]
 8015d7a:	eef0 2a67 	vmov.f32	s5, s15
 8015d7e:	eeb0 2a64 	vmov.f32	s4, s9
 8015d82:	eef0 1a45 	vmov.f32	s3, s10
 8015d86:	eeb0 1a65 	vmov.f32	s2, s11
 8015d8a:	eef0 0a46 	vmov.f32	s1, s12
 8015d8e:	eeb0 0a66 	vmov.f32	s0, s13
 8015d92:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015d96:	f7fb f91d 	bl	8010fd4 <nk_fill_triangle>
 8015d9a:	e031      	b.n	8015e00 <nk_panel_end+0xba8>
 8015d9c:	00000000 	.word	0x00000000
 8015da0:	080234f8 	.word	0x080234f8
            } else {
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8015da4:	ed97 7a05 	vldr	s14, [r7, #20]
 8015da8:	edd7 7a07 	vldr	s15, [r7, #28]
 8015dac:	ee77 6a27 	vadd.f32	s13, s14, s15
 8015db0:	ed97 6a06 	vldr	s12, [r7, #24]
 8015db4:	ed97 7a05 	vldr	s14, [r7, #20]
 8015db8:	edd7 7a07 	vldr	s15, [r7, #28]
 8015dbc:	ee77 5a27 	vadd.f32	s11, s14, s15
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8015dc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8015dc4:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8015dc8:	ee37 5a27 	vadd.f32	s10, s14, s15
 8015dcc:	edd7 4a05 	vldr	s9, [r7, #20]
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8015dd0:	ed97 7a06 	vldr	s14, [r7, #24]
 8015dd4:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8015dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015dde:	6859      	ldr	r1, [r3, #4]
 8015de0:	eef0 2a67 	vmov.f32	s5, s15
 8015de4:	eeb0 2a64 	vmov.f32	s4, s9
 8015de8:	eef0 1a45 	vmov.f32	s3, s10
 8015dec:	eeb0 1a65 	vmov.f32	s2, s11
 8015df0:	eef0 0a46 	vmov.f32	s1, s12
 8015df4:	eeb0 0a66 	vmov.f32	s0, s13
 8015df8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8015dfc:	f7fb f8ea 	bl	8010fd4 <nk_fill_triangle>
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 8015e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	f040 80ff 	bne.w	801600e <nk_panel_end+0xdb6>
            struct nk_vec2 window_size = style->window.min_size;
 8015e10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e18:	461a      	mov	r2, r3
 8015e1a:	f107 030c 	add.w	r3, r7, #12
 8015e1e:	f602 02e4 	addw	r2, r2, #2276	; 0x8e4
 8015e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e26:	e883 0003 	stmia.w	r3, {r0, r1}
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8015e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015e2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8015e32:	677b      	str	r3, [r7, #116]	; 0x74
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 8015e34:	ed97 6a05 	vldr	s12, [r7, #20]
 8015e38:	edd7 6a06 	vldr	s13, [r7, #24]
 8015e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8015e40:	edd7 7a08 	vldr	s15, [r7, #32]
 8015e44:	2201      	movs	r2, #1
 8015e46:	eeb0 0a46 	vmov.f32	s0, s12
 8015e4a:	eef0 0a66 	vmov.f32	s1, s13
 8015e4e:	eeb0 1a47 	vmov.f32	s2, s14
 8015e52:	eef0 1a67 	vmov.f32	s3, s15
 8015e56:	2100      	movs	r1, #0
 8015e58:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8015e5c:	f7fc fad4 	bl	8012408 <nk_input_has_mouse_click_down_in_rect>
 8015e60:	6738      	str	r0, [r7, #112]	; 0x70
                    NK_BUTTON_LEFT, scaler, nk_true);

            if (left_mouse_down && left_mouse_click_in_scaler) {
 8015e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	f000 80d2 	beq.w	801600e <nk_panel_end+0xdb6>
 8015e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f000 80ce 	beq.w	801600e <nk_panel_end+0xdb6>
                float delta_x = in->mouse.delta.x;
 8015e72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015e76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8015e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8015e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015e82:	685b      	ldr	r3, [r3, #4]
 8015e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d013      	beq.n	8015eb4 <nk_panel_end+0xc5c>
                    delta_x = -delta_x;
 8015e8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015e90:	eef1 7a67 	vneg.f32	s15, s15
 8015e94:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                    window->bounds.x += in->mouse.delta.x;
 8015e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e9c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8015ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ea4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8015ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015eb0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                }
                /* dragging in x-direction  */
                if (window->bounds.w + delta_x >= window_size.x) {
 8015eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015eb8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8015ebc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8015ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	db2e      	blt.n	8015f30 <nk_panel_end+0xcd8>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 8015ed2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ede:	d411      	bmi.n	8015f04 <nk_panel_end+0xcac>
 8015ee0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eec:	dd20      	ble.n	8015f30 <nk_panel_end+0xcd8>
 8015eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ef2:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8015ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8015efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f02:	db15      	blt.n	8015f30 <nk_panel_end+0xcd8>
                        window->bounds.w = window->bounds.w + delta_x;
 8015f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f08:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8015f0c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f18:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 8015f1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8015f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f24:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8015f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f2c:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                /* dragging in y-direction (only possible if static window) */
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 8015f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d145      	bne.n	8015fca <nk_panel_end+0xd72>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 8015f3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8015f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f46:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8015f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f4e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f5e:	d534      	bpl.n	8015fca <nk_panel_end+0xd72>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 8015f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f64:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f70:	d413      	bmi.n	8015f9a <nk_panel_end+0xd42>
 8015f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f76:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f82:	dd22      	ble.n	8015fca <nk_panel_end+0xd72>
 8015f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f88:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8015f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f98:	db17      	blt.n	8015fca <nk_panel_end+0xd72>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 8015f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f9e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8015fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015fa6:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015fb2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 8015fb6:	ed97 7a06 	vldr	s14, [r7, #24]
 8015fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015fbe:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8015fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fc6:	edc7 7a06 	vstr	s15, [r7, #24]
                        }
                    }
                }
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 8015fd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8015fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8015fde:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015fe2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8015fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015fee:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 8015ff2:	ed97 7a06 	vldr	s14, [r7, #24]
 8015ff6:	edd7 6a08 	vldr	s13, [r7, #32]
 8015ffa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015ffe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801600a:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 801600e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	4618      	mov	r0, r3
 8016016:	f7fe f9b7 	bl	8014388 <nk_panel_is_sub>
 801601a:	4603      	mov	r3, r0
 801601c:	2b00      	cmp	r3, #0
 801601e:	d112      	bne.n	8016046 <nk_panel_end+0xdee>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 8016020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801602a:	2b00      	cmp	r3, #0
 801602c:	d006      	beq.n	801603c <nk_panel_end+0xde4>
            nk_command_buffer_reset(&window->buffer);
 801602e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016032:	3364      	adds	r3, #100	; 0x64
 8016034:	4618      	mov	r0, r3
 8016036:	f7fa fbd9 	bl	80107ec <nk_command_buffer_reset>
 801603a:	e004      	b.n	8016046 <nk_panel_end+0xdee>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
 801603c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7f9 ff83 	bl	800ff4c <nk_finish>
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 8016046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016050:	2b00      	cmp	r3, #0
 8016052:	d00f      	beq.n	8016074 <nk_panel_end+0xe1c>
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8016054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801605e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016062:	605a      	str	r2, [r3, #4]
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 8016064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801606e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016072:	605a      	str	r2, [r3, #4]
    }
    window->flags = layout->flags;
 8016074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016078:	685a      	ldr	r2, [r3, #4]
 801607a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801607e:	649a      	str	r2, [r3, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 8016080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016088:	2b00      	cmp	r3, #0
 801608a:	d01b      	beq.n	80160c4 <nk_panel_end+0xe6c>
 801608c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016090:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8016094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801609c:	429a      	cmp	r2, r3
 801609e:	d011      	beq.n	80160c4 <nk_panel_end+0xe6c>
        window->property.active == window->property.prev) {
 80160a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80160a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    if (window->property.active && window->property.old != window->property.seq &&
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d107      	bne.n	80160c4 <nk_panel_end+0xe6c>
        nk_zero(&window->property, sizeof(window->property));
 80160b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160b8:	3394      	adds	r3, #148	; 0x94
 80160ba:	2168      	movs	r1, #104	; 0x68
 80160bc:	4618      	mov	r0, r3
 80160be:	f005 ff6f 	bl	801bfa0 <nk_zero>
 80160c2:	e014      	b.n	80160ee <nk_panel_end+0xe96>
    } else {
        window->property.old = window->property.seq;
 80160c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80160cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160d0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        window->property.prev = window->property.active;
 80160d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80160dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        window->property.seq = 0;
 80160e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160e8:	2200      	movs	r2, #0
 80160ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 80160ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160f2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d01c      	beq.n	8016134 <nk_panel_end+0xedc>
 80160fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80160fe:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8016102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016106:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801610a:	429a      	cmp	r2, r3
 801610c:	d012      	beq.n	8016134 <nk_panel_end+0xedc>
       window->edit.active == window->edit.prev) {
 801610e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016112:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8016116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801611a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    if (window->edit.active && window->edit.old != window->edit.seq &&
 801611e:	429a      	cmp	r2, r3
 8016120:	d108      	bne.n	8016134 <nk_panel_end+0xedc>
        nk_zero(&window->edit, sizeof(window->edit));
 8016122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016126:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801612a:	212c      	movs	r1, #44	; 0x2c
 801612c:	4618      	mov	r0, r3
 801612e:	f005 ff37 	bl	801bfa0 <nk_zero>
 8016132:	e014      	b.n	801615e <nk_panel_end+0xf06>
    } else {
        window->edit.old = window->edit.seq;
 8016134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016138:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 801613c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016140:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        window->edit.prev = window->edit.active;
 8016144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016148:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 801614c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016150:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        window->edit.seq = 0;
 8016154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016158:	2200      	movs	r2, #0
 801615a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 801615e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016162:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8016166:	2b00      	cmp	r3, #0
 8016168:	d019      	beq.n	801619e <nk_panel_end+0xf46>
 801616a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801616e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8016172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016176:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801617a:	429a      	cmp	r2, r3
 801617c:	d00f      	beq.n	801619e <nk_panel_end+0xf46>
        window->popup.con_count = 0;
 801617e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016182:	2200      	movs	r2, #0
 8016184:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        window->popup.con_old = 0;
 8016188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801618c:	2200      	movs	r2, #0
 801618e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.active_con = 0;
 8016192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016196:	2200      	movs	r2, #0
 8016198:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 801619c:	e00c      	b.n	80161b8 <nk_panel_end+0xf60>
    } else {
        window->popup.con_old = window->popup.con_count;
 801619e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161a2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80161a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161aa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.con_count = 0;
 80161ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161b2:	2200      	movs	r2, #0
 80161b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 80161b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161bc:	2200      	movs	r2, #0
 80161be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 80161c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80161c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d007      	beq.n	80161de <nk_panel_end+0xf86>
 80161ce:	4b05      	ldr	r3, [pc, #20]	; (80161e4 <nk_panel_end+0xf8c>)
 80161d0:	4a05      	ldr	r2, [pc, #20]	; (80161e8 <nk_panel_end+0xf90>)
 80161d2:	f240 216b 	movw	r1, #619	; 0x26b
 80161d6:	4805      	ldr	r0, [pc, #20]	; (80161ec <nk_panel_end+0xf94>)
 80161d8:	f007 fbca 	bl	801d970 <__assert_func>
        return;
 80161dc:	bf00      	nop
}
 80161de:	37c4      	adds	r7, #196	; 0xc4
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd90      	pop	{r4, r7, pc}
 80161e4:	08021924 	.word	0x08021924
 80161e8:	0802350c 	.word	0x0802350c
 80161ec:	080218e0 	.word	0x080218e0

080161f0 <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b084      	sub	sp, #16
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	60f8      	str	r0, [r7, #12]
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
    NK_ASSERT(capacity >= 1);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d105      	bne.n	801620e <nk_pool_init+0x1e>
 8016202:	4b0e      	ldr	r3, [pc, #56]	; (801623c <nk_pool_init+0x4c>)
 8016204:	4a0e      	ldr	r2, [pc, #56]	; (8016240 <nk_pool_init+0x50>)
 8016206:	210d      	movs	r1, #13
 8016208:	480e      	ldr	r0, [pc, #56]	; (8016244 <nk_pool_init+0x54>)
 801620a:	f007 fbb1 	bl	801d970 <__assert_func>
    nk_zero(pool, sizeof(*pool));
 801620e:	2128      	movs	r1, #40	; 0x28
 8016210:	68f8      	ldr	r0, [r7, #12]
 8016212:	f005 fec5 	bl	801bfa0 <nk_zero>
    pool->alloc = *alloc;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	68ba      	ldr	r2, [r7, #8]
 801621a:	ca07      	ldmia	r2, {r0, r1, r2}
 801621c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pool->capacity = capacity;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	61da      	str	r2, [r3, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2201      	movs	r2, #1
 801622a:	731a      	strb	r2, [r3, #12]
    pool->pages = 0;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2200      	movs	r2, #0
 8016230:	615a      	str	r2, [r3, #20]
}
 8016232:	bf00      	nop
 8016234:	3710      	adds	r7, #16
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	0802193c 	.word	0x0802193c
 8016240:	0802351c 	.word	0x0802351c
 8016244:	0802194c 	.word	0x0802194c

08016248 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b084      	sub	sp, #16
 801624c:	af00      	add	r7, sp, #0
 801624e:	60f8      	str	r0, [r7, #12]
 8016250:	60b9      	str	r1, [r7, #8]
 8016252:	607a      	str	r2, [r7, #4]
    nk_zero(pool, sizeof(*pool));
 8016254:	2128      	movs	r1, #40	; 0x28
 8016256:	68f8      	ldr	r0, [r7, #12]
 8016258:	f005 fea2 	bl	801bfa0 <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8016262:	d205      	bcs.n	8016270 <nk_pool_init_fixed+0x28>
 8016264:	4b10      	ldr	r3, [pc, #64]	; (80162a8 <nk_pool_init_fixed+0x60>)
 8016266:	4a11      	ldr	r2, [pc, #68]	; (80162ac <nk_pool_init_fixed+0x64>)
 8016268:	2125      	movs	r1, #37	; 0x25
 801626a:	4811      	ldr	r0, [pc, #68]	; (80162b0 <nk_pool_init_fixed+0x68>)
 801626c:	f007 fb80 	bl	801d970 <__assert_func>
    if (size < sizeof(struct nk_page)) return;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8016276:	d313      	bcc.n	80162a0 <nk_pool_init_fixed+0x58>
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801627e:	091b      	lsrs	r3, r3, #4
 8016280:	4a0c      	ldr	r2, [pc, #48]	; (80162b4 <nk_pool_init_fixed+0x6c>)
 8016282:	fba2 2303 	umull	r2, r3, r2, r3
 8016286:	1c5a      	adds	r2, r3, #1
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	61da      	str	r2, [r3, #28]
    pool->pages = (struct nk_page*)memory;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	68ba      	ldr	r2, [r7, #8]
 8016290:	615a      	str	r2, [r3, #20]
    pool->type = NK_BUFFER_FIXED;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	2200      	movs	r2, #0
 8016296:	731a      	strb	r2, [r3, #12]
    pool->size = size;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	621a      	str	r2, [r3, #32]
 801629e:	e000      	b.n	80162a2 <nk_pool_init_fixed+0x5a>
    if (size < sizeof(struct nk_page)) return;
 80162a0:	bf00      	nop
}
 80162a2:	3710      	adds	r7, #16
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	08021968 	.word	0x08021968
 80162ac:	0802352c 	.word	0x0802352c
 80162b0:	0802194c 	.word	0x0802194c
 80162b4:	097b425f 	.word	0x097b425f

080162b8 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	695b      	ldr	r3, [r3, #20]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d006      	beq.n	80162d6 <nk_pool_alloc+0x1e>
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	695b      	ldr	r3, [r3, #20]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	69db      	ldr	r3, [r3, #28]
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d342      	bcc.n	801635c <nk_pool_alloc+0xa4>
        /* allocate new page */
        struct nk_page *page;
        if (pool->type == NK_BUFFER_FIXED) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	7b1b      	ldrb	r3, [r3, #12]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d11e      	bne.n	801631c <nk_pool_alloc+0x64>
            NK_ASSERT(pool->pages);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	695b      	ldr	r3, [r3, #20]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d105      	bne.n	80162f2 <nk_pool_alloc+0x3a>
 80162e6:	4b26      	ldr	r3, [pc, #152]	; (8016380 <nk_pool_alloc+0xc8>)
 80162e8:	4a26      	ldr	r2, [pc, #152]	; (8016384 <nk_pool_alloc+0xcc>)
 80162ea:	2134      	movs	r1, #52	; 0x34
 80162ec:	4826      	ldr	r0, [pc, #152]	; (8016388 <nk_pool_alloc+0xd0>)
 80162ee:	f007 fb3f 	bl	801d970 <__assert_func>
            if (!pool->pages) return 0;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	695b      	ldr	r3, [r3, #20]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d101      	bne.n	80162fe <nk_pool_alloc+0x46>
 80162fa:	2300      	movs	r3, #0
 80162fc:	e03b      	b.n	8016376 <nk_pool_alloc+0xbe>
            NK_ASSERT(pool->pages->size < pool->capacity);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	695b      	ldr	r3, [r3, #20]
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	69db      	ldr	r3, [r3, #28]
 8016308:	429a      	cmp	r2, r3
 801630a:	d305      	bcc.n	8016318 <nk_pool_alloc+0x60>
 801630c:	4b1f      	ldr	r3, [pc, #124]	; (801638c <nk_pool_alloc+0xd4>)
 801630e:	4a1d      	ldr	r2, [pc, #116]	; (8016384 <nk_pool_alloc+0xcc>)
 8016310:	2136      	movs	r1, #54	; 0x36
 8016312:	481d      	ldr	r0, [pc, #116]	; (8016388 <nk_pool_alloc+0xd0>)
 8016314:	f007 fb2c 	bl	801d970 <__assert_func>
            return 0;
 8016318:	2300      	movs	r3, #0
 801631a:	e02c      	b.n	8016376 <nk_pool_alloc+0xbe>
        } else {
            nk_size size = sizeof(struct nk_page);
 801631c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8016320:	60fb      	str	r3, [r7, #12]
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	69db      	ldr	r3, [r3, #28]
 8016326:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 801632a:	fb03 f202 	mul.w	r2, r3, r2
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	4413      	add	r3, r2
 8016332:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8016336:	60fb      	str	r3, [r7, #12]
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	2100      	movs	r1, #0
 8016342:	6800      	ldr	r0, [r0, #0]
 8016344:	4798      	blx	r3
 8016346:	60b8      	str	r0, [r7, #8]
            page->next = pool->pages;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	695a      	ldr	r2, [r3, #20]
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	605a      	str	r2, [r3, #4]
            pool->pages = page;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	68ba      	ldr	r2, [r7, #8]
 8016354:	615a      	str	r2, [r3, #20]
            page->size = 0;
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	2200      	movs	r2, #0
 801635a:	601a      	str	r2, [r3, #0]
        }
    } return &pool->pages->win[pool->pages->size++];
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6959      	ldr	r1, [r3, #20]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	695a      	ldr	r2, [r3, #20]
 8016364:	6813      	ldr	r3, [r2, #0]
 8016366:	1c58      	adds	r0, r3, #1
 8016368:	6010      	str	r0, [r2, #0]
 801636a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 801636e:	fb02 f303 	mul.w	r3, r2, r3
 8016372:	3308      	adds	r3, #8
 8016374:	440b      	add	r3, r1
}
 8016376:	4618      	mov	r0, r3
 8016378:	3710      	adds	r7, #16
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	08021988 	.word	0x08021988
 8016384:	08023540 	.word	0x08023540
 8016388:	0802194c 	.word	0x0802194c
 801638c:	08021994 	.word	0x08021994

08016390 <nk_nonblock_begin>:
}
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 8016390:	b5b0      	push	{r4, r5, r7, lr}
 8016392:	b096      	sub	sp, #88	; 0x58
 8016394:	af00      	add	r7, sp, #0
 8016396:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016398:	62b9      	str	r1, [r7, #40]	; 0x28
 801639a:	eeb0 4a40 	vmov.f32	s8, s0
 801639e:	eef0 4a60 	vmov.f32	s9, s1
 80163a2:	eeb0 5a41 	vmov.f32	s10, s2
 80163a6:	eef0 5a61 	vmov.f32	s11, s3
 80163aa:	eeb0 6a42 	vmov.f32	s12, s4
 80163ae:	eef0 6a62 	vmov.f32	s13, s5
 80163b2:	eeb0 7a43 	vmov.f32	s14, s6
 80163b6:	eef0 7a63 	vmov.f32	s15, s7
 80163ba:	4613      	mov	r3, r2
 80163bc:	ed87 4a06 	vstr	s8, [r7, #24]
 80163c0:	edc7 4a07 	vstr	s9, [r7, #28]
 80163c4:	ed87 5a08 	vstr	s10, [r7, #32]
 80163c8:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 80163cc:	ed87 6a02 	vstr	s12, [r7, #8]
 80163d0:	edc7 6a03 	vstr	s13, [r7, #12]
 80163d4:	ed87 7a04 	vstr	s14, [r7, #16]
 80163d8:	edc7 7a05 	vstr	s15, [r7, #20]
 80163dc:	71fb      	strb	r3, [r7, #7]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;
 80163de:	2301      	movs	r3, #1
 80163e0:	653b      	str	r3, [r7, #80]	; 0x50

    NK_ASSERT(ctx);
 80163e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d105      	bne.n	80163f4 <nk_nonblock_begin+0x64>
 80163e8:	4baf      	ldr	r3, [pc, #700]	; (80166a8 <nk_nonblock_begin+0x318>)
 80163ea:	4ab0      	ldr	r2, [pc, #704]	; (80166ac <nk_nonblock_begin+0x31c>)
 80163ec:	2173      	movs	r1, #115	; 0x73
 80163ee:	48b0      	ldr	r0, [pc, #704]	; (80166b0 <nk_nonblock_begin+0x320>)
 80163f0:	f007 fabe 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 80163f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80163fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d105      	bne.n	801640e <nk_nonblock_begin+0x7e>
 8016402:	4bac      	ldr	r3, [pc, #688]	; (80166b4 <nk_nonblock_begin+0x324>)
 8016404:	4aa9      	ldr	r2, [pc, #676]	; (80166ac <nk_nonblock_begin+0x31c>)
 8016406:	2174      	movs	r1, #116	; 0x74
 8016408:	48a9      	ldr	r0, [pc, #676]	; (80166b0 <nk_nonblock_begin+0x320>)
 801640a:	f007 fab1 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016410:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016414:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801641c:	2b00      	cmp	r3, #0
 801641e:	d105      	bne.n	801642c <nk_nonblock_begin+0x9c>
 8016420:	4ba5      	ldr	r3, [pc, #660]	; (80166b8 <nk_nonblock_begin+0x328>)
 8016422:	4aa2      	ldr	r2, [pc, #648]	; (80166ac <nk_nonblock_begin+0x31c>)
 8016424:	2175      	movs	r1, #117	; 0x75
 8016426:	48a2      	ldr	r0, [pc, #648]	; (80166b0 <nk_nonblock_begin+0x320>)
 8016428:	f007 faa2 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d00f      	beq.n	8016452 <nk_nonblock_begin+0xc2>
 8016432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016434:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016438:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801643c:	2b00      	cmp	r3, #0
 801643e:	d008      	beq.n	8016452 <nk_nonblock_begin+0xc2>
 8016440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016442:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016446:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801644a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801644e:	2b00      	cmp	r3, #0
 8016450:	d101      	bne.n	8016456 <nk_nonblock_begin+0xc6>
        return 0;
 8016452:	2300      	movs	r3, #0
 8016454:	e146      	b.n	80166e4 <nk_nonblock_begin+0x354>

    /* popups cannot have popups */
    win = ctx->current;
 8016456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016458:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801645c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016460:	647b      	str	r3, [r7, #68]	; 0x44
    panel = win->layout;
 8016462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016468:	643b      	str	r3, [r7, #64]	; 0x40
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 801646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8016472:	2b00      	cmp	r3, #0
 8016474:	d005      	beq.n	8016482 <nk_nonblock_begin+0xf2>
 8016476:	4b91      	ldr	r3, [pc, #580]	; (80166bc <nk_nonblock_begin+0x32c>)
 8016478:	4a8c      	ldr	r2, [pc, #560]	; (80166ac <nk_nonblock_begin+0x31c>)
 801647a:	217c      	movs	r1, #124	; 0x7c
 801647c:	488c      	ldr	r0, [pc, #560]	; (80166b0 <nk_nonblock_begin+0x320>)
 801647e:	f007 fa77 	bl	801d970 <__assert_func>
    (void)panel;
    popup = win->popup.win;
 8016482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016484:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8016488:	657b      	str	r3, [r7, #84]	; 0x54
    if (!popup) {
 801648a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801648c:	2b00      	cmp	r3, #0
 801648e:	d11b      	bne.n	80164c8 <nk_nonblock_begin+0x138>
        /* create window for nonblocking popup */
        popup = (struct nk_window*)nk_create_window(ctx);
 8016490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016492:	f006 f99d 	bl	801c7d0 <nk_create_window>
 8016496:	6578      	str	r0, [r7, #84]	; 0x54
        popup->parent = win;
 8016498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801649a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801649c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 80164a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80164a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.type = panel_type;
 80164a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164aa:	79fa      	ldrb	r2, [r7, #7]
 80164ac:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 80164b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164b2:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80164b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b8:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 80164bc:	330c      	adds	r3, #12
 80164be:	2201      	movs	r2, #1
 80164c0:	4619      	mov	r1, r3
 80164c2:	f7fa f955 	bl	8010770 <nk_command_buffer_init>
 80164c6:	e03a      	b.n	801653e <nk_nonblock_begin+0x1ae>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 80164c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ca:	2100      	movs	r1, #0
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7fc f89e 	bl	801260e <nk_input_is_mouse_pressed>
 80164d2:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 80164d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d6:	ed97 6a06 	vldr	s12, [r7, #24]
 80164da:	edd7 6a07 	vldr	s13, [r7, #28]
 80164de:	ed97 7a08 	vldr	s14, [r7, #32]
 80164e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80164e6:	eeb0 0a46 	vmov.f32	s0, s12
 80164ea:	eef0 0a66 	vmov.f32	s1, s13
 80164ee:	eeb0 1a47 	vmov.f32	s2, s14
 80164f2:	eef0 1a67 	vmov.f32	s3, s15
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7fb ffcd 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 80164fc:	63b8      	str	r0, [r7, #56]	; 0x38
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 80164fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016500:	ed97 6a02 	vldr	s12, [r7, #8]
 8016504:	edd7 6a03 	vldr	s13, [r7, #12]
 8016508:	ed97 7a04 	vldr	s14, [r7, #16]
 801650c:	edd7 7a05 	vldr	s15, [r7, #20]
 8016510:	eeb0 0a46 	vmov.f32	s0, s12
 8016514:	eef0 0a66 	vmov.f32	s1, s13
 8016518:	eeb0 1a47 	vmov.f32	s2, s14
 801651c:	eef0 1a67 	vmov.f32	s3, s15
 8016520:	4618      	mov	r0, r3
 8016522:	f7fb ffb8 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 8016526:	6378      	str	r0, [r7, #52]	; 0x34
        if (pressed && (!in_body || in_header))
 8016528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801652a:	2b00      	cmp	r3, #0
 801652c:	d007      	beq.n	801653e <nk_nonblock_begin+0x1ae>
 801652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016530:	2b00      	cmp	r3, #0
 8016532:	d002      	beq.n	801653a <nk_nonblock_begin+0x1aa>
 8016534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016536:	2b00      	cmp	r3, #0
 8016538:	d001      	beq.n	801653e <nk_nonblock_begin+0x1ae>
            is_active = nk_false;
 801653a:	2300      	movs	r3, #0
 801653c:	653b      	str	r3, [r7, #80]	; 0x50
    }
    win->popup.header = header;
 801653e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016540:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8016544:	f107 0308 	add.w	r3, r7, #8
 8016548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801654a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
 801654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016550:	2b00      	cmp	r3, #0
 8016552:	d113      	bne.n	801657c <nk_nonblock_begin+0x1ec>
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 8016554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801655a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 801655c:	e009      	b.n	8016572 <nk_nonblock_begin+0x1e2>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 801655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016568:	605a      	str	r2, [r3, #4]
            root = root->parent;
 801656a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801656c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8016570:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8016572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016574:	2b00      	cmp	r3, #0
 8016576:	d1f2      	bne.n	801655e <nk_nonblock_begin+0x1ce>
        }
        return is_active;
 8016578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657a:	e0b3      	b.n	80166e4 <nk_nonblock_begin+0x354>
    }
    popup->bounds = body;
 801657c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801657e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8016582:	f107 0318 	add.w	r3, r7, #24
 8016586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->parent = win;
 801658c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801658e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016590:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 8016594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016596:	f7fd fcaf 	bl	8013ef8 <nk_create_panel>
 801659a:	4602      	mov	r2, r0
 801659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801659e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 80165a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165a6:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 80165a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165ac:	f043 0201 	orr.w	r2, r3, #1
 80165b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165b2:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_DYNAMIC;
 80165b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165b8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80165bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165be:	649a      	str	r2, [r3, #72]	; 0x48
    popup->seq = ctx->seq;
 80165c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165c6:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 80165ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165cc:	601a      	str	r2, [r3, #0]
    win->popup.active = 1;
 80165ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165d0:	2201      	movs	r2, #1
 80165d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 80165d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d105      	bne.n	80165ec <nk_nonblock_begin+0x25c>
 80165e0:	4b37      	ldr	r3, [pc, #220]	; (80166c0 <nk_nonblock_begin+0x330>)
 80165e2:	4a32      	ldr	r2, [pc, #200]	; (80166ac <nk_nonblock_begin+0x31c>)
 80165e4:	21a6      	movs	r1, #166	; 0xa6
 80165e6:	4832      	ldr	r0, [pc, #200]	; (80166b0 <nk_nonblock_begin+0x320>)
 80165e8:	f007 f9c2 	bl	801d970 <__assert_func>

    nk_start_popup(ctx, win);
 80165ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80165ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165f0:	f7f9 fbfe 	bl	800fdf0 <nk_start_popup>
    popup->buffer = win->buffer;
 80165f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80165f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165f8:	f102 0464 	add.w	r4, r2, #100	; 0x64
 80165fc:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8016600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016608:	e895 0003 	ldmia.w	r5, {r0, r1}
 801660c:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8016610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016612:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8016616:	4b2b      	ldr	r3, [pc, #172]	; (80166c4 <nk_nonblock_begin+0x334>)
 8016618:	ed93 6a00 	vldr	s12, [r3]
 801661c:	edd3 6a01 	vldr	s13, [r3, #4]
 8016620:	ed93 7a02 	vldr	s14, [r3, #8]
 8016624:	edd3 7a03 	vldr	s15, [r3, #12]
 8016628:	eeb0 0a46 	vmov.f32	s0, s12
 801662c:	eef0 0a66 	vmov.f32	s1, s13
 8016630:	eeb0 1a47 	vmov.f32	s2, s14
 8016634:	eef0 1a67 	vmov.f32	s3, s15
 8016638:	4610      	mov	r0, r2
 801663a:	f7fa f96b 	bl	8010914 <nk_push_scissor>
    ctx->current = popup;
 801663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016640:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016644:	461a      	mov	r2, r3
 8016646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016648:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658

    nk_panel_begin(ctx, 0, panel_type);
 801664c:	79fb      	ldrb	r3, [r7, #7]
 801664e:	461a      	mov	r2, r3
 8016650:	2100      	movs	r1, #0
 8016652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016654:	f7fd febe 	bl	80143d4 <nk_panel_begin>
    win->buffer = popup->buffer;
 8016658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801665a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801665c:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8016660:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8016664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801666a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801666c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016670:	e884 0003 	stmia.w	r4, {r0, r1}
    popup->layout->parent = win->layout;
 8016674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801667a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801667c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8016680:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 8016684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801668a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801668c:	325c      	adds	r2, #92	; 0x5c
 801668e:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 8016690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016698:	3260      	adds	r2, #96	; 0x60
 801669a:	61da      	str	r2, [r3, #28]

    /* set read only mode to all parent panels */
    {struct nk_panel *root;
    root = win->layout;
 801669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80166a2:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 80166a4:	e01a      	b.n	80166dc <nk_nonblock_begin+0x34c>
 80166a6:	bf00      	nop
 80166a8:	080219b8 	.word	0x080219b8
 80166ac:	08023560 	.word	0x08023560
 80166b0:	080219bc 	.word	0x080219bc
 80166b4:	080219e0 	.word	0x080219e0
 80166b8:	080219f0 	.word	0x080219f0
 80166bc:	08021a58 	.word	0x08021a58
 80166c0:	08021a7c 	.word	0x08021a7c
 80166c4:	08023550 	.word	0x08023550
        root->flags |= NK_WINDOW_ROM;
 80166c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80166d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166d2:	605a      	str	r2, [r3, #4]
        root = root->parent;
 80166d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166d6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80166da:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 80166dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d1f2      	bne.n	80166c8 <nk_nonblock_begin+0x338>
    }}
    return is_active;
 80166e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3758      	adds	r7, #88	; 0x58
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bdb0      	pop	{r4, r5, r7, pc}

080166ec <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b084      	sub	sp, #16
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    NK_ASSERT(ctx);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d105      	bne.n	8016706 <nk_popup_close+0x1a>
 80166fa:	4b1d      	ldr	r3, [pc, #116]	; (8016770 <nk_popup_close+0x84>)
 80166fc:	4a1d      	ldr	r2, [pc, #116]	; (8016774 <nk_popup_close+0x88>)
 80166fe:	21c0      	movs	r1, #192	; 0xc0
 8016700:	481d      	ldr	r0, [pc, #116]	; (8016778 <nk_popup_close+0x8c>)
 8016702:	f007 f935 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current) return;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d02c      	beq.n	8016766 <nk_popup_close+0x7a>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016712:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016716:	2b00      	cmp	r3, #0
 8016718:	d025      	beq.n	8016766 <nk_popup_close+0x7a>

    popup = ctx->current;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016720:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8016724:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(popup->parent);
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801672c:	2b00      	cmp	r3, #0
 801672e:	d105      	bne.n	801673c <nk_popup_close+0x50>
 8016730:	4b12      	ldr	r3, [pc, #72]	; (801677c <nk_popup_close+0x90>)
 8016732:	4a10      	ldr	r2, [pc, #64]	; (8016774 <nk_popup_close+0x88>)
 8016734:	21c4      	movs	r1, #196	; 0xc4
 8016736:	4810      	ldr	r0, [pc, #64]	; (8016778 <nk_popup_close+0x8c>)
 8016738:	f007 f91a 	bl	801d970 <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8016748:	2b00      	cmp	r3, #0
 801674a:	d105      	bne.n	8016758 <nk_popup_close+0x6c>
 801674c:	4b0c      	ldr	r3, [pc, #48]	; (8016780 <nk_popup_close+0x94>)
 801674e:	4a09      	ldr	r2, [pc, #36]	; (8016774 <nk_popup_close+0x88>)
 8016750:	21c5      	movs	r1, #197	; 0xc5
 8016752:	4809      	ldr	r0, [pc, #36]	; (8016778 <nk_popup_close+0x8c>)
 8016754:	f007 f90c 	bl	801d970 <__assert_func>
    popup->flags |= NK_WINDOW_HIDDEN;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801675c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	649a      	str	r2, [r3, #72]	; 0x48
 8016764:	e000      	b.n	8016768 <nk_popup_close+0x7c>
    if (!ctx || !ctx->current) return;
 8016766:	bf00      	nop
}
 8016768:	3710      	adds	r7, #16
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}
 801676e:	bf00      	nop
 8016770:	080219b8 	.word	0x080219b8
 8016774:	08023574 	.word	0x08023574
 8016778:	080219bc 	.word	0x080219bc
 801677c:	08021a8c 	.word	0x08021a8c
 8016780:	08021a9c 	.word	0x08021a9c

08016784 <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 8016784:	b5b0      	push	{r4, r5, r7, lr}
 8016786:	b086      	sub	sp, #24
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d105      	bne.n	801679e <nk_popup_end+0x1a>
 8016792:	4b5a      	ldr	r3, [pc, #360]	; (80168fc <nk_popup_end+0x178>)
 8016794:	4a5a      	ldr	r2, [pc, #360]	; (8016900 <nk_popup_end+0x17c>)
 8016796:	21ce      	movs	r1, #206	; 0xce
 8016798:	485a      	ldr	r0, [pc, #360]	; (8016904 <nk_popup_end+0x180>)
 801679a:	f007 f8e9 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80167a4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d105      	bne.n	80167b8 <nk_popup_end+0x34>
 80167ac:	4b56      	ldr	r3, [pc, #344]	; (8016908 <nk_popup_end+0x184>)
 80167ae:	4a54      	ldr	r2, [pc, #336]	; (8016900 <nk_popup_end+0x17c>)
 80167b0:	21cf      	movs	r1, #207	; 0xcf
 80167b2:	4854      	ldr	r0, [pc, #336]	; (8016904 <nk_popup_end+0x180>)
 80167b4:	f007 f8dc 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80167be:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80167c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d105      	bne.n	80167d6 <nk_popup_end+0x52>
 80167ca:	4b50      	ldr	r3, [pc, #320]	; (801690c <nk_popup_end+0x188>)
 80167cc:	4a4c      	ldr	r2, [pc, #304]	; (8016900 <nk_popup_end+0x17c>)
 80167ce:	21d0      	movs	r1, #208	; 0xd0
 80167d0:	484c      	ldr	r0, [pc, #304]	; (8016904 <nk_popup_end+0x180>)
 80167d2:	f007 f8cd 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	f000 8089 	beq.w	80168f0 <nk_popup_end+0x16c>
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80167e4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	f000 8081 	beq.w	80168f0 <nk_popup_end+0x16c>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80167f4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80167f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d077      	beq.n	80168f0 <nk_popup_end+0x16c>
        return;

    popup = ctx->current;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016806:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801680a:	613b      	str	r3, [r7, #16]
    if (!popup->parent) return;
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8016812:	2b00      	cmp	r3, #0
 8016814:	d06e      	beq.n	80168f4 <nk_popup_end+0x170>
    win = popup->parent;
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801681c:	60fb      	str	r3, [r7, #12]
    if (popup->flags & NK_WINDOW_HIDDEN) {
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016826:	2b00      	cmp	r3, #0
 8016828:	d015      	beq.n	8016856 <nk_popup_end+0xd2>
        struct nk_panel *root;
        root = win->layout;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016830:	617b      	str	r3, [r7, #20]
        while (root) {
 8016832:	e009      	b.n	8016848 <nk_popup_end+0xc4>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8016846:	617b      	str	r3, [r7, #20]
        while (root) {
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d1f2      	bne.n	8016834 <nk_popup_end+0xb0>
        }
        win->popup.active = 0;
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2200      	movs	r2, #0
 8016852:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8016856:	693b      	ldr	r3, [r7, #16]
 8016858:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801685c:	4b2c      	ldr	r3, [pc, #176]	; (8016910 <nk_popup_end+0x18c>)
 801685e:	ed93 6a00 	vldr	s12, [r3]
 8016862:	edd3 6a01 	vldr	s13, [r3, #4]
 8016866:	ed93 7a02 	vldr	s14, [r3, #8]
 801686a:	edd3 7a03 	vldr	s15, [r3, #12]
 801686e:	eeb0 0a46 	vmov.f32	s0, s12
 8016872:	eef0 0a66 	vmov.f32	s1, s13
 8016876:	eeb0 1a47 	vmov.f32	s2, s14
 801687a:	eef0 1a67 	vmov.f32	s3, s15
 801687e:	4610      	mov	r0, r2
 8016880:	f7fa f848 	bl	8010914 <nk_push_scissor>
    nk_end(ctx);
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f006 fe5d 	bl	801d544 <nk_end>

    win->buffer = popup->buffer;
 801688a:	68fa      	ldr	r2, [r7, #12]
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8016892:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8016896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801689a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801689c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801689e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80168a2:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_finish_popup(ctx, win);
 80168a6:	68f9      	ldr	r1, [r7, #12]
 80168a8:	6878      	ldr	r0, [r7, #4]
 80168aa:	f7f9 fae5 	bl	800fe78 <nk_finish_popup>
    ctx->current = win;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80168b4:	461a      	mov	r2, r3
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80168c8:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80168cc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80168d0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80168d4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80168d8:	eeb0 0a46 	vmov.f32	s0, s12
 80168dc:	eef0 0a66 	vmov.f32	s1, s13
 80168e0:	eeb0 1a47 	vmov.f32	s2, s14
 80168e4:	eef0 1a67 	vmov.f32	s3, s15
 80168e8:	4610      	mov	r0, r2
 80168ea:	f7fa f813 	bl	8010914 <nk_push_scissor>
 80168ee:	e002      	b.n	80168f6 <nk_popup_end+0x172>
        return;
 80168f0:	bf00      	nop
 80168f2:	e000      	b.n	80168f6 <nk_popup_end+0x172>
    if (!popup->parent) return;
 80168f4:	bf00      	nop
}
 80168f6:	3718      	adds	r7, #24
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bdb0      	pop	{r4, r5, r7, pc}
 80168fc:	080219b8 	.word	0x080219b8
 8016900:	08023584 	.word	0x08023584
 8016904:	080219bc 	.word	0x080219bc
 8016908:	080219e0 	.word	0x080219e0
 801690c:	080219f0 	.word	0x080219f0
 8016910:	08023550 	.word	0x08023550

08016914 <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b092      	sub	sp, #72	; 0x48
 8016918:	af00      	add	r7, sp, #0
 801691a:	61f8      	str	r0, [r7, #28]
 801691c:	61b9      	str	r1, [r7, #24]
 801691e:	617a      	str	r2, [r7, #20]
 8016920:	613b      	str	r3, [r7, #16]
 8016922:	ed87 0a03 	vstr	s0, [r7, #12]
 8016926:	edc7 0a02 	vstr	s1, [r7, #8]
 801692a:	ed87 1a01 	vstr	s2, [r7, #4]
    nk_flags ws = 0;
 801692e:	2300      	movs	r3, #0
 8016930:	627b      	str	r3, [r7, #36]	; 0x24
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	f003 0302 	and.w	r3, r3, #2
 801693a:	2b00      	cmp	r3, #0
 801693c:	d003      	beq.n	8016946 <nk_scrollbar_behavior+0x32>
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	2206      	movs	r2, #6
 8016942:	601a      	str	r2, [r3, #0]
 8016944:	e002      	b.n	801694c <nk_scrollbar_behavior+0x38>
 8016946:	69fb      	ldr	r3, [r7, #28]
 8016948:	2204      	movs	r2, #4
 801694a:	601a      	str	r2, [r3, #0]
    if (!in) return scroll_offset;
 801694c:	69bb      	ldr	r3, [r7, #24]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d101      	bne.n	8016956 <nk_scrollbar_behavior+0x42>
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	e35c      	b.n	8017010 <nk_scrollbar_behavior+0x6fc>

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8016956:	69bb      	ldr	r3, [r7, #24]
 8016958:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801695c:	647b      	str	r3, [r7, #68]	; 0x44
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 801695e:	69bb      	ldr	r3, [r7, #24]
 8016960:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016964:	643b      	str	r3, [r7, #64]	; 0x40
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8016966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016968:	ed93 6a00 	vldr	s12, [r3]
 801696c:	edd3 6a01 	vldr	s13, [r3, #4]
 8016970:	ed93 7a02 	vldr	s14, [r3, #8]
 8016974:	edd3 7a03 	vldr	s15, [r3, #12]
 8016978:	2201      	movs	r2, #1
 801697a:	eeb0 0a46 	vmov.f32	s0, s12
 801697e:	eef0 0a66 	vmov.f32	s1, s13
 8016982:	eeb0 1a47 	vmov.f32	s2, s14
 8016986:	eef0 1a67 	vmov.f32	s3, s15
 801698a:	2100      	movs	r1, #0
 801698c:	69b8      	ldr	r0, [r7, #24]
 801698e:	f7fb fd3b 	bl	8012408 <nk_input_has_mouse_click_down_in_rect>
 8016992:	63f8      	str	r0, [r7, #60]	; 0x3c
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	ed93 6a00 	vldr	s12, [r3]
 801699a:	edd3 6a01 	vldr	s13, [r3, #4]
 801699e:	ed93 7a02 	vldr	s14, [r3, #8]
 80169a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80169a6:	eeb0 0a46 	vmov.f32	s0, s12
 80169aa:	eef0 0a66 	vmov.f32	s1, s13
 80169ae:	eeb0 1a47 	vmov.f32	s2, s14
 80169b2:	eef0 1a67 	vmov.f32	s3, s15
 80169b6:	69b8      	ldr	r0, [r7, #24]
 80169b8:	f7fb fd6d 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 80169bc:	4603      	mov	r3, r0
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d002      	beq.n	80169c8 <nk_scrollbar_behavior+0xb4>
        *state = NK_WIDGET_STATE_HOVERED;
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	2212      	movs	r2, #18
 80169c6:	601a      	str	r2, [r3, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 80169c8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d103      	bne.n	80169d8 <nk_scrollbar_behavior+0xc4>
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80169d6:	e002      	b.n	80169de <nk_scrollbar_behavior+0xca>
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80169de:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80169e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	f000 8122 	beq.w	8016c2c <nk_scrollbar_behavior+0x318>
 80169e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f000 811e 	beq.w	8016c2c <nk_scrollbar_behavior+0x318>
 80169f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	f040 811a 	bne.w	8016c2c <nk_scrollbar_behavior+0x318>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 80169f8:	69fb      	ldr	r3, [r7, #28]
 80169fa:	2222      	movs	r2, #34	; 0x22
 80169fc:	601a      	str	r2, [r3, #0]
        if (o == NK_VERTICAL) {
 80169fe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	f040 8089 	bne.w	8016b1a <nk_scrollbar_behavior+0x206>
            float cursor_y;
            pixel = in->mouse.delta.y;
 8016a08:	69bb      	ldr	r3, [r7, #24]
 8016a0a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8016a0e:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->h) * target;
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	ed93 7a03 	vldr	s14, [r3, #12]
 8016a16:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8016a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016a1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8016a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 8016a2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8016a2e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8016a3c:	edd7 6a02 	vldr	s13, [r7, #8]
 8016a40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4c:	d50e      	bpl.n	8016a6c <nk_scrollbar_behavior+0x158>
 8016a4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8016a52:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a62:	bf4c      	ite	mi
 8016a64:	2301      	movmi	r3, #1
 8016a66:	2300      	movpl	r3, #0
 8016a68:	b2db      	uxtb	r3, r3
 8016a6a:	e00e      	b.n	8016a8a <nk_scrollbar_behavior+0x176>
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8016a72:	ed97 7a02 	vldr	s14, [r7, #8]
 8016a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a82:	bf4c      	ite	mi
 8016a84:	2301      	movmi	r3, #1
 8016a86:	2300      	movpl	r3, #0
 8016a88:	b2db      	uxtb	r3, r3
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d002      	beq.n	8016a94 <nk_scrollbar_behavior+0x180>
 8016a8e:	eddf 7acd 	vldr	s15, [pc, #820]	; 8016dc4 <nk_scrollbar_behavior+0x4b0>
 8016a92:	e01f      	b.n	8016ad4 <nk_scrollbar_behavior+0x1c0>
 8016a94:	ed97 7a03 	vldr	s14, [r7, #12]
 8016a98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8016aa6:	edd7 6a02 	vldr	s13, [r7, #8]
 8016aaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab6:	d506      	bpl.n	8016ac6 <nk_scrollbar_behavior+0x1b2>
 8016ab8:	ed97 7a03 	vldr	s14, [r7, #12]
 8016abc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ac4:	e006      	b.n	8016ad4 <nk_scrollbar_behavior+0x1c0>
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	edd3 7a03 	vldr	s15, [r3, #12]
 8016acc:	ed97 7a02 	vldr	s14, [r7, #8]
 8016ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ad4:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	ed93 7a01 	vldr	s14, [r3, #4]
 8016ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8016ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8016ae6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	edd3 7a03 	vldr	s15, [r3, #12]
 8016af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016af8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 8016afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8016b02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016b06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016b0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8016b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8016b18:	e238      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8016b20:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->w) * target;
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	ed93 7a02 	vldr	s14, [r3, #8]
 8016b28:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8016b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016b30:	ed97 7a02 	vldr	s14, [r7, #8]
 8016b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b38:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 8016b3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016b40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8016b4e:	edd7 6a02 	vldr	s13, [r7, #8]
 8016b52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5e:	d50e      	bpl.n	8016b7e <nk_scrollbar_behavior+0x26a>
 8016b60:	ed97 7a03 	vldr	s14, [r7, #12]
 8016b64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b74:	bf4c      	ite	mi
 8016b76:	2301      	movmi	r3, #1
 8016b78:	2300      	movpl	r3, #0
 8016b7a:	b2db      	uxtb	r3, r3
 8016b7c:	e00e      	b.n	8016b9c <nk_scrollbar_behavior+0x288>
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8016b84:	ed97 7a02 	vldr	s14, [r7, #8]
 8016b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b94:	bf4c      	ite	mi
 8016b96:	2301      	movmi	r3, #1
 8016b98:	2300      	movpl	r3, #0
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d002      	beq.n	8016ba6 <nk_scrollbar_behavior+0x292>
 8016ba0:	eddf 7a88 	vldr	s15, [pc, #544]	; 8016dc4 <nk_scrollbar_behavior+0x4b0>
 8016ba4:	e01f      	b.n	8016be6 <nk_scrollbar_behavior+0x2d2>
 8016ba6:	ed97 7a03 	vldr	s14, [r7, #12]
 8016baa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8016bb8:	edd7 6a02 	vldr	s13, [r7, #8]
 8016bbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc8:	d506      	bpl.n	8016bd8 <nk_scrollbar_behavior+0x2c4>
 8016bca:	ed97 7a03 	vldr	s14, [r7, #12]
 8016bce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bd6:	e006      	b.n	8016be6 <nk_scrollbar_behavior+0x2d2>
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8016bde:	ed97 7a02 	vldr	s14, [r7, #8]
 8016be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016be6:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	ed93 7a00 	vldr	s14, [r3]
 8016bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8016bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8016bf8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8016bfc:	693b      	ldr	r3, [r7, #16]
 8016bfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8016c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c0a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 8016c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c10:	edd3 7a02 	vldr	s15, [r3, #8]
 8016c14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016c1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c24:	69bb      	ldr	r3, [r7, #24]
 8016c26:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 8016c2a:	e1af      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8016c2c:	211d      	movs	r1, #29
 8016c2e:	69b8      	ldr	r0, [r7, #24]
 8016c30:	f7fb fd10 	bl	8012654 <nk_input_is_key_pressed>
 8016c34:	4603      	mov	r3, r0
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d006      	beq.n	8016c48 <nk_scrollbar_behavior+0x334>
 8016c3a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <nk_scrollbar_behavior+0x334>
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d11a      	bne.n	8016c7e <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 8016c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c4a:	ed93 6a00 	vldr	s12, [r3]
 8016c4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016c52:	ed93 7a02 	vldr	s14, [r3, #8]
 8016c56:	edd3 7a03 	vldr	s15, [r3, #12]
 8016c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016c5e:	2200      	movs	r2, #0
 8016c60:	69b9      	ldr	r1, [r7, #24]
 8016c62:	eeb0 0a46 	vmov.f32	s0, s12
 8016c66:	eef0 0a66 	vmov.f32	s1, s13
 8016c6a:	eeb0 1a47 	vmov.f32	s2, s14
 8016c6e:	eef0 1a67 	vmov.f32	s3, s15
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7f7 faa8 	bl	800e1c8 <nk_button_behavior>
 8016c78:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d035      	beq.n	8016cea <nk_scrollbar_behavior+0x3d6>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 8016c7e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d118      	bne.n	8016cb8 <nk_scrollbar_behavior+0x3a4>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	edd3 7a03 	vldr	s15, [r3, #12]
 8016c8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9c:	dd07      	ble.n	8016cae <nk_scrollbar_behavior+0x39a>
 8016c9e:	693b      	ldr	r3, [r7, #16]
 8016ca0:	edd3 7a03 	vldr	s15, [r3, #12]
 8016ca4:	ed97 7a03 	vldr	s14, [r7, #12]
 8016ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cac:	e001      	b.n	8016cb2 <nk_scrollbar_behavior+0x39e>
 8016cae:	eddf 7a45 	vldr	s15, [pc, #276]	; 8016dc4 <nk_scrollbar_behavior+0x4b0>
 8016cb2:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8016cb6:	e169      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8016cbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8016cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cce:	dd07      	ble.n	8016ce0 <nk_scrollbar_behavior+0x3cc>
 8016cd0:	693b      	ldr	r3, [r7, #16]
 8016cd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8016cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8016cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cde:	e001      	b.n	8016ce4 <nk_scrollbar_behavior+0x3d0>
 8016ce0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016dc4 <nk_scrollbar_behavior+0x4b0>
 8016ce4:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8016ce8:	e150      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8016cea:	211c      	movs	r1, #28
 8016cec:	69b8      	ldr	r0, [r7, #24]
 8016cee:	f7fb fcb1 	bl	8012654 <nk_input_is_key_pressed>
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d006      	beq.n	8016d06 <nk_scrollbar_behavior+0x3f2>
 8016cf8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d102      	bne.n	8016d06 <nk_scrollbar_behavior+0x3f2>
 8016d00:	697b      	ldr	r3, [r7, #20]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d11a      	bne.n	8016d3c <nk_scrollbar_behavior+0x428>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 8016d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d08:	ed93 6a00 	vldr	s12, [r3]
 8016d0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8016d10:	ed93 7a02 	vldr	s14, [r3, #8]
 8016d14:	edd3 7a03 	vldr	s15, [r3, #12]
 8016d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	69b9      	ldr	r1, [r7, #24]
 8016d20:	eeb0 0a46 	vmov.f32	s0, s12
 8016d24:	eef0 0a66 	vmov.f32	s1, s13
 8016d28:	eeb0 1a47 	vmov.f32	s2, s14
 8016d2c:	eef0 1a67 	vmov.f32	s3, s15
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7f7 fa49 	bl	800e1c8 <nk_button_behavior>
 8016d36:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d04f      	beq.n	8016ddc <nk_scrollbar_behavior+0x4c8>
        /* scroll page down by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 8016d3c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d124      	bne.n	8016d8e <nk_scrollbar_behavior+0x47a>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	ed93 7a03 	vldr	s14, [r3, #12]
 8016d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8016d58:	edd7 6a02 	vldr	s13, [r7, #8]
 8016d5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d68:	d507      	bpl.n	8016d7a <nk_scrollbar_behavior+0x466>
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8016d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d78:	e006      	b.n	8016d88 <nk_scrollbar_behavior+0x474>
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8016d80:	ed97 7a02 	vldr	s14, [r7, #8]
 8016d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d88:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8016d8c:	e0fe      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 8016d8e:	693b      	ldr	r3, [r7, #16]
 8016d90:	ed93 7a02 	vldr	s14, [r3, #8]
 8016d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8016da2:	edd7 6a02 	vldr	s13, [r7, #8]
 8016da6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db2:	d509      	bpl.n	8016dc8 <nk_scrollbar_behavior+0x4b4>
 8016db4:	693b      	ldr	r3, [r7, #16]
 8016db6:	ed93 7a02 	vldr	s14, [r3, #8]
 8016dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8016dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dc2:	e008      	b.n	8016dd6 <nk_scrollbar_behavior+0x4c2>
 8016dc4:	00000000 	.word	0x00000000
 8016dc8:	693b      	ldr	r3, [r7, #16]
 8016dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8016dce:	ed97 7a02 	vldr	s14, [r7, #8]
 8016dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016dd6:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 8016dda:	e0d7      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
    } else if (has_scrolling) {
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	f000 80d4 	beq.w	8016f8c <nk_scrollbar_behavior+0x678>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 8016de4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df0:	d407      	bmi.n	8016e02 <nk_scrollbar_behavior+0x4ee>
 8016df2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dfe:	f340 80a2 	ble.w	8016f46 <nk_scrollbar_behavior+0x632>
            /* update cursor by mouse scrolling */
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 8016e02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016e06:	eeb1 7a67 	vneg.f32	s14, s15
 8016e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8016e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e12:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e1a:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8016e1e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d147      	bne.n	8016eb6 <nk_scrollbar_behavior+0x5a2>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8016e2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8016e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e34:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e40:	d50a      	bpl.n	8016e58 <nk_scrollbar_behavior+0x544>
 8016e42:	edd7 7a03 	vldr	s15, [r7, #12]
 8016e46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e4e:	bf4c      	ite	mi
 8016e50:	2301      	movmi	r3, #1
 8016e52:	2300      	movpl	r3, #0
 8016e54:	b2db      	uxtb	r3, r3
 8016e56:	e00e      	b.n	8016e76 <nk_scrollbar_behavior+0x562>
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8016e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8016e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e6e:	bf4c      	ite	mi
 8016e70:	2301      	movmi	r3, #1
 8016e72:	2300      	movpl	r3, #0
 8016e74:	b2db      	uxtb	r3, r3
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d002      	beq.n	8016e80 <nk_scrollbar_behavior+0x56c>
 8016e7a:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 8016dc4 <nk_scrollbar_behavior+0x4b0>
 8016e7e:	e017      	b.n	8016eb0 <nk_scrollbar_behavior+0x59c>
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	edd3 7a03 	vldr	s15, [r3, #12]
 8016e86:	ed97 7a02 	vldr	s14, [r7, #8]
 8016e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016e8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e9a:	d502      	bpl.n	8016ea2 <nk_scrollbar_behavior+0x58e>
 8016e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8016ea0:	e006      	b.n	8016eb0 <nk_scrollbar_behavior+0x59c>
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	edd3 7a03 	vldr	s15, [r3, #12]
 8016ea8:	ed97 7a02 	vldr	s14, [r7, #8]
 8016eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016eb0:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8016eb4:	e06a      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8016ebc:	ed97 7a02 	vldr	s14, [r7, #8]
 8016ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ec4:	ed97 7a03 	vldr	s14, [r7, #12]
 8016ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed0:	d50a      	bpl.n	8016ee8 <nk_scrollbar_behavior+0x5d4>
 8016ed2:	edd7 7a03 	vldr	s15, [r7, #12]
 8016ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ede:	bf4c      	ite	mi
 8016ee0:	2301      	movmi	r3, #1
 8016ee2:	2300      	movpl	r3, #0
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	e00e      	b.n	8016f06 <nk_scrollbar_behavior+0x5f2>
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	edd3 7a02 	vldr	s15, [r3, #8]
 8016eee:	ed97 7a02 	vldr	s14, [r7, #8]
 8016ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016efe:	bf4c      	ite	mi
 8016f00:	2301      	movmi	r3, #1
 8016f02:	2300      	movpl	r3, #0
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d002      	beq.n	8016f10 <nk_scrollbar_behavior+0x5fc>
 8016f0a:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8016dc4 <nk_scrollbar_behavior+0x4b0>
 8016f0e:	e017      	b.n	8016f40 <nk_scrollbar_behavior+0x62c>
 8016f10:	693b      	ldr	r3, [r7, #16]
 8016f12:	edd3 7a02 	vldr	s15, [r3, #8]
 8016f16:	ed97 7a02 	vldr	s14, [r7, #8]
 8016f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8016f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f2a:	d502      	bpl.n	8016f32 <nk_scrollbar_behavior+0x61e>
 8016f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8016f30:	e006      	b.n	8016f40 <nk_scrollbar_behavior+0x62c>
 8016f32:	693b      	ldr	r3, [r7, #16]
 8016f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8016f38:	ed97 7a02 	vldr	s14, [r7, #8]
 8016f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f40:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 8016f44:	e022      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 8016f46:	211a      	movs	r1, #26
 8016f48:	69b8      	ldr	r0, [r7, #24]
 8016f4a:	f7fb fb83 	bl	8012654 <nk_input_is_key_pressed>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d007      	beq.n	8016f64 <nk_scrollbar_behavior+0x650>
            /* update cursor to the beginning  */
            if (o == NK_VERTICAL) scroll_offset = 0;
 8016f54:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d117      	bne.n	8016f8c <nk_scrollbar_behavior+0x678>
 8016f5c:	f04f 0300 	mov.w	r3, #0
 8016f60:	60fb      	str	r3, [r7, #12]
 8016f62:	e013      	b.n	8016f8c <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 8016f64:	211b      	movs	r1, #27
 8016f66:	69b8      	ldr	r0, [r7, #24]
 8016f68:	f7fb fb74 	bl	8012654 <nk_input_is_key_pressed>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d00c      	beq.n	8016f8c <nk_scrollbar_behavior+0x678>
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 8016f72:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d108      	bne.n	8016f8c <nk_scrollbar_behavior+0x678>
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8016f80:	ed97 7a02 	vldr	s14, [r7, #8]
 8016f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f88:	edc7 7a03 	vstr	s15, [r7, #12]
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	f003 0310 	and.w	r3, r3, #16
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d01d      	beq.n	8016fd4 <nk_scrollbar_behavior+0x6c0>
 8016f98:	693b      	ldr	r3, [r7, #16]
 8016f9a:	ed93 6a00 	vldr	s12, [r3]
 8016f9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016fa2:	ed93 7a02 	vldr	s14, [r3, #8]
 8016fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8016faa:	eeb0 0a46 	vmov.f32	s0, s12
 8016fae:	eef0 0a66 	vmov.f32	s1, s13
 8016fb2:	eeb0 1a47 	vmov.f32	s2, s14
 8016fb6:	eef0 1a67 	vmov.f32	s3, s15
 8016fba:	69b8      	ldr	r0, [r7, #24]
 8016fbc:	f7fb fabd 	bl	801253a <nk_input_is_mouse_prev_hovering_rect>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d106      	bne.n	8016fd4 <nk_scrollbar_behavior+0x6c0>
        *state |= NK_WIDGET_STATE_ENTERED;
 8016fc6:	69fb      	ldr	r3, [r7, #28]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	f043 0208 	orr.w	r2, r3, #8
 8016fce:	69fb      	ldr	r3, [r7, #28]
 8016fd0:	601a      	str	r2, [r3, #0]
 8016fd2:	e01c      	b.n	801700e <nk_scrollbar_behavior+0x6fa>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 8016fd4:	693b      	ldr	r3, [r7, #16]
 8016fd6:	ed93 6a00 	vldr	s12, [r3]
 8016fda:	edd3 6a01 	vldr	s13, [r3, #4]
 8016fde:	ed93 7a02 	vldr	s14, [r3, #8]
 8016fe2:	edd3 7a03 	vldr	s15, [r3, #12]
 8016fe6:	eeb0 0a46 	vmov.f32	s0, s12
 8016fea:	eef0 0a66 	vmov.f32	s1, s13
 8016fee:	eeb0 1a47 	vmov.f32	s2, s14
 8016ff2:	eef0 1a67 	vmov.f32	s3, s15
 8016ff6:	69b8      	ldr	r0, [r7, #24]
 8016ff8:	f7fb fa9f 	bl	801253a <nk_input_is_mouse_prev_hovering_rect>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d005      	beq.n	801700e <nk_scrollbar_behavior+0x6fa>
        *state |= NK_WIDGET_STATE_LEFT;
 8017002:	69fb      	ldr	r3, [r7, #28]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	601a      	str	r2, [r3, #0]
    return scroll_offset;
 801700e:	68fb      	ldr	r3, [r7, #12]
}
 8017010:	ee07 3a90 	vmov	s15, r3
 8017014:	eeb0 0a67 	vmov.f32	s0, s15
 8017018:	3748      	adds	r7, #72	; 0x48
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop

08017020 <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b086      	sub	sp, #24
 8017024:	af00      	add	r7, sp, #0
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	60b9      	str	r1, [r7, #8]
 801702a:	607a      	str	r2, [r7, #4]
 801702c:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 801702e:	68bb      	ldr	r3, [r7, #8]
 8017030:	f003 0320 	and.w	r3, r3, #32
 8017034:	2b00      	cmp	r3, #0
 8017036:	d006      	beq.n	8017046 <nk_draw_scrollbar+0x26>
        background = &style->active;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	3338      	adds	r3, #56	; 0x38
 801703c:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_active;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	3390      	adds	r3, #144	; 0x90
 8017042:	613b      	str	r3, [r7, #16]
 8017044:	e010      	b.n	8017068 <nk_draw_scrollbar+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	f003 0310 	and.w	r3, r3, #16
 801704c:	2b00      	cmp	r3, #0
 801704e:	d006      	beq.n	801705e <nk_draw_scrollbar+0x3e>
        background = &style->hover;
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	331c      	adds	r3, #28
 8017054:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_hover;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	3374      	adds	r3, #116	; 0x74
 801705a:	613b      	str	r3, [r7, #16]
 801705c:	e004      	b.n	8017068 <nk_draw_scrollbar+0x48>
    } else {
        background = &style->normal;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_normal;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	3358      	adds	r3, #88	; 0x58
 8017066:	613b      	str	r3, [r7, #16]
    }

    /* draw background */
    switch (background->type) {
 8017068:	697b      	ldr	r3, [r7, #20]
 801706a:	781b      	ldrb	r3, [r3, #0]
 801706c:	2b02      	cmp	r3, #2
 801706e:	d01e      	beq.n	80170ae <nk_draw_scrollbar+0x8e>
 8017070:	2b02      	cmp	r3, #2
 8017072:	dc71      	bgt.n	8017158 <nk_draw_scrollbar+0x138>
 8017074:	2b00      	cmp	r3, #0
 8017076:	d033      	beq.n	80170e0 <nk_draw_scrollbar+0xc0>
 8017078:	2b01      	cmp	r3, #1
 801707a:	d16d      	bne.n	8017158 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	1d19      	adds	r1, r3, #4
 8017080:	4a74      	ldr	r2, [pc, #464]	; (8017254 <nk_draw_scrollbar+0x234>)
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	ed93 6a00 	vldr	s12, [r3]
 8017088:	edd3 6a01 	vldr	s13, [r3, #4]
 801708c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017090:	edd3 7a03 	vldr	s15, [r3, #12]
 8017094:	6812      	ldr	r2, [r2, #0]
 8017096:	eeb0 0a46 	vmov.f32	s0, s12
 801709a:	eef0 0a66 	vmov.f32	s1, s13
 801709e:	eeb0 1a47 	vmov.f32	s2, s14
 80170a2:	eef0 1a67 	vmov.f32	s3, s15
 80170a6:	68f8      	ldr	r0, [r7, #12]
 80170a8:	f7fa f90e 	bl	80112c8 <nk_draw_image>
            break;
 80170ac:	e054      	b.n	8017158 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	1d19      	adds	r1, r3, #4
 80170b2:	4a68      	ldr	r2, [pc, #416]	; (8017254 <nk_draw_scrollbar+0x234>)
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	ed93 6a00 	vldr	s12, [r3]
 80170ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80170be:	ed93 7a02 	vldr	s14, [r3, #8]
 80170c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80170c6:	6812      	ldr	r2, [r2, #0]
 80170c8:	eeb0 0a46 	vmov.f32	s0, s12
 80170cc:	eef0 0a66 	vmov.f32	s1, s13
 80170d0:	eeb0 1a47 	vmov.f32	s2, s14
 80170d4:	eef0 1a67 	vmov.f32	s3, s15
 80170d8:	68f8      	ldr	r0, [r7, #12]
 80170da:	f7fa f9e7 	bl	80114ac <nk_draw_nine_slice>
            break;
 80170de:	e03b      	b.n	8017158 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 80170e6:	697a      	ldr	r2, [r7, #20]
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	ed93 6a00 	vldr	s12, [r3]
 80170ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80170f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80170f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80170fa:	6851      	ldr	r1, [r2, #4]
 80170fc:	eeb0 2a65 	vmov.f32	s4, s11
 8017100:	eeb0 0a46 	vmov.f32	s0, s12
 8017104:	eef0 0a66 	vmov.f32	s1, s13
 8017108:	eeb0 1a47 	vmov.f32	s2, s14
 801710c:	eef0 1a67 	vmov.f32	s3, s15
 8017110:	68f8      	ldr	r0, [r7, #12]
 8017112:	f7f9 fd7f 	bl	8010c14 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
 8017122:	687a      	ldr	r2, [r7, #4]
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	ed93 6a00 	vldr	s12, [r3]
 801712a:	edd3 6a01 	vldr	s13, [r3, #4]
 801712e:	ed93 7a02 	vldr	s14, [r3, #8]
 8017132:	edd3 7a03 	vldr	s15, [r3, #12]
 8017136:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8017138:	eef0 2a45 	vmov.f32	s5, s10
 801713c:	eeb0 2a65 	vmov.f32	s4, s11
 8017140:	eeb0 0a46 	vmov.f32	s0, s12
 8017144:	eef0 0a66 	vmov.f32	s1, s13
 8017148:	eeb0 1a47 	vmov.f32	s2, s14
 801714c:	eef0 1a67 	vmov.f32	s3, s15
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	f7f9 fc57 	bl	8010a04 <nk_stroke_rect>
            break;
 8017156:	bf00      	nop
    }

    /* draw cursor */
    switch (cursor->type) {
 8017158:	693b      	ldr	r3, [r7, #16]
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	2b02      	cmp	r3, #2
 801715e:	d01e      	beq.n	801719e <nk_draw_scrollbar+0x17e>
 8017160:	2b02      	cmp	r3, #2
 8017162:	dc72      	bgt.n	801724a <nk_draw_scrollbar+0x22a>
 8017164:	2b00      	cmp	r3, #0
 8017166:	d033      	beq.n	80171d0 <nk_draw_scrollbar+0x1b0>
 8017168:	2b01      	cmp	r3, #1
 801716a:	d16e      	bne.n	801724a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	1d19      	adds	r1, r3, #4
 8017170:	4a38      	ldr	r2, [pc, #224]	; (8017254 <nk_draw_scrollbar+0x234>)
 8017172:	6a3b      	ldr	r3, [r7, #32]
 8017174:	ed93 6a00 	vldr	s12, [r3]
 8017178:	edd3 6a01 	vldr	s13, [r3, #4]
 801717c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017180:	edd3 7a03 	vldr	s15, [r3, #12]
 8017184:	6812      	ldr	r2, [r2, #0]
 8017186:	eeb0 0a46 	vmov.f32	s0, s12
 801718a:	eef0 0a66 	vmov.f32	s1, s13
 801718e:	eeb0 1a47 	vmov.f32	s2, s14
 8017192:	eef0 1a67 	vmov.f32	s3, s15
 8017196:	68f8      	ldr	r0, [r7, #12]
 8017198:	f7fa f896 	bl	80112c8 <nk_draw_image>
            break;
 801719c:	e055      	b.n	801724a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	1d19      	adds	r1, r3, #4
 80171a2:	4a2c      	ldr	r2, [pc, #176]	; (8017254 <nk_draw_scrollbar+0x234>)
 80171a4:	6a3b      	ldr	r3, [r7, #32]
 80171a6:	ed93 6a00 	vldr	s12, [r3]
 80171aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80171ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80171b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80171b6:	6812      	ldr	r2, [r2, #0]
 80171b8:	eeb0 0a46 	vmov.f32	s0, s12
 80171bc:	eef0 0a66 	vmov.f32	s1, s13
 80171c0:	eeb0 1a47 	vmov.f32	s2, s14
 80171c4:	eef0 1a67 	vmov.f32	s3, s15
 80171c8:	68f8      	ldr	r0, [r7, #12]
 80171ca:	f7fa f96f 	bl	80114ac <nk_draw_nine_slice>
            break;
 80171ce:	e03c      	b.n	801724a <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 80171d6:	693a      	ldr	r2, [r7, #16]
 80171d8:	6a3b      	ldr	r3, [r7, #32]
 80171da:	ed93 6a00 	vldr	s12, [r3]
 80171de:	edd3 6a01 	vldr	s13, [r3, #4]
 80171e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80171e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80171ea:	6851      	ldr	r1, [r2, #4]
 80171ec:	eeb0 2a65 	vmov.f32	s4, s11
 80171f0:	eeb0 0a46 	vmov.f32	s0, s12
 80171f4:	eef0 0a66 	vmov.f32	s1, s13
 80171f8:	eeb0 1a47 	vmov.f32	s2, s14
 80171fc:	eef0 1a67 	vmov.f32	s3, s15
 8017200:	68f8      	ldr	r0, [r7, #12]
 8017202:	f7f9 fd07 	bl	8010c14 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	ed93 5a2e 	vldr	s10, [r3, #184]	; 0xb8
 8017212:	687a      	ldr	r2, [r7, #4]
 8017214:	6a3b      	ldr	r3, [r7, #32]
 8017216:	ed93 6a00 	vldr	s12, [r3]
 801721a:	edd3 6a01 	vldr	s13, [r3, #4]
 801721e:	ed93 7a02 	vldr	s14, [r3, #8]
 8017222:	edd3 7a03 	vldr	s15, [r3, #12]
 8017226:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 801722a:	eef0 2a45 	vmov.f32	s5, s10
 801722e:	eeb0 2a65 	vmov.f32	s4, s11
 8017232:	eeb0 0a46 	vmov.f32	s0, s12
 8017236:	eef0 0a66 	vmov.f32	s1, s13
 801723a:	eeb0 1a47 	vmov.f32	s2, s14
 801723e:	eef0 1a67 	vmov.f32	s3, s15
 8017242:	68f8      	ldr	r0, [r7, #12]
 8017244:	f7f9 fbde 	bl	8010a04 <nk_stroke_rect>
            break;
 8017248:	bf00      	nop
    }
}
 801724a:	bf00      	nop
 801724c:	3718      	adds	r7, #24
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	08023594 	.word	0x08023594

08017258 <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b0a6      	sub	sp, #152	; 0x98
 801725c:	af04      	add	r7, sp, #16
 801725e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017260:	62b9      	str	r1, [r7, #40]	; 0x28
 8017262:	eeb0 6a40 	vmov.f32	s12, s0
 8017266:	eef0 6a60 	vmov.f32	s13, s1
 801726a:	eeb0 7a41 	vmov.f32	s14, s2
 801726e:	eef0 7a61 	vmov.f32	s15, s3
 8017272:	617a      	str	r2, [r7, #20]
 8017274:	ed87 2a04 	vstr	s4, [r7, #16]
 8017278:	edc7 2a03 	vstr	s5, [r7, #12]
 801727c:	ed87 3a02 	vstr	s6, [r7, #8]
 8017280:	edc7 3a01 	vstr	s7, [r7, #4]
 8017284:	603b      	str	r3, [r7, #0]
 8017286:	ed87 6a06 	vstr	s12, [r7, #24]
 801728a:	edc7 6a07 	vstr	s13, [r7, #28]
 801728e:	ed87 7a08 	vstr	s14, [r7, #32]
 8017292:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 8017296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017298:	2b00      	cmp	r3, #0
 801729a:	d105      	bne.n	80172a8 <nk_do_scrollbarv+0x50>
 801729c:	4bb6      	ldr	r3, [pc, #728]	; (8017578 <nk_do_scrollbarv+0x320>)
 801729e:	4ab7      	ldr	r2, [pc, #732]	; (801757c <nk_do_scrollbarv+0x324>)
 80172a0:	2195      	movs	r1, #149	; 0x95
 80172a2:	48b7      	ldr	r0, [pc, #732]	; (8017580 <nk_do_scrollbarv+0x328>)
 80172a4:	f006 fb64 	bl	801d970 <__assert_func>
    NK_ASSERT(style);
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d105      	bne.n	80172ba <nk_do_scrollbarv+0x62>
 80172ae:	4bb5      	ldr	r3, [pc, #724]	; (8017584 <nk_do_scrollbarv+0x32c>)
 80172b0:	4ab2      	ldr	r2, [pc, #712]	; (801757c <nk_do_scrollbarv+0x324>)
 80172b2:	2196      	movs	r1, #150	; 0x96
 80172b4:	48b2      	ldr	r0, [pc, #712]	; (8017580 <nk_do_scrollbarv+0x328>)
 80172b6:	f006 fb5b 	bl	801d970 <__assert_func>
    NK_ASSERT(state);
 80172ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d105      	bne.n	80172cc <nk_do_scrollbarv+0x74>
 80172c0:	4bb1      	ldr	r3, [pc, #708]	; (8017588 <nk_do_scrollbarv+0x330>)
 80172c2:	4aae      	ldr	r2, [pc, #696]	; (801757c <nk_do_scrollbarv+0x324>)
 80172c4:	2197      	movs	r1, #151	; 0x97
 80172c6:	48ae      	ldr	r0, [pc, #696]	; (8017580 <nk_do_scrollbarv+0x328>)
 80172c8:	f006 fb52 	bl	801d970 <__assert_func>
    if (!out || !style) return 0;
 80172cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d002      	beq.n	80172d8 <nk_do_scrollbarv+0x80>
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d102      	bne.n	80172de <nk_do_scrollbarv+0x86>
 80172d8:	f04f 0300 	mov.w	r3, #0
 80172dc:	e253      	b.n	8017786 <nk_do_scrollbarv+0x52e>

    scroll.w = NK_MAX(scroll.w, 1);
 80172de:	edd7 7a08 	vldr	s15, [r7, #32]
 80172e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80172e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80172ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ee:	d502      	bpl.n	80172f6 <nk_do_scrollbarv+0x9e>
 80172f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80172f4:	e000      	b.n	80172f8 <nk_do_scrollbarv+0xa0>
 80172f6:	6a3b      	ldr	r3, [r7, #32]
 80172f8:	623b      	str	r3, [r7, #32]
    scroll.h = NK_MAX(scroll.h, 0);
 80172fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80172fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017306:	d502      	bpl.n	801730e <nk_do_scrollbarv+0xb6>
 8017308:	f04f 0300 	mov.w	r3, #0
 801730c:	e000      	b.n	8017310 <nk_do_scrollbarv+0xb8>
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	627b      	str	r3, [r7, #36]	; 0x24
    if (target <= scroll.h) return 0;
 8017312:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017316:	ed97 7a03 	vldr	s14, [r7, #12]
 801731a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017322:	d802      	bhi.n	801732a <nk_do_scrollbarv+0xd2>
 8017324:	f04f 0300 	mov.w	r3, #0
 8017328:	e22d      	b.n	8017786 <nk_do_scrollbarv+0x52e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017330:	2b00      	cmp	r3, #0
 8017332:	f000 80a4 	beq.w	801747e <nk_do_scrollbarv+0x226>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 8017336:	69bb      	ldr	r3, [r7, #24]
 8017338:	633b      	str	r3, [r7, #48]	; 0x30
        button.w = scroll.w;
 801733a:	6a3b      	ldr	r3, [r7, #32]
 801733c:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.w;
 801733e:	6a3b      	ldr	r3, [r7, #32]
 8017340:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 8017342:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017346:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801734a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801734e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801735a:	d502      	bpl.n	8017362 <nk_do_scrollbarv+0x10a>
 801735c:	eddf 7a8b 	vldr	s15, [pc, #556]	; 801758c <nk_do_scrollbarv+0x334>
 8017360:	e007      	b.n	8017372 <nk_do_scrollbarv+0x11a>
 8017362:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017366:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801736a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801736e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017372:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 8017376:	ed97 7a02 	vldr	s14, [r7, #8]
 801737a:	edd7 7a01 	vldr	s15, [r7, #4]
 801737e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017386:	d501      	bpl.n	801738c <nk_do_scrollbarv+0x134>
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	e000      	b.n	801738e <nk_do_scrollbarv+0x136>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.y = scroll.y;
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80173a2:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80173a6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80173aa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80173ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80173b2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80173b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80173ba:	9202      	str	r2, [sp, #8]
 80173bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80173c0:	9201      	str	r2, [sp, #4]
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	2301      	movs	r3, #1
 80173c6:	460a      	mov	r2, r1
 80173c8:	eeb0 0a46 	vmov.f32	s0, s12
 80173cc:	eef0 0a66 	vmov.f32	s1, s13
 80173d0:	eeb0 1a47 	vmov.f32	s2, s14
 80173d4:	eef0 1a67 	vmov.f32	s3, s15
 80173d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80173da:	f7f7 fa87 	bl	800e8ec <nk_do_button_symbol>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d007      	beq.n	80173f4 <nk_do_scrollbarv+0x19c>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 80173e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80173e8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80173ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173f0:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 80173f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80173f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80173fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017400:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017408:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	33cc      	adds	r3, #204	; 0xcc
 8017416:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801741a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801741e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8017422:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017426:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801742a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801742e:	9202      	str	r2, [sp, #8]
 8017430:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8017434:	9201      	str	r2, [sp, #4]
 8017436:	9300      	str	r3, [sp, #0]
 8017438:	2301      	movs	r3, #1
 801743a:	460a      	mov	r2, r1
 801743c:	eeb0 0a46 	vmov.f32	s0, s12
 8017440:	eef0 0a66 	vmov.f32	s1, s13
 8017444:	eeb0 1a47 	vmov.f32	s2, s14
 8017448:	eef0 1a67 	vmov.f32	s3, s15
 801744c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801744e:	f7f7 fa4d 	bl	800e8ec <nk_do_button_symbol>
 8017452:	4603      	mov	r3, r0
 8017454:	2b00      	cmp	r3, #0
 8017456:	d007      	beq.n	8017468 <nk_do_scrollbarv+0x210>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 8017458:	ed97 7a04 	vldr	s14, [r7, #16]
 801745c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8017460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017464:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.y = scroll.y + button.h;
 8017468:	ed97 7a07 	vldr	s14, [r7, #28]
 801746c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017474:	edc7 7a07 	vstr	s15, [r7, #28]
        scroll.h = scroll_h;
 8017478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801747c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 801747e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017482:	ed97 7a02 	vldr	s14, [r7, #8]
 8017486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748e:	d501      	bpl.n	8017494 <nk_do_scrollbarv+0x23c>
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	e000      	b.n	8017496 <nk_do_scrollbarv+0x23e>
 8017494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 801749a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801749e:	ed97 7a03 	vldr	s14, [r7, #12]
 80174a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80174aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174b2:	d50a      	bpl.n	80174ca <nk_do_scrollbarv+0x272>
 80174b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80174b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80174bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c0:	bf4c      	ite	mi
 80174c2:	2301      	movmi	r3, #1
 80174c4:	2300      	movpl	r3, #0
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	e00d      	b.n	80174e6 <nk_do_scrollbarv+0x28e>
 80174ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80174ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80174d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80174da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174de:	bf4c      	ite	mi
 80174e0:	2301      	movmi	r3, #1
 80174e2:	2300      	movpl	r3, #0
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d002      	beq.n	80174f0 <nk_do_scrollbarv+0x298>
 80174ea:	eddf 7a28 	vldr	s15, [pc, #160]	; 801758c <nk_do_scrollbarv+0x334>
 80174ee:	e015      	b.n	801751c <nk_do_scrollbarv+0x2c4>
 80174f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80174f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80174f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8017500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017508:	d502      	bpl.n	8017510 <nk_do_scrollbarv+0x2b8>
 801750a:	edd7 7a04 	vldr	s15, [r7, #16]
 801750e:	e005      	b.n	801751c <nk_do_scrollbarv+0x2c4>
 8017510:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017514:	ed97 7a03 	vldr	s14, [r7, #12]
 8017518:	ee77 7a67 	vsub.f32	s15, s14, s15
 801751c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.h / target;
 8017520:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017524:	ed97 7a03 	vldr	s14, [r7, #12]
 8017528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801752c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 8017530:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017534:	ed97 7a03 	vldr	s14, [r7, #12]
 8017538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801753c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 8017540:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017544:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017548:	ee27 7a27 	vmul.f32	s14, s14, s15
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017552:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801755c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017568:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017570:	d50e      	bpl.n	8017590 <nk_do_scrollbarv+0x338>
 8017572:	eddf 7a06 	vldr	s15, [pc, #24]	; 801758c <nk_do_scrollbarv+0x334>
 8017576:	e01f      	b.n	80175b8 <nk_do_scrollbarv+0x360>
 8017578:	08021ac8 	.word	0x08021ac8
 801757c:	08023598 	.word	0x08023598
 8017580:	08021acc 	.word	0x08021acc
 8017584:	08021aec 	.word	0x08021aec
 8017588:	08021af4 	.word	0x08021af4
 801758c:	00000000 	.word	0x00000000
 8017590:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017594:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017598:	ee27 7a27 	vmul.f32	s14, s14, s15
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80175a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80175ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80175b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80175b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80175b8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 80175bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80175c0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80175c4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80175c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80175d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80175e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175e4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 80175e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80175f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80175fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017608:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    cursor.x = scroll.x + style->border + style->padding.x;
 801760c:	ed97 7a06 	vldr	s14, [r7, #24]
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017616:	ee37 7a27 	vadd.f32	s14, s14, s15
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8017620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017624:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 8017628:	69bb      	ldr	r3, [r7, #24]
 801762a:	667b      	str	r3, [r7, #100]	; 0x64
    empty_north.y = scroll.y;
 801762c:	69fb      	ldr	r3, [r7, #28]
 801762e:	66bb      	str	r3, [r7, #104]	; 0x68
    empty_north.w = scroll.w;
 8017630:	6a3b      	ldr	r3, [r7, #32]
 8017632:	66fb      	str	r3, [r7, #108]	; 0x6c
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 8017634:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017638:	edd7 7a07 	vldr	s15, [r7, #28]
 801763c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017648:	d502      	bpl.n	8017650 <nk_do_scrollbarv+0x3f8>
 801764a:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801758c <nk_do_scrollbarv+0x334>
 801764e:	e005      	b.n	801765c <nk_do_scrollbarv+0x404>
 8017650:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017654:	edd7 7a07 	vldr	s15, [r7, #28]
 8017658:	ee77 7a67 	vsub.f32	s15, s14, s15
 801765c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    empty_south.x = scroll.x;
 8017660:	69bb      	ldr	r3, [r7, #24]
 8017662:	657b      	str	r3, [r7, #84]	; 0x54
    empty_south.y = cursor.y + cursor.h;
 8017664:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017668:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801766c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017670:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    empty_south.w = scroll.w;
 8017674:	6a3b      	ldr	r3, [r7, #32]
 8017676:	65fb      	str	r3, [r7, #92]	; 0x5c
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 8017678:	ed97 7a07 	vldr	s14, [r7, #28]
 801767c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017684:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8017688:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801768c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769c:	d502      	bpl.n	80176a4 <nk_do_scrollbarv+0x44c>
 801769e:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 801758c <nk_do_scrollbarv+0x334>
 80176a2:	e00d      	b.n	80176c0 <nk_do_scrollbarv+0x468>
 80176a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80176a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80176ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80176b0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80176b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80176b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80176bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80176c0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 80176c4:	f107 0218 	add.w	r2, r7, #24
 80176c8:	2300      	movs	r3, #0
 80176ca:	9303      	str	r3, [sp, #12]
 80176cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80176d0:	9302      	str	r3, [sp, #8]
 80176d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80176d6:	9301      	str	r3, [sp, #4]
 80176d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80176dc:	9300      	str	r3, [sp, #0]
 80176de:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 80176e2:	edd7 0a03 	vldr	s1, [r7, #12]
 80176e6:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80176ea:	4613      	mov	r3, r2
 80176ec:	697a      	ldr	r2, [r7, #20]
 80176ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80176f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176f4:	f7ff f90e 	bl	8016914 <nk_scrollbar_behavior>
 80176f8:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 80176fc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017700:	ed97 7a03 	vldr	s14, [r7, #12]
 8017704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017708:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 801770c:	ed97 7a07 	vldr	s14, [r7, #28]
 8017710:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8017714:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8017718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801771c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8017726:	ee37 7a27 	vadd.f32	s14, s14, s15
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017734:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801773e:	2b00      	cmp	r3, #0
 8017740:	d007      	beq.n	8017752 <nk_do_scrollbarv+0x4fa>
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017748:	683a      	ldr	r2, [r7, #0]
 801774a:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801774e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017750:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8017752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017754:	6819      	ldr	r1, [r3, #0]
 8017756:	f107 0218 	add.w	r2, r7, #24
 801775a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801775e:	9300      	str	r3, [sp, #0]
 8017760:	4613      	mov	r3, r2
 8017762:	683a      	ldr	r2, [r7, #0]
 8017764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017766:	f7ff fc5b 	bl	8017020 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8017770:	2b00      	cmp	r3, #0
 8017772:	d007      	beq.n	8017784 <nk_do_scrollbarv+0x52c>
 8017774:	683b      	ldr	r3, [r7, #0]
 8017776:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801777a:	683a      	ldr	r2, [r7, #0]
 801777c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8017780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017782:	4798      	blx	r3
    return scroll_offset;
 8017784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8017786:	ee07 3a90 	vmov	s15, r3
 801778a:	eeb0 0a67 	vmov.f32	s0, s15
 801778e:	3788      	adds	r7, #136	; 0x88
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b0a6      	sub	sp, #152	; 0x98
 8017798:	af04      	add	r7, sp, #16
 801779a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801779c:	62b9      	str	r1, [r7, #40]	; 0x28
 801779e:	eeb0 6a40 	vmov.f32	s12, s0
 80177a2:	eef0 6a60 	vmov.f32	s13, s1
 80177a6:	eeb0 7a41 	vmov.f32	s14, s2
 80177aa:	eef0 7a61 	vmov.f32	s15, s3
 80177ae:	617a      	str	r2, [r7, #20]
 80177b0:	ed87 2a04 	vstr	s4, [r7, #16]
 80177b4:	edc7 2a03 	vstr	s5, [r7, #12]
 80177b8:	ed87 3a02 	vstr	s6, [r7, #8]
 80177bc:	edc7 3a01 	vstr	s7, [r7, #4]
 80177c0:	603b      	str	r3, [r7, #0]
 80177c2:	ed87 6a06 	vstr	s12, [r7, #24]
 80177c6:	edc7 6a07 	vstr	s13, [r7, #28]
 80177ca:	ed87 7a08 	vstr	s14, [r7, #32]
 80177ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 80177d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d105      	bne.n	80177e4 <nk_do_scrollbarh+0x50>
 80177d8:	4b94      	ldr	r3, [pc, #592]	; (8017a2c <nk_do_scrollbarh+0x298>)
 80177da:	4a95      	ldr	r2, [pc, #596]	; (8017a30 <nk_do_scrollbarh+0x29c>)
 80177dc:	21ee      	movs	r1, #238	; 0xee
 80177de:	4895      	ldr	r0, [pc, #596]	; (8017a34 <nk_do_scrollbarh+0x2a0>)
 80177e0:	f006 f8c6 	bl	801d970 <__assert_func>
    NK_ASSERT(style);
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d105      	bne.n	80177f6 <nk_do_scrollbarh+0x62>
 80177ea:	4b93      	ldr	r3, [pc, #588]	; (8017a38 <nk_do_scrollbarh+0x2a4>)
 80177ec:	4a90      	ldr	r2, [pc, #576]	; (8017a30 <nk_do_scrollbarh+0x29c>)
 80177ee:	21ef      	movs	r1, #239	; 0xef
 80177f0:	4890      	ldr	r0, [pc, #576]	; (8017a34 <nk_do_scrollbarh+0x2a0>)
 80177f2:	f006 f8bd 	bl	801d970 <__assert_func>
    if (!out || !style) return 0;
 80177f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d002      	beq.n	8017802 <nk_do_scrollbarh+0x6e>
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d102      	bne.n	8017808 <nk_do_scrollbarh+0x74>
 8017802:	f04f 0300 	mov.w	r3, #0
 8017806:	e200      	b.n	8017c0a <nk_do_scrollbarh+0x476>

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 8017808:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801780c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017818:	d502      	bpl.n	8017820 <nk_do_scrollbarh+0x8c>
 801781a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801781e:	e000      	b.n	8017822 <nk_do_scrollbarh+0x8e>
 8017820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017822:	627b      	str	r3, [r7, #36]	; 0x24
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 8017824:	ed97 7a08 	vldr	s14, [r7, #32]
 8017828:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801782c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017838:	d504      	bpl.n	8017844 <nk_do_scrollbarh+0xb0>
 801783a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801783e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017842:	e001      	b.n	8017848 <nk_do_scrollbarh+0xb4>
 8017844:	edd7 7a08 	vldr	s15, [r7, #32]
 8017848:	edc7 7a08 	vstr	s15, [r7, #32]
    if (target <= scroll.w) return 0;
 801784c:	edd7 7a08 	vldr	s15, [r7, #32]
 8017850:	ed97 7a03 	vldr	s14, [r7, #12]
 8017854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785c:	d802      	bhi.n	8017864 <nk_do_scrollbarh+0xd0>
 801785e:	f04f 0300 	mov.w	r3, #0
 8017862:	e1d2      	b.n	8017c0a <nk_do_scrollbarh+0x476>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801786a:	2b00      	cmp	r3, #0
 801786c:	f000 8094 	beq.w	8017998 <nk_do_scrollbarh+0x204>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 8017870:	69fb      	ldr	r3, [r7, #28]
 8017872:	637b      	str	r3, [r7, #52]	; 0x34
        button.w = scroll.h;
 8017874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017876:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.h;
 8017878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801787a:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_w = scroll.w - 2 * button.w;
 801787c:	ed97 7a08 	vldr	s14, [r7, #32]
 8017880:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017884:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017888:	ee77 7a67 	vsub.f32	s15, s14, s15
 801788c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 8017890:	ed97 7a02 	vldr	s14, [r7, #8]
 8017894:	edd7 7a01 	vldr	s15, [r7, #4]
 8017898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a0:	d501      	bpl.n	80178a6 <nk_do_scrollbarh+0x112>
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	e000      	b.n	80178a8 <nk_do_scrollbarh+0x114>
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.x = scroll.x;
 80178ac:	69bb      	ldr	r3, [r7, #24]
 80178ae:	633b      	str	r3, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80178bc:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80178c0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80178c4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80178c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80178cc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80178d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80178d4:	9202      	str	r2, [sp, #8]
 80178d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80178da:	9201      	str	r2, [sp, #4]
 80178dc:	9300      	str	r3, [sp, #0]
 80178de:	2301      	movs	r3, #1
 80178e0:	460a      	mov	r2, r1
 80178e2:	eeb0 0a46 	vmov.f32	s0, s12
 80178e6:	eef0 0a66 	vmov.f32	s1, s13
 80178ea:	eeb0 1a47 	vmov.f32	s2, s14
 80178ee:	eef0 1a67 	vmov.f32	s3, s15
 80178f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178f4:	f7f6 fffa 	bl	800e8ec <nk_do_button_symbol>
 80178f8:	4603      	mov	r3, r0
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d007      	beq.n	801790e <nk_do_scrollbarh+0x17a>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 80178fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8017902:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8017906:	ee77 7a67 	vsub.f32	s15, s14, s15
 801790a:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 801790e:	ed97 7a06 	vldr	s14, [r7, #24]
 8017912:	edd7 7a08 	vldr	s15, [r7, #32]
 8017916:	ee37 7a27 	vadd.f32	s14, s14, s15
 801791a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801791e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017922:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	33cc      	adds	r3, #204	; 0xcc
 8017930:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8017934:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8017938:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801793c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8017940:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017948:	9202      	str	r2, [sp, #8]
 801794a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801794e:	9201      	str	r2, [sp, #4]
 8017950:	9300      	str	r3, [sp, #0]
 8017952:	2301      	movs	r3, #1
 8017954:	460a      	mov	r2, r1
 8017956:	eeb0 0a46 	vmov.f32	s0, s12
 801795a:	eef0 0a66 	vmov.f32	s1, s13
 801795e:	eeb0 1a47 	vmov.f32	s2, s14
 8017962:	eef0 1a67 	vmov.f32	s3, s15
 8017966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017968:	f7f6 ffc0 	bl	800e8ec <nk_do_button_symbol>
 801796c:	4603      	mov	r3, r0
 801796e:	2b00      	cmp	r3, #0
 8017970:	d007      	beq.n	8017982 <nk_do_scrollbarh+0x1ee>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 8017972:	ed97 7a04 	vldr	s14, [r7, #16]
 8017976:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801797a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801797e:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.x = scroll.x + button.w;
 8017982:	ed97 7a06 	vldr	s14, [r7, #24]
 8017986:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801798a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801798e:	edc7 7a06 	vstr	s15, [r7, #24]
        scroll.w = scroll_w;
 8017992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017996:	623b      	str	r3, [r7, #32]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 8017998:	edd7 7a08 	vldr	s15, [r7, #32]
 801799c:	ed97 7a02 	vldr	s14, [r7, #8]
 80179a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80179a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179a8:	d501      	bpl.n	80179ae <nk_do_scrollbarh+0x21a>
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	e000      	b.n	80179b0 <nk_do_scrollbarh+0x21c>
 80179ae:	6a3b      	ldr	r3, [r7, #32]
 80179b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 80179b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80179b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80179bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80179c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80179c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80179c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179cc:	d50a      	bpl.n	80179e4 <nk_do_scrollbarh+0x250>
 80179ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80179d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80179d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179da:	bf4c      	ite	mi
 80179dc:	2301      	movmi	r3, #1
 80179de:	2300      	movpl	r3, #0
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	e00d      	b.n	8017a00 <nk_do_scrollbarh+0x26c>
 80179e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80179e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80179ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80179f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80179f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f8:	bf4c      	ite	mi
 80179fa:	2301      	movmi	r3, #1
 80179fc:	2300      	movpl	r3, #0
 80179fe:	b2db      	uxtb	r3, r3
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d002      	beq.n	8017a0a <nk_do_scrollbarh+0x276>
 8017a04:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017a3c <nk_do_scrollbarh+0x2a8>
 8017a08:	e020      	b.n	8017a4c <nk_do_scrollbarh+0x2b8>
 8017a0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8017a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8017a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a16:	ed97 7a04 	vldr	s14, [r7, #16]
 8017a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a22:	d50d      	bpl.n	8017a40 <nk_do_scrollbarh+0x2ac>
 8017a24:	edd7 7a04 	vldr	s15, [r7, #16]
 8017a28:	e010      	b.n	8017a4c <nk_do_scrollbarh+0x2b8>
 8017a2a:	bf00      	nop
 8017a2c:	08021ac8 	.word	0x08021ac8
 8017a30:	080235ac 	.word	0x080235ac
 8017a34:	08021acc 	.word	0x08021acc
 8017a38:	08021aec 	.word	0x08021aec
 8017a3c:	00000000 	.word	0x00000000
 8017a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8017a44:	ed97 7a03 	vldr	s14, [r7, #12]
 8017a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a4c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.w / target;
 8017a50:	edd7 6a08 	vldr	s13, [r7, #32]
 8017a54:	ed97 7a03 	vldr	s14, [r7, #12]
 8017a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017a5c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 8017a60:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017a64:	ed97 7a03 	vldr	s14, [r7, #12]
 8017a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017a6c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 8017a70:	ed97 7a08 	vldr	s14, [r7, #32]
 8017a74:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8017a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017a82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017a86:	683b      	ldr	r3, [r7, #0]
 8017a88:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8017a8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a98:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 8017a9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8017aa0:	edd7 6a08 	vldr	s13, [r7, #32]
 8017aa4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8017aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8017ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ac4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 8017ac8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8017acc:	683b      	ldr	r3, [r7, #0]
 8017ace:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017ad2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017adc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ae8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    cursor.y = scroll.y + style->border + style->padding.y;
 8017aec:	ed97 7a07 	vldr	s14, [r7, #28]
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8017af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8017b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b04:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 8017b08:	69bb      	ldr	r3, [r7, #24]
 8017b0a:	657b      	str	r3, [r7, #84]	; 0x54
    empty_west.y = scroll.y;
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	65bb      	str	r3, [r7, #88]	; 0x58
    empty_west.w = cursor.x - scroll.x;
 8017b10:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8017b14:	edd7 7a06 	vldr	s15, [r7, #24]
 8017b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b1c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    empty_west.h = scroll.h;
 8017b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b22:	663b      	str	r3, [r7, #96]	; 0x60

    empty_east.x = cursor.x + cursor.w;
 8017b24:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8017b28:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8017b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b30:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    empty_east.y = scroll.y;
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	64bb      	str	r3, [r7, #72]	; 0x48
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 8017b38:	ed97 7a06 	vldr	s14, [r7, #24]
 8017b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8017b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017b44:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8017b48:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8017b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b54:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    empty_east.h = scroll.h;
 8017b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5a:	653b      	str	r3, [r7, #80]	; 0x50

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 8017b5c:	f107 0218 	add.w	r2, r7, #24
 8017b60:	2301      	movs	r3, #1
 8017b62:	9303      	str	r3, [sp, #12]
 8017b64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017b68:	9302      	str	r3, [sp, #8]
 8017b6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017b6e:	9301      	str	r3, [sp, #4]
 8017b70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 8017b7a:	edd7 0a03 	vldr	s1, [r7, #12]
 8017b7e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8017b82:	4613      	mov	r3, r2
 8017b84:	697a      	ldr	r2, [r7, #20]
 8017b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017b8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b8c:	f7fe fec2 	bl	8016914 <nk_scrollbar_behavior>
 8017b90:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 8017b94:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8017b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017ba0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.x = scroll.x + (scroll_off * scroll.w);
 8017ba4:	ed97 7a06 	vldr	s14, [r7, #24]
 8017ba8:	edd7 6a08 	vldr	s13, [r7, #32]
 8017bac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8017bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017bb8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d007      	beq.n	8017bd6 <nk_do_scrollbarh+0x442>
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017bcc:	683a      	ldr	r2, [r7, #0]
 8017bce:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8017bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bd4:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 8017bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bd8:	6819      	ldr	r1, [r3, #0]
 8017bda:	f107 0218 	add.w	r2, r7, #24
 8017bde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017be2:	9300      	str	r3, [sp, #0]
 8017be4:	4613      	mov	r3, r2
 8017be6:	683a      	ldr	r2, [r7, #0]
 8017be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bea:	f7ff fa19 	bl	8017020 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d007      	beq.n	8017c08 <nk_do_scrollbarh+0x474>
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8017bfe:	683a      	ldr	r2, [r7, #0]
 8017c00:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8017c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c06:	4798      	blx	r3
    return scroll_offset;
 8017c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8017c0a:	ee07 3a90 	vmov	s15, r3
 8017c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8017c12:	3788      	adds	r7, #136	; 0x88
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <nk_slider_behavior>:
NK_LIB float
nk_slider_behavior(nk_flags *state, struct nk_rect *logical_cursor,
    struct nk_rect *visual_cursor, struct nk_input *in,
    struct nk_rect bounds, float slider_min, float slider_max, float slider_value,
    float slider_step, float slider_steps)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b094      	sub	sp, #80	; 0x50
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8017c20:	6339      	str	r1, [r7, #48]	; 0x30
 8017c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c26:	eeb0 6a40 	vmov.f32	s12, s0
 8017c2a:	eef0 6a60 	vmov.f32	s13, s1
 8017c2e:	eeb0 7a41 	vmov.f32	s14, s2
 8017c32:	eef0 7a61 	vmov.f32	s15, s3
 8017c36:	ed87 2a05 	vstr	s4, [r7, #20]
 8017c3a:	edc7 2a04 	vstr	s5, [r7, #16]
 8017c3e:	ed87 3a03 	vstr	s6, [r7, #12]
 8017c42:	edc7 3a02 	vstr	s7, [r7, #8]
 8017c46:	ed87 4a01 	vstr	s8, [r7, #4]
 8017c4a:	ed87 6a06 	vstr	s12, [r7, #24]
 8017c4e:	edc7 6a07 	vstr	s13, [r7, #28]
 8017c52:	ed87 7a08 	vstr	s14, [r7, #32]
 8017c56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    int left_mouse_down;
    int left_mouse_click_in_cursor;

    /* check if visual cursor is being dragged */
    nk_widget_state_reset(state);
 8017c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f003 0302 	and.w	r3, r3, #2
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d003      	beq.n	8017c6e <nk_slider_behavior+0x56>
 8017c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c68:	2206      	movs	r2, #6
 8017c6a:	601a      	str	r2, [r3, #0]
 8017c6c:	e002      	b.n	8017c74 <nk_slider_behavior+0x5c>
 8017c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c70:	2204      	movs	r2, #4
 8017c72:	601a      	str	r2, [r3, #0]
    left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;
 8017c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d006      	beq.n	8017c88 <nk_slider_behavior+0x70>
 8017c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d001      	beq.n	8017c88 <nk_slider_behavior+0x70>
 8017c84:	2301      	movs	r3, #1
 8017c86:	e000      	b.n	8017c8a <nk_slider_behavior+0x72>
 8017c88:	2300      	movs	r3, #0
 8017c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    left_mouse_click_in_cursor = in && nk_input_has_mouse_click_down_in_rect(in,
 8017c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d01a      	beq.n	8017cc8 <nk_slider_behavior+0xb0>
 8017c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c94:	ed93 6a00 	vldr	s12, [r3]
 8017c98:	edd3 6a01 	vldr	s13, [r3, #4]
 8017c9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017ca0:	edd3 7a03 	vldr	s15, [r3, #12]
 8017ca4:	2201      	movs	r2, #1
 8017ca6:	eeb0 0a46 	vmov.f32	s0, s12
 8017caa:	eef0 0a66 	vmov.f32	s1, s13
 8017cae:	eeb0 1a47 	vmov.f32	s2, s14
 8017cb2:	eef0 1a67 	vmov.f32	s3, s15
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cba:	f7fa fba5 	bl	8012408 <nk_input_has_mouse_click_down_in_rect>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d001      	beq.n	8017cc8 <nk_slider_behavior+0xb0>
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	e000      	b.n	8017cca <nk_slider_behavior+0xb2>
 8017cc8:	2300      	movs	r3, #0
 8017cca:	64bb      	str	r3, [r7, #72]	; 0x48
            NK_BUTTON_LEFT, *visual_cursor, nk_true);

    if (left_mouse_down && left_mouse_click_in_cursor) {
 8017ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	f000 80b1 	beq.w	8017e36 <nk_slider_behavior+0x21e>
 8017cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	f000 80ad 	beq.w	8017e36 <nk_slider_behavior+0x21e>
        float ratio = 0;
 8017cdc:	f04f 0300 	mov.w	r3, #0
 8017ce0:	647b      	str	r3, [r7, #68]	; 0x44
        const float d = in->mouse.pos.x - (visual_cursor->x+visual_cursor->w*0.5f);
 8017ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce4:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8017ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cea:	edd3 6a00 	vldr	s13, [r3]
 8017cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8017cf4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017cf8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        const float pxstep = bounds.w / slider_steps;
 8017d08:	edd7 6a08 	vldr	s13, [r7, #32]
 8017d0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8017d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017d14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        /* only update value if the next slider step is reached */
        *state = NK_WIDGET_STATE_ACTIVE;
 8017d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d1a:	2222      	movs	r2, #34	; 0x22
 8017d1c:	601a      	str	r2, [r3, #0]
        if (NK_ABS(d) >= pxstep) {
 8017d1e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2a:	d504      	bpl.n	8017d36 <nk_slider_behavior+0x11e>
 8017d2c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d30:	eef1 7a67 	vneg.f32	s15, s15
 8017d34:	e001      	b.n	8017d3a <nk_slider_behavior+0x122>
 8017d36:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d3a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8017d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d46:	db76      	blt.n	8017e36 <nk_slider_behavior+0x21e>
            const float steps = (float)((int)(NK_ABS(d) / pxstep));
 8017d48:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d54:	d504      	bpl.n	8017d60 <nk_slider_behavior+0x148>
 8017d56:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d5a:	eef1 7a67 	vneg.f32	s15, s15
 8017d5e:	e001      	b.n	8017d64 <nk_slider_behavior+0x14c>
 8017d60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d64:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8017d68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017d6c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d74:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            slider_value += (d > 0) ? (slider_step*steps) : -(slider_step*steps);
 8017d78:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017d7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d84:	dd06      	ble.n	8017d94 <nk_slider_behavior+0x17c>
 8017d86:	ed97 7a02 	vldr	s14, [r7, #8]
 8017d8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017d92:	e007      	b.n	8017da4 <nk_slider_behavior+0x18c>
 8017d94:	ed97 7a02 	vldr	s14, [r7, #8]
 8017d98:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017da0:	eef1 7a67 	vneg.f32	s15, s15
 8017da4:	ed97 7a03 	vldr	s14, [r7, #12]
 8017da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017dac:	edc7 7a03 	vstr	s15, [r7, #12]
            slider_value = NK_CLAMP(slider_min, slider_value, slider_max);
 8017db0:	ed97 7a03 	vldr	s14, [r7, #12]
 8017db4:	edd7 7a04 	vldr	s15, [r7, #16]
 8017db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc0:	d502      	bpl.n	8017dc8 <nk_slider_behavior+0x1b0>
 8017dc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8017dc6:	e001      	b.n	8017dcc <nk_slider_behavior+0x1b4>
 8017dc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8017dcc:	ed97 7a05 	vldr	s14, [r7, #20]
 8017dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dd8:	d501      	bpl.n	8017dde <nk_slider_behavior+0x1c6>
 8017dda:	697b      	ldr	r3, [r7, #20]
 8017ddc:	e00b      	b.n	8017df6 <nk_slider_behavior+0x1de>
 8017dde:	ed97 7a03 	vldr	s14, [r7, #12]
 8017de2:	edd7 7a04 	vldr	s15, [r7, #16]
 8017de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dee:	d501      	bpl.n	8017df4 <nk_slider_behavior+0x1dc>
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	e000      	b.n	8017df6 <nk_slider_behavior+0x1de>
 8017df4:	693b      	ldr	r3, [r7, #16]
 8017df6:	60fb      	str	r3, [r7, #12]
            ratio = (slider_value - slider_min)/slider_step;
 8017df8:	ed97 7a03 	vldr	s14, [r7, #12]
 8017dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8017e00:	ee77 6a67 	vsub.f32	s13, s14, s15
 8017e04:	ed97 7a02 	vldr	s14, [r7, #8]
 8017e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017e0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            logical_cursor->x = bounds.x + (logical_cursor->w * ratio);
 8017e10:	ed97 7a06 	vldr	s14, [r7, #24]
 8017e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e16:	edd3 6a02 	vldr	s13, [r3, #8]
 8017e1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8017e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e28:	edc3 7a00 	vstr	s15, [r3]
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = logical_cursor->x;
 8017e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e2e:	681a      	ldr	r2, [r3, #0]
 8017e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e32:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        }
    }

    /* slider widget state */
    if (nk_input_is_mouse_hovering_rect(in, bounds))
 8017e36:	ed97 6a06 	vldr	s12, [r7, #24]
 8017e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8017e3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8017e42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017e46:	eeb0 0a46 	vmov.f32	s0, s12
 8017e4a:	eef0 0a66 	vmov.f32	s1, s13
 8017e4e:	eeb0 1a47 	vmov.f32	s2, s14
 8017e52:	eef0 1a67 	vmov.f32	s3, s15
 8017e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e58:	f7fa fb1d 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d002      	beq.n	8017e68 <nk_slider_behavior+0x250>
        *state = NK_WIDGET_STATE_HOVERED;
 8017e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e64:	2212      	movs	r2, #18
 8017e66:	601a      	str	r2, [r3, #0]
    if (*state & NK_WIDGET_STATE_HOVER &&
 8017e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	f003 0310 	and.w	r3, r3, #16
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d01c      	beq.n	8017eae <nk_slider_behavior+0x296>
        !nk_input_is_mouse_prev_hovering_rect(in, bounds))
 8017e74:	ed97 6a06 	vldr	s12, [r7, #24]
 8017e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8017e7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8017e80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017e84:	eeb0 0a46 	vmov.f32	s0, s12
 8017e88:	eef0 0a66 	vmov.f32	s1, s13
 8017e8c:	eeb0 1a47 	vmov.f32	s2, s14
 8017e90:	eef0 1a67 	vmov.f32	s3, s15
 8017e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e96:	f7fa fb50 	bl	801253a <nk_input_is_mouse_prev_hovering_rect>
 8017e9a:	4603      	mov	r3, r0
    if (*state & NK_WIDGET_STATE_HOVER &&
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d106      	bne.n	8017eae <nk_slider_behavior+0x296>
        *state |= NK_WIDGET_STATE_ENTERED;
 8017ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	f043 0208 	orr.w	r2, r3, #8
 8017ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017eaa:	601a      	str	r2, [r3, #0]
 8017eac:	e01b      	b.n	8017ee6 <nk_slider_behavior+0x2ce>
    else if (nk_input_is_mouse_prev_hovering_rect(in, bounds))
 8017eae:	ed97 6a06 	vldr	s12, [r7, #24]
 8017eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8017eb6:	ed97 7a08 	vldr	s14, [r7, #32]
 8017eba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017ebe:	eeb0 0a46 	vmov.f32	s0, s12
 8017ec2:	eef0 0a66 	vmov.f32	s1, s13
 8017ec6:	eeb0 1a47 	vmov.f32	s2, s14
 8017eca:	eef0 1a67 	vmov.f32	s3, s15
 8017ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ed0:	f7fa fb33 	bl	801253a <nk_input_is_mouse_prev_hovering_rect>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d005      	beq.n	8017ee6 <nk_slider_behavior+0x2ce>
        *state |= NK_WIDGET_STATE_LEFT;
 8017eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8017ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ee4:	601a      	str	r2, [r3, #0]
    return slider_value;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	ee07 3a90 	vmov	s15, r3
}
 8017eec:	eeb0 0a67 	vmov.f32	s0, s15
 8017ef0:	3750      	adds	r7, #80	; 0x50
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}
	...

08017ef8 <nk_draw_slider>:
NK_LIB void
nk_draw_slider(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_slider *style, const struct nk_rect *bounds,
    const struct nk_rect *visual_cursor, float min, float value, float max)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b094      	sub	sp, #80	; 0x50
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	61f8      	str	r0, [r7, #28]
 8017f00:	61b9      	str	r1, [r7, #24]
 8017f02:	617a      	str	r2, [r7, #20]
 8017f04:	613b      	str	r3, [r7, #16]
 8017f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8017f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8017f0e:	ed87 1a01 	vstr	s2, [r7, #4]

    NK_UNUSED(min);
    NK_UNUSED(max);
    NK_UNUSED(value);

    if (state & NK_WIDGET_STATE_ACTIVED) {
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	f003 0320 	and.w	r3, r3, #32
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d009      	beq.n	8017f30 <nk_draw_slider+0x38>
        background = &style->active;
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	3338      	adds	r3, #56	; 0x38
 8017f20:	64fb      	str	r3, [r7, #76]	; 0x4c
        bar_color = style->bar_active;
 8017f22:	697b      	ldr	r3, [r7, #20]
 8017f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017f26:	627b      	str	r3, [r7, #36]	; 0x24
        cursor = &style->cursor_active;
 8017f28:	697b      	ldr	r3, [r7, #20]
 8017f2a:	33a0      	adds	r3, #160	; 0xa0
 8017f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8017f2e:	e016      	b.n	8017f5e <nk_draw_slider+0x66>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 8017f30:	69bb      	ldr	r3, [r7, #24]
 8017f32:	f003 0310 	and.w	r3, r3, #16
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d009      	beq.n	8017f4e <nk_draw_slider+0x56>
        background = &style->hover;
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	331c      	adds	r3, #28
 8017f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
        bar_color = style->bar_hover;
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f44:	627b      	str	r3, [r7, #36]	; 0x24
        cursor = &style->cursor_hover;
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	3384      	adds	r3, #132	; 0x84
 8017f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8017f4c:	e007      	b.n	8017f5e <nk_draw_slider+0x66>
    } else {
        background = &style->normal;
 8017f4e:	697b      	ldr	r3, [r7, #20]
 8017f50:	64fb      	str	r3, [r7, #76]	; 0x4c
        bar_color = style->bar_normal;
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f56:	627b      	str	r3, [r7, #36]	; 0x24
        cursor = &style->cursor_normal;
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	3368      	adds	r3, #104	; 0x68
 8017f5c:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    /* calculate slider background bar */
    bar.x = bounds->x;
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	62bb      	str	r3, [r7, #40]	; 0x28
    bar.y = (visual_cursor->y + visual_cursor->h/2) - bounds->h/12;
 8017f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017f66:	ed93 7a01 	vldr	s14, [r3, #4]
 8017f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017f6c:	edd3 6a03 	vldr	s13, [r3, #12]
 8017f70:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017f74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8017f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f7c:	693b      	ldr	r3, [r7, #16]
 8017f7e:	edd3 6a03 	vldr	s13, [r3, #12]
 8017f82:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 8017f86:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8017f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    bar.w = bounds->w;
 8017f92:	693b      	ldr	r3, [r7, #16]
 8017f94:	689b      	ldr	r3, [r3, #8]
 8017f96:	633b      	str	r3, [r7, #48]	; 0x30
    bar.h = bounds->h/6;
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8017f9e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8017fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017fa6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* filled background bar style */
    fill.w = (visual_cursor->x + (visual_cursor->w/2.0f)) - bar.x;
 8017faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017fac:	ed93 7a00 	vldr	s14, [r3]
 8017fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017fb2:	edd3 6a02 	vldr	s13, [r3, #8]
 8017fb6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017fba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8017fbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017fc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8017fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017fca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    fill.x = bar.x;
 8017fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    fill.y = bar.y;
 8017fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    fill.h = bar.h;
 8017fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fd8:	647b      	str	r3, [r7, #68]	; 0x44

    /* draw background */
    switch(background->type) {
 8017fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	2b02      	cmp	r3, #2
 8017fe0:	d01e      	beq.n	8018020 <nk_draw_slider+0x128>
 8017fe2:	2b02      	cmp	r3, #2
 8017fe4:	dc71      	bgt.n	80180ca <nk_draw_slider+0x1d2>
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d033      	beq.n	8018052 <nk_draw_slider+0x15a>
 8017fea:	2b01      	cmp	r3, #1
 8017fec:	d16d      	bne.n	80180ca <nk_draw_slider+0x1d2>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 8017fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ff0:	1d19      	adds	r1, r3, #4
 8017ff2:	4a6b      	ldr	r2, [pc, #428]	; (80181a0 <nk_draw_slider+0x2a8>)
 8017ff4:	693b      	ldr	r3, [r7, #16]
 8017ff6:	ed93 6a00 	vldr	s12, [r3]
 8017ffa:	edd3 6a01 	vldr	s13, [r3, #4]
 8017ffe:	ed93 7a02 	vldr	s14, [r3, #8]
 8018002:	edd3 7a03 	vldr	s15, [r3, #12]
 8018006:	6812      	ldr	r2, [r2, #0]
 8018008:	eeb0 0a46 	vmov.f32	s0, s12
 801800c:	eef0 0a66 	vmov.f32	s1, s13
 8018010:	eeb0 1a47 	vmov.f32	s2, s14
 8018014:	eef0 1a67 	vmov.f32	s3, s15
 8018018:	69f8      	ldr	r0, [r7, #28]
 801801a:	f7f9 f955 	bl	80112c8 <nk_draw_image>
            break;
 801801e:	e054      	b.n	80180ca <nk_draw_slider+0x1d2>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 8018020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018022:	1d19      	adds	r1, r3, #4
 8018024:	4a5e      	ldr	r2, [pc, #376]	; (80181a0 <nk_draw_slider+0x2a8>)
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	ed93 6a00 	vldr	s12, [r3]
 801802c:	edd3 6a01 	vldr	s13, [r3, #4]
 8018030:	ed93 7a02 	vldr	s14, [r3, #8]
 8018034:	edd3 7a03 	vldr	s15, [r3, #12]
 8018038:	6812      	ldr	r2, [r2, #0]
 801803a:	eeb0 0a46 	vmov.f32	s0, s12
 801803e:	eef0 0a66 	vmov.f32	s1, s13
 8018042:	eeb0 1a47 	vmov.f32	s2, s14
 8018046:	eef0 1a67 	vmov.f32	s3, s15
 801804a:	69f8      	ldr	r0, [r7, #28]
 801804c:	f7f9 fa2e 	bl	80114ac <nk_draw_nine_slice>
            break;
 8018050:	e03b      	b.n	80180ca <nk_draw_slider+0x1d2>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 8018058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	ed93 6a00 	vldr	s12, [r3]
 8018060:	edd3 6a01 	vldr	s13, [r3, #4]
 8018064:	ed93 7a02 	vldr	s14, [r3, #8]
 8018068:	edd3 7a03 	vldr	s15, [r3, #12]
 801806c:	6851      	ldr	r1, [r2, #4]
 801806e:	eeb0 2a65 	vmov.f32	s4, s11
 8018072:	eeb0 0a46 	vmov.f32	s0, s12
 8018076:	eef0 0a66 	vmov.f32	s1, s13
 801807a:	eeb0 1a47 	vmov.f32	s2, s14
 801807e:	eef0 1a67 	vmov.f32	s3, s15
 8018082:	69f8      	ldr	r0, [r7, #28]
 8018084:	f7f8 fdc6 	bl	8010c14 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 801808e:	697b      	ldr	r3, [r7, #20]
 8018090:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
 8018094:	697a      	ldr	r2, [r7, #20]
 8018096:	693b      	ldr	r3, [r7, #16]
 8018098:	ed93 6a00 	vldr	s12, [r3]
 801809c:	edd3 6a01 	vldr	s13, [r3, #4]
 80180a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80180a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80180a8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80180aa:	eef0 2a45 	vmov.f32	s5, s10
 80180ae:	eeb0 2a65 	vmov.f32	s4, s11
 80180b2:	eeb0 0a46 	vmov.f32	s0, s12
 80180b6:	eef0 0a66 	vmov.f32	s1, s13
 80180ba:	eeb0 1a47 	vmov.f32	s2, s14
 80180be:	eef0 1a67 	vmov.f32	s3, s15
 80180c2:	69f8      	ldr	r0, [r7, #28]
 80180c4:	f7f8 fc9e 	bl	8010a04 <nk_stroke_rect>
            break;
 80180c8:	bf00      	nop
    }

    /* draw slider bar */
    nk_fill_rect(out, bar, style->rounding, bar_color);
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 80180d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80180d4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80180d8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80180dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80180e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180e2:	eeb0 2a65 	vmov.f32	s4, s11
 80180e6:	eeb0 0a46 	vmov.f32	s0, s12
 80180ea:	eef0 0a66 	vmov.f32	s1, s13
 80180ee:	eeb0 1a47 	vmov.f32	s2, s14
 80180f2:	eef0 1a67 	vmov.f32	s3, s15
 80180f6:	69f8      	ldr	r0, [r7, #28]
 80180f8:	f7f8 fd8c 	bl	8010c14 <nk_fill_rect>
    nk_fill_rect(out, fill, style->rounding, style->bar_filled);
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
 8018102:	697b      	ldr	r3, [r7, #20]
 8018104:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8018108:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801810c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8018110:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018114:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8018116:	eeb0 2a65 	vmov.f32	s4, s11
 801811a:	eeb0 0a46 	vmov.f32	s0, s12
 801811e:	eef0 0a66 	vmov.f32	s1, s13
 8018122:	eeb0 1a47 	vmov.f32	s2, s14
 8018126:	eef0 1a67 	vmov.f32	s3, s15
 801812a:	69f8      	ldr	r0, [r7, #28]
 801812c:	f7f8 fd72 	bl	8010c14 <nk_fill_rect>

    /* draw cursor */
    if (cursor->type == NK_STYLE_ITEM_IMAGE)
 8018130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018132:	781b      	ldrb	r3, [r3, #0]
 8018134:	2b01      	cmp	r3, #1
 8018136:	d118      	bne.n	801816a <nk_draw_slider+0x272>
        nk_draw_image(out, *visual_cursor, &cursor->data.image, nk_white);
 8018138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801813a:	1d19      	adds	r1, r3, #4
 801813c:	4a18      	ldr	r2, [pc, #96]	; (80181a0 <nk_draw_slider+0x2a8>)
 801813e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018140:	ed93 6a00 	vldr	s12, [r3]
 8018144:	edd3 6a01 	vldr	s13, [r3, #4]
 8018148:	ed93 7a02 	vldr	s14, [r3, #8]
 801814c:	edd3 7a03 	vldr	s15, [r3, #12]
 8018150:	6812      	ldr	r2, [r2, #0]
 8018152:	eeb0 0a46 	vmov.f32	s0, s12
 8018156:	eef0 0a66 	vmov.f32	s1, s13
 801815a:	eeb0 1a47 	vmov.f32	s2, s14
 801815e:	eef0 1a67 	vmov.f32	s3, s15
 8018162:	69f8      	ldr	r0, [r7, #28]
 8018164:	f7f9 f8b0 	bl	80112c8 <nk_draw_image>
    else
        nk_fill_circle(out, *visual_cursor, cursor->data.color);
}
 8018168:	e015      	b.n	8018196 <nk_draw_slider+0x29e>
        nk_fill_circle(out, *visual_cursor, cursor->data.color);
 801816a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801816c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801816e:	ed93 6a00 	vldr	s12, [r3]
 8018172:	edd3 6a01 	vldr	s13, [r3, #4]
 8018176:	ed93 7a02 	vldr	s14, [r3, #8]
 801817a:	edd3 7a03 	vldr	s15, [r3, #12]
 801817e:	6851      	ldr	r1, [r2, #4]
 8018180:	eeb0 0a46 	vmov.f32	s0, s12
 8018184:	eef0 0a66 	vmov.f32	s1, s13
 8018188:	eeb0 1a47 	vmov.f32	s2, s14
 801818c:	eef0 1a67 	vmov.f32	s3, s15
 8018190:	69f8      	ldr	r0, [r7, #28]
 8018192:	f7f8 fe35 	bl	8010e00 <nk_fill_circle>
}
 8018196:	bf00      	nop
 8018198:	3750      	adds	r7, #80	; 0x50
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	080235c0 	.word	0x080235c0

080181a4 <nk_do_slider>:
nk_do_slider(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    float min, float val, float max, float step,
    const struct nk_style_slider *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b0a4      	sub	sp, #144	; 0x90
 80181a8:	af04      	add	r7, sp, #16
 80181aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80181ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80181ae:	eeb0 6a40 	vmov.f32	s12, s0
 80181b2:	eef0 6a60 	vmov.f32	s13, s1
 80181b6:	eeb0 7a41 	vmov.f32	s14, s2
 80181ba:	eef0 7a61 	vmov.f32	s15, s3
 80181be:	ed87 2a05 	vstr	s4, [r7, #20]
 80181c2:	edc7 2a04 	vstr	s5, [r7, #16]
 80181c6:	ed87 3a03 	vstr	s6, [r7, #12]
 80181ca:	edc7 3a02 	vstr	s7, [r7, #8]
 80181ce:	607a      	str	r2, [r7, #4]
 80181d0:	603b      	str	r3, [r7, #0]
 80181d2:	ed87 6a06 	vstr	s12, [r7, #24]
 80181d6:	edc7 6a07 	vstr	s13, [r7, #28]
 80181da:	ed87 7a08 	vstr	s14, [r7, #32]
 80181de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cursor_offset;

    struct nk_rect visual_cursor;
    struct nk_rect logical_cursor;

    NK_ASSERT(style);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d105      	bne.n	80181f4 <nk_do_slider+0x50>
 80181e8:	4bad      	ldr	r3, [pc, #692]	; (80184a0 <nk_do_slider+0x2fc>)
 80181ea:	4aae      	ldr	r2, [pc, #696]	; (80184a4 <nk_do_slider+0x300>)
 80181ec:	2186      	movs	r1, #134	; 0x86
 80181ee:	48ae      	ldr	r0, [pc, #696]	; (80184a8 <nk_do_slider+0x304>)
 80181f0:	f005 fbbe 	bl	801d970 <__assert_func>
    NK_ASSERT(out);
 80181f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d105      	bne.n	8018206 <nk_do_slider+0x62>
 80181fa:	4bac      	ldr	r3, [pc, #688]	; (80184ac <nk_do_slider+0x308>)
 80181fc:	4aa9      	ldr	r2, [pc, #676]	; (80184a4 <nk_do_slider+0x300>)
 80181fe:	2187      	movs	r1, #135	; 0x87
 8018200:	48a9      	ldr	r0, [pc, #676]	; (80184a8 <nk_do_slider+0x304>)
 8018202:	f005 fbb5 	bl	801d970 <__assert_func>
    if (!out || !style)
 8018206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018208:	2b00      	cmp	r3, #0
 801820a:	d002      	beq.n	8018212 <nk_do_slider+0x6e>
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d102      	bne.n	8018218 <nk_do_slider+0x74>
        return 0;
 8018212:	f04f 0300 	mov.w	r3, #0
 8018216:	e206      	b.n	8018626 <nk_do_slider+0x482>

    /* remove padding from slider bounds */
    bounds.x = bounds.x + style->padding.x;
 8018218:	ed97 7a06 	vldr	s14, [r7, #24]
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8018222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018226:	edc7 7a06 	vstr	s15, [r7, #24]
    bounds.y = bounds.y + style->padding.y;
 801822a:	ed97 7a07 	vldr	s14, [r7, #28]
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8018234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018238:	edc7 7a07 	vstr	s15, [r7, #28]
    bounds.h = NK_MAX(bounds.h, 2*style->padding.y);
 801823c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8018246:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801824a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801824e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018252:	d505      	bpl.n	8018260 <nk_do_slider+0xbc>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 801825a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801825e:	e001      	b.n	8018264 <nk_do_slider+0xc0>
 8018260:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018264:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = NK_MAX(bounds.w, 2*style->padding.x + style->cursor_size.x);
 8018268:	ed97 7a08 	vldr	s14, [r7, #32]
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8018272:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 801827c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8018280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018288:	d50a      	bpl.n	80182a0 <nk_do_slider+0xfc>
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8018290:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 801829a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801829e:	e001      	b.n	80182a4 <nk_do_slider+0x100>
 80182a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80182a4:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.w -= 2 * style->padding.x;
 80182a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80182b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80182b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182ba:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.h -= 2 * style->padding.y;
 80182be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80182c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80182cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80182d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* optional buttons */
    if (style->show_buttons) {
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f000 808d 	beq.w	80183fa <nk_do_slider+0x256>
        nk_flags ws;
        struct nk_rect button;
        button.y = bounds.y;
 80182e0:	69fb      	ldr	r3, [r7, #28]
 80182e2:	63bb      	str	r3, [r7, #56]	; 0x38
        button.w = bounds.h;
 80182e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        button.h = bounds.h;
 80182e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ea:	643b      	str	r3, [r7, #64]	; 0x40

        /* decrement button */
        button.x = bounds.x;
 80182ec:	69bb      	ldr	r3, [r7, #24]
 80182ee:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol, NK_BUTTON_DEFAULT,
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f893 1215 	ldrb.w	r1, [r3, #533]	; 0x215
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80182fc:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8018300:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8018304:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8018308:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801830c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8018310:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018314:	9202      	str	r2, [sp, #8]
 8018316:	683a      	ldr	r2, [r7, #0]
 8018318:	9201      	str	r2, [sp, #4]
 801831a:	9300      	str	r3, [sp, #0]
 801831c:	2300      	movs	r3, #0
 801831e:	460a      	mov	r2, r1
 8018320:	eeb0 0a46 	vmov.f32	s0, s12
 8018324:	eef0 0a66 	vmov.f32	s1, s13
 8018328:	eeb0 1a47 	vmov.f32	s2, s14
 801832c:	eef0 1a67 	vmov.f32	s3, s15
 8018330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018332:	f7f6 fadb 	bl	800e8ec <nk_do_button_symbol>
 8018336:	4603      	mov	r3, r0
 8018338:	2b00      	cmp	r3, #0
 801833a:	d007      	beq.n	801834c <nk_do_slider+0x1a8>
            &style->dec_button, in, font))
            val -= step;
 801833c:	ed97 7a04 	vldr	s14, [r7, #16]
 8018340:	edd7 7a02 	vldr	s15, [r7, #8]
 8018344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018348:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = (bounds.x + bounds.w) - button.w;
 801834c:	ed97 7a06 	vldr	s14, [r7, #24]
 8018350:	edd7 7a08 	vldr	s15, [r7, #32]
 8018354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018358:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801835c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018360:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol, NK_BUTTON_DEFAULT,
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f893 1214 	ldrb.w	r1, [r3, #532]	; 0x214
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	33e4      	adds	r3, #228	; 0xe4
 801836e:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8018372:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8018376:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801837a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801837e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8018382:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018386:	9202      	str	r2, [sp, #8]
 8018388:	683a      	ldr	r2, [r7, #0]
 801838a:	9201      	str	r2, [sp, #4]
 801838c:	9300      	str	r3, [sp, #0]
 801838e:	2300      	movs	r3, #0
 8018390:	460a      	mov	r2, r1
 8018392:	eeb0 0a46 	vmov.f32	s0, s12
 8018396:	eef0 0a66 	vmov.f32	s1, s13
 801839a:	eeb0 1a47 	vmov.f32	s2, s14
 801839e:	eef0 1a67 	vmov.f32	s3, s15
 80183a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80183a4:	f7f6 faa2 	bl	800e8ec <nk_do_button_symbol>
 80183a8:	4603      	mov	r3, r0
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d007      	beq.n	80183be <nk_do_slider+0x21a>
            &style->inc_button, in, font))
            val += step;
 80183ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80183b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80183b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183ba:	edc7 7a04 	vstr	s15, [r7, #16]

        bounds.x = bounds.x + button.w + style->spacing.x;
 80183be:	ed97 7a06 	vldr	s14, [r7, #24]
 80183c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80183c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80183d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183d4:	edc7 7a06 	vstr	s15, [r7, #24]
        bounds.w = bounds.w - (2*button.w + 2*style->spacing.x);
 80183d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80183dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80183e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80183ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80183ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80183f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80183f6:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* remove one cursor size to support visual cursor */
    bounds.x += style->cursor_size.x*0.5f;
 80183fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8018404:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801840c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018410:	edc7 7a06 	vstr	s15, [r7, #24]
    bounds.w -= style->cursor_size.x;
 8018414:	ed97 7a08 	vldr	s14, [r7, #32]
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 801841e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018422:	edc7 7a08 	vstr	s15, [r7, #32]

    /* make sure the provided values are correct */
    slider_max = NK_MAX(min, max);
 8018426:	ed97 7a05 	vldr	s14, [r7, #20]
 801842a:	edd7 7a03 	vldr	s15, [r7, #12]
 801842e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018436:	d501      	bpl.n	801843c <nk_do_slider+0x298>
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	e000      	b.n	801843e <nk_do_slider+0x29a>
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	67fb      	str	r3, [r7, #124]	; 0x7c
    slider_min = NK_MIN(min, max);
 8018440:	ed97 7a05 	vldr	s14, [r7, #20]
 8018444:	edd7 7a03 	vldr	s15, [r7, #12]
 8018448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018450:	d501      	bpl.n	8018456 <nk_do_slider+0x2b2>
 8018452:	697b      	ldr	r3, [r7, #20]
 8018454:	e000      	b.n	8018458 <nk_do_slider+0x2b4>
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	67bb      	str	r3, [r7, #120]	; 0x78
    slider_value = NK_CLAMP(slider_min, val, slider_max);
 801845a:	ed97 7a04 	vldr	s14, [r7, #16]
 801845e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8018462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801846a:	d502      	bpl.n	8018472 <nk_do_slider+0x2ce>
 801846c:	edd7 7a04 	vldr	s15, [r7, #16]
 8018470:	e001      	b.n	8018476 <nk_do_slider+0x2d2>
 8018472:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8018476:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801847a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018482:	d501      	bpl.n	8018488 <nk_do_slider+0x2e4>
 8018484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018486:	e014      	b.n	80184b2 <nk_do_slider+0x30e>
 8018488:	ed97 7a04 	vldr	s14, [r7, #16]
 801848c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8018490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018498:	d50a      	bpl.n	80184b0 <nk_do_slider+0x30c>
 801849a:	693b      	ldr	r3, [r7, #16]
 801849c:	e009      	b.n	80184b2 <nk_do_slider+0x30e>
 801849e:	bf00      	nop
 80184a0:	08021afc 	.word	0x08021afc
 80184a4:	080235c4 	.word	0x080235c4
 80184a8:	08021b04 	.word	0x08021b04
 80184ac:	08021b20 	.word	0x08021b20
 80184b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80184b2:	677b      	str	r3, [r7, #116]	; 0x74
    slider_range = slider_max - slider_min;
 80184b4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80184b8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80184bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80184c0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    slider_steps = slider_range / step;
 80184c4:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80184c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80184cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80184d0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor_offset = (slider_value - slider_min) / step;
 80184d4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80184d8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80184dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80184e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80184e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80184e8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate cursor
    Basically you have two cursors. One for visual representation and interaction
    and one for updating the actual cursor value. */
    logical_cursor.h = bounds.h;
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	657b      	str	r3, [r7, #84]	; 0x54
    logical_cursor.w = bounds.w / slider_steps;
 80184f0:	edd7 6a08 	vldr	s13, [r7, #32]
 80184f4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80184f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80184fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    logical_cursor.x = bounds.x + (logical_cursor.w * cursor_offset);
 8018500:	ed97 7a06 	vldr	s14, [r7, #24]
 8018504:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8018508:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801850c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018514:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    logical_cursor.y = bounds.y;
 8018518:	69fb      	ldr	r3, [r7, #28]
 801851a:	64fb      	str	r3, [r7, #76]	; 0x4c

    visual_cursor.h = style->cursor_size.y;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8018522:	667b      	str	r3, [r7, #100]	; 0x64
    visual_cursor.w = style->cursor_size.x;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801852a:	663b      	str	r3, [r7, #96]	; 0x60
    visual_cursor.y = (bounds.y + bounds.h*0.5f) - visual_cursor.h*0.5f;
 801852c:	ed97 7a07 	vldr	s14, [r7, #28]
 8018530:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8018534:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018538:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801853c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018540:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8018544:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801854c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018550:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    visual_cursor.x = logical_cursor.x - visual_cursor.w*0.5f;
 8018554:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018558:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801855c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018560:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018568:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    slider_value = nk_slider_behavior(state, &logical_cursor, &visual_cursor,
 801856c:	ed97 6a06 	vldr	s12, [r7, #24]
 8018570:	edd7 6a07 	vldr	s13, [r7, #28]
 8018574:	ed97 7a08 	vldr	s14, [r7, #32]
 8018578:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801857c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8018580:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8018584:	ed97 4a1b 	vldr	s8, [r7, #108]	; 0x6c
 8018588:	edd7 3a02 	vldr	s7, [r7, #8]
 801858c:	ed97 3a1d 	vldr	s6, [r7, #116]	; 0x74
 8018590:	edd7 2a1f 	vldr	s5, [r7, #124]	; 0x7c
 8018594:	ed97 2a1e 	vldr	s4, [r7, #120]	; 0x78
 8018598:	eeb0 0a46 	vmov.f32	s0, s12
 801859c:	eef0 0a66 	vmov.f32	s1, s13
 80185a0:	eeb0 1a47 	vmov.f32	s2, s14
 80185a4:	eef0 1a67 	vmov.f32	s3, s15
 80185a8:	683b      	ldr	r3, [r7, #0]
 80185aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80185ac:	f7ff fb34 	bl	8017c18 <nk_slider_behavior>
 80185b0:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
        in, bounds, slider_min, slider_max, slider_value, step, slider_steps);
    visual_cursor.x = logical_cursor.x - visual_cursor.w*0.5f;
 80185b4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80185b8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80185bc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80185c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80185c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80185c8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    /* draw slider */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d007      	beq.n	80185e6 <nk_do_slider+0x442>
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80185dc:	687a      	ldr	r2, [r7, #4]
 80185de:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
 80185e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185e4:	4798      	blx	r3
    nk_draw_slider(out, *state, style, &bounds, &visual_cursor, slider_min, slider_value, slider_max);
 80185e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e8:	6819      	ldr	r1, [r3, #0]
 80185ea:	f107 0218 	add.w	r2, r7, #24
 80185ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80185f2:	9300      	str	r3, [sp, #0]
 80185f4:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 80185f8:	edd7 0a1d 	vldr	s1, [r7, #116]	; 0x74
 80185fc:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8018600:	4613      	mov	r3, r2
 8018602:	687a      	ldr	r2, [r7, #4]
 8018604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018606:	f7ff fc77 	bl	8017ef8 <nk_draw_slider>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8018610:	2b00      	cmp	r3, #0
 8018612:	d007      	beq.n	8018624 <nk_do_slider+0x480>
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801861a:	687a      	ldr	r2, [r7, #4]
 801861c:	f8d2 1218 	ldr.w	r1, [r2, #536]	; 0x218
 8018620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018622:	4798      	blx	r3
    return slider_value;
 8018624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8018626:	ee07 3a90 	vmov	s15, r3
 801862a:	eeb0 0a67 	vmov.f32	s0, s15
 801862e:	3780      	adds	r7, #128	; 0x80
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <nk_slider_float>:
NK_API nk_bool
nk_slider_float(struct nk_context *ctx, float min_value, float *value, float max_value,
    float value_step)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b094      	sub	sp, #80	; 0x50
 8018638:	af02      	add	r7, sp, #8
 801863a:	6178      	str	r0, [r7, #20]
 801863c:	ed87 0a04 	vstr	s0, [r7, #16]
 8018640:	60f9      	str	r1, [r7, #12]
 8018642:	edc7 0a02 	vstr	s1, [r7, #8]
 8018646:	ed87 1a01 	vstr	s2, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;
    struct nk_input *in;
    const struct nk_style *style;

    int ret = 0;
 801864a:	2300      	movs	r3, #0
 801864c:	647b      	str	r3, [r7, #68]	; 0x44
    float old_value;
    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 801864e:	697b      	ldr	r3, [r7, #20]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d105      	bne.n	8018660 <nk_slider_float+0x2c>
 8018654:	4b5a      	ldr	r3, [pc, #360]	; (80187c0 <nk_slider_float+0x18c>)
 8018656:	4a5b      	ldr	r2, [pc, #364]	; (80187c4 <nk_slider_float+0x190>)
 8018658:	21dc      	movs	r1, #220	; 0xdc
 801865a:	485b      	ldr	r0, [pc, #364]	; (80187c8 <nk_slider_float+0x194>)
 801865c:	f005 f988 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018666:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801866a:	2b00      	cmp	r3, #0
 801866c:	d105      	bne.n	801867a <nk_slider_float+0x46>
 801866e:	4b57      	ldr	r3, [pc, #348]	; (80187cc <nk_slider_float+0x198>)
 8018670:	4a54      	ldr	r2, [pc, #336]	; (80187c4 <nk_slider_float+0x190>)
 8018672:	21dd      	movs	r1, #221	; 0xdd
 8018674:	4854      	ldr	r0, [pc, #336]	; (80187c8 <nk_slider_float+0x194>)
 8018676:	f005 f97b 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018680:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8018684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018688:	2b00      	cmp	r3, #0
 801868a:	d105      	bne.n	8018698 <nk_slider_float+0x64>
 801868c:	4b50      	ldr	r3, [pc, #320]	; (80187d0 <nk_slider_float+0x19c>)
 801868e:	4a4d      	ldr	r2, [pc, #308]	; (80187c4 <nk_slider_float+0x190>)
 8018690:	21de      	movs	r1, #222	; 0xde
 8018692:	484d      	ldr	r0, [pc, #308]	; (80187c8 <nk_slider_float+0x194>)
 8018694:	f005 f96c 	bl	801d970 <__assert_func>
    NK_ASSERT(value);
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d105      	bne.n	80186aa <nk_slider_float+0x76>
 801869e:	4b4d      	ldr	r3, [pc, #308]	; (80187d4 <nk_slider_float+0x1a0>)
 80186a0:	4a48      	ldr	r2, [pc, #288]	; (80187c4 <nk_slider_float+0x190>)
 80186a2:	21df      	movs	r1, #223	; 0xdf
 80186a4:	4848      	ldr	r0, [pc, #288]	; (80187c8 <nk_slider_float+0x194>)
 80186a6:	f005 f963 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !value)
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d012      	beq.n	80186d6 <nk_slider_float+0xa2>
 80186b0:	697b      	ldr	r3, [r7, #20]
 80186b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80186b6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d00b      	beq.n	80186d6 <nk_slider_float+0xa2>
 80186be:	697b      	ldr	r3, [r7, #20]
 80186c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80186c4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80186c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d002      	beq.n	80186d6 <nk_slider_float+0xa2>
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d101      	bne.n	80186da <nk_slider_float+0xa6>
        return ret;
 80186d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80186d8:	e06d      	b.n	80187b6 <nk_slider_float+0x182>

    win = ctx->current;
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80186e0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80186e4:	643b      	str	r3, [r7, #64]	; 0x40
    style = &ctx->style;
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80186ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    layout = win->layout;
 80186ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80186f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80186f4:	63bb      	str	r3, [r7, #56]	; 0x38

    state = nk_widget(&bounds, ctx);
 80186f6:	f107 031c 	add.w	r3, r7, #28
 80186fa:	6979      	ldr	r1, [r7, #20]
 80186fc:	4618      	mov	r0, r3
 80186fe:	f003 fe5f 	bl	801c3c0 <nk_widget>
 8018702:	4603      	mov	r3, r0
 8018704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (!state) return ret;
 8018708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801870c:	2b00      	cmp	r3, #0
 801870e:	d101      	bne.n	8018714 <nk_slider_float+0xe0>
 8018710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018712:	e050      	b.n	80187b6 <nk_slider_float+0x182>
    in = (/*state == NK_WIDGET_ROM || */ layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 8018714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018716:	685b      	ldr	r3, [r3, #4]
 8018718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801871c:	2b00      	cmp	r3, #0
 801871e:	d101      	bne.n	8018724 <nk_slider_float+0xf0>
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	e000      	b.n	8018726 <nk_slider_float+0xf2>
 8018724:	2300      	movs	r3, #0
 8018726:	633b      	str	r3, [r7, #48]	; 0x30

    old_value = *value;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *value = nk_do_slider(&ctx->last_widget_state, &win->buffer, bounds, min_value,
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 8018734:	3014      	adds	r0, #20
 8018736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018738:	f103 0164 	add.w	r1, r3, #100	; 0x64
 801873c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801873e:	f503 6290 	add.w	r2, r3, #1152	; 0x480
                old_value, max_value, value_step, &style->slider, in, style->font);
 8018742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018744:	681b      	ldr	r3, [r3, #0]
    *value = nk_do_slider(&ctx->last_widget_state, &win->buffer, bounds, min_value,
 8018746:	ed97 6a07 	vldr	s12, [r7, #28]
 801874a:	edd7 6a08 	vldr	s13, [r7, #32]
 801874e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018752:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018756:	9300      	str	r3, [sp, #0]
 8018758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801875a:	edd7 3a01 	vldr	s7, [r7, #4]
 801875e:	ed97 3a02 	vldr	s6, [r7, #8]
 8018762:	edd7 2a0b 	vldr	s5, [r7, #44]	; 0x2c
 8018766:	ed97 2a04 	vldr	s4, [r7, #16]
 801876a:	eeb0 0a46 	vmov.f32	s0, s12
 801876e:	eef0 0a66 	vmov.f32	s1, s13
 8018772:	eeb0 1a47 	vmov.f32	s2, s14
 8018776:	eef0 1a67 	vmov.f32	s3, s15
 801877a:	f7ff fd13 	bl	80181a4 <nk_do_slider>
 801877e:	eef0 7a40 	vmov.f32	s15, s0
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	edc3 7a00 	vstr	s15, [r3]
    return (old_value > *value || old_value < *value);
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	edd3 7a00 	vldr	s15, [r3]
 801878e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879a:	dc09      	bgt.n	80187b0 <nk_slider_float+0x17c>
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	edd3 7a00 	vldr	s15, [r3]
 80187a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80187a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80187aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ae:	d501      	bpl.n	80187b4 <nk_slider_float+0x180>
 80187b0:	2301      	movs	r3, #1
 80187b2:	e000      	b.n	80187b6 <nk_slider_float+0x182>
 80187b4:	2300      	movs	r3, #0
}
 80187b6:	4618      	mov	r0, r3
 80187b8:	3748      	adds	r7, #72	; 0x48
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}
 80187be:	bf00      	nop
 80187c0:	08021b24 	.word	0x08021b24
 80187c4:	080235d4 	.word	0x080235d4
 80187c8:	08021b04 	.word	0x08021b04
 80187cc:	08021b28 	.word	0x08021b28
 80187d0:	08021b38 	.word	0x08021b38
 80187d4:	08021b50 	.word	0x08021b50

080187d8 <nk_style_default>:
/* ===============================================================
 *
 *                              STYLE
 *
 * ===============================================================*/
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
 80187e0:	2100      	movs	r1, #0
 80187e2:	6878      	ldr	r0, [r7, #4]
 80187e4:	f000 f838 	bl	8018858 <nk_style_from_table>
 80187e8:	bf00      	nop
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 80187f0:	b4b0      	push	{r4, r5, r7}
 80187f2:	b08b      	sub	sp, #44	; 0x2c
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
 80187f8:	6039      	str	r1, [r7, #0]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 80187fa:	2300      	movs	r3, #0
 80187fc:	733b      	strb	r3, [r7, #12]
    i.data.color = col;
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	613b      	str	r3, [r7, #16]
    return i;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	461d      	mov	r5, r3
 8018806:	f107 040c 	add.w	r4, r7, #12
 801880a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801880c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801880e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018812:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	372c      	adds	r7, #44	; 0x2c
 801881a:	46bd      	mov	sp, r7
 801881c:	bcb0      	pop	{r4, r5, r7}
 801881e:	4770      	bx	lr

08018820 <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 8018820:	b5b0      	push	{r4, r5, r7, lr}
 8018822:	b08a      	sub	sp, #40	; 0x28
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 8018828:	2300      	movs	r3, #0
 801882a:	733b      	strb	r3, [r7, #12]
    i.data.color = nk_rgba(0,0,0,0);
 801882c:	2300      	movs	r3, #0
 801882e:	2200      	movs	r2, #0
 8018830:	2100      	movs	r1, #0
 8018832:	2000      	movs	r0, #0
 8018834:	f7f6 fae0 	bl	800edf8 <nk_rgba>
 8018838:	4603      	mov	r3, r0
 801883a:	613b      	str	r3, [r7, #16]
    return i;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	461d      	mov	r5, r3
 8018840:	f107 040c 	add.w	r4, r7, #12
 8018844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018848:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801884c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	3728      	adds	r7, #40	; 0x28
 8018854:	46bd      	mov	sp, r7
 8018856:	bdb0      	pop	{r4, r5, r7, pc}

08018858 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 8018858:	b5b0      	push	{r4, r5, r7, lr}
 801885a:	b09e      	sub	sp, #120	; 0x78
 801885c:	af00      	add	r7, sp, #0
 801885e:	6278      	str	r0, [r7, #36]	; 0x24
 8018860:	6239      	str	r1, [r7, #32]
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 8018862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018864:	2b00      	cmp	r3, #0
 8018866:	d105      	bne.n	8018874 <nk_style_from_table+0x1c>
 8018868:	4b09      	ldr	r3, [pc, #36]	; (8018890 <nk_style_from_table+0x38>)
 801886a:	4a0a      	ldr	r2, [pc, #40]	; (8018894 <nk_style_from_table+0x3c>)
 801886c:	216b      	movs	r1, #107	; 0x6b
 801886e:	480a      	ldr	r0, [pc, #40]	; (8018898 <nk_style_from_table+0x40>)
 8018870:	f005 f87e 	bl	801d970 <__assert_func>
    if (!ctx) return;
 8018874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018876:	2b00      	cmp	r3, #0
 8018878:	f002 8079 	beq.w	801a96e <nk_style_from_table+0x2116>
    style = &ctx->style;
 801887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018882:	677b      	str	r3, [r7, #116]	; 0x74
    table = (!table) ? nk_default_color_style: table;
 8018884:	6a3b      	ldr	r3, [r7, #32]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d008      	beq.n	801889c <nk_style_from_table+0x44>
 801888a:	6a3b      	ldr	r3, [r7, #32]
 801888c:	e007      	b.n	801889e <nk_style_from_table+0x46>
 801888e:	bf00      	nop
 8018890:	08021dc4 	.word	0x08021dc4
 8018894:	08023654 	.word	0x08023654
 8018898:	08021dc8 	.word	0x08021dc8
 801889c:	4bc6      	ldr	r3, [pc, #792]	; (8018bb8 <nk_style_from_table+0x360>)
 801889e:	623b      	str	r3, [r7, #32]

    /* default text */
    text = &style->text;
 80188a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80188a2:	332c      	adds	r3, #44	; 0x2c
 80188a4:	673b      	str	r3, [r7, #112]	; 0x70
    text->color = table[NK_COLOR_TEXT];
 80188a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80188a8:	6a3a      	ldr	r2, [r7, #32]
 80188aa:	6810      	ldr	r0, [r2, #0]
 80188ac:	6018      	str	r0, [r3, #0]
    text->padding = nk_vec2(0,0);
 80188ae:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80188b0:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8018bbc <nk_style_from_table+0x364>
 80188b4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8018bbc <nk_style_from_table+0x364>
 80188b8:	f7fa ffba 	bl	8013830 <nk_vec2>
 80188bc:	eeb0 7a40 	vmov.f32	s14, s0
 80188c0:	eef0 7a60 	vmov.f32	s15, s1
 80188c4:	ed84 7a01 	vstr	s14, [r4, #4]
 80188c8:	edc4 7a02 	vstr	s15, [r4, #8]

    /* default button */
    button = &style->button;
 80188cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80188ce:	3338      	adds	r3, #56	; 0x38
 80188d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 80188d2:	2198      	movs	r1, #152	; 0x98
 80188d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80188d6:	f003 fb63 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 80188da:	6a3b      	ldr	r3, [r7, #32]
 80188dc:	3310      	adds	r3, #16
 80188de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80188e0:	463a      	mov	r2, r7
 80188e2:	6819      	ldr	r1, [r3, #0]
 80188e4:	460b      	mov	r3, r1
 80188e6:	4619      	mov	r1, r3
 80188e8:	4610      	mov	r0, r2
 80188ea:	f7ff ff81 	bl	80187f0 <nk_style_item_color>
 80188ee:	4625      	mov	r5, r4
 80188f0:	463c      	mov	r4, r7
 80188f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80188fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 80188fe:	6a3b      	ldr	r3, [r7, #32]
 8018900:	3314      	adds	r3, #20
 8018902:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018904:	463a      	mov	r2, r7
 8018906:	6819      	ldr	r1, [r3, #0]
 8018908:	460b      	mov	r3, r1
 801890a:	4619      	mov	r1, r3
 801890c:	4610      	mov	r0, r2
 801890e:	f7ff ff6f 	bl	80187f0 <nk_style_item_color>
 8018912:	341c      	adds	r4, #28
 8018914:	463d      	mov	r5, r7
 8018916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801891a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801891e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 8018922:	6a3b      	ldr	r3, [r7, #32]
 8018924:	3318      	adds	r3, #24
 8018926:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018928:	463a      	mov	r2, r7
 801892a:	6819      	ldr	r1, [r3, #0]
 801892c:	460b      	mov	r3, r1
 801892e:	4619      	mov	r1, r3
 8018930:	4610      	mov	r0, r2
 8018932:	f7ff ff5d 	bl	80187f0 <nk_style_item_color>
 8018936:	3438      	adds	r4, #56	; 0x38
 8018938:	463d      	mov	r5, r7
 801893a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801893c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801893e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 8018946:	6a3b      	ldr	r3, [r7, #32]
 8018948:	f103 020c 	add.w	r2, r3, #12
 801894c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801894e:	3354      	adds	r3, #84	; 0x54
 8018950:	6810      	ldr	r0, [r2, #0]
 8018952:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_BUTTON];
 8018954:	6a3b      	ldr	r3, [r7, #32]
 8018956:	f103 0210 	add.w	r2, r3, #16
 801895a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801895c:	3358      	adds	r3, #88	; 0x58
 801895e:	6810      	ldr	r0, [r2, #0]
 8018960:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8018962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018964:	6a3a      	ldr	r2, [r7, #32]
 8018966:	335c      	adds	r3, #92	; 0x5c
 8018968:	6810      	ldr	r0, [r2, #0]
 801896a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801896c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801896e:	6a3a      	ldr	r2, [r7, #32]
 8018970:	3360      	adds	r3, #96	; 0x60
 8018972:	6810      	ldr	r0, [r2, #0]
 8018974:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8018976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018978:	6a3a      	ldr	r2, [r7, #32]
 801897a:	3364      	adds	r3, #100	; 0x64
 801897c:	6810      	ldr	r0, [r2, #0]
 801897e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8018980:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018982:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018986:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801898a:	f7fa ff51 	bl	8013830 <nk_vec2>
 801898e:	eeb0 7a40 	vmov.f32	s14, s0
 8018992:	eef0 7a60 	vmov.f32	s15, s1
 8018996:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801899a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->image_padding   = nk_vec2(0.0f,0.0f);
 801899e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80189a0:	eddf 0a86 	vldr	s1, [pc, #536]	; 8018bbc <nk_style_from_table+0x364>
 80189a4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8018bbc <nk_style_from_table+0x364>
 80189a8:	f7fa ff42 	bl	8013830 <nk_vec2>
 80189ac:	eeb0 7a40 	vmov.f32	s14, s0
 80189b0:	eef0 7a60 	vmov.f32	s15, s1
 80189b4:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 80189b8:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 80189bc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80189be:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8018bbc <nk_style_from_table+0x364>
 80189c2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8018bbc <nk_style_from_table+0x364>
 80189c6:	f7fa ff33 	bl	8013830 <nk_vec2>
 80189ca:	eeb0 7a40 	vmov.f32	s14, s0
 80189ce:	eef0 7a60 	vmov.f32	s15, s1
 80189d2:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80189d6:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80189da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80189dc:	2000      	movs	r0, #0
 80189de:	f7f9 fadb 	bl	8011f98 <nk_handle_ptr>
 80189e2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80189e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189e8:	2212      	movs	r2, #18
 80189ea:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 80189ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80189f2:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 4.0f;
 80189f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189f6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80189fa:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80189fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80189fe:	2200      	movs	r2, #0
 8018a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a06:	2200      	movs	r2, #0
 8018a08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* contextual button */
    button = &style->contextual_button;
 8018a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018a0e:	33d0      	adds	r3, #208	; 0xd0
 8018a10:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018a12:	2198      	movs	r1, #152	; 0x98
 8018a14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018a16:	f003 fac3 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8018a1a:	6a3b      	ldr	r3, [r7, #32]
 8018a1c:	3304      	adds	r3, #4
 8018a1e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018a20:	463a      	mov	r2, r7
 8018a22:	6819      	ldr	r1, [r3, #0]
 8018a24:	460b      	mov	r3, r1
 8018a26:	4619      	mov	r1, r3
 8018a28:	4610      	mov	r0, r2
 8018a2a:	f7ff fee1 	bl	80187f0 <nk_style_item_color>
 8018a2e:	4625      	mov	r5, r4
 8018a30:	463c      	mov	r4, r7
 8018a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018a36:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018a3a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 8018a3e:	6a3b      	ldr	r3, [r7, #32]
 8018a40:	3314      	adds	r3, #20
 8018a42:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018a44:	463a      	mov	r2, r7
 8018a46:	6819      	ldr	r1, [r3, #0]
 8018a48:	460b      	mov	r3, r1
 8018a4a:	4619      	mov	r1, r3
 8018a4c:	4610      	mov	r0, r2
 8018a4e:	f7ff fecf 	bl	80187f0 <nk_style_item_color>
 8018a52:	341c      	adds	r4, #28
 8018a54:	463d      	mov	r5, r7
 8018a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 8018a62:	6a3b      	ldr	r3, [r7, #32]
 8018a64:	3318      	adds	r3, #24
 8018a66:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018a68:	463a      	mov	r2, r7
 8018a6a:	6819      	ldr	r1, [r3, #0]
 8018a6c:	460b      	mov	r3, r1
 8018a6e:	4619      	mov	r1, r3
 8018a70:	4610      	mov	r0, r2
 8018a72:	f7ff febd 	bl	80187f0 <nk_style_item_color>
 8018a76:	3438      	adds	r4, #56	; 0x38
 8018a78:	463d      	mov	r5, r7
 8018a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 8018a86:	6a3b      	ldr	r3, [r7, #32]
 8018a88:	1d1a      	adds	r2, r3, #4
 8018a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a8c:	3354      	adds	r3, #84	; 0x54
 8018a8e:	6810      	ldr	r0, [r2, #0]
 8018a90:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 8018a92:	6a3b      	ldr	r3, [r7, #32]
 8018a94:	1d1a      	adds	r2, r3, #4
 8018a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018a98:	3358      	adds	r3, #88	; 0x58
 8018a9a:	6810      	ldr	r0, [r2, #0]
 8018a9c:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8018a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018aa0:	6a3a      	ldr	r2, [r7, #32]
 8018aa2:	335c      	adds	r3, #92	; 0x5c
 8018aa4:	6810      	ldr	r0, [r2, #0]
 8018aa6:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8018aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018aaa:	6a3a      	ldr	r2, [r7, #32]
 8018aac:	3360      	adds	r3, #96	; 0x60
 8018aae:	6810      	ldr	r0, [r2, #0]
 8018ab0:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8018ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ab4:	6a3a      	ldr	r2, [r7, #32]
 8018ab6:	3364      	adds	r3, #100	; 0x64
 8018ab8:	6810      	ldr	r0, [r2, #0]
 8018aba:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8018abc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018abe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018ac2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018ac6:	f7fa feb3 	bl	8013830 <nk_vec2>
 8018aca:	eeb0 7a40 	vmov.f32	s14, s0
 8018ace:	eef0 7a60 	vmov.f32	s15, s1
 8018ad2:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018ad6:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018ada:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018adc:	eddf 0a37 	vldr	s1, [pc, #220]	; 8018bbc <nk_style_from_table+0x364>
 8018ae0:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8018bbc <nk_style_from_table+0x364>
 8018ae4:	f7fa fea4 	bl	8013830 <nk_vec2>
 8018ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8018aec:	eef0 7a60 	vmov.f32	s15, s1
 8018af0:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8018af4:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018af8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018afa:	2000      	movs	r0, #0
 8018afc:	f7f9 fa4c 	bl	8011f98 <nk_handle_ptr>
 8018b00:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8018b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b06:	2212      	movs	r2, #18
 8018b08:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8018b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b0c:	f04f 0200 	mov.w	r2, #0
 8018b10:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8018b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b14:	f04f 0200 	mov.w	r2, #0
 8018b18:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b24:	2200      	movs	r2, #0
 8018b26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* menu button */
    button = &style->menu_button;
 8018b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018b2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018b30:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8018b32:	2198      	movs	r1, #152	; 0x98
 8018b34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8018b36:	f003 fa33 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8018b3a:	6a3b      	ldr	r3, [r7, #32]
 8018b3c:	3304      	adds	r3, #4
 8018b3e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018b40:	463a      	mov	r2, r7
 8018b42:	6819      	ldr	r1, [r3, #0]
 8018b44:	460b      	mov	r3, r1
 8018b46:	4619      	mov	r1, r3
 8018b48:	4610      	mov	r0, r2
 8018b4a:	f7ff fe51 	bl	80187f0 <nk_style_item_color>
 8018b4e:	4625      	mov	r5, r4
 8018b50:	463c      	mov	r4, r7
 8018b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018b56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018b5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8018b5e:	6a3b      	ldr	r3, [r7, #32]
 8018b60:	3304      	adds	r3, #4
 8018b62:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018b64:	463a      	mov	r2, r7
 8018b66:	6819      	ldr	r1, [r3, #0]
 8018b68:	460b      	mov	r3, r1
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	f7ff fe3f 	bl	80187f0 <nk_style_item_color>
 8018b72:	341c      	adds	r4, #28
 8018b74:	463d      	mov	r5, r7
 8018b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018b7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 8018b82:	6a3b      	ldr	r3, [r7, #32]
 8018b84:	3304      	adds	r3, #4
 8018b86:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018b88:	463a      	mov	r2, r7
 8018b8a:	6819      	ldr	r1, [r3, #0]
 8018b8c:	460b      	mov	r3, r1
 8018b8e:	4619      	mov	r1, r3
 8018b90:	4610      	mov	r0, r2
 8018b92:	f7ff fe2d 	bl	80187f0 <nk_style_item_color>
 8018b96:	3438      	adds	r4, #56	; 0x38
 8018b98:	463d      	mov	r5, r7
 8018b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 8018ba6:	6a3b      	ldr	r3, [r7, #32]
 8018ba8:	1d1a      	adds	r2, r3, #4
 8018baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bac:	3354      	adds	r3, #84	; 0x54
 8018bae:	6810      	ldr	r0, [r2, #0]
 8018bb0:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 8018bb2:	6a3b      	ldr	r3, [r7, #32]
 8018bb4:	1d1a      	adds	r2, r3, #4
 8018bb6:	e003      	b.n	8018bc0 <nk_style_from_table+0x368>
 8018bb8:	080235e4 	.word	0x080235e4
 8018bbc:	00000000 	.word	0x00000000
 8018bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bc2:	3358      	adds	r3, #88	; 0x58
 8018bc4:	6810      	ldr	r0, [r2, #0]
 8018bc6:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8018bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bca:	6a3a      	ldr	r2, [r7, #32]
 8018bcc:	335c      	adds	r3, #92	; 0x5c
 8018bce:	6810      	ldr	r0, [r2, #0]
 8018bd0:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8018bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bd4:	6a3a      	ldr	r2, [r7, #32]
 8018bd6:	3360      	adds	r3, #96	; 0x60
 8018bd8:	6810      	ldr	r0, [r2, #0]
 8018bda:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8018bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018bde:	6a3a      	ldr	r2, [r7, #32]
 8018be0:	3364      	adds	r3, #100	; 0x64
 8018be2:	6810      	ldr	r0, [r2, #0]
 8018be4:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 8018be6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018be8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018bec:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018bf0:	f7fa fe1e 	bl	8013830 <nk_vec2>
 8018bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8018bf8:	eef0 7a60 	vmov.f32	s15, s1
 8018bfc:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8018c00:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8018c04:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018c06:	ed5f 0a13 	vldr	s1, [pc, #-76]	; 8018bbc <nk_style_from_table+0x364>
 8018c0a:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 8018bbc <nk_style_from_table+0x364>
 8018c0e:	f7fa fe0f 	bl	8013830 <nk_vec2>
 8018c12:	eeb0 7a40 	vmov.f32	s14, s0
 8018c16:	eef0 7a60 	vmov.f32	s15, s1
 8018c1a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8018c1e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8018c22:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8018c24:	2000      	movs	r0, #0
 8018c26:	f7f9 f9b7 	bl	8011f98 <nk_handle_ptr>
 8018c2a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8018c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c30:	2212      	movs	r2, #18
 8018c32:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8018c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c36:	f04f 0200 	mov.w	r2, #0
 8018c3a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 1.0f;
 8018c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018c42:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8018c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c46:	2200      	movs	r2, #0
 8018c48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8018c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c4e:	2200      	movs	r2, #0
 8018c50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* checkbox toggle */
    toggle = &style->checkbox;
 8018c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018c56:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8018c5a:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 8018c5c:	21c8      	movs	r1, #200	; 0xc8
 8018c5e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8018c60:	f003 f99e 	bl	801bfa0 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8018c64:	6a3b      	ldr	r3, [r7, #32]
 8018c66:	331c      	adds	r3, #28
 8018c68:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018c6a:	463a      	mov	r2, r7
 8018c6c:	6819      	ldr	r1, [r3, #0]
 8018c6e:	460b      	mov	r3, r1
 8018c70:	4619      	mov	r1, r3
 8018c72:	4610      	mov	r0, r2
 8018c74:	f7ff fdbc 	bl	80187f0 <nk_style_item_color>
 8018c78:	4625      	mov	r5, r4
 8018c7a:	463c      	mov	r4, r7
 8018c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c80:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018c84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8018c88:	6a3b      	ldr	r3, [r7, #32]
 8018c8a:	3320      	adds	r3, #32
 8018c8c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018c8e:	463a      	mov	r2, r7
 8018c90:	6819      	ldr	r1, [r3, #0]
 8018c92:	460b      	mov	r3, r1
 8018c94:	4619      	mov	r1, r3
 8018c96:	4610      	mov	r0, r2
 8018c98:	f7ff fdaa 	bl	80187f0 <nk_style_item_color>
 8018c9c:	341c      	adds	r4, #28
 8018c9e:	463d      	mov	r5, r7
 8018ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8018cac:	6a3b      	ldr	r3, [r7, #32]
 8018cae:	3320      	adds	r3, #32
 8018cb0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018cb2:	463a      	mov	r2, r7
 8018cb4:	6819      	ldr	r1, [r3, #0]
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	4619      	mov	r1, r3
 8018cba:	4610      	mov	r0, r2
 8018cbc:	f7ff fd98 	bl	80187f0 <nk_style_item_color>
 8018cc0:	3438      	adds	r4, #56	; 0x38
 8018cc2:	463d      	mov	r5, r7
 8018cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8018cd0:	6a3b      	ldr	r3, [r7, #32]
 8018cd2:	3324      	adds	r3, #36	; 0x24
 8018cd4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018cd6:	463a      	mov	r2, r7
 8018cd8:	6819      	ldr	r1, [r3, #0]
 8018cda:	460b      	mov	r3, r1
 8018cdc:	4619      	mov	r1, r3
 8018cde:	4610      	mov	r0, r2
 8018ce0:	f7ff fd86 	bl	80187f0 <nk_style_item_color>
 8018ce4:	3458      	adds	r4, #88	; 0x58
 8018ce6:	463d      	mov	r5, r7
 8018ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8018cf4:	6a3b      	ldr	r3, [r7, #32]
 8018cf6:	3324      	adds	r3, #36	; 0x24
 8018cf8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018cfa:	463a      	mov	r2, r7
 8018cfc:	6819      	ldr	r1, [r3, #0]
 8018cfe:	460b      	mov	r3, r1
 8018d00:	4619      	mov	r1, r3
 8018d02:	4610      	mov	r0, r2
 8018d04:	f7ff fd74 	bl	80187f0 <nk_style_item_color>
 8018d08:	3474      	adds	r4, #116	; 0x74
 8018d0a:	463d      	mov	r5, r7
 8018d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018d14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8018d18:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018d1a:	2000      	movs	r0, #0
 8018d1c:	f7f9 f93c 	bl	8011f98 <nk_handle_ptr>
 8018d20:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 8018d24:	6a3b      	ldr	r3, [r7, #32]
 8018d26:	1d1a      	adds	r2, r3, #4
 8018d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018d2a:	339c      	adds	r3, #156	; 0x9c
 8018d2c:	6810      	ldr	r0, [r2, #0]
 8018d2e:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8018d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018d32:	6a3a      	ldr	r2, [r7, #32]
 8018d34:	3390      	adds	r3, #144	; 0x90
 8018d36:	6810      	ldr	r0, [r2, #0]
 8018d38:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 8018d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018d3c:	6a3a      	ldr	r2, [r7, #32]
 8018d3e:	3394      	adds	r3, #148	; 0x94
 8018d40:	6810      	ldr	r0, [r2, #0]
 8018d42:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 8018d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018d46:	6a3a      	ldr	r2, [r7, #32]
 8018d48:	3398      	adds	r3, #152	; 0x98
 8018d4a:	6810      	ldr	r0, [r2, #0]
 8018d4c:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 8018d4e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018d50:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8018d54:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8018d58:	f7fa fd6a 	bl	8013830 <nk_vec2>
 8018d5c:	eeb0 7a40 	vmov.f32	s14, s0
 8018d60:	eef0 7a60 	vmov.f32	s15, s1
 8018d64:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8018d68:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8018d6c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018d6e:	ed5f 0a6d 	vldr	s1, [pc, #-436]	; 8018bbc <nk_style_from_table+0x364>
 8018d72:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8018bbc <nk_style_from_table+0x364>
 8018d76:	f7fa fd5b 	bl	8013830 <nk_vec2>
 8018d7a:	eeb0 7a40 	vmov.f32	s14, s0
 8018d7e:	eef0 7a60 	vmov.f32	s15, s1
 8018d82:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8018d86:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8018d8a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	2200      	movs	r2, #0
 8018d90:	2100      	movs	r1, #0
 8018d92:	2000      	movs	r0, #0
 8018d94:	f7f6 f830 	bl	800edf8 <nk_rgba>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 8018d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018d9e:	f04f 0200 	mov.w	r2, #0
 8018da2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 8018da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018da8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8018dac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 8018db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018db2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018db6:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 8018db8:	21c8      	movs	r1, #200	; 0xc8
 8018dba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8018dbc:	f003 f8f0 	bl	801bfa0 <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 8018dc0:	6a3b      	ldr	r3, [r7, #32]
 8018dc2:	331c      	adds	r3, #28
 8018dc4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018dc6:	463a      	mov	r2, r7
 8018dc8:	6819      	ldr	r1, [r3, #0]
 8018dca:	460b      	mov	r3, r1
 8018dcc:	4619      	mov	r1, r3
 8018dce:	4610      	mov	r0, r2
 8018dd0:	f7ff fd0e 	bl	80187f0 <nk_style_item_color>
 8018dd4:	4625      	mov	r5, r4
 8018dd6:	463c      	mov	r4, r7
 8018dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018ddc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018de0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8018de4:	6a3b      	ldr	r3, [r7, #32]
 8018de6:	3320      	adds	r3, #32
 8018de8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018dea:	463a      	mov	r2, r7
 8018dec:	6819      	ldr	r1, [r3, #0]
 8018dee:	460b      	mov	r3, r1
 8018df0:	4619      	mov	r1, r3
 8018df2:	4610      	mov	r0, r2
 8018df4:	f7ff fcfc 	bl	80187f0 <nk_style_item_color>
 8018df8:	341c      	adds	r4, #28
 8018dfa:	463d      	mov	r5, r7
 8018dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 8018e08:	6a3b      	ldr	r3, [r7, #32]
 8018e0a:	3320      	adds	r3, #32
 8018e0c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018e0e:	463a      	mov	r2, r7
 8018e10:	6819      	ldr	r1, [r3, #0]
 8018e12:	460b      	mov	r3, r1
 8018e14:	4619      	mov	r1, r3
 8018e16:	4610      	mov	r0, r2
 8018e18:	f7ff fcea 	bl	80187f0 <nk_style_item_color>
 8018e1c:	3438      	adds	r4, #56	; 0x38
 8018e1e:	463d      	mov	r5, r7
 8018e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018e28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8018e2c:	6a3b      	ldr	r3, [r7, #32]
 8018e2e:	3324      	adds	r3, #36	; 0x24
 8018e30:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018e32:	463a      	mov	r2, r7
 8018e34:	6819      	ldr	r1, [r3, #0]
 8018e36:	460b      	mov	r3, r1
 8018e38:	4619      	mov	r1, r3
 8018e3a:	4610      	mov	r0, r2
 8018e3c:	f7ff fcd8 	bl	80187f0 <nk_style_item_color>
 8018e40:	3458      	adds	r4, #88	; 0x58
 8018e42:	463d      	mov	r5, r7
 8018e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018e4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 8018e50:	6a3b      	ldr	r3, [r7, #32]
 8018e52:	3324      	adds	r3, #36	; 0x24
 8018e54:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018e56:	463a      	mov	r2, r7
 8018e58:	6819      	ldr	r1, [r3, #0]
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	4610      	mov	r0, r2
 8018e60:	f7ff fcc6 	bl	80187f0 <nk_style_item_color>
 8018e64:	3474      	adds	r4, #116	; 0x74
 8018e66:	463d      	mov	r5, r7
 8018e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 8018e74:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018e76:	2000      	movs	r0, #0
 8018e78:	f7f9 f88e 	bl	8011f98 <nk_handle_ptr>
 8018e7c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 8018e80:	6a3b      	ldr	r3, [r7, #32]
 8018e82:	1d1a      	adds	r2, r3, #4
 8018e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018e86:	339c      	adds	r3, #156	; 0x9c
 8018e88:	6810      	ldr	r0, [r2, #0]
 8018e8a:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 8018e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018e8e:	6a3a      	ldr	r2, [r7, #32]
 8018e90:	3390      	adds	r3, #144	; 0x90
 8018e92:	6810      	ldr	r0, [r2, #0]
 8018e94:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 8018e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018e98:	6a3a      	ldr	r2, [r7, #32]
 8018e9a:	3394      	adds	r3, #148	; 0x94
 8018e9c:	6810      	ldr	r0, [r2, #0]
 8018e9e:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 8018ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018ea2:	6a3a      	ldr	r2, [r7, #32]
 8018ea4:	3398      	adds	r3, #152	; 0x98
 8018ea6:	6810      	ldr	r0, [r2, #0]
 8018ea8:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 8018eaa:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018eac:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8018eb0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8018eb4:	f7fa fcbc 	bl	8013830 <nk_vec2>
 8018eb8:	eeb0 7a40 	vmov.f32	s14, s0
 8018ebc:	eef0 7a60 	vmov.f32	s15, s1
 8018ec0:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 8018ec4:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 8018ec8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018eca:	ed5f 0ac4 	vldr	s1, [pc, #-784]	; 8018bbc <nk_style_from_table+0x364>
 8018ece:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 8018bbc <nk_style_from_table+0x364>
 8018ed2:	f7fa fcad 	bl	8013830 <nk_vec2>
 8018ed6:	eeb0 7a40 	vmov.f32	s14, s0
 8018eda:	eef0 7a60 	vmov.f32	s15, s1
 8018ede:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 8018ee2:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 8018ee6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8018ee8:	2300      	movs	r3, #0
 8018eea:	2200      	movs	r2, #0
 8018eec:	2100      	movs	r1, #0
 8018eee:	2000      	movs	r0, #0
 8018ef0:	f7f5 ff82 	bl	800edf8 <nk_rgba>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 8018ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018efa:	f04f 0200 	mov.w	r2, #0
 8018efe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 8018f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018f04:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8018f08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* selectable */
    select = &style->selectable;
 8018f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018f0e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8018f12:	667b      	str	r3, [r7, #100]	; 0x64
    nk_zero_struct(*select);
 8018f14:	21f0      	movs	r1, #240	; 0xf0
 8018f16:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8018f18:	f003 f842 	bl	801bfa0 <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 8018f1c:	6a3b      	ldr	r3, [r7, #32]
 8018f1e:	3328      	adds	r3, #40	; 0x28
 8018f20:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018f22:	463a      	mov	r2, r7
 8018f24:	6819      	ldr	r1, [r3, #0]
 8018f26:	460b      	mov	r3, r1
 8018f28:	4619      	mov	r1, r3
 8018f2a:	4610      	mov	r0, r2
 8018f2c:	f7ff fc60 	bl	80187f0 <nk_style_item_color>
 8018f30:	4625      	mov	r5, r4
 8018f32:	463c      	mov	r4, r7
 8018f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018f38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018f3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 8018f40:	6a3b      	ldr	r3, [r7, #32]
 8018f42:	3328      	adds	r3, #40	; 0x28
 8018f44:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018f46:	463a      	mov	r2, r7
 8018f48:	6819      	ldr	r1, [r3, #0]
 8018f4a:	460b      	mov	r3, r1
 8018f4c:	4619      	mov	r1, r3
 8018f4e:	4610      	mov	r0, r2
 8018f50:	f7ff fc4e 	bl	80187f0 <nk_style_item_color>
 8018f54:	341c      	adds	r4, #28
 8018f56:	463d      	mov	r5, r7
 8018f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 8018f64:	6a3b      	ldr	r3, [r7, #32]
 8018f66:	3328      	adds	r3, #40	; 0x28
 8018f68:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018f6a:	463a      	mov	r2, r7
 8018f6c:	6819      	ldr	r1, [r3, #0]
 8018f6e:	460b      	mov	r3, r1
 8018f70:	4619      	mov	r1, r3
 8018f72:	4610      	mov	r0, r2
 8018f74:	f7ff fc3c 	bl	80187f0 <nk_style_item_color>
 8018f78:	3438      	adds	r4, #56	; 0x38
 8018f7a:	463d      	mov	r5, r7
 8018f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8018f88:	6a3b      	ldr	r3, [r7, #32]
 8018f8a:	332c      	adds	r3, #44	; 0x2c
 8018f8c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018f8e:	463a      	mov	r2, r7
 8018f90:	6819      	ldr	r1, [r3, #0]
 8018f92:	460b      	mov	r3, r1
 8018f94:	4619      	mov	r1, r3
 8018f96:	4610      	mov	r0, r2
 8018f98:	f7ff fc2a 	bl	80187f0 <nk_style_item_color>
 8018f9c:	3454      	adds	r4, #84	; 0x54
 8018f9e:	463d      	mov	r5, r7
 8018fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8018fac:	6a3b      	ldr	r3, [r7, #32]
 8018fae:	332c      	adds	r3, #44	; 0x2c
 8018fb0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018fb2:	463a      	mov	r2, r7
 8018fb4:	6819      	ldr	r1, [r3, #0]
 8018fb6:	460b      	mov	r3, r1
 8018fb8:	4619      	mov	r1, r3
 8018fba:	4610      	mov	r0, r2
 8018fbc:	f7ff fc18 	bl	80187f0 <nk_style_item_color>
 8018fc0:	3470      	adds	r4, #112	; 0x70
 8018fc2:	463d      	mov	r5, r7
 8018fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 8018fd0:	6a3b      	ldr	r3, [r7, #32]
 8018fd2:	332c      	adds	r3, #44	; 0x2c
 8018fd4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8018fd6:	463a      	mov	r2, r7
 8018fd8:	6819      	ldr	r1, [r3, #0]
 8018fda:	460b      	mov	r3, r1
 8018fdc:	4619      	mov	r1, r3
 8018fde:	4610      	mov	r0, r2
 8018fe0:	f7ff fc06 	bl	80187f0 <nk_style_item_color>
 8018fe4:	348c      	adds	r4, #140	; 0x8c
 8018fe6:	463d      	mov	r5, r7
 8018fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018fec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018ff0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 8018ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018ff6:	6a3a      	ldr	r2, [r7, #32]
 8018ff8:	33a8      	adds	r3, #168	; 0xa8
 8018ffa:	6810      	ldr	r0, [r2, #0]
 8018ffc:	6018      	str	r0, [r3, #0]
    select->text_hover      = table[NK_COLOR_TEXT];
 8018ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019000:	6a3a      	ldr	r2, [r7, #32]
 8019002:	33ac      	adds	r3, #172	; 0xac
 8019004:	6810      	ldr	r0, [r2, #0]
 8019006:	6018      	str	r0, [r3, #0]
    select->text_pressed    = table[NK_COLOR_TEXT];
 8019008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801900a:	6a3a      	ldr	r2, [r7, #32]
 801900c:	33b0      	adds	r3, #176	; 0xb0
 801900e:	6810      	ldr	r0, [r2, #0]
 8019010:	6018      	str	r0, [r3, #0]
    select->text_normal_active  = table[NK_COLOR_TEXT];
 8019012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019014:	6a3a      	ldr	r2, [r7, #32]
 8019016:	33b4      	adds	r3, #180	; 0xb4
 8019018:	6810      	ldr	r0, [r2, #0]
 801901a:	6018      	str	r0, [r3, #0]
    select->text_hover_active   = table[NK_COLOR_TEXT];
 801901c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801901e:	6a3a      	ldr	r2, [r7, #32]
 8019020:	33b8      	adds	r3, #184	; 0xb8
 8019022:	6810      	ldr	r0, [r2, #0]
 8019024:	6018      	str	r0, [r3, #0]
    select->text_pressed_active = table[NK_COLOR_TEXT];
 8019026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019028:	6a3a      	ldr	r2, [r7, #32]
 801902a:	33bc      	adds	r3, #188	; 0xbc
 801902c:	6810      	ldr	r0, [r2, #0]
 801902e:	6018      	str	r0, [r3, #0]
    select->padding         = nk_vec2(2.0f,2.0f);
 8019030:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8019032:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019036:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801903a:	f7fa fbf9 	bl	8013830 <nk_vec2>
 801903e:	eeb0 7a40 	vmov.f32	s14, s0
 8019042:	eef0 7a60 	vmov.f32	s15, s1
 8019046:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
 801904a:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 801904e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8019050:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019054:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8019058:	f7fa fbea 	bl	8013830 <nk_vec2>
 801905c:	eeb0 7a40 	vmov.f32	s14, s0
 8019060:	eef0 7a60 	vmov.f32	s15, s1
 8019064:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 8019068:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 801906c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801906e:	eddf 0ad0 	vldr	s1, [pc, #832]	; 80193b0 <nk_style_from_table+0xb58>
 8019072:	ed9f 0acf 	vldr	s0, [pc, #828]	; 80193b0 <nk_style_from_table+0xb58>
 8019076:	f7fa fbdb 	bl	8013830 <nk_vec2>
 801907a:	eeb0 7a40 	vmov.f32	s14, s0
 801907e:	eef0 7a60 	vmov.f32	s15, s1
 8019082:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
 8019086:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 801908a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801908c:	2000      	movs	r0, #0
 801908e:	f7f8 ff83 	bl	8011f98 <nk_handle_ptr>
 8019092:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    select->rounding        = 0.0f;
 8019096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019098:	f04f 0200 	mov.w	r2, #0
 801909c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    select->draw_begin      = 0;
 80190a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80190a2:	2200      	movs	r2, #0
 80190a4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    select->draw_end        = 0;
 80190a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80190aa:	2200      	movs	r2, #0
 80190ac:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    /* slider */
    slider = &style->slider;
 80190b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80190b2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80190b6:	663b      	str	r3, [r7, #96]	; 0x60
    nk_zero_struct(*slider);
 80190b8:	f44f 7109 	mov.w	r1, #548	; 0x224
 80190bc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80190be:	f002 ff6f 	bl	801bfa0 <nk_zero>
    slider->normal          = nk_style_item_hide();
 80190c2:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80190c4:	463b      	mov	r3, r7
 80190c6:	4618      	mov	r0, r3
 80190c8:	f7ff fbaa 	bl	8018820 <nk_style_item_hide>
 80190cc:	4625      	mov	r5, r4
 80190ce:	463c      	mov	r4, r7
 80190d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80190d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 80190dc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80190de:	463b      	mov	r3, r7
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7ff fb9d 	bl	8018820 <nk_style_item_hide>
 80190e6:	341c      	adds	r4, #28
 80190e8:	463d      	mov	r5, r7
 80190ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80190f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 80190f6:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80190f8:	463b      	mov	r3, r7
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7ff fb90 	bl	8018820 <nk_style_item_hide>
 8019100:	3438      	adds	r4, #56	; 0x38
 8019102:	463d      	mov	r5, r7
 8019104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801910c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 8019110:	6a3b      	ldr	r3, [r7, #32]
 8019112:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019118:	3358      	adds	r3, #88	; 0x58
 801911a:	6810      	ldr	r0, [r2, #0]
 801911c:	6018      	str	r0, [r3, #0]
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 801911e:	6a3b      	ldr	r3, [r7, #32]
 8019120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019126:	335c      	adds	r3, #92	; 0x5c
 8019128:	6810      	ldr	r0, [r2, #0]
 801912a:	6018      	str	r0, [r3, #0]
    slider->bar_active      = table[NK_COLOR_SLIDER];
 801912c:	6a3b      	ldr	r3, [r7, #32]
 801912e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019134:	3360      	adds	r3, #96	; 0x60
 8019136:	6810      	ldr	r0, [r2, #0]
 8019138:	6018      	str	r0, [r3, #0]
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 801913a:	6a3b      	ldr	r3, [r7, #32]
 801913c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019142:	3364      	adds	r3, #100	; 0x64
 8019144:	6810      	ldr	r0, [r2, #0]
 8019146:	6018      	str	r0, [r3, #0]
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8019148:	6a3b      	ldr	r3, [r7, #32]
 801914a:	3334      	adds	r3, #52	; 0x34
 801914c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801914e:	463a      	mov	r2, r7
 8019150:	6819      	ldr	r1, [r3, #0]
 8019152:	460b      	mov	r3, r1
 8019154:	4619      	mov	r1, r3
 8019156:	4610      	mov	r0, r2
 8019158:	f7ff fb4a 	bl	80187f0 <nk_style_item_color>
 801915c:	3468      	adds	r4, #104	; 0x68
 801915e:	463d      	mov	r5, r7
 8019160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 801916c:	6a3b      	ldr	r3, [r7, #32]
 801916e:	3338      	adds	r3, #56	; 0x38
 8019170:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019172:	463a      	mov	r2, r7
 8019174:	6819      	ldr	r1, [r3, #0]
 8019176:	460b      	mov	r3, r1
 8019178:	4619      	mov	r1, r3
 801917a:	4610      	mov	r0, r2
 801917c:	f7ff fb38 	bl	80187f0 <nk_style_item_color>
 8019180:	3484      	adds	r4, #132	; 0x84
 8019182:	463d      	mov	r5, r7
 8019184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801918c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 8019190:	6a3b      	ldr	r3, [r7, #32]
 8019192:	333c      	adds	r3, #60	; 0x3c
 8019194:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019196:	463a      	mov	r2, r7
 8019198:	6819      	ldr	r1, [r3, #0]
 801919a:	460b      	mov	r3, r1
 801919c:	4619      	mov	r1, r3
 801919e:	4610      	mov	r0, r2
 80191a0:	f7ff fb26 	bl	80187f0 <nk_style_item_color>
 80191a4:	34a0      	adds	r4, #160	; 0xa0
 80191a6:	463d      	mov	r5, r7
 80191a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80191ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80191b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 80191b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80191b6:	220a      	movs	r2, #10
 80191b8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 80191bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80191be:	2209      	movs	r2, #9
 80191c0:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    slider->cursor_size     = nk_vec2(16,16);
 80191c4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80191c6:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 80191ca:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 80191ce:	f7fa fb2f 	bl	8013830 <nk_vec2>
 80191d2:	eeb0 7a40 	vmov.f32	s14, s0
 80191d6:	eef0 7a60 	vmov.f32	s15, s1
 80191da:	ed84 7a36 	vstr	s14, [r4, #216]	; 0xd8
 80191de:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 80191e2:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80191e4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80191e8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80191ec:	f7fa fb20 	bl	8013830 <nk_vec2>
 80191f0:	eeb0 7a40 	vmov.f32	s14, s0
 80191f4:	eef0 7a60 	vmov.f32	s15, s1
 80191f8:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 80191fc:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 8019200:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019202:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8019206:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801920a:	f7fa fb11 	bl	8013830 <nk_vec2>
 801920e:	eeb0 7a40 	vmov.f32	s14, s0
 8019212:	eef0 7a60 	vmov.f32	s15, s1
 8019216:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
 801921a:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 801921e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8019220:	2000      	movs	r0, #0
 8019222:	f7f8 feb9 	bl	8011f98 <nk_handle_ptr>
 8019226:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    slider->show_buttons    = nk_false;
 801922a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801922c:	2200      	movs	r2, #0
 801922e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    slider->bar_height      = 8;
 8019232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019234:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019238:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    slider->rounding        = 0;
 801923c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801923e:	f04f 0200 	mov.w	r2, #0
 8019242:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    slider->draw_begin      = 0;
 8019246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019248:	2200      	movs	r2, #0
 801924a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    slider->draw_end        = 0;
 801924e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019250:	2200      	movs	r2, #0
 8019252:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    /* slider buttons */
    button = &style->slider.inc_button;
 8019256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019258:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801925c:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 801925e:	2228      	movs	r2, #40	; 0x28
 8019260:	2128      	movs	r1, #40	; 0x28
 8019262:	2028      	movs	r0, #40	; 0x28
 8019264:	f7f5 fe18 	bl	800ee98 <nk_rgb>
 8019268:	4603      	mov	r3, r0
 801926a:	62bb      	str	r3, [r7, #40]	; 0x28
 801926c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801926e:	463b      	mov	r3, r7
 8019270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019272:	4618      	mov	r0, r3
 8019274:	f7ff fabc 	bl	80187f0 <nk_style_item_color>
 8019278:	4625      	mov	r5, r4
 801927a:	463c      	mov	r4, r7
 801927c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801927e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019280:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019284:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 8019288:	222a      	movs	r2, #42	; 0x2a
 801928a:	212a      	movs	r1, #42	; 0x2a
 801928c:	202a      	movs	r0, #42	; 0x2a
 801928e:	f7f5 fe03 	bl	800ee98 <nk_rgb>
 8019292:	4603      	mov	r3, r0
 8019294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019296:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019298:	463b      	mov	r3, r7
 801929a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801929c:	4618      	mov	r0, r3
 801929e:	f7ff faa7 	bl	80187f0 <nk_style_item_color>
 80192a2:	341c      	adds	r4, #28
 80192a4:	463d      	mov	r5, r7
 80192a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80192ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 80192b2:	222c      	movs	r2, #44	; 0x2c
 80192b4:	212c      	movs	r1, #44	; 0x2c
 80192b6:	202c      	movs	r0, #44	; 0x2c
 80192b8:	f7f5 fdee 	bl	800ee98 <nk_rgb>
 80192bc:	4603      	mov	r3, r0
 80192be:	633b      	str	r3, [r7, #48]	; 0x30
 80192c0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192c2:	463b      	mov	r3, r7
 80192c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7ff fa92 	bl	80187f0 <nk_style_item_color>
 80192cc:	3438      	adds	r4, #56	; 0x38
 80192ce:	463d      	mov	r5, r7
 80192d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80192d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80192d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 80192dc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192de:	2241      	movs	r2, #65	; 0x41
 80192e0:	2141      	movs	r1, #65	; 0x41
 80192e2:	2041      	movs	r0, #65	; 0x41
 80192e4:	f7f5 fdd8 	bl	800ee98 <nk_rgb>
 80192e8:	4603      	mov	r3, r0
 80192ea:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 80192ec:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192ee:	2228      	movs	r2, #40	; 0x28
 80192f0:	2128      	movs	r1, #40	; 0x28
 80192f2:	2028      	movs	r0, #40	; 0x28
 80192f4:	f7f5 fdd0 	bl	800ee98 <nk_rgb>
 80192f8:	4603      	mov	r3, r0
 80192fa:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 80192fc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80192fe:	22af      	movs	r2, #175	; 0xaf
 8019300:	21af      	movs	r1, #175	; 0xaf
 8019302:	20af      	movs	r0, #175	; 0xaf
 8019304:	f7f5 fdc8 	bl	800ee98 <nk_rgb>
 8019308:	4603      	mov	r3, r0
 801930a:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801930c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801930e:	22af      	movs	r2, #175	; 0xaf
 8019310:	21af      	movs	r1, #175	; 0xaf
 8019312:	20af      	movs	r0, #175	; 0xaf
 8019314:	f7f5 fdc0 	bl	800ee98 <nk_rgb>
 8019318:	4603      	mov	r3, r0
 801931a:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801931c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801931e:	22af      	movs	r2, #175	; 0xaf
 8019320:	21af      	movs	r1, #175	; 0xaf
 8019322:	20af      	movs	r0, #175	; 0xaf
 8019324:	f7f5 fdb8 	bl	800ee98 <nk_rgb>
 8019328:	4603      	mov	r3, r0
 801932a:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(8.0f,8.0f);
 801932c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801932e:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8019332:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8019336:	f7fa fa7b 	bl	8013830 <nk_vec2>
 801933a:	eeb0 7a40 	vmov.f32	s14, s0
 801933e:	eef0 7a60 	vmov.f32	s15, s1
 8019342:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019346:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801934a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801934c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80193b0 <nk_style_from_table+0xb58>
 8019350:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80193b0 <nk_style_from_table+0xb58>
 8019354:	f7fa fa6c 	bl	8013830 <nk_vec2>
 8019358:	eeb0 7a40 	vmov.f32	s14, s0
 801935c:	eef0 7a60 	vmov.f32	s15, s1
 8019360:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019364:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019368:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801936a:	2000      	movs	r0, #0
 801936c:	f7f8 fe14 	bl	8011f98 <nk_handle_ptr>
 8019370:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019376:	2212      	movs	r2, #18
 8019378:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801937a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801937c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019380:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019384:	f04f 0200 	mov.w	r2, #0
 8019388:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801938a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801938c:	2200      	movs	r2, #0
 801938e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019394:	2200      	movs	r2, #0
 8019396:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->slider.dec_button = style->slider.inc_button;
 801939a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801939c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801939e:	f202 50fc 	addw	r0, r2, #1532	; 0x5fc
 80193a2:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80193a6:	2298      	movs	r2, #152	; 0x98
 80193a8:	4619      	mov	r1, r3
 80193aa:	f005 f909 	bl	801e5c0 <memcpy>
 80193ae:	e003      	b.n	80193b8 <nk_style_from_table+0xb60>
	...

    /* progressbar */
    prog = &style->progress;
 80193b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80193ba:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80193be:	65fb      	str	r3, [r7, #92]	; 0x5c
    nk_zero_struct(*prog);
 80193c0:	21d4      	movs	r1, #212	; 0xd4
 80193c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80193c4:	f002 fdec 	bl	801bfa0 <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 80193c8:	6a3b      	ldr	r3, [r7, #32]
 80193ca:	3330      	adds	r3, #48	; 0x30
 80193cc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80193ce:	463a      	mov	r2, r7
 80193d0:	6819      	ldr	r1, [r3, #0]
 80193d2:	460b      	mov	r3, r1
 80193d4:	4619      	mov	r1, r3
 80193d6:	4610      	mov	r0, r2
 80193d8:	f7ff fa0a 	bl	80187f0 <nk_style_item_color>
 80193dc:	4625      	mov	r5, r4
 80193de:	463c      	mov	r4, r7
 80193e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80193e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80193e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80193e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 80193ec:	6a3b      	ldr	r3, [r7, #32]
 80193ee:	3330      	adds	r3, #48	; 0x30
 80193f0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80193f2:	463a      	mov	r2, r7
 80193f4:	6819      	ldr	r1, [r3, #0]
 80193f6:	460b      	mov	r3, r1
 80193f8:	4619      	mov	r1, r3
 80193fa:	4610      	mov	r0, r2
 80193fc:	f7ff f9f8 	bl	80187f0 <nk_style_item_color>
 8019400:	341c      	adds	r4, #28
 8019402:	463d      	mov	r5, r7
 8019404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801940c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 8019410:	6a3b      	ldr	r3, [r7, #32]
 8019412:	3330      	adds	r3, #48	; 0x30
 8019414:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019416:	463a      	mov	r2, r7
 8019418:	6819      	ldr	r1, [r3, #0]
 801941a:	460b      	mov	r3, r1
 801941c:	4619      	mov	r1, r3
 801941e:	4610      	mov	r0, r2
 8019420:	f7ff f9e6 	bl	80187f0 <nk_style_item_color>
 8019424:	3438      	adds	r4, #56	; 0x38
 8019426:	463d      	mov	r5, r7
 8019428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801942a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801942c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 8019434:	6a3b      	ldr	r3, [r7, #32]
 8019436:	3334      	adds	r3, #52	; 0x34
 8019438:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801943a:	463a      	mov	r2, r7
 801943c:	6819      	ldr	r1, [r3, #0]
 801943e:	460b      	mov	r3, r1
 8019440:	4619      	mov	r1, r3
 8019442:	4610      	mov	r0, r2
 8019444:	f7ff f9d4 	bl	80187f0 <nk_style_item_color>
 8019448:	3458      	adds	r4, #88	; 0x58
 801944a:	463d      	mov	r5, r7
 801944c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801944e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 8019458:	6a3b      	ldr	r3, [r7, #32]
 801945a:	3338      	adds	r3, #56	; 0x38
 801945c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801945e:	463a      	mov	r2, r7
 8019460:	6819      	ldr	r1, [r3, #0]
 8019462:	460b      	mov	r3, r1
 8019464:	4619      	mov	r1, r3
 8019466:	4610      	mov	r0, r2
 8019468:	f7ff f9c2 	bl	80187f0 <nk_style_item_color>
 801946c:	3474      	adds	r4, #116	; 0x74
 801946e:	463d      	mov	r5, r7
 8019470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019474:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019478:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801947c:	6a3b      	ldr	r3, [r7, #32]
 801947e:	333c      	adds	r3, #60	; 0x3c
 8019480:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8019482:	463a      	mov	r2, r7
 8019484:	6819      	ldr	r1, [r3, #0]
 8019486:	460b      	mov	r3, r1
 8019488:	4619      	mov	r1, r3
 801948a:	4610      	mov	r0, r2
 801948c:	f7ff f9b0 	bl	80187f0 <nk_style_item_color>
 8019490:	3490      	adds	r4, #144	; 0x90
 8019492:	463d      	mov	r5, r7
 8019494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801949c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 80194a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80194a2:	2300      	movs	r3, #0
 80194a4:	2200      	movs	r2, #0
 80194a6:	2100      	movs	r1, #0
 80194a8:	2000      	movs	r0, #0
 80194aa:	f7f5 fca5 	bl	800edf8 <nk_rgba>
 80194ae:	4603      	mov	r3, r0
 80194b0:	6563      	str	r3, [r4, #84]	; 0x54
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 80194b2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80194b4:	2300      	movs	r3, #0
 80194b6:	2200      	movs	r2, #0
 80194b8:	2100      	movs	r1, #0
 80194ba:	2000      	movs	r0, #0
 80194bc:	f7f5 fc9c 	bl	800edf8 <nk_rgba>
 80194c0:	4603      	mov	r3, r0
 80194c2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    prog->userdata          = nk_handle_ptr(0);
 80194c6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80194c8:	2000      	movs	r0, #0
 80194ca:	f7f8 fd65 	bl	8011f98 <nk_handle_ptr>
 80194ce:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    prog->padding           = nk_vec2(4,4);
 80194d2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80194d4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80194d8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80194dc:	f7fa f9a8 	bl	8013830 <nk_vec2>
 80194e0:	eeb0 7a40 	vmov.f32	s14, s0
 80194e4:	eef0 7a60 	vmov.f32	s15, s1
 80194e8:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 80194ec:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    prog->rounding          = 0;
 80194f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80194f2:	f04f 0200 	mov.w	r2, #0
 80194f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    prog->border            = 0;
 80194fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80194fc:	f04f 0200 	mov.w	r2, #0
 8019500:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 8019504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019506:	f04f 0200 	mov.w	r2, #0
 801950a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    prog->cursor_border     = 0;
 801950e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019510:	f04f 0200 	mov.w	r2, #0
 8019514:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    prog->draw_begin        = 0;
 8019518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801951a:	2200      	movs	r2, #0
 801951c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    prog->draw_end          = 0;
 8019520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019522:	2200      	movs	r2, #0
 8019524:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* scrollbars */
    scroll = &style->scrollh;
 8019528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801952a:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801952e:	65bb      	str	r3, [r7, #88]	; 0x58
    nk_zero_struct(*scroll);
 8019530:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8019534:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8019536:	f002 fd33 	bl	801bfa0 <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801953a:	6a3b      	ldr	r3, [r7, #32]
 801953c:	335c      	adds	r3, #92	; 0x5c
 801953e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019540:	463a      	mov	r2, r7
 8019542:	6819      	ldr	r1, [r3, #0]
 8019544:	460b      	mov	r3, r1
 8019546:	4619      	mov	r1, r3
 8019548:	4610      	mov	r0, r2
 801954a:	f7ff f951 	bl	80187f0 <nk_style_item_color>
 801954e:	4625      	mov	r5, r4
 8019550:	463c      	mov	r4, r7
 8019552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019556:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801955a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801955e:	6a3b      	ldr	r3, [r7, #32]
 8019560:	335c      	adds	r3, #92	; 0x5c
 8019562:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019564:	463a      	mov	r2, r7
 8019566:	6819      	ldr	r1, [r3, #0]
 8019568:	460b      	mov	r3, r1
 801956a:	4619      	mov	r1, r3
 801956c:	4610      	mov	r0, r2
 801956e:	f7ff f93f 	bl	80187f0 <nk_style_item_color>
 8019572:	341c      	adds	r4, #28
 8019574:	463d      	mov	r5, r7
 8019576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801957a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801957e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 8019582:	6a3b      	ldr	r3, [r7, #32]
 8019584:	335c      	adds	r3, #92	; 0x5c
 8019586:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019588:	463a      	mov	r2, r7
 801958a:	6819      	ldr	r1, [r3, #0]
 801958c:	460b      	mov	r3, r1
 801958e:	4619      	mov	r1, r3
 8019590:	4610      	mov	r0, r2
 8019592:	f7ff f92d 	bl	80187f0 <nk_style_item_color>
 8019596:	3438      	adds	r4, #56	; 0x38
 8019598:	463d      	mov	r5, r7
 801959a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801959c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801959e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 80195a6:	6a3b      	ldr	r3, [r7, #32]
 80195a8:	3360      	adds	r3, #96	; 0x60
 80195aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80195ac:	463a      	mov	r2, r7
 80195ae:	6819      	ldr	r1, [r3, #0]
 80195b0:	460b      	mov	r3, r1
 80195b2:	4619      	mov	r1, r3
 80195b4:	4610      	mov	r0, r2
 80195b6:	f7ff f91b 	bl	80187f0 <nk_style_item_color>
 80195ba:	3458      	adds	r4, #88	; 0x58
 80195bc:	463d      	mov	r5, r7
 80195be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 80195ca:	6a3b      	ldr	r3, [r7, #32]
 80195cc:	3364      	adds	r3, #100	; 0x64
 80195ce:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80195d0:	463a      	mov	r2, r7
 80195d2:	6819      	ldr	r1, [r3, #0]
 80195d4:	460b      	mov	r3, r1
 80195d6:	4619      	mov	r1, r3
 80195d8:	4610      	mov	r0, r2
 80195da:	f7ff f909 	bl	80187f0 <nk_style_item_color>
 80195de:	3474      	adds	r4, #116	; 0x74
 80195e0:	463d      	mov	r5, r7
 80195e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 80195ee:	6a3b      	ldr	r3, [r7, #32]
 80195f0:	3368      	adds	r3, #104	; 0x68
 80195f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80195f4:	463a      	mov	r2, r7
 80195f6:	6819      	ldr	r1, [r3, #0]
 80195f8:	460b      	mov	r3, r1
 80195fa:	4619      	mov	r1, r3
 80195fc:	4610      	mov	r0, r2
 80195fe:	f7ff f8f7 	bl	80187f0 <nk_style_item_color>
 8019602:	3490      	adds	r4, #144	; 0x90
 8019604:	463d      	mov	r5, r7
 8019606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801960a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801960e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 8019612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019614:	2203      	movs	r2, #3
 8019616:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801961a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801961c:	2203      	movs	r2, #3
 801961e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    scroll->userdata        = nk_handle_ptr(0);
 8019622:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8019624:	2000      	movs	r0, #0
 8019626:	f7f8 fcb7 	bl	8011f98 <nk_handle_ptr>
 801962a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8019634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019636:	3354      	adds	r3, #84	; 0x54
 8019638:	6810      	ldr	r0, [r2, #0]
 801963a:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 801963c:	6a3b      	ldr	r3, [r7, #32]
 801963e:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8019642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019644:	33ac      	adds	r3, #172	; 0xac
 8019646:	6810      	ldr	r0, [r2, #0]
 8019648:	6018      	str	r0, [r3, #0]
    scroll->padding         = nk_vec2(0,0);
 801964a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801964c:	ed5f 0aa7 	vldr	s1, [pc, #-668]	; 80193b4 <nk_style_from_table+0xb5c>
 8019650:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 80193b4 <nk_style_from_table+0xb5c>
 8019654:	f7fa f8ec 	bl	8013830 <nk_vec2>
 8019658:	eeb0 7a40 	vmov.f32	s14, s0
 801965c:	eef0 7a60 	vmov.f32	s15, s1
 8019660:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 8019664:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 8019668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801966a:	2200      	movs	r2, #0
 801966c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    scroll->border          = 0;
 8019670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019672:	f04f 0200 	mov.w	r2, #0
 8019676:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    scroll->rounding        = 0;
 801967a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801967c:	f04f 0200 	mov.w	r2, #0
 8019680:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    scroll->border_cursor   = 0;
 8019684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019686:	f04f 0200 	mov.w	r2, #0
 801968a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    scroll->rounding_cursor = 0;
 801968e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019690:	f04f 0200 	mov.w	r2, #0
 8019694:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    scroll->draw_begin      = 0;
 8019698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801969a:	2200      	movs	r2, #0
 801969c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    scroll->draw_end        = 0;
 80196a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80196a2:	2200      	movs	r2, #0
 80196a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    style->scrollv = style->scrollh;
 80196a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80196aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80196ae:	461a      	mov	r2, r3
 80196b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80196b2:	f102 00d0 	add.w	r0, r2, #208	; 0xd0
 80196b6:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 80196ba:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80196be:	4619      	mov	r1, r3
 80196c0:	f004 ff7e 	bl	801e5c0 <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 80196c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80196c6:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80196ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 80196cc:	2228      	movs	r2, #40	; 0x28
 80196ce:	2128      	movs	r1, #40	; 0x28
 80196d0:	2028      	movs	r0, #40	; 0x28
 80196d2:	f7f5 fbe1 	bl	800ee98 <nk_rgb>
 80196d6:	4603      	mov	r3, r0
 80196d8:	637b      	str	r3, [r7, #52]	; 0x34
 80196da:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80196dc:	463b      	mov	r3, r7
 80196de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80196e0:	4618      	mov	r0, r3
 80196e2:	f7ff f885 	bl	80187f0 <nk_style_item_color>
 80196e6:	4625      	mov	r5, r4
 80196e8:	463c      	mov	r4, r7
 80196ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80196ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80196f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 80196f6:	222a      	movs	r2, #42	; 0x2a
 80196f8:	212a      	movs	r1, #42	; 0x2a
 80196fa:	202a      	movs	r0, #42	; 0x2a
 80196fc:	f7f5 fbcc 	bl	800ee98 <nk_rgb>
 8019700:	4603      	mov	r3, r0
 8019702:	63bb      	str	r3, [r7, #56]	; 0x38
 8019704:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019706:	463b      	mov	r3, r7
 8019708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801970a:	4618      	mov	r0, r3
 801970c:	f7ff f870 	bl	80187f0 <nk_style_item_color>
 8019710:	341c      	adds	r4, #28
 8019712:	463d      	mov	r5, r7
 8019714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801971c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 8019720:	222c      	movs	r2, #44	; 0x2c
 8019722:	212c      	movs	r1, #44	; 0x2c
 8019724:	202c      	movs	r0, #44	; 0x2c
 8019726:	f7f5 fbb7 	bl	800ee98 <nk_rgb>
 801972a:	4603      	mov	r3, r0
 801972c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801972e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019730:	463b      	mov	r3, r7
 8019732:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019734:	4618      	mov	r0, r3
 8019736:	f7ff f85b 	bl	80187f0 <nk_style_item_color>
 801973a:	3438      	adds	r4, #56	; 0x38
 801973c:	463d      	mov	r5, r7
 801973e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 801974a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801974c:	2241      	movs	r2, #65	; 0x41
 801974e:	2141      	movs	r1, #65	; 0x41
 8019750:	2041      	movs	r0, #65	; 0x41
 8019752:	f7f5 fba1 	bl	800ee98 <nk_rgb>
 8019756:	4603      	mov	r3, r0
 8019758:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 801975a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801975c:	2228      	movs	r2, #40	; 0x28
 801975e:	2128      	movs	r1, #40	; 0x28
 8019760:	2028      	movs	r0, #40	; 0x28
 8019762:	f7f5 fb99 	bl	800ee98 <nk_rgb>
 8019766:	4603      	mov	r3, r0
 8019768:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 801976a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801976c:	22af      	movs	r2, #175	; 0xaf
 801976e:	21af      	movs	r1, #175	; 0xaf
 8019770:	20af      	movs	r0, #175	; 0xaf
 8019772:	f7f5 fb91 	bl	800ee98 <nk_rgb>
 8019776:	4603      	mov	r3, r0
 8019778:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801977a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801977c:	22af      	movs	r2, #175	; 0xaf
 801977e:	21af      	movs	r1, #175	; 0xaf
 8019780:	20af      	movs	r0, #175	; 0xaf
 8019782:	f7f5 fb89 	bl	800ee98 <nk_rgb>
 8019786:	4603      	mov	r3, r0
 8019788:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801978a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801978c:	22af      	movs	r2, #175	; 0xaf
 801978e:	21af      	movs	r1, #175	; 0xaf
 8019790:	20af      	movs	r0, #175	; 0xaf
 8019792:	f7f5 fb81 	bl	800ee98 <nk_rgb>
 8019796:	4603      	mov	r3, r0
 8019798:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(4.0f,4.0f);
 801979a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801979c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80197a0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80197a4:	f7fa f844 	bl	8013830 <nk_vec2>
 80197a8:	eeb0 7a40 	vmov.f32	s14, s0
 80197ac:	eef0 7a60 	vmov.f32	s15, s1
 80197b0:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 80197b4:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 80197b8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80197ba:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8019ae0 <nk_style_from_table+0x1288>
 80197be:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8019ae0 <nk_style_from_table+0x1288>
 80197c2:	f7fa f835 	bl	8013830 <nk_vec2>
 80197c6:	eeb0 7a40 	vmov.f32	s14, s0
 80197ca:	eef0 7a60 	vmov.f32	s15, s1
 80197ce:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 80197d2:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 80197d6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80197d8:	2000      	movs	r0, #0
 80197da:	f7f8 fbdd 	bl	8011f98 <nk_handle_ptr>
 80197de:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 80197e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197e4:	2212      	movs	r2, #18
 80197e6:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 80197e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80197ee:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 80197f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197f2:	f04f 0200 	mov.w	r2, #0
 80197f6:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 80197f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80197fa:	2200      	movs	r2, #0
 80197fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019802:	2200      	movs	r2, #0
 8019804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->scrollh.dec_button = style->scrollh.inc_button;
 8019808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801980a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801980e:	461a      	mov	r2, r3
 8019810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019812:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8019816:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801981a:	2298      	movs	r2, #152	; 0x98
 801981c:	4619      	mov	r1, r3
 801981e:	f004 fecf 	bl	801e5c0 <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 8019822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019828:	461a      	mov	r2, r3
 801982a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801982c:	f502 70ce 	add.w	r0, r2, #412	; 0x19c
 8019830:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 8019834:	2298      	movs	r2, #152	; 0x98
 8019836:	4619      	mov	r1, r3
 8019838:	f004 fec2 	bl	801e5c0 <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 801983c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801983e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019842:	461a      	mov	r2, r3
 8019844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019846:	f502 700d 	add.w	r0, r2, #564	; 0x234
 801984a:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801984e:	2298      	movs	r2, #152	; 0x98
 8019850:	4619      	mov	r1, r3
 8019852:	f004 feb5 	bl	801e5c0 <memcpy>

    /* edit */
    edit = &style->edit;
 8019856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019858:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 801985c:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801985e:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8019862:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019864:	f002 fb9c 	bl	801bfa0 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 8019868:	6a3b      	ldr	r3, [r7, #32]
 801986a:	3344      	adds	r3, #68	; 0x44
 801986c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801986e:	463a      	mov	r2, r7
 8019870:	6819      	ldr	r1, [r3, #0]
 8019872:	460b      	mov	r3, r1
 8019874:	4619      	mov	r1, r3
 8019876:	4610      	mov	r0, r2
 8019878:	f7fe ffba 	bl	80187f0 <nk_style_item_color>
 801987c:	4625      	mov	r5, r4
 801987e:	463c      	mov	r4, r7
 8019880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019884:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019888:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 801988c:	6a3b      	ldr	r3, [r7, #32]
 801988e:	3344      	adds	r3, #68	; 0x44
 8019890:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019892:	463a      	mov	r2, r7
 8019894:	6819      	ldr	r1, [r3, #0]
 8019896:	460b      	mov	r3, r1
 8019898:	4619      	mov	r1, r3
 801989a:	4610      	mov	r0, r2
 801989c:	f7fe ffa8 	bl	80187f0 <nk_style_item_color>
 80198a0:	341c      	adds	r4, #28
 80198a2:	463d      	mov	r5, r7
 80198a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80198ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 80198b0:	6a3b      	ldr	r3, [r7, #32]
 80198b2:	3344      	adds	r3, #68	; 0x44
 80198b4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80198b6:	463a      	mov	r2, r7
 80198b8:	6819      	ldr	r1, [r3, #0]
 80198ba:	460b      	mov	r3, r1
 80198bc:	4619      	mov	r1, r3
 80198be:	4610      	mov	r0, r2
 80198c0:	f7fe ff96 	bl	80187f0 <nk_style_item_color>
 80198c4:	3438      	adds	r4, #56	; 0x38
 80198c6:	463d      	mov	r5, r7
 80198c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80198d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 80198d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198d6:	6a3a      	ldr	r2, [r7, #32]
 80198d8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80198dc:	6810      	ldr	r0, [r2, #0]
 80198de:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 80198e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198e2:	6a3a      	ldr	r2, [r7, #32]
 80198e4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80198e8:	6810      	ldr	r0, [r2, #0]
 80198ea:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 80198ec:	6a3b      	ldr	r3, [r7, #32]
 80198ee:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80198f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198f4:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 80198f8:	6810      	ldr	r0, [r2, #0]
 80198fa:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 80198fc:	6a3b      	ldr	r3, [r7, #32]
 80198fe:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019904:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019908:	6810      	ldr	r0, [r2, #0]
 801990a:	6018      	str	r0, [r3, #0]
    edit->border_color      = table[NK_COLOR_BORDER];
 801990c:	6a3b      	ldr	r3, [r7, #32]
 801990e:	f103 020c 	add.w	r2, r3, #12
 8019912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019914:	3354      	adds	r3, #84	; 0x54
 8019916:	6810      	ldr	r0, [r2, #0]
 8019918:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801991a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801991c:	6a3a      	ldr	r2, [r7, #32]
 801991e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8019922:	6810      	ldr	r0, [r2, #0]
 8019924:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 8019926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019928:	6a3a      	ldr	r2, [r7, #32]
 801992a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801992e:	6810      	ldr	r0, [r2, #0]
 8019930:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 8019932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019934:	6a3a      	ldr	r2, [r7, #32]
 8019936:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801993a:	6810      	ldr	r0, [r2, #0]
 801993c:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801993e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019940:	6a3a      	ldr	r2, [r7, #32]
 8019942:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8019946:	6810      	ldr	r0, [r2, #0]
 8019948:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801994a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801994c:	6a3a      	ldr	r2, [r7, #32]
 801994e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8019952:	6810      	ldr	r0, [r2, #0]
 8019954:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 8019956:	6a3b      	ldr	r3, [r7, #32]
 8019958:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801995c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801995e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019962:	6810      	ldr	r0, [r2, #0]
 8019964:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 8019966:	6a3b      	ldr	r3, [r7, #32]
 8019968:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801996c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801996e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019972:	6810      	ldr	r0, [r2, #0]
 8019974:	6018      	str	r0, [r3, #0]
    edit->scrollbar_size    = nk_vec2(10,10);
 8019976:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019978:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 801997c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8019980:	f7f9 ff56 	bl	8013830 <nk_vec2>
 8019984:	eeb0 7a40 	vmov.f32	s14, s0
 8019988:	eef0 7a60 	vmov.f32	s15, s1
 801998c:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 8019990:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 8019994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019996:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019998:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801999c:	3358      	adds	r3, #88	; 0x58
 801999e:	f102 01d0 	add.w	r1, r2, #208	; 0xd0
 80199a2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80199a6:	4618      	mov	r0, r3
 80199a8:	f004 fe0a 	bl	801e5c0 <memcpy>
    edit->padding           = nk_vec2(4,4);
 80199ac:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 80199ae:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80199b2:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80199b6:	f7f9 ff3b 	bl	8013830 <nk_vec2>
 80199ba:	eeb0 7a40 	vmov.f32	s14, s0
 80199be:	eef0 7a60 	vmov.f32	s15, s1
 80199c2:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 80199c6:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->row_padding       = 2;
 80199ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80199d0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    edit->cursor_size       = 4;
 80199d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199d6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80199da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 1;
 80199de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80199e4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 80199e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199ea:	f04f 0200 	mov.w	r2, #0
 80199ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* property */
    property = &style->property;
 80199f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80199f4:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 80199f8:	653b      	str	r3, [r7, #80]	; 0x50
    nk_zero_struct(*property);
 80199fa:	f240 4164 	movw	r1, #1124	; 0x464
 80199fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8019a00:	f002 face 	bl	801bfa0 <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019a04:	6a3b      	ldr	r3, [r7, #32]
 8019a06:	3340      	adds	r3, #64	; 0x40
 8019a08:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8019a0a:	463a      	mov	r2, r7
 8019a0c:	6819      	ldr	r1, [r3, #0]
 8019a0e:	460b      	mov	r3, r1
 8019a10:	4619      	mov	r1, r3
 8019a12:	4610      	mov	r0, r2
 8019a14:	f7fe feec 	bl	80187f0 <nk_style_item_color>
 8019a18:	4625      	mov	r5, r4
 8019a1a:	463c      	mov	r4, r7
 8019a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019a20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019a24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019a28:	6a3b      	ldr	r3, [r7, #32]
 8019a2a:	3340      	adds	r3, #64	; 0x40
 8019a2c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8019a2e:	463a      	mov	r2, r7
 8019a30:	6819      	ldr	r1, [r3, #0]
 8019a32:	460b      	mov	r3, r1
 8019a34:	4619      	mov	r1, r3
 8019a36:	4610      	mov	r0, r2
 8019a38:	f7fe feda 	bl	80187f0 <nk_style_item_color>
 8019a3c:	341c      	adds	r4, #28
 8019a3e:	463d      	mov	r5, r7
 8019a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019a4c:	6a3b      	ldr	r3, [r7, #32]
 8019a4e:	3340      	adds	r3, #64	; 0x40
 8019a50:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8019a52:	463a      	mov	r2, r7
 8019a54:	6819      	ldr	r1, [r3, #0]
 8019a56:	460b      	mov	r3, r1
 8019a58:	4619      	mov	r1, r3
 8019a5a:	4610      	mov	r0, r2
 8019a5c:	f7fe fec8 	bl	80187f0 <nk_style_item_color>
 8019a60:	3438      	adds	r4, #56	; 0x38
 8019a62:	463d      	mov	r5, r7
 8019a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 8019a70:	6a3b      	ldr	r3, [r7, #32]
 8019a72:	f103 020c 	add.w	r2, r3, #12
 8019a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a78:	3354      	adds	r3, #84	; 0x54
 8019a7a:	6810      	ldr	r0, [r2, #0]
 8019a7c:	6018      	str	r0, [r3, #0]
    property->label_normal  = table[NK_COLOR_TEXT];
 8019a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a80:	6a3a      	ldr	r2, [r7, #32]
 8019a82:	3358      	adds	r3, #88	; 0x58
 8019a84:	6810      	ldr	r0, [r2, #0]
 8019a86:	6018      	str	r0, [r3, #0]
    property->label_hover   = table[NK_COLOR_TEXT];
 8019a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a8a:	6a3a      	ldr	r2, [r7, #32]
 8019a8c:	335c      	adds	r3, #92	; 0x5c
 8019a8e:	6810      	ldr	r0, [r2, #0]
 8019a90:	6018      	str	r0, [r3, #0]
    property->label_active  = table[NK_COLOR_TEXT];
 8019a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a94:	6a3a      	ldr	r2, [r7, #32]
 8019a96:	3360      	adds	r3, #96	; 0x60
 8019a98:	6810      	ldr	r0, [r2, #0]
 8019a9a:	6018      	str	r0, [r3, #0]
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 8019a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a9e:	2209      	movs	r2, #9
 8019aa0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 8019aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019aa6:	220a      	movs	r2, #10
 8019aa8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    property->userdata      = nk_handle_ptr(0);
 8019aac:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8019aae:	2000      	movs	r0, #0
 8019ab0:	f7f8 fa72 	bl	8011f98 <nk_handle_ptr>
 8019ab4:	f8c4 0458 	str.w	r0, [r4, #1112]	; 0x458
    property->padding       = nk_vec2(4,4);
 8019ab8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8019aba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019abe:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019ac2:	f7f9 feb5 	bl	8013830 <nk_vec2>
 8019ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8019aca:	eef0 7a60 	vmov.f32	s15, s1
 8019ace:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8019ad2:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
    property->border        = 1;
 8019ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ad8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019adc:	e002      	b.n	8019ae4 <nk_style_from_table+0x128c>
 8019ade:	bf00      	nop
 8019ae0:	00000000 	.word	0x00000000
 8019ae4:	669a      	str	r2, [r3, #104]	; 0x68
    property->rounding      = 10;
 8019ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ae8:	4ac3      	ldr	r2, [pc, #780]	; (8019df8 <nk_style_from_table+0x15a0>)
 8019aea:	66da      	str	r2, [r3, #108]	; 0x6c
    property->draw_begin    = 0;
 8019aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019aee:	2200      	movs	r2, #0
 8019af0:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
    property->draw_end      = 0;
 8019af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019af6:	2200      	movs	r2, #0
 8019af8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

    /* property buttons */
    button = &style->property.dec_button;
 8019afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019afe:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8019b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019b04:	2198      	movs	r1, #152	; 0x98
 8019b06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019b08:	f002 fa4a 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019b0c:	6a3b      	ldr	r3, [r7, #32]
 8019b0e:	3340      	adds	r3, #64	; 0x40
 8019b10:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019b12:	463a      	mov	r2, r7
 8019b14:	6819      	ldr	r1, [r3, #0]
 8019b16:	460b      	mov	r3, r1
 8019b18:	4619      	mov	r1, r3
 8019b1a:	4610      	mov	r0, r2
 8019b1c:	f7fe fe68 	bl	80187f0 <nk_style_item_color>
 8019b20:	4625      	mov	r5, r4
 8019b22:	463c      	mov	r4, r7
 8019b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019b28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019b2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019b30:	6a3b      	ldr	r3, [r7, #32]
 8019b32:	3340      	adds	r3, #64	; 0x40
 8019b34:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019b36:	463a      	mov	r2, r7
 8019b38:	6819      	ldr	r1, [r3, #0]
 8019b3a:	460b      	mov	r3, r1
 8019b3c:	4619      	mov	r1, r3
 8019b3e:	4610      	mov	r0, r2
 8019b40:	f7fe fe56 	bl	80187f0 <nk_style_item_color>
 8019b44:	341c      	adds	r4, #28
 8019b46:	463d      	mov	r5, r7
 8019b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019b54:	6a3b      	ldr	r3, [r7, #32]
 8019b56:	3340      	adds	r3, #64	; 0x40
 8019b58:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019b5a:	463a      	mov	r2, r7
 8019b5c:	6819      	ldr	r1, [r3, #0]
 8019b5e:	460b      	mov	r3, r1
 8019b60:	4619      	mov	r1, r3
 8019b62:	4610      	mov	r0, r2
 8019b64:	f7fe fe44 	bl	80187f0 <nk_style_item_color>
 8019b68:	3438      	adds	r4, #56	; 0x38
 8019b6a:	463d      	mov	r5, r7
 8019b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019b78:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	2100      	movs	r1, #0
 8019b80:	2000      	movs	r0, #0
 8019b82:	f7f5 f939 	bl	800edf8 <nk_rgba>
 8019b86:	4603      	mov	r3, r0
 8019b88:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_PROPERTY];
 8019b8a:	6a3b      	ldr	r3, [r7, #32]
 8019b8c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8019b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019b92:	3358      	adds	r3, #88	; 0x58
 8019b94:	6810      	ldr	r0, [r2, #0]
 8019b96:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019b9a:	6a3a      	ldr	r2, [r7, #32]
 8019b9c:	335c      	adds	r3, #92	; 0x5c
 8019b9e:	6810      	ldr	r0, [r2, #0]
 8019ba0:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ba4:	6a3a      	ldr	r2, [r7, #32]
 8019ba6:	3360      	adds	r3, #96	; 0x60
 8019ba8:	6810      	ldr	r0, [r2, #0]
 8019baa:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 8019bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bae:	6a3a      	ldr	r2, [r7, #32]
 8019bb0:	3364      	adds	r3, #100	; 0x64
 8019bb2:	6810      	ldr	r0, [r2, #0]
 8019bb4:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 8019bb6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019bb8:	eddf 0a90 	vldr	s1, [pc, #576]	; 8019dfc <nk_style_from_table+0x15a4>
 8019bbc:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8019dfc <nk_style_from_table+0x15a4>
 8019bc0:	f7f9 fe36 	bl	8013830 <nk_vec2>
 8019bc4:	eeb0 7a40 	vmov.f32	s14, s0
 8019bc8:	eef0 7a60 	vmov.f32	s15, s1
 8019bcc:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 8019bd0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 8019bd4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019bd6:	eddf 0a89 	vldr	s1, [pc, #548]	; 8019dfc <nk_style_from_table+0x15a4>
 8019bda:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8019dfc <nk_style_from_table+0x15a4>
 8019bde:	f7f9 fe27 	bl	8013830 <nk_vec2>
 8019be2:	eeb0 7a40 	vmov.f32	s14, s0
 8019be6:	eef0 7a60 	vmov.f32	s15, s1
 8019bea:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 8019bee:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 8019bf2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	f7f8 f9cf 	bl	8011f98 <nk_handle_ptr>
 8019bfa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 8019bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c00:	2212      	movs	r2, #18
 8019c02:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 8019c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c06:	f04f 0200 	mov.w	r2, #0
 8019c0a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 8019c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c0e:	f04f 0200 	mov.w	r2, #0
 8019c12:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 8019c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c16:	2200      	movs	r2, #0
 8019c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 8019c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c1e:	2200      	movs	r2, #0
 8019c20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->property.inc_button = style->property.dec_button;
 8019c24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c28:	f502 602a 	add.w	r0, r2, #2720	; 0xaa0
 8019c2c:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8019c30:	2298      	movs	r2, #152	; 0x98
 8019c32:	4619      	mov	r1, r3
 8019c34:	f004 fcc4 	bl	801e5c0 <memcpy>

    /* property edit */
    edit = &style->property.edit;
 8019c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c3a:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8019c3e:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 8019c40:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8019c44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019c46:	f002 f9ab 	bl	801bfa0 <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019c4a:	6a3b      	ldr	r3, [r7, #32]
 8019c4c:	3340      	adds	r3, #64	; 0x40
 8019c4e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019c50:	463a      	mov	r2, r7
 8019c52:	6819      	ldr	r1, [r3, #0]
 8019c54:	460b      	mov	r3, r1
 8019c56:	4619      	mov	r1, r3
 8019c58:	4610      	mov	r0, r2
 8019c5a:	f7fe fdc9 	bl	80187f0 <nk_style_item_color>
 8019c5e:	4625      	mov	r5, r4
 8019c60:	463c      	mov	r4, r7
 8019c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019c6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019c6e:	6a3b      	ldr	r3, [r7, #32]
 8019c70:	3340      	adds	r3, #64	; 0x40
 8019c72:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019c74:	463a      	mov	r2, r7
 8019c76:	6819      	ldr	r1, [r3, #0]
 8019c78:	460b      	mov	r3, r1
 8019c7a:	4619      	mov	r1, r3
 8019c7c:	4610      	mov	r0, r2
 8019c7e:	f7fe fdb7 	bl	80187f0 <nk_style_item_color>
 8019c82:	341c      	adds	r4, #28
 8019c84:	463d      	mov	r5, r7
 8019c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 8019c92:	6a3b      	ldr	r3, [r7, #32]
 8019c94:	3340      	adds	r3, #64	; 0x40
 8019c96:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019c98:	463a      	mov	r2, r7
 8019c9a:	6819      	ldr	r1, [r3, #0]
 8019c9c:	460b      	mov	r3, r1
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	4610      	mov	r0, r2
 8019ca2:	f7fe fda5 	bl	80187f0 <nk_style_item_color>
 8019ca6:	3438      	adds	r4, #56	; 0x38
 8019ca8:	463d      	mov	r5, r7
 8019caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019cae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019cb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 8019cb6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019cb8:	2300      	movs	r3, #0
 8019cba:	2200      	movs	r2, #0
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	2000      	movs	r0, #0
 8019cc0:	f7f5 f89a 	bl	800edf8 <nk_rgba>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	6563      	str	r3, [r4, #84]	; 0x54
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 8019cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cca:	6a3a      	ldr	r2, [r7, #32]
 8019ccc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8019cd0:	6810      	ldr	r0, [r2, #0]
 8019cd2:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 8019cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cd6:	6a3a      	ldr	r2, [r7, #32]
 8019cd8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8019cdc:	6810      	ldr	r0, [r2, #0]
 8019cde:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 8019ce0:	6a3b      	ldr	r3, [r7, #32]
 8019ce2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ce8:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8019cec:	6810      	ldr	r0, [r2, #0]
 8019cee:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 8019cf0:	6a3b      	ldr	r3, [r7, #32]
 8019cf2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cf8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8019cfc:	6810      	ldr	r0, [r2, #0]
 8019cfe:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 8019d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d02:	6a3a      	ldr	r2, [r7, #32]
 8019d04:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8019d08:	6810      	ldr	r0, [r2, #0]
 8019d0a:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 8019d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d0e:	6a3a      	ldr	r2, [r7, #32]
 8019d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019d14:	6810      	ldr	r0, [r2, #0]
 8019d16:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 8019d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d1a:	6a3a      	ldr	r2, [r7, #32]
 8019d1c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8019d20:	6810      	ldr	r0, [r2, #0]
 8019d22:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 8019d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d26:	6a3a      	ldr	r2, [r7, #32]
 8019d28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8019d2c:	6810      	ldr	r0, [r2, #0]
 8019d2e:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 8019d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d32:	6a3a      	ldr	r2, [r7, #32]
 8019d34:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8019d38:	6810      	ldr	r0, [r2, #0]
 8019d3a:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 8019d3c:	6a3b      	ldr	r3, [r7, #32]
 8019d3e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019d48:	6810      	ldr	r0, [r2, #0]
 8019d4a:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 8019d4c:	6a3b      	ldr	r3, [r7, #32]
 8019d4e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8019d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019d58:	6810      	ldr	r0, [r2, #0]
 8019d5a:	6018      	str	r0, [r3, #0]
    edit->padding           = nk_vec2(0,0);
 8019d5c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8019d5e:	eddf 0a27 	vldr	s1, [pc, #156]	; 8019dfc <nk_style_from_table+0x15a4>
 8019d62:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8019dfc <nk_style_from_table+0x15a4>
 8019d66:	f7f9 fd63 	bl	8013830 <nk_vec2>
 8019d6a:	eeb0 7a40 	vmov.f32	s14, s0
 8019d6e:	eef0 7a60 	vmov.f32	s15, s1
 8019d72:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 8019d76:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->cursor_size       = 8;
 8019d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d7c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019d80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 0;
 8019d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d86:	f04f 0200 	mov.w	r2, #0
 8019d8a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 8019d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d90:	f04f 0200 	mov.w	r2, #0
 8019d94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 8019d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d9a:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 8019d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    nk_zero_struct(*chart);
 8019da0:	2138      	movs	r1, #56	; 0x38
 8019da2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019da4:	f002 f8fc 	bl	801bfa0 <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 8019da8:	6a3b      	ldr	r3, [r7, #32]
 8019daa:	3350      	adds	r3, #80	; 0x50
 8019dac:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019dae:	463a      	mov	r2, r7
 8019db0:	6819      	ldr	r1, [r3, #0]
 8019db2:	460b      	mov	r3, r1
 8019db4:	4619      	mov	r1, r3
 8019db6:	4610      	mov	r0, r2
 8019db8:	f7fe fd1a 	bl	80187f0 <nk_style_item_color>
 8019dbc:	4625      	mov	r5, r4
 8019dbe:	463c      	mov	r4, r7
 8019dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019dc4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019dc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 8019dcc:	6a3b      	ldr	r3, [r7, #32]
 8019dce:	f103 020c 	add.w	r2, r3, #12
 8019dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019dd4:	331c      	adds	r3, #28
 8019dd6:	6810      	ldr	r0, [r2, #0]
 8019dd8:	6018      	str	r0, [r3, #0]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 8019dda:	6a3b      	ldr	r3, [r7, #32]
 8019ddc:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8019de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019de2:	3320      	adds	r3, #32
 8019de4:	6810      	ldr	r0, [r2, #0]
 8019de6:	6018      	str	r0, [r3, #0]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 8019de8:	6a3b      	ldr	r3, [r7, #32]
 8019dea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8019dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019df0:	3324      	adds	r3, #36	; 0x24
 8019df2:	6810      	ldr	r0, [r2, #0]
 8019df4:	6018      	str	r0, [r3, #0]
 8019df6:	e003      	b.n	8019e00 <nk_style_from_table+0x15a8>
 8019df8:	41200000 	.word	0x41200000
 8019dfc:	00000000 	.word	0x00000000
    chart->padding          = nk_vec2(4,4);
 8019e00:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8019e02:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019e06:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019e0a:	f7f9 fd11 	bl	8013830 <nk_vec2>
 8019e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8019e12:	eef0 7a60 	vmov.f32	s15, s1
 8019e16:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 8019e1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    chart->border           = 0;
 8019e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e20:	f04f 0200 	mov.w	r2, #0
 8019e24:	629a      	str	r2, [r3, #40]	; 0x28
    chart->rounding         = 0;
 8019e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e28:	f04f 0200 	mov.w	r2, #0
 8019e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 8019e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019e30:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8019e34:	64bb      	str	r3, [r7, #72]	; 0x48
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019e36:	6a3b      	ldr	r3, [r7, #32]
 8019e38:	334c      	adds	r3, #76	; 0x4c
 8019e3a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019e3c:	463a      	mov	r2, r7
 8019e3e:	6819      	ldr	r1, [r3, #0]
 8019e40:	460b      	mov	r3, r1
 8019e42:	4619      	mov	r1, r3
 8019e44:	4610      	mov	r0, r2
 8019e46:	f7fe fcd3 	bl	80187f0 <nk_style_item_color>
 8019e4a:	4625      	mov	r5, r4
 8019e4c:	463c      	mov	r4, r7
 8019e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019e52:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019e56:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019e5a:	6a3b      	ldr	r3, [r7, #32]
 8019e5c:	334c      	adds	r3, #76	; 0x4c
 8019e5e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019e60:	463a      	mov	r2, r7
 8019e62:	6819      	ldr	r1, [r3, #0]
 8019e64:	460b      	mov	r3, r1
 8019e66:	4619      	mov	r1, r3
 8019e68:	4610      	mov	r0, r2
 8019e6a:	f7fe fcc1 	bl	80187f0 <nk_style_item_color>
 8019e6e:	341c      	adds	r4, #28
 8019e70:	463d      	mov	r5, r7
 8019e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019e7e:	6a3b      	ldr	r3, [r7, #32]
 8019e80:	334c      	adds	r3, #76	; 0x4c
 8019e82:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019e84:	463a      	mov	r2, r7
 8019e86:	6819      	ldr	r1, [r3, #0]
 8019e88:	460b      	mov	r3, r1
 8019e8a:	4619      	mov	r1, r3
 8019e8c:	4610      	mov	r0, r2
 8019e8e:	f7fe fcaf 	bl	80187f0 <nk_style_item_color>
 8019e92:	3438      	adds	r4, #56	; 0x38
 8019e94:	463d      	mov	r5, r7
 8019e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 8019ea2:	6a3b      	ldr	r3, [r7, #32]
 8019ea4:	f103 020c 	add.w	r2, r3, #12
 8019ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019eaa:	3354      	adds	r3, #84	; 0x54
 8019eac:	6810      	ldr	r0, [r2, #0]
 8019eae:	6018      	str	r0, [r3, #0]
    combo->label_normal     = table[NK_COLOR_TEXT];
 8019eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019eb2:	6a3a      	ldr	r2, [r7, #32]
 8019eb4:	3358      	adds	r3, #88	; 0x58
 8019eb6:	6810      	ldr	r0, [r2, #0]
 8019eb8:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 8019eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ebc:	6a3a      	ldr	r2, [r7, #32]
 8019ebe:	335c      	adds	r3, #92	; 0x5c
 8019ec0:	6810      	ldr	r0, [r2, #0]
 8019ec2:	6018      	str	r0, [r3, #0]
    combo->label_active     = table[NK_COLOR_TEXT];
 8019ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ec6:	6a3a      	ldr	r2, [r7, #32]
 8019ec8:	3360      	adds	r3, #96	; 0x60
 8019eca:	6810      	ldr	r0, [r2, #0]
 8019ecc:	6018      	str	r0, [r3, #0]
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 8019ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ed0:	2208      	movs	r2, #8
 8019ed2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 8019ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ed8:	2208      	movs	r2, #8
 8019eda:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 8019ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ee0:	2208      	movs	r2, #8
 8019ee2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    combo->content_padding  = nk_vec2(4,4);
 8019ee6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019ee8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019eec:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019ef0:	f7f9 fc9e 	bl	8013830 <nk_vec2>
 8019ef4:	eeb0 7a40 	vmov.f32	s14, s0
 8019ef8:	eef0 7a60 	vmov.f32	s15, s1
 8019efc:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 8019f00:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 8019f04:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019f06:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8019f0a:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8019dfc <nk_style_from_table+0x15a4>
 8019f0e:	f7f9 fc8f 	bl	8013830 <nk_vec2>
 8019f12:	eeb0 7a40 	vmov.f32	s14, s0
 8019f16:	eef0 7a60 	vmov.f32	s15, s1
 8019f1a:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8019f1e:	edc4 7a48 	vstr	s15, [r4, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 8019f22:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8019f24:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 8019dfc <nk_style_from_table+0x15a4>
 8019f28:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8019f2c:	f7f9 fc80 	bl	8013830 <nk_vec2>
 8019f30:	eeb0 7a40 	vmov.f32	s14, s0
 8019f34:	eef0 7a60 	vmov.f32	s15, s1
 8019f38:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
 8019f3c:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
    combo->border           = 1;
 8019f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019f46:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 8019f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f4c:	f04f 0200 	mov.w	r2, #0
 8019f50:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 8019f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019f56:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 8019f5a:	3310      	adds	r3, #16
 8019f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 8019f5e:	2198      	movs	r1, #152	; 0x98
 8019f60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8019f62:	f002 f81d 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019f66:	6a3b      	ldr	r3, [r7, #32]
 8019f68:	334c      	adds	r3, #76	; 0x4c
 8019f6a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019f6c:	463a      	mov	r2, r7
 8019f6e:	6819      	ldr	r1, [r3, #0]
 8019f70:	460b      	mov	r3, r1
 8019f72:	4619      	mov	r1, r3
 8019f74:	4610      	mov	r0, r2
 8019f76:	f7fe fc3b 	bl	80187f0 <nk_style_item_color>
 8019f7a:	4625      	mov	r5, r4
 8019f7c:	463c      	mov	r4, r7
 8019f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019f82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019f86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019f8a:	6a3b      	ldr	r3, [r7, #32]
 8019f8c:	334c      	adds	r3, #76	; 0x4c
 8019f8e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019f90:	463a      	mov	r2, r7
 8019f92:	6819      	ldr	r1, [r3, #0]
 8019f94:	460b      	mov	r3, r1
 8019f96:	4619      	mov	r1, r3
 8019f98:	4610      	mov	r0, r2
 8019f9a:	f7fe fc29 	bl	80187f0 <nk_style_item_color>
 8019f9e:	341c      	adds	r4, #28
 8019fa0:	463d      	mov	r5, r7
 8019fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 8019fae:	6a3b      	ldr	r3, [r7, #32]
 8019fb0:	334c      	adds	r3, #76	; 0x4c
 8019fb2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019fb4:	463a      	mov	r2, r7
 8019fb6:	6819      	ldr	r1, [r3, #0]
 8019fb8:	460b      	mov	r3, r1
 8019fba:	4619      	mov	r1, r3
 8019fbc:	4610      	mov	r0, r2
 8019fbe:	f7fe fc17 	bl	80187f0 <nk_style_item_color>
 8019fc2:	3438      	adds	r4, #56	; 0x38
 8019fc4:	463d      	mov	r5, r7
 8019fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019fca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 8019fd2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	2100      	movs	r1, #0
 8019fda:	2000      	movs	r0, #0
 8019fdc:	f7f4 ff0c 	bl	800edf8 <nk_rgba>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 8019fe4:	6a3b      	ldr	r3, [r7, #32]
 8019fe6:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8019fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019fec:	3358      	adds	r3, #88	; 0x58
 8019fee:	6810      	ldr	r0, [r2, #0]
 8019ff0:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 8019ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ff4:	6a3a      	ldr	r2, [r7, #32]
 8019ff6:	335c      	adds	r3, #92	; 0x5c
 8019ff8:	6810      	ldr	r0, [r2, #0]
 8019ffa:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 8019ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ffe:	6a3a      	ldr	r2, [r7, #32]
 801a000:	3360      	adds	r3, #96	; 0x60
 801a002:	6810      	ldr	r0, [r2, #0]
 801a004:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a008:	6a3a      	ldr	r2, [r7, #32]
 801a00a:	3364      	adds	r3, #100	; 0x64
 801a00c:	6810      	ldr	r0, [r2, #0]
 801a00e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801a010:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a012:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801a016:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a01a:	f7f9 fc09 	bl	8013830 <nk_vec2>
 801a01e:	eeb0 7a40 	vmov.f32	s14, s0
 801a022:	eef0 7a60 	vmov.f32	s15, s1
 801a026:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a02a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a02e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a030:	ed5f 0a8e 	vldr	s1, [pc, #-568]	; 8019dfc <nk_style_from_table+0x15a4>
 801a034:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 8019dfc <nk_style_from_table+0x15a4>
 801a038:	f7f9 fbfa 	bl	8013830 <nk_vec2>
 801a03c:	eeb0 7a40 	vmov.f32	s14, s0
 801a040:	eef0 7a60 	vmov.f32	s15, s1
 801a044:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a048:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a04c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a04e:	2000      	movs	r0, #0
 801a050:	f7f7 ffa2 	bl	8011f98 <nk_handle_ptr>
 801a054:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a05a:	2212      	movs	r2, #18
 801a05c:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a060:	f04f 0200 	mov.w	r2, #0
 801a064:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a068:	f04f 0200 	mov.w	r2, #0
 801a06c:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a070:	2200      	movs	r2, #0
 801a072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a078:	2200      	movs	r2, #0
 801a07a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* tab */
    tab = &style->tab;
 801a07e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a080:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801a084:	331c      	adds	r3, #28
 801a086:	647b      	str	r3, [r7, #68]	; 0x44
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a088:	6a3b      	ldr	r3, [r7, #32]
 801a08a:	336c      	adds	r3, #108	; 0x6c
 801a08c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a08e:	463a      	mov	r2, r7
 801a090:	6819      	ldr	r1, [r3, #0]
 801a092:	460b      	mov	r3, r1
 801a094:	4619      	mov	r1, r3
 801a096:	4610      	mov	r0, r2
 801a098:	f7fe fbaa 	bl	80187f0 <nk_style_item_color>
 801a09c:	4625      	mov	r5, r4
 801a09e:	463c      	mov	r4, r7
 801a0a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a0a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a0a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 801a0ac:	6a3b      	ldr	r3, [r7, #32]
 801a0ae:	f103 020c 	add.w	r2, r3, #12
 801a0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a0b4:	331c      	adds	r3, #28
 801a0b6:	6810      	ldr	r0, [r2, #0]
 801a0b8:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 801a0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a0bc:	6a3a      	ldr	r2, [r7, #32]
 801a0be:	3320      	adds	r3, #32
 801a0c0:	6810      	ldr	r0, [r2, #0]
 801a0c2:	6018      	str	r0, [r3, #0]
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 801a0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a0c6:	220a      	movs	r2, #10
 801a0c8:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 801a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a0ce:	2208      	movs	r2, #8
 801a0d0:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
    tab->padding            = nk_vec2(4,4);
 801a0d4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a0d6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a0da:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a0de:	f7f9 fba7 	bl	8013830 <nk_vec2>
 801a0e2:	eeb0 7a40 	vmov.f32	s14, s0
 801a0e6:	eef0 7a60 	vmov.f32	s15, s1
 801a0ea:	ed84 7aa5 	vstr	s14, [r4, #660]	; 0x294
 801a0ee:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 801a0f2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801a0f4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a0f8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a0fc:	f7f9 fb98 	bl	8013830 <nk_vec2>
 801a100:	eeb0 7a40 	vmov.f32	s14, s0
 801a104:	eef0 7a60 	vmov.f32	s15, s1
 801a108:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801a10c:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    tab->indent             = 10.0f;
 801a110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a112:	4aca      	ldr	r2, [pc, #808]	; (801a43c <nk_style_from_table+0x1be4>)
 801a114:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 801a118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a11a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a11e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    tab->rounding           = 0;
 801a122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a124:	f04f 0200 	mov.w	r2, #0
 801a128:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 801a12c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a12e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801a132:	3318      	adds	r3, #24
 801a134:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a136:	2198      	movs	r1, #152	; 0x98
 801a138:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a13a:	f001 ff31 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a13e:	6a3b      	ldr	r3, [r7, #32]
 801a140:	336c      	adds	r3, #108	; 0x6c
 801a142:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a144:	463a      	mov	r2, r7
 801a146:	6819      	ldr	r1, [r3, #0]
 801a148:	460b      	mov	r3, r1
 801a14a:	4619      	mov	r1, r3
 801a14c:	4610      	mov	r0, r2
 801a14e:	f7fe fb4f 	bl	80187f0 <nk_style_item_color>
 801a152:	4625      	mov	r5, r4
 801a154:	463c      	mov	r4, r7
 801a156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a15a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a15e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a162:	6a3b      	ldr	r3, [r7, #32]
 801a164:	336c      	adds	r3, #108	; 0x6c
 801a166:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a168:	463a      	mov	r2, r7
 801a16a:	6819      	ldr	r1, [r3, #0]
 801a16c:	460b      	mov	r3, r1
 801a16e:	4619      	mov	r1, r3
 801a170:	4610      	mov	r0, r2
 801a172:	f7fe fb3d 	bl	80187f0 <nk_style_item_color>
 801a176:	341c      	adds	r4, #28
 801a178:	463d      	mov	r5, r7
 801a17a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a17c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a17e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801a186:	6a3b      	ldr	r3, [r7, #32]
 801a188:	336c      	adds	r3, #108	; 0x6c
 801a18a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a18c:	463a      	mov	r2, r7
 801a18e:	6819      	ldr	r1, [r3, #0]
 801a190:	460b      	mov	r3, r1
 801a192:	4619      	mov	r1, r3
 801a194:	4610      	mov	r0, r2
 801a196:	f7fe fb2b 	bl	80187f0 <nk_style_item_color>
 801a19a:	3438      	adds	r4, #56	; 0x38
 801a19c:	463d      	mov	r5, r7
 801a19e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a1a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a1a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a1a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a1aa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	2100      	movs	r1, #0
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	f7f4 fe20 	bl	800edf8 <nk_rgba>
 801a1b8:	4603      	mov	r3, r0
 801a1ba:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801a1bc:	6a3b      	ldr	r3, [r7, #32]
 801a1be:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801a1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1c4:	3358      	adds	r3, #88	; 0x58
 801a1c6:	6810      	ldr	r0, [r2, #0]
 801a1c8:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1cc:	6a3a      	ldr	r2, [r7, #32]
 801a1ce:	335c      	adds	r3, #92	; 0x5c
 801a1d0:	6810      	ldr	r0, [r2, #0]
 801a1d2:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1d6:	6a3a      	ldr	r2, [r7, #32]
 801a1d8:	3360      	adds	r3, #96	; 0x60
 801a1da:	6810      	ldr	r0, [r2, #0]
 801a1dc:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a1e0:	6a3a      	ldr	r2, [r7, #32]
 801a1e2:	3364      	adds	r3, #100	; 0x64
 801a1e4:	6810      	ldr	r0, [r2, #0]
 801a1e6:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801a1e8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a1ea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801a1ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a1f2:	f7f9 fb1d 	bl	8013830 <nk_vec2>
 801a1f6:	eeb0 7a40 	vmov.f32	s14, s0
 801a1fa:	eef0 7a60 	vmov.f32	s15, s1
 801a1fe:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a202:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a206:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a208:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801a440 <nk_style_from_table+0x1be8>
 801a20c:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801a440 <nk_style_from_table+0x1be8>
 801a210:	f7f9 fb0e 	bl	8013830 <nk_vec2>
 801a214:	eeb0 7a40 	vmov.f32	s14, s0
 801a218:	eef0 7a60 	vmov.f32	s15, s1
 801a21c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a220:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a224:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a226:	2000      	movs	r0, #0
 801a228:	f7f7 feb6 	bl	8011f98 <nk_handle_ptr>
 801a22c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a232:	2212      	movs	r2, #18
 801a234:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a238:	f04f 0200 	mov.w	r2, #0
 801a23c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a240:	f04f 0200 	mov.w	r2, #0
 801a244:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a248:	2200      	movs	r2, #0
 801a24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a250:	2200      	movs	r2, #0
 801a252:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.tab_maximize_button =*button;
 801a256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a25c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a25e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801a262:	4611      	mov	r1, r2
 801a264:	2298      	movs	r2, #152	; 0x98
 801a266:	4618      	mov	r0, r3
 801a268:	f004 f9aa 	bl	801e5c0 <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 801a26c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a26e:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801a272:	3308      	adds	r3, #8
 801a274:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a276:	2198      	movs	r1, #152	; 0x98
 801a278:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a27a:	f001 fe91 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a27e:	6a3b      	ldr	r3, [r7, #32]
 801a280:	3304      	adds	r3, #4
 801a282:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a284:	463a      	mov	r2, r7
 801a286:	6819      	ldr	r1, [r3, #0]
 801a288:	460b      	mov	r3, r1
 801a28a:	4619      	mov	r1, r3
 801a28c:	4610      	mov	r0, r2
 801a28e:	f7fe faaf 	bl	80187f0 <nk_style_item_color>
 801a292:	4625      	mov	r5, r4
 801a294:	463c      	mov	r4, r7
 801a296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a29a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a29e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a2a2:	6a3b      	ldr	r3, [r7, #32]
 801a2a4:	3304      	adds	r3, #4
 801a2a6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2a8:	463a      	mov	r2, r7
 801a2aa:	6819      	ldr	r1, [r3, #0]
 801a2ac:	460b      	mov	r3, r1
 801a2ae:	4619      	mov	r1, r3
 801a2b0:	4610      	mov	r0, r2
 801a2b2:	f7fe fa9d 	bl	80187f0 <nk_style_item_color>
 801a2b6:	341c      	adds	r4, #28
 801a2b8:	463d      	mov	r5, r7
 801a2ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a2be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a2c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a2c6:	6a3b      	ldr	r3, [r7, #32]
 801a2c8:	3304      	adds	r3, #4
 801a2ca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2cc:	463a      	mov	r2, r7
 801a2ce:	6819      	ldr	r1, [r3, #0]
 801a2d0:	460b      	mov	r3, r1
 801a2d2:	4619      	mov	r1, r3
 801a2d4:	4610      	mov	r0, r2
 801a2d6:	f7fe fa8b 	bl	80187f0 <nk_style_item_color>
 801a2da:	3438      	adds	r4, #56	; 0x38
 801a2dc:	463d      	mov	r5, r7
 801a2de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a2e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a2e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a2ea:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	2100      	movs	r1, #0
 801a2f2:	2000      	movs	r0, #0
 801a2f4:	f7f4 fd80 	bl	800edf8 <nk_rgba>
 801a2f8:	4603      	mov	r3, r0
 801a2fa:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801a2fc:	6a3b      	ldr	r3, [r7, #32]
 801a2fe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801a302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a304:	3358      	adds	r3, #88	; 0x58
 801a306:	6810      	ldr	r0, [r2, #0]
 801a308:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a30c:	6a3a      	ldr	r2, [r7, #32]
 801a30e:	335c      	adds	r3, #92	; 0x5c
 801a310:	6810      	ldr	r0, [r2, #0]
 801a312:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a316:	6a3a      	ldr	r2, [r7, #32]
 801a318:	3360      	adds	r3, #96	; 0x60
 801a31a:	6810      	ldr	r0, [r2, #0]
 801a31c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a320:	6a3a      	ldr	r2, [r7, #32]
 801a322:	3364      	adds	r3, #100	; 0x64
 801a324:	6810      	ldr	r0, [r2, #0]
 801a326:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801a328:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a32a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801a32e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a332:	f7f9 fa7d 	bl	8013830 <nk_vec2>
 801a336:	eeb0 7a40 	vmov.f32	s14, s0
 801a33a:	eef0 7a60 	vmov.f32	s15, s1
 801a33e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a342:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a346:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a348:	eddf 0a3d 	vldr	s1, [pc, #244]	; 801a440 <nk_style_from_table+0x1be8>
 801a34c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801a440 <nk_style_from_table+0x1be8>
 801a350:	f7f9 fa6e 	bl	8013830 <nk_vec2>
 801a354:	eeb0 7a40 	vmov.f32	s14, s0
 801a358:	eef0 7a60 	vmov.f32	s15, s1
 801a35c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a360:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a364:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a366:	2000      	movs	r0, #0
 801a368:	f7f7 fe16 	bl	8011f98 <nk_handle_ptr>
 801a36c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a372:	2212      	movs	r2, #18
 801a374:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a378:	f04f 0200 	mov.w	r2, #0
 801a37c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a380:	f04f 0200 	mov.w	r2, #0
 801a384:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a388:	2200      	movs	r2, #0
 801a38a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a390:	2200      	movs	r2, #0
 801a392:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.node_maximize_button =*button;
 801a396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a39c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a39e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801a3a2:	4611      	mov	r1, r2
 801a3a4:	2298      	movs	r2, #152	; 0x98
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f004 f90a 	bl	801e5c0 <memcpy>

    /* window header */
    win = &style->window;
 801a3ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a3ae:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801a3b2:	330c      	adds	r3, #12
 801a3b4:	643b      	str	r3, [r7, #64]	; 0x40
    win->header.align = NK_HEADER_RIGHT;
 801a3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3b8:	2201      	movs	r2, #1
 801a3ba:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    win->header.close_symbol = NK_SYMBOL_X;
 801a3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3c0:	2201      	movs	r2, #1
 801a3c2:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 801a3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3c8:	220c      	movs	r2, #12
 801a3ca:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 801a3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3d0:	220b      	movs	r2, #11
 801a3d2:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a3d6:	6a3b      	ldr	r3, [r7, #32]
 801a3d8:	3308      	adds	r3, #8
 801a3da:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a3dc:	463a      	mov	r2, r7
 801a3de:	6819      	ldr	r1, [r3, #0]
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	4619      	mov	r1, r3
 801a3e4:	4610      	mov	r0, r2
 801a3e6:	f7fe fa03 	bl	80187f0 <nk_style_item_color>
 801a3ea:	4625      	mov	r5, r4
 801a3ec:	463c      	mov	r4, r7
 801a3ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a3f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a3f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a3fa:	6a3b      	ldr	r3, [r7, #32]
 801a3fc:	3308      	adds	r3, #8
 801a3fe:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a400:	463a      	mov	r2, r7
 801a402:	6819      	ldr	r1, [r3, #0]
 801a404:	460b      	mov	r3, r1
 801a406:	4619      	mov	r1, r3
 801a408:	4610      	mov	r0, r2
 801a40a:	f7fe f9f1 	bl	80187f0 <nk_style_item_color>
 801a40e:	341c      	adds	r4, #28
 801a410:	463d      	mov	r5, r7
 801a412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a41a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a41e:	6a3b      	ldr	r3, [r7, #32]
 801a420:	3308      	adds	r3, #8
 801a422:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a424:	463a      	mov	r2, r7
 801a426:	6819      	ldr	r1, [r3, #0]
 801a428:	460b      	mov	r3, r1
 801a42a:	4619      	mov	r1, r3
 801a42c:	4610      	mov	r0, r2
 801a42e:	f7fe f9df 	bl	80187f0 <nk_style_item_color>
 801a432:	3438      	adds	r4, #56	; 0x38
 801a434:	463d      	mov	r5, r7
 801a436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a438:	e004      	b.n	801a444 <nk_style_from_table+0x1bec>
 801a43a:	bf00      	nop
 801a43c:	41200000 	.word	0x41200000
 801a440:	00000000 	.word	0x00000000
 801a444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a446:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a44a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 801a44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a450:	6a3a      	ldr	r2, [r7, #32]
 801a452:	f203 1387 	addw	r3, r3, #391	; 0x187
 801a456:	6812      	ldr	r2, [r2, #0]
 801a458:	601a      	str	r2, [r3, #0]
    win->header.label_hover = table[NK_COLOR_TEXT];
 801a45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a45c:	6a3a      	ldr	r2, [r7, #32]
 801a45e:	f203 138b 	addw	r3, r3, #395	; 0x18b
 801a462:	6812      	ldr	r2, [r2, #0]
 801a464:	601a      	str	r2, [r3, #0]
    win->header.label_active = table[NK_COLOR_TEXT];
 801a466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a468:	6a3a      	ldr	r2, [r7, #32]
 801a46a:	f203 138f 	addw	r3, r3, #399	; 0x18f
 801a46e:	6812      	ldr	r2, [r2, #0]
 801a470:	601a      	str	r2, [r3, #0]
    win->header.label_padding = nk_vec2(4,4);
 801a472:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a474:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a478:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a47c:	f7f9 f9d8 	bl	8013830 <nk_vec2>
 801a480:	eeb0 7a40 	vmov.f32	s14, s0
 801a484:	eef0 7a60 	vmov.f32	s15, s1
 801a488:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
 801a48c:	edc4 7a68 	vstr	s15, [r4, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 801a490:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a492:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a496:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a49a:	f7f9 f9c9 	bl	8013830 <nk_vec2>
 801a49e:	eeb0 7a40 	vmov.f32	s14, s0
 801a4a2:	eef0 7a60 	vmov.f32	s15, s1
 801a4a6:	ed84 7a65 	vstr	s14, [r4, #404]	; 0x194
 801a4aa:	edc4 7a66 	vstr	s15, [r4, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 801a4ae:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a4b0:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801a440 <nk_style_from_table+0x1be8>
 801a4b4:	ed1f 0a1e 	vldr	s0, [pc, #-120]	; 801a440 <nk_style_from_table+0x1be8>
 801a4b8:	f7f9 f9ba 	bl	8013830 <nk_vec2>
 801a4bc:	eeb0 7a40 	vmov.f32	s14, s0
 801a4c0:	eef0 7a60 	vmov.f32	s15, s1
 801a4c4:	ed84 7a69 	vstr	s14, [r4, #420]	; 0x1a4
 801a4c8:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 801a4cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a4ce:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 801a4d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a4d4:	2198      	movs	r1, #152	; 0x98
 801a4d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a4d8:	f001 fd62 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a4dc:	6a3b      	ldr	r3, [r7, #32]
 801a4de:	3308      	adds	r3, #8
 801a4e0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a4e2:	463a      	mov	r2, r7
 801a4e4:	6819      	ldr	r1, [r3, #0]
 801a4e6:	460b      	mov	r3, r1
 801a4e8:	4619      	mov	r1, r3
 801a4ea:	4610      	mov	r0, r2
 801a4ec:	f7fe f980 	bl	80187f0 <nk_style_item_color>
 801a4f0:	4625      	mov	r5, r4
 801a4f2:	463c      	mov	r4, r7
 801a4f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a4f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a4fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a500:	6a3b      	ldr	r3, [r7, #32]
 801a502:	3308      	adds	r3, #8
 801a504:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a506:	463a      	mov	r2, r7
 801a508:	6819      	ldr	r1, [r3, #0]
 801a50a:	460b      	mov	r3, r1
 801a50c:	4619      	mov	r1, r3
 801a50e:	4610      	mov	r0, r2
 801a510:	f7fe f96e 	bl	80187f0 <nk_style_item_color>
 801a514:	341c      	adds	r4, #28
 801a516:	463d      	mov	r5, r7
 801a518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a51a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a51c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a524:	6a3b      	ldr	r3, [r7, #32]
 801a526:	3308      	adds	r3, #8
 801a528:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a52a:	463a      	mov	r2, r7
 801a52c:	6819      	ldr	r1, [r3, #0]
 801a52e:	460b      	mov	r3, r1
 801a530:	4619      	mov	r1, r3
 801a532:	4610      	mov	r0, r2
 801a534:	f7fe f95c 	bl	80187f0 <nk_style_item_color>
 801a538:	3438      	adds	r4, #56	; 0x38
 801a53a:	463d      	mov	r5, r7
 801a53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a53e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a548:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a54a:	2300      	movs	r3, #0
 801a54c:	2200      	movs	r2, #0
 801a54e:	2100      	movs	r1, #0
 801a550:	2000      	movs	r0, #0
 801a552:	f7f4 fc51 	bl	800edf8 <nk_rgba>
 801a556:	4603      	mov	r3, r0
 801a558:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801a55a:	6a3b      	ldr	r3, [r7, #32]
 801a55c:	f103 0208 	add.w	r2, r3, #8
 801a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a562:	3358      	adds	r3, #88	; 0x58
 801a564:	6810      	ldr	r0, [r2, #0]
 801a566:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a56a:	6a3a      	ldr	r2, [r7, #32]
 801a56c:	335c      	adds	r3, #92	; 0x5c
 801a56e:	6810      	ldr	r0, [r2, #0]
 801a570:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a574:	6a3a      	ldr	r2, [r7, #32]
 801a576:	3360      	adds	r3, #96	; 0x60
 801a578:	6810      	ldr	r0, [r2, #0]
 801a57a:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a57e:	6a3a      	ldr	r2, [r7, #32]
 801a580:	3364      	adds	r3, #100	; 0x64
 801a582:	6810      	ldr	r0, [r2, #0]
 801a584:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801a586:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a588:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 801a440 <nk_style_from_table+0x1be8>
 801a58c:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 801a440 <nk_style_from_table+0x1be8>
 801a590:	f7f9 f94e 	bl	8013830 <nk_vec2>
 801a594:	eeb0 7a40 	vmov.f32	s14, s0
 801a598:	eef0 7a60 	vmov.f32	s15, s1
 801a59c:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a5a0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a5a4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a5a6:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 801a440 <nk_style_from_table+0x1be8>
 801a5aa:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801a440 <nk_style_from_table+0x1be8>
 801a5ae:	f7f9 f93f 	bl	8013830 <nk_vec2>
 801a5b2:	eeb0 7a40 	vmov.f32	s14, s0
 801a5b6:	eef0 7a60 	vmov.f32	s15, s1
 801a5ba:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a5be:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a5c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a5c4:	2000      	movs	r0, #0
 801a5c6:	f7f7 fce7 	bl	8011f98 <nk_handle_ptr>
 801a5ca:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5d0:	2212      	movs	r2, #18
 801a5d2:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a5d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5d6:	f04f 0200 	mov.w	r2, #0
 801a5da:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5de:	f04f 0200 	mov.w	r2, #0
 801a5e2:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 801a5f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a5f6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 801a5fa:	3318      	adds	r3, #24
 801a5fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801a5fe:	2198      	movs	r1, #152	; 0x98
 801a600:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801a602:	f001 fccd 	bl	801bfa0 <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a606:	6a3b      	ldr	r3, [r7, #32]
 801a608:	3308      	adds	r3, #8
 801a60a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a60c:	463a      	mov	r2, r7
 801a60e:	6819      	ldr	r1, [r3, #0]
 801a610:	460b      	mov	r3, r1
 801a612:	4619      	mov	r1, r3
 801a614:	4610      	mov	r0, r2
 801a616:	f7fe f8eb 	bl	80187f0 <nk_style_item_color>
 801a61a:	4625      	mov	r5, r4
 801a61c:	463c      	mov	r4, r7
 801a61e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a622:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a626:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a62a:	6a3b      	ldr	r3, [r7, #32]
 801a62c:	3308      	adds	r3, #8
 801a62e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a630:	463a      	mov	r2, r7
 801a632:	6819      	ldr	r1, [r3, #0]
 801a634:	460b      	mov	r3, r1
 801a636:	4619      	mov	r1, r3
 801a638:	4610      	mov	r0, r2
 801a63a:	f7fe f8d9 	bl	80187f0 <nk_style_item_color>
 801a63e:	341c      	adds	r4, #28
 801a640:	463d      	mov	r5, r7
 801a642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a64a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801a64e:	6a3b      	ldr	r3, [r7, #32]
 801a650:	3308      	adds	r3, #8
 801a652:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a654:	463a      	mov	r2, r7
 801a656:	6819      	ldr	r1, [r3, #0]
 801a658:	460b      	mov	r3, r1
 801a65a:	4619      	mov	r1, r3
 801a65c:	4610      	mov	r0, r2
 801a65e:	f7fe f8c7 	bl	80187f0 <nk_style_item_color>
 801a662:	3438      	adds	r4, #56	; 0x38
 801a664:	463d      	mov	r5, r7
 801a666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a66a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a66e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801a672:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a674:	2300      	movs	r3, #0
 801a676:	2200      	movs	r2, #0
 801a678:	2100      	movs	r1, #0
 801a67a:	2000      	movs	r0, #0
 801a67c:	f7f4 fbbc 	bl	800edf8 <nk_rgba>
 801a680:	4603      	mov	r3, r0
 801a682:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801a684:	6a3b      	ldr	r3, [r7, #32]
 801a686:	f103 0208 	add.w	r2, r3, #8
 801a68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a68c:	3358      	adds	r3, #88	; 0x58
 801a68e:	6810      	ldr	r0, [r2, #0]
 801a690:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801a692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a694:	6a3a      	ldr	r2, [r7, #32]
 801a696:	335c      	adds	r3, #92	; 0x5c
 801a698:	6810      	ldr	r0, [r2, #0]
 801a69a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801a69c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a69e:	6a3a      	ldr	r2, [r7, #32]
 801a6a0:	3360      	adds	r3, #96	; 0x60
 801a6a2:	6810      	ldr	r0, [r2, #0]
 801a6a4:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801a6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6a8:	6a3a      	ldr	r2, [r7, #32]
 801a6aa:	3364      	adds	r3, #100	; 0x64
 801a6ac:	6810      	ldr	r0, [r2, #0]
 801a6ae:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801a6b0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a6b2:	ed5f 0a9d 	vldr	s1, [pc, #-628]	; 801a440 <nk_style_from_table+0x1be8>
 801a6b6:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 801a440 <nk_style_from_table+0x1be8>
 801a6ba:	f7f9 f8b9 	bl	8013830 <nk_vec2>
 801a6be:	eeb0 7a40 	vmov.f32	s14, s0
 801a6c2:	eef0 7a60 	vmov.f32	s15, s1
 801a6c6:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801a6ca:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801a6ce:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a6d0:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 801a440 <nk_style_from_table+0x1be8>
 801a6d4:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 801a440 <nk_style_from_table+0x1be8>
 801a6d8:	f7f9 f8aa 	bl	8013830 <nk_vec2>
 801a6dc:	eeb0 7a40 	vmov.f32	s14, s0
 801a6e0:	eef0 7a60 	vmov.f32	s15, s1
 801a6e4:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801a6e8:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801a6ec:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801a6ee:	2000      	movs	r0, #0
 801a6f0:	f7f7 fc52 	bl	8011f98 <nk_handle_ptr>
 801a6f4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801a6f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a6fa:	2212      	movs	r2, #18
 801a6fc:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801a6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a700:	f04f 0200 	mov.w	r2, #0
 801a704:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801a706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a708:	f04f 0200 	mov.w	r2, #0
 801a70c:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801a70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a710:	2200      	movs	r2, #0
 801a712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801a716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a718:	2200      	movs	r2, #0
 801a71a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 801a71e:	6a3b      	ldr	r3, [r7, #32]
 801a720:	1d1a      	adds	r2, r3, #4
 801a722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a724:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801a728:	6810      	ldr	r0, [r2, #0]
 801a72a:	6018      	str	r0, [r3, #0]
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801a72c:	6a3b      	ldr	r3, [r7, #32]
 801a72e:	3304      	adds	r3, #4
 801a730:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a732:	463a      	mov	r2, r7
 801a734:	6819      	ldr	r1, [r3, #0]
 801a736:	460b      	mov	r3, r1
 801a738:	4619      	mov	r1, r3
 801a73a:	4610      	mov	r0, r2
 801a73c:	f7fe f858 	bl	80187f0 <nk_style_item_color>
 801a740:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
 801a744:	463d      	mov	r5, r7
 801a746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a74a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a74e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 801a752:	6a3b      	ldr	r3, [r7, #32]
 801a754:	f103 020c 	add.w	r2, r3, #12
 801a758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a75a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801a75e:	6810      	ldr	r0, [r2, #0]
 801a760:	6018      	str	r0, [r3, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 801a762:	6a3b      	ldr	r3, [r7, #32]
 801a764:	f103 020c 	add.w	r2, r3, #12
 801a768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a76a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 801a76e:	6810      	ldr	r0, [r2, #0]
 801a770:	6018      	str	r0, [r3, #0]
    win->combo_border_color = table[NK_COLOR_BORDER];
 801a772:	6a3b      	ldr	r3, [r7, #32]
 801a774:	f103 020c 	add.w	r2, r3, #12
 801a778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a77a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801a77e:	6810      	ldr	r0, [r2, #0]
 801a780:	6018      	str	r0, [r3, #0]
    win->contextual_border_color = table[NK_COLOR_BORDER];
 801a782:	6a3b      	ldr	r3, [r7, #32]
 801a784:	f103 020c 	add.w	r2, r3, #12
 801a788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a78a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801a78e:	6810      	ldr	r0, [r2, #0]
 801a790:	6018      	str	r0, [r3, #0]
    win->menu_border_color = table[NK_COLOR_BORDER];
 801a792:	6a3b      	ldr	r3, [r7, #32]
 801a794:	f103 020c 	add.w	r2, r3, #12
 801a798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a79a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801a79e:	6810      	ldr	r0, [r2, #0]
 801a7a0:	6018      	str	r0, [r3, #0]
    win->group_border_color = table[NK_COLOR_BORDER];
 801a7a2:	6a3b      	ldr	r3, [r7, #32]
 801a7a4:	f103 020c 	add.w	r2, r3, #12
 801a7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7aa:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801a7ae:	6810      	ldr	r0, [r2, #0]
 801a7b0:	6018      	str	r0, [r3, #0]
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801a7b2:	6a3b      	ldr	r3, [r7, #32]
 801a7b4:	f103 020c 	add.w	r2, r3, #12
 801a7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801a7be:	6810      	ldr	r0, [r2, #0]
 801a7c0:	6018      	str	r0, [r3, #0]
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 801a7c2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a7c4:	463a      	mov	r2, r7
 801a7c6:	6a3b      	ldr	r3, [r7, #32]
 801a7c8:	6819      	ldr	r1, [r3, #0]
 801a7ca:	460b      	mov	r3, r1
 801a7cc:	4619      	mov	r1, r3
 801a7ce:	4610      	mov	r0, r2
 801a7d0:	f7fe f80e 	bl	80187f0 <nk_style_item_color>
 801a7d4:	f504 74f4 	add.w	r4, r4, #488	; 0x1e8
 801a7d8:	463d      	mov	r5, r7
 801a7da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a7dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a7de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801a7e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    win->rounding = 0.0f;
 801a7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7e8:	f04f 0200 	mov.w	r2, #0
 801a7ec:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 801a7f0:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a7f2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a7f6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a7fa:	f7f9 f819 	bl	8013830 <nk_vec2>
 801a7fe:	eeb0 7a40 	vmov.f32	s14, s0
 801a802:	eef0 7a60 	vmov.f32	s15, s1
 801a806:	ed84 7a8a 	vstr	s14, [r4, #552]	; 0x228
 801a80a:	edc4 7a8b 	vstr	s15, [r4, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 801a80e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a810:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 801a814:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801a818:	f7f9 f80a 	bl	8013830 <nk_vec2>
 801a81c:	eeb0 7a40 	vmov.f32	s14, s0
 801a820:	eef0 7a60 	vmov.f32	s15, s1
 801a824:	ed84 7a8c 	vstr	s14, [r4, #560]	; 0x230
 801a828:	edc4 7a8d 	vstr	s15, [r4, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 801a82c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a82e:	eddf 0a52 	vldr	s1, [pc, #328]	; 801a978 <nk_style_from_table+0x2120>
 801a832:	ed9f 0a51 	vldr	s0, [pc, #324]	; 801a978 <nk_style_from_table+0x2120>
 801a836:	f7f8 fffb 	bl	8013830 <nk_vec2>
 801a83a:	eeb0 7a40 	vmov.f32	s14, s0
 801a83e:	eef0 7a60 	vmov.f32	s15, s1
 801a842:	ed84 7a8e 	vstr	s14, [r4, #568]	; 0x238
 801a846:	edc4 7a8f 	vstr	s15, [r4, #572]	; 0x23c

    win->combo_border = 1.0f;
 801a84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a84c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a850:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    win->contextual_border = 1.0f;
 801a854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a856:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a85a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    win->menu_border = 1.0f;
 801a85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a860:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a864:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    win->group_border = 1.0f;
 801a868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a86a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a86e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    win->tooltip_border = 1.0f;
 801a872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a874:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a878:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    win->popup_border = 1.0f;
 801a87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a87e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801a882:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    win->border = 2.0f;
 801a886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a88c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    win->min_row_height_padding = 8;
 801a890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a892:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801a896:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 801a89a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a89c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a8a0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a8a4:	f7f8 ffc4 	bl	8013830 <nk_vec2>
 801a8a8:	eeb0 7a40 	vmov.f32	s14, s0
 801a8ac:	eef0 7a60 	vmov.f32	s15, s1
 801a8b0:	ed84 7a90 	vstr	s14, [r4, #576]	; 0x240
 801a8b4:	edc4 7a91 	vstr	s15, [r4, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 801a8b8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a8ba:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a8be:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a8c2:	f7f8 ffb5 	bl	8013830 <nk_vec2>
 801a8c6:	eeb0 7a40 	vmov.f32	s14, s0
 801a8ca:	eef0 7a60 	vmov.f32	s15, s1
 801a8ce:	ed84 7a92 	vstr	s14, [r4, #584]	; 0x248
 801a8d2:	edc4 7a93 	vstr	s15, [r4, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 801a8d6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a8d8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a8dc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a8e0:	f7f8 ffa6 	bl	8013830 <nk_vec2>
 801a8e4:	eeb0 7a40 	vmov.f32	s14, s0
 801a8e8:	eef0 7a60 	vmov.f32	s15, s1
 801a8ec:	ed84 7a94 	vstr	s14, [r4, #592]	; 0x250
 801a8f0:	edc4 7a95 	vstr	s15, [r4, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 801a8f4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a8f6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a8fa:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a8fe:	f7f8 ff97 	bl	8013830 <nk_vec2>
 801a902:	eeb0 7a40 	vmov.f32	s14, s0
 801a906:	eef0 7a60 	vmov.f32	s15, s1
 801a90a:	ed84 7a96 	vstr	s14, [r4, #600]	; 0x258
 801a90e:	edc4 7a97 	vstr	s15, [r4, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 801a912:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a914:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a918:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a91c:	f7f8 ff88 	bl	8013830 <nk_vec2>
 801a920:	eeb0 7a40 	vmov.f32	s14, s0
 801a924:	eef0 7a60 	vmov.f32	s15, s1
 801a928:	ed84 7a98 	vstr	s14, [r4, #608]	; 0x260
 801a92c:	edc4 7a99 	vstr	s15, [r4, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 801a930:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a932:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a936:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a93a:	f7f8 ff79 	bl	8013830 <nk_vec2>
 801a93e:	eeb0 7a40 	vmov.f32	s14, s0
 801a942:	eef0 7a60 	vmov.f32	s15, s1
 801a946:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
 801a94a:	edc4 7a9b 	vstr	s15, [r4, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 801a94e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801a950:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801a954:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801a958:	f7f8 ff6a 	bl	8013830 <nk_vec2>
 801a95c:	eeb0 7a40 	vmov.f32	s14, s0
 801a960:	eef0 7a60 	vmov.f32	s15, s1
 801a964:	ed84 7a9c 	vstr	s14, [r4, #624]	; 0x270
 801a968:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
 801a96c:	e000      	b.n	801a970 <nk_style_from_table+0x2118>
    if (!ctx) return;
 801a96e:	bf00      	nop
}
 801a970:	3778      	adds	r7, #120	; 0x78
 801a972:	46bd      	mov	sp, r7
 801a974:	bdb0      	pop	{r4, r5, r7, pc}
 801a976:	bf00      	nop
 801a978:	42800000 	.word	0x42800000

0801a97c <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b084      	sub	sp, #16
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801a984:	6878      	ldr	r0, [r7, #4]
 801a986:	f7f9 f9e7 	bl	8013d58 <nk_create_page_element>
 801a98a:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d101      	bne.n	801a996 <nk_create_table+0x1a>
 801a992:	2300      	movs	r3, #0
 801a994:	e005      	b.n	801a9a2 <nk_create_table+0x26>
    nk_zero_struct(*elem);
 801a996:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801a99a:	68f8      	ldr	r0, [r7, #12]
 801a99c:	f001 fb00 	bl	801bfa0 <nk_zero>
    return &elem->data.tbl;
 801a9a0:	68fb      	ldr	r3, [r7, #12]
}
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	3710      	adds	r7, #16
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}

0801a9aa <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b084      	sub	sp, #16
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	6078      	str	r0, [r7, #4]
 801a9b2:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
 801a9b4:	683b      	ldr	r3, [r7, #0]
 801a9b6:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 801a9bc:	68b9      	ldr	r1, [r7, #8]
 801a9be:	6878      	ldr	r0, [r7, #4]
 801a9c0:	f7f9 fa61 	bl	8013e86 <nk_free_page_element>
}
 801a9c4:	bf00      	nop
 801a9c6:	3710      	adds	r7, #16
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}

0801a9cc <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
 801a9cc:	b480      	push	{r7}
 801a9ce:	b083      	sub	sp, #12
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	6078      	str	r0, [r7, #4]
 801a9d4:	6039      	str	r1, [r7, #0]
    if (!win->tables) {
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d113      	bne.n	801aa08 <nk_push_table+0x3c>
        win->tables = tbl;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	683a      	ldr	r2, [r7, #0]
 801a9e4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        tbl->next = 0;
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	2200      	movs	r2, #0
 801a9ec:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        tbl->prev = 0;
 801a9f0:	683b      	ldr	r3, [r7, #0]
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        tbl->size = 0;
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	605a      	str	r2, [r3, #4]
        win->table_count = 1;
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	2201      	movs	r2, #1
 801aa02:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        return;
 801aa06:	e01d      	b.n	801aa44 <nk_push_table+0x78>
    }
    win->tables->prev = tbl;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801aa0e:	683a      	ldr	r2, [r7, #0]
 801aa10:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	2200      	movs	r2, #0
 801aa24:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->size = 0;
 801aa28:	683b      	ldr	r3, [r7, #0]
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	605a      	str	r2, [r3, #4]
    win->tables = tbl;
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	683a      	ldr	r2, [r7, #0]
 801aa32:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    win->table_count++;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801aa3c:	1c5a      	adds	r2, r3, #1
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
}
 801aa44:	370c      	adds	r7, #12
 801aa46:	46bd      	mov	sp, r7
 801aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4c:	4770      	bx	lr

0801aa4e <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
 801aa4e:	b480      	push	{r7}
 801aa50:	b083      	sub	sp, #12
 801aa52:	af00      	add	r7, sp, #0
 801aa54:	6078      	str	r0, [r7, #4]
 801aa56:	6039      	str	r1, [r7, #0]
    if (win->tables == tbl)
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801aa5e:	683a      	ldr	r2, [r7, #0]
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d105      	bne.n	801aa70 <nk_remove_table+0x22>
        win->tables = tbl->next;
 801aa64:	683b      	ldr	r3, [r7, #0]
 801aa66:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    if (tbl->next)
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d007      	beq.n	801aa8a <nk_remove_table+0x3c>
        tbl->next->prev = tbl->prev;
 801aa7a:	683b      	ldr	r3, [r7, #0]
 801aa7c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801aa80:	683a      	ldr	r2, [r7, #0]
 801aa82:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 801aa86:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d007      	beq.n	801aaa4 <nk_remove_table+0x56>
        tbl->prev->next = tbl->next;
 801aa94:	683b      	ldr	r3, [r7, #0]
 801aa96:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801aa9a:	683a      	ldr	r2, [r7, #0]
 801aa9c:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 801aaa0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 801aaa4:	683b      	ldr	r3, [r7, #0]
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	2200      	movs	r2, #0
 801aab0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 801aab4:	bf00      	nop
 801aab6:	370c      	adds	r7, #12
 801aab8:	46bd      	mov	sp, r7
 801aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aabe:	4770      	bx	lr

0801aac0 <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b086      	sub	sp, #24
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	60f8      	str	r0, [r7, #12]
 801aac8:	60b9      	str	r1, [r7, #8]
 801aaca:	607a      	str	r2, [r7, #4]
 801aacc:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d105      	bne.n	801aae0 <nk_add_value+0x20>
 801aad4:	4b32      	ldr	r3, [pc, #200]	; (801aba0 <nk_add_value+0xe0>)
 801aad6:	4a33      	ldr	r2, [pc, #204]	; (801aba4 <nk_add_value+0xe4>)
 801aad8:	213b      	movs	r1, #59	; 0x3b
 801aada:	4833      	ldr	r0, [pc, #204]	; (801aba8 <nk_add_value+0xe8>)
 801aadc:	f002 ff48 	bl	801d970 <__assert_func>
    NK_ASSERT(win);
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d105      	bne.n	801aaf2 <nk_add_value+0x32>
 801aae6:	4b31      	ldr	r3, [pc, #196]	; (801abac <nk_add_value+0xec>)
 801aae8:	4a2e      	ldr	r2, [pc, #184]	; (801aba4 <nk_add_value+0xe4>)
 801aaea:	213c      	movs	r1, #60	; 0x3c
 801aaec:	482e      	ldr	r0, [pc, #184]	; (801aba8 <nk_add_value+0xe8>)
 801aaee:	f002 ff3f 	bl	801d970 <__assert_func>
    if (!win || !ctx) return 0;
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d002      	beq.n	801aafe <nk_add_value+0x3e>
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d101      	bne.n	801ab02 <nk_add_value+0x42>
 801aafe:	2300      	movs	r3, #0
 801ab00:	e04a      	b.n	801ab98 <nk_add_value+0xd8>
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d005      	beq.n	801ab18 <nk_add_value+0x58>
 801ab0c:	68bb      	ldr	r3, [r7, #8]
 801ab0e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801ab12:	685b      	ldr	r3, [r3, #4]
 801ab14:	2b32      	cmp	r3, #50	; 0x32
 801ab16:	d915      	bls.n	801ab44 <nk_add_value+0x84>
        struct nk_table *tbl = nk_create_table(ctx);
 801ab18:	68f8      	ldr	r0, [r7, #12]
 801ab1a:	f7ff ff2f 	bl	801a97c <nk_create_table>
 801ab1e:	6178      	str	r0, [r7, #20]
        NK_ASSERT(tbl);
 801ab20:	697b      	ldr	r3, [r7, #20]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d105      	bne.n	801ab32 <nk_add_value+0x72>
 801ab26:	4b22      	ldr	r3, [pc, #136]	; (801abb0 <nk_add_value+0xf0>)
 801ab28:	4a1e      	ldr	r2, [pc, #120]	; (801aba4 <nk_add_value+0xe4>)
 801ab2a:	2140      	movs	r1, #64	; 0x40
 801ab2c:	481e      	ldr	r0, [pc, #120]	; (801aba8 <nk_add_value+0xe8>)
 801ab2e:	f002 ff1f 	bl	801d970 <__assert_func>
        if (!tbl) return 0;
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d101      	bne.n	801ab3c <nk_add_value+0x7c>
 801ab38:	2300      	movs	r3, #0
 801ab3a:	e02d      	b.n	801ab98 <nk_add_value+0xd8>
        nk_push_table(win, tbl);
 801ab3c:	6979      	ldr	r1, [r7, #20]
 801ab3e:	68b8      	ldr	r0, [r7, #8]
 801ab40:	f7ff ff44 	bl	801a9cc <nk_push_table>
    }
    win->tables->seq = win->seq;
 801ab44:	68bb      	ldr	r3, [r7, #8]
 801ab46:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801ab4a:	68ba      	ldr	r2, [r7, #8]
 801ab4c:	6812      	ldr	r2, [r2, #0]
 801ab4e:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 801ab50:	68bb      	ldr	r3, [r7, #8]
 801ab52:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801ab56:	68ba      	ldr	r2, [r7, #8]
 801ab58:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 801ab5c:	6852      	ldr	r2, [r2, #4]
 801ab5e:	3202      	adds	r2, #2
 801ab60:	6879      	ldr	r1, [r7, #4]
 801ab62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    win->tables->values[win->tables->size] = value;
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801ab6c:	68bb      	ldr	r3, [r7, #8]
 801ab6e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801ab72:	685b      	ldr	r3, [r3, #4]
 801ab74:	3334      	adds	r3, #52	; 0x34
 801ab76:	009b      	lsls	r3, r3, #2
 801ab78:	4413      	add	r3, r2
 801ab7a:	683a      	ldr	r2, [r7, #0]
 801ab7c:	605a      	str	r2, [r3, #4]
    return &win->tables->values[win->tables->size++];
 801ab7e:	68bb      	ldr	r3, [r7, #8]
 801ab80:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 801ab84:	68bb      	ldr	r3, [r7, #8]
 801ab86:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801ab8a:	6853      	ldr	r3, [r2, #4]
 801ab8c:	1c58      	adds	r0, r3, #1
 801ab8e:	6050      	str	r0, [r2, #4]
 801ab90:	3334      	adds	r3, #52	; 0x34
 801ab92:	009b      	lsls	r3, r3, #2
 801ab94:	440b      	add	r3, r1
 801ab96:	3304      	adds	r3, #4
}
 801ab98:	4618      	mov	r0, r3
 801ab9a:	3718      	adds	r7, #24
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	08021ec4 	.word	0x08021ec4
 801aba4:	08023668 	.word	0x08023668
 801aba8:	08021ec8 	.word	0x08021ec8
 801abac:	08021ee4 	.word	0x08021ee4
 801abb0:	08021ee8 	.word	0x08021ee8

0801abb4 <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 801abb4:	b480      	push	{r7}
 801abb6:	b087      	sub	sp, #28
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
    struct nk_table *iter = win->tables;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801abc4:	617b      	str	r3, [r7, #20]
    while (iter) {
 801abc6:	e027      	b.n	801ac18 <nk_find_value+0x64>
        unsigned int i = 0;
 801abc8:	2300      	movs	r3, #0
 801abca:	613b      	str	r3, [r7, #16]
        unsigned int size = iter->size;
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < size; ++i) {
 801abd2:	2300      	movs	r3, #0
 801abd4:	613b      	str	r3, [r7, #16]
 801abd6:	e015      	b.n	801ac04 <nk_find_value+0x50>
            if (iter->keys[i] == name) {
 801abd8:	697b      	ldr	r3, [r7, #20]
 801abda:	693a      	ldr	r2, [r7, #16]
 801abdc:	3202      	adds	r2, #2
 801abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abe2:	683a      	ldr	r2, [r7, #0]
 801abe4:	429a      	cmp	r2, r3
 801abe6:	d10a      	bne.n	801abfe <nk_find_value+0x4a>
                iter->seq = win->seq;
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	681a      	ldr	r2, [r3, #0]
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	601a      	str	r2, [r3, #0]
                return &iter->values[i];
 801abf0:	693b      	ldr	r3, [r7, #16]
 801abf2:	3334      	adds	r3, #52	; 0x34
 801abf4:	009b      	lsls	r3, r3, #2
 801abf6:	697a      	ldr	r2, [r7, #20]
 801abf8:	4413      	add	r3, r2
 801abfa:	3304      	adds	r3, #4
 801abfc:	e010      	b.n	801ac20 <nk_find_value+0x6c>
        for (i = 0; i < size; ++i) {
 801abfe:	693b      	ldr	r3, [r7, #16]
 801ac00:	3301      	adds	r3, #1
 801ac02:	613b      	str	r3, [r7, #16]
 801ac04:	693a      	ldr	r2, [r7, #16]
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	429a      	cmp	r2, r3
 801ac0a:	d3e5      	bcc.n	801abd8 <nk_find_value+0x24>
            }
        } size = NK_VALUE_PAGE_CAPACITY;
 801ac0c:	2333      	movs	r3, #51	; 0x33
 801ac0e:	60fb      	str	r3, [r7, #12]
        iter = iter->next;
 801ac10:	697b      	ldr	r3, [r7, #20]
 801ac12:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801ac16:	617b      	str	r3, [r7, #20]
    while (iter) {
 801ac18:	697b      	ldr	r3, [r7, #20]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d1d4      	bne.n	801abc8 <nk_find_value+0x14>
    }
    return 0;
 801ac1e:	2300      	movs	r3, #0
}
 801ac20:	4618      	mov	r0, r3
 801ac22:	371c      	adds	r7, #28
 801ac24:	46bd      	mov	sp, r7
 801ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac2a:	4770      	bx	lr

0801ac2c <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b090      	sub	sp, #64	; 0x40
 801ac30:	af02      	add	r7, sp, #8
 801ac32:	61f8      	str	r0, [r7, #28]
 801ac34:	eeb0 6a40 	vmov.f32	s12, s0
 801ac38:	eef0 6a60 	vmov.f32	s13, s1
 801ac3c:	eeb0 7a41 	vmov.f32	s14, s2
 801ac40:	eef0 7a61 	vmov.f32	s15, s3
 801ac44:	60b9      	str	r1, [r7, #8]
 801ac46:	607a      	str	r2, [r7, #4]
 801ac48:	603b      	str	r3, [r7, #0]
 801ac4a:	ed87 6a03 	vstr	s12, [r7, #12]
 801ac4e:	edc7 6a04 	vstr	s13, [r7, #16]
 801ac52:	ed87 7a05 	vstr	s14, [r7, #20]
 801ac56:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 801ac5a:	69fb      	ldr	r3, [r7, #28]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d105      	bne.n	801ac6c <nk_widget_text+0x40>
 801ac60:	4bb0      	ldr	r3, [pc, #704]	; (801af24 <nk_widget_text+0x2f8>)
 801ac62:	4ab1      	ldr	r2, [pc, #708]	; (801af28 <nk_widget_text+0x2fc>)
 801ac64:	2111      	movs	r1, #17
 801ac66:	48b1      	ldr	r0, [pc, #708]	; (801af2c <nk_widget_text+0x300>)
 801ac68:	f002 fe82 	bl	801d970 <__assert_func>
    NK_ASSERT(t);
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d105      	bne.n	801ac7e <nk_widget_text+0x52>
 801ac72:	4baf      	ldr	r3, [pc, #700]	; (801af30 <nk_widget_text+0x304>)
 801ac74:	4aac      	ldr	r2, [pc, #688]	; (801af28 <nk_widget_text+0x2fc>)
 801ac76:	2112      	movs	r1, #18
 801ac78:	48ac      	ldr	r0, [pc, #688]	; (801af2c <nk_widget_text+0x300>)
 801ac7a:	f002 fe79 	bl	801d970 <__assert_func>
    if (!o || !t) return;
 801ac7e:	69fb      	ldr	r3, [r7, #28]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	f000 81f4 	beq.w	801b06e <nk_widget_text+0x442>
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	f000 81f0 	beq.w	801b06e <nk_widget_text+0x442>

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 801ac8e:	ed97 7a06 	vldr	s14, [r7, #24]
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	edd3 7a01 	vldr	s15, [r3, #4]
 801ac98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ac9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aca4:	d505      	bpl.n	801acb2 <nk_widget_text+0x86>
 801aca6:	683b      	ldr	r3, [r7, #0]
 801aca8:	edd3 7a01 	vldr	s15, [r3, #4]
 801acac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801acb0:	e001      	b.n	801acb6 <nk_widget_text+0x8a>
 801acb2:	edd7 7a06 	vldr	s15, [r7, #24]
 801acb6:	edc7 7a06 	vstr	s15, [r7, #24]
    label.x = 0; label.w = 0;
 801acba:	f04f 0300 	mov.w	r3, #0
 801acbe:	627b      	str	r3, [r7, #36]	; 0x24
 801acc0:	f04f 0300 	mov.w	r3, #0
 801acc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    label.y = b.y + t->padding.y;
 801acc6:	ed97 7a04 	vldr	s14, [r7, #16]
 801acca:	683b      	ldr	r3, [r7, #0]
 801accc:	edd3 7a01 	vldr	s15, [r3, #4]
 801acd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801acd4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 801acd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801acda:	ed93 7a01 	vldr	s14, [r3, #4]
 801acde:	edd7 6a06 	vldr	s13, [r7, #24]
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	edd3 7a01 	vldr	s15, [r3, #4]
 801ace8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801acec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801acf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801acf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acf8:	d503      	bpl.n	801ad02 <nk_widget_text+0xd6>
 801acfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801acfc:	edd3 7a01 	vldr	s15, [r3, #4]
 801ad00:	e008      	b.n	801ad14 <nk_widget_text+0xe8>
 801ad02:	ed97 7a06 	vldr	s14, [r7, #24]
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	edd3 7a01 	vldr	s15, [r3, #4]
 801ad0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ad10:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 801ad18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ad1a:	689b      	ldr	r3, [r3, #8]
 801ad1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ad1e:	edd2 7a01 	vldr	s15, [r2, #4]
 801ad22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ad24:	687a      	ldr	r2, [r7, #4]
 801ad26:	68b9      	ldr	r1, [r7, #8]
 801ad28:	eeb0 0a67 	vmov.f32	s0, s15
 801ad2c:	6800      	ldr	r0, [r0, #0]
 801ad2e:	4798      	blx	r3
 801ad30:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    text_width += (2.0f * t->padding.x);
 801ad34:	683b      	ldr	r3, [r7, #0]
 801ad36:	edd3 7a00 	vldr	s15, [r3]
 801ad3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ad3e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801ad42:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ad46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 801ad4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ad4c:	f003 0301 	and.w	r3, r3, #1
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d025      	beq.n	801ada0 <nk_widget_text+0x174>
        label.x = b.x + t->padding.x;
 801ad54:	ed97 7a03 	vldr	s14, [r7, #12]
 801ad58:	683b      	ldr	r3, [r7, #0]
 801ad5a:	edd3 7a00 	vldr	s15, [r3]
 801ad5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ad62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 801ad66:	ed97 7a05 	vldr	s14, [r7, #20]
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	edd3 7a00 	vldr	s15, [r3]
 801ad70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ad74:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ad7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad80:	dd09      	ble.n	801ad96 <nk_widget_text+0x16a>
 801ad82:	ed97 7a05 	vldr	s14, [r7, #20]
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	edd3 7a00 	vldr	s15, [r3]
 801ad8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ad90:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ad94:	e001      	b.n	801ad9a <nk_widget_text+0x16e>
 801ad96:	eddf 7a67 	vldr	s15, [pc, #412]	; 801af34 <nk_widget_text+0x308>
 801ad9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801ad9e:	e0df      	b.n	801af60 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 801ada0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ada2:	f003 0302 	and.w	r3, r3, #2
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	f000 8086 	beq.w	801aeb8 <nk_widget_text+0x28c>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 801adac:	683b      	ldr	r3, [r7, #0]
 801adae:	edd3 7a00 	vldr	s15, [r3]
 801adb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801adb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801adba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801adbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801adc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801adc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adca:	dd09      	ble.n	801ade0 <nk_widget_text+0x1b4>
 801adcc:	683b      	ldr	r3, [r7, #0]
 801adce:	edd3 7a00 	vldr	s15, [r3]
 801add2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801add6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801adda:	ee77 7a27 	vadd.f32	s15, s14, s15
 801adde:	e001      	b.n	801ade4 <nk_widget_text+0x1b8>
 801ade0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ade4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 801ade8:	ed97 7a03 	vldr	s14, [r7, #12]
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	edd3 7a00 	vldr	s15, [r3]
 801adf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801adf6:	edd7 6a05 	vldr	s13, [r7, #20]
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	edd3 7a00 	vldr	s15, [r3]
 801ae00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ae04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801ae08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801ae0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801ae10:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801ae14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801ae18:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ae1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 801ae20:	ed97 7a03 	vldr	s14, [r7, #12]
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	edd3 7a00 	vldr	s15, [r3]
 801ae2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ae2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ae32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae3a:	d502      	bpl.n	801ae42 <nk_widget_text+0x216>
 801ae3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ae40:	e006      	b.n	801ae50 <nk_widget_text+0x224>
 801ae42:	ed97 7a03 	vldr	s14, [r7, #12]
 801ae46:	683b      	ldr	r3, [r7, #0]
 801ae48:	edd3 7a00 	vldr	s15, [r3]
 801ae4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ae50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 801ae54:	ed97 7a03 	vldr	s14, [r7, #12]
 801ae58:	edd7 7a05 	vldr	s15, [r7, #20]
 801ae5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ae60:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801ae64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801ae68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ae6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae74:	d506      	bpl.n	801ae84 <nk_widget_text+0x258>
 801ae76:	ed97 7a03 	vldr	s14, [r7, #12]
 801ae7a:	edd7 7a05 	vldr	s15, [r7, #20]
 801ae7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ae82:	e005      	b.n	801ae90 <nk_widget_text+0x264>
 801ae84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801ae88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801ae8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ae90:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if (label.w >= label.x) label.w -= label.x;
 801ae94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801ae98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ae9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea4:	db5c      	blt.n	801af60 <nk_widget_text+0x334>
 801aea6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801aeaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801aeae:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aeb2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801aeb6:	e053      	b.n	801af60 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 801aeb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aeba:	f003 0304 	and.w	r3, r3, #4
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	f000 80d7 	beq.w	801b072 <nk_widget_text+0x446>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 801aec4:	ed97 7a03 	vldr	s14, [r7, #12]
 801aec8:	683b      	ldr	r3, [r7, #0]
 801aeca:	edd3 7a00 	vldr	s15, [r3]
 801aece:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aed2:	edd7 6a03 	vldr	s13, [r7, #12]
 801aed6:	edd7 7a05 	vldr	s15, [r7, #20]
 801aeda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	edd3 7a00 	vldr	s15, [r3]
 801aee4:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801aee8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801aeec:	ee76 7a27 	vadd.f32	s15, s12, s15
 801aef0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801aef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aefc:	d51c      	bpl.n	801af38 <nk_widget_text+0x30c>
 801aefe:	ed97 7a03 	vldr	s14, [r7, #12]
 801af02:	edd7 7a05 	vldr	s15, [r7, #20]
 801af06:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	edd3 7a00 	vldr	s15, [r3]
 801af10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801af14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801af18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801af1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801af20:	e011      	b.n	801af46 <nk_widget_text+0x31a>
 801af22:	bf00      	nop
 801af24:	08021eec 	.word	0x08021eec
 801af28:	08023678 	.word	0x08023678
 801af2c:	08021ef0 	.word	0x08021ef0
 801af30:	08021f0c 	.word	0x08021f0c
 801af34:	00000000 	.word	0x00000000
 801af38:	ed97 7a03 	vldr	s14, [r7, #12]
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	edd3 7a00 	vldr	s15, [r3]
 801af42:	ee77 7a27 	vadd.f32	s15, s14, s15
 801af46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = (float)text_width + 2 * t->padding.x;
 801af4a:	683b      	ldr	r3, [r7, #0]
 801af4c:	edd3 7a00 	vldr	s15, [r3]
 801af50:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801af54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801af58:	ee77 7a27 	vadd.f32	s15, s14, s15
 801af5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 801af60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af62:	f003 0310 	and.w	r3, r3, #16
 801af66:	2b00      	cmp	r3, #0
 801af68:	d04f      	beq.n	801b00a <nk_widget_text+0x3de>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 801af6a:	ed97 7a04 	vldr	s14, [r7, #16]
 801af6e:	edd7 6a06 	vldr	s13, [r7, #24]
 801af72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801af76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801af7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af80:	edd3 6a01 	vldr	s13, [r3, #4]
 801af84:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801af88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801af8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801af90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 801af94:	edd7 7a06 	vldr	s15, [r7, #24]
 801af98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801af9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801afa0:	edd7 6a06 	vldr	s13, [r7, #24]
 801afa4:	edd7 7a06 	vldr	s15, [r7, #24]
 801afa8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801afac:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801afb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afb2:	edd3 5a01 	vldr	s11, [r3, #4]
 801afb6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801afba:	eec5 7a85 	vdiv.f32	s15, s11, s10
 801afbe:	ee76 7a27 	vadd.f32	s15, s12, s15
 801afc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801afc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801afca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afce:	d513      	bpl.n	801aff8 <nk_widget_text+0x3cc>
 801afd0:	ed97 7a06 	vldr	s14, [r7, #24]
 801afd4:	edd7 7a06 	vldr	s15, [r7, #24]
 801afd8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801afdc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801afe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801afe2:	ed93 6a01 	vldr	s12, [r3, #4]
 801afe6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801afea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801afee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801aff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aff6:	e005      	b.n	801b004 <nk_widget_text+0x3d8>
 801aff8:	ed97 7a06 	vldr	s14, [r7, #24]
 801affc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801b004:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801b008:	e014      	b.n	801b034 <nk_widget_text+0x408>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 801b00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b00c:	f003 0320 	and.w	r3, r3, #32
 801b010:	2b00      	cmp	r3, #0
 801b012:	d00f      	beq.n	801b034 <nk_widget_text+0x408>
        label.y = b.y + b.h - f->height;
 801b014:	ed97 7a04 	vldr	s14, [r7, #16]
 801b018:	edd7 7a06 	vldr	s15, [r7, #24]
 801b01c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b022:	edd3 7a01 	vldr	s15, [r3, #4]
 801b026:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b02a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = f->height;
 801b02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b030:	685b      	ldr	r3, [r3, #4]
 801b032:	633b      	str	r3, [r7, #48]	; 0x30
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 801b034:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801b038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 801b03c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801b040:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	68db      	ldr	r3, [r3, #12]
 801b048:	9301      	str	r3, [sp, #4]
 801b04a:	683b      	ldr	r3, [r7, #0]
 801b04c:	689b      	ldr	r3, [r3, #8]
 801b04e:	9300      	str	r3, [sp, #0]
 801b050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	68b9      	ldr	r1, [r7, #8]
 801b056:	eeb0 0a46 	vmov.f32	s0, s12
 801b05a:	eef0 0a66 	vmov.f32	s1, s13
 801b05e:	eeb0 1a47 	vmov.f32	s2, s14
 801b062:	eef0 1a67 	vmov.f32	s3, s15
 801b066:	69f8      	ldr	r0, [r7, #28]
 801b068:	f7f6 fe4a 	bl	8011d00 <nk_draw_text>
 801b06c:	e002      	b.n	801b074 <nk_widget_text+0x448>
    if (!o || !t) return;
 801b06e:	bf00      	nop
 801b070:	e000      	b.n	801b074 <nk_widget_text+0x448>
    } else return;
 801b072:	bf00      	nop
}
 801b074:	3738      	adds	r7, #56	; 0x38
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop

0801b07c <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b092      	sub	sp, #72	; 0x48
 801b080:	af02      	add	r7, sp, #8
 801b082:	60f8      	str	r0, [r7, #12]
 801b084:	60b9      	str	r1, [r7, #8]
 801b086:	607a      	str	r2, [r7, #4]
 801b088:	603b      	str	r3, [r7, #0]

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d105      	bne.n	801b09c <nk_text_colored+0x20>
 801b090:	4b3e      	ldr	r3, [pc, #248]	; (801b18c <nk_text_colored+0x110>)
 801b092:	4a3f      	ldr	r2, [pc, #252]	; (801b190 <nk_text_colored+0x114>)
 801b094:	2168      	movs	r1, #104	; 0x68
 801b096:	483f      	ldr	r0, [pc, #252]	; (801b194 <nk_text_colored+0x118>)
 801b098:	f002 fc6a 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801b09c:	68fb      	ldr	r3, [r7, #12]
 801b09e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b0a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d105      	bne.n	801b0b6 <nk_text_colored+0x3a>
 801b0aa:	4b3b      	ldr	r3, [pc, #236]	; (801b198 <nk_text_colored+0x11c>)
 801b0ac:	4a38      	ldr	r2, [pc, #224]	; (801b190 <nk_text_colored+0x114>)
 801b0ae:	2169      	movs	r1, #105	; 0x69
 801b0b0:	4838      	ldr	r0, [pc, #224]	; (801b194 <nk_text_colored+0x118>)
 801b0b2:	f002 fc5d 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b0bc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d105      	bne.n	801b0d4 <nk_text_colored+0x58>
 801b0c8:	4b34      	ldr	r3, [pc, #208]	; (801b19c <nk_text_colored+0x120>)
 801b0ca:	4a31      	ldr	r2, [pc, #196]	; (801b190 <nk_text_colored+0x114>)
 801b0cc:	216a      	movs	r1, #106	; 0x6a
 801b0ce:	4831      	ldr	r0, [pc, #196]	; (801b194 <nk_text_colored+0x118>)
 801b0d0:	f002 fc4e 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d053      	beq.n	801b182 <nk_text_colored+0x106>
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b0e0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d04c      	beq.n	801b182 <nk_text_colored+0x106>
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b0ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b0f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d043      	beq.n	801b182 <nk_text_colored+0x106>

    win = ctx->current;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b100:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b104:	63fb      	str	r3, [r7, #60]	; 0x3c
    style = &ctx->style;
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801b10c:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_panel_alloc_space(&bounds, ctx);
 801b10e:	f107 0320 	add.w	r3, r7, #32
 801b112:	68f9      	ldr	r1, [r7, #12]
 801b114:	4618      	mov	r0, r3
 801b116:	f7f8 fa41 	bl	801359c <nk_panel_alloc_space>
    item_padding = style->text.padding;
 801b11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b11c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b120:	3230      	adds	r2, #48	; 0x30
 801b122:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b126:	e883 0003 	stmia.w	r3, {r0, r1}

    text.padding.x = item_padding.x;
 801b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b12c:	613b      	str	r3, [r7, #16]
    text.padding.y = item_padding.y;
 801b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b130:	617b      	str	r3, [r7, #20]
    text.background = style->window.background;
 801b132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b138:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801b13c:	61bb      	str	r3, [r7, #24]
    text.text = color;
 801b13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b140:	61fb      	str	r3, [r7, #28]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 801b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b144:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	f107 0210 	add.w	r2, r7, #16
 801b150:	ed97 6a08 	vldr	s12, [r7, #32]
 801b154:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801b158:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801b15c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b160:	9301      	str	r3, [sp, #4]
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	9300      	str	r3, [sp, #0]
 801b166:	4613      	mov	r3, r2
 801b168:	687a      	ldr	r2, [r7, #4]
 801b16a:	68b9      	ldr	r1, [r7, #8]
 801b16c:	eeb0 0a46 	vmov.f32	s0, s12
 801b170:	eef0 0a66 	vmov.f32	s1, s13
 801b174:	eeb0 1a47 	vmov.f32	s2, s14
 801b178:	eef0 1a67 	vmov.f32	s3, s15
 801b17c:	f7ff fd56 	bl	801ac2c <nk_widget_text>
 801b180:	e000      	b.n	801b184 <nk_text_colored+0x108>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801b182:	bf00      	nop
}
 801b184:	3740      	adds	r7, #64	; 0x40
 801b186:	46bd      	mov	sp, r7
 801b188:	bd80      	pop	{r7, pc}
 801b18a:	bf00      	nop
 801b18c:	08021f10 	.word	0x08021f10
 801b190:	08023688 	.word	0x08023688
 801b194:	08021ef0 	.word	0x08021ef0
 801b198:	08021f14 	.word	0x08021f14
 801b19c:	08021f24 	.word	0x08021f24

0801b1a0 <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b086      	sub	sp, #24
 801b1a4:	af02      	add	r7, sp, #8
 801b1a6:	60f8      	str	r0, [r7, #12]
 801b1a8:	60b9      	str	r1, [r7, #8]
 801b1aa:	607a      	str	r2, [r7, #4]
 801b1ac:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d106      	bne.n	801b1c2 <nk_text+0x22>
 801b1b4:	4b0c      	ldr	r3, [pc, #48]	; (801b1e8 <nk_text+0x48>)
 801b1b6:	4a0d      	ldr	r2, [pc, #52]	; (801b1ec <nk_text+0x4c>)
 801b1b8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801b1bc:	480c      	ldr	r0, [pc, #48]	; (801b1f0 <nk_text+0x50>)
 801b1be:	f002 fbd7 	bl	801d970 <__assert_func>
    if (!ctx) return;
 801b1c2:	68fb      	ldr	r3, [r7, #12]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d00a      	beq.n	801b1de <nk_text+0x3e>
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801b1ce:	9300      	str	r3, [sp, #0]
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	687a      	ldr	r2, [r7, #4]
 801b1d4:	68b9      	ldr	r1, [r7, #8]
 801b1d6:	68f8      	ldr	r0, [r7, #12]
 801b1d8:	f7ff ff50 	bl	801b07c <nk_text_colored>
 801b1dc:	e000      	b.n	801b1e0 <nk_text+0x40>
    if (!ctx) return;
 801b1de:	bf00      	nop
}
 801b1e0:	3710      	adds	r7, #16
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
 801b1e6:	bf00      	nop
 801b1e8:	08021f10 	.word	0x08021f10
 801b1ec:	08023698 	.word	0x08023698
 801b1f0:	08021ef0 	.word	0x08021ef0

0801b1f4 <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b084      	sub	sp, #16
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	60f8      	str	r0, [r7, #12]
 801b1fc:	60b9      	str	r1, [r7, #8]
 801b1fe:	607a      	str	r2, [r7, #4]
    nk_text(ctx, str, nk_strlen(str), alignment);
 801b200:	68b8      	ldr	r0, [r7, #8]
 801b202:	f000 feeb 	bl	801bfdc <nk_strlen>
 801b206:	4602      	mov	r2, r0
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	68b9      	ldr	r1, [r7, #8]
 801b20c:	68f8      	ldr	r0, [r7, #12]
 801b20e:	f7ff ffc7 	bl	801b1a0 <nk_text>
}
 801b212:	bf00      	nop
 801b214:	3710      	adds	r7, #16
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
	...

0801b21c <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b0aa      	sub	sp, #168	; 0xa8
 801b220:	af04      	add	r7, sp, #16
 801b222:	60f8      	str	r0, [r7, #12]
 801b224:	607a      	str	r2, [r7, #4]
 801b226:	603b      	str	r3, [r7, #0]
 801b228:	460b      	mov	r3, r1
 801b22a:	72fb      	strb	r3, [r7, #11]
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 801b22c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b230:	2200      	movs	r2, #0
 801b232:	601a      	str	r2, [r3, #0]
 801b234:	605a      	str	r2, [r3, #4]
 801b236:	609a      	str	r2, [r3, #8]
 801b238:	60da      	str	r2, [r3, #12]
    struct nk_rect sym = {0,0,0,0};
 801b23a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b23e:	2200      	movs	r2, #0
 801b240:	601a      	str	r2, [r3, #0]
 801b242:	605a      	str	r2, [r3, #4]
 801b244:	609a      	str	r2, [r3, #8]
 801b246:	60da      	str	r2, [r3, #12]
    struct nk_text text;

    nk_flags ws = 0;
 801b248:	2300      	movs	r3, #0
 801b24a:	627b      	str	r3, [r7, #36]	; 0x24
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d105      	bne.n	801b25e <nk_tree_state_base+0x42>
 801b252:	4bcd      	ldr	r3, [pc, #820]	; (801b588 <nk_tree_state_base+0x36c>)
 801b254:	4acd      	ldr	r2, [pc, #820]	; (801b58c <nk_tree_state_base+0x370>)
 801b256:	211e      	movs	r1, #30
 801b258:	48cd      	ldr	r0, [pc, #820]	; (801b590 <nk_tree_state_base+0x374>)
 801b25a:	f002 fb89 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b264:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d105      	bne.n	801b278 <nk_tree_state_base+0x5c>
 801b26c:	4bc9      	ldr	r3, [pc, #804]	; (801b594 <nk_tree_state_base+0x378>)
 801b26e:	4ac7      	ldr	r2, [pc, #796]	; (801b58c <nk_tree_state_base+0x370>)
 801b270:	211f      	movs	r1, #31
 801b272:	48c7      	ldr	r0, [pc, #796]	; (801b590 <nk_tree_state_base+0x374>)
 801b274:	f002 fb7c 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b27e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b286:	2b00      	cmp	r3, #0
 801b288:	d105      	bne.n	801b296 <nk_tree_state_base+0x7a>
 801b28a:	4bc3      	ldr	r3, [pc, #780]	; (801b598 <nk_tree_state_base+0x37c>)
 801b28c:	4abf      	ldr	r2, [pc, #764]	; (801b58c <nk_tree_state_base+0x370>)
 801b28e:	2120      	movs	r1, #32
 801b290:	48bf      	ldr	r0, [pc, #764]	; (801b590 <nk_tree_state_base+0x374>)
 801b292:	f002 fb6d 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d00f      	beq.n	801b2bc <nk_tree_state_base+0xa0>
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b2a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d008      	beq.n	801b2bc <nk_tree_state_base+0xa0>
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b2b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d101      	bne.n	801b2c0 <nk_tree_state_base+0xa4>
        return 0;
 801b2bc:	2300      	movs	r3, #0
 801b2be:	e2ee      	b.n	801b89e <nk_tree_state_base+0x682>

    /* cache some data */
    win = ctx->current;
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b2c6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b2ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    layout = win->layout;
 801b2ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    out = &win->buffer;
 801b2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b2de:	3364      	adds	r3, #100	; 0x64
 801b2e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    style = &ctx->style;
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801b2ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    item_spacing = style->window.spacing;
 801b2ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2f6:	461a      	mov	r2, r3
 801b2f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2fc:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801b300:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b304:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate header bounds and draw background */
    row_height = style->font->height + 2 * style->tab.padding.y;
 801b308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	ed93 7a01 	vldr	s14, [r3, #4]
 801b312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b31a:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801b31e:	edd3 7a00 	vldr	s15, [r3]
 801b322:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b326:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b32a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    nk_layout_set_min_row_height(ctx, row_height);
 801b32e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801b332:	68f8      	ldr	r0, [r7, #12]
 801b334:	f7f7 f9b8 	bl	80126a8 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 801b338:	2101      	movs	r1, #1
 801b33a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801b33e:	68f8      	ldr	r0, [r7, #12]
 801b340:	f7f7 fc5c 	bl	8012bfc <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 801b344:	68f8      	ldr	r0, [r7, #12]
 801b346:	f7f7 fa09 	bl	801275c <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 801b34a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b34e:	68f9      	ldr	r1, [r7, #12]
 801b350:	4618      	mov	r0, r3
 801b352:	f001 f835 	bl	801c3c0 <nk_widget>
 801b356:	4603      	mov	r3, r0
 801b358:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    if (type == NK_TREE_TAB) {
 801b35c:	7afb      	ldrb	r3, [r7, #11]
 801b35e:	2b01      	cmp	r3, #1
 801b360:	f040 80af 	bne.w	801b4c2 <nk_tree_state_base+0x2a6>
        const struct nk_style_item *background = &style->tab.background;
 801b364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b368:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801b36c:	331c      	adds	r3, #28
 801b36e:	677b      	str	r3, [r7, #116]	; 0x74

        switch(background->type) {
 801b370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b372:	781b      	ldrb	r3, [r3, #0]
 801b374:	2b02      	cmp	r3, #2
 801b376:	d021      	beq.n	801b3bc <nk_tree_state_base+0x1a0>
 801b378:	2b02      	cmp	r3, #2
 801b37a:	f300 80a9 	bgt.w	801b4d0 <nk_tree_state_base+0x2b4>
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d036      	beq.n	801b3f0 <nk_tree_state_base+0x1d4>
 801b382:	2b01      	cmp	r3, #1
 801b384:	f040 80a4 	bne.w	801b4d0 <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, header, &background->data.image, nk_white);
 801b388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b38a:	3304      	adds	r3, #4
 801b38c:	4a83      	ldr	r2, [pc, #524]	; (801b59c <nk_tree_state_base+0x380>)
 801b38e:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b392:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b396:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b39a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b39e:	6812      	ldr	r2, [r2, #0]
 801b3a0:	4619      	mov	r1, r3
 801b3a2:	eeb0 0a46 	vmov.f32	s0, s12
 801b3a6:	eef0 0a66 	vmov.f32	s1, s13
 801b3aa:	eeb0 1a47 	vmov.f32	s2, s14
 801b3ae:	eef0 1a67 	vmov.f32	s3, s15
 801b3b2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b3b6:	f7f5 ff87 	bl	80112c8 <nk_draw_image>
                break;
 801b3ba:	e089      	b.n	801b4d0 <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 801b3bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b3be:	3304      	adds	r3, #4
 801b3c0:	4a76      	ldr	r2, [pc, #472]	; (801b59c <nk_tree_state_base+0x380>)
 801b3c2:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b3c6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b3ca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b3ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b3d2:	6812      	ldr	r2, [r2, #0]
 801b3d4:	4619      	mov	r1, r3
 801b3d6:	eeb0 0a46 	vmov.f32	s0, s12
 801b3da:	eef0 0a66 	vmov.f32	s1, s13
 801b3de:	eeb0 1a47 	vmov.f32	s2, s14
 801b3e2:	eef0 1a67 	vmov.f32	s3, s15
 801b3e6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b3ea:	f7f6 f85f 	bl	80114ac <nk_draw_nine_slice>
                break;
 801b3ee:	e06f      	b.n	801b4d0 <nk_tree_state_base+0x2b4>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, header, 0, style->tab.border_color);
 801b3f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b3f8:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b3fc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b400:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b404:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b408:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 801b40c:	ed9f 2a64 	vldr	s4, [pc, #400]	; 801b5a0 <nk_tree_state_base+0x384>
 801b410:	eeb0 0a46 	vmov.f32	s0, s12
 801b414:	eef0 0a66 	vmov.f32	s1, s13
 801b418:	eeb0 1a47 	vmov.f32	s2, s14
 801b41c:	eef0 1a67 	vmov.f32	s3, s15
 801b420:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b424:	f7f5 fbf6 	bl	8010c14 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801b428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b430:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801b434:	edd3 5a00 	vldr	s11, [r3]
 801b438:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b43c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b440:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b444:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b448:	eeb0 2a65 	vmov.f32	s4, s11
 801b44c:	eeb0 0a46 	vmov.f32	s0, s12
 801b450:	eef0 0a66 	vmov.f32	s1, s13
 801b454:	eeb0 1a47 	vmov.f32	s2, s14
 801b458:	eef0 1a67 	vmov.f32	s3, s15
 801b45c:	f7f8 f968 	bl	8013730 <nk_shrink_rect>
 801b460:	eeb0 6a40 	vmov.f32	s12, s0
 801b464:	eef0 6a60 	vmov.f32	s13, s1
 801b468:	eeb0 7a41 	vmov.f32	s14, s2
 801b46c:	eef0 7a61 	vmov.f32	s15, s3
 801b470:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 801b474:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 801b478:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 801b47c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 801b480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b488:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801b48c:	edd3 5a00 	vldr	s11, [r3]
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 801b490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b492:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 801b496:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801b49a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801b49e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801b4a2:	6859      	ldr	r1, [r3, #4]
 801b4a4:	eeb0 2a65 	vmov.f32	s4, s11
 801b4a8:	eeb0 0a46 	vmov.f32	s0, s12
 801b4ac:	eef0 0a66 	vmov.f32	s1, s13
 801b4b0:	eeb0 1a47 	vmov.f32	s2, s14
 801b4b4:	eef0 1a67 	vmov.f32	s3, s15
 801b4b8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b4bc:	f7f5 fbaa 	bl	8010c14 <nk_fill_rect>
                break;
 801b4c0:	e006      	b.n	801b4d0 <nk_tree_state_base+0x2b4>
        }
    } else text.background = style->window.background;
 801b4c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4ca:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801b4ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 801b4d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b4d4:	685b      	ldr	r3, [r3, #4]
 801b4d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d101      	bne.n	801b4e2 <nk_tree_state_base+0x2c6>
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	e000      	b.n	801b4e4 <nk_tree_state_base+0x2c8>
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	673b      	str	r3, [r7, #112]	; 0x70
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 801b4e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d005      	beq.n	801b4f8 <nk_tree_state_base+0x2dc>
 801b4ec:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801b4f0:	2b01      	cmp	r3, #1
 801b4f2:	d101      	bne.n	801b4f8 <nk_tree_state_base+0x2dc>
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	e000      	b.n	801b4fa <nk_tree_state_base+0x2de>
 801b4f8:	2300      	movs	r3, #0
 801b4fa:	673b      	str	r3, [r7, #112]	; 0x70
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 801b4fc:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 801b500:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b504:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b508:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801b50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b510:	2200      	movs	r2, #0
 801b512:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801b514:	eeb0 0a46 	vmov.f32	s0, s12
 801b518:	eef0 0a66 	vmov.f32	s1, s13
 801b51c:	eeb0 1a47 	vmov.f32	s2, s14
 801b520:	eef0 1a67 	vmov.f32	s3, s15
 801b524:	4618      	mov	r0, r3
 801b526:	f7f2 fe4f 	bl	800e1c8 <nk_button_behavior>
 801b52a:	4603      	mov	r3, r0
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d00b      	beq.n	801b548 <nk_tree_state_base+0x32c>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 801b530:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	2b01      	cmp	r3, #1
 801b538:	bf14      	ite	ne
 801b53a:	2301      	movne	r3, #1
 801b53c:	2300      	moveq	r3, #0
 801b53e:	b2db      	uxtb	r3, r3
 801b540:	461a      	mov	r2, r3
 801b542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b546:	701a      	strb	r2, [r3, #0]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 801b548:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b54c:	781b      	ldrb	r3, [r3, #0]
 801b54e:	2b01      	cmp	r3, #1
 801b550:	d128      	bne.n	801b5a4 <nk_tree_state_base+0x388>
        symbol = style->tab.sym_maximize;
 801b552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b55a:	f893 3561 	ldrb.w	r3, [r3, #1377]	; 0x561
 801b55e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801b562:	7afb      	ldrb	r3, [r7, #11]
 801b564:	2b01      	cmp	r3, #1
 801b566:	d106      	bne.n	801b576 <nk_tree_state_base+0x35a>
            button = &style->tab.tab_maximize_button;
 801b568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b56c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 801b570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b574:	e030      	b.n	801b5d8 <nk_tree_state_base+0x3bc>
        else button = &style->tab.node_maximize_button;
 801b576:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b57a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 801b57e:	3310      	adds	r3, #16
 801b580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b584:	e028      	b.n	801b5d8 <nk_tree_state_base+0x3bc>
 801b586:	bf00      	nop
 801b588:	08021fa8 	.word	0x08021fa8
 801b58c:	080236a4 	.word	0x080236a4
 801b590:	08021fac 	.word	0x08021fac
 801b594:	08021fc8 	.word	0x08021fc8
 801b598:	08021fd8 	.word	0x08021fd8
 801b59c:	080236a0 	.word	0x080236a0
 801b5a0:	00000000 	.word	0x00000000
    } else {
        symbol = style->tab.sym_minimize;
 801b5a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b5a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b5ac:	f893 3560 	ldrb.w	r3, [r3, #1376]	; 0x560
 801b5b0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 801b5b4:	7afb      	ldrb	r3, [r7, #11]
 801b5b6:	2b01      	cmp	r3, #1
 801b5b8:	d107      	bne.n	801b5ca <nk_tree_state_base+0x3ae>
            button = &style->tab.tab_minimize_button;
 801b5ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b5be:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801b5c2:	3318      	adds	r3, #24
 801b5c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b5c8:	e006      	b.n	801b5d8 <nk_tree_state_base+0x3bc>
        else button = &style->tab.node_minimize_button;
 801b5ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b5ce:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801b5d2:	3308      	adds	r3, #8
 801b5d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 801b5d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	685b      	ldr	r3, [r3, #4]
 801b5e0:	647b      	str	r3, [r7, #68]	; 0x44
 801b5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b5e4:	643b      	str	r3, [r7, #64]	; 0x40
    sym.y = header.y + style->tab.padding.y;
 801b5e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801b5ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b5f2:	f203 5374 	addw	r3, r3, #1396	; 0x574
 801b5f6:	edd3 7a00 	vldr	s15, [r3]
 801b5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b5fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sym.x = header.x + style->tab.padding.x;
 801b602:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801b606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b60a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b60e:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 801b612:	edd3 7a00 	vldr	s15, [r3]
 801b616:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b61a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801b61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b622:	f103 0164 	add.w	r1, r3, #100	; 0x64
        button, 0, style->font);
 801b626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b62a:	681b      	ldr	r3, [r3, #0]
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 801b62c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 801b630:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801b634:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801b638:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801b63c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801b640:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b644:	9302      	str	r3, [sp, #8]
 801b646:	2300      	movs	r3, #0
 801b648:	9301      	str	r3, [sp, #4]
 801b64a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b64e:	9300      	str	r3, [sp, #0]
 801b650:	2300      	movs	r3, #0
 801b652:	eeb0 0a46 	vmov.f32	s0, s12
 801b656:	eef0 0a66 	vmov.f32	s1, s13
 801b65a:	eeb0 1a47 	vmov.f32	s2, s14
 801b65e:	eef0 1a67 	vmov.f32	s3, s15
 801b662:	f7f3 f943 	bl	800e8ec <nk_do_button_symbol>

    if (img) {
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d039      	beq.n	801b6e0 <nk_tree_state_base+0x4c4>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 801b66c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801b670:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801b674:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b678:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b67c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801b680:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b684:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b688:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_draw_image(&win->buffer, sym, img, nk_white);
 801b68c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b690:	3364      	adds	r3, #100	; 0x64
 801b692:	4a85      	ldr	r2, [pc, #532]	; (801b8a8 <nk_tree_state_base+0x68c>)
 801b694:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801b698:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801b69c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801b6a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801b6a4:	6812      	ldr	r2, [r2, #0]
 801b6a6:	6879      	ldr	r1, [r7, #4]
 801b6a8:	eeb0 0a46 	vmov.f32	s0, s12
 801b6ac:	eef0 0a66 	vmov.f32	s1, s13
 801b6b0:	eeb0 1a47 	vmov.f32	s2, s14
 801b6b4:	eef0 1a67 	vmov.f32	s3, s15
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f7f5 fe05 	bl	80112c8 <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 801b6be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	ed93 7a01 	vldr	s14, [r3, #4]
 801b6c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b6cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b6d0:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 801b6d4:	edd3 7a00 	vldr	s15, [r3]
 801b6d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b6dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 801b6e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b6e4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801b6e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b6ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b6f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f8:	d506      	bpl.n	801b708 <nk_tree_state_base+0x4ec>
 801b6fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801b6fe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b702:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b706:	e001      	b.n	801b70c <nk_tree_state_base+0x4f0>
 801b708:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801b70c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.x = sym.x + sym.w + item_spacing.x;
 801b710:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801b714:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801b718:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b71c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b720:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b724:	edc7 7a05 	vstr	s15, [r7, #20]
    label.y = sym.y;
 801b728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b72a:	61bb      	str	r3, [r7, #24]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 801b72c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b730:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801b734:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801b738:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801b73c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b744:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b748:	edd3 7a00 	vldr	s15, [r3]
 801b74c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b750:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b754:	edc7 7a07 	vstr	s15, [r7, #28]
    label.h = style->font->height;
 801b758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	685b      	ldr	r3, [r3, #4]
 801b760:	623b      	str	r3, [r7, #32]
    text.text = style->tab.text;
 801b762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b76a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 801b76e:	637b      	str	r3, [r7, #52]	; 0x34
    text.padding = nk_vec2(0,0);
 801b770:	eddf 0a4e 	vldr	s1, [pc, #312]	; 801b8ac <nk_tree_state_base+0x690>
 801b774:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801b8ac <nk_tree_state_base+0x690>
 801b778:	f7f8 f85a 	bl	8013830 <nk_vec2>
 801b77c:	eeb0 7a40 	vmov.f32	s14, s0
 801b780:	eef0 7a60 	vmov.f32	s15, s1
 801b784:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801b788:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801b78c:	6838      	ldr	r0, [r7, #0]
 801b78e:	f000 fc25 	bl	801bfdc <nk_strlen>
 801b792:	4601      	mov	r1, r0
        NK_TEXT_LEFT, style->font);}
 801b794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b798:	681b      	ldr	r3, [r3, #0]
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 801b79a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b79e:	ed97 6a05 	vldr	s12, [r7, #20]
 801b7a2:	edd7 6a06 	vldr	s13, [r7, #24]
 801b7a6:	ed97 7a07 	vldr	s14, [r7, #28]
 801b7aa:	edd7 7a08 	vldr	s15, [r7, #32]
 801b7ae:	9301      	str	r3, [sp, #4]
 801b7b0:	2311      	movs	r3, #17
 801b7b2:	9300      	str	r3, [sp, #0]
 801b7b4:	4613      	mov	r3, r2
 801b7b6:	460a      	mov	r2, r1
 801b7b8:	6839      	ldr	r1, [r7, #0]
 801b7ba:	eeb0 0a46 	vmov.f32	s0, s12
 801b7be:	eef0 0a66 	vmov.f32	s1, s13
 801b7c2:	eeb0 1a47 	vmov.f32	s2, s14
 801b7c6:	eef0 1a67 	vmov.f32	s3, s15
 801b7ca:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801b7ce:	f7ff fa2d 	bl	801ac2c <nk_widget_text>

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 801b7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b7d6:	781b      	ldrb	r3, [r3, #0]
 801b7d8:	2b01      	cmp	r3, #1
 801b7da:	d15f      	bne.n	801b89c <nk_tree_state_base+0x680>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 801b7dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801b7e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b7e4:	699b      	ldr	r3, [r3, #24]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	ee07 3a90 	vmov	s15, r3
 801b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b7f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b7f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b7fc:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b800:	edd3 7a00 	vldr	s15, [r3]
 801b804:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b80c:	edc3 7a08 	vstr	s15, [r3, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 801b810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b814:	ed93 7a04 	vldr	s14, [r3, #16]
 801b818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b81c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b820:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b824:	edd3 7a00 	vldr	s15, [r3]
 801b828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b830:	d507      	bpl.n	801b842 <nk_tree_state_base+0x626>
 801b832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b83a:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	e002      	b.n	801b848 <nk_tree_state_base+0x62c>
 801b842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b846:	691b      	ldr	r3, [r3, #16]
 801b848:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b84c:	6113      	str	r3, [r2, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 801b84e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b852:	ed93 7a04 	vldr	s14, [r3, #16]
 801b856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b85e:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 801b862:	edd3 6a00 	vldr	s13, [r3]
 801b866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b86e:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 801b872:	edd3 7a00 	vldr	s15, [r3]
 801b876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b87a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b87e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b882:	edc3 7a04 	vstr	s15, [r3, #16]
        layout->row.tree_depth++;
 801b886:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b88a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b88e:	1c5a      	adds	r2, r3, #1
 801b890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b894:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        return nk_true;
 801b898:	2301      	movs	r3, #1
 801b89a:	e000      	b.n	801b89e <nk_tree_state_base+0x682>
    } else return nk_false;
 801b89c:	2300      	movs	r3, #0
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3798      	adds	r7, #152	; 0x98
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}
 801b8a6:	bf00      	nop
 801b8a8:	080236a0 	.word	0x080236a0
 801b8ac:	00000000 	.word	0x00000000

0801b8b0 <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801b8b0:	b580      	push	{r7, lr}
 801b8b2:	b08a      	sub	sp, #40	; 0x28
 801b8b4:	af02      	add	r7, sp, #8
 801b8b6:	60f8      	str	r0, [r7, #12]
 801b8b8:	607a      	str	r2, [r7, #4]
 801b8ba:	603b      	str	r3, [r7, #0]
 801b8bc:	460b      	mov	r3, r1
 801b8be:	72fb      	strb	r3, [r7, #11]
    struct nk_window *win = ctx->current;
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b8c6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b8ca:	617b      	str	r3, [r7, #20]
    int title_len = 0;
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	613b      	str	r3, [r7, #16]
    nk_hash tree_hash = 0;
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	61fb      	str	r3, [r7, #28]
    nk_uint *state = 0;
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	61bb      	str	r3, [r7, #24]

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 801b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d10b      	bne.n	801b8f6 <nk_tree_base+0x46>
        title_len = (int)nk_strlen(title);
 801b8de:	6838      	ldr	r0, [r7, #0]
 801b8e0:	f000 fb7c 	bl	801bfdc <nk_strlen>
 801b8e4:	6138      	str	r0, [r7, #16]
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 801b8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8e8:	461a      	mov	r2, r3
 801b8ea:	6939      	ldr	r1, [r7, #16]
 801b8ec:	6838      	ldr	r0, [r7, #0]
 801b8ee:	f000 fbf5 	bl	801c0dc <nk_murmur_hash>
 801b8f2:	61f8      	str	r0, [r7, #28]
 801b8f4:	e006      	b.n	801b904 <nk_tree_base+0x54>
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 801b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8f8:	461a      	mov	r2, r3
 801b8fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b8fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b8fe:	f000 fbed 	bl	801c0dc <nk_murmur_hash>
 801b902:	61f8      	str	r0, [r7, #28]
    state = nk_find_value(win, tree_hash);
 801b904:	69f9      	ldr	r1, [r7, #28]
 801b906:	6978      	ldr	r0, [r7, #20]
 801b908:	f7ff f954 	bl	801abb4 <nk_find_value>
 801b90c:	61b8      	str	r0, [r7, #24]
    if (!state) {
 801b90e:	69bb      	ldr	r3, [r7, #24]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d10a      	bne.n	801b92a <nk_tree_base+0x7a>
        state = nk_add_value(ctx, win, tree_hash, 0);
 801b914:	2300      	movs	r3, #0
 801b916:	69fa      	ldr	r2, [r7, #28]
 801b918:	6979      	ldr	r1, [r7, #20]
 801b91a:	68f8      	ldr	r0, [r7, #12]
 801b91c:	f7ff f8d0 	bl	801aac0 <nk_add_value>
 801b920:	61b8      	str	r0, [r7, #24]
        *state = initial_state;
 801b922:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	601a      	str	r2, [r3, #0]
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 801b92a:	7af9      	ldrb	r1, [r7, #11]
 801b92c:	69bb      	ldr	r3, [r7, #24]
 801b92e:	9300      	str	r3, [sp, #0]
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	687a      	ldr	r2, [r7, #4]
 801b934:	68f8      	ldr	r0, [r7, #12]
 801b936:	f7ff fc71 	bl	801b21c <nk_tree_state_base>
 801b93a:	4603      	mov	r3, r0
}
 801b93c:	4618      	mov	r0, r3
 801b93e:	3720      	adds	r7, #32
 801b940:	46bd      	mov	sp, r7
 801b942:	bd80      	pop	{r7, pc}

0801b944 <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b084      	sub	sp, #16
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
    struct nk_window *win = 0;
 801b94c:	2300      	movs	r3, #0
 801b94e:	60fb      	str	r3, [r7, #12]
    struct nk_panel *layout = 0;
 801b950:	2300      	movs	r3, #0
 801b952:	60bb      	str	r3, [r7, #8]

    NK_ASSERT(ctx);
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d105      	bne.n	801b966 <nk_tree_state_pop+0x22>
 801b95a:	4b43      	ldr	r3, [pc, #268]	; (801ba68 <nk_tree_state_pop+0x124>)
 801b95c:	4a43      	ldr	r2, [pc, #268]	; (801ba6c <nk_tree_state_pop+0x128>)
 801b95e:	21a2      	movs	r1, #162	; 0xa2
 801b960:	4843      	ldr	r0, [pc, #268]	; (801ba70 <nk_tree_state_pop+0x12c>)
 801b962:	f002 f805 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b96c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b970:	2b00      	cmp	r3, #0
 801b972:	d105      	bne.n	801b980 <nk_tree_state_pop+0x3c>
 801b974:	4b3f      	ldr	r3, [pc, #252]	; (801ba74 <nk_tree_state_pop+0x130>)
 801b976:	4a3d      	ldr	r2, [pc, #244]	; (801ba6c <nk_tree_state_pop+0x128>)
 801b978:	21a3      	movs	r1, #163	; 0xa3
 801b97a:	483d      	ldr	r0, [pc, #244]	; (801ba70 <nk_tree_state_pop+0x12c>)
 801b97c:	f001 fff8 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b986:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d105      	bne.n	801b99e <nk_tree_state_pop+0x5a>
 801b992:	4b39      	ldr	r3, [pc, #228]	; (801ba78 <nk_tree_state_pop+0x134>)
 801b994:	4a35      	ldr	r2, [pc, #212]	; (801ba6c <nk_tree_state_pop+0x128>)
 801b996:	21a4      	movs	r1, #164	; 0xa4
 801b998:	4835      	ldr	r0, [pc, #212]	; (801ba70 <nk_tree_state_pop+0x12c>)
 801b99a:	f001 ffe9 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d05c      	beq.n	801ba5e <nk_tree_state_pop+0x11a>
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9aa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d055      	beq.n	801ba5e <nk_tree_state_pop+0x11a>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9b8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b9bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d04c      	beq.n	801ba5e <nk_tree_state_pop+0x11a>
        return;

    win = ctx->current;
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b9ca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b9ce:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b9d6:	60bb      	str	r3, [r7, #8]
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 801b9d8:	68bb      	ldr	r3, [r7, #8]
 801b9da:	ed93 7a08 	vldr	s14, [r3, #32]
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b9e4:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801b9e8:	edd3 6a00 	vldr	s13, [r3]
 801b9ec:	68bb      	ldr	r3, [r7, #8]
 801b9ee:	699b      	ldr	r3, [r3, #24]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	ee07 3a90 	vmov	s15, r3
 801b9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801b9fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba02:	68bb      	ldr	r3, [r7, #8]
 801ba04:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	ed93 7a04 	vldr	s14, [r3, #16]
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ba14:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 801ba18:	edd3 6a00 	vldr	s13, [r3]
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ba22:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801ba26:	edd3 7a00 	vldr	s15, [r3]
 801ba2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ba2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ba32:	68bb      	ldr	r3, [r7, #8]
 801ba34:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 801ba38:	68bb      	ldr	r3, [r7, #8]
 801ba3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d105      	bne.n	801ba4e <nk_tree_state_pop+0x10a>
 801ba42:	4b0e      	ldr	r3, [pc, #56]	; (801ba7c <nk_tree_state_pop+0x138>)
 801ba44:	4a09      	ldr	r2, [pc, #36]	; (801ba6c <nk_tree_state_pop+0x128>)
 801ba46:	21ac      	movs	r1, #172	; 0xac
 801ba48:	4809      	ldr	r0, [pc, #36]	; (801ba70 <nk_tree_state_pop+0x12c>)
 801ba4a:	f001 ff91 	bl	801d970 <__assert_func>
    layout->row.tree_depth--;
 801ba4e:	68bb      	ldr	r3, [r7, #8]
 801ba50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ba54:	1e5a      	subs	r2, r3, #1
 801ba56:	68bb      	ldr	r3, [r7, #8]
 801ba58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 801ba5c:	e000      	b.n	801ba60 <nk_tree_state_pop+0x11c>
        return;
 801ba5e:	bf00      	nop
}
 801ba60:	3710      	adds	r7, #16
 801ba62:	46bd      	mov	sp, r7
 801ba64:	bd80      	pop	{r7, pc}
 801ba66:	bf00      	nop
 801ba68:	08021fa8 	.word	0x08021fa8
 801ba6c:	080236b8 	.word	0x080236b8
 801ba70:	08021fac 	.word	0x08021fac
 801ba74:	08021fc8 	.word	0x08021fc8
 801ba78:	08021fd8 	.word	0x08021fd8
 801ba7c:	08021ff0 	.word	0x08021ff0

0801ba80 <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b088      	sub	sp, #32
 801ba84:	af04      	add	r7, sp, #16
 801ba86:	60f8      	str	r0, [r7, #12]
 801ba88:	607a      	str	r2, [r7, #4]
 801ba8a:	461a      	mov	r2, r3
 801ba8c:	460b      	mov	r3, r1
 801ba8e:	72fb      	strb	r3, [r7, #11]
 801ba90:	4613      	mov	r3, r2
 801ba92:	72bb      	strb	r3, [r7, #10]
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 801ba94:	7af9      	ldrb	r1, [r7, #11]
 801ba96:	6a3b      	ldr	r3, [r7, #32]
 801ba98:	9303      	str	r3, [sp, #12]
 801ba9a:	69fb      	ldr	r3, [r7, #28]
 801ba9c:	9302      	str	r3, [sp, #8]
 801ba9e:	69bb      	ldr	r3, [r7, #24]
 801baa0:	9301      	str	r3, [sp, #4]
 801baa2:	7abb      	ldrb	r3, [r7, #10]
 801baa4:	9300      	str	r3, [sp, #0]
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	2200      	movs	r2, #0
 801baaa:	68f8      	ldr	r0, [r7, #12]
 801baac:	f7ff ff00 	bl	801b8b0 <nk_tree_base>
 801bab0:	4603      	mov	r3, r0
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	3710      	adds	r7, #16
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd80      	pop	{r7, pc}

0801baba <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 801baba:	b580      	push	{r7, lr}
 801babc:	b082      	sub	sp, #8
 801babe:	af00      	add	r7, sp, #0
 801bac0:	6078      	str	r0, [r7, #4]
    nk_tree_state_pop(ctx);
 801bac2:	6878      	ldr	r0, [r7, #4]
 801bac4:	f7ff ff3e 	bl	801b944 <nk_tree_state_pop>
}
 801bac8:	bf00      	nop
 801baca:	3708      	adds	r7, #8
 801bacc:	46bd      	mov	sp, r7
 801bace:	bd80      	pop	{r7, pc}

0801bad0 <nk_utf_validate>:
NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};
NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

NK_INTERN int
nk_utf_validate(nk_rune *u, int i)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b082      	sub	sp, #8
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
 801bad8:	6039      	str	r1, [r7, #0]
    NK_ASSERT(u);
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d105      	bne.n	801baec <nk_utf_validate+0x1c>
 801bae0:	4b1e      	ldr	r3, [pc, #120]	; (801bb5c <nk_utf_validate+0x8c>)
 801bae2:	4a1f      	ldr	r2, [pc, #124]	; (801bb60 <nk_utf_validate+0x90>)
 801bae4:	2111      	movs	r1, #17
 801bae6:	481f      	ldr	r0, [pc, #124]	; (801bb64 <nk_utf_validate+0x94>)
 801bae8:	f001 ff42 	bl	801d970 <__assert_func>
    if (!u) return 0;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d101      	bne.n	801baf6 <nk_utf_validate+0x26>
 801baf2:	2300      	movs	r3, #0
 801baf4:	e02d      	b.n	801bb52 <nk_utf_validate+0x82>
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801baf6:	4a1c      	ldr	r2, [pc, #112]	; (801bb68 <nk_utf_validate+0x98>)
 801baf8:	683b      	ldr	r3, [r7, #0]
 801bafa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	429a      	cmp	r2, r3
 801bb04:	d812      	bhi.n	801bb2c <nk_utf_validate+0x5c>
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681a      	ldr	r2, [r3, #0]
 801bb0a:	4918      	ldr	r1, [pc, #96]	; (801bb6c <nk_utf_validate+0x9c>)
 801bb0c:	683b      	ldr	r3, [r7, #0]
 801bb0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d20a      	bcs.n	801bb2c <nk_utf_validate+0x5c>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 801bb1a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801bb1e:	d309      	bcc.n	801bb34 <nk_utf_validate+0x64>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	f64d 72fe 	movw	r2, #57342	; 0xdffe
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	d803      	bhi.n	801bb34 <nk_utf_validate+0x64>
            *u = NK_UTF_INVALID;
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801bb32:	601a      	str	r2, [r3, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 801bb34:	2301      	movs	r3, #1
 801bb36:	603b      	str	r3, [r7, #0]
 801bb38:	e002      	b.n	801bb40 <nk_utf_validate+0x70>
 801bb3a:	683b      	ldr	r3, [r7, #0]
 801bb3c:	3301      	adds	r3, #1
 801bb3e:	603b      	str	r3, [r7, #0]
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681a      	ldr	r2, [r3, #0]
 801bb44:	4909      	ldr	r1, [pc, #36]	; (801bb6c <nk_utf_validate+0x9c>)
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801bb4c:	429a      	cmp	r2, r3
 801bb4e:	d8f4      	bhi.n	801bb3a <nk_utf_validate+0x6a>
    return i;
 801bb50:	683b      	ldr	r3, [r7, #0]
}
 801bb52:	4618      	mov	r0, r3
 801bb54:	3708      	adds	r7, #8
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd80      	pop	{r7, pc}
 801bb5a:	bf00      	nop
 801bb5c:	08022008 	.word	0x08022008
 801bb60:	08023704 	.word	0x08023704
 801bb64:	0802200c 	.word	0x0802200c
 801bb68:	080236dc 	.word	0x080236dc
 801bb6c:	080236f0 	.word	0x080236f0

0801bb70 <nk_utf_decode_byte>:
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 801bb70:	b580      	push	{r7, lr}
 801bb72:	b082      	sub	sp, #8
 801bb74:	af00      	add	r7, sp, #0
 801bb76:	4603      	mov	r3, r0
 801bb78:	6039      	str	r1, [r7, #0]
 801bb7a:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(i);
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d105      	bne.n	801bb8e <nk_utf_decode_byte+0x1e>
 801bb82:	4b1b      	ldr	r3, [pc, #108]	; (801bbf0 <nk_utf_decode_byte+0x80>)
 801bb84:	4a1b      	ldr	r2, [pc, #108]	; (801bbf4 <nk_utf_decode_byte+0x84>)
 801bb86:	211c      	movs	r1, #28
 801bb88:	481b      	ldr	r0, [pc, #108]	; (801bbf8 <nk_utf_decode_byte+0x88>)
 801bb8a:	f001 fef1 	bl	801d970 <__assert_func>
    if (!i) return 0;
 801bb8e:	683b      	ldr	r3, [r7, #0]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d101      	bne.n	801bb98 <nk_utf_decode_byte+0x28>
 801bb94:	2300      	movs	r3, #0
 801bb96:	e027      	b.n	801bbe8 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801bb98:	683b      	ldr	r3, [r7, #0]
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	601a      	str	r2, [r3, #0]
 801bb9e:	e01e      	b.n	801bbde <nk_utf_decode_byte+0x6e>
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 801bba0:	683b      	ldr	r3, [r7, #0]
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	4a15      	ldr	r2, [pc, #84]	; (801bbfc <nk_utf_decode_byte+0x8c>)
 801bba6:	5cd2      	ldrb	r2, [r2, r3]
 801bba8:	79fb      	ldrb	r3, [r7, #7]
 801bbaa:	4013      	ands	r3, r2
 801bbac:	b2da      	uxtb	r2, r3
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	4913      	ldr	r1, [pc, #76]	; (801bc00 <nk_utf_decode_byte+0x90>)
 801bbb4:	5ccb      	ldrb	r3, [r1, r3]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d10c      	bne.n	801bbd4 <nk_utf_decode_byte+0x64>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 801bbba:	683b      	ldr	r3, [r7, #0]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	4a0f      	ldr	r2, [pc, #60]	; (801bbfc <nk_utf_decode_byte+0x8c>)
 801bbc0:	5cd3      	ldrb	r3, [r2, r3]
 801bbc2:	b25b      	sxtb	r3, r3
 801bbc4:	43db      	mvns	r3, r3
 801bbc6:	b25a      	sxtb	r2, r3
 801bbc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bbcc:	4013      	ands	r3, r2
 801bbce:	b25b      	sxtb	r3, r3
 801bbd0:	b2db      	uxtb	r3, r3
 801bbd2:	e009      	b.n	801bbe8 <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 801bbd4:	683b      	ldr	r3, [r7, #0]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	1c5a      	adds	r2, r3, #1
 801bbda:	683b      	ldr	r3, [r7, #0]
 801bbdc:	601a      	str	r2, [r3, #0]
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	2b04      	cmp	r3, #4
 801bbe4:	dddc      	ble.n	801bba0 <nk_utf_decode_byte+0x30>
    }
    return 0;
 801bbe6:	2300      	movs	r3, #0
}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3708      	adds	r7, #8
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}
 801bbf0:	08022028 	.word	0x08022028
 801bbf4:	08023714 	.word	0x08023714
 801bbf8:	0802200c 	.word	0x0802200c
 801bbfc:	080236d4 	.word	0x080236d4
 801bc00:	080236cc 	.word	0x080236cc

0801bc04 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 801bc04:	b590      	push	{r4, r7, lr}
 801bc06:	b08b      	sub	sp, #44	; 0x2c
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	60f8      	str	r0, [r7, #12]
 801bc0c:	60b9      	str	r1, [r7, #8]
 801bc0e:	607a      	str	r2, [r7, #4]
    int i, j, len, type=0;
 801bc10:	2300      	movs	r3, #0
 801bc12:	617b      	str	r3, [r7, #20]
    nk_rune udecoded;

    NK_ASSERT(c);
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d105      	bne.n	801bc26 <nk_utf_decode+0x22>
 801bc1a:	4b35      	ldr	r3, [pc, #212]	; (801bcf0 <nk_utf_decode+0xec>)
 801bc1c:	4a35      	ldr	r2, [pc, #212]	; (801bcf4 <nk_utf_decode+0xf0>)
 801bc1e:	212a      	movs	r1, #42	; 0x2a
 801bc20:	4835      	ldr	r0, [pc, #212]	; (801bcf8 <nk_utf_decode+0xf4>)
 801bc22:	f001 fea5 	bl	801d970 <__assert_func>
    NK_ASSERT(u);
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d105      	bne.n	801bc38 <nk_utf_decode+0x34>
 801bc2c:	4b33      	ldr	r3, [pc, #204]	; (801bcfc <nk_utf_decode+0xf8>)
 801bc2e:	4a31      	ldr	r2, [pc, #196]	; (801bcf4 <nk_utf_decode+0xf0>)
 801bc30:	212b      	movs	r1, #43	; 0x2b
 801bc32:	4831      	ldr	r0, [pc, #196]	; (801bcf8 <nk_utf_decode+0xf4>)
 801bc34:	f001 fe9c 	bl	801d970 <__assert_func>

    if (!c || !u) return 0;
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d002      	beq.n	801bc44 <nk_utf_decode+0x40>
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d101      	bne.n	801bc48 <nk_utf_decode+0x44>
 801bc44:	2300      	movs	r3, #0
 801bc46:	e04f      	b.n	801bce8 <nk_utf_decode+0xe4>
    if (!clen) return 0;
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d101      	bne.n	801bc52 <nk_utf_decode+0x4e>
 801bc4e:	2300      	movs	r3, #0
 801bc50:	e04a      	b.n	801bce8 <nk_utf_decode+0xe4>
    *u = NK_UTF_INVALID;
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801bc58:	601a      	str	r2, [r3, #0]

    udecoded = nk_utf_decode_byte(c[0], &len);
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	781b      	ldrb	r3, [r3, #0]
 801bc5e:	f107 0218 	add.w	r2, r7, #24
 801bc62:	4611      	mov	r1, r2
 801bc64:	4618      	mov	r0, r3
 801bc66:	f7ff ff83 	bl	801bb70 <nk_utf_decode_byte>
 801bc6a:	61f8      	str	r0, [r7, #28]
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 801bc6c:	69bb      	ldr	r3, [r7, #24]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	dd02      	ble.n	801bc78 <nk_utf_decode+0x74>
 801bc72:	69bb      	ldr	r3, [r7, #24]
 801bc74:	2b03      	cmp	r3, #3
 801bc76:	dd01      	ble.n	801bc7c <nk_utf_decode+0x78>
        return 1;
 801bc78:	2301      	movs	r3, #1
 801bc7a:	e035      	b.n	801bce8 <nk_utf_decode+0xe4>

    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801bc7c:	2301      	movs	r3, #1
 801bc7e:	627b      	str	r3, [r7, #36]	; 0x24
 801bc80:	2301      	movs	r3, #1
 801bc82:	623b      	str	r3, [r7, #32]
 801bc84:	e019      	b.n	801bcba <nk_utf_decode+0xb6>
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 801bc86:	69fb      	ldr	r3, [r7, #28]
 801bc88:	019c      	lsls	r4, r3, #6
 801bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc8c:	68fa      	ldr	r2, [r7, #12]
 801bc8e:	4413      	add	r3, r2
 801bc90:	781b      	ldrb	r3, [r3, #0]
 801bc92:	f107 0214 	add.w	r2, r7, #20
 801bc96:	4611      	mov	r1, r2
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f7ff ff69 	bl	801bb70 <nk_utf_decode_byte>
 801bc9e:	4603      	mov	r3, r0
 801bca0:	4323      	orrs	r3, r4
 801bca2:	61fb      	str	r3, [r7, #28]
        if (type != 0)
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d001      	beq.n	801bcae <nk_utf_decode+0xaa>
            return j;
 801bcaa:	6a3b      	ldr	r3, [r7, #32]
 801bcac:	e01c      	b.n	801bce8 <nk_utf_decode+0xe4>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 801bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bcb0:	3301      	adds	r3, #1
 801bcb2:	627b      	str	r3, [r7, #36]	; 0x24
 801bcb4:	6a3b      	ldr	r3, [r7, #32]
 801bcb6:	3301      	adds	r3, #1
 801bcb8:	623b      	str	r3, [r7, #32]
 801bcba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	429a      	cmp	r2, r3
 801bcc0:	da03      	bge.n	801bcca <nk_utf_decode+0xc6>
 801bcc2:	69bb      	ldr	r3, [r7, #24]
 801bcc4:	6a3a      	ldr	r2, [r7, #32]
 801bcc6:	429a      	cmp	r2, r3
 801bcc8:	dbdd      	blt.n	801bc86 <nk_utf_decode+0x82>
    }
    if (j < len)
 801bcca:	69bb      	ldr	r3, [r7, #24]
 801bccc:	6a3a      	ldr	r2, [r7, #32]
 801bcce:	429a      	cmp	r2, r3
 801bcd0:	da01      	bge.n	801bcd6 <nk_utf_decode+0xd2>
        return 0;
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	e008      	b.n	801bce8 <nk_utf_decode+0xe4>
    *u = udecoded;
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	69fa      	ldr	r2, [r7, #28]
 801bcda:	601a      	str	r2, [r3, #0]
    nk_utf_validate(u, len);
 801bcdc:	69bb      	ldr	r3, [r7, #24]
 801bcde:	4619      	mov	r1, r3
 801bce0:	68b8      	ldr	r0, [r7, #8]
 801bce2:	f7ff fef5 	bl	801bad0 <nk_utf_validate>
    return len;
 801bce6:	69bb      	ldr	r3, [r7, #24]
}
 801bce8:	4618      	mov	r0, r3
 801bcea:	372c      	adds	r7, #44	; 0x2c
 801bcec:	46bd      	mov	sp, r7
 801bcee:	bd90      	pop	{r4, r7, pc}
 801bcf0:	0802202c 	.word	0x0802202c
 801bcf4:	08023728 	.word	0x08023728
 801bcf8:	0802200c 	.word	0x0802200c
 801bcfc:	08022008 	.word	0x08022008

0801bd00 <nk_memcopy>:

//#ifndef NK_MEMCPY
//#define NK_MEMCPY nk_memcopy
NK_LIB void*
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
 801bd00:	b480      	push	{r7}
 801bd02:	b089      	sub	sp, #36	; 0x24
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	60f8      	str	r0, [r7, #12]
 801bd08:	60b9      	str	r1, [r7, #8]
 801bd0a:	607a      	str	r2, [r7, #4]
    nk_ptr t;
    char *dst = (char*)dst0;
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	61bb      	str	r3, [r7, #24]
    const char *src = (const char*)src0;
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	617b      	str	r3, [r7, #20]
    if (length == 0 || dst == src)
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	f000 80c7 	beq.w	801beaa <nk_memcopy+0x1aa>
 801bd1c:	69ba      	ldr	r2, [r7, #24]
 801bd1e:	697b      	ldr	r3, [r7, #20]
 801bd20:	429a      	cmp	r2, r3
 801bd22:	f000 80c2 	beq.w	801beaa <nk_memcopy+0x1aa>
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 801bd26:	69ba      	ldr	r2, [r7, #24]
 801bd28:	697b      	ldr	r3, [r7, #20]
 801bd2a:	429a      	cmp	r2, r3
 801bd2c:	d259      	bcs.n	801bde2 <nk_memcopy+0xe2>
        t = (nk_ptr)src; /* only need low bits */
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801bd32:	69ba      	ldr	r2, [r7, #24]
 801bd34:	69fb      	ldr	r3, [r7, #28]
 801bd36:	4313      	orrs	r3, r2
 801bd38:	f003 0303 	and.w	r3, r3, #3
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d024      	beq.n	801bd8a <nk_memcopy+0x8a>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 801bd40:	69ba      	ldr	r2, [r7, #24]
 801bd42:	69fb      	ldr	r3, [r7, #28]
 801bd44:	4053      	eors	r3, r2
 801bd46:	f003 0303 	and.w	r3, r3, #3
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d102      	bne.n	801bd54 <nk_memcopy+0x54>
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	2b03      	cmp	r3, #3
 801bd52:	d802      	bhi.n	801bd5a <nk_memcopy+0x5a>
                t = length;
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	61fb      	str	r3, [r7, #28]
 801bd58:	e005      	b.n	801bd66 <nk_memcopy+0x66>
            else
                t = nk_wsize - (t & nk_wmask);
 801bd5a:	69fb      	ldr	r3, [r7, #28]
 801bd5c:	f003 0303 	and.w	r3, r3, #3
 801bd60:	f1c3 0304 	rsb	r3, r3, #4
 801bd64:	61fb      	str	r3, [r7, #28]
            length -= t;
 801bd66:	687a      	ldr	r2, [r7, #4]
 801bd68:	69fb      	ldr	r3, [r7, #28]
 801bd6a:	1ad3      	subs	r3, r2, r3
 801bd6c:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*dst++ = *src++);
 801bd6e:	697a      	ldr	r2, [r7, #20]
 801bd70:	1c53      	adds	r3, r2, #1
 801bd72:	617b      	str	r3, [r7, #20]
 801bd74:	69bb      	ldr	r3, [r7, #24]
 801bd76:	1c59      	adds	r1, r3, #1
 801bd78:	61b9      	str	r1, [r7, #24]
 801bd7a:	7812      	ldrb	r2, [r2, #0]
 801bd7c:	701a      	strb	r2, [r3, #0]
 801bd7e:	69fb      	ldr	r3, [r7, #28]
 801bd80:	3b01      	subs	r3, #1
 801bd82:	61fb      	str	r3, [r7, #28]
 801bd84:	69fb      	ldr	r3, [r7, #28]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d1f1      	bne.n	801bd6e <nk_memcopy+0x6e>
        }
        t = length / nk_wsize;
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	089b      	lsrs	r3, r3, #2
 801bd8e:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 801bd90:	69fb      	ldr	r3, [r7, #28]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d00f      	beq.n	801bdb6 <nk_memcopy+0xb6>
 801bd96:	697b      	ldr	r3, [r7, #20]
 801bd98:	681a      	ldr	r2, [r3, #0]
 801bd9a:	69bb      	ldr	r3, [r7, #24]
 801bd9c:	601a      	str	r2, [r3, #0]
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	3304      	adds	r3, #4
 801bda2:	617b      	str	r3, [r7, #20]
 801bda4:	69bb      	ldr	r3, [r7, #24]
 801bda6:	3304      	adds	r3, #4
 801bda8:	61bb      	str	r3, [r7, #24]
 801bdaa:	69fb      	ldr	r3, [r7, #28]
 801bdac:	3b01      	subs	r3, #1
 801bdae:	61fb      	str	r3, [r7, #28]
 801bdb0:	69fb      	ldr	r3, [r7, #28]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d1ef      	bne.n	801bd96 <nk_memcopy+0x96>
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	f003 0303 	and.w	r3, r3, #3
 801bdbc:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*dst++ = *src++);
 801bdbe:	69fb      	ldr	r3, [r7, #28]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d075      	beq.n	801beb0 <nk_memcopy+0x1b0>
 801bdc4:	697a      	ldr	r2, [r7, #20]
 801bdc6:	1c53      	adds	r3, r2, #1
 801bdc8:	617b      	str	r3, [r7, #20]
 801bdca:	69bb      	ldr	r3, [r7, #24]
 801bdcc:	1c59      	adds	r1, r3, #1
 801bdce:	61b9      	str	r1, [r7, #24]
 801bdd0:	7812      	ldrb	r2, [r2, #0]
 801bdd2:	701a      	strb	r2, [r3, #0]
 801bdd4:	69fb      	ldr	r3, [r7, #28]
 801bdd6:	3b01      	subs	r3, #1
 801bdd8:	61fb      	str	r3, [r7, #28]
 801bdda:	69fb      	ldr	r3, [r7, #28]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d1f1      	bne.n	801bdc4 <nk_memcopy+0xc4>
 801bde0:	e066      	b.n	801beb0 <nk_memcopy+0x1b0>
    } else {
        src += length;
 801bde2:	697a      	ldr	r2, [r7, #20]
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	4413      	add	r3, r2
 801bde8:	617b      	str	r3, [r7, #20]
        dst += length;
 801bdea:	69ba      	ldr	r2, [r7, #24]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	4413      	add	r3, r2
 801bdf0:	61bb      	str	r3, [r7, #24]
        t = (nk_ptr)src;
 801bdf2:	697b      	ldr	r3, [r7, #20]
 801bdf4:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 801bdf6:	69ba      	ldr	r2, [r7, #24]
 801bdf8:	69fb      	ldr	r3, [r7, #28]
 801bdfa:	4313      	orrs	r3, r2
 801bdfc:	f003 0303 	and.w	r3, r3, #3
 801be00:	2b00      	cmp	r3, #0
 801be02:	d024      	beq.n	801be4e <nk_memcopy+0x14e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 801be04:	69ba      	ldr	r2, [r7, #24]
 801be06:	69fb      	ldr	r3, [r7, #28]
 801be08:	4053      	eors	r3, r2
 801be0a:	f003 0303 	and.w	r3, r3, #3
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d102      	bne.n	801be18 <nk_memcopy+0x118>
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2b04      	cmp	r3, #4
 801be16:	d802      	bhi.n	801be1e <nk_memcopy+0x11e>
                t = length;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	61fb      	str	r3, [r7, #28]
 801be1c:	e003      	b.n	801be26 <nk_memcopy+0x126>
            else
                t &= nk_wmask;
 801be1e:	69fb      	ldr	r3, [r7, #28]
 801be20:	f003 0303 	and.w	r3, r3, #3
 801be24:	61fb      	str	r3, [r7, #28]
            length -= t;
 801be26:	687a      	ldr	r2, [r7, #4]
 801be28:	69fb      	ldr	r3, [r7, #28]
 801be2a:	1ad3      	subs	r3, r2, r3
 801be2c:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*--dst = *--src);
 801be2e:	697b      	ldr	r3, [r7, #20]
 801be30:	3b01      	subs	r3, #1
 801be32:	617b      	str	r3, [r7, #20]
 801be34:	69bb      	ldr	r3, [r7, #24]
 801be36:	3b01      	subs	r3, #1
 801be38:	61bb      	str	r3, [r7, #24]
 801be3a:	697b      	ldr	r3, [r7, #20]
 801be3c:	781a      	ldrb	r2, [r3, #0]
 801be3e:	69bb      	ldr	r3, [r7, #24]
 801be40:	701a      	strb	r2, [r3, #0]
 801be42:	69fb      	ldr	r3, [r7, #28]
 801be44:	3b01      	subs	r3, #1
 801be46:	61fb      	str	r3, [r7, #28]
 801be48:	69fb      	ldr	r3, [r7, #28]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d1ef      	bne.n	801be2e <nk_memcopy+0x12e>
        }
        t = length / nk_wsize;
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	089b      	lsrs	r3, r3, #2
 801be52:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 801be54:	69fb      	ldr	r3, [r7, #28]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d00f      	beq.n	801be7a <nk_memcopy+0x17a>
 801be5a:	697b      	ldr	r3, [r7, #20]
 801be5c:	3b04      	subs	r3, #4
 801be5e:	617b      	str	r3, [r7, #20]
 801be60:	69bb      	ldr	r3, [r7, #24]
 801be62:	3b04      	subs	r3, #4
 801be64:	61bb      	str	r3, [r7, #24]
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	681a      	ldr	r2, [r3, #0]
 801be6a:	69bb      	ldr	r3, [r7, #24]
 801be6c:	601a      	str	r2, [r3, #0]
 801be6e:	69fb      	ldr	r3, [r7, #28]
 801be70:	3b01      	subs	r3, #1
 801be72:	61fb      	str	r3, [r7, #28]
 801be74:	69fb      	ldr	r3, [r7, #28]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d1ef      	bne.n	801be5a <nk_memcopy+0x15a>
            *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);
        t = length & nk_wmask;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	f003 0303 	and.w	r3, r3, #3
 801be80:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*--dst = *--src);
 801be82:	69fb      	ldr	r3, [r7, #28]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d012      	beq.n	801beae <nk_memcopy+0x1ae>
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	3b01      	subs	r3, #1
 801be8c:	617b      	str	r3, [r7, #20]
 801be8e:	69bb      	ldr	r3, [r7, #24]
 801be90:	3b01      	subs	r3, #1
 801be92:	61bb      	str	r3, [r7, #24]
 801be94:	697b      	ldr	r3, [r7, #20]
 801be96:	781a      	ldrb	r2, [r3, #0]
 801be98:	69bb      	ldr	r3, [r7, #24]
 801be9a:	701a      	strb	r2, [r3, #0]
 801be9c:	69fb      	ldr	r3, [r7, #28]
 801be9e:	3b01      	subs	r3, #1
 801bea0:	61fb      	str	r3, [r7, #28]
 801bea2:	69fb      	ldr	r3, [r7, #28]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d1ef      	bne.n	801be88 <nk_memcopy+0x188>
    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
 801bea8:	e001      	b.n	801beae <nk_memcopy+0x1ae>
        goto done;
 801beaa:	bf00      	nop
 801beac:	e000      	b.n	801beb0 <nk_memcopy+0x1b0>
done:
 801beae:	bf00      	nop
    return (dst0);
 801beb0:	68fb      	ldr	r3, [r7, #12]
}
 801beb2:	4618      	mov	r0, r3
 801beb4:	3724      	adds	r7, #36	; 0x24
 801beb6:	46bd      	mov	sp, r7
 801beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bebc:	4770      	bx	lr

0801bebe <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 801bebe:	b480      	push	{r7}
 801bec0:	b089      	sub	sp, #36	; 0x24
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	60f8      	str	r0, [r7, #12]
 801bec6:	60b9      	str	r1, [r7, #8]
 801bec8:	607a      	str	r2, [r7, #4]
    #define nk_word unsigned
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	61fb      	str	r3, [r7, #28]
    unsigned c = 0;
 801bece:	2300      	movs	r3, #0
 801bed0:	61bb      	str	r3, [r7, #24]
    nk_size t = 0;
 801bed2:	2300      	movs	r3, #0
 801bed4:	617b      	str	r3, [r7, #20]

    if ((c = (nk_byte)c0) != 0) {
 801bed6:	68bb      	ldr	r3, [r7, #8]
 801bed8:	b2db      	uxtb	r3, r3
 801beda:	61bb      	str	r3, [r7, #24]
 801bedc:	69bb      	ldr	r3, [r7, #24]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d009      	beq.n	801bef6 <nk_memset+0x38>
        c = (c << 8) | c; /* at least 16-bits  */
 801bee2:	69bb      	ldr	r3, [r7, #24]
 801bee4:	021b      	lsls	r3, r3, #8
 801bee6:	69ba      	ldr	r2, [r7, #24]
 801bee8:	4313      	orrs	r3, r2
 801beea:	61bb      	str	r3, [r7, #24]
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 801beec:	69bb      	ldr	r3, [r7, #24]
 801beee:	041b      	lsls	r3, r3, #16
 801bef0:	69ba      	ldr	r2, [r7, #24]
 801bef2:	4313      	orrs	r3, r2
 801bef4:	61bb      	str	r3, [r7, #24]
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	61fb      	str	r3, [r7, #28]
    if (size < 3 * nk_wsize) {
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	2b0b      	cmp	r3, #11
 801befe:	d80c      	bhi.n	801bf1a <nk_memset+0x5c>
        while (size--) *dst++ = (nk_byte)c0;
 801bf00:	e005      	b.n	801bf0e <nk_memset+0x50>
 801bf02:	69fb      	ldr	r3, [r7, #28]
 801bf04:	1c5a      	adds	r2, r3, #1
 801bf06:	61fa      	str	r2, [r7, #28]
 801bf08:	68ba      	ldr	r2, [r7, #8]
 801bf0a:	b2d2      	uxtb	r2, r2
 801bf0c:	701a      	strb	r2, [r3, #0]
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	1e5a      	subs	r2, r3, #1
 801bf12:	607a      	str	r2, [r7, #4]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d1f4      	bne.n	801bf02 <nk_memset+0x44>
        return;
 801bf18:	e03c      	b.n	801bf94 <nk_memset+0xd6>
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 801bf1a:	69fb      	ldr	r3, [r7, #28]
 801bf1c:	f003 0303 	and.w	r3, r3, #3
 801bf20:	617b      	str	r3, [r7, #20]
 801bf22:	697b      	ldr	r3, [r7, #20]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d013      	beq.n	801bf50 <nk_memset+0x92>
        t = nk_wsize -t;
 801bf28:	697b      	ldr	r3, [r7, #20]
 801bf2a:	f1c3 0304 	rsb	r3, r3, #4
 801bf2e:	617b      	str	r3, [r7, #20]
        size -= t;
 801bf30:	687a      	ldr	r2, [r7, #4]
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	1ad3      	subs	r3, r2, r3
 801bf36:	607b      	str	r3, [r7, #4]
        do {
            *dst++ = (nk_byte)c0;
 801bf38:	69fb      	ldr	r3, [r7, #28]
 801bf3a:	1c5a      	adds	r2, r3, #1
 801bf3c:	61fa      	str	r2, [r7, #28]
 801bf3e:	68ba      	ldr	r2, [r7, #8]
 801bf40:	b2d2      	uxtb	r2, r2
 801bf42:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	3b01      	subs	r3, #1
 801bf48:	617b      	str	r3, [r7, #20]
 801bf4a:	697b      	ldr	r3, [r7, #20]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d1f3      	bne.n	801bf38 <nk_memset+0x7a>
    }

    /* fill word */
    t = size / nk_wsize;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	089b      	lsrs	r3, r3, #2
 801bf54:	617b      	str	r3, [r7, #20]
    do {
        *(nk_word*)((void*)dst) = c;
 801bf56:	69fb      	ldr	r3, [r7, #28]
 801bf58:	69ba      	ldr	r2, [r7, #24]
 801bf5a:	601a      	str	r2, [r3, #0]
        dst += nk_wsize;
 801bf5c:	69fb      	ldr	r3, [r7, #28]
 801bf5e:	3304      	adds	r3, #4
 801bf60:	61fb      	str	r3, [r7, #28]
    } while (--t != 0);
 801bf62:	697b      	ldr	r3, [r7, #20]
 801bf64:	3b01      	subs	r3, #1
 801bf66:	617b      	str	r3, [r7, #20]
 801bf68:	697b      	ldr	r3, [r7, #20]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d1f3      	bne.n	801bf56 <nk_memset+0x98>

    /* fill trailing bytes */
    t = (size & nk_wmask);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	f003 0303 	and.w	r3, r3, #3
 801bf74:	617b      	str	r3, [r7, #20]
    if (t != 0) {
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d00b      	beq.n	801bf94 <nk_memset+0xd6>
        do {
            *dst++ = (nk_byte)c0;
 801bf7c:	69fb      	ldr	r3, [r7, #28]
 801bf7e:	1c5a      	adds	r2, r3, #1
 801bf80:	61fa      	str	r2, [r7, #28]
 801bf82:	68ba      	ldr	r2, [r7, #8]
 801bf84:	b2d2      	uxtb	r2, r2
 801bf86:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	3b01      	subs	r3, #1
 801bf8c:	617b      	str	r3, [r7, #20]
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d1f3      	bne.n	801bf7c <nk_memset+0xbe>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 801bf94:	3724      	adds	r7, #36	; 0x24
 801bf96:	46bd      	mov	sp, r7
 801bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9c:	4770      	bx	lr
	...

0801bfa0 <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 801bfa0:	b580      	push	{r7, lr}
 801bfa2:	b082      	sub	sp, #8
 801bfa4:	af00      	add	r7, sp, #0
 801bfa6:	6078      	str	r0, [r7, #4]
 801bfa8:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ptr);
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d105      	bne.n	801bfbc <nk_zero+0x1c>
 801bfb0:	4b07      	ldr	r3, [pc, #28]	; (801bfd0 <nk_zero+0x30>)
 801bfb2:	4a08      	ldr	r2, [pc, #32]	; (801bfd4 <nk_zero+0x34>)
 801bfb4:	2184      	movs	r1, #132	; 0x84
 801bfb6:	4808      	ldr	r0, [pc, #32]	; (801bfd8 <nk_zero+0x38>)
 801bfb8:	f001 fcda 	bl	801d970 <__assert_func>
    NK_MEMSET(ptr, 0, size);
 801bfbc:	683a      	ldr	r2, [r7, #0]
 801bfbe:	2100      	movs	r1, #0
 801bfc0:	6878      	ldr	r0, [r7, #4]
 801bfc2:	f7ff ff7c 	bl	801bebe <nk_memset>
}
 801bfc6:	bf00      	nop
 801bfc8:	3708      	adds	r7, #8
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bd80      	pop	{r7, pc}
 801bfce:	bf00      	nop
 801bfd0:	08022048 	.word	0x08022048
 801bfd4:	08023738 	.word	0x08023738
 801bfd8:	0802204c 	.word	0x0802204c

0801bfdc <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b084      	sub	sp, #16
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]
    int siz = 0;
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(str);
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d108      	bne.n	801c000 <nk_strlen+0x24>
 801bfee:	4b0b      	ldr	r3, [pc, #44]	; (801c01c <nk_strlen+0x40>)
 801bff0:	4a0b      	ldr	r2, [pc, #44]	; (801c020 <nk_strlen+0x44>)
 801bff2:	218b      	movs	r1, #139	; 0x8b
 801bff4:	480b      	ldr	r0, [pc, #44]	; (801c024 <nk_strlen+0x48>)
 801bff6:	f001 fcbb 	bl	801d970 <__assert_func>
    while (str && *str++ != '\0') siz++;
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	3301      	adds	r3, #1
 801bffe:	60fb      	str	r3, [r7, #12]
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	2b00      	cmp	r3, #0
 801c004:	d005      	beq.n	801c012 <nk_strlen+0x36>
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	1c5a      	adds	r2, r3, #1
 801c00a:	607a      	str	r2, [r7, #4]
 801c00c:	781b      	ldrb	r3, [r3, #0]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d1f3      	bne.n	801bffa <nk_strlen+0x1e>
    return siz;
 801c012:	68fb      	ldr	r3, [r7, #12]
}
 801c014:	4618      	mov	r0, r3
 801c016:	3710      	adds	r7, #16
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}
 801c01c:	08022068 	.word	0x08022068
 801c020:	08023740 	.word	0x08023740
 801c024:	0802204c 	.word	0x0802204c

0801c028 <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b088      	sub	sp, #32
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	60f8      	str	r0, [r7, #12]
 801c030:	60b9      	str	r1, [r7, #8]
 801c032:	607a      	str	r2, [r7, #4]
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	2b00      	cmp	r3, #0
 801c038:	da06      	bge.n	801c048 <nk_stricmpn+0x20>
 801c03a:	4b25      	ldr	r3, [pc, #148]	; (801c0d0 <nk_stricmpn+0xa8>)
 801c03c:	4a25      	ldr	r2, [pc, #148]	; (801c0d4 <nk_stricmpn+0xac>)
 801c03e:	f240 1103 	movw	r1, #259	; 0x103
 801c042:	4825      	ldr	r0, [pc, #148]	; (801c0d8 <nk_stricmpn+0xb0>)
 801c044:	f001 fc94 	bl	801d970 <__assert_func>
    do {
        c1 = *s1++;
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	1c5a      	adds	r2, r3, #1
 801c04c:	60fa      	str	r2, [r7, #12]
 801c04e:	781b      	ldrb	r3, [r3, #0]
 801c050:	61bb      	str	r3, [r7, #24]
        c2 = *s2++;
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	1c5a      	adds	r2, r3, #1
 801c056:	60ba      	str	r2, [r7, #8]
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	617b      	str	r3, [r7, #20]
        if (!n--) return 0;
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	1e5a      	subs	r2, r3, #1
 801c060:	607a      	str	r2, [r7, #4]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d101      	bne.n	801c06a <nk_stricmpn+0x42>
 801c066:	2300      	movs	r3, #0
 801c068:	e02e      	b.n	801c0c8 <nk_stricmpn+0xa0>

        d = c1 - c2;
 801c06a:	69ba      	ldr	r2, [r7, #24]
 801c06c:	697b      	ldr	r3, [r7, #20]
 801c06e:	1ad3      	subs	r3, r2, r3
 801c070:	61fb      	str	r3, [r7, #28]
        while (d) {
 801c072:	bf00      	nop
 801c074:	69fb      	ldr	r3, [r7, #28]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d022      	beq.n	801c0c0 <nk_stricmpn+0x98>
            if (c1 <= 'Z' && c1 >= 'A') {
 801c07a:	69bb      	ldr	r3, [r7, #24]
 801c07c:	2b5a      	cmp	r3, #90	; 0x5a
 801c07e:	dc08      	bgt.n	801c092 <nk_stricmpn+0x6a>
 801c080:	69bb      	ldr	r3, [r7, #24]
 801c082:	2b40      	cmp	r3, #64	; 0x40
 801c084:	dd05      	ble.n	801c092 <nk_stricmpn+0x6a>
                d += ('a' - 'A');
 801c086:	69fb      	ldr	r3, [r7, #28]
 801c088:	3320      	adds	r3, #32
 801c08a:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801c08c:	69fb      	ldr	r3, [r7, #28]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d013      	beq.n	801c0ba <nk_stricmpn+0x92>
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 801c092:	697b      	ldr	r3, [r7, #20]
 801c094:	2b5a      	cmp	r3, #90	; 0x5a
 801c096:	dc08      	bgt.n	801c0aa <nk_stricmpn+0x82>
 801c098:	697b      	ldr	r3, [r7, #20]
 801c09a:	2b40      	cmp	r3, #64	; 0x40
 801c09c:	dd05      	ble.n	801c0aa <nk_stricmpn+0x82>
                d -= ('a' - 'A');
 801c09e:	69fb      	ldr	r3, [r7, #28]
 801c0a0:	3b20      	subs	r3, #32
 801c0a2:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 801c0a4:	69fb      	ldr	r3, [r7, #28]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d009      	beq.n	801c0be <nk_stricmpn+0x96>
            }
            return ((d >= 0) << 1) - 1;
 801c0aa:	69fb      	ldr	r3, [r7, #28]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	db01      	blt.n	801c0b4 <nk_stricmpn+0x8c>
 801c0b0:	2301      	movs	r3, #1
 801c0b2:	e009      	b.n	801c0c8 <nk_stricmpn+0xa0>
 801c0b4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0b8:	e006      	b.n	801c0c8 <nk_stricmpn+0xa0>
                if (!d) break;
 801c0ba:	bf00      	nop
 801c0bc:	e000      	b.n	801c0c0 <nk_stricmpn+0x98>
                if (!d) break;
 801c0be:	bf00      	nop
        }
    } while (c1);
 801c0c0:	69bb      	ldr	r3, [r7, #24]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d1c0      	bne.n	801c048 <nk_stricmpn+0x20>
    return 0;
 801c0c6:	2300      	movs	r3, #0
}
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	3720      	adds	r7, #32
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	bd80      	pop	{r7, pc}
 801c0d0:	0802206c 	.word	0x0802206c
 801c0d4:	0802374c 	.word	0x0802374c
 801c0d8:	0802204c 	.word	0x0802204c

0801c0dc <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 801c0dc:	b480      	push	{r7}
 801c0de:	b091      	sub	sp, #68	; 0x44
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	60b9      	str	r1, [r7, #8]
 801c0e6:	607a      	str	r2, [r7, #4]
    /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
    #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))

    nk_uint h1 = seed;
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	633b      	str	r3, [r7, #48]	; 0x30
    const nk_byte *keyptr = data;
 801c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0f2:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
 801c0f4:	2304      	movs	r3, #4
 801c0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int nblocks = len/4;
 801c0f8:	68bb      	ldr	r3, [r7, #8]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	da00      	bge.n	801c100 <nk_murmur_hash+0x24>
 801c0fe:	3303      	adds	r3, #3
 801c100:	109b      	asrs	r3, r3, #2
 801c102:	62bb      	str	r3, [r7, #40]	; 0x28

    const nk_uint c1 = 0xcc9e2d51;
 801c104:	4b57      	ldr	r3, [pc, #348]	; (801c264 <nk_murmur_hash+0x188>)
 801c106:	627b      	str	r3, [r7, #36]	; 0x24
    const nk_uint c2 = 0x1b873593;
 801c108:	4b57      	ldr	r3, [pc, #348]	; (801c268 <nk_murmur_hash+0x18c>)
 801c10a:	623b      	str	r3, [r7, #32]
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d101      	bne.n	801c116 <nk_murmur_hash+0x3a>
 801c112:	2300      	movs	r3, #0
 801c114:	e09f      	b.n	801c256 <nk_murmur_hash+0x17a>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801c116:	2300      	movs	r3, #0
 801c118:	637b      	str	r3, [r7, #52]	; 0x34
 801c11a:	e03c      	b.n	801c196 <nk_murmur_hash+0xba>
        k1ptr = (nk_byte*)&k1;
 801c11c:	f107 0314 	add.w	r3, r7, #20
 801c120:	61bb      	str	r3, [r7, #24]
        k1ptr[0] = keyptr[0];
 801c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c124:	781a      	ldrb	r2, [r3, #0]
 801c126:	69bb      	ldr	r3, [r7, #24]
 801c128:	701a      	strb	r2, [r3, #0]
        k1ptr[1] = keyptr[1];
 801c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c12c:	1c5a      	adds	r2, r3, #1
 801c12e:	69bb      	ldr	r3, [r7, #24]
 801c130:	3301      	adds	r3, #1
 801c132:	7812      	ldrb	r2, [r2, #0]
 801c134:	701a      	strb	r2, [r3, #0]
        k1ptr[2] = keyptr[2];
 801c136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c138:	1c9a      	adds	r2, r3, #2
 801c13a:	69bb      	ldr	r3, [r7, #24]
 801c13c:	3302      	adds	r3, #2
 801c13e:	7812      	ldrb	r2, [r2, #0]
 801c140:	701a      	strb	r2, [r3, #0]
        k1ptr[3] = keyptr[3];
 801c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c144:	1cda      	adds	r2, r3, #3
 801c146:	69bb      	ldr	r3, [r7, #24]
 801c148:	3303      	adds	r3, #3
 801c14a:	7812      	ldrb	r2, [r2, #0]
 801c14c:	701a      	strb	r2, [r3, #0]

        k1 *= c1;
 801c14e:	697b      	ldr	r3, [r7, #20]
 801c150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c152:	fb02 f303 	mul.w	r3, r2, r3
 801c156:	617b      	str	r3, [r7, #20]
        k1 = NK_ROTL(k1,15);
 801c158:	697b      	ldr	r3, [r7, #20]
 801c15a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c15e:	617b      	str	r3, [r7, #20]
        k1 *= c2;
 801c160:	697b      	ldr	r3, [r7, #20]
 801c162:	6a3a      	ldr	r2, [r7, #32]
 801c164:	fb02 f303 	mul.w	r3, r2, r3
 801c168:	617b      	str	r3, [r7, #20]

        h1 ^= k1;
 801c16a:	697b      	ldr	r3, [r7, #20]
 801c16c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c16e:	4053      	eors	r3, r2
 801c170:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = NK_ROTL(h1,13);
 801c172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c174:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801c178:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = h1*5+0xe6546b64;
 801c17a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c17c:	4613      	mov	r3, r2
 801c17e:	009b      	lsls	r3, r3, #2
 801c180:	441a      	add	r2, r3
 801c182:	4b3a      	ldr	r3, [pc, #232]	; (801c26c <nk_murmur_hash+0x190>)
 801c184:	4413      	add	r3, r2
 801c186:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 801c188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c18a:	3301      	adds	r3, #1
 801c18c:	637b      	str	r3, [r7, #52]	; 0x34
 801c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c192:	4413      	add	r3, r2
 801c194:	63bb      	str	r3, [r7, #56]	; 0x38
 801c196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c19a:	429a      	cmp	r2, r3
 801c19c:	dbbe      	blt.n	801c11c <nk_murmur_hash+0x40>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 801c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1a0:	009b      	lsls	r3, r3, #2
 801c1a2:	461a      	mov	r2, r3
 801c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1a6:	4413      	add	r3, r2
 801c1a8:	61fb      	str	r3, [r7, #28]
    k1 = 0;
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	617b      	str	r3, [r7, #20]
    switch (len & 3) {
 801c1ae:	68bb      	ldr	r3, [r7, #8]
 801c1b0:	f003 0303 	and.w	r3, r3, #3
 801c1b4:	2b03      	cmp	r3, #3
 801c1b6:	d006      	beq.n	801c1c6 <nk_murmur_hash+0xea>
 801c1b8:	2b03      	cmp	r3, #3
 801c1ba:	dc2d      	bgt.n	801c218 <nk_murmur_hash+0x13c>
 801c1bc:	2b01      	cmp	r3, #1
 801c1be:	d012      	beq.n	801c1e6 <nk_murmur_hash+0x10a>
 801c1c0:	2b02      	cmp	r3, #2
 801c1c2:	d008      	beq.n	801c1d6 <nk_murmur_hash+0xfa>
            k1 *= c1;
            k1 = NK_ROTL(k1,15);
            k1 *= c2;
            h1 ^= k1;
            break;
        default: break;
 801c1c4:	e028      	b.n	801c218 <nk_murmur_hash+0x13c>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 801c1c6:	69fb      	ldr	r3, [r7, #28]
 801c1c8:	3302      	adds	r3, #2
 801c1ca:	781b      	ldrb	r3, [r3, #0]
 801c1cc:	041b      	lsls	r3, r3, #16
 801c1ce:	461a      	mov	r2, r3
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	4053      	eors	r3, r2
 801c1d4:	617b      	str	r3, [r7, #20]
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 801c1d6:	69fb      	ldr	r3, [r7, #28]
 801c1d8:	3301      	adds	r3, #1
 801c1da:	781b      	ldrb	r3, [r3, #0]
 801c1dc:	021b      	lsls	r3, r3, #8
 801c1de:	461a      	mov	r2, r3
 801c1e0:	697b      	ldr	r3, [r7, #20]
 801c1e2:	4053      	eors	r3, r2
 801c1e4:	617b      	str	r3, [r7, #20]
        case 1: k1 ^= tail[0];
 801c1e6:	69fb      	ldr	r3, [r7, #28]
 801c1e8:	781b      	ldrb	r3, [r3, #0]
 801c1ea:	461a      	mov	r2, r3
 801c1ec:	697b      	ldr	r3, [r7, #20]
 801c1ee:	4053      	eors	r3, r2
 801c1f0:	617b      	str	r3, [r7, #20]
            k1 *= c1;
 801c1f2:	697b      	ldr	r3, [r7, #20]
 801c1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c1f6:	fb02 f303 	mul.w	r3, r2, r3
 801c1fa:	617b      	str	r3, [r7, #20]
            k1 = NK_ROTL(k1,15);
 801c1fc:	697b      	ldr	r3, [r7, #20]
 801c1fe:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c202:	617b      	str	r3, [r7, #20]
            k1 *= c2;
 801c204:	697b      	ldr	r3, [r7, #20]
 801c206:	6a3a      	ldr	r2, [r7, #32]
 801c208:	fb02 f303 	mul.w	r3, r2, r3
 801c20c:	617b      	str	r3, [r7, #20]
            h1 ^= k1;
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c212:	4053      	eors	r3, r2
 801c214:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 801c216:	e000      	b.n	801c21a <nk_murmur_hash+0x13e>
        default: break;
 801c218:	bf00      	nop
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 801c21a:	68bb      	ldr	r3, [r7, #8]
 801c21c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c21e:	4053      	eors	r3, r2
 801c220:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* fmix32 */
    h1 ^= h1 >> 16;
 801c222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c224:	0c1b      	lsrs	r3, r3, #16
 801c226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c228:	4053      	eors	r3, r2
 801c22a:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0x85ebca6b;
 801c22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c22e:	4a10      	ldr	r2, [pc, #64]	; (801c270 <nk_murmur_hash+0x194>)
 801c230:	fb02 f303 	mul.w	r3, r2, r3
 801c234:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 13;
 801c236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c238:	0b5b      	lsrs	r3, r3, #13
 801c23a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c23c:	4053      	eors	r3, r2
 801c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0xc2b2ae35;
 801c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c242:	4a0c      	ldr	r2, [pc, #48]	; (801c274 <nk_murmur_hash+0x198>)
 801c244:	fb02 f303 	mul.w	r3, r2, r3
 801c248:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 16;
 801c24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c24c:	0c1b      	lsrs	r3, r3, #16
 801c24e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c250:	4053      	eors	r3, r2
 801c252:	63fb      	str	r3, [r7, #60]	; 0x3c

    #undef NK_ROTL
    return h1;
 801c254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801c256:	4618      	mov	r0, r3
 801c258:	3744      	adds	r7, #68	; 0x44
 801c25a:	46bd      	mov	sp, r7
 801c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c260:	4770      	bx	lr
 801c262:	bf00      	nop
 801c264:	cc9e2d51 	.word	0xcc9e2d51
 801c268:	1b873593 	.word	0x1b873593
 801c26c:	e6546b64 	.word	0xe6546b64
 801c270:	85ebca6b 	.word	0x85ebca6b
 801c274:	c2b2ae35 	.word	0xc2b2ae35

0801c278 <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 801c278:	b580      	push	{r7, lr}
 801c27a:	b092      	sub	sp, #72	; 0x48
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6178      	str	r0, [r7, #20]
 801c280:	6139      	str	r1, [r7, #16]
 801c282:	60fa      	str	r2, [r7, #12]
 801c284:	ed87 0a02 	vstr	s0, [r7, #8]
 801c288:	607b      	str	r3, [r7, #4]
    int i = 0;
 801c28a:	2300      	movs	r3, #0
 801c28c:	647b      	str	r3, [r7, #68]	; 0x44
    int glyph_len = 0;
 801c28e:	2300      	movs	r3, #0
 801c290:	643b      	str	r3, [r7, #64]	; 0x40
    float last_width = 0;
 801c292:	f04f 0300 	mov.w	r3, #0
 801c296:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 801c298:	2300      	movs	r3, #0
 801c29a:	61fb      	str	r3, [r7, #28]
    float width = 0;
 801c29c:	f04f 0300 	mov.w	r3, #0
 801c2a0:	63bb      	str	r3, [r7, #56]	; 0x38
    int len = 0;
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	637b      	str	r3, [r7, #52]	; 0x34
    int g = 0;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	633b      	str	r3, [r7, #48]	; 0x30
    float s;

    int sep_len = 0;
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    int sep_g = 0;
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	62bb      	str	r3, [r7, #40]	; 0x28
    float sep_width = 0;
 801c2b2:	f04f 0300 	mov.w	r3, #0
 801c2b6:	627b      	str	r3, [r7, #36]	; 0x24
    sep_count = NK_MAX(sep_count,0);
 801c2b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c2ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c2be:	65bb      	str	r3, [r7, #88]	; 0x58

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 801c2c0:	f107 031c 	add.w	r3, r7, #28
 801c2c4:	68fa      	ldr	r2, [r7, #12]
 801c2c6:	4619      	mov	r1, r3
 801c2c8:	6938      	ldr	r0, [r7, #16]
 801c2ca:	f7ff fc9b 	bl	801bc04 <nk_utf_decode>
 801c2ce:	6438      	str	r0, [r7, #64]	; 0x40
    while (glyph_len && (width < space) && (len < text_len)) {
 801c2d0:	e04a      	b.n	801c368 <nk_text_clamp+0xf0>
        len += glyph_len;
 801c2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2d6:	4413      	add	r3, r2
 801c2d8:	637b      	str	r3, [r7, #52]	; 0x34
        s = font->width(font->userdata, font->height, text, len);
 801c2da:	697b      	ldr	r3, [r7, #20]
 801c2dc:	689b      	ldr	r3, [r3, #8]
 801c2de:	697a      	ldr	r2, [r7, #20]
 801c2e0:	edd2 7a01 	vldr	s15, [r2, #4]
 801c2e4:	6978      	ldr	r0, [r7, #20]
 801c2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c2e8:	6939      	ldr	r1, [r7, #16]
 801c2ea:	eeb0 0a67 	vmov.f32	s0, s15
 801c2ee:	6800      	ldr	r0, [r0, #0]
 801c2f0:	4798      	blx	r3
 801c2f2:	ed87 0a08 	vstr	s0, [r7, #32]
        for (i = 0; i < sep_count; ++i) {
 801c2f6:	2300      	movs	r3, #0
 801c2f8:	647b      	str	r3, [r7, #68]	; 0x44
 801c2fa:	e015      	b.n	801c328 <nk_text_clamp+0xb0>
            if (unicode != sep_list[i]) continue;
 801c2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c2fe:	009b      	lsls	r3, r3, #2
 801c300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c302:	4413      	add	r3, r2
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	69fb      	ldr	r3, [r7, #28]
 801c308:	429a      	cmp	r2, r3
 801c30a:	d109      	bne.n	801c320 <nk_text_clamp+0xa8>
            sep_width = last_width = width;
 801c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c312:	627b      	str	r3, [r7, #36]	; 0x24
            sep_g = g+1;
 801c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c316:	3301      	adds	r3, #1
 801c318:	62bb      	str	r3, [r7, #40]	; 0x28
            sep_len = len;
 801c31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c31c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801c31e:	e007      	b.n	801c330 <nk_text_clamp+0xb8>
            if (unicode != sep_list[i]) continue;
 801c320:	bf00      	nop
        for (i = 0; i < sep_count; ++i) {
 801c322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c324:	3301      	adds	r3, #1
 801c326:	647b      	str	r3, [r7, #68]	; 0x44
 801c328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c32a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c32c:	429a      	cmp	r2, r3
 801c32e:	dbe5      	blt.n	801c2fc <nk_text_clamp+0x84>
        }
        if (i == sep_count){
 801c330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c334:	429a      	cmp	r2, r3
 801c336:	d106      	bne.n	801c346 <nk_text_clamp+0xce>
            last_width = sep_width = width;
 801c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c33a:	627b      	str	r3, [r7, #36]	; 0x24
 801c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
            sep_g = g+1;
 801c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c342:	3301      	adds	r3, #1
 801c344:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        width = s;
 801c346:	6a3b      	ldr	r3, [r7, #32]
 801c348:	63bb      	str	r3, [r7, #56]	; 0x38
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 801c34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c34c:	693a      	ldr	r2, [r7, #16]
 801c34e:	18d0      	adds	r0, r2, r3
 801c350:	68fa      	ldr	r2, [r7, #12]
 801c352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c354:	1ad2      	subs	r2, r2, r3
 801c356:	f107 031c 	add.w	r3, r7, #28
 801c35a:	4619      	mov	r1, r3
 801c35c:	f7ff fc52 	bl	801bc04 <nk_utf_decode>
 801c360:	6438      	str	r0, [r7, #64]	; 0x40
        g++;
 801c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c364:	3301      	adds	r3, #1
 801c366:	633b      	str	r3, [r7, #48]	; 0x30
    while (glyph_len && (width < space) && (len < text_len)) {
 801c368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d00c      	beq.n	801c388 <nk_text_clamp+0x110>
 801c36e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801c372:	edd7 7a02 	vldr	s15, [r7, #8]
 801c376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c37e:	d503      	bpl.n	801c388 <nk_text_clamp+0x110>
 801c380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	429a      	cmp	r2, r3
 801c386:	dba4      	blt.n	801c2d2 <nk_text_clamp+0x5a>
    }
    if (len >= text_len) {
 801c388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	429a      	cmp	r2, r3
 801c38e:	db07      	blt.n	801c3a0 <nk_text_clamp+0x128>
        *glyphs = g;
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c394:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 801c396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c39a:	601a      	str	r2, [r3, #0]
        return len;
 801c39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c39e:	e00b      	b.n	801c3b8 <nk_text_clamp+0x140>
    } else {
        *glyphs = sep_g;
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c3a4:	601a      	str	r2, [r3, #0]
        *text_width = sep_width;
 801c3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3aa:	601a      	str	r2, [r3, #0]
        return (!sep_len) ? len: sep_len;
 801c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d101      	bne.n	801c3b6 <nk_text_clamp+0x13e>
 801c3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3b4:	e000      	b.n	801c3b8 <nk_text_clamp+0x140>
 801c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
}
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	3748      	adds	r7, #72	; 0x48
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}

0801c3c0 <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 801c3c0:	b590      	push	{r4, r7, lr}
 801c3c2:	b08f      	sub	sp, #60	; 0x3c
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
 801c3c8:	6039      	str	r1, [r7, #0]
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d105      	bne.n	801c3dc <nk_widget+0x1c>
 801c3d0:	4b9d      	ldr	r3, [pc, #628]	; (801c648 <nk_widget+0x288>)
 801c3d2:	4a9e      	ldr	r2, [pc, #632]	; (801c64c <nk_widget+0x28c>)
 801c3d4:	218e      	movs	r1, #142	; 0x8e
 801c3d6:	489e      	ldr	r0, [pc, #632]	; (801c650 <nk_widget+0x290>)
 801c3d8:	f001 faca 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801c3dc:	683b      	ldr	r3, [r7, #0]
 801c3de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c3e2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d105      	bne.n	801c3f6 <nk_widget+0x36>
 801c3ea:	4b9a      	ldr	r3, [pc, #616]	; (801c654 <nk_widget+0x294>)
 801c3ec:	4a97      	ldr	r2, [pc, #604]	; (801c64c <nk_widget+0x28c>)
 801c3ee:	218f      	movs	r1, #143	; 0x8f
 801c3f0:	4897      	ldr	r0, [pc, #604]	; (801c650 <nk_widget+0x290>)
 801c3f2:	f001 fabd 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801c3f6:	683b      	ldr	r3, [r7, #0]
 801c3f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c3fc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c404:	2b00      	cmp	r3, #0
 801c406:	d105      	bne.n	801c414 <nk_widget+0x54>
 801c408:	4b93      	ldr	r3, [pc, #588]	; (801c658 <nk_widget+0x298>)
 801c40a:	4a90      	ldr	r2, [pc, #576]	; (801c64c <nk_widget+0x28c>)
 801c40c:	2190      	movs	r1, #144	; 0x90
 801c40e:	4890      	ldr	r0, [pc, #576]	; (801c650 <nk_widget+0x290>)
 801c410:	f001 faae 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d00f      	beq.n	801c43a <nk_widget+0x7a>
 801c41a:	683b      	ldr	r3, [r7, #0]
 801c41c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c420:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c424:	2b00      	cmp	r3, #0
 801c426:	d008      	beq.n	801c43a <nk_widget+0x7a>
 801c428:	683b      	ldr	r3, [r7, #0]
 801c42a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c42e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c436:	2b00      	cmp	r3, #0
 801c438:	d101      	bne.n	801c43e <nk_widget+0x7e>
        return NK_WIDGET_INVALID;
 801c43a:	2300      	movs	r3, #0
 801c43c:	e167      	b.n	801c70e <nk_widget+0x34e>

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 801c43e:	6839      	ldr	r1, [r7, #0]
 801c440:	6878      	ldr	r0, [r7, #4]
 801c442:	f7f7 f8ab 	bl	801359c <nk_panel_alloc_space>
    win = ctx->current;
 801c446:	683b      	ldr	r3, [r7, #0]
 801c448:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c44c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c450:	637b      	str	r3, [r7, #52]	; 0x34
    layout = win->layout;
 801c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c458:	633b      	str	r3, [r7, #48]	; 0x30
    in = &ctx->input;
 801c45a:	683b      	ldr	r3, [r7, #0]
 801c45c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c = layout->clip;
 801c45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c460:	f107 041c 	add.w	r4, r7, #28
 801c464:	333c      	adds	r3, #60	; 0x3c
 801c466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 801c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c46e:	685b      	ldr	r3, [r3, #4]
 801c470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c474:	2b00      	cmp	r3, #0
 801c476:	d005      	beq.n	801c484 <nk_widget+0xc4>
 801c478:	4b78      	ldr	r3, [pc, #480]	; (801c65c <nk_widget+0x29c>)
 801c47a:	4a74      	ldr	r2, [pc, #464]	; (801c64c <nk_widget+0x28c>)
 801c47c:	21a0      	movs	r1, #160	; 0xa0
 801c47e:	4874      	ldr	r0, [pc, #464]	; (801c650 <nk_widget+0x290>)
 801c480:	f001 fa76 	bl	801d970 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 801c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c486:	685b      	ldr	r3, [r3, #4]
 801c488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d005      	beq.n	801c49c <nk_widget+0xdc>
 801c490:	4b73      	ldr	r3, [pc, #460]	; (801c660 <nk_widget+0x2a0>)
 801c492:	4a6e      	ldr	r2, [pc, #440]	; (801c64c <nk_widget+0x28c>)
 801c494:	21a1      	movs	r1, #161	; 0xa1
 801c496:	486e      	ldr	r0, [pc, #440]	; (801c650 <nk_widget+0x290>)
 801c498:	f001 fa6a 	bl	801d970 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 801c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c49e:	685b      	ldr	r3, [r3, #4]
 801c4a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d005      	beq.n	801c4b4 <nk_widget+0xf4>
 801c4a8:	4b6e      	ldr	r3, [pc, #440]	; (801c664 <nk_widget+0x2a4>)
 801c4aa:	4a68      	ldr	r2, [pc, #416]	; (801c64c <nk_widget+0x28c>)
 801c4ac:	21a2      	movs	r1, #162	; 0xa2
 801c4ae:	4868      	ldr	r0, [pc, #416]	; (801c650 <nk_widget+0x290>)
 801c4b0:	f001 fa5e 	bl	801d970 <__assert_func>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	edd3 7a00 	vldr	s15, [r3]
 801c4ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c4be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	edc3 7a00 	vstr	s15, [r3]
    bounds->y = (float)((int)bounds->y);
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	edd3 7a01 	vldr	s15, [r3, #4]
 801c4ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c4d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->w = (float)((int)bounds->w);
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	edd3 7a02 	vldr	s15, [r3, #8]
 801c4e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c4e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	edc3 7a02 	vstr	s15, [r3, #8]
    bounds->h = (float)((int)bounds->h);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	edd3 7a03 	vldr	s15, [r3, #12]
 801c4f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c4fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	edc3 7a03 	vstr	s15, [r3, #12]

    c.x = (float)((int)c.x);
 801c504:	edd7 7a07 	vldr	s15, [r7, #28]
 801c508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c50c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c510:	edc7 7a07 	vstr	s15, [r7, #28]
    c.y = (float)((int)c.y);
 801c514:	edd7 7a08 	vldr	s15, [r7, #32]
 801c518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c51c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c520:	edc7 7a08 	vstr	s15, [r7, #32]
    c.w = (float)((int)c.w);
 801c524:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c52c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c530:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    c.h = (float)((int)c.h);
 801c534:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801c538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c53c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c540:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	edd3 6a00 	vldr	s13, [r3]
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	ed93 6a01 	vldr	s12, [r3, #4]
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	ed93 7a00 	vldr	s14, [r3]
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	edd3 7a02 	vldr	s15, [r3, #8]
 801c55c:	ee77 5a27 	vadd.f32	s11, s14, s15
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	ed93 7a01 	vldr	s14, [r3, #4]
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	edd3 7a03 	vldr	s15, [r3, #12]
 801c56c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c570:	f107 021c 	add.w	r2, r7, #28
 801c574:	f107 030c 	add.w	r3, r7, #12
 801c578:	eef0 1a67 	vmov.f32	s3, s15
 801c57c:	eeb0 1a65 	vmov.f32	s2, s11
 801c580:	eef0 0a46 	vmov.f32	s1, s12
 801c584:	eeb0 0a66 	vmov.f32	s0, s13
 801c588:	4611      	mov	r1, r2
 801c58a:	4618      	mov	r0, r3
 801c58c:	f7f7 f972 	bl	8013874 <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	ed93 7a00 	vldr	s14, [r3]
 801c596:	edd7 6a07 	vldr	s13, [r7, #28]
 801c59a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c5a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5aa:	bf4c      	ite	mi
 801c5ac:	2301      	movmi	r3, #1
 801c5ae:	2300      	movpl	r3, #0
 801c5b0:	b2db      	uxtb	r3, r3
 801c5b2:	f083 0301 	eor.w	r3, r3, #1
 801c5b6:	b2db      	uxtb	r3, r3
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d143      	bne.n	801c644 <nk_widget+0x284>
 801c5bc:	ed97 7a07 	vldr	s14, [r7, #28]
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	edd3 6a00 	vldr	s13, [r3]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	edd3 7a02 	vldr	s15, [r3, #8]
 801c5cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c5d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5d8:	bf4c      	ite	mi
 801c5da:	2301      	movmi	r3, #1
 801c5dc:	2300      	movpl	r3, #0
 801c5de:	b2db      	uxtb	r3, r3
 801c5e0:	f083 0301 	eor.w	r3, r3, #1
 801c5e4:	b2db      	uxtb	r3, r3
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d12c      	bne.n	801c644 <nk_widget+0x284>
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	ed93 7a01 	vldr	s14, [r3, #4]
 801c5f0:	edd7 6a08 	vldr	s13, [r7, #32]
 801c5f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801c5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c5fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c604:	bf4c      	ite	mi
 801c606:	2301      	movmi	r3, #1
 801c608:	2300      	movpl	r3, #0
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	f083 0301 	eor.w	r3, r3, #1
 801c610:	b2db      	uxtb	r3, r3
 801c612:	2b00      	cmp	r3, #0
 801c614:	d116      	bne.n	801c644 <nk_widget+0x284>
 801c616:	ed97 7a08 	vldr	s14, [r7, #32]
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	edd3 6a01 	vldr	s13, [r3, #4]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	edd3 7a03 	vldr	s15, [r3, #12]
 801c626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c62a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c632:	bf4c      	ite	mi
 801c634:	2301      	movmi	r3, #1
 801c636:	2300      	movpl	r3, #0
 801c638:	b2db      	uxtb	r3, r3
 801c63a:	f083 0301 	eor.w	r3, r3, #1
 801c63e:	b2db      	uxtb	r3, r3
 801c640:	2b00      	cmp	r3, #0
 801c642:	d011      	beq.n	801c668 <nk_widget+0x2a8>
        return NK_WIDGET_INVALID;
 801c644:	2300      	movs	r3, #0
 801c646:	e062      	b.n	801c70e <nk_widget+0x34e>
 801c648:	08022160 	.word	0x08022160
 801c64c:	08023758 	.word	0x08023758
 801c650:	08022164 	.word	0x08022164
 801c654:	08022180 	.word	0x08022180
 801c658:	08022190 	.word	0x08022190
 801c65c:	080221a8 	.word	0x080221a8
 801c660:	080221d0 	.word	0x080221d0
 801c664:	080221f4 	.word	0x080221f4
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 801c668:	ed97 7a03 	vldr	s14, [r7, #12]
 801c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c66e:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801c672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c67a:	bf94      	ite	ls
 801c67c:	2301      	movls	r3, #1
 801c67e:	2300      	movhi	r3, #0
 801c680:	b2db      	uxtb	r3, r3
 801c682:	f083 0301 	eor.w	r3, r3, #1
 801c686:	b2db      	uxtb	r3, r3
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d13d      	bne.n	801c708 <nk_widget+0x348>
 801c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c68e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801c692:	edd7 6a03 	vldr	s13, [r7, #12]
 801c696:	edd7 7a05 	vldr	s15, [r7, #20]
 801c69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c69e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6a6:	bf4c      	ite	mi
 801c6a8:	2301      	movmi	r3, #1
 801c6aa:	2300      	movpl	r3, #0
 801c6ac:	b2db      	uxtb	r3, r3
 801c6ae:	f083 0301 	eor.w	r3, r3, #1
 801c6b2:	b2db      	uxtb	r3, r3
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d127      	bne.n	801c708 <nk_widget+0x348>
 801c6b8:	ed97 7a04 	vldr	s14, [r7, #16]
 801c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6be:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801c6c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ca:	bf94      	ite	ls
 801c6cc:	2301      	movls	r3, #1
 801c6ce:	2300      	movhi	r3, #0
 801c6d0:	b2db      	uxtb	r3, r3
 801c6d2:	f083 0301 	eor.w	r3, r3, #1
 801c6d6:	b2db      	uxtb	r3, r3
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d115      	bne.n	801c708 <nk_widget+0x348>
 801c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6de:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801c6e2:	edd7 6a04 	vldr	s13, [r7, #16]
 801c6e6:	edd7 7a06 	vldr	s15, [r7, #24]
 801c6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c6ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6f6:	bf4c      	ite	mi
 801c6f8:	2301      	movmi	r3, #1
 801c6fa:	2300      	movpl	r3, #0
 801c6fc:	b2db      	uxtb	r3, r3
 801c6fe:	f083 0301 	eor.w	r3, r3, #1
 801c702:	b2db      	uxtb	r3, r3
 801c704:	2b00      	cmp	r3, #0
 801c706:	d001      	beq.n	801c70c <nk_widget+0x34c>
        return NK_WIDGET_ROM;
 801c708:	2302      	movs	r3, #2
 801c70a:	e000      	b.n	801c70e <nk_widget+0x34e>
    return NK_WIDGET_VALID;
 801c70c:	2301      	movs	r3, #1
}
 801c70e:	4618      	mov	r0, r3
 801c710:	373c      	adds	r7, #60	; 0x3c
 801c712:	46bd      	mov	sp, r7
 801c714:	bd90      	pop	{r4, r7, pc}
 801c716:	bf00      	nop

0801c718 <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b086      	sub	sp, #24
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	60f8      	str	r0, [r7, #12]
 801c720:	60b9      	str	r1, [r7, #8]
 801c722:	eeb0 7a40 	vmov.f32	s14, s0
 801c726:	eef0 7a60 	vmov.f32	s15, s1
 801c72a:	ed87 7a00 	vstr	s14, [r7]
 801c72e:	edc7 7a01 	vstr	s15, [r7, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 801c732:	68bb      	ldr	r3, [r7, #8]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d105      	bne.n	801c744 <nk_widget_fitting+0x2c>
 801c738:	4b20      	ldr	r3, [pc, #128]	; (801c7bc <nk_widget_fitting+0xa4>)
 801c73a:	4a21      	ldr	r2, [pc, #132]	; (801c7c0 <nk_widget_fitting+0xa8>)
 801c73c:	21be      	movs	r1, #190	; 0xbe
 801c73e:	4821      	ldr	r0, [pc, #132]	; (801c7c4 <nk_widget_fitting+0xac>)
 801c740:	f001 f916 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801c744:	68bb      	ldr	r3, [r7, #8]
 801c746:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c74a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d105      	bne.n	801c75e <nk_widget_fitting+0x46>
 801c752:	4b1d      	ldr	r3, [pc, #116]	; (801c7c8 <nk_widget_fitting+0xb0>)
 801c754:	4a1a      	ldr	r2, [pc, #104]	; (801c7c0 <nk_widget_fitting+0xa8>)
 801c756:	21bf      	movs	r1, #191	; 0xbf
 801c758:	481a      	ldr	r0, [pc, #104]	; (801c7c4 <nk_widget_fitting+0xac>)
 801c75a:	f001 f909 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801c75e:	68bb      	ldr	r3, [r7, #8]
 801c760:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c764:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d105      	bne.n	801c77c <nk_widget_fitting+0x64>
 801c770:	4b16      	ldr	r3, [pc, #88]	; (801c7cc <nk_widget_fitting+0xb4>)
 801c772:	4a13      	ldr	r2, [pc, #76]	; (801c7c0 <nk_widget_fitting+0xa8>)
 801c774:	21c0      	movs	r1, #192	; 0xc0
 801c776:	4813      	ldr	r0, [pc, #76]	; (801c7c4 <nk_widget_fitting+0xac>)
 801c778:	f001 f8fa 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801c77c:	68bb      	ldr	r3, [r7, #8]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d00f      	beq.n	801c7a2 <nk_widget_fitting+0x8a>
 801c782:	68bb      	ldr	r3, [r7, #8]
 801c784:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c788:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d008      	beq.n	801c7a2 <nk_widget_fitting+0x8a>
 801c790:	68bb      	ldr	r3, [r7, #8]
 801c792:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c796:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801c79a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d101      	bne.n	801c7a6 <nk_widget_fitting+0x8e>
        return NK_WIDGET_INVALID;
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	e006      	b.n	801c7b4 <nk_widget_fitting+0x9c>

    state = nk_widget(bounds, ctx);
 801c7a6:	68b9      	ldr	r1, [r7, #8]
 801c7a8:	68f8      	ldr	r0, [r7, #12]
 801c7aa:	f7ff fe09 	bl	801c3c0 <nk_widget>
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	75fb      	strb	r3, [r7, #23]
    return state;
 801c7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	3718      	adds	r7, #24
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}
 801c7bc:	08022160 	.word	0x08022160
 801c7c0:	08023764 	.word	0x08023764
 801c7c4:	08022164 	.word	0x08022164
 801c7c8:	08022180 	.word	0x08022180
 801c7cc:	08022190 	.word	0x08022190

0801c7d0 <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 801c7d0:	b580      	push	{r7, lr}
 801c7d2:	b084      	sub	sp, #16
 801c7d4:	af00      	add	r7, sp, #0
 801c7d6:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801c7d8:	6878      	ldr	r0, [r7, #4]
 801c7da:	f7f7 fabd 	bl	8013d58 <nk_create_page_element>
 801c7de:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d101      	bne.n	801c7ea <nk_create_window+0x1a>
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	e007      	b.n	801c7fa <nk_create_window+0x2a>
    elem->data.win.seq = ctx->seq;
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c7f0:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	601a      	str	r2, [r3, #0]
    return &elem->data.win;
 801c7f8:	68fb      	ldr	r3, [r7, #12]
}
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	3710      	adds	r7, #16
 801c7fe:	46bd      	mov	sp, r7
 801c800:	bd80      	pop	{r7, pc}

0801c802 <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 801c802:	b580      	push	{r7, lr}
 801c804:	b086      	sub	sp, #24
 801c806:	af00      	add	r7, sp, #0
 801c808:	6078      	str	r0, [r7, #4]
 801c80a:	6039      	str	r1, [r7, #0]
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 801c80c:	683b      	ldr	r3, [r7, #0]
 801c80e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801c812:	617b      	str	r3, [r7, #20]
    if (win->popup.win) {
 801c814:	683b      	ldr	r3, [r7, #0]
 801c816:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d00a      	beq.n	801c834 <nk_free_window+0x32>
        nk_free_window(ctx, win->popup.win);
 801c81e:	683b      	ldr	r3, [r7, #0]
 801c820:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801c824:	4619      	mov	r1, r3
 801c826:	6878      	ldr	r0, [r7, #4]
 801c828:	f7ff ffeb 	bl	801c802 <nk_free_window>
        win->popup.win = 0;
 801c82c:	683b      	ldr	r3, [r7, #0]
 801c82e:	2200      	movs	r2, #0
 801c830:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    }
    win->next = 0;
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	2200      	movs	r2, #0
 801c838:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	2200      	movs	r2, #0
 801c840:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    while (it) {
 801c844:	e017      	b.n	801c876 <nk_free_window+0x74>
        /*free window state tables */
        struct nk_table *n = it->next;
 801c846:	697b      	ldr	r3, [r7, #20]
 801c848:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801c84c:	60bb      	str	r3, [r7, #8]
        nk_remove_table(win, it);
 801c84e:	6979      	ldr	r1, [r7, #20]
 801c850:	6838      	ldr	r0, [r7, #0]
 801c852:	f7fe f8fc 	bl	801aa4e <nk_remove_table>
        nk_free_table(ctx, it);
 801c856:	6979      	ldr	r1, [r7, #20]
 801c858:	6878      	ldr	r0, [r7, #4]
 801c85a:	f7fe f8a6 	bl	801a9aa <nk_free_table>
        if (it == win->tables)
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801c864:	697a      	ldr	r2, [r7, #20]
 801c866:	429a      	cmp	r2, r3
 801c868:	d103      	bne.n	801c872 <nk_free_window+0x70>
            win->tables = n;
 801c86a:	683b      	ldr	r3, [r7, #0]
 801c86c:	68ba      	ldr	r2, [r7, #8]
 801c86e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        it = n;
 801c872:	68bb      	ldr	r3, [r7, #8]
 801c874:	617b      	str	r3, [r7, #20]
    while (it) {
 801c876:	697b      	ldr	r3, [r7, #20]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1e4      	bne.n	801c846 <nk_free_window+0x44>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
 801c87c:	683b      	ldr	r3, [r7, #0]
 801c87e:	613b      	str	r3, [r7, #16]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801c880:	693b      	ldr	r3, [r7, #16]
 801c882:	60fb      	str	r3, [r7, #12]
    nk_free_page_element(ctx, pe);}
 801c884:	68f9      	ldr	r1, [r7, #12]
 801c886:	6878      	ldr	r0, [r7, #4]
 801c888:	f7f7 fafd 	bl	8013e86 <nk_free_page_element>
}
 801c88c:	bf00      	nop
 801c88e:	3718      	adds	r7, #24
 801c890:	46bd      	mov	sp, r7
 801c892:	bd80      	pop	{r7, pc}

0801c894 <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b086      	sub	sp, #24
 801c898:	af00      	add	r7, sp, #0
 801c89a:	60f8      	str	r0, [r7, #12]
 801c89c:	60b9      	str	r1, [r7, #8]
 801c89e:	607a      	str	r2, [r7, #4]
    struct nk_window *iter;
    iter = ctx->begin;
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c8a6:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c8aa:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c8ac:	e026      	b.n	801c8fc <nk_find_window+0x68>
        NK_ASSERT(iter != iter->next);
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c8b4:	697a      	ldr	r2, [r7, #20]
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	d105      	bne.n	801c8c6 <nk_find_window+0x32>
 801c8ba:	4b14      	ldr	r3, [pc, #80]	; (801c90c <nk_find_window+0x78>)
 801c8bc:	4a14      	ldr	r2, [pc, #80]	; (801c910 <nk_find_window+0x7c>)
 801c8be:	2133      	movs	r1, #51	; 0x33
 801c8c0:	4814      	ldr	r0, [pc, #80]	; (801c914 <nk_find_window+0x80>)
 801c8c2:	f001 f855 	bl	801d970 <__assert_func>
        if (iter->name == hash) {
 801c8c6:	697b      	ldr	r3, [r7, #20]
 801c8c8:	685b      	ldr	r3, [r3, #4]
 801c8ca:	68ba      	ldr	r2, [r7, #8]
 801c8cc:	429a      	cmp	r2, r3
 801c8ce:	d111      	bne.n	801c8f4 <nk_find_window+0x60>
            int max_len = nk_strlen(iter->name_string);
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	3308      	adds	r3, #8
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	f7ff fb81 	bl	801bfdc <nk_strlen>
 801c8da:	6138      	str	r0, [r7, #16]
            if (!nk_stricmpn(iter->name_string, name, max_len))
 801c8dc:	697b      	ldr	r3, [r7, #20]
 801c8de:	3308      	adds	r3, #8
 801c8e0:	693a      	ldr	r2, [r7, #16]
 801c8e2:	6879      	ldr	r1, [r7, #4]
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7ff fb9f 	bl	801c028 <nk_stricmpn>
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d101      	bne.n	801c8f4 <nk_find_window+0x60>
                return iter;
 801c8f0:	697b      	ldr	r3, [r7, #20]
 801c8f2:	e007      	b.n	801c904 <nk_find_window+0x70>
        }
        iter = iter->next;
 801c8f4:	697b      	ldr	r3, [r7, #20]
 801c8f6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c8fa:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c8fc:	697b      	ldr	r3, [r7, #20]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d1d5      	bne.n	801c8ae <nk_find_window+0x1a>
    }
    return 0;
 801c902:	2300      	movs	r3, #0
}
 801c904:	4618      	mov	r0, r3
 801c906:	3718      	adds	r7, #24
 801c908:	46bd      	mov	sp, r7
 801c90a:	bd80      	pop	{r7, pc}
 801c90c:	08022218 	.word	0x08022218
 801c910:	08023778 	.word	0x08023778
 801c914:	0802222c 	.word	0x0802222c

0801c918 <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b086      	sub	sp, #24
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	60f8      	str	r0, [r7, #12]
 801c920:	60b9      	str	r1, [r7, #8]
 801c922:	4613      	mov	r3, r2
 801c924:	71fb      	strb	r3, [r7, #7]
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d105      	bne.n	801c938 <nk_insert_window+0x20>
 801c92c:	4b6f      	ldr	r3, [pc, #444]	; (801caec <nk_insert_window+0x1d4>)
 801c92e:	4a70      	ldr	r2, [pc, #448]	; (801caf0 <nk_insert_window+0x1d8>)
 801c930:	2142      	movs	r1, #66	; 0x42
 801c932:	4870      	ldr	r0, [pc, #448]	; (801caf4 <nk_insert_window+0x1dc>)
 801c934:	f001 f81c 	bl	801d970 <__assert_func>
    NK_ASSERT(win);
 801c938:	68bb      	ldr	r3, [r7, #8]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d105      	bne.n	801c94a <nk_insert_window+0x32>
 801c93e:	4b6e      	ldr	r3, [pc, #440]	; (801caf8 <nk_insert_window+0x1e0>)
 801c940:	4a6b      	ldr	r2, [pc, #428]	; (801caf0 <nk_insert_window+0x1d8>)
 801c942:	2143      	movs	r1, #67	; 0x43
 801c944:	486b      	ldr	r0, [pc, #428]	; (801caf4 <nk_insert_window+0x1dc>)
 801c946:	f001 f813 	bl	801d970 <__assert_func>
    if (!win || !ctx) return;
 801c94a:	68bb      	ldr	r3, [r7, #8]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	f000 80c6 	beq.w	801cade <nk_insert_window+0x1c6>
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	2b00      	cmp	r3, #0
 801c956:	f000 80c2 	beq.w	801cade <nk_insert_window+0x1c6>

    iter = ctx->begin;
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c960:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c964:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c966:	e01e      	b.n	801c9a6 <nk_insert_window+0x8e>
        NK_ASSERT(iter != iter->next);
 801c968:	697b      	ldr	r3, [r7, #20]
 801c96a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c96e:	697a      	ldr	r2, [r7, #20]
 801c970:	429a      	cmp	r2, r3
 801c972:	d105      	bne.n	801c980 <nk_insert_window+0x68>
 801c974:	4b61      	ldr	r3, [pc, #388]	; (801cafc <nk_insert_window+0x1e4>)
 801c976:	4a5e      	ldr	r2, [pc, #376]	; (801caf0 <nk_insert_window+0x1d8>)
 801c978:	2148      	movs	r1, #72	; 0x48
 801c97a:	485e      	ldr	r0, [pc, #376]	; (801caf4 <nk_insert_window+0x1dc>)
 801c97c:	f000 fff8 	bl	801d970 <__assert_func>
        NK_ASSERT(iter != win);
 801c980:	697a      	ldr	r2, [r7, #20]
 801c982:	68bb      	ldr	r3, [r7, #8]
 801c984:	429a      	cmp	r2, r3
 801c986:	d105      	bne.n	801c994 <nk_insert_window+0x7c>
 801c988:	4b5d      	ldr	r3, [pc, #372]	; (801cb00 <nk_insert_window+0x1e8>)
 801c98a:	4a59      	ldr	r2, [pc, #356]	; (801caf0 <nk_insert_window+0x1d8>)
 801c98c:	2149      	movs	r1, #73	; 0x49
 801c98e:	4859      	ldr	r0, [pc, #356]	; (801caf4 <nk_insert_window+0x1dc>)
 801c990:	f000 ffee 	bl	801d970 <__assert_func>
        if (iter == win) return;
 801c994:	697a      	ldr	r2, [r7, #20]
 801c996:	68bb      	ldr	r3, [r7, #8]
 801c998:	429a      	cmp	r2, r3
 801c99a:	f000 80a2 	beq.w	801cae2 <nk_insert_window+0x1ca>
        iter = iter->next;
 801c99e:	697b      	ldr	r3, [r7, #20]
 801c9a0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801c9a4:	617b      	str	r3, [r7, #20]
    while (iter) {
 801c9a6:	697b      	ldr	r3, [r7, #20]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d1dd      	bne.n	801c968 <nk_insert_window+0x50>
    }

    if (!ctx->begin) {
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c9b2:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d11d      	bne.n	801c9f6 <nk_insert_window+0xde>
        win->next = 0;
 801c9ba:	68bb      	ldr	r3, [r7, #8]
 801c9bc:	2200      	movs	r2, #0
 801c9be:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801c9c2:	68bb      	ldr	r3, [r7, #8]
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c9d0:	461a      	mov	r2, r3
 801c9d2:	68bb      	ldr	r3, [r7, #8]
 801c9d4:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->end = win;
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c9de:	461a      	mov	r2, r3
 801c9e0:	68bb      	ldr	r3, [r7, #8]
 801c9e2:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->count = 1;
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801c9ec:	461a      	mov	r2, r3
 801c9ee:	2301      	movs	r3, #1
 801c9f0:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
        return;
 801c9f4:	e076      	b.n	801cae4 <nk_insert_window+0x1cc>
    }
    if (loc == NK_INSERT_BACK) {
 801c9f6:	79fb      	ldrb	r3, [r7, #7]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d13b      	bne.n	801ca74 <nk_insert_window+0x15c>
        struct nk_window *end;
        end = ctx->end;
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca02:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801ca06:	613b      	str	r3, [r7, #16]
        end->flags |= NK_WINDOW_ROM;
 801ca08:	693b      	ldr	r3, [r7, #16]
 801ca0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801ca10:	693b      	ldr	r3, [r7, #16]
 801ca12:	649a      	str	r2, [r3, #72]	; 0x48
        end->next = win;
 801ca14:	693b      	ldr	r3, [r7, #16]
 801ca16:	68ba      	ldr	r2, [r7, #8]
 801ca18:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = ctx->end;
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca22:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
 801ca26:	68bb      	ldr	r3, [r7, #8]
 801ca28:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = 0;
 801ca2c:	68bb      	ldr	r3, [r7, #8]
 801ca2e:	2200      	movs	r2, #0
 801ca30:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ctx->end = win;
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca3a:	461a      	mov	r2, r3
 801ca3c:	68bb      	ldr	r3, [r7, #8]
 801ca3e:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca48:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801ca4c:	68fa      	ldr	r2, [r7, #12]
 801ca4e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801ca52:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca5c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801ca60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca68:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801ca6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ca70:	649a      	str	r2, [r3, #72]	; 0x48
 801ca72:	e028      	b.n	801cac6 <nk_insert_window+0x1ae>
    } else {
        /*ctx->end->flags |= NK_WINDOW_ROM;*/
        ctx->begin->prev = win;
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca7a:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801ca7e:	68ba      	ldr	r2, [r7, #8]
 801ca80:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = ctx->begin;
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ca8a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 801ca8e:	68bb      	ldr	r3, [r7, #8]
 801ca90:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 801ca94:	68bb      	ldr	r3, [r7, #8]
 801ca96:	2200      	movs	r2, #0
 801ca98:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801caa2:	461a      	mov	r2, r3
 801caa4:	68bb      	ldr	r3, [r7, #8]
 801caa6:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cab0:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801cab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cabc:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801cac0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801cac4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    ctx->count++;
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cacc:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801cad0:	3301      	adds	r3, #1
 801cad2:	68fa      	ldr	r2, [r7, #12]
 801cad4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801cad8:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
 801cadc:	e002      	b.n	801cae4 <nk_insert_window+0x1cc>
    if (!win || !ctx) return;
 801cade:	bf00      	nop
 801cae0:	e000      	b.n	801cae4 <nk_insert_window+0x1cc>
        if (iter == win) return;
 801cae2:	bf00      	nop
}
 801cae4:	3718      	adds	r7, #24
 801cae6:	46bd      	mov	sp, r7
 801cae8:	bd80      	pop	{r7, pc}
 801caea:	bf00      	nop
 801caec:	08022248 	.word	0x08022248
 801caf0:	08023788 	.word	0x08023788
 801caf4:	0802222c 	.word	0x0802222c
 801caf8:	0802224c 	.word	0x0802224c
 801cafc:	08022218 	.word	0x08022218
 801cb00:	08022250 	.word	0x08022250

0801cb04 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
 801cb04:	b480      	push	{r7}
 801cb06:	b083      	sub	sp, #12
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	6039      	str	r1, [r7, #0]
    if (win == ctx->begin || win == ctx->end) {
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb14:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801cb18:	683a      	ldr	r2, [r7, #0]
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	d007      	beq.n	801cb2e <nk_remove_window+0x2a>
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb24:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801cb28:	683a      	ldr	r2, [r7, #0]
 801cb2a:	429a      	cmp	r2, r3
 801cb2c:	d136      	bne.n	801cb9c <nk_remove_window+0x98>
        if (win == ctx->begin) {
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb34:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801cb38:	683a      	ldr	r2, [r7, #0]
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	d112      	bne.n	801cb64 <nk_remove_window+0x60>
            ctx->begin = win->next;
 801cb3e:	683b      	ldr	r3, [r7, #0]
 801cb40:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cb44:	687a      	ldr	r2, [r7, #4]
 801cb46:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801cb4a:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d005      	beq.n	801cb64 <nk_remove_window+0x60>
                win->next->prev = 0;
 801cb58:	683b      	ldr	r3, [r7, #0]
 801cb5a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cb5e:	2200      	movs	r2, #0
 801cb60:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
        if (win == ctx->end) {
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cb6a:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801cb6e:	683a      	ldr	r2, [r7, #0]
 801cb70:	429a      	cmp	r2, r3
 801cb72:	d12e      	bne.n	801cbd2 <nk_remove_window+0xce>
            ctx->end = win->prev;
 801cb74:	683b      	ldr	r3, [r7, #0]
 801cb76:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801cb7a:	687a      	ldr	r2, [r7, #4]
 801cb7c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801cb80:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 801cb84:	683b      	ldr	r3, [r7, #0]
 801cb86:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d021      	beq.n	801cbd2 <nk_remove_window+0xce>
                win->prev->next = 0;
 801cb8e:	683b      	ldr	r3, [r7, #0]
 801cb90:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801cb94:	2200      	movs	r2, #0
 801cb96:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        if (win == ctx->end) {
 801cb9a:	e01a      	b.n	801cbd2 <nk_remove_window+0xce>
        }
    } else {
        if (win->next)
 801cb9c:	683b      	ldr	r3, [r7, #0]
 801cb9e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d007      	beq.n	801cbb6 <nk_remove_window+0xb2>
            win->next->prev = win->prev;
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cbac:	683a      	ldr	r2, [r7, #0]
 801cbae:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 801cbb2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d009      	beq.n	801cbd4 <nk_remove_window+0xd0>
            win->prev->next = win->next;
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 801cbc6:	683a      	ldr	r2, [r7, #0]
 801cbc8:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 801cbcc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 801cbd0:	e000      	b.n	801cbd4 <nk_remove_window+0xd0>
        if (win == ctx->end) {
 801cbd2:	bf00      	nop
    }
    if (win == ctx->active || !ctx->active) {
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cbda:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801cbde:	683a      	ldr	r2, [r7, #0]
 801cbe0:	429a      	cmp	r2, r3
 801cbe2:	d006      	beq.n	801cbf2 <nk_remove_window+0xee>
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cbea:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d11e      	bne.n	801cc30 <nk_remove_window+0x12c>
        ctx->active = ctx->end;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cbf8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801cbfc:	687a      	ldr	r2, [r7, #4]
 801cbfe:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801cc02:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cc0c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d00d      	beq.n	801cc30 <nk_remove_window+0x12c>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cc1a:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801cc1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cc26:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801cc2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801cc2e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    win->next = 0;
 801cc30:	683b      	ldr	r3, [r7, #0]
 801cc32:	2200      	movs	r2, #0
 801cc34:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 801cc38:	683b      	ldr	r3, [r7, #0]
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    ctx->count--;
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cc46:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 801cc4a:	3b01      	subs	r3, #1
 801cc4c:	687a      	ldr	r2, [r7, #4]
 801cc4e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801cc52:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
}
 801cc56:	bf00      	nop
 801cc58:	370c      	adds	r7, #12
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc60:	4770      	bx	lr

0801cc62 <nk_begin>:
NK_API nk_bool
nk_begin(struct nk_context *ctx, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801cc62:	b580      	push	{r7, lr}
 801cc64:	b088      	sub	sp, #32
 801cc66:	af00      	add	r7, sp, #0
 801cc68:	61f8      	str	r0, [r7, #28]
 801cc6a:	61b9      	str	r1, [r7, #24]
 801cc6c:	eeb0 6a40 	vmov.f32	s12, s0
 801cc70:	eef0 6a60 	vmov.f32	s13, s1
 801cc74:	eeb0 7a41 	vmov.f32	s14, s2
 801cc78:	eef0 7a61 	vmov.f32	s15, s3
 801cc7c:	607a      	str	r2, [r7, #4]
 801cc7e:	ed87 6a02 	vstr	s12, [r7, #8]
 801cc82:	edc7 6a03 	vstr	s13, [r7, #12]
 801cc86:	ed87 7a04 	vstr	s14, [r7, #16]
 801cc8a:	edc7 7a05 	vstr	s15, [r7, #20]
    return nk_begin_titled(ctx, title, title, bounds, flags);
 801cc8e:	ed97 6a02 	vldr	s12, [r7, #8]
 801cc92:	edd7 6a03 	vldr	s13, [r7, #12]
 801cc96:	ed97 7a04 	vldr	s14, [r7, #16]
 801cc9a:	edd7 7a05 	vldr	s15, [r7, #20]
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	eeb0 0a46 	vmov.f32	s0, s12
 801cca4:	eef0 0a66 	vmov.f32	s1, s13
 801cca8:	eeb0 1a47 	vmov.f32	s2, s14
 801ccac:	eef0 1a67 	vmov.f32	s3, s15
 801ccb0:	69ba      	ldr	r2, [r7, #24]
 801ccb2:	69b9      	ldr	r1, [r7, #24]
 801ccb4:	69f8      	ldr	r0, [r7, #28]
 801ccb6:	f000 f805 	bl	801ccc4 <nk_begin_titled>
 801ccba:	4603      	mov	r3, r0
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3720      	adds	r7, #32
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}

0801ccc4 <nk_begin_titled>:
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 801ccc4:	b590      	push	{r4, r7, lr}
 801ccc6:	b09f      	sub	sp, #124	; 0x7c
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	61f8      	str	r0, [r7, #28]
 801cccc:	61b9      	str	r1, [r7, #24]
 801ccce:	617a      	str	r2, [r7, #20]
 801ccd0:	eeb0 6a40 	vmov.f32	s12, s0
 801ccd4:	eef0 6a60 	vmov.f32	s13, s1
 801ccd8:	eeb0 7a41 	vmov.f32	s14, s2
 801ccdc:	eef0 7a61 	vmov.f32	s15, s3
 801cce0:	603b      	str	r3, [r7, #0]
 801cce2:	ed87 6a01 	vstr	s12, [r7, #4]
 801cce6:	edc7 6a02 	vstr	s13, [r7, #8]
 801ccea:	ed87 7a03 	vstr	s14, [r7, #12]
 801ccee:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *win;
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	66fb      	str	r3, [r7, #108]	; 0x6c

    NK_ASSERT(ctx);
 801ccf6:	69fb      	ldr	r3, [r7, #28]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d105      	bne.n	801cd08 <nk_begin_titled+0x44>
 801ccfc:	4b8f      	ldr	r3, [pc, #572]	; (801cf3c <nk_begin_titled+0x278>)
 801ccfe:	4a90      	ldr	r2, [pc, #576]	; (801cf40 <nk_begin_titled+0x27c>)
 801cd00:	2197      	movs	r1, #151	; 0x97
 801cd02:	4890      	ldr	r0, [pc, #576]	; (801cf44 <nk_begin_titled+0x280>)
 801cd04:	f000 fe34 	bl	801d970 <__assert_func>
    NK_ASSERT(name);
 801cd08:	69bb      	ldr	r3, [r7, #24]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d105      	bne.n	801cd1a <nk_begin_titled+0x56>
 801cd0e:	4b8e      	ldr	r3, [pc, #568]	; (801cf48 <nk_begin_titled+0x284>)
 801cd10:	4a8b      	ldr	r2, [pc, #556]	; (801cf40 <nk_begin_titled+0x27c>)
 801cd12:	2198      	movs	r1, #152	; 0x98
 801cd14:	488b      	ldr	r0, [pc, #556]	; (801cf44 <nk_begin_titled+0x280>)
 801cd16:	f000 fe2b 	bl	801d970 <__assert_func>
    NK_ASSERT(title);
 801cd1a:	697b      	ldr	r3, [r7, #20]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d105      	bne.n	801cd2c <nk_begin_titled+0x68>
 801cd20:	4b8a      	ldr	r3, [pc, #552]	; (801cf4c <nk_begin_titled+0x288>)
 801cd22:	4a87      	ldr	r2, [pc, #540]	; (801cf40 <nk_begin_titled+0x27c>)
 801cd24:	2199      	movs	r1, #153	; 0x99
 801cd26:	4887      	ldr	r0, [pc, #540]	; (801cf44 <nk_begin_titled+0x280>)
 801cd28:	f000 fe22 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 801cd2c:	69fb      	ldr	r3, [r7, #28]
 801cd2e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d005      	beq.n	801cd42 <nk_begin_titled+0x7e>
 801cd36:	69fb      	ldr	r3, [r7, #28]
 801cd38:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801cd3c:	689b      	ldr	r3, [r3, #8]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d105      	bne.n	801cd4e <nk_begin_titled+0x8a>
 801cd42:	4b83      	ldr	r3, [pc, #524]	; (801cf50 <nk_begin_titled+0x28c>)
 801cd44:	4a7e      	ldr	r2, [pc, #504]	; (801cf40 <nk_begin_titled+0x27c>)
 801cd46:	219a      	movs	r1, #154	; 0x9a
 801cd48:	487e      	ldr	r0, [pc, #504]	; (801cf44 <nk_begin_titled+0x280>)
 801cd4a:	f000 fe11 	bl	801d970 <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 801cd4e:	69fb      	ldr	r3, [r7, #28]
 801cd50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cd54:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d005      	beq.n	801cd68 <nk_begin_titled+0xa4>
 801cd5c:	4b7d      	ldr	r3, [pc, #500]	; (801cf54 <nk_begin_titled+0x290>)
 801cd5e:	4a78      	ldr	r2, [pc, #480]	; (801cf40 <nk_begin_titled+0x27c>)
 801cd60:	219b      	movs	r1, #155	; 0x9b
 801cd62:	4878      	ldr	r0, [pc, #480]	; (801cf44 <nk_begin_titled+0x280>)
 801cd64:	f000 fe04 	bl	801d970 <__assert_func>
    if (!ctx || ctx->current || !title || !name)
 801cd68:	69fb      	ldr	r3, [r7, #28]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d00c      	beq.n	801cd88 <nk_begin_titled+0xc4>
 801cd6e:	69fb      	ldr	r3, [r7, #28]
 801cd70:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cd74:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d105      	bne.n	801cd88 <nk_begin_titled+0xc4>
 801cd7c:	697b      	ldr	r3, [r7, #20]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d002      	beq.n	801cd88 <nk_begin_titled+0xc4>
 801cd82:	69bb      	ldr	r3, [r7, #24]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d101      	bne.n	801cd8c <nk_begin_titled+0xc8>
        return 0;
 801cd88:	2300      	movs	r3, #0
 801cd8a:	e3d7      	b.n	801d53c <nk_begin_titled+0x878>

    /* find or create window */
    style = &ctx->style;
 801cd8c:	69fb      	ldr	r3, [r7, #28]
 801cd8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801cd92:	66bb      	str	r3, [r7, #104]	; 0x68
    name_len = (int)nk_strlen(name);
 801cd94:	69b8      	ldr	r0, [r7, #24]
 801cd96:	f7ff f921 	bl	801bfdc <nk_strlen>
 801cd9a:	6678      	str	r0, [r7, #100]	; 0x64
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 801cd9c:	2240      	movs	r2, #64	; 0x40
 801cd9e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801cda0:	69b8      	ldr	r0, [r7, #24]
 801cda2:	f7ff f99b 	bl	801c0dc <nk_murmur_hash>
 801cda6:	6638      	str	r0, [r7, #96]	; 0x60
    win = nk_find_window(ctx, name_hash, name);
 801cda8:	69ba      	ldr	r2, [r7, #24]
 801cdaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801cdac:	69f8      	ldr	r0, [r7, #28]
 801cdae:	f7ff fd71 	bl	801c894 <nk_find_window>
 801cdb2:	6778      	str	r0, [r7, #116]	; 0x74
    if (!win) {
 801cdb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d160      	bne.n	801ce7c <nk_begin_titled+0x1b8>
        /* create new window */
        nk_size name_length = (nk_size)name_len;
 801cdba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cdbc:	65fb      	str	r3, [r7, #92]	; 0x5c
        win = (struct nk_window*)nk_create_window(ctx);
 801cdbe:	69f8      	ldr	r0, [r7, #28]
 801cdc0:	f7ff fd06 	bl	801c7d0 <nk_create_window>
 801cdc4:	6778      	str	r0, [r7, #116]	; 0x74
        NK_ASSERT(win);
 801cdc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d105      	bne.n	801cdd8 <nk_begin_titled+0x114>
 801cdcc:	4b62      	ldr	r3, [pc, #392]	; (801cf58 <nk_begin_titled+0x294>)
 801cdce:	4a5c      	ldr	r2, [pc, #368]	; (801cf40 <nk_begin_titled+0x27c>)
 801cdd0:	21a8      	movs	r1, #168	; 0xa8
 801cdd2:	485c      	ldr	r0, [pc, #368]	; (801cf44 <nk_begin_titled+0x280>)
 801cdd4:	f000 fdcc 	bl	801d970 <__assert_func>
        if (!win) return 0;
 801cdd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d101      	bne.n	801cde2 <nk_begin_titled+0x11e>
 801cdde:	2300      	movs	r3, #0
 801cde0:	e3ac      	b.n	801d53c <nk_begin_titled+0x878>

        if (flags & NK_WINDOW_BACKGROUND)
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d005      	beq.n	801cdf8 <nk_begin_titled+0x134>
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 801cdec:	2201      	movs	r2, #1
 801cdee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cdf0:	69f8      	ldr	r0, [r7, #28]
 801cdf2:	f7ff fd91 	bl	801c918 <nk_insert_window>
 801cdf6:	e004      	b.n	801ce02 <nk_begin_titled+0x13e>
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 801cdf8:	2200      	movs	r2, #0
 801cdfa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cdfc:	69f8      	ldr	r0, [r7, #28]
 801cdfe:	f7ff fd8b 	bl	801c918 <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 801ce02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce04:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801ce08:	69fb      	ldr	r3, [r7, #28]
 801ce0a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801ce0e:	330c      	adds	r3, #12
 801ce10:	2201      	movs	r2, #1
 801ce12:	4619      	mov	r1, r3
 801ce14:	f7f3 fcac 	bl	8010770 <nk_command_buffer_init>

        win->flags = flags;
 801ce18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce1a:	683a      	ldr	r2, [r7, #0]
 801ce1c:	649a      	str	r2, [r3, #72]	; 0x48
        win->bounds = bounds;
 801ce1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce20:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801ce24:	1d3b      	adds	r3, r7, #4
 801ce26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ce28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        win->name = name_hash;
 801ce2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ce30:	605a      	str	r2, [r3, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 801ce32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ce34:	2b3f      	cmp	r3, #63	; 0x3f
 801ce36:	bf28      	it	cs
 801ce38:	233f      	movcs	r3, #63	; 0x3f
 801ce3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        NK_MEMCPY(win->name_string, name, name_length);
 801ce3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce3e:	3308      	adds	r3, #8
 801ce40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ce42:	69b9      	ldr	r1, [r7, #24]
 801ce44:	4618      	mov	r0, r3
 801ce46:	f7fe ff5b 	bl	801bd00 <nk_memcopy>
        win->name_string[name_length] = 0;
 801ce4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ce4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ce4e:	4413      	add	r3, r2
 801ce50:	3308      	adds	r3, #8
 801ce52:	2200      	movs	r2, #0
 801ce54:	701a      	strb	r2, [r3, #0]
        win->popup.win = 0;
 801ce56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce58:	2200      	movs	r2, #0
 801ce5a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        if (!ctx->active)
 801ce5e:	69fb      	ldr	r3, [r7, #28]
 801ce60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ce64:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d153      	bne.n	801cf14 <nk_begin_titled+0x250>
            ctx->active = win;
 801ce6c:	69fb      	ldr	r3, [r7, #28]
 801ce6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ce72:	461a      	mov	r2, r3
 801ce74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce76:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
 801ce7a:	e04b      	b.n	801cf14 <nk_begin_titled+0x250>
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 801ce7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ce84:	f023 0307 	bic.w	r3, r3, #7
 801ce88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ce8a:	6493      	str	r3, [r2, #72]	; 0x48
        win->flags |= flags;
 801ce8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ce90:	683b      	ldr	r3, [r7, #0]
 801ce92:	431a      	orrs	r2, r3
 801ce94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce96:	649a      	str	r2, [r3, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 801ce98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ce9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce9c:	f003 0306 	and.w	r3, r3, #6
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d106      	bne.n	801ceb2 <nk_begin_titled+0x1ee>
            win->bounds = bounds;
 801cea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cea6:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 801ceaa:	1d3b      	adds	r3, r7, #4
 801ceac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ceae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 801ceb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ceb4:	681a      	ldr	r2, [r3, #0]
 801ceb6:	69fb      	ldr	r3, [r7, #28]
 801ceb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cebc:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801cec0:	429a      	cmp	r2, r3
 801cec2:	d105      	bne.n	801ced0 <nk_begin_titled+0x20c>
 801cec4:	4b25      	ldr	r3, [pc, #148]	; (801cf5c <nk_begin_titled+0x298>)
 801cec6:	4a1e      	ldr	r2, [pc, #120]	; (801cf40 <nk_begin_titled+0x27c>)
 801cec8:	21c6      	movs	r1, #198	; 0xc6
 801ceca:	481e      	ldr	r0, [pc, #120]	; (801cf44 <nk_begin_titled+0x280>)
 801cecc:	f000 fd50 	bl	801d970 <__assert_func>
        win->seq = ctx->seq;
 801ced0:	69fb      	ldr	r3, [r7, #28]
 801ced2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801ced6:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 801ceda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cedc:	601a      	str	r2, [r3, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 801cede:	69fb      	ldr	r3, [r7, #28]
 801cee0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cee4:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d113      	bne.n	801cf14 <nk_begin_titled+0x250>
 801ceec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ceee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d10d      	bne.n	801cf14 <nk_begin_titled+0x250>
            ctx->active = win;
 801cef8:	69fb      	ldr	r3, [r7, #28]
 801cefa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cefe:	461a      	mov	r2, r3
 801cf00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf02:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = win;
 801cf06:	69fb      	ldr	r3, [r7, #28]
 801cf08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cf0c:	461a      	mov	r2, r3
 801cf0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf10:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 801cf14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d01f      	beq.n	801cf60 <nk_begin_titled+0x29c>
        ctx->current = win;
 801cf20:	69fb      	ldr	r3, [r7, #28]
 801cf22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801cf26:	461a      	mov	r2, r3
 801cf28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf2a:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        win->layout = 0;
 801cf2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf30:	2200      	movs	r2, #0
 801cf32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 801cf36:	2300      	movs	r3, #0
 801cf38:	e300      	b.n	801d53c <nk_begin_titled+0x878>
 801cf3a:	bf00      	nop
 801cf3c:	08022248 	.word	0x08022248
 801cf40:	0802379c 	.word	0x0802379c
 801cf44:	0802222c 	.word	0x0802222c
 801cf48:	0802225c 	.word	0x0802225c
 801cf4c:	08022264 	.word	0x08022264
 801cf50:	0802226c 	.word	0x0802226c
 801cf54:	080222c8 	.word	0x080222c8
 801cf58:	0802224c 	.word	0x0802224c
 801cf5c:	08022308 	.word	0x08022308
    } else nk_start(ctx, win);
 801cf60:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801cf62:	69f8      	ldr	r0, [r7, #28]
 801cf64:	f7f2 ff1a 	bl	800fd9c <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 801cf68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	f040 82c2 	bne.w	801d4fa <nk_begin_titled+0x836>
 801cf76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	f040 82bb 	bne.w	801d4fa <nk_begin_titled+0x836>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
 801cf84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf86:	673b      	str	r3, [r7, #112]	; 0x70
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801cf88:	69fb      	ldr	r3, [r7, #28]
 801cf8a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801cf8e:	ed93 7a01 	vldr	s14, [r3, #4]
 801cf92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cf98:	f603 0344 	addw	r3, r3, #2116	; 0x844
 801cf9c:	edd3 7a00 	vldr	s15, [r3]
 801cfa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cfa4:	ee37 7a27 	vadd.f32	s14, s14, s15
            (2.0f * style->window.header.label_padding.y);
 801cfa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cfaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cfae:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 801cfb2:	edd3 7a00 	vldr	s15, [r3]
 801cfb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 801cfba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cfbe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 801cfc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cfc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d107      	bne.n	801cfde <nk_begin_titled+0x31a>
 801cfce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cfd0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801cfd4:	334c      	adds	r3, #76	; 0x4c
 801cfd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cfd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cfdc:	e022      	b.n	801d024 <nk_begin_titled+0x360>
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 801cfde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cfe0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801cfe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cfe6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801cfea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cfec:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801cff0:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801cff4:	eeb0 1a66 	vmov.f32	s2, s13
 801cff8:	eef0 0a47 	vmov.f32	s1, s14
 801cffc:	eeb0 0a67 	vmov.f32	s0, s15
 801d000:	f7f6 fb64 	bl	80136cc <nk_rect>
 801d004:	eeb0 6a40 	vmov.f32	s12, s0
 801d008:	eef0 6a60 	vmov.f32	s13, s1
 801d00c:	eeb0 7a41 	vmov.f32	s14, s2
 801d010:	eef0 7a61 	vmov.f32	s15, s3
 801d014:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 801d018:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 801d01c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 801d020:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 801d024:	69fb      	ldr	r3, [r7, #28]
 801d026:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801d02a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d02e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801d032:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d036:	2201      	movs	r2, #1
 801d038:	eeb0 0a46 	vmov.f32	s0, s12
 801d03c:	eef0 0a66 	vmov.f32	s1, s13
 801d040:	eeb0 1a47 	vmov.f32	s2, s14
 801d044:	eef0 1a67 	vmov.f32	s3, s15
 801d048:	2100      	movs	r1, #0
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7f5 f9dc 	bl	8012408 <nk_input_has_mouse_click_down_in_rect>
 801d050:	6578      	str	r0, [r7, #84]	; 0x54
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 801d052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d054:	2b00      	cmp	r3, #0
 801d056:	d006      	beq.n	801d066 <nk_begin_titled+0x3a2>
 801d058:	69fb      	ldr	r3, [r7, #28]
 801d05a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d001      	beq.n	801d066 <nk_begin_titled+0x3a2>
 801d062:	2301      	movs	r3, #1
 801d064:	e000      	b.n	801d068 <nk_begin_titled+0x3a4>
 801d066:	2300      	movs	r3, #0
 801d068:	657b      	str	r3, [r7, #84]	; 0x54
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 801d06a:	69fb      	ldr	r3, [r7, #28]
 801d06c:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 801d070:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d074:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801d078:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d07c:	eeb0 0a46 	vmov.f32	s0, s12
 801d080:	eef0 0a66 	vmov.f32	s1, s13
 801d084:	eeb0 1a47 	vmov.f32	s2, s14
 801d088:	eef0 1a67 	vmov.f32	s3, s15
 801d08c:	4618      	mov	r0, r3
 801d08e:	f7f5 fa02 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 801d092:	6538      	str	r0, [r7, #80]	; 0x50
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 801d094:	69fb      	ldr	r3, [r7, #28]
 801d096:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d09a:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 801d09e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d0a0:	429a      	cmp	r2, r3
 801d0a2:	f000 80de 	beq.w	801d262 <nk_begin_titled+0x59e>
 801d0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	f000 80da 	beq.w	801d262 <nk_begin_titled+0x59e>
 801d0ae:	69fb      	ldr	r3, [r7, #28]
 801d0b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	f040 80d4 	bne.w	801d262 <nk_begin_titled+0x59e>
            iter = win->next;
 801d0ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d0bc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d0c0:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d0c2:	e0c6      	b.n	801d252 <nk_begin_titled+0x58e>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801d0c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d0c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d107      	bne.n	801d0e0 <nk_begin_titled+0x41c>
 801d0d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0d2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801d0d6:	334c      	adds	r3, #76	; 0x4c
 801d0d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d0da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d0de:	e022      	b.n	801d126 <nk_begin_titled+0x462>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801d0e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0e2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801d0e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0e8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d0ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0ee:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801d0f2:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801d0f6:	eeb0 1a66 	vmov.f32	s2, s13
 801d0fa:	eef0 0a47 	vmov.f32	s1, s14
 801d0fe:	eeb0 0a67 	vmov.f32	s0, s15
 801d102:	f7f6 fae3 	bl	80136cc <nk_rect>
 801d106:	eeb0 6a40 	vmov.f32	s12, s0
 801d10a:	eef0 6a60 	vmov.f32	s13, s1
 801d10e:	eeb0 7a41 	vmov.f32	s14, s2
 801d112:	eef0 7a61 	vmov.f32	s15, s3
 801d116:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 801d11a:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 801d11e:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 801d122:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d126:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801d12a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801d12e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801d132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d13e:	d52c      	bpl.n	801d19a <nk_begin_titled+0x4d6>
 801d140:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801d144:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801d148:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801d14c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d158:	d51f      	bpl.n	801d19a <nk_begin_titled+0x4d6>
 801d15a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801d15e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d162:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d16a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d172:	d512      	bpl.n	801d19a <nk_begin_titled+0x4d6>
 801d174:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801d178:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801d17c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801d180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d18c:	d505      	bpl.n	801d19a <nk_begin_titled+0x4d6>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 801d18e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801d196:	2b00      	cmp	r3, #0
 801d198:	d060      	beq.n	801d25c <nk_begin_titled+0x598>
                    break;

                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801d19a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d19c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d052      	beq.n	801d24a <nk_begin_titled+0x586>
 801d1a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d04d      	beq.n	801d24a <nk_begin_titled+0x586>
 801d1ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d1b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d147      	bne.n	801d24a <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d1ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1bc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d1c0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801d1c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1c6:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801d1ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801d1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801d1d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1da:	d536      	bpl.n	801d24a <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d1dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1de:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801d1e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d1e8:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801d1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d1f2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801d1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d1fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d202:	d522      	bpl.n	801d24a <nk_begin_titled+0x586>
 801d204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d206:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d20a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d20e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d212:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d21a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d222:	d512      	bpl.n	801d24a <nk_begin_titled+0x586>
 801d224:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801d228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d22a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d22e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801d232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d234:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d238:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801d23c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d248:	d40a      	bmi.n	801d260 <nk_begin_titled+0x59c>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801d24a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d24c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d250:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d254:	2b00      	cmp	r3, #0
 801d256:	f47f af35 	bne.w	801d0c4 <nk_begin_titled+0x400>
 801d25a:	e002      	b.n	801d262 <nk_begin_titled+0x59e>
                    break;
 801d25c:	bf00      	nop
 801d25e:	e000      	b.n	801d262 <nk_begin_titled+0x59e>
                    break;
 801d260:	bf00      	nop
            }
        }

        /* activate window if clicked */
        if (iter && inpanel && (win != ctx->end)) {
 801d262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d264:	2b00      	cmp	r3, #0
 801d266:	f000 80db 	beq.w	801d420 <nk_begin_titled+0x75c>
 801d26a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	f000 80d7 	beq.w	801d420 <nk_begin_titled+0x75c>
 801d272:	69fb      	ldr	r3, [r7, #28]
 801d274:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d278:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d27c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d27e:	429a      	cmp	r2, r3
 801d280:	f000 80ce 	beq.w	801d420 <nk_begin_titled+0x75c>
            iter = win->next;
 801d284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d286:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d28a:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d28c:	e0c0      	b.n	801d410 <nk_begin_titled+0x74c>
                /* try to find a panel with higher priority in the same position */
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 801d28e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d296:	2b00      	cmp	r3, #0
 801d298:	d107      	bne.n	801d2aa <nk_begin_titled+0x5e6>
 801d29a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d29c:	f107 0420 	add.w	r4, r7, #32
 801d2a0:	334c      	adds	r3, #76	; 0x4c
 801d2a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d2a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d2a8:	e022      	b.n	801d2f0 <nk_begin_titled+0x62c>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 801d2aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2ac:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801d2b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2b2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d2b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2b8:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801d2bc:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 801d2c0:	eeb0 1a66 	vmov.f32	s2, s13
 801d2c4:	eef0 0a47 	vmov.f32	s1, s14
 801d2c8:	eeb0 0a67 	vmov.f32	s0, s15
 801d2cc:	f7f6 f9fe 	bl	80136cc <nk_rect>
 801d2d0:	eeb0 6a40 	vmov.f32	s12, s0
 801d2d4:	eef0 6a60 	vmov.f32	s13, s1
 801d2d8:	eeb0 7a41 	vmov.f32	s14, s2
 801d2dc:	eef0 7a61 	vmov.f32	s15, s3
 801d2e0:	ed87 6a08 	vstr	s12, [r7, #32]
 801d2e4:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 801d2e8:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 801d2ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 801d2f0:	ed97 7a08 	vldr	s14, [r7, #32]
 801d2f4:	69fb      	ldr	r3, [r7, #28]
 801d2f6:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801d2fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d302:	d82b      	bhi.n	801d35c <nk_begin_titled+0x698>
 801d304:	69fb      	ldr	r3, [r7, #28]
 801d306:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801d30a:	edd7 6a08 	vldr	s13, [r7, #32]
 801d30e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801d312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d31e:	d51d      	bpl.n	801d35c <nk_begin_titled+0x698>
 801d320:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801d324:	69fb      	ldr	r3, [r7, #28]
 801d326:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 801d32a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d332:	d813      	bhi.n	801d35c <nk_begin_titled+0x698>
 801d334:	69fb      	ldr	r3, [r7, #28]
 801d336:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801d33a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801d33e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801d342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d34e:	d505      	bpl.n	801d35c <nk_begin_titled+0x698>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    !(iter->flags & NK_WINDOW_HIDDEN))
 801d350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d05e      	beq.n	801d41a <nk_begin_titled+0x756>
                    break;
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801d35c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d35e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d362:	2b00      	cmp	r3, #0
 801d364:	d050      	beq.n	801d408 <nk_begin_titled+0x744>
 801d366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d368:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d04b      	beq.n	801d408 <nk_begin_titled+0x744>
 801d370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d145      	bne.n	801d408 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d37c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d37e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d382:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801d386:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801d38a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801d38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 801d392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d39a:	d535      	bpl.n	801d408 <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 801d39c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801d3a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d3a6:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801d3aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d3b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 801d3b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d3b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3c0:	d522      	bpl.n	801d408 <nk_begin_titled+0x744>
 801d3c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d3c8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801d3cc:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801d3d0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801d3d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d3d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3e0:	d512      	bpl.n	801d408 <nk_begin_titled+0x744>
 801d3e2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801d3e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d3ec:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 801d3f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801d3f6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 801d3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d3fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d406:	d40a      	bmi.n	801d41e <nk_begin_titled+0x75a>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 801d408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d40a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801d40e:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 801d410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d412:	2b00      	cmp	r3, #0
 801d414:	f47f af3b 	bne.w	801d28e <nk_begin_titled+0x5ca>
 801d418:	e002      	b.n	801d420 <nk_begin_titled+0x75c>
                    break;
 801d41a:	bf00      	nop
 801d41c:	e000      	b.n	801d420 <nk_begin_titled+0x75c>
                    break;
 801d41e:	bf00      	nop
            }
        }
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 801d420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d422:	2b00      	cmp	r3, #0
 801d424:	d02e      	beq.n	801d484 <nk_begin_titled+0x7c0>
 801d426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d42a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d128      	bne.n	801d484 <nk_begin_titled+0x7c0>
 801d432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d022      	beq.n	801d484 <nk_begin_titled+0x7c0>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 801d43e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d442:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d448:	649a      	str	r2, [r3, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d44a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d44e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d454:	649a      	str	r2, [r3, #72]	; 0x48
            ctx->active = iter;
 801d456:	69fb      	ldr	r3, [r7, #28]
 801d458:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d45c:	461a      	mov	r2, r3
 801d45e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d460:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801d464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d144      	bne.n	801d4fa <nk_begin_titled+0x836>
                /* current window is active in that position so transfer to top
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
 801d470:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d472:	69f8      	ldr	r0, [r7, #28]
 801d474:	f7ff fb46 	bl	801cb04 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 801d478:	2200      	movs	r2, #0
 801d47a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d47c:	69f8      	ldr	r0, [r7, #28]
 801d47e:	f7ff fa4b 	bl	801c918 <nk_insert_window>
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 801d482:	e03a      	b.n	801d4fa <nk_begin_titled+0x836>
            }
        } else {
            if (!iter && ctx->end != win) {
 801d484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d486:	2b00      	cmp	r3, #0
 801d488:	d123      	bne.n	801d4d2 <nk_begin_titled+0x80e>
 801d48a:	69fb      	ldr	r3, [r7, #28]
 801d48c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d490:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d494:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d496:	429a      	cmp	r2, r3
 801d498:	d01b      	beq.n	801d4d2 <nk_begin_titled+0x80e>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 801d49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d49c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	d108      	bne.n	801d4b8 <nk_begin_titled+0x7f4>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
 801d4a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d4a8:	69f8      	ldr	r0, [r7, #28]
 801d4aa:	f7ff fb2b 	bl	801cb04 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d4b2:	69f8      	ldr	r0, [r7, #28]
 801d4b4:	f7ff fa30 	bl	801c918 <nk_insert_window>
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 801d4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d4bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d4c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4c2:	649a      	str	r2, [r3, #72]	; 0x48
                ctx->active = win;
 801d4c4:	69fb      	ldr	r3, [r7, #28]
 801d4c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d4ca:	461a      	mov	r2, r3
 801d4cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4ce:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            }
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 801d4d2:	69fb      	ldr	r3, [r7, #28]
 801d4d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d4d8:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 801d4dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d4de:	429a      	cmp	r2, r3
 801d4e0:	d00b      	beq.n	801d4fa <nk_begin_titled+0x836>
 801d4e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d105      	bne.n	801d4fa <nk_begin_titled+0x836>
                win->flags |= NK_WINDOW_ROM;
 801d4ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d4f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d4f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4f8:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 801d4fa:	69f8      	ldr	r0, [r7, #28]
 801d4fc:	f7f6 fcfc 	bl	8013ef8 <nk_create_panel>
 801d500:	4602      	mov	r2, r0
 801d502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ctx->current = win;
 801d508:	69fb      	ldr	r3, [r7, #28]
 801d50a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d50e:	461a      	mov	r2, r3
 801d510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d512:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 801d516:	2201      	movs	r2, #1
 801d518:	6979      	ldr	r1, [r7, #20]
 801d51a:	69f8      	ldr	r0, [r7, #28]
 801d51c:	f7f6 ff5a 	bl	80143d4 <nk_panel_begin>
 801d520:	66f8      	str	r0, [r7, #108]	; 0x6c
    win->layout->offset_x = &win->scrollbar.x;
 801d522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d528:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d52a:	325c      	adds	r2, #92	; 0x5c
 801d52c:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 801d52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d534:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d536:	3260      	adds	r2, #96	; 0x60
 801d538:	61da      	str	r2, [r3, #28]
    return ret;
 801d53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 801d53c:	4618      	mov	r0, r3
 801d53e:	377c      	adds	r7, #124	; 0x7c
 801d540:	46bd      	mov	sp, r7
 801d542:	bd90      	pop	{r4, r7, pc}

0801d544 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 801d544:	b580      	push	{r7, lr}
 801d546:	b084      	sub	sp, #16
 801d548:	af00      	add	r7, sp, #0
 801d54a:	6078      	str	r0, [r7, #4]
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d106      	bne.n	801d560 <nk_end+0x1c>
 801d552:	4b2d      	ldr	r3, [pc, #180]	; (801d608 <nk_end+0xc4>)
 801d554:	4a2d      	ldr	r2, [pc, #180]	; (801d60c <nk_end+0xc8>)
 801d556:	f240 112b 	movw	r1, #299	; 0x12b
 801d55a:	482d      	ldr	r0, [pc, #180]	; (801d610 <nk_end+0xcc>)
 801d55c:	f000 fa08 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d566:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d106      	bne.n	801d57c <nk_end+0x38>
 801d56e:	4b29      	ldr	r3, [pc, #164]	; (801d614 <nk_end+0xd0>)
 801d570:	4a26      	ldr	r2, [pc, #152]	; (801d60c <nk_end+0xc8>)
 801d572:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801d576:	4826      	ldr	r0, [pc, #152]	; (801d610 <nk_end+0xcc>)
 801d578:	f000 f9fa 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current)
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d03d      	beq.n	801d5fe <nk_end+0xba>
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d588:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d036      	beq.n	801d5fe <nk_end+0xba>
        return;

    layout = ctx->current->layout;
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d596:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d59e:	60fb      	str	r3, [r7, #12]
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d00d      	beq.n	801d5c2 <nk_end+0x7e>
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	781b      	ldrb	r3, [r3, #0]
 801d5aa:	2b01      	cmp	r3, #1
 801d5ac:	d111      	bne.n	801d5d2 <nk_end+0x8e>
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5b4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d5ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d007      	beq.n	801d5d2 <nk_end+0x8e>
        ctx->current = 0;
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5c8:	461a      	mov	r2, r3
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        return;
 801d5d0:	e016      	b.n	801d600 <nk_end+0xbc>
    }
    nk_panel_end(ctx);
 801d5d2:	6878      	ldr	r0, [r7, #4]
 801d5d4:	f7f7 fe40 	bl	8015258 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5de:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d5e6:	4619      	mov	r1, r3
 801d5e8:	6878      	ldr	r0, [r7, #4]
 801d5ea:	f7f6 fc9c 	bl	8013f26 <nk_free_panel>
    ctx->current = 0;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d5f4:	461a      	mov	r2, r3
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
 801d5fc:	e000      	b.n	801d600 <nk_end+0xbc>
        return;
 801d5fe:	bf00      	nop
}
 801d600:	3710      	adds	r7, #16
 801d602:	46bd      	mov	sp, r7
 801d604:	bd80      	pop	{r7, pc}
 801d606:	bf00      	nop
 801d608:	08022248 	.word	0x08022248
 801d60c:	080237ac 	.word	0x080237ac
 801d610:	0802222c 	.word	0x0802222c
 801d614:	08022320 	.word	0x08022320

0801d618 <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 801d618:	b590      	push	{r4, r7, lr}
 801d61a:	b087      	sub	sp, #28
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d106      	bne.n	801d634 <nk_window_is_hovered+0x1c>
 801d626:	4b31      	ldr	r3, [pc, #196]	; (801d6ec <nk_window_is_hovered+0xd4>)
 801d628:	4a31      	ldr	r2, [pc, #196]	; (801d6f0 <nk_window_is_hovered+0xd8>)
 801d62a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801d62e:	4831      	ldr	r0, [pc, #196]	; (801d6f4 <nk_window_is_hovered+0xdc>)
 801d630:	f000 f99e 	bl	801d970 <__assert_func>
    NK_ASSERT(ctx->current);
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d63a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d106      	bne.n	801d650 <nk_window_is_hovered+0x38>
 801d642:	4b2d      	ldr	r3, [pc, #180]	; (801d6f8 <nk_window_is_hovered+0xe0>)
 801d644:	4a2a      	ldr	r2, [pc, #168]	; (801d6f0 <nk_window_is_hovered+0xd8>)
 801d646:	f240 11b1 	movw	r1, #433	; 0x1b1
 801d64a:	482a      	ldr	r0, [pc, #168]	; (801d6f4 <nk_window_is_hovered+0xdc>)
 801d64c:	f000 f990 	bl	801d970 <__assert_func>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d010      	beq.n	801d678 <nk_window_is_hovered+0x60>
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d65c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d660:	2b00      	cmp	r3, #0
 801d662:	d009      	beq.n	801d678 <nk_window_is_hovered+0x60>
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d66a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d674:	2b00      	cmp	r3, #0
 801d676:	d001      	beq.n	801d67c <nk_window_is_hovered+0x64>
        return 0;
 801d678:	2300      	movs	r3, #0
 801d67a:	e032      	b.n	801d6e2 <nk_window_is_hovered+0xca>
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d682:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d686:	f107 0408 	add.w	r4, r7, #8
 801d68a:	334c      	adds	r3, #76	; 0x4c
 801d68c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d68e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d698:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801d69c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d69e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d008      	beq.n	801d6b8 <nk_window_is_hovered+0xa0>
            actual_bounds.h = ctx->current->layout->header_height;
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801d6ac:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801d6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d6b6:	617b      	str	r3, [r7, #20]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	ed97 6a02 	vldr	s12, [r7, #8]
 801d6be:	edd7 6a03 	vldr	s13, [r7, #12]
 801d6c2:	ed97 7a04 	vldr	s14, [r7, #16]
 801d6c6:	edd7 7a05 	vldr	s15, [r7, #20]
 801d6ca:	eeb0 0a46 	vmov.f32	s0, s12
 801d6ce:	eef0 0a66 	vmov.f32	s1, s13
 801d6d2:	eeb0 1a47 	vmov.f32	s2, s14
 801d6d6:	eef0 1a67 	vmov.f32	s3, s15
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f7f4 fedb 	bl	8012496 <nk_input_is_mouse_hovering_rect>
 801d6e0:	4603      	mov	r3, r0
    }
}
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	371c      	adds	r7, #28
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd90      	pop	{r4, r7, pc}
 801d6ea:	bf00      	nop
 801d6ec:	08022248 	.word	0x08022248
 801d6f0:	080237b4 	.word	0x080237b4
 801d6f4:	0802222c 	.word	0x0802222c
 801d6f8:	08022364 	.word	0x08022364

0801d6fc <nk_window_is_collapsed>:
    int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
    return any_hovered || any_active;
}
NK_API nk_bool
nk_window_is_collapsed(struct nk_context *ctx, const char *name)
{
 801d6fc:	b580      	push	{r7, lr}
 801d6fe:	b086      	sub	sp, #24
 801d700:	af00      	add	r7, sp, #0
 801d702:	6078      	str	r0, [r7, #4]
 801d704:	6039      	str	r1, [r7, #0]
    int title_len;
    nk_hash title_hash;
    struct nk_window *win;
    NK_ASSERT(ctx);
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d106      	bne.n	801d71a <nk_window_is_collapsed+0x1e>
 801d70c:	4b14      	ldr	r3, [pc, #80]	; (801d760 <nk_window_is_collapsed+0x64>)
 801d70e:	4a15      	ldr	r2, [pc, #84]	; (801d764 <nk_window_is_collapsed+0x68>)
 801d710:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 801d714:	4814      	ldr	r0, [pc, #80]	; (801d768 <nk_window_is_collapsed+0x6c>)
 801d716:	f000 f92b 	bl	801d970 <__assert_func>
    if (!ctx) return 0;
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d101      	bne.n	801d724 <nk_window_is_collapsed+0x28>
 801d720:	2300      	movs	r3, #0
 801d722:	e018      	b.n	801d756 <nk_window_is_collapsed+0x5a>

    title_len = (int)nk_strlen(name);
 801d724:	6838      	ldr	r0, [r7, #0]
 801d726:	f7fe fc59 	bl	801bfdc <nk_strlen>
 801d72a:	6178      	str	r0, [r7, #20]
    title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);
 801d72c:	2240      	movs	r2, #64	; 0x40
 801d72e:	6979      	ldr	r1, [r7, #20]
 801d730:	6838      	ldr	r0, [r7, #0]
 801d732:	f7fe fcd3 	bl	801c0dc <nk_murmur_hash>
 801d736:	6138      	str	r0, [r7, #16]
    win = nk_find_window(ctx, title_hash, name);
 801d738:	683a      	ldr	r2, [r7, #0]
 801d73a:	6939      	ldr	r1, [r7, #16]
 801d73c:	6878      	ldr	r0, [r7, #4]
 801d73e:	f7ff f8a9 	bl	801c894 <nk_find_window>
 801d742:	60f8      	str	r0, [r7, #12]
    if (!win) return 0;
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	2b00      	cmp	r3, #0
 801d748:	d101      	bne.n	801d74e <nk_window_is_collapsed+0x52>
 801d74a:	2300      	movs	r3, #0
 801d74c:	e003      	b.n	801d756 <nk_window_is_collapsed+0x5a>
    return win->flags & NK_WINDOW_MINIMIZED;
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
}
 801d756:	4618      	mov	r0, r3
 801d758:	3718      	adds	r7, #24
 801d75a:	46bd      	mov	sp, r7
 801d75c:	bd80      	pop	{r7, pc}
 801d75e:	bf00      	nop
 801d760:	08022248 	.word	0x08022248
 801d764:	080237cc 	.word	0x080237cc
 801d768:	0802222c 	.word	0x0802222c

0801d76c <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by )
{
 801d76c:	b580      	push	{r7, lr}
 801d76e:	b088      	sub	sp, #32
 801d770:	af00      	add	r7, sp, #0
 801d772:	61f8      	str	r0, [r7, #28]
 801d774:	61b9      	str	r1, [r7, #24]
 801d776:	617a      	str	r2, [r7, #20]
 801d778:	ed87 0a03 	vstr	s0, [r7, #12]
 801d77c:	edc7 0a02 	vstr	s1, [r7, #8]
 801d780:	ed87 1a01 	vstr	s2, [r7, #4]
 801d784:	edc7 1a00 	vstr	s3, [r7]
 801d788:	827b      	strh	r3, [r7, #18]
	tsc->spi = spi;
 801d78a:	69fb      	ldr	r3, [r7, #28]
 801d78c:	69ba      	ldr	r2, [r7, #24]
 801d78e:	601a      	str	r2, [r3, #0]
	tsc->cs_port = cs_port;
 801d790:	69fb      	ldr	r3, [r7, #28]
 801d792:	697a      	ldr	r2, [r7, #20]
 801d794:	605a      	str	r2, [r3, #4]
	tsc->cs_pin = cs_pin;
 801d796:	69fb      	ldr	r3, [r7, #28]
 801d798:	8a7a      	ldrh	r2, [r7, #18]
 801d79a:	811a      	strh	r2, [r3, #8]
	tsc->ax = ax;
 801d79c:	69fb      	ldr	r3, [r7, #28]
 801d79e:	68fa      	ldr	r2, [r7, #12]
 801d7a0:	60da      	str	r2, [r3, #12]
	tsc->bx = bx;
 801d7a2:	69fb      	ldr	r3, [r7, #28]
 801d7a4:	68ba      	ldr	r2, [r7, #8]
 801d7a6:	611a      	str	r2, [r3, #16]
	tsc->ay = ay;
 801d7a8:	69fb      	ldr	r3, [r7, #28]
 801d7aa:	687a      	ldr	r2, [r7, #4]
 801d7ac:	615a      	str	r2, [r3, #20]
	tsc->by = by;
 801d7ae:	69fb      	ldr	r3, [r7, #28]
 801d7b0:	683a      	ldr	r2, [r7, #0]
 801d7b2:	619a      	str	r2, [r3, #24]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801d7b4:	69fb      	ldr	r3, [r7, #28]
 801d7b6:	6858      	ldr	r0, [r3, #4]
 801d7b8:	69fb      	ldr	r3, [r7, #28]
 801d7ba:	891b      	ldrh	r3, [r3, #8]
 801d7bc:	2201      	movs	r2, #1
 801d7be:	4619      	mov	r1, r3
 801d7c0:	f7eb ff62 	bl	8009688 <HAL_GPIO_WritePin>
}
 801d7c4:	bf00      	nop
 801d7c6:	3720      	adds	r7, #32
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	bd80      	pop	{r7, pc}

0801d7cc <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	b088      	sub	sp, #32
 801d7d0:	af02      	add	r7, sp, #8
 801d7d2:	60f8      	str	r0, [r7, #12]
 801d7d4:	60b9      	str	r1, [r7, #8]
 801d7d6:	607a      	str	r2, [r7, #4]
	uint8_t buf_tx[3] = {0};
 801d7d8:	4b2d      	ldr	r3, [pc, #180]	; (801d890 <tsc2046_read_ll+0xc4>)
 801d7da:	881b      	ldrh	r3, [r3, #0]
 801d7dc:	82bb      	strh	r3, [r7, #20]
 801d7de:	2300      	movs	r3, #0
 801d7e0:	75bb      	strb	r3, [r7, #22]
	uint8_t buf_rx[3] = {0};
 801d7e2:	4b2b      	ldr	r3, [pc, #172]	; (801d890 <tsc2046_read_ll+0xc4>)
 801d7e4:	881b      	ldrh	r3, [r3, #0]
 801d7e6:	823b      	strh	r3, [r7, #16]
 801d7e8:	2300      	movs	r3, #0
 801d7ea:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	6858      	ldr	r0, [r3, #4]
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	891b      	ldrh	r3, [r3, #8]
 801d7f4:	2200      	movs	r2, #0
 801d7f6:	4619      	mov	r1, r3
 801d7f8:	f7eb ff46 	bl	8009688 <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 801d7fc:	2390      	movs	r3, #144	; 0x90
 801d7fe:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	6818      	ldr	r0, [r3, #0]
 801d804:	f107 0210 	add.w	r2, r7, #16
 801d808:	f107 0114 	add.w	r1, r7, #20
 801d80c:	f04f 33ff 	mov.w	r3, #4294967295
 801d810:	9300      	str	r3, [sp, #0]
 801d812:	2303      	movs	r3, #3
 801d814:	f7ed fbe1 	bl	800afda <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801d818:	7c7b      	ldrb	r3, [r7, #17]
 801d81a:	011b      	lsls	r3, r3, #4
 801d81c:	b21a      	sxth	r2, r3
 801d81e:	7cbb      	ldrb	r3, [r7, #18]
 801d820:	091b      	lsrs	r3, r3, #4
 801d822:	b2db      	uxtb	r3, r3
 801d824:	b21b      	sxth	r3, r3
 801d826:	4313      	orrs	r3, r2
 801d828:	b21b      	sxth	r3, r3
 801d82a:	b29a      	uxth	r2, r3
 801d82c:	68bb      	ldr	r3, [r7, #8]
 801d82e:	801a      	strh	r2, [r3, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 801d830:	23d0      	movs	r3, #208	; 0xd0
 801d832:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	6818      	ldr	r0, [r3, #0]
 801d838:	f107 0210 	add.w	r2, r7, #16
 801d83c:	f107 0114 	add.w	r1, r7, #20
 801d840:	f04f 33ff 	mov.w	r3, #4294967295
 801d844:	9300      	str	r3, [sp, #0]
 801d846:	2303      	movs	r3, #3
 801d848:	f7ed fbc7 	bl	800afda <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 801d84c:	7c7b      	ldrb	r3, [r7, #17]
 801d84e:	011b      	lsls	r3, r3, #4
 801d850:	b21a      	sxth	r2, r3
 801d852:	7cbb      	ldrb	r3, [r7, #18]
 801d854:	091b      	lsrs	r3, r3, #4
 801d856:	b2db      	uxtb	r3, r3
 801d858:	b21b      	sxth	r3, r3
 801d85a:	4313      	orrs	r3, r2
 801d85c:	b21b      	sxth	r3, r3
 801d85e:	b29a      	uxth	r2, r3
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	6858      	ldr	r0, [r3, #4]
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	891b      	ldrh	r3, [r3, #8]
 801d86c:	2201      	movs	r2, #1
 801d86e:	4619      	mov	r1, r3
 801d870:	f7eb ff0a 	bl	8009688 <HAL_GPIO_WritePin>

    if (*x == 2047) {
 801d874:	68bb      	ldr	r3, [r7, #8]
 801d876:	881b      	ldrh	r3, [r3, #0]
 801d878:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801d87c:	4293      	cmp	r3, r2
 801d87e:	d102      	bne.n	801d886 <tsc2046_read_ll+0xba>
        *x = 0;
 801d880:	68bb      	ldr	r3, [r7, #8]
 801d882:	2200      	movs	r2, #0
 801d884:	801a      	strh	r2, [r3, #0]
    }
}
 801d886:	bf00      	nop
 801d888:	3718      	adds	r7, #24
 801d88a:	46bd      	mov	sp, r7
 801d88c:	bd80      	pop	{r7, pc}
 801d88e:	bf00      	nop
 801d890:	0802241c 	.word	0x0802241c

0801d894 <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 801d894:	b580      	push	{r7, lr}
 801d896:	b086      	sub	sp, #24
 801d898:	af00      	add	r7, sp, #0
 801d89a:	60f8      	str	r0, [r7, #12]
 801d89c:	60b9      	str	r1, [r7, #8]
 801d89e:	607a      	str	r2, [r7, #4]
    uint16_t x_acc = 0;
 801d8a0:	2300      	movs	r3, #0
 801d8a2:	82fb      	strh	r3, [r7, #22]
    uint16_t y_acc = 0;
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	82bb      	strh	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	613b      	str	r3, [r7, #16]
 801d8ac:	e021      	b.n	801d8f2 <tsc2046_read+0x5e>
    	tsc2046_read_ll(tsc, x, y);
 801d8ae:	687a      	ldr	r2, [r7, #4]
 801d8b0:	68b9      	ldr	r1, [r7, #8]
 801d8b2:	68f8      	ldr	r0, [r7, #12]
 801d8b4:	f7ff ff8a 	bl	801d7cc <tsc2046_read_ll>
        if (*x && *y) {
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	881b      	ldrh	r3, [r3, #0]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d011      	beq.n	801d8e4 <tsc2046_read+0x50>
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	881b      	ldrh	r3, [r3, #0]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d00d      	beq.n	801d8e4 <tsc2046_read+0x50>
            x_acc += *x;
 801d8c8:	68bb      	ldr	r3, [r7, #8]
 801d8ca:	881a      	ldrh	r2, [r3, #0]
 801d8cc:	8afb      	ldrh	r3, [r7, #22]
 801d8ce:	4413      	add	r3, r2
 801d8d0:	82fb      	strh	r3, [r7, #22]
            y_acc += *y;
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	881a      	ldrh	r2, [r3, #0]
 801d8d6:	8abb      	ldrh	r3, [r7, #20]
 801d8d8:	4413      	add	r3, r2
 801d8da:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 4; i++) {
 801d8dc:	693b      	ldr	r3, [r7, #16]
 801d8de:	3301      	adds	r3, #1
 801d8e0:	613b      	str	r3, [r7, #16]
 801d8e2:	e006      	b.n	801d8f2 <tsc2046_read+0x5e>
        } else {
            *x = 0;
 801d8e4:	68bb      	ldr	r3, [r7, #8]
 801d8e6:	2200      	movs	r2, #0
 801d8e8:	801a      	strh	r2, [r3, #0]
            *y = 0;
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	2200      	movs	r2, #0
 801d8ee:	801a      	strh	r2, [r3, #0]
            return;
 801d8f0:	e03a      	b.n	801d968 <tsc2046_read+0xd4>
    for (int i = 0; i < 4; i++) {
 801d8f2:	693b      	ldr	r3, [r7, #16]
 801d8f4:	2b03      	cmp	r3, #3
 801d8f6:	ddda      	ble.n	801d8ae <tsc2046_read+0x1a>
        }
    }
    *x = x_acc / 4;
 801d8f8:	8afb      	ldrh	r3, [r7, #22]
 801d8fa:	089b      	lsrs	r3, r3, #2
 801d8fc:	b29a      	uxth	r2, r3
 801d8fe:	68bb      	ldr	r3, [r7, #8]
 801d900:	801a      	strh	r2, [r3, #0]
    *y = y_acc / 4;
 801d902:	8abb      	ldrh	r3, [r7, #20]
 801d904:	089b      	lsrs	r3, r3, #2
 801d906:	b29a      	uxth	r2, r3
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	801a      	strh	r2, [r3, #0]
    *x = tsc->ax * *x + tsc->bx;
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	ed93 7a03 	vldr	s14, [r3, #12]
 801d912:	68bb      	ldr	r3, [r7, #8]
 801d914:	881b      	ldrh	r3, [r3, #0]
 801d916:	ee07 3a90 	vmov	s15, r3
 801d91a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d91e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	edd3 7a04 	vldr	s15, [r3, #16]
 801d928:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d92c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d930:	ee17 3a90 	vmov	r3, s15
 801d934:	b29a      	uxth	r2, r3
 801d936:	68bb      	ldr	r3, [r7, #8]
 801d938:	801a      	strh	r2, [r3, #0]
    *y = tsc->ay * *y + tsc->by;
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	ed93 7a05 	vldr	s14, [r3, #20]
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	881b      	ldrh	r3, [r3, #0]
 801d944:	ee07 3a90 	vmov	s15, r3
 801d948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d94c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	edd3 7a06 	vldr	s15, [r3, #24]
 801d956:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d95a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d95e:	ee17 3a90 	vmov	r3, s15
 801d962:	b29a      	uxth	r2, r3
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	801a      	strh	r2, [r3, #0]
}
 801d968:	3718      	adds	r7, #24
 801d96a:	46bd      	mov	sp, r7
 801d96c:	bd80      	pop	{r7, pc}
	...

0801d970 <__assert_func>:
 801d970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d972:	4614      	mov	r4, r2
 801d974:	461a      	mov	r2, r3
 801d976:	4b09      	ldr	r3, [pc, #36]	; (801d99c <__assert_func+0x2c>)
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	4605      	mov	r5, r0
 801d97c:	68d8      	ldr	r0, [r3, #12]
 801d97e:	b14c      	cbz	r4, 801d994 <__assert_func+0x24>
 801d980:	4b07      	ldr	r3, [pc, #28]	; (801d9a0 <__assert_func+0x30>)
 801d982:	9100      	str	r1, [sp, #0]
 801d984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d988:	4906      	ldr	r1, [pc, #24]	; (801d9a4 <__assert_func+0x34>)
 801d98a:	462b      	mov	r3, r5
 801d98c:	f000 fd06 	bl	801e39c <fiprintf>
 801d990:	f000 fe24 	bl	801e5dc <abort>
 801d994:	4b04      	ldr	r3, [pc, #16]	; (801d9a8 <__assert_func+0x38>)
 801d996:	461c      	mov	r4, r3
 801d998:	e7f3      	b.n	801d982 <__assert_func+0x12>
 801d99a:	bf00      	nop
 801d99c:	200001e8 	.word	0x200001e8
 801d9a0:	080237e3 	.word	0x080237e3
 801d9a4:	080237f0 	.word	0x080237f0
 801d9a8:	0802381e 	.word	0x0802381e

0801d9ac <__cvt>:
 801d9ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d9b0:	ec55 4b10 	vmov	r4, r5, d0
 801d9b4:	2d00      	cmp	r5, #0
 801d9b6:	460e      	mov	r6, r1
 801d9b8:	4619      	mov	r1, r3
 801d9ba:	462b      	mov	r3, r5
 801d9bc:	bfbb      	ittet	lt
 801d9be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801d9c2:	461d      	movlt	r5, r3
 801d9c4:	2300      	movge	r3, #0
 801d9c6:	232d      	movlt	r3, #45	; 0x2d
 801d9c8:	700b      	strb	r3, [r1, #0]
 801d9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801d9d0:	4691      	mov	r9, r2
 801d9d2:	f023 0820 	bic.w	r8, r3, #32
 801d9d6:	bfbc      	itt	lt
 801d9d8:	4622      	movlt	r2, r4
 801d9da:	4614      	movlt	r4, r2
 801d9dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801d9e0:	d005      	beq.n	801d9ee <__cvt+0x42>
 801d9e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801d9e6:	d100      	bne.n	801d9ea <__cvt+0x3e>
 801d9e8:	3601      	adds	r6, #1
 801d9ea:	2102      	movs	r1, #2
 801d9ec:	e000      	b.n	801d9f0 <__cvt+0x44>
 801d9ee:	2103      	movs	r1, #3
 801d9f0:	ab03      	add	r3, sp, #12
 801d9f2:	9301      	str	r3, [sp, #4]
 801d9f4:	ab02      	add	r3, sp, #8
 801d9f6:	9300      	str	r3, [sp, #0]
 801d9f8:	ec45 4b10 	vmov	d0, r4, r5
 801d9fc:	4653      	mov	r3, sl
 801d9fe:	4632      	mov	r2, r6
 801da00:	f000 fe7e 	bl	801e700 <_dtoa_r>
 801da04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801da08:	4607      	mov	r7, r0
 801da0a:	d102      	bne.n	801da12 <__cvt+0x66>
 801da0c:	f019 0f01 	tst.w	r9, #1
 801da10:	d022      	beq.n	801da58 <__cvt+0xac>
 801da12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801da16:	eb07 0906 	add.w	r9, r7, r6
 801da1a:	d110      	bne.n	801da3e <__cvt+0x92>
 801da1c:	783b      	ldrb	r3, [r7, #0]
 801da1e:	2b30      	cmp	r3, #48	; 0x30
 801da20:	d10a      	bne.n	801da38 <__cvt+0x8c>
 801da22:	2200      	movs	r2, #0
 801da24:	2300      	movs	r3, #0
 801da26:	4620      	mov	r0, r4
 801da28:	4629      	mov	r1, r5
 801da2a:	f7e3 f875 	bl	8000b18 <__aeabi_dcmpeq>
 801da2e:	b918      	cbnz	r0, 801da38 <__cvt+0x8c>
 801da30:	f1c6 0601 	rsb	r6, r6, #1
 801da34:	f8ca 6000 	str.w	r6, [sl]
 801da38:	f8da 3000 	ldr.w	r3, [sl]
 801da3c:	4499      	add	r9, r3
 801da3e:	2200      	movs	r2, #0
 801da40:	2300      	movs	r3, #0
 801da42:	4620      	mov	r0, r4
 801da44:	4629      	mov	r1, r5
 801da46:	f7e3 f867 	bl	8000b18 <__aeabi_dcmpeq>
 801da4a:	b108      	cbz	r0, 801da50 <__cvt+0xa4>
 801da4c:	f8cd 900c 	str.w	r9, [sp, #12]
 801da50:	2230      	movs	r2, #48	; 0x30
 801da52:	9b03      	ldr	r3, [sp, #12]
 801da54:	454b      	cmp	r3, r9
 801da56:	d307      	bcc.n	801da68 <__cvt+0xbc>
 801da58:	9b03      	ldr	r3, [sp, #12]
 801da5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801da5c:	1bdb      	subs	r3, r3, r7
 801da5e:	4638      	mov	r0, r7
 801da60:	6013      	str	r3, [r2, #0]
 801da62:	b004      	add	sp, #16
 801da64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da68:	1c59      	adds	r1, r3, #1
 801da6a:	9103      	str	r1, [sp, #12]
 801da6c:	701a      	strb	r2, [r3, #0]
 801da6e:	e7f0      	b.n	801da52 <__cvt+0xa6>

0801da70 <__exponent>:
 801da70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801da72:	4603      	mov	r3, r0
 801da74:	2900      	cmp	r1, #0
 801da76:	bfb8      	it	lt
 801da78:	4249      	neglt	r1, r1
 801da7a:	f803 2b02 	strb.w	r2, [r3], #2
 801da7e:	bfb4      	ite	lt
 801da80:	222d      	movlt	r2, #45	; 0x2d
 801da82:	222b      	movge	r2, #43	; 0x2b
 801da84:	2909      	cmp	r1, #9
 801da86:	7042      	strb	r2, [r0, #1]
 801da88:	dd2a      	ble.n	801dae0 <__exponent+0x70>
 801da8a:	f10d 0207 	add.w	r2, sp, #7
 801da8e:	4617      	mov	r7, r2
 801da90:	260a      	movs	r6, #10
 801da92:	4694      	mov	ip, r2
 801da94:	fb91 f5f6 	sdiv	r5, r1, r6
 801da98:	fb06 1415 	mls	r4, r6, r5, r1
 801da9c:	3430      	adds	r4, #48	; 0x30
 801da9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801daa2:	460c      	mov	r4, r1
 801daa4:	2c63      	cmp	r4, #99	; 0x63
 801daa6:	f102 32ff 	add.w	r2, r2, #4294967295
 801daaa:	4629      	mov	r1, r5
 801daac:	dcf1      	bgt.n	801da92 <__exponent+0x22>
 801daae:	3130      	adds	r1, #48	; 0x30
 801dab0:	f1ac 0402 	sub.w	r4, ip, #2
 801dab4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801dab8:	1c41      	adds	r1, r0, #1
 801daba:	4622      	mov	r2, r4
 801dabc:	42ba      	cmp	r2, r7
 801dabe:	d30a      	bcc.n	801dad6 <__exponent+0x66>
 801dac0:	f10d 0209 	add.w	r2, sp, #9
 801dac4:	eba2 020c 	sub.w	r2, r2, ip
 801dac8:	42bc      	cmp	r4, r7
 801daca:	bf88      	it	hi
 801dacc:	2200      	movhi	r2, #0
 801dace:	4413      	add	r3, r2
 801dad0:	1a18      	subs	r0, r3, r0
 801dad2:	b003      	add	sp, #12
 801dad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dad6:	f812 5b01 	ldrb.w	r5, [r2], #1
 801dada:	f801 5f01 	strb.w	r5, [r1, #1]!
 801dade:	e7ed      	b.n	801dabc <__exponent+0x4c>
 801dae0:	2330      	movs	r3, #48	; 0x30
 801dae2:	3130      	adds	r1, #48	; 0x30
 801dae4:	7083      	strb	r3, [r0, #2]
 801dae6:	70c1      	strb	r1, [r0, #3]
 801dae8:	1d03      	adds	r3, r0, #4
 801daea:	e7f1      	b.n	801dad0 <__exponent+0x60>

0801daec <_printf_float>:
 801daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daf0:	ed2d 8b02 	vpush	{d8}
 801daf4:	b08d      	sub	sp, #52	; 0x34
 801daf6:	460c      	mov	r4, r1
 801daf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801dafc:	4616      	mov	r6, r2
 801dafe:	461f      	mov	r7, r3
 801db00:	4605      	mov	r5, r0
 801db02:	f000 fce7 	bl	801e4d4 <_localeconv_r>
 801db06:	f8d0 a000 	ldr.w	sl, [r0]
 801db0a:	4650      	mov	r0, sl
 801db0c:	f7e2 fbd8 	bl	80002c0 <strlen>
 801db10:	2300      	movs	r3, #0
 801db12:	930a      	str	r3, [sp, #40]	; 0x28
 801db14:	6823      	ldr	r3, [r4, #0]
 801db16:	9305      	str	r3, [sp, #20]
 801db18:	f8d8 3000 	ldr.w	r3, [r8]
 801db1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801db20:	3307      	adds	r3, #7
 801db22:	f023 0307 	bic.w	r3, r3, #7
 801db26:	f103 0208 	add.w	r2, r3, #8
 801db2a:	f8c8 2000 	str.w	r2, [r8]
 801db2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801db32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801db36:	9307      	str	r3, [sp, #28]
 801db38:	f8cd 8018 	str.w	r8, [sp, #24]
 801db3c:	ee08 0a10 	vmov	s16, r0
 801db40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801db44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801db48:	4b9e      	ldr	r3, [pc, #632]	; (801ddc4 <_printf_float+0x2d8>)
 801db4a:	f04f 32ff 	mov.w	r2, #4294967295
 801db4e:	f7e3 f815 	bl	8000b7c <__aeabi_dcmpun>
 801db52:	bb88      	cbnz	r0, 801dbb8 <_printf_float+0xcc>
 801db54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801db58:	4b9a      	ldr	r3, [pc, #616]	; (801ddc4 <_printf_float+0x2d8>)
 801db5a:	f04f 32ff 	mov.w	r2, #4294967295
 801db5e:	f7e2 ffef 	bl	8000b40 <__aeabi_dcmple>
 801db62:	bb48      	cbnz	r0, 801dbb8 <_printf_float+0xcc>
 801db64:	2200      	movs	r2, #0
 801db66:	2300      	movs	r3, #0
 801db68:	4640      	mov	r0, r8
 801db6a:	4649      	mov	r1, r9
 801db6c:	f7e2 ffde 	bl	8000b2c <__aeabi_dcmplt>
 801db70:	b110      	cbz	r0, 801db78 <_printf_float+0x8c>
 801db72:	232d      	movs	r3, #45	; 0x2d
 801db74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801db78:	4a93      	ldr	r2, [pc, #588]	; (801ddc8 <_printf_float+0x2dc>)
 801db7a:	4b94      	ldr	r3, [pc, #592]	; (801ddcc <_printf_float+0x2e0>)
 801db7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801db80:	bf94      	ite	ls
 801db82:	4690      	movls	r8, r2
 801db84:	4698      	movhi	r8, r3
 801db86:	2303      	movs	r3, #3
 801db88:	6123      	str	r3, [r4, #16]
 801db8a:	9b05      	ldr	r3, [sp, #20]
 801db8c:	f023 0304 	bic.w	r3, r3, #4
 801db90:	6023      	str	r3, [r4, #0]
 801db92:	f04f 0900 	mov.w	r9, #0
 801db96:	9700      	str	r7, [sp, #0]
 801db98:	4633      	mov	r3, r6
 801db9a:	aa0b      	add	r2, sp, #44	; 0x2c
 801db9c:	4621      	mov	r1, r4
 801db9e:	4628      	mov	r0, r5
 801dba0:	f000 f9da 	bl	801df58 <_printf_common>
 801dba4:	3001      	adds	r0, #1
 801dba6:	f040 8090 	bne.w	801dcca <_printf_float+0x1de>
 801dbaa:	f04f 30ff 	mov.w	r0, #4294967295
 801dbae:	b00d      	add	sp, #52	; 0x34
 801dbb0:	ecbd 8b02 	vpop	{d8}
 801dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb8:	4642      	mov	r2, r8
 801dbba:	464b      	mov	r3, r9
 801dbbc:	4640      	mov	r0, r8
 801dbbe:	4649      	mov	r1, r9
 801dbc0:	f7e2 ffdc 	bl	8000b7c <__aeabi_dcmpun>
 801dbc4:	b140      	cbz	r0, 801dbd8 <_printf_float+0xec>
 801dbc6:	464b      	mov	r3, r9
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	bfbc      	itt	lt
 801dbcc:	232d      	movlt	r3, #45	; 0x2d
 801dbce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801dbd2:	4a7f      	ldr	r2, [pc, #508]	; (801ddd0 <_printf_float+0x2e4>)
 801dbd4:	4b7f      	ldr	r3, [pc, #508]	; (801ddd4 <_printf_float+0x2e8>)
 801dbd6:	e7d1      	b.n	801db7c <_printf_float+0x90>
 801dbd8:	6863      	ldr	r3, [r4, #4]
 801dbda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801dbde:	9206      	str	r2, [sp, #24]
 801dbe0:	1c5a      	adds	r2, r3, #1
 801dbe2:	d13f      	bne.n	801dc64 <_printf_float+0x178>
 801dbe4:	2306      	movs	r3, #6
 801dbe6:	6063      	str	r3, [r4, #4]
 801dbe8:	9b05      	ldr	r3, [sp, #20]
 801dbea:	6861      	ldr	r1, [r4, #4]
 801dbec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	9303      	str	r3, [sp, #12]
 801dbf4:	ab0a      	add	r3, sp, #40	; 0x28
 801dbf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801dbfa:	ab09      	add	r3, sp, #36	; 0x24
 801dbfc:	ec49 8b10 	vmov	d0, r8, r9
 801dc00:	9300      	str	r3, [sp, #0]
 801dc02:	6022      	str	r2, [r4, #0]
 801dc04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801dc08:	4628      	mov	r0, r5
 801dc0a:	f7ff fecf 	bl	801d9ac <__cvt>
 801dc0e:	9b06      	ldr	r3, [sp, #24]
 801dc10:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc12:	2b47      	cmp	r3, #71	; 0x47
 801dc14:	4680      	mov	r8, r0
 801dc16:	d108      	bne.n	801dc2a <_printf_float+0x13e>
 801dc18:	1cc8      	adds	r0, r1, #3
 801dc1a:	db02      	blt.n	801dc22 <_printf_float+0x136>
 801dc1c:	6863      	ldr	r3, [r4, #4]
 801dc1e:	4299      	cmp	r1, r3
 801dc20:	dd41      	ble.n	801dca6 <_printf_float+0x1ba>
 801dc22:	f1ab 0302 	sub.w	r3, fp, #2
 801dc26:	fa5f fb83 	uxtb.w	fp, r3
 801dc2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801dc2e:	d820      	bhi.n	801dc72 <_printf_float+0x186>
 801dc30:	3901      	subs	r1, #1
 801dc32:	465a      	mov	r2, fp
 801dc34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801dc38:	9109      	str	r1, [sp, #36]	; 0x24
 801dc3a:	f7ff ff19 	bl	801da70 <__exponent>
 801dc3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dc40:	1813      	adds	r3, r2, r0
 801dc42:	2a01      	cmp	r2, #1
 801dc44:	4681      	mov	r9, r0
 801dc46:	6123      	str	r3, [r4, #16]
 801dc48:	dc02      	bgt.n	801dc50 <_printf_float+0x164>
 801dc4a:	6822      	ldr	r2, [r4, #0]
 801dc4c:	07d2      	lsls	r2, r2, #31
 801dc4e:	d501      	bpl.n	801dc54 <_printf_float+0x168>
 801dc50:	3301      	adds	r3, #1
 801dc52:	6123      	str	r3, [r4, #16]
 801dc54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d09c      	beq.n	801db96 <_printf_float+0xaa>
 801dc5c:	232d      	movs	r3, #45	; 0x2d
 801dc5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dc62:	e798      	b.n	801db96 <_printf_float+0xaa>
 801dc64:	9a06      	ldr	r2, [sp, #24]
 801dc66:	2a47      	cmp	r2, #71	; 0x47
 801dc68:	d1be      	bne.n	801dbe8 <_printf_float+0xfc>
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d1bc      	bne.n	801dbe8 <_printf_float+0xfc>
 801dc6e:	2301      	movs	r3, #1
 801dc70:	e7b9      	b.n	801dbe6 <_printf_float+0xfa>
 801dc72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801dc76:	d118      	bne.n	801dcaa <_printf_float+0x1be>
 801dc78:	2900      	cmp	r1, #0
 801dc7a:	6863      	ldr	r3, [r4, #4]
 801dc7c:	dd0b      	ble.n	801dc96 <_printf_float+0x1aa>
 801dc7e:	6121      	str	r1, [r4, #16]
 801dc80:	b913      	cbnz	r3, 801dc88 <_printf_float+0x19c>
 801dc82:	6822      	ldr	r2, [r4, #0]
 801dc84:	07d0      	lsls	r0, r2, #31
 801dc86:	d502      	bpl.n	801dc8e <_printf_float+0x1a2>
 801dc88:	3301      	adds	r3, #1
 801dc8a:	440b      	add	r3, r1
 801dc8c:	6123      	str	r3, [r4, #16]
 801dc8e:	65a1      	str	r1, [r4, #88]	; 0x58
 801dc90:	f04f 0900 	mov.w	r9, #0
 801dc94:	e7de      	b.n	801dc54 <_printf_float+0x168>
 801dc96:	b913      	cbnz	r3, 801dc9e <_printf_float+0x1b2>
 801dc98:	6822      	ldr	r2, [r4, #0]
 801dc9a:	07d2      	lsls	r2, r2, #31
 801dc9c:	d501      	bpl.n	801dca2 <_printf_float+0x1b6>
 801dc9e:	3302      	adds	r3, #2
 801dca0:	e7f4      	b.n	801dc8c <_printf_float+0x1a0>
 801dca2:	2301      	movs	r3, #1
 801dca4:	e7f2      	b.n	801dc8c <_printf_float+0x1a0>
 801dca6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801dcaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dcac:	4299      	cmp	r1, r3
 801dcae:	db05      	blt.n	801dcbc <_printf_float+0x1d0>
 801dcb0:	6823      	ldr	r3, [r4, #0]
 801dcb2:	6121      	str	r1, [r4, #16]
 801dcb4:	07d8      	lsls	r0, r3, #31
 801dcb6:	d5ea      	bpl.n	801dc8e <_printf_float+0x1a2>
 801dcb8:	1c4b      	adds	r3, r1, #1
 801dcba:	e7e7      	b.n	801dc8c <_printf_float+0x1a0>
 801dcbc:	2900      	cmp	r1, #0
 801dcbe:	bfd4      	ite	le
 801dcc0:	f1c1 0202 	rsble	r2, r1, #2
 801dcc4:	2201      	movgt	r2, #1
 801dcc6:	4413      	add	r3, r2
 801dcc8:	e7e0      	b.n	801dc8c <_printf_float+0x1a0>
 801dcca:	6823      	ldr	r3, [r4, #0]
 801dccc:	055a      	lsls	r2, r3, #21
 801dcce:	d407      	bmi.n	801dce0 <_printf_float+0x1f4>
 801dcd0:	6923      	ldr	r3, [r4, #16]
 801dcd2:	4642      	mov	r2, r8
 801dcd4:	4631      	mov	r1, r6
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	47b8      	blx	r7
 801dcda:	3001      	adds	r0, #1
 801dcdc:	d12c      	bne.n	801dd38 <_printf_float+0x24c>
 801dcde:	e764      	b.n	801dbaa <_printf_float+0xbe>
 801dce0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801dce4:	f240 80e0 	bls.w	801dea8 <_printf_float+0x3bc>
 801dce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801dcec:	2200      	movs	r2, #0
 801dcee:	2300      	movs	r3, #0
 801dcf0:	f7e2 ff12 	bl	8000b18 <__aeabi_dcmpeq>
 801dcf4:	2800      	cmp	r0, #0
 801dcf6:	d034      	beq.n	801dd62 <_printf_float+0x276>
 801dcf8:	4a37      	ldr	r2, [pc, #220]	; (801ddd8 <_printf_float+0x2ec>)
 801dcfa:	2301      	movs	r3, #1
 801dcfc:	4631      	mov	r1, r6
 801dcfe:	4628      	mov	r0, r5
 801dd00:	47b8      	blx	r7
 801dd02:	3001      	adds	r0, #1
 801dd04:	f43f af51 	beq.w	801dbaa <_printf_float+0xbe>
 801dd08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	db02      	blt.n	801dd16 <_printf_float+0x22a>
 801dd10:	6823      	ldr	r3, [r4, #0]
 801dd12:	07d8      	lsls	r0, r3, #31
 801dd14:	d510      	bpl.n	801dd38 <_printf_float+0x24c>
 801dd16:	ee18 3a10 	vmov	r3, s16
 801dd1a:	4652      	mov	r2, sl
 801dd1c:	4631      	mov	r1, r6
 801dd1e:	4628      	mov	r0, r5
 801dd20:	47b8      	blx	r7
 801dd22:	3001      	adds	r0, #1
 801dd24:	f43f af41 	beq.w	801dbaa <_printf_float+0xbe>
 801dd28:	f04f 0800 	mov.w	r8, #0
 801dd2c:	f104 091a 	add.w	r9, r4, #26
 801dd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd32:	3b01      	subs	r3, #1
 801dd34:	4543      	cmp	r3, r8
 801dd36:	dc09      	bgt.n	801dd4c <_printf_float+0x260>
 801dd38:	6823      	ldr	r3, [r4, #0]
 801dd3a:	079b      	lsls	r3, r3, #30
 801dd3c:	f100 8107 	bmi.w	801df4e <_printf_float+0x462>
 801dd40:	68e0      	ldr	r0, [r4, #12]
 801dd42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd44:	4298      	cmp	r0, r3
 801dd46:	bfb8      	it	lt
 801dd48:	4618      	movlt	r0, r3
 801dd4a:	e730      	b.n	801dbae <_printf_float+0xc2>
 801dd4c:	2301      	movs	r3, #1
 801dd4e:	464a      	mov	r2, r9
 801dd50:	4631      	mov	r1, r6
 801dd52:	4628      	mov	r0, r5
 801dd54:	47b8      	blx	r7
 801dd56:	3001      	adds	r0, #1
 801dd58:	f43f af27 	beq.w	801dbaa <_printf_float+0xbe>
 801dd5c:	f108 0801 	add.w	r8, r8, #1
 801dd60:	e7e6      	b.n	801dd30 <_printf_float+0x244>
 801dd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	dc39      	bgt.n	801dddc <_printf_float+0x2f0>
 801dd68:	4a1b      	ldr	r2, [pc, #108]	; (801ddd8 <_printf_float+0x2ec>)
 801dd6a:	2301      	movs	r3, #1
 801dd6c:	4631      	mov	r1, r6
 801dd6e:	4628      	mov	r0, r5
 801dd70:	47b8      	blx	r7
 801dd72:	3001      	adds	r0, #1
 801dd74:	f43f af19 	beq.w	801dbaa <_printf_float+0xbe>
 801dd78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801dd7c:	4313      	orrs	r3, r2
 801dd7e:	d102      	bne.n	801dd86 <_printf_float+0x29a>
 801dd80:	6823      	ldr	r3, [r4, #0]
 801dd82:	07d9      	lsls	r1, r3, #31
 801dd84:	d5d8      	bpl.n	801dd38 <_printf_float+0x24c>
 801dd86:	ee18 3a10 	vmov	r3, s16
 801dd8a:	4652      	mov	r2, sl
 801dd8c:	4631      	mov	r1, r6
 801dd8e:	4628      	mov	r0, r5
 801dd90:	47b8      	blx	r7
 801dd92:	3001      	adds	r0, #1
 801dd94:	f43f af09 	beq.w	801dbaa <_printf_float+0xbe>
 801dd98:	f04f 0900 	mov.w	r9, #0
 801dd9c:	f104 0a1a 	add.w	sl, r4, #26
 801dda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dda2:	425b      	negs	r3, r3
 801dda4:	454b      	cmp	r3, r9
 801dda6:	dc01      	bgt.n	801ddac <_printf_float+0x2c0>
 801dda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddaa:	e792      	b.n	801dcd2 <_printf_float+0x1e6>
 801ddac:	2301      	movs	r3, #1
 801ddae:	4652      	mov	r2, sl
 801ddb0:	4631      	mov	r1, r6
 801ddb2:	4628      	mov	r0, r5
 801ddb4:	47b8      	blx	r7
 801ddb6:	3001      	adds	r0, #1
 801ddb8:	f43f aef7 	beq.w	801dbaa <_printf_float+0xbe>
 801ddbc:	f109 0901 	add.w	r9, r9, #1
 801ddc0:	e7ee      	b.n	801dda0 <_printf_float+0x2b4>
 801ddc2:	bf00      	nop
 801ddc4:	7fefffff 	.word	0x7fefffff
 801ddc8:	0802381f 	.word	0x0802381f
 801ddcc:	08023823 	.word	0x08023823
 801ddd0:	08023827 	.word	0x08023827
 801ddd4:	0802382b 	.word	0x0802382b
 801ddd8:	0802382f 	.word	0x0802382f
 801dddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ddde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801dde0:	429a      	cmp	r2, r3
 801dde2:	bfa8      	it	ge
 801dde4:	461a      	movge	r2, r3
 801dde6:	2a00      	cmp	r2, #0
 801dde8:	4691      	mov	r9, r2
 801ddea:	dc37      	bgt.n	801de5c <_printf_float+0x370>
 801ddec:	f04f 0b00 	mov.w	fp, #0
 801ddf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ddf4:	f104 021a 	add.w	r2, r4, #26
 801ddf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ddfa:	9305      	str	r3, [sp, #20]
 801ddfc:	eba3 0309 	sub.w	r3, r3, r9
 801de00:	455b      	cmp	r3, fp
 801de02:	dc33      	bgt.n	801de6c <_printf_float+0x380>
 801de04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801de08:	429a      	cmp	r2, r3
 801de0a:	db3b      	blt.n	801de84 <_printf_float+0x398>
 801de0c:	6823      	ldr	r3, [r4, #0]
 801de0e:	07da      	lsls	r2, r3, #31
 801de10:	d438      	bmi.n	801de84 <_printf_float+0x398>
 801de12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801de16:	eba2 0903 	sub.w	r9, r2, r3
 801de1a:	9b05      	ldr	r3, [sp, #20]
 801de1c:	1ad2      	subs	r2, r2, r3
 801de1e:	4591      	cmp	r9, r2
 801de20:	bfa8      	it	ge
 801de22:	4691      	movge	r9, r2
 801de24:	f1b9 0f00 	cmp.w	r9, #0
 801de28:	dc35      	bgt.n	801de96 <_printf_float+0x3aa>
 801de2a:	f04f 0800 	mov.w	r8, #0
 801de2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801de32:	f104 0a1a 	add.w	sl, r4, #26
 801de36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801de3a:	1a9b      	subs	r3, r3, r2
 801de3c:	eba3 0309 	sub.w	r3, r3, r9
 801de40:	4543      	cmp	r3, r8
 801de42:	f77f af79 	ble.w	801dd38 <_printf_float+0x24c>
 801de46:	2301      	movs	r3, #1
 801de48:	4652      	mov	r2, sl
 801de4a:	4631      	mov	r1, r6
 801de4c:	4628      	mov	r0, r5
 801de4e:	47b8      	blx	r7
 801de50:	3001      	adds	r0, #1
 801de52:	f43f aeaa 	beq.w	801dbaa <_printf_float+0xbe>
 801de56:	f108 0801 	add.w	r8, r8, #1
 801de5a:	e7ec      	b.n	801de36 <_printf_float+0x34a>
 801de5c:	4613      	mov	r3, r2
 801de5e:	4631      	mov	r1, r6
 801de60:	4642      	mov	r2, r8
 801de62:	4628      	mov	r0, r5
 801de64:	47b8      	blx	r7
 801de66:	3001      	adds	r0, #1
 801de68:	d1c0      	bne.n	801ddec <_printf_float+0x300>
 801de6a:	e69e      	b.n	801dbaa <_printf_float+0xbe>
 801de6c:	2301      	movs	r3, #1
 801de6e:	4631      	mov	r1, r6
 801de70:	4628      	mov	r0, r5
 801de72:	9205      	str	r2, [sp, #20]
 801de74:	47b8      	blx	r7
 801de76:	3001      	adds	r0, #1
 801de78:	f43f ae97 	beq.w	801dbaa <_printf_float+0xbe>
 801de7c:	9a05      	ldr	r2, [sp, #20]
 801de7e:	f10b 0b01 	add.w	fp, fp, #1
 801de82:	e7b9      	b.n	801ddf8 <_printf_float+0x30c>
 801de84:	ee18 3a10 	vmov	r3, s16
 801de88:	4652      	mov	r2, sl
 801de8a:	4631      	mov	r1, r6
 801de8c:	4628      	mov	r0, r5
 801de8e:	47b8      	blx	r7
 801de90:	3001      	adds	r0, #1
 801de92:	d1be      	bne.n	801de12 <_printf_float+0x326>
 801de94:	e689      	b.n	801dbaa <_printf_float+0xbe>
 801de96:	9a05      	ldr	r2, [sp, #20]
 801de98:	464b      	mov	r3, r9
 801de9a:	4442      	add	r2, r8
 801de9c:	4631      	mov	r1, r6
 801de9e:	4628      	mov	r0, r5
 801dea0:	47b8      	blx	r7
 801dea2:	3001      	adds	r0, #1
 801dea4:	d1c1      	bne.n	801de2a <_printf_float+0x33e>
 801dea6:	e680      	b.n	801dbaa <_printf_float+0xbe>
 801dea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801deaa:	2a01      	cmp	r2, #1
 801deac:	dc01      	bgt.n	801deb2 <_printf_float+0x3c6>
 801deae:	07db      	lsls	r3, r3, #31
 801deb0:	d53a      	bpl.n	801df28 <_printf_float+0x43c>
 801deb2:	2301      	movs	r3, #1
 801deb4:	4642      	mov	r2, r8
 801deb6:	4631      	mov	r1, r6
 801deb8:	4628      	mov	r0, r5
 801deba:	47b8      	blx	r7
 801debc:	3001      	adds	r0, #1
 801debe:	f43f ae74 	beq.w	801dbaa <_printf_float+0xbe>
 801dec2:	ee18 3a10 	vmov	r3, s16
 801dec6:	4652      	mov	r2, sl
 801dec8:	4631      	mov	r1, r6
 801deca:	4628      	mov	r0, r5
 801decc:	47b8      	blx	r7
 801dece:	3001      	adds	r0, #1
 801ded0:	f43f ae6b 	beq.w	801dbaa <_printf_float+0xbe>
 801ded4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ded8:	2200      	movs	r2, #0
 801deda:	2300      	movs	r3, #0
 801dedc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801dee0:	f7e2 fe1a 	bl	8000b18 <__aeabi_dcmpeq>
 801dee4:	b9d8      	cbnz	r0, 801df1e <_printf_float+0x432>
 801dee6:	f10a 33ff 	add.w	r3, sl, #4294967295
 801deea:	f108 0201 	add.w	r2, r8, #1
 801deee:	4631      	mov	r1, r6
 801def0:	4628      	mov	r0, r5
 801def2:	47b8      	blx	r7
 801def4:	3001      	adds	r0, #1
 801def6:	d10e      	bne.n	801df16 <_printf_float+0x42a>
 801def8:	e657      	b.n	801dbaa <_printf_float+0xbe>
 801defa:	2301      	movs	r3, #1
 801defc:	4652      	mov	r2, sl
 801defe:	4631      	mov	r1, r6
 801df00:	4628      	mov	r0, r5
 801df02:	47b8      	blx	r7
 801df04:	3001      	adds	r0, #1
 801df06:	f43f ae50 	beq.w	801dbaa <_printf_float+0xbe>
 801df0a:	f108 0801 	add.w	r8, r8, #1
 801df0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df10:	3b01      	subs	r3, #1
 801df12:	4543      	cmp	r3, r8
 801df14:	dcf1      	bgt.n	801defa <_printf_float+0x40e>
 801df16:	464b      	mov	r3, r9
 801df18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801df1c:	e6da      	b.n	801dcd4 <_printf_float+0x1e8>
 801df1e:	f04f 0800 	mov.w	r8, #0
 801df22:	f104 0a1a 	add.w	sl, r4, #26
 801df26:	e7f2      	b.n	801df0e <_printf_float+0x422>
 801df28:	2301      	movs	r3, #1
 801df2a:	4642      	mov	r2, r8
 801df2c:	e7df      	b.n	801deee <_printf_float+0x402>
 801df2e:	2301      	movs	r3, #1
 801df30:	464a      	mov	r2, r9
 801df32:	4631      	mov	r1, r6
 801df34:	4628      	mov	r0, r5
 801df36:	47b8      	blx	r7
 801df38:	3001      	adds	r0, #1
 801df3a:	f43f ae36 	beq.w	801dbaa <_printf_float+0xbe>
 801df3e:	f108 0801 	add.w	r8, r8, #1
 801df42:	68e3      	ldr	r3, [r4, #12]
 801df44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801df46:	1a5b      	subs	r3, r3, r1
 801df48:	4543      	cmp	r3, r8
 801df4a:	dcf0      	bgt.n	801df2e <_printf_float+0x442>
 801df4c:	e6f8      	b.n	801dd40 <_printf_float+0x254>
 801df4e:	f04f 0800 	mov.w	r8, #0
 801df52:	f104 0919 	add.w	r9, r4, #25
 801df56:	e7f4      	b.n	801df42 <_printf_float+0x456>

0801df58 <_printf_common>:
 801df58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df5c:	4616      	mov	r6, r2
 801df5e:	4699      	mov	r9, r3
 801df60:	688a      	ldr	r2, [r1, #8]
 801df62:	690b      	ldr	r3, [r1, #16]
 801df64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801df68:	4293      	cmp	r3, r2
 801df6a:	bfb8      	it	lt
 801df6c:	4613      	movlt	r3, r2
 801df6e:	6033      	str	r3, [r6, #0]
 801df70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801df74:	4607      	mov	r7, r0
 801df76:	460c      	mov	r4, r1
 801df78:	b10a      	cbz	r2, 801df7e <_printf_common+0x26>
 801df7a:	3301      	adds	r3, #1
 801df7c:	6033      	str	r3, [r6, #0]
 801df7e:	6823      	ldr	r3, [r4, #0]
 801df80:	0699      	lsls	r1, r3, #26
 801df82:	bf42      	ittt	mi
 801df84:	6833      	ldrmi	r3, [r6, #0]
 801df86:	3302      	addmi	r3, #2
 801df88:	6033      	strmi	r3, [r6, #0]
 801df8a:	6825      	ldr	r5, [r4, #0]
 801df8c:	f015 0506 	ands.w	r5, r5, #6
 801df90:	d106      	bne.n	801dfa0 <_printf_common+0x48>
 801df92:	f104 0a19 	add.w	sl, r4, #25
 801df96:	68e3      	ldr	r3, [r4, #12]
 801df98:	6832      	ldr	r2, [r6, #0]
 801df9a:	1a9b      	subs	r3, r3, r2
 801df9c:	42ab      	cmp	r3, r5
 801df9e:	dc26      	bgt.n	801dfee <_printf_common+0x96>
 801dfa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dfa4:	1e13      	subs	r3, r2, #0
 801dfa6:	6822      	ldr	r2, [r4, #0]
 801dfa8:	bf18      	it	ne
 801dfaa:	2301      	movne	r3, #1
 801dfac:	0692      	lsls	r2, r2, #26
 801dfae:	d42b      	bmi.n	801e008 <_printf_common+0xb0>
 801dfb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dfb4:	4649      	mov	r1, r9
 801dfb6:	4638      	mov	r0, r7
 801dfb8:	47c0      	blx	r8
 801dfba:	3001      	adds	r0, #1
 801dfbc:	d01e      	beq.n	801dffc <_printf_common+0xa4>
 801dfbe:	6823      	ldr	r3, [r4, #0]
 801dfc0:	6922      	ldr	r2, [r4, #16]
 801dfc2:	f003 0306 	and.w	r3, r3, #6
 801dfc6:	2b04      	cmp	r3, #4
 801dfc8:	bf02      	ittt	eq
 801dfca:	68e5      	ldreq	r5, [r4, #12]
 801dfcc:	6833      	ldreq	r3, [r6, #0]
 801dfce:	1aed      	subeq	r5, r5, r3
 801dfd0:	68a3      	ldr	r3, [r4, #8]
 801dfd2:	bf0c      	ite	eq
 801dfd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dfd8:	2500      	movne	r5, #0
 801dfda:	4293      	cmp	r3, r2
 801dfdc:	bfc4      	itt	gt
 801dfde:	1a9b      	subgt	r3, r3, r2
 801dfe0:	18ed      	addgt	r5, r5, r3
 801dfe2:	2600      	movs	r6, #0
 801dfe4:	341a      	adds	r4, #26
 801dfe6:	42b5      	cmp	r5, r6
 801dfe8:	d11a      	bne.n	801e020 <_printf_common+0xc8>
 801dfea:	2000      	movs	r0, #0
 801dfec:	e008      	b.n	801e000 <_printf_common+0xa8>
 801dfee:	2301      	movs	r3, #1
 801dff0:	4652      	mov	r2, sl
 801dff2:	4649      	mov	r1, r9
 801dff4:	4638      	mov	r0, r7
 801dff6:	47c0      	blx	r8
 801dff8:	3001      	adds	r0, #1
 801dffa:	d103      	bne.n	801e004 <_printf_common+0xac>
 801dffc:	f04f 30ff 	mov.w	r0, #4294967295
 801e000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e004:	3501      	adds	r5, #1
 801e006:	e7c6      	b.n	801df96 <_printf_common+0x3e>
 801e008:	18e1      	adds	r1, r4, r3
 801e00a:	1c5a      	adds	r2, r3, #1
 801e00c:	2030      	movs	r0, #48	; 0x30
 801e00e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e012:	4422      	add	r2, r4
 801e014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e01c:	3302      	adds	r3, #2
 801e01e:	e7c7      	b.n	801dfb0 <_printf_common+0x58>
 801e020:	2301      	movs	r3, #1
 801e022:	4622      	mov	r2, r4
 801e024:	4649      	mov	r1, r9
 801e026:	4638      	mov	r0, r7
 801e028:	47c0      	blx	r8
 801e02a:	3001      	adds	r0, #1
 801e02c:	d0e6      	beq.n	801dffc <_printf_common+0xa4>
 801e02e:	3601      	adds	r6, #1
 801e030:	e7d9      	b.n	801dfe6 <_printf_common+0x8e>
	...

0801e034 <_printf_i>:
 801e034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e038:	7e0f      	ldrb	r7, [r1, #24]
 801e03a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e03c:	2f78      	cmp	r7, #120	; 0x78
 801e03e:	4691      	mov	r9, r2
 801e040:	4680      	mov	r8, r0
 801e042:	460c      	mov	r4, r1
 801e044:	469a      	mov	sl, r3
 801e046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e04a:	d807      	bhi.n	801e05c <_printf_i+0x28>
 801e04c:	2f62      	cmp	r7, #98	; 0x62
 801e04e:	d80a      	bhi.n	801e066 <_printf_i+0x32>
 801e050:	2f00      	cmp	r7, #0
 801e052:	f000 80d4 	beq.w	801e1fe <_printf_i+0x1ca>
 801e056:	2f58      	cmp	r7, #88	; 0x58
 801e058:	f000 80c0 	beq.w	801e1dc <_printf_i+0x1a8>
 801e05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e064:	e03a      	b.n	801e0dc <_printf_i+0xa8>
 801e066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e06a:	2b15      	cmp	r3, #21
 801e06c:	d8f6      	bhi.n	801e05c <_printf_i+0x28>
 801e06e:	a101      	add	r1, pc, #4	; (adr r1, 801e074 <_printf_i+0x40>)
 801e070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e074:	0801e0cd 	.word	0x0801e0cd
 801e078:	0801e0e1 	.word	0x0801e0e1
 801e07c:	0801e05d 	.word	0x0801e05d
 801e080:	0801e05d 	.word	0x0801e05d
 801e084:	0801e05d 	.word	0x0801e05d
 801e088:	0801e05d 	.word	0x0801e05d
 801e08c:	0801e0e1 	.word	0x0801e0e1
 801e090:	0801e05d 	.word	0x0801e05d
 801e094:	0801e05d 	.word	0x0801e05d
 801e098:	0801e05d 	.word	0x0801e05d
 801e09c:	0801e05d 	.word	0x0801e05d
 801e0a0:	0801e1e5 	.word	0x0801e1e5
 801e0a4:	0801e10d 	.word	0x0801e10d
 801e0a8:	0801e19f 	.word	0x0801e19f
 801e0ac:	0801e05d 	.word	0x0801e05d
 801e0b0:	0801e05d 	.word	0x0801e05d
 801e0b4:	0801e207 	.word	0x0801e207
 801e0b8:	0801e05d 	.word	0x0801e05d
 801e0bc:	0801e10d 	.word	0x0801e10d
 801e0c0:	0801e05d 	.word	0x0801e05d
 801e0c4:	0801e05d 	.word	0x0801e05d
 801e0c8:	0801e1a7 	.word	0x0801e1a7
 801e0cc:	682b      	ldr	r3, [r5, #0]
 801e0ce:	1d1a      	adds	r2, r3, #4
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	602a      	str	r2, [r5, #0]
 801e0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e0d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e0dc:	2301      	movs	r3, #1
 801e0de:	e09f      	b.n	801e220 <_printf_i+0x1ec>
 801e0e0:	6820      	ldr	r0, [r4, #0]
 801e0e2:	682b      	ldr	r3, [r5, #0]
 801e0e4:	0607      	lsls	r7, r0, #24
 801e0e6:	f103 0104 	add.w	r1, r3, #4
 801e0ea:	6029      	str	r1, [r5, #0]
 801e0ec:	d501      	bpl.n	801e0f2 <_printf_i+0xbe>
 801e0ee:	681e      	ldr	r6, [r3, #0]
 801e0f0:	e003      	b.n	801e0fa <_printf_i+0xc6>
 801e0f2:	0646      	lsls	r6, r0, #25
 801e0f4:	d5fb      	bpl.n	801e0ee <_printf_i+0xba>
 801e0f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e0fa:	2e00      	cmp	r6, #0
 801e0fc:	da03      	bge.n	801e106 <_printf_i+0xd2>
 801e0fe:	232d      	movs	r3, #45	; 0x2d
 801e100:	4276      	negs	r6, r6
 801e102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e106:	485a      	ldr	r0, [pc, #360]	; (801e270 <_printf_i+0x23c>)
 801e108:	230a      	movs	r3, #10
 801e10a:	e012      	b.n	801e132 <_printf_i+0xfe>
 801e10c:	682b      	ldr	r3, [r5, #0]
 801e10e:	6820      	ldr	r0, [r4, #0]
 801e110:	1d19      	adds	r1, r3, #4
 801e112:	6029      	str	r1, [r5, #0]
 801e114:	0605      	lsls	r5, r0, #24
 801e116:	d501      	bpl.n	801e11c <_printf_i+0xe8>
 801e118:	681e      	ldr	r6, [r3, #0]
 801e11a:	e002      	b.n	801e122 <_printf_i+0xee>
 801e11c:	0641      	lsls	r1, r0, #25
 801e11e:	d5fb      	bpl.n	801e118 <_printf_i+0xe4>
 801e120:	881e      	ldrh	r6, [r3, #0]
 801e122:	4853      	ldr	r0, [pc, #332]	; (801e270 <_printf_i+0x23c>)
 801e124:	2f6f      	cmp	r7, #111	; 0x6f
 801e126:	bf0c      	ite	eq
 801e128:	2308      	moveq	r3, #8
 801e12a:	230a      	movne	r3, #10
 801e12c:	2100      	movs	r1, #0
 801e12e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e132:	6865      	ldr	r5, [r4, #4]
 801e134:	60a5      	str	r5, [r4, #8]
 801e136:	2d00      	cmp	r5, #0
 801e138:	bfa2      	ittt	ge
 801e13a:	6821      	ldrge	r1, [r4, #0]
 801e13c:	f021 0104 	bicge.w	r1, r1, #4
 801e140:	6021      	strge	r1, [r4, #0]
 801e142:	b90e      	cbnz	r6, 801e148 <_printf_i+0x114>
 801e144:	2d00      	cmp	r5, #0
 801e146:	d04b      	beq.n	801e1e0 <_printf_i+0x1ac>
 801e148:	4615      	mov	r5, r2
 801e14a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e14e:	fb03 6711 	mls	r7, r3, r1, r6
 801e152:	5dc7      	ldrb	r7, [r0, r7]
 801e154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e158:	4637      	mov	r7, r6
 801e15a:	42bb      	cmp	r3, r7
 801e15c:	460e      	mov	r6, r1
 801e15e:	d9f4      	bls.n	801e14a <_printf_i+0x116>
 801e160:	2b08      	cmp	r3, #8
 801e162:	d10b      	bne.n	801e17c <_printf_i+0x148>
 801e164:	6823      	ldr	r3, [r4, #0]
 801e166:	07de      	lsls	r6, r3, #31
 801e168:	d508      	bpl.n	801e17c <_printf_i+0x148>
 801e16a:	6923      	ldr	r3, [r4, #16]
 801e16c:	6861      	ldr	r1, [r4, #4]
 801e16e:	4299      	cmp	r1, r3
 801e170:	bfde      	ittt	le
 801e172:	2330      	movle	r3, #48	; 0x30
 801e174:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e178:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e17c:	1b52      	subs	r2, r2, r5
 801e17e:	6122      	str	r2, [r4, #16]
 801e180:	f8cd a000 	str.w	sl, [sp]
 801e184:	464b      	mov	r3, r9
 801e186:	aa03      	add	r2, sp, #12
 801e188:	4621      	mov	r1, r4
 801e18a:	4640      	mov	r0, r8
 801e18c:	f7ff fee4 	bl	801df58 <_printf_common>
 801e190:	3001      	adds	r0, #1
 801e192:	d14a      	bne.n	801e22a <_printf_i+0x1f6>
 801e194:	f04f 30ff 	mov.w	r0, #4294967295
 801e198:	b004      	add	sp, #16
 801e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e19e:	6823      	ldr	r3, [r4, #0]
 801e1a0:	f043 0320 	orr.w	r3, r3, #32
 801e1a4:	6023      	str	r3, [r4, #0]
 801e1a6:	4833      	ldr	r0, [pc, #204]	; (801e274 <_printf_i+0x240>)
 801e1a8:	2778      	movs	r7, #120	; 0x78
 801e1aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e1ae:	6823      	ldr	r3, [r4, #0]
 801e1b0:	6829      	ldr	r1, [r5, #0]
 801e1b2:	061f      	lsls	r7, r3, #24
 801e1b4:	f851 6b04 	ldr.w	r6, [r1], #4
 801e1b8:	d402      	bmi.n	801e1c0 <_printf_i+0x18c>
 801e1ba:	065f      	lsls	r7, r3, #25
 801e1bc:	bf48      	it	mi
 801e1be:	b2b6      	uxthmi	r6, r6
 801e1c0:	07df      	lsls	r7, r3, #31
 801e1c2:	bf48      	it	mi
 801e1c4:	f043 0320 	orrmi.w	r3, r3, #32
 801e1c8:	6029      	str	r1, [r5, #0]
 801e1ca:	bf48      	it	mi
 801e1cc:	6023      	strmi	r3, [r4, #0]
 801e1ce:	b91e      	cbnz	r6, 801e1d8 <_printf_i+0x1a4>
 801e1d0:	6823      	ldr	r3, [r4, #0]
 801e1d2:	f023 0320 	bic.w	r3, r3, #32
 801e1d6:	6023      	str	r3, [r4, #0]
 801e1d8:	2310      	movs	r3, #16
 801e1da:	e7a7      	b.n	801e12c <_printf_i+0xf8>
 801e1dc:	4824      	ldr	r0, [pc, #144]	; (801e270 <_printf_i+0x23c>)
 801e1de:	e7e4      	b.n	801e1aa <_printf_i+0x176>
 801e1e0:	4615      	mov	r5, r2
 801e1e2:	e7bd      	b.n	801e160 <_printf_i+0x12c>
 801e1e4:	682b      	ldr	r3, [r5, #0]
 801e1e6:	6826      	ldr	r6, [r4, #0]
 801e1e8:	6961      	ldr	r1, [r4, #20]
 801e1ea:	1d18      	adds	r0, r3, #4
 801e1ec:	6028      	str	r0, [r5, #0]
 801e1ee:	0635      	lsls	r5, r6, #24
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	d501      	bpl.n	801e1f8 <_printf_i+0x1c4>
 801e1f4:	6019      	str	r1, [r3, #0]
 801e1f6:	e002      	b.n	801e1fe <_printf_i+0x1ca>
 801e1f8:	0670      	lsls	r0, r6, #25
 801e1fa:	d5fb      	bpl.n	801e1f4 <_printf_i+0x1c0>
 801e1fc:	8019      	strh	r1, [r3, #0]
 801e1fe:	2300      	movs	r3, #0
 801e200:	6123      	str	r3, [r4, #16]
 801e202:	4615      	mov	r5, r2
 801e204:	e7bc      	b.n	801e180 <_printf_i+0x14c>
 801e206:	682b      	ldr	r3, [r5, #0]
 801e208:	1d1a      	adds	r2, r3, #4
 801e20a:	602a      	str	r2, [r5, #0]
 801e20c:	681d      	ldr	r5, [r3, #0]
 801e20e:	6862      	ldr	r2, [r4, #4]
 801e210:	2100      	movs	r1, #0
 801e212:	4628      	mov	r0, r5
 801e214:	f7e2 f804 	bl	8000220 <memchr>
 801e218:	b108      	cbz	r0, 801e21e <_printf_i+0x1ea>
 801e21a:	1b40      	subs	r0, r0, r5
 801e21c:	6060      	str	r0, [r4, #4]
 801e21e:	6863      	ldr	r3, [r4, #4]
 801e220:	6123      	str	r3, [r4, #16]
 801e222:	2300      	movs	r3, #0
 801e224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e228:	e7aa      	b.n	801e180 <_printf_i+0x14c>
 801e22a:	6923      	ldr	r3, [r4, #16]
 801e22c:	462a      	mov	r2, r5
 801e22e:	4649      	mov	r1, r9
 801e230:	4640      	mov	r0, r8
 801e232:	47d0      	blx	sl
 801e234:	3001      	adds	r0, #1
 801e236:	d0ad      	beq.n	801e194 <_printf_i+0x160>
 801e238:	6823      	ldr	r3, [r4, #0]
 801e23a:	079b      	lsls	r3, r3, #30
 801e23c:	d413      	bmi.n	801e266 <_printf_i+0x232>
 801e23e:	68e0      	ldr	r0, [r4, #12]
 801e240:	9b03      	ldr	r3, [sp, #12]
 801e242:	4298      	cmp	r0, r3
 801e244:	bfb8      	it	lt
 801e246:	4618      	movlt	r0, r3
 801e248:	e7a6      	b.n	801e198 <_printf_i+0x164>
 801e24a:	2301      	movs	r3, #1
 801e24c:	4632      	mov	r2, r6
 801e24e:	4649      	mov	r1, r9
 801e250:	4640      	mov	r0, r8
 801e252:	47d0      	blx	sl
 801e254:	3001      	adds	r0, #1
 801e256:	d09d      	beq.n	801e194 <_printf_i+0x160>
 801e258:	3501      	adds	r5, #1
 801e25a:	68e3      	ldr	r3, [r4, #12]
 801e25c:	9903      	ldr	r1, [sp, #12]
 801e25e:	1a5b      	subs	r3, r3, r1
 801e260:	42ab      	cmp	r3, r5
 801e262:	dcf2      	bgt.n	801e24a <_printf_i+0x216>
 801e264:	e7eb      	b.n	801e23e <_printf_i+0x20a>
 801e266:	2500      	movs	r5, #0
 801e268:	f104 0619 	add.w	r6, r4, #25
 801e26c:	e7f5      	b.n	801e25a <_printf_i+0x226>
 801e26e:	bf00      	nop
 801e270:	08023831 	.word	0x08023831
 801e274:	08023842 	.word	0x08023842

0801e278 <std>:
 801e278:	2300      	movs	r3, #0
 801e27a:	b510      	push	{r4, lr}
 801e27c:	4604      	mov	r4, r0
 801e27e:	e9c0 3300 	strd	r3, r3, [r0]
 801e282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e286:	6083      	str	r3, [r0, #8]
 801e288:	8181      	strh	r1, [r0, #12]
 801e28a:	6643      	str	r3, [r0, #100]	; 0x64
 801e28c:	81c2      	strh	r2, [r0, #14]
 801e28e:	6183      	str	r3, [r0, #24]
 801e290:	4619      	mov	r1, r3
 801e292:	2208      	movs	r2, #8
 801e294:	305c      	adds	r0, #92	; 0x5c
 801e296:	f000 f914 	bl	801e4c2 <memset>
 801e29a:	4b05      	ldr	r3, [pc, #20]	; (801e2b0 <std+0x38>)
 801e29c:	6263      	str	r3, [r4, #36]	; 0x24
 801e29e:	4b05      	ldr	r3, [pc, #20]	; (801e2b4 <std+0x3c>)
 801e2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 801e2a2:	4b05      	ldr	r3, [pc, #20]	; (801e2b8 <std+0x40>)
 801e2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e2a6:	4b05      	ldr	r3, [pc, #20]	; (801e2bc <std+0x44>)
 801e2a8:	6224      	str	r4, [r4, #32]
 801e2aa:	6323      	str	r3, [r4, #48]	; 0x30
 801e2ac:	bd10      	pop	{r4, pc}
 801e2ae:	bf00      	nop
 801e2b0:	0801e43d 	.word	0x0801e43d
 801e2b4:	0801e45f 	.word	0x0801e45f
 801e2b8:	0801e497 	.word	0x0801e497
 801e2bc:	0801e4bb 	.word	0x0801e4bb

0801e2c0 <stdio_exit_handler>:
 801e2c0:	4a02      	ldr	r2, [pc, #8]	; (801e2cc <stdio_exit_handler+0xc>)
 801e2c2:	4903      	ldr	r1, [pc, #12]	; (801e2d0 <stdio_exit_handler+0x10>)
 801e2c4:	4803      	ldr	r0, [pc, #12]	; (801e2d4 <stdio_exit_handler+0x14>)
 801e2c6:	f000 b87b 	b.w	801e3c0 <_fwalk_sglue>
 801e2ca:	bf00      	nop
 801e2cc:	20000190 	.word	0x20000190
 801e2d0:	08020221 	.word	0x08020221
 801e2d4:	2000019c 	.word	0x2000019c

0801e2d8 <cleanup_stdio>:
 801e2d8:	6841      	ldr	r1, [r0, #4]
 801e2da:	4b0c      	ldr	r3, [pc, #48]	; (801e30c <cleanup_stdio+0x34>)
 801e2dc:	4299      	cmp	r1, r3
 801e2de:	b510      	push	{r4, lr}
 801e2e0:	4604      	mov	r4, r0
 801e2e2:	d001      	beq.n	801e2e8 <cleanup_stdio+0x10>
 801e2e4:	f001 ff9c 	bl	8020220 <_fflush_r>
 801e2e8:	68a1      	ldr	r1, [r4, #8]
 801e2ea:	4b09      	ldr	r3, [pc, #36]	; (801e310 <cleanup_stdio+0x38>)
 801e2ec:	4299      	cmp	r1, r3
 801e2ee:	d002      	beq.n	801e2f6 <cleanup_stdio+0x1e>
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	f001 ff95 	bl	8020220 <_fflush_r>
 801e2f6:	68e1      	ldr	r1, [r4, #12]
 801e2f8:	4b06      	ldr	r3, [pc, #24]	; (801e314 <cleanup_stdio+0x3c>)
 801e2fa:	4299      	cmp	r1, r3
 801e2fc:	d004      	beq.n	801e308 <cleanup_stdio+0x30>
 801e2fe:	4620      	mov	r0, r4
 801e300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e304:	f001 bf8c 	b.w	8020220 <_fflush_r>
 801e308:	bd10      	pop	{r4, pc}
 801e30a:	bf00      	nop
 801e30c:	2001692c 	.word	0x2001692c
 801e310:	20016994 	.word	0x20016994
 801e314:	200169fc 	.word	0x200169fc

0801e318 <global_stdio_init.part.0>:
 801e318:	b510      	push	{r4, lr}
 801e31a:	4b0b      	ldr	r3, [pc, #44]	; (801e348 <global_stdio_init.part.0+0x30>)
 801e31c:	4c0b      	ldr	r4, [pc, #44]	; (801e34c <global_stdio_init.part.0+0x34>)
 801e31e:	4a0c      	ldr	r2, [pc, #48]	; (801e350 <global_stdio_init.part.0+0x38>)
 801e320:	601a      	str	r2, [r3, #0]
 801e322:	4620      	mov	r0, r4
 801e324:	2200      	movs	r2, #0
 801e326:	2104      	movs	r1, #4
 801e328:	f7ff ffa6 	bl	801e278 <std>
 801e32c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e330:	2201      	movs	r2, #1
 801e332:	2109      	movs	r1, #9
 801e334:	f7ff ffa0 	bl	801e278 <std>
 801e338:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e33c:	2202      	movs	r2, #2
 801e33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e342:	2112      	movs	r1, #18
 801e344:	f7ff bf98 	b.w	801e278 <std>
 801e348:	20016a64 	.word	0x20016a64
 801e34c:	2001692c 	.word	0x2001692c
 801e350:	0801e2c1 	.word	0x0801e2c1

0801e354 <__sfp_lock_acquire>:
 801e354:	4801      	ldr	r0, [pc, #4]	; (801e35c <__sfp_lock_acquire+0x8>)
 801e356:	f000 b931 	b.w	801e5bc <__retarget_lock_acquire_recursive>
 801e35a:	bf00      	nop
 801e35c:	20016a6d 	.word	0x20016a6d

0801e360 <__sfp_lock_release>:
 801e360:	4801      	ldr	r0, [pc, #4]	; (801e368 <__sfp_lock_release+0x8>)
 801e362:	f000 b92c 	b.w	801e5be <__retarget_lock_release_recursive>
 801e366:	bf00      	nop
 801e368:	20016a6d 	.word	0x20016a6d

0801e36c <__sinit>:
 801e36c:	b510      	push	{r4, lr}
 801e36e:	4604      	mov	r4, r0
 801e370:	f7ff fff0 	bl	801e354 <__sfp_lock_acquire>
 801e374:	6a23      	ldr	r3, [r4, #32]
 801e376:	b11b      	cbz	r3, 801e380 <__sinit+0x14>
 801e378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e37c:	f7ff bff0 	b.w	801e360 <__sfp_lock_release>
 801e380:	4b04      	ldr	r3, [pc, #16]	; (801e394 <__sinit+0x28>)
 801e382:	6223      	str	r3, [r4, #32]
 801e384:	4b04      	ldr	r3, [pc, #16]	; (801e398 <__sinit+0x2c>)
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d1f5      	bne.n	801e378 <__sinit+0xc>
 801e38c:	f7ff ffc4 	bl	801e318 <global_stdio_init.part.0>
 801e390:	e7f2      	b.n	801e378 <__sinit+0xc>
 801e392:	bf00      	nop
 801e394:	0801e2d9 	.word	0x0801e2d9
 801e398:	20016a64 	.word	0x20016a64

0801e39c <fiprintf>:
 801e39c:	b40e      	push	{r1, r2, r3}
 801e39e:	b503      	push	{r0, r1, lr}
 801e3a0:	4601      	mov	r1, r0
 801e3a2:	ab03      	add	r3, sp, #12
 801e3a4:	4805      	ldr	r0, [pc, #20]	; (801e3bc <fiprintf+0x20>)
 801e3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3aa:	6800      	ldr	r0, [r0, #0]
 801e3ac:	9301      	str	r3, [sp, #4]
 801e3ae:	f001 fd97 	bl	801fee0 <_vfiprintf_r>
 801e3b2:	b002      	add	sp, #8
 801e3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e3b8:	b003      	add	sp, #12
 801e3ba:	4770      	bx	lr
 801e3bc:	200001e8 	.word	0x200001e8

0801e3c0 <_fwalk_sglue>:
 801e3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3c4:	4607      	mov	r7, r0
 801e3c6:	4688      	mov	r8, r1
 801e3c8:	4614      	mov	r4, r2
 801e3ca:	2600      	movs	r6, #0
 801e3cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e3d0:	f1b9 0901 	subs.w	r9, r9, #1
 801e3d4:	d505      	bpl.n	801e3e2 <_fwalk_sglue+0x22>
 801e3d6:	6824      	ldr	r4, [r4, #0]
 801e3d8:	2c00      	cmp	r4, #0
 801e3da:	d1f7      	bne.n	801e3cc <_fwalk_sglue+0xc>
 801e3dc:	4630      	mov	r0, r6
 801e3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3e2:	89ab      	ldrh	r3, [r5, #12]
 801e3e4:	2b01      	cmp	r3, #1
 801e3e6:	d907      	bls.n	801e3f8 <_fwalk_sglue+0x38>
 801e3e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e3ec:	3301      	adds	r3, #1
 801e3ee:	d003      	beq.n	801e3f8 <_fwalk_sglue+0x38>
 801e3f0:	4629      	mov	r1, r5
 801e3f2:	4638      	mov	r0, r7
 801e3f4:	47c0      	blx	r8
 801e3f6:	4306      	orrs	r6, r0
 801e3f8:	3568      	adds	r5, #104	; 0x68
 801e3fa:	e7e9      	b.n	801e3d0 <_fwalk_sglue+0x10>

0801e3fc <siprintf>:
 801e3fc:	b40e      	push	{r1, r2, r3}
 801e3fe:	b500      	push	{lr}
 801e400:	b09c      	sub	sp, #112	; 0x70
 801e402:	ab1d      	add	r3, sp, #116	; 0x74
 801e404:	9002      	str	r0, [sp, #8]
 801e406:	9006      	str	r0, [sp, #24]
 801e408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e40c:	4809      	ldr	r0, [pc, #36]	; (801e434 <siprintf+0x38>)
 801e40e:	9107      	str	r1, [sp, #28]
 801e410:	9104      	str	r1, [sp, #16]
 801e412:	4909      	ldr	r1, [pc, #36]	; (801e438 <siprintf+0x3c>)
 801e414:	f853 2b04 	ldr.w	r2, [r3], #4
 801e418:	9105      	str	r1, [sp, #20]
 801e41a:	6800      	ldr	r0, [r0, #0]
 801e41c:	9301      	str	r3, [sp, #4]
 801e41e:	a902      	add	r1, sp, #8
 801e420:	f001 fc36 	bl	801fc90 <_svfiprintf_r>
 801e424:	9b02      	ldr	r3, [sp, #8]
 801e426:	2200      	movs	r2, #0
 801e428:	701a      	strb	r2, [r3, #0]
 801e42a:	b01c      	add	sp, #112	; 0x70
 801e42c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e430:	b003      	add	sp, #12
 801e432:	4770      	bx	lr
 801e434:	200001e8 	.word	0x200001e8
 801e438:	ffff0208 	.word	0xffff0208

0801e43c <__sread>:
 801e43c:	b510      	push	{r4, lr}
 801e43e:	460c      	mov	r4, r1
 801e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e444:	f000 f86c 	bl	801e520 <_read_r>
 801e448:	2800      	cmp	r0, #0
 801e44a:	bfab      	itete	ge
 801e44c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e44e:	89a3      	ldrhlt	r3, [r4, #12]
 801e450:	181b      	addge	r3, r3, r0
 801e452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e456:	bfac      	ite	ge
 801e458:	6563      	strge	r3, [r4, #84]	; 0x54
 801e45a:	81a3      	strhlt	r3, [r4, #12]
 801e45c:	bd10      	pop	{r4, pc}

0801e45e <__swrite>:
 801e45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e462:	461f      	mov	r7, r3
 801e464:	898b      	ldrh	r3, [r1, #12]
 801e466:	05db      	lsls	r3, r3, #23
 801e468:	4605      	mov	r5, r0
 801e46a:	460c      	mov	r4, r1
 801e46c:	4616      	mov	r6, r2
 801e46e:	d505      	bpl.n	801e47c <__swrite+0x1e>
 801e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e474:	2302      	movs	r3, #2
 801e476:	2200      	movs	r2, #0
 801e478:	f000 f840 	bl	801e4fc <_lseek_r>
 801e47c:	89a3      	ldrh	r3, [r4, #12]
 801e47e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e486:	81a3      	strh	r3, [r4, #12]
 801e488:	4632      	mov	r2, r6
 801e48a:	463b      	mov	r3, r7
 801e48c:	4628      	mov	r0, r5
 801e48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e492:	f000 b857 	b.w	801e544 <_write_r>

0801e496 <__sseek>:
 801e496:	b510      	push	{r4, lr}
 801e498:	460c      	mov	r4, r1
 801e49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e49e:	f000 f82d 	bl	801e4fc <_lseek_r>
 801e4a2:	1c43      	adds	r3, r0, #1
 801e4a4:	89a3      	ldrh	r3, [r4, #12]
 801e4a6:	bf15      	itete	ne
 801e4a8:	6560      	strne	r0, [r4, #84]	; 0x54
 801e4aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e4ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e4b2:	81a3      	strheq	r3, [r4, #12]
 801e4b4:	bf18      	it	ne
 801e4b6:	81a3      	strhne	r3, [r4, #12]
 801e4b8:	bd10      	pop	{r4, pc}

0801e4ba <__sclose>:
 801e4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4be:	f000 b80d 	b.w	801e4dc <_close_r>

0801e4c2 <memset>:
 801e4c2:	4402      	add	r2, r0
 801e4c4:	4603      	mov	r3, r0
 801e4c6:	4293      	cmp	r3, r2
 801e4c8:	d100      	bne.n	801e4cc <memset+0xa>
 801e4ca:	4770      	bx	lr
 801e4cc:	f803 1b01 	strb.w	r1, [r3], #1
 801e4d0:	e7f9      	b.n	801e4c6 <memset+0x4>
	...

0801e4d4 <_localeconv_r>:
 801e4d4:	4800      	ldr	r0, [pc, #0]	; (801e4d8 <_localeconv_r+0x4>)
 801e4d6:	4770      	bx	lr
 801e4d8:	200002dc 	.word	0x200002dc

0801e4dc <_close_r>:
 801e4dc:	b538      	push	{r3, r4, r5, lr}
 801e4de:	4d06      	ldr	r5, [pc, #24]	; (801e4f8 <_close_r+0x1c>)
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	4604      	mov	r4, r0
 801e4e4:	4608      	mov	r0, r1
 801e4e6:	602b      	str	r3, [r5, #0]
 801e4e8:	f7e7 f985 	bl	80057f6 <_close>
 801e4ec:	1c43      	adds	r3, r0, #1
 801e4ee:	d102      	bne.n	801e4f6 <_close_r+0x1a>
 801e4f0:	682b      	ldr	r3, [r5, #0]
 801e4f2:	b103      	cbz	r3, 801e4f6 <_close_r+0x1a>
 801e4f4:	6023      	str	r3, [r4, #0]
 801e4f6:	bd38      	pop	{r3, r4, r5, pc}
 801e4f8:	20016a68 	.word	0x20016a68

0801e4fc <_lseek_r>:
 801e4fc:	b538      	push	{r3, r4, r5, lr}
 801e4fe:	4d07      	ldr	r5, [pc, #28]	; (801e51c <_lseek_r+0x20>)
 801e500:	4604      	mov	r4, r0
 801e502:	4608      	mov	r0, r1
 801e504:	4611      	mov	r1, r2
 801e506:	2200      	movs	r2, #0
 801e508:	602a      	str	r2, [r5, #0]
 801e50a:	461a      	mov	r2, r3
 801e50c:	f7e7 f99a 	bl	8005844 <_lseek>
 801e510:	1c43      	adds	r3, r0, #1
 801e512:	d102      	bne.n	801e51a <_lseek_r+0x1e>
 801e514:	682b      	ldr	r3, [r5, #0]
 801e516:	b103      	cbz	r3, 801e51a <_lseek_r+0x1e>
 801e518:	6023      	str	r3, [r4, #0]
 801e51a:	bd38      	pop	{r3, r4, r5, pc}
 801e51c:	20016a68 	.word	0x20016a68

0801e520 <_read_r>:
 801e520:	b538      	push	{r3, r4, r5, lr}
 801e522:	4d07      	ldr	r5, [pc, #28]	; (801e540 <_read_r+0x20>)
 801e524:	4604      	mov	r4, r0
 801e526:	4608      	mov	r0, r1
 801e528:	4611      	mov	r1, r2
 801e52a:	2200      	movs	r2, #0
 801e52c:	602a      	str	r2, [r5, #0]
 801e52e:	461a      	mov	r2, r3
 801e530:	f7e7 f944 	bl	80057bc <_read>
 801e534:	1c43      	adds	r3, r0, #1
 801e536:	d102      	bne.n	801e53e <_read_r+0x1e>
 801e538:	682b      	ldr	r3, [r5, #0]
 801e53a:	b103      	cbz	r3, 801e53e <_read_r+0x1e>
 801e53c:	6023      	str	r3, [r4, #0]
 801e53e:	bd38      	pop	{r3, r4, r5, pc}
 801e540:	20016a68 	.word	0x20016a68

0801e544 <_write_r>:
 801e544:	b538      	push	{r3, r4, r5, lr}
 801e546:	4d07      	ldr	r5, [pc, #28]	; (801e564 <_write_r+0x20>)
 801e548:	4604      	mov	r4, r0
 801e54a:	4608      	mov	r0, r1
 801e54c:	4611      	mov	r1, r2
 801e54e:	2200      	movs	r2, #0
 801e550:	602a      	str	r2, [r5, #0]
 801e552:	461a      	mov	r2, r3
 801e554:	f7e3 fa51 	bl	80019fa <_write>
 801e558:	1c43      	adds	r3, r0, #1
 801e55a:	d102      	bne.n	801e562 <_write_r+0x1e>
 801e55c:	682b      	ldr	r3, [r5, #0]
 801e55e:	b103      	cbz	r3, 801e562 <_write_r+0x1e>
 801e560:	6023      	str	r3, [r4, #0]
 801e562:	bd38      	pop	{r3, r4, r5, pc}
 801e564:	20016a68 	.word	0x20016a68

0801e568 <__errno>:
 801e568:	4b01      	ldr	r3, [pc, #4]	; (801e570 <__errno+0x8>)
 801e56a:	6818      	ldr	r0, [r3, #0]
 801e56c:	4770      	bx	lr
 801e56e:	bf00      	nop
 801e570:	200001e8 	.word	0x200001e8

0801e574 <__libc_init_array>:
 801e574:	b570      	push	{r4, r5, r6, lr}
 801e576:	4d0d      	ldr	r5, [pc, #52]	; (801e5ac <__libc_init_array+0x38>)
 801e578:	4c0d      	ldr	r4, [pc, #52]	; (801e5b0 <__libc_init_array+0x3c>)
 801e57a:	1b64      	subs	r4, r4, r5
 801e57c:	10a4      	asrs	r4, r4, #2
 801e57e:	2600      	movs	r6, #0
 801e580:	42a6      	cmp	r6, r4
 801e582:	d109      	bne.n	801e598 <__libc_init_array+0x24>
 801e584:	4d0b      	ldr	r5, [pc, #44]	; (801e5b4 <__libc_init_array+0x40>)
 801e586:	4c0c      	ldr	r4, [pc, #48]	; (801e5b8 <__libc_init_array+0x44>)
 801e588:	f002 fda0 	bl	80210cc <_init>
 801e58c:	1b64      	subs	r4, r4, r5
 801e58e:	10a4      	asrs	r4, r4, #2
 801e590:	2600      	movs	r6, #0
 801e592:	42a6      	cmp	r6, r4
 801e594:	d105      	bne.n	801e5a2 <__libc_init_array+0x2e>
 801e596:	bd70      	pop	{r4, r5, r6, pc}
 801e598:	f855 3b04 	ldr.w	r3, [r5], #4
 801e59c:	4798      	blx	r3
 801e59e:	3601      	adds	r6, #1
 801e5a0:	e7ee      	b.n	801e580 <__libc_init_array+0xc>
 801e5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5a6:	4798      	blx	r3
 801e5a8:	3601      	adds	r6, #1
 801e5aa:	e7f2      	b.n	801e592 <__libc_init_array+0x1e>
 801e5ac:	08023f28 	.word	0x08023f28
 801e5b0:	08023f28 	.word	0x08023f28
 801e5b4:	08023f28 	.word	0x08023f28
 801e5b8:	08023f2c 	.word	0x08023f2c

0801e5bc <__retarget_lock_acquire_recursive>:
 801e5bc:	4770      	bx	lr

0801e5be <__retarget_lock_release_recursive>:
 801e5be:	4770      	bx	lr

0801e5c0 <memcpy>:
 801e5c0:	440a      	add	r2, r1
 801e5c2:	4291      	cmp	r1, r2
 801e5c4:	f100 33ff 	add.w	r3, r0, #4294967295
 801e5c8:	d100      	bne.n	801e5cc <memcpy+0xc>
 801e5ca:	4770      	bx	lr
 801e5cc:	b510      	push	{r4, lr}
 801e5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e5d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e5d6:	4291      	cmp	r1, r2
 801e5d8:	d1f9      	bne.n	801e5ce <memcpy+0xe>
 801e5da:	bd10      	pop	{r4, pc}

0801e5dc <abort>:
 801e5dc:	b508      	push	{r3, lr}
 801e5de:	2006      	movs	r0, #6
 801e5e0:	f001 ff1e 	bl	8020420 <raise>
 801e5e4:	2001      	movs	r0, #1
 801e5e6:	f7e7 f8df 	bl	80057a8 <_exit>

0801e5ea <quorem>:
 801e5ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ee:	6903      	ldr	r3, [r0, #16]
 801e5f0:	690c      	ldr	r4, [r1, #16]
 801e5f2:	42a3      	cmp	r3, r4
 801e5f4:	4607      	mov	r7, r0
 801e5f6:	db7e      	blt.n	801e6f6 <quorem+0x10c>
 801e5f8:	3c01      	subs	r4, #1
 801e5fa:	f101 0814 	add.w	r8, r1, #20
 801e5fe:	f100 0514 	add.w	r5, r0, #20
 801e602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e606:	9301      	str	r3, [sp, #4]
 801e608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e60c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e610:	3301      	adds	r3, #1
 801e612:	429a      	cmp	r2, r3
 801e614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e61c:	fbb2 f6f3 	udiv	r6, r2, r3
 801e620:	d331      	bcc.n	801e686 <quorem+0x9c>
 801e622:	f04f 0e00 	mov.w	lr, #0
 801e626:	4640      	mov	r0, r8
 801e628:	46ac      	mov	ip, r5
 801e62a:	46f2      	mov	sl, lr
 801e62c:	f850 2b04 	ldr.w	r2, [r0], #4
 801e630:	b293      	uxth	r3, r2
 801e632:	fb06 e303 	mla	r3, r6, r3, lr
 801e636:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e63a:	0c1a      	lsrs	r2, r3, #16
 801e63c:	b29b      	uxth	r3, r3
 801e63e:	ebaa 0303 	sub.w	r3, sl, r3
 801e642:	f8dc a000 	ldr.w	sl, [ip]
 801e646:	fa13 f38a 	uxtah	r3, r3, sl
 801e64a:	fb06 220e 	mla	r2, r6, lr, r2
 801e64e:	9300      	str	r3, [sp, #0]
 801e650:	9b00      	ldr	r3, [sp, #0]
 801e652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e656:	b292      	uxth	r2, r2
 801e658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801e65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e660:	f8bd 3000 	ldrh.w	r3, [sp]
 801e664:	4581      	cmp	r9, r0
 801e666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e66a:	f84c 3b04 	str.w	r3, [ip], #4
 801e66e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e672:	d2db      	bcs.n	801e62c <quorem+0x42>
 801e674:	f855 300b 	ldr.w	r3, [r5, fp]
 801e678:	b92b      	cbnz	r3, 801e686 <quorem+0x9c>
 801e67a:	9b01      	ldr	r3, [sp, #4]
 801e67c:	3b04      	subs	r3, #4
 801e67e:	429d      	cmp	r5, r3
 801e680:	461a      	mov	r2, r3
 801e682:	d32c      	bcc.n	801e6de <quorem+0xf4>
 801e684:	613c      	str	r4, [r7, #16]
 801e686:	4638      	mov	r0, r7
 801e688:	f001 f9a8 	bl	801f9dc <__mcmp>
 801e68c:	2800      	cmp	r0, #0
 801e68e:	db22      	blt.n	801e6d6 <quorem+0xec>
 801e690:	3601      	adds	r6, #1
 801e692:	4629      	mov	r1, r5
 801e694:	2000      	movs	r0, #0
 801e696:	f858 2b04 	ldr.w	r2, [r8], #4
 801e69a:	f8d1 c000 	ldr.w	ip, [r1]
 801e69e:	b293      	uxth	r3, r2
 801e6a0:	1ac3      	subs	r3, r0, r3
 801e6a2:	0c12      	lsrs	r2, r2, #16
 801e6a4:	fa13 f38c 	uxtah	r3, r3, ip
 801e6a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801e6ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e6b0:	b29b      	uxth	r3, r3
 801e6b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e6b6:	45c1      	cmp	r9, r8
 801e6b8:	f841 3b04 	str.w	r3, [r1], #4
 801e6bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e6c0:	d2e9      	bcs.n	801e696 <quorem+0xac>
 801e6c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e6c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e6ca:	b922      	cbnz	r2, 801e6d6 <quorem+0xec>
 801e6cc:	3b04      	subs	r3, #4
 801e6ce:	429d      	cmp	r5, r3
 801e6d0:	461a      	mov	r2, r3
 801e6d2:	d30a      	bcc.n	801e6ea <quorem+0x100>
 801e6d4:	613c      	str	r4, [r7, #16]
 801e6d6:	4630      	mov	r0, r6
 801e6d8:	b003      	add	sp, #12
 801e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6de:	6812      	ldr	r2, [r2, #0]
 801e6e0:	3b04      	subs	r3, #4
 801e6e2:	2a00      	cmp	r2, #0
 801e6e4:	d1ce      	bne.n	801e684 <quorem+0x9a>
 801e6e6:	3c01      	subs	r4, #1
 801e6e8:	e7c9      	b.n	801e67e <quorem+0x94>
 801e6ea:	6812      	ldr	r2, [r2, #0]
 801e6ec:	3b04      	subs	r3, #4
 801e6ee:	2a00      	cmp	r2, #0
 801e6f0:	d1f0      	bne.n	801e6d4 <quorem+0xea>
 801e6f2:	3c01      	subs	r4, #1
 801e6f4:	e7eb      	b.n	801e6ce <quorem+0xe4>
 801e6f6:	2000      	movs	r0, #0
 801e6f8:	e7ee      	b.n	801e6d8 <quorem+0xee>
 801e6fa:	0000      	movs	r0, r0
 801e6fc:	0000      	movs	r0, r0
	...

0801e700 <_dtoa_r>:
 801e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e704:	ed2d 8b04 	vpush	{d8-d9}
 801e708:	69c5      	ldr	r5, [r0, #28]
 801e70a:	b093      	sub	sp, #76	; 0x4c
 801e70c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e710:	ec57 6b10 	vmov	r6, r7, d0
 801e714:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e718:	9107      	str	r1, [sp, #28]
 801e71a:	4604      	mov	r4, r0
 801e71c:	920a      	str	r2, [sp, #40]	; 0x28
 801e71e:	930d      	str	r3, [sp, #52]	; 0x34
 801e720:	b975      	cbnz	r5, 801e740 <_dtoa_r+0x40>
 801e722:	2010      	movs	r0, #16
 801e724:	f000 fe2a 	bl	801f37c <malloc>
 801e728:	4602      	mov	r2, r0
 801e72a:	61e0      	str	r0, [r4, #28]
 801e72c:	b920      	cbnz	r0, 801e738 <_dtoa_r+0x38>
 801e72e:	4bae      	ldr	r3, [pc, #696]	; (801e9e8 <_dtoa_r+0x2e8>)
 801e730:	21ef      	movs	r1, #239	; 0xef
 801e732:	48ae      	ldr	r0, [pc, #696]	; (801e9ec <_dtoa_r+0x2ec>)
 801e734:	f7ff f91c 	bl	801d970 <__assert_func>
 801e738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e73c:	6005      	str	r5, [r0, #0]
 801e73e:	60c5      	str	r5, [r0, #12]
 801e740:	69e3      	ldr	r3, [r4, #28]
 801e742:	6819      	ldr	r1, [r3, #0]
 801e744:	b151      	cbz	r1, 801e75c <_dtoa_r+0x5c>
 801e746:	685a      	ldr	r2, [r3, #4]
 801e748:	604a      	str	r2, [r1, #4]
 801e74a:	2301      	movs	r3, #1
 801e74c:	4093      	lsls	r3, r2
 801e74e:	608b      	str	r3, [r1, #8]
 801e750:	4620      	mov	r0, r4
 801e752:	f000 ff07 	bl	801f564 <_Bfree>
 801e756:	69e3      	ldr	r3, [r4, #28]
 801e758:	2200      	movs	r2, #0
 801e75a:	601a      	str	r2, [r3, #0]
 801e75c:	1e3b      	subs	r3, r7, #0
 801e75e:	bfbb      	ittet	lt
 801e760:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e764:	9303      	strlt	r3, [sp, #12]
 801e766:	2300      	movge	r3, #0
 801e768:	2201      	movlt	r2, #1
 801e76a:	bfac      	ite	ge
 801e76c:	f8c8 3000 	strge.w	r3, [r8]
 801e770:	f8c8 2000 	strlt.w	r2, [r8]
 801e774:	4b9e      	ldr	r3, [pc, #632]	; (801e9f0 <_dtoa_r+0x2f0>)
 801e776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801e77a:	ea33 0308 	bics.w	r3, r3, r8
 801e77e:	d11b      	bne.n	801e7b8 <_dtoa_r+0xb8>
 801e780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e782:	f242 730f 	movw	r3, #9999	; 0x270f
 801e786:	6013      	str	r3, [r2, #0]
 801e788:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801e78c:	4333      	orrs	r3, r6
 801e78e:	f000 8593 	beq.w	801f2b8 <_dtoa_r+0xbb8>
 801e792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e794:	b963      	cbnz	r3, 801e7b0 <_dtoa_r+0xb0>
 801e796:	4b97      	ldr	r3, [pc, #604]	; (801e9f4 <_dtoa_r+0x2f4>)
 801e798:	e027      	b.n	801e7ea <_dtoa_r+0xea>
 801e79a:	4b97      	ldr	r3, [pc, #604]	; (801e9f8 <_dtoa_r+0x2f8>)
 801e79c:	9300      	str	r3, [sp, #0]
 801e79e:	3308      	adds	r3, #8
 801e7a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e7a2:	6013      	str	r3, [r2, #0]
 801e7a4:	9800      	ldr	r0, [sp, #0]
 801e7a6:	b013      	add	sp, #76	; 0x4c
 801e7a8:	ecbd 8b04 	vpop	{d8-d9}
 801e7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7b0:	4b90      	ldr	r3, [pc, #576]	; (801e9f4 <_dtoa_r+0x2f4>)
 801e7b2:	9300      	str	r3, [sp, #0]
 801e7b4:	3303      	adds	r3, #3
 801e7b6:	e7f3      	b.n	801e7a0 <_dtoa_r+0xa0>
 801e7b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e7bc:	2200      	movs	r2, #0
 801e7be:	ec51 0b17 	vmov	r0, r1, d7
 801e7c2:	eeb0 8a47 	vmov.f32	s16, s14
 801e7c6:	eef0 8a67 	vmov.f32	s17, s15
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	f7e2 f9a4 	bl	8000b18 <__aeabi_dcmpeq>
 801e7d0:	4681      	mov	r9, r0
 801e7d2:	b160      	cbz	r0, 801e7ee <_dtoa_r+0xee>
 801e7d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e7d6:	2301      	movs	r3, #1
 801e7d8:	6013      	str	r3, [r2, #0]
 801e7da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	f000 8568 	beq.w	801f2b2 <_dtoa_r+0xbb2>
 801e7e2:	4b86      	ldr	r3, [pc, #536]	; (801e9fc <_dtoa_r+0x2fc>)
 801e7e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e7e6:	6013      	str	r3, [r2, #0]
 801e7e8:	3b01      	subs	r3, #1
 801e7ea:	9300      	str	r3, [sp, #0]
 801e7ec:	e7da      	b.n	801e7a4 <_dtoa_r+0xa4>
 801e7ee:	aa10      	add	r2, sp, #64	; 0x40
 801e7f0:	a911      	add	r1, sp, #68	; 0x44
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	eeb0 0a48 	vmov.f32	s0, s16
 801e7f8:	eef0 0a68 	vmov.f32	s1, s17
 801e7fc:	f001 f994 	bl	801fb28 <__d2b>
 801e800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801e804:	4682      	mov	sl, r0
 801e806:	2d00      	cmp	r5, #0
 801e808:	d07f      	beq.n	801e90a <_dtoa_r+0x20a>
 801e80a:	ee18 3a90 	vmov	r3, s17
 801e80e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e812:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801e816:	ec51 0b18 	vmov	r0, r1, d8
 801e81a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e822:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801e826:	4619      	mov	r1, r3
 801e828:	2200      	movs	r2, #0
 801e82a:	4b75      	ldr	r3, [pc, #468]	; (801ea00 <_dtoa_r+0x300>)
 801e82c:	f7e1 fd54 	bl	80002d8 <__aeabi_dsub>
 801e830:	a367      	add	r3, pc, #412	; (adr r3, 801e9d0 <_dtoa_r+0x2d0>)
 801e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e836:	f7e1 ff07 	bl	8000648 <__aeabi_dmul>
 801e83a:	a367      	add	r3, pc, #412	; (adr r3, 801e9d8 <_dtoa_r+0x2d8>)
 801e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e840:	f7e1 fd4c 	bl	80002dc <__adddf3>
 801e844:	4606      	mov	r6, r0
 801e846:	4628      	mov	r0, r5
 801e848:	460f      	mov	r7, r1
 801e84a:	f7e1 fe93 	bl	8000574 <__aeabi_i2d>
 801e84e:	a364      	add	r3, pc, #400	; (adr r3, 801e9e0 <_dtoa_r+0x2e0>)
 801e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e854:	f7e1 fef8 	bl	8000648 <__aeabi_dmul>
 801e858:	4602      	mov	r2, r0
 801e85a:	460b      	mov	r3, r1
 801e85c:	4630      	mov	r0, r6
 801e85e:	4639      	mov	r1, r7
 801e860:	f7e1 fd3c 	bl	80002dc <__adddf3>
 801e864:	4606      	mov	r6, r0
 801e866:	460f      	mov	r7, r1
 801e868:	f7e2 f99e 	bl	8000ba8 <__aeabi_d2iz>
 801e86c:	2200      	movs	r2, #0
 801e86e:	4683      	mov	fp, r0
 801e870:	2300      	movs	r3, #0
 801e872:	4630      	mov	r0, r6
 801e874:	4639      	mov	r1, r7
 801e876:	f7e2 f959 	bl	8000b2c <__aeabi_dcmplt>
 801e87a:	b148      	cbz	r0, 801e890 <_dtoa_r+0x190>
 801e87c:	4658      	mov	r0, fp
 801e87e:	f7e1 fe79 	bl	8000574 <__aeabi_i2d>
 801e882:	4632      	mov	r2, r6
 801e884:	463b      	mov	r3, r7
 801e886:	f7e2 f947 	bl	8000b18 <__aeabi_dcmpeq>
 801e88a:	b908      	cbnz	r0, 801e890 <_dtoa_r+0x190>
 801e88c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e890:	f1bb 0f16 	cmp.w	fp, #22
 801e894:	d857      	bhi.n	801e946 <_dtoa_r+0x246>
 801e896:	4b5b      	ldr	r3, [pc, #364]	; (801ea04 <_dtoa_r+0x304>)
 801e898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8a0:	ec51 0b18 	vmov	r0, r1, d8
 801e8a4:	f7e2 f942 	bl	8000b2c <__aeabi_dcmplt>
 801e8a8:	2800      	cmp	r0, #0
 801e8aa:	d04e      	beq.n	801e94a <_dtoa_r+0x24a>
 801e8ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e8b0:	2300      	movs	r3, #0
 801e8b2:	930c      	str	r3, [sp, #48]	; 0x30
 801e8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8b6:	1b5b      	subs	r3, r3, r5
 801e8b8:	1e5a      	subs	r2, r3, #1
 801e8ba:	bf45      	ittet	mi
 801e8bc:	f1c3 0301 	rsbmi	r3, r3, #1
 801e8c0:	9305      	strmi	r3, [sp, #20]
 801e8c2:	2300      	movpl	r3, #0
 801e8c4:	2300      	movmi	r3, #0
 801e8c6:	9206      	str	r2, [sp, #24]
 801e8c8:	bf54      	ite	pl
 801e8ca:	9305      	strpl	r3, [sp, #20]
 801e8cc:	9306      	strmi	r3, [sp, #24]
 801e8ce:	f1bb 0f00 	cmp.w	fp, #0
 801e8d2:	db3c      	blt.n	801e94e <_dtoa_r+0x24e>
 801e8d4:	9b06      	ldr	r3, [sp, #24]
 801e8d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801e8da:	445b      	add	r3, fp
 801e8dc:	9306      	str	r3, [sp, #24]
 801e8de:	2300      	movs	r3, #0
 801e8e0:	9308      	str	r3, [sp, #32]
 801e8e2:	9b07      	ldr	r3, [sp, #28]
 801e8e4:	2b09      	cmp	r3, #9
 801e8e6:	d868      	bhi.n	801e9ba <_dtoa_r+0x2ba>
 801e8e8:	2b05      	cmp	r3, #5
 801e8ea:	bfc4      	itt	gt
 801e8ec:	3b04      	subgt	r3, #4
 801e8ee:	9307      	strgt	r3, [sp, #28]
 801e8f0:	9b07      	ldr	r3, [sp, #28]
 801e8f2:	f1a3 0302 	sub.w	r3, r3, #2
 801e8f6:	bfcc      	ite	gt
 801e8f8:	2500      	movgt	r5, #0
 801e8fa:	2501      	movle	r5, #1
 801e8fc:	2b03      	cmp	r3, #3
 801e8fe:	f200 8085 	bhi.w	801ea0c <_dtoa_r+0x30c>
 801e902:	e8df f003 	tbb	[pc, r3]
 801e906:	3b2e      	.short	0x3b2e
 801e908:	5839      	.short	0x5839
 801e90a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801e90e:	441d      	add	r5, r3
 801e910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e914:	2b20      	cmp	r3, #32
 801e916:	bfc1      	itttt	gt
 801e918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e91c:	fa08 f803 	lslgt.w	r8, r8, r3
 801e920:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801e924:	fa26 f303 	lsrgt.w	r3, r6, r3
 801e928:	bfd6      	itet	le
 801e92a:	f1c3 0320 	rsble	r3, r3, #32
 801e92e:	ea48 0003 	orrgt.w	r0, r8, r3
 801e932:	fa06 f003 	lslle.w	r0, r6, r3
 801e936:	f7e1 fe0d 	bl	8000554 <__aeabi_ui2d>
 801e93a:	2201      	movs	r2, #1
 801e93c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801e940:	3d01      	subs	r5, #1
 801e942:	920e      	str	r2, [sp, #56]	; 0x38
 801e944:	e76f      	b.n	801e826 <_dtoa_r+0x126>
 801e946:	2301      	movs	r3, #1
 801e948:	e7b3      	b.n	801e8b2 <_dtoa_r+0x1b2>
 801e94a:	900c      	str	r0, [sp, #48]	; 0x30
 801e94c:	e7b2      	b.n	801e8b4 <_dtoa_r+0x1b4>
 801e94e:	9b05      	ldr	r3, [sp, #20]
 801e950:	eba3 030b 	sub.w	r3, r3, fp
 801e954:	9305      	str	r3, [sp, #20]
 801e956:	f1cb 0300 	rsb	r3, fp, #0
 801e95a:	9308      	str	r3, [sp, #32]
 801e95c:	2300      	movs	r3, #0
 801e95e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e960:	e7bf      	b.n	801e8e2 <_dtoa_r+0x1e2>
 801e962:	2300      	movs	r3, #0
 801e964:	9309      	str	r3, [sp, #36]	; 0x24
 801e966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e968:	2b00      	cmp	r3, #0
 801e96a:	dc52      	bgt.n	801ea12 <_dtoa_r+0x312>
 801e96c:	2301      	movs	r3, #1
 801e96e:	9301      	str	r3, [sp, #4]
 801e970:	9304      	str	r3, [sp, #16]
 801e972:	461a      	mov	r2, r3
 801e974:	920a      	str	r2, [sp, #40]	; 0x28
 801e976:	e00b      	b.n	801e990 <_dtoa_r+0x290>
 801e978:	2301      	movs	r3, #1
 801e97a:	e7f3      	b.n	801e964 <_dtoa_r+0x264>
 801e97c:	2300      	movs	r3, #0
 801e97e:	9309      	str	r3, [sp, #36]	; 0x24
 801e980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e982:	445b      	add	r3, fp
 801e984:	9301      	str	r3, [sp, #4]
 801e986:	3301      	adds	r3, #1
 801e988:	2b01      	cmp	r3, #1
 801e98a:	9304      	str	r3, [sp, #16]
 801e98c:	bfb8      	it	lt
 801e98e:	2301      	movlt	r3, #1
 801e990:	69e0      	ldr	r0, [r4, #28]
 801e992:	2100      	movs	r1, #0
 801e994:	2204      	movs	r2, #4
 801e996:	f102 0614 	add.w	r6, r2, #20
 801e99a:	429e      	cmp	r6, r3
 801e99c:	d93d      	bls.n	801ea1a <_dtoa_r+0x31a>
 801e99e:	6041      	str	r1, [r0, #4]
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	f000 fd9f 	bl	801f4e4 <_Balloc>
 801e9a6:	9000      	str	r0, [sp, #0]
 801e9a8:	2800      	cmp	r0, #0
 801e9aa:	d139      	bne.n	801ea20 <_dtoa_r+0x320>
 801e9ac:	4b16      	ldr	r3, [pc, #88]	; (801ea08 <_dtoa_r+0x308>)
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	f240 11af 	movw	r1, #431	; 0x1af
 801e9b4:	e6bd      	b.n	801e732 <_dtoa_r+0x32>
 801e9b6:	2301      	movs	r3, #1
 801e9b8:	e7e1      	b.n	801e97e <_dtoa_r+0x27e>
 801e9ba:	2501      	movs	r5, #1
 801e9bc:	2300      	movs	r3, #0
 801e9be:	9307      	str	r3, [sp, #28]
 801e9c0:	9509      	str	r5, [sp, #36]	; 0x24
 801e9c2:	f04f 33ff 	mov.w	r3, #4294967295
 801e9c6:	9301      	str	r3, [sp, #4]
 801e9c8:	9304      	str	r3, [sp, #16]
 801e9ca:	2200      	movs	r2, #0
 801e9cc:	2312      	movs	r3, #18
 801e9ce:	e7d1      	b.n	801e974 <_dtoa_r+0x274>
 801e9d0:	636f4361 	.word	0x636f4361
 801e9d4:	3fd287a7 	.word	0x3fd287a7
 801e9d8:	8b60c8b3 	.word	0x8b60c8b3
 801e9dc:	3fc68a28 	.word	0x3fc68a28
 801e9e0:	509f79fb 	.word	0x509f79fb
 801e9e4:	3fd34413 	.word	0x3fd34413
 801e9e8:	08023860 	.word	0x08023860
 801e9ec:	08023877 	.word	0x08023877
 801e9f0:	7ff00000 	.word	0x7ff00000
 801e9f4:	0802385c 	.word	0x0802385c
 801e9f8:	08023853 	.word	0x08023853
 801e9fc:	08023830 	.word	0x08023830
 801ea00:	3ff80000 	.word	0x3ff80000
 801ea04:	08023968 	.word	0x08023968
 801ea08:	080238cf 	.word	0x080238cf
 801ea0c:	2301      	movs	r3, #1
 801ea0e:	9309      	str	r3, [sp, #36]	; 0x24
 801ea10:	e7d7      	b.n	801e9c2 <_dtoa_r+0x2c2>
 801ea12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea14:	9301      	str	r3, [sp, #4]
 801ea16:	9304      	str	r3, [sp, #16]
 801ea18:	e7ba      	b.n	801e990 <_dtoa_r+0x290>
 801ea1a:	3101      	adds	r1, #1
 801ea1c:	0052      	lsls	r2, r2, #1
 801ea1e:	e7ba      	b.n	801e996 <_dtoa_r+0x296>
 801ea20:	69e3      	ldr	r3, [r4, #28]
 801ea22:	9a00      	ldr	r2, [sp, #0]
 801ea24:	601a      	str	r2, [r3, #0]
 801ea26:	9b04      	ldr	r3, [sp, #16]
 801ea28:	2b0e      	cmp	r3, #14
 801ea2a:	f200 80a8 	bhi.w	801eb7e <_dtoa_r+0x47e>
 801ea2e:	2d00      	cmp	r5, #0
 801ea30:	f000 80a5 	beq.w	801eb7e <_dtoa_r+0x47e>
 801ea34:	f1bb 0f00 	cmp.w	fp, #0
 801ea38:	dd38      	ble.n	801eaac <_dtoa_r+0x3ac>
 801ea3a:	4bc0      	ldr	r3, [pc, #768]	; (801ed3c <_dtoa_r+0x63c>)
 801ea3c:	f00b 020f 	and.w	r2, fp, #15
 801ea40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ea44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ea48:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ea4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801ea50:	d019      	beq.n	801ea86 <_dtoa_r+0x386>
 801ea52:	4bbb      	ldr	r3, [pc, #748]	; (801ed40 <_dtoa_r+0x640>)
 801ea54:	ec51 0b18 	vmov	r0, r1, d8
 801ea58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ea5c:	f7e1 ff1e 	bl	800089c <__aeabi_ddiv>
 801ea60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ea64:	f008 080f 	and.w	r8, r8, #15
 801ea68:	2503      	movs	r5, #3
 801ea6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801ed40 <_dtoa_r+0x640>
 801ea6e:	f1b8 0f00 	cmp.w	r8, #0
 801ea72:	d10a      	bne.n	801ea8a <_dtoa_r+0x38a>
 801ea74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea78:	4632      	mov	r2, r6
 801ea7a:	463b      	mov	r3, r7
 801ea7c:	f7e1 ff0e 	bl	800089c <__aeabi_ddiv>
 801ea80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ea84:	e02b      	b.n	801eade <_dtoa_r+0x3de>
 801ea86:	2502      	movs	r5, #2
 801ea88:	e7ef      	b.n	801ea6a <_dtoa_r+0x36a>
 801ea8a:	f018 0f01 	tst.w	r8, #1
 801ea8e:	d008      	beq.n	801eaa2 <_dtoa_r+0x3a2>
 801ea90:	4630      	mov	r0, r6
 801ea92:	4639      	mov	r1, r7
 801ea94:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ea98:	f7e1 fdd6 	bl	8000648 <__aeabi_dmul>
 801ea9c:	3501      	adds	r5, #1
 801ea9e:	4606      	mov	r6, r0
 801eaa0:	460f      	mov	r7, r1
 801eaa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801eaa6:	f109 0908 	add.w	r9, r9, #8
 801eaaa:	e7e0      	b.n	801ea6e <_dtoa_r+0x36e>
 801eaac:	f000 809f 	beq.w	801ebee <_dtoa_r+0x4ee>
 801eab0:	f1cb 0600 	rsb	r6, fp, #0
 801eab4:	4ba1      	ldr	r3, [pc, #644]	; (801ed3c <_dtoa_r+0x63c>)
 801eab6:	4fa2      	ldr	r7, [pc, #648]	; (801ed40 <_dtoa_r+0x640>)
 801eab8:	f006 020f 	and.w	r2, r6, #15
 801eabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eac4:	ec51 0b18 	vmov	r0, r1, d8
 801eac8:	f7e1 fdbe 	bl	8000648 <__aeabi_dmul>
 801eacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ead0:	1136      	asrs	r6, r6, #4
 801ead2:	2300      	movs	r3, #0
 801ead4:	2502      	movs	r5, #2
 801ead6:	2e00      	cmp	r6, #0
 801ead8:	d17e      	bne.n	801ebd8 <_dtoa_r+0x4d8>
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d1d0      	bne.n	801ea80 <_dtoa_r+0x380>
 801eade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eae0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	f000 8084 	beq.w	801ebf2 <_dtoa_r+0x4f2>
 801eaea:	4b96      	ldr	r3, [pc, #600]	; (801ed44 <_dtoa_r+0x644>)
 801eaec:	2200      	movs	r2, #0
 801eaee:	4640      	mov	r0, r8
 801eaf0:	4649      	mov	r1, r9
 801eaf2:	f7e2 f81b 	bl	8000b2c <__aeabi_dcmplt>
 801eaf6:	2800      	cmp	r0, #0
 801eaf8:	d07b      	beq.n	801ebf2 <_dtoa_r+0x4f2>
 801eafa:	9b04      	ldr	r3, [sp, #16]
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d078      	beq.n	801ebf2 <_dtoa_r+0x4f2>
 801eb00:	9b01      	ldr	r3, [sp, #4]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	dd39      	ble.n	801eb7a <_dtoa_r+0x47a>
 801eb06:	4b90      	ldr	r3, [pc, #576]	; (801ed48 <_dtoa_r+0x648>)
 801eb08:	2200      	movs	r2, #0
 801eb0a:	4640      	mov	r0, r8
 801eb0c:	4649      	mov	r1, r9
 801eb0e:	f7e1 fd9b 	bl	8000648 <__aeabi_dmul>
 801eb12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb16:	9e01      	ldr	r6, [sp, #4]
 801eb18:	f10b 37ff 	add.w	r7, fp, #4294967295
 801eb1c:	3501      	adds	r5, #1
 801eb1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801eb22:	4628      	mov	r0, r5
 801eb24:	f7e1 fd26 	bl	8000574 <__aeabi_i2d>
 801eb28:	4642      	mov	r2, r8
 801eb2a:	464b      	mov	r3, r9
 801eb2c:	f7e1 fd8c 	bl	8000648 <__aeabi_dmul>
 801eb30:	4b86      	ldr	r3, [pc, #536]	; (801ed4c <_dtoa_r+0x64c>)
 801eb32:	2200      	movs	r2, #0
 801eb34:	f7e1 fbd2 	bl	80002dc <__adddf3>
 801eb38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801eb3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb40:	9303      	str	r3, [sp, #12]
 801eb42:	2e00      	cmp	r6, #0
 801eb44:	d158      	bne.n	801ebf8 <_dtoa_r+0x4f8>
 801eb46:	4b82      	ldr	r3, [pc, #520]	; (801ed50 <_dtoa_r+0x650>)
 801eb48:	2200      	movs	r2, #0
 801eb4a:	4640      	mov	r0, r8
 801eb4c:	4649      	mov	r1, r9
 801eb4e:	f7e1 fbc3 	bl	80002d8 <__aeabi_dsub>
 801eb52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eb56:	4680      	mov	r8, r0
 801eb58:	4689      	mov	r9, r1
 801eb5a:	f7e2 f805 	bl	8000b68 <__aeabi_dcmpgt>
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	f040 8296 	bne.w	801f090 <_dtoa_r+0x990>
 801eb64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801eb68:	4640      	mov	r0, r8
 801eb6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb6e:	4649      	mov	r1, r9
 801eb70:	f7e1 ffdc 	bl	8000b2c <__aeabi_dcmplt>
 801eb74:	2800      	cmp	r0, #0
 801eb76:	f040 8289 	bne.w	801f08c <_dtoa_r+0x98c>
 801eb7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801eb7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	f2c0 814e 	blt.w	801ee22 <_dtoa_r+0x722>
 801eb86:	f1bb 0f0e 	cmp.w	fp, #14
 801eb8a:	f300 814a 	bgt.w	801ee22 <_dtoa_r+0x722>
 801eb8e:	4b6b      	ldr	r3, [pc, #428]	; (801ed3c <_dtoa_r+0x63c>)
 801eb90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801eb94:	e9d3 8900 	ldrd	r8, r9, [r3]
 801eb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	f280 80dc 	bge.w	801ed58 <_dtoa_r+0x658>
 801eba0:	9b04      	ldr	r3, [sp, #16]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	f300 80d8 	bgt.w	801ed58 <_dtoa_r+0x658>
 801eba8:	f040 826f 	bne.w	801f08a <_dtoa_r+0x98a>
 801ebac:	4b68      	ldr	r3, [pc, #416]	; (801ed50 <_dtoa_r+0x650>)
 801ebae:	2200      	movs	r2, #0
 801ebb0:	4640      	mov	r0, r8
 801ebb2:	4649      	mov	r1, r9
 801ebb4:	f7e1 fd48 	bl	8000648 <__aeabi_dmul>
 801ebb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ebbc:	f7e1 ffca 	bl	8000b54 <__aeabi_dcmpge>
 801ebc0:	9e04      	ldr	r6, [sp, #16]
 801ebc2:	4637      	mov	r7, r6
 801ebc4:	2800      	cmp	r0, #0
 801ebc6:	f040 8245 	bne.w	801f054 <_dtoa_r+0x954>
 801ebca:	9d00      	ldr	r5, [sp, #0]
 801ebcc:	2331      	movs	r3, #49	; 0x31
 801ebce:	f805 3b01 	strb.w	r3, [r5], #1
 801ebd2:	f10b 0b01 	add.w	fp, fp, #1
 801ebd6:	e241      	b.n	801f05c <_dtoa_r+0x95c>
 801ebd8:	07f2      	lsls	r2, r6, #31
 801ebda:	d505      	bpl.n	801ebe8 <_dtoa_r+0x4e8>
 801ebdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ebe0:	f7e1 fd32 	bl	8000648 <__aeabi_dmul>
 801ebe4:	3501      	adds	r5, #1
 801ebe6:	2301      	movs	r3, #1
 801ebe8:	1076      	asrs	r6, r6, #1
 801ebea:	3708      	adds	r7, #8
 801ebec:	e773      	b.n	801ead6 <_dtoa_r+0x3d6>
 801ebee:	2502      	movs	r5, #2
 801ebf0:	e775      	b.n	801eade <_dtoa_r+0x3de>
 801ebf2:	9e04      	ldr	r6, [sp, #16]
 801ebf4:	465f      	mov	r7, fp
 801ebf6:	e792      	b.n	801eb1e <_dtoa_r+0x41e>
 801ebf8:	9900      	ldr	r1, [sp, #0]
 801ebfa:	4b50      	ldr	r3, [pc, #320]	; (801ed3c <_dtoa_r+0x63c>)
 801ebfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ec00:	4431      	add	r1, r6
 801ec02:	9102      	str	r1, [sp, #8]
 801ec04:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ec06:	eeb0 9a47 	vmov.f32	s18, s14
 801ec0a:	eef0 9a67 	vmov.f32	s19, s15
 801ec0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ec12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ec16:	2900      	cmp	r1, #0
 801ec18:	d044      	beq.n	801eca4 <_dtoa_r+0x5a4>
 801ec1a:	494e      	ldr	r1, [pc, #312]	; (801ed54 <_dtoa_r+0x654>)
 801ec1c:	2000      	movs	r0, #0
 801ec1e:	f7e1 fe3d 	bl	800089c <__aeabi_ddiv>
 801ec22:	ec53 2b19 	vmov	r2, r3, d9
 801ec26:	f7e1 fb57 	bl	80002d8 <__aeabi_dsub>
 801ec2a:	9d00      	ldr	r5, [sp, #0]
 801ec2c:	ec41 0b19 	vmov	d9, r0, r1
 801ec30:	4649      	mov	r1, r9
 801ec32:	4640      	mov	r0, r8
 801ec34:	f7e1 ffb8 	bl	8000ba8 <__aeabi_d2iz>
 801ec38:	4606      	mov	r6, r0
 801ec3a:	f7e1 fc9b 	bl	8000574 <__aeabi_i2d>
 801ec3e:	4602      	mov	r2, r0
 801ec40:	460b      	mov	r3, r1
 801ec42:	4640      	mov	r0, r8
 801ec44:	4649      	mov	r1, r9
 801ec46:	f7e1 fb47 	bl	80002d8 <__aeabi_dsub>
 801ec4a:	3630      	adds	r6, #48	; 0x30
 801ec4c:	f805 6b01 	strb.w	r6, [r5], #1
 801ec50:	ec53 2b19 	vmov	r2, r3, d9
 801ec54:	4680      	mov	r8, r0
 801ec56:	4689      	mov	r9, r1
 801ec58:	f7e1 ff68 	bl	8000b2c <__aeabi_dcmplt>
 801ec5c:	2800      	cmp	r0, #0
 801ec5e:	d164      	bne.n	801ed2a <_dtoa_r+0x62a>
 801ec60:	4642      	mov	r2, r8
 801ec62:	464b      	mov	r3, r9
 801ec64:	4937      	ldr	r1, [pc, #220]	; (801ed44 <_dtoa_r+0x644>)
 801ec66:	2000      	movs	r0, #0
 801ec68:	f7e1 fb36 	bl	80002d8 <__aeabi_dsub>
 801ec6c:	ec53 2b19 	vmov	r2, r3, d9
 801ec70:	f7e1 ff5c 	bl	8000b2c <__aeabi_dcmplt>
 801ec74:	2800      	cmp	r0, #0
 801ec76:	f040 80b6 	bne.w	801ede6 <_dtoa_r+0x6e6>
 801ec7a:	9b02      	ldr	r3, [sp, #8]
 801ec7c:	429d      	cmp	r5, r3
 801ec7e:	f43f af7c 	beq.w	801eb7a <_dtoa_r+0x47a>
 801ec82:	4b31      	ldr	r3, [pc, #196]	; (801ed48 <_dtoa_r+0x648>)
 801ec84:	ec51 0b19 	vmov	r0, r1, d9
 801ec88:	2200      	movs	r2, #0
 801ec8a:	f7e1 fcdd 	bl	8000648 <__aeabi_dmul>
 801ec8e:	4b2e      	ldr	r3, [pc, #184]	; (801ed48 <_dtoa_r+0x648>)
 801ec90:	ec41 0b19 	vmov	d9, r0, r1
 801ec94:	2200      	movs	r2, #0
 801ec96:	4640      	mov	r0, r8
 801ec98:	4649      	mov	r1, r9
 801ec9a:	f7e1 fcd5 	bl	8000648 <__aeabi_dmul>
 801ec9e:	4680      	mov	r8, r0
 801eca0:	4689      	mov	r9, r1
 801eca2:	e7c5      	b.n	801ec30 <_dtoa_r+0x530>
 801eca4:	ec51 0b17 	vmov	r0, r1, d7
 801eca8:	f7e1 fcce 	bl	8000648 <__aeabi_dmul>
 801ecac:	9b02      	ldr	r3, [sp, #8]
 801ecae:	9d00      	ldr	r5, [sp, #0]
 801ecb0:	930f      	str	r3, [sp, #60]	; 0x3c
 801ecb2:	ec41 0b19 	vmov	d9, r0, r1
 801ecb6:	4649      	mov	r1, r9
 801ecb8:	4640      	mov	r0, r8
 801ecba:	f7e1 ff75 	bl	8000ba8 <__aeabi_d2iz>
 801ecbe:	4606      	mov	r6, r0
 801ecc0:	f7e1 fc58 	bl	8000574 <__aeabi_i2d>
 801ecc4:	3630      	adds	r6, #48	; 0x30
 801ecc6:	4602      	mov	r2, r0
 801ecc8:	460b      	mov	r3, r1
 801ecca:	4640      	mov	r0, r8
 801eccc:	4649      	mov	r1, r9
 801ecce:	f7e1 fb03 	bl	80002d8 <__aeabi_dsub>
 801ecd2:	f805 6b01 	strb.w	r6, [r5], #1
 801ecd6:	9b02      	ldr	r3, [sp, #8]
 801ecd8:	429d      	cmp	r5, r3
 801ecda:	4680      	mov	r8, r0
 801ecdc:	4689      	mov	r9, r1
 801ecde:	f04f 0200 	mov.w	r2, #0
 801ece2:	d124      	bne.n	801ed2e <_dtoa_r+0x62e>
 801ece4:	4b1b      	ldr	r3, [pc, #108]	; (801ed54 <_dtoa_r+0x654>)
 801ece6:	ec51 0b19 	vmov	r0, r1, d9
 801ecea:	f7e1 faf7 	bl	80002dc <__adddf3>
 801ecee:	4602      	mov	r2, r0
 801ecf0:	460b      	mov	r3, r1
 801ecf2:	4640      	mov	r0, r8
 801ecf4:	4649      	mov	r1, r9
 801ecf6:	f7e1 ff37 	bl	8000b68 <__aeabi_dcmpgt>
 801ecfa:	2800      	cmp	r0, #0
 801ecfc:	d173      	bne.n	801ede6 <_dtoa_r+0x6e6>
 801ecfe:	ec53 2b19 	vmov	r2, r3, d9
 801ed02:	4914      	ldr	r1, [pc, #80]	; (801ed54 <_dtoa_r+0x654>)
 801ed04:	2000      	movs	r0, #0
 801ed06:	f7e1 fae7 	bl	80002d8 <__aeabi_dsub>
 801ed0a:	4602      	mov	r2, r0
 801ed0c:	460b      	mov	r3, r1
 801ed0e:	4640      	mov	r0, r8
 801ed10:	4649      	mov	r1, r9
 801ed12:	f7e1 ff0b 	bl	8000b2c <__aeabi_dcmplt>
 801ed16:	2800      	cmp	r0, #0
 801ed18:	f43f af2f 	beq.w	801eb7a <_dtoa_r+0x47a>
 801ed1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ed1e:	1e6b      	subs	r3, r5, #1
 801ed20:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ed26:	2b30      	cmp	r3, #48	; 0x30
 801ed28:	d0f8      	beq.n	801ed1c <_dtoa_r+0x61c>
 801ed2a:	46bb      	mov	fp, r7
 801ed2c:	e04a      	b.n	801edc4 <_dtoa_r+0x6c4>
 801ed2e:	4b06      	ldr	r3, [pc, #24]	; (801ed48 <_dtoa_r+0x648>)
 801ed30:	f7e1 fc8a 	bl	8000648 <__aeabi_dmul>
 801ed34:	4680      	mov	r8, r0
 801ed36:	4689      	mov	r9, r1
 801ed38:	e7bd      	b.n	801ecb6 <_dtoa_r+0x5b6>
 801ed3a:	bf00      	nop
 801ed3c:	08023968 	.word	0x08023968
 801ed40:	08023940 	.word	0x08023940
 801ed44:	3ff00000 	.word	0x3ff00000
 801ed48:	40240000 	.word	0x40240000
 801ed4c:	401c0000 	.word	0x401c0000
 801ed50:	40140000 	.word	0x40140000
 801ed54:	3fe00000 	.word	0x3fe00000
 801ed58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ed5c:	9d00      	ldr	r5, [sp, #0]
 801ed5e:	4642      	mov	r2, r8
 801ed60:	464b      	mov	r3, r9
 801ed62:	4630      	mov	r0, r6
 801ed64:	4639      	mov	r1, r7
 801ed66:	f7e1 fd99 	bl	800089c <__aeabi_ddiv>
 801ed6a:	f7e1 ff1d 	bl	8000ba8 <__aeabi_d2iz>
 801ed6e:	9001      	str	r0, [sp, #4]
 801ed70:	f7e1 fc00 	bl	8000574 <__aeabi_i2d>
 801ed74:	4642      	mov	r2, r8
 801ed76:	464b      	mov	r3, r9
 801ed78:	f7e1 fc66 	bl	8000648 <__aeabi_dmul>
 801ed7c:	4602      	mov	r2, r0
 801ed7e:	460b      	mov	r3, r1
 801ed80:	4630      	mov	r0, r6
 801ed82:	4639      	mov	r1, r7
 801ed84:	f7e1 faa8 	bl	80002d8 <__aeabi_dsub>
 801ed88:	9e01      	ldr	r6, [sp, #4]
 801ed8a:	9f04      	ldr	r7, [sp, #16]
 801ed8c:	3630      	adds	r6, #48	; 0x30
 801ed8e:	f805 6b01 	strb.w	r6, [r5], #1
 801ed92:	9e00      	ldr	r6, [sp, #0]
 801ed94:	1bae      	subs	r6, r5, r6
 801ed96:	42b7      	cmp	r7, r6
 801ed98:	4602      	mov	r2, r0
 801ed9a:	460b      	mov	r3, r1
 801ed9c:	d134      	bne.n	801ee08 <_dtoa_r+0x708>
 801ed9e:	f7e1 fa9d 	bl	80002dc <__adddf3>
 801eda2:	4642      	mov	r2, r8
 801eda4:	464b      	mov	r3, r9
 801eda6:	4606      	mov	r6, r0
 801eda8:	460f      	mov	r7, r1
 801edaa:	f7e1 fedd 	bl	8000b68 <__aeabi_dcmpgt>
 801edae:	b9c8      	cbnz	r0, 801ede4 <_dtoa_r+0x6e4>
 801edb0:	4642      	mov	r2, r8
 801edb2:	464b      	mov	r3, r9
 801edb4:	4630      	mov	r0, r6
 801edb6:	4639      	mov	r1, r7
 801edb8:	f7e1 feae 	bl	8000b18 <__aeabi_dcmpeq>
 801edbc:	b110      	cbz	r0, 801edc4 <_dtoa_r+0x6c4>
 801edbe:	9b01      	ldr	r3, [sp, #4]
 801edc0:	07db      	lsls	r3, r3, #31
 801edc2:	d40f      	bmi.n	801ede4 <_dtoa_r+0x6e4>
 801edc4:	4651      	mov	r1, sl
 801edc6:	4620      	mov	r0, r4
 801edc8:	f000 fbcc 	bl	801f564 <_Bfree>
 801edcc:	2300      	movs	r3, #0
 801edce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801edd0:	702b      	strb	r3, [r5, #0]
 801edd2:	f10b 0301 	add.w	r3, fp, #1
 801edd6:	6013      	str	r3, [r2, #0]
 801edd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801edda:	2b00      	cmp	r3, #0
 801eddc:	f43f ace2 	beq.w	801e7a4 <_dtoa_r+0xa4>
 801ede0:	601d      	str	r5, [r3, #0]
 801ede2:	e4df      	b.n	801e7a4 <_dtoa_r+0xa4>
 801ede4:	465f      	mov	r7, fp
 801ede6:	462b      	mov	r3, r5
 801ede8:	461d      	mov	r5, r3
 801edea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801edee:	2a39      	cmp	r2, #57	; 0x39
 801edf0:	d106      	bne.n	801ee00 <_dtoa_r+0x700>
 801edf2:	9a00      	ldr	r2, [sp, #0]
 801edf4:	429a      	cmp	r2, r3
 801edf6:	d1f7      	bne.n	801ede8 <_dtoa_r+0x6e8>
 801edf8:	9900      	ldr	r1, [sp, #0]
 801edfa:	2230      	movs	r2, #48	; 0x30
 801edfc:	3701      	adds	r7, #1
 801edfe:	700a      	strb	r2, [r1, #0]
 801ee00:	781a      	ldrb	r2, [r3, #0]
 801ee02:	3201      	adds	r2, #1
 801ee04:	701a      	strb	r2, [r3, #0]
 801ee06:	e790      	b.n	801ed2a <_dtoa_r+0x62a>
 801ee08:	4ba3      	ldr	r3, [pc, #652]	; (801f098 <_dtoa_r+0x998>)
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	f7e1 fc1c 	bl	8000648 <__aeabi_dmul>
 801ee10:	2200      	movs	r2, #0
 801ee12:	2300      	movs	r3, #0
 801ee14:	4606      	mov	r6, r0
 801ee16:	460f      	mov	r7, r1
 801ee18:	f7e1 fe7e 	bl	8000b18 <__aeabi_dcmpeq>
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	d09e      	beq.n	801ed5e <_dtoa_r+0x65e>
 801ee20:	e7d0      	b.n	801edc4 <_dtoa_r+0x6c4>
 801ee22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee24:	2a00      	cmp	r2, #0
 801ee26:	f000 80ca 	beq.w	801efbe <_dtoa_r+0x8be>
 801ee2a:	9a07      	ldr	r2, [sp, #28]
 801ee2c:	2a01      	cmp	r2, #1
 801ee2e:	f300 80ad 	bgt.w	801ef8c <_dtoa_r+0x88c>
 801ee32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee34:	2a00      	cmp	r2, #0
 801ee36:	f000 80a5 	beq.w	801ef84 <_dtoa_r+0x884>
 801ee3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ee3e:	9e08      	ldr	r6, [sp, #32]
 801ee40:	9d05      	ldr	r5, [sp, #20]
 801ee42:	9a05      	ldr	r2, [sp, #20]
 801ee44:	441a      	add	r2, r3
 801ee46:	9205      	str	r2, [sp, #20]
 801ee48:	9a06      	ldr	r2, [sp, #24]
 801ee4a:	2101      	movs	r1, #1
 801ee4c:	441a      	add	r2, r3
 801ee4e:	4620      	mov	r0, r4
 801ee50:	9206      	str	r2, [sp, #24]
 801ee52:	f000 fc3d 	bl	801f6d0 <__i2b>
 801ee56:	4607      	mov	r7, r0
 801ee58:	b165      	cbz	r5, 801ee74 <_dtoa_r+0x774>
 801ee5a:	9b06      	ldr	r3, [sp, #24]
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	dd09      	ble.n	801ee74 <_dtoa_r+0x774>
 801ee60:	42ab      	cmp	r3, r5
 801ee62:	9a05      	ldr	r2, [sp, #20]
 801ee64:	bfa8      	it	ge
 801ee66:	462b      	movge	r3, r5
 801ee68:	1ad2      	subs	r2, r2, r3
 801ee6a:	9205      	str	r2, [sp, #20]
 801ee6c:	9a06      	ldr	r2, [sp, #24]
 801ee6e:	1aed      	subs	r5, r5, r3
 801ee70:	1ad3      	subs	r3, r2, r3
 801ee72:	9306      	str	r3, [sp, #24]
 801ee74:	9b08      	ldr	r3, [sp, #32]
 801ee76:	b1f3      	cbz	r3, 801eeb6 <_dtoa_r+0x7b6>
 801ee78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	f000 80a3 	beq.w	801efc6 <_dtoa_r+0x8c6>
 801ee80:	2e00      	cmp	r6, #0
 801ee82:	dd10      	ble.n	801eea6 <_dtoa_r+0x7a6>
 801ee84:	4639      	mov	r1, r7
 801ee86:	4632      	mov	r2, r6
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f000 fce1 	bl	801f850 <__pow5mult>
 801ee8e:	4652      	mov	r2, sl
 801ee90:	4601      	mov	r1, r0
 801ee92:	4607      	mov	r7, r0
 801ee94:	4620      	mov	r0, r4
 801ee96:	f000 fc31 	bl	801f6fc <__multiply>
 801ee9a:	4651      	mov	r1, sl
 801ee9c:	4680      	mov	r8, r0
 801ee9e:	4620      	mov	r0, r4
 801eea0:	f000 fb60 	bl	801f564 <_Bfree>
 801eea4:	46c2      	mov	sl, r8
 801eea6:	9b08      	ldr	r3, [sp, #32]
 801eea8:	1b9a      	subs	r2, r3, r6
 801eeaa:	d004      	beq.n	801eeb6 <_dtoa_r+0x7b6>
 801eeac:	4651      	mov	r1, sl
 801eeae:	4620      	mov	r0, r4
 801eeb0:	f000 fcce 	bl	801f850 <__pow5mult>
 801eeb4:	4682      	mov	sl, r0
 801eeb6:	2101      	movs	r1, #1
 801eeb8:	4620      	mov	r0, r4
 801eeba:	f000 fc09 	bl	801f6d0 <__i2b>
 801eebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	4606      	mov	r6, r0
 801eec4:	f340 8081 	ble.w	801efca <_dtoa_r+0x8ca>
 801eec8:	461a      	mov	r2, r3
 801eeca:	4601      	mov	r1, r0
 801eecc:	4620      	mov	r0, r4
 801eece:	f000 fcbf 	bl	801f850 <__pow5mult>
 801eed2:	9b07      	ldr	r3, [sp, #28]
 801eed4:	2b01      	cmp	r3, #1
 801eed6:	4606      	mov	r6, r0
 801eed8:	dd7a      	ble.n	801efd0 <_dtoa_r+0x8d0>
 801eeda:	f04f 0800 	mov.w	r8, #0
 801eede:	6933      	ldr	r3, [r6, #16]
 801eee0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801eee4:	6918      	ldr	r0, [r3, #16]
 801eee6:	f000 fba5 	bl	801f634 <__hi0bits>
 801eeea:	f1c0 0020 	rsb	r0, r0, #32
 801eeee:	9b06      	ldr	r3, [sp, #24]
 801eef0:	4418      	add	r0, r3
 801eef2:	f010 001f 	ands.w	r0, r0, #31
 801eef6:	f000 8094 	beq.w	801f022 <_dtoa_r+0x922>
 801eefa:	f1c0 0320 	rsb	r3, r0, #32
 801eefe:	2b04      	cmp	r3, #4
 801ef00:	f340 8085 	ble.w	801f00e <_dtoa_r+0x90e>
 801ef04:	9b05      	ldr	r3, [sp, #20]
 801ef06:	f1c0 001c 	rsb	r0, r0, #28
 801ef0a:	4403      	add	r3, r0
 801ef0c:	9305      	str	r3, [sp, #20]
 801ef0e:	9b06      	ldr	r3, [sp, #24]
 801ef10:	4403      	add	r3, r0
 801ef12:	4405      	add	r5, r0
 801ef14:	9306      	str	r3, [sp, #24]
 801ef16:	9b05      	ldr	r3, [sp, #20]
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	dd05      	ble.n	801ef28 <_dtoa_r+0x828>
 801ef1c:	4651      	mov	r1, sl
 801ef1e:	461a      	mov	r2, r3
 801ef20:	4620      	mov	r0, r4
 801ef22:	f000 fcef 	bl	801f904 <__lshift>
 801ef26:	4682      	mov	sl, r0
 801ef28:	9b06      	ldr	r3, [sp, #24]
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	dd05      	ble.n	801ef3a <_dtoa_r+0x83a>
 801ef2e:	4631      	mov	r1, r6
 801ef30:	461a      	mov	r2, r3
 801ef32:	4620      	mov	r0, r4
 801ef34:	f000 fce6 	bl	801f904 <__lshift>
 801ef38:	4606      	mov	r6, r0
 801ef3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d072      	beq.n	801f026 <_dtoa_r+0x926>
 801ef40:	4631      	mov	r1, r6
 801ef42:	4650      	mov	r0, sl
 801ef44:	f000 fd4a 	bl	801f9dc <__mcmp>
 801ef48:	2800      	cmp	r0, #0
 801ef4a:	da6c      	bge.n	801f026 <_dtoa_r+0x926>
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	4651      	mov	r1, sl
 801ef50:	220a      	movs	r2, #10
 801ef52:	4620      	mov	r0, r4
 801ef54:	f000 fb28 	bl	801f5a8 <__multadd>
 801ef58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef5e:	4682      	mov	sl, r0
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	f000 81b0 	beq.w	801f2c6 <_dtoa_r+0xbc6>
 801ef66:	2300      	movs	r3, #0
 801ef68:	4639      	mov	r1, r7
 801ef6a:	220a      	movs	r2, #10
 801ef6c:	4620      	mov	r0, r4
 801ef6e:	f000 fb1b 	bl	801f5a8 <__multadd>
 801ef72:	9b01      	ldr	r3, [sp, #4]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	4607      	mov	r7, r0
 801ef78:	f300 8096 	bgt.w	801f0a8 <_dtoa_r+0x9a8>
 801ef7c:	9b07      	ldr	r3, [sp, #28]
 801ef7e:	2b02      	cmp	r3, #2
 801ef80:	dc59      	bgt.n	801f036 <_dtoa_r+0x936>
 801ef82:	e091      	b.n	801f0a8 <_dtoa_r+0x9a8>
 801ef84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ef8a:	e758      	b.n	801ee3e <_dtoa_r+0x73e>
 801ef8c:	9b04      	ldr	r3, [sp, #16]
 801ef8e:	1e5e      	subs	r6, r3, #1
 801ef90:	9b08      	ldr	r3, [sp, #32]
 801ef92:	42b3      	cmp	r3, r6
 801ef94:	bfbf      	itttt	lt
 801ef96:	9b08      	ldrlt	r3, [sp, #32]
 801ef98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801ef9a:	9608      	strlt	r6, [sp, #32]
 801ef9c:	1af3      	sublt	r3, r6, r3
 801ef9e:	bfb4      	ite	lt
 801efa0:	18d2      	addlt	r2, r2, r3
 801efa2:	1b9e      	subge	r6, r3, r6
 801efa4:	9b04      	ldr	r3, [sp, #16]
 801efa6:	bfbc      	itt	lt
 801efa8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801efaa:	2600      	movlt	r6, #0
 801efac:	2b00      	cmp	r3, #0
 801efae:	bfb7      	itett	lt
 801efb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801efb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801efb8:	1a9d      	sublt	r5, r3, r2
 801efba:	2300      	movlt	r3, #0
 801efbc:	e741      	b.n	801ee42 <_dtoa_r+0x742>
 801efbe:	9e08      	ldr	r6, [sp, #32]
 801efc0:	9d05      	ldr	r5, [sp, #20]
 801efc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801efc4:	e748      	b.n	801ee58 <_dtoa_r+0x758>
 801efc6:	9a08      	ldr	r2, [sp, #32]
 801efc8:	e770      	b.n	801eeac <_dtoa_r+0x7ac>
 801efca:	9b07      	ldr	r3, [sp, #28]
 801efcc:	2b01      	cmp	r3, #1
 801efce:	dc19      	bgt.n	801f004 <_dtoa_r+0x904>
 801efd0:	9b02      	ldr	r3, [sp, #8]
 801efd2:	b9bb      	cbnz	r3, 801f004 <_dtoa_r+0x904>
 801efd4:	9b03      	ldr	r3, [sp, #12]
 801efd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801efda:	b99b      	cbnz	r3, 801f004 <_dtoa_r+0x904>
 801efdc:	9b03      	ldr	r3, [sp, #12]
 801efde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801efe2:	0d1b      	lsrs	r3, r3, #20
 801efe4:	051b      	lsls	r3, r3, #20
 801efe6:	b183      	cbz	r3, 801f00a <_dtoa_r+0x90a>
 801efe8:	9b05      	ldr	r3, [sp, #20]
 801efea:	3301      	adds	r3, #1
 801efec:	9305      	str	r3, [sp, #20]
 801efee:	9b06      	ldr	r3, [sp, #24]
 801eff0:	3301      	adds	r3, #1
 801eff2:	9306      	str	r3, [sp, #24]
 801eff4:	f04f 0801 	mov.w	r8, #1
 801eff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801effa:	2b00      	cmp	r3, #0
 801effc:	f47f af6f 	bne.w	801eede <_dtoa_r+0x7de>
 801f000:	2001      	movs	r0, #1
 801f002:	e774      	b.n	801eeee <_dtoa_r+0x7ee>
 801f004:	f04f 0800 	mov.w	r8, #0
 801f008:	e7f6      	b.n	801eff8 <_dtoa_r+0x8f8>
 801f00a:	4698      	mov	r8, r3
 801f00c:	e7f4      	b.n	801eff8 <_dtoa_r+0x8f8>
 801f00e:	d082      	beq.n	801ef16 <_dtoa_r+0x816>
 801f010:	9a05      	ldr	r2, [sp, #20]
 801f012:	331c      	adds	r3, #28
 801f014:	441a      	add	r2, r3
 801f016:	9205      	str	r2, [sp, #20]
 801f018:	9a06      	ldr	r2, [sp, #24]
 801f01a:	441a      	add	r2, r3
 801f01c:	441d      	add	r5, r3
 801f01e:	9206      	str	r2, [sp, #24]
 801f020:	e779      	b.n	801ef16 <_dtoa_r+0x816>
 801f022:	4603      	mov	r3, r0
 801f024:	e7f4      	b.n	801f010 <_dtoa_r+0x910>
 801f026:	9b04      	ldr	r3, [sp, #16]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	dc37      	bgt.n	801f09c <_dtoa_r+0x99c>
 801f02c:	9b07      	ldr	r3, [sp, #28]
 801f02e:	2b02      	cmp	r3, #2
 801f030:	dd34      	ble.n	801f09c <_dtoa_r+0x99c>
 801f032:	9b04      	ldr	r3, [sp, #16]
 801f034:	9301      	str	r3, [sp, #4]
 801f036:	9b01      	ldr	r3, [sp, #4]
 801f038:	b963      	cbnz	r3, 801f054 <_dtoa_r+0x954>
 801f03a:	4631      	mov	r1, r6
 801f03c:	2205      	movs	r2, #5
 801f03e:	4620      	mov	r0, r4
 801f040:	f000 fab2 	bl	801f5a8 <__multadd>
 801f044:	4601      	mov	r1, r0
 801f046:	4606      	mov	r6, r0
 801f048:	4650      	mov	r0, sl
 801f04a:	f000 fcc7 	bl	801f9dc <__mcmp>
 801f04e:	2800      	cmp	r0, #0
 801f050:	f73f adbb 	bgt.w	801ebca <_dtoa_r+0x4ca>
 801f054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f056:	9d00      	ldr	r5, [sp, #0]
 801f058:	ea6f 0b03 	mvn.w	fp, r3
 801f05c:	f04f 0800 	mov.w	r8, #0
 801f060:	4631      	mov	r1, r6
 801f062:	4620      	mov	r0, r4
 801f064:	f000 fa7e 	bl	801f564 <_Bfree>
 801f068:	2f00      	cmp	r7, #0
 801f06a:	f43f aeab 	beq.w	801edc4 <_dtoa_r+0x6c4>
 801f06e:	f1b8 0f00 	cmp.w	r8, #0
 801f072:	d005      	beq.n	801f080 <_dtoa_r+0x980>
 801f074:	45b8      	cmp	r8, r7
 801f076:	d003      	beq.n	801f080 <_dtoa_r+0x980>
 801f078:	4641      	mov	r1, r8
 801f07a:	4620      	mov	r0, r4
 801f07c:	f000 fa72 	bl	801f564 <_Bfree>
 801f080:	4639      	mov	r1, r7
 801f082:	4620      	mov	r0, r4
 801f084:	f000 fa6e 	bl	801f564 <_Bfree>
 801f088:	e69c      	b.n	801edc4 <_dtoa_r+0x6c4>
 801f08a:	2600      	movs	r6, #0
 801f08c:	4637      	mov	r7, r6
 801f08e:	e7e1      	b.n	801f054 <_dtoa_r+0x954>
 801f090:	46bb      	mov	fp, r7
 801f092:	4637      	mov	r7, r6
 801f094:	e599      	b.n	801ebca <_dtoa_r+0x4ca>
 801f096:	bf00      	nop
 801f098:	40240000 	.word	0x40240000
 801f09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	f000 80c8 	beq.w	801f234 <_dtoa_r+0xb34>
 801f0a4:	9b04      	ldr	r3, [sp, #16]
 801f0a6:	9301      	str	r3, [sp, #4]
 801f0a8:	2d00      	cmp	r5, #0
 801f0aa:	dd05      	ble.n	801f0b8 <_dtoa_r+0x9b8>
 801f0ac:	4639      	mov	r1, r7
 801f0ae:	462a      	mov	r2, r5
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	f000 fc27 	bl	801f904 <__lshift>
 801f0b6:	4607      	mov	r7, r0
 801f0b8:	f1b8 0f00 	cmp.w	r8, #0
 801f0bc:	d05b      	beq.n	801f176 <_dtoa_r+0xa76>
 801f0be:	6879      	ldr	r1, [r7, #4]
 801f0c0:	4620      	mov	r0, r4
 801f0c2:	f000 fa0f 	bl	801f4e4 <_Balloc>
 801f0c6:	4605      	mov	r5, r0
 801f0c8:	b928      	cbnz	r0, 801f0d6 <_dtoa_r+0x9d6>
 801f0ca:	4b83      	ldr	r3, [pc, #524]	; (801f2d8 <_dtoa_r+0xbd8>)
 801f0cc:	4602      	mov	r2, r0
 801f0ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 801f0d2:	f7ff bb2e 	b.w	801e732 <_dtoa_r+0x32>
 801f0d6:	693a      	ldr	r2, [r7, #16]
 801f0d8:	3202      	adds	r2, #2
 801f0da:	0092      	lsls	r2, r2, #2
 801f0dc:	f107 010c 	add.w	r1, r7, #12
 801f0e0:	300c      	adds	r0, #12
 801f0e2:	f7ff fa6d 	bl	801e5c0 <memcpy>
 801f0e6:	2201      	movs	r2, #1
 801f0e8:	4629      	mov	r1, r5
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f000 fc0a 	bl	801f904 <__lshift>
 801f0f0:	9b00      	ldr	r3, [sp, #0]
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	9304      	str	r3, [sp, #16]
 801f0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f0fa:	4413      	add	r3, r2
 801f0fc:	9308      	str	r3, [sp, #32]
 801f0fe:	9b02      	ldr	r3, [sp, #8]
 801f100:	f003 0301 	and.w	r3, r3, #1
 801f104:	46b8      	mov	r8, r7
 801f106:	9306      	str	r3, [sp, #24]
 801f108:	4607      	mov	r7, r0
 801f10a:	9b04      	ldr	r3, [sp, #16]
 801f10c:	4631      	mov	r1, r6
 801f10e:	3b01      	subs	r3, #1
 801f110:	4650      	mov	r0, sl
 801f112:	9301      	str	r3, [sp, #4]
 801f114:	f7ff fa69 	bl	801e5ea <quorem>
 801f118:	4641      	mov	r1, r8
 801f11a:	9002      	str	r0, [sp, #8]
 801f11c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f120:	4650      	mov	r0, sl
 801f122:	f000 fc5b 	bl	801f9dc <__mcmp>
 801f126:	463a      	mov	r2, r7
 801f128:	9005      	str	r0, [sp, #20]
 801f12a:	4631      	mov	r1, r6
 801f12c:	4620      	mov	r0, r4
 801f12e:	f000 fc71 	bl	801fa14 <__mdiff>
 801f132:	68c2      	ldr	r2, [r0, #12]
 801f134:	4605      	mov	r5, r0
 801f136:	bb02      	cbnz	r2, 801f17a <_dtoa_r+0xa7a>
 801f138:	4601      	mov	r1, r0
 801f13a:	4650      	mov	r0, sl
 801f13c:	f000 fc4e 	bl	801f9dc <__mcmp>
 801f140:	4602      	mov	r2, r0
 801f142:	4629      	mov	r1, r5
 801f144:	4620      	mov	r0, r4
 801f146:	9209      	str	r2, [sp, #36]	; 0x24
 801f148:	f000 fa0c 	bl	801f564 <_Bfree>
 801f14c:	9b07      	ldr	r3, [sp, #28]
 801f14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f150:	9d04      	ldr	r5, [sp, #16]
 801f152:	ea43 0102 	orr.w	r1, r3, r2
 801f156:	9b06      	ldr	r3, [sp, #24]
 801f158:	4319      	orrs	r1, r3
 801f15a:	d110      	bne.n	801f17e <_dtoa_r+0xa7e>
 801f15c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f160:	d029      	beq.n	801f1b6 <_dtoa_r+0xab6>
 801f162:	9b05      	ldr	r3, [sp, #20]
 801f164:	2b00      	cmp	r3, #0
 801f166:	dd02      	ble.n	801f16e <_dtoa_r+0xa6e>
 801f168:	9b02      	ldr	r3, [sp, #8]
 801f16a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801f16e:	9b01      	ldr	r3, [sp, #4]
 801f170:	f883 9000 	strb.w	r9, [r3]
 801f174:	e774      	b.n	801f060 <_dtoa_r+0x960>
 801f176:	4638      	mov	r0, r7
 801f178:	e7ba      	b.n	801f0f0 <_dtoa_r+0x9f0>
 801f17a:	2201      	movs	r2, #1
 801f17c:	e7e1      	b.n	801f142 <_dtoa_r+0xa42>
 801f17e:	9b05      	ldr	r3, [sp, #20]
 801f180:	2b00      	cmp	r3, #0
 801f182:	db04      	blt.n	801f18e <_dtoa_r+0xa8e>
 801f184:	9907      	ldr	r1, [sp, #28]
 801f186:	430b      	orrs	r3, r1
 801f188:	9906      	ldr	r1, [sp, #24]
 801f18a:	430b      	orrs	r3, r1
 801f18c:	d120      	bne.n	801f1d0 <_dtoa_r+0xad0>
 801f18e:	2a00      	cmp	r2, #0
 801f190:	dded      	ble.n	801f16e <_dtoa_r+0xa6e>
 801f192:	4651      	mov	r1, sl
 801f194:	2201      	movs	r2, #1
 801f196:	4620      	mov	r0, r4
 801f198:	f000 fbb4 	bl	801f904 <__lshift>
 801f19c:	4631      	mov	r1, r6
 801f19e:	4682      	mov	sl, r0
 801f1a0:	f000 fc1c 	bl	801f9dc <__mcmp>
 801f1a4:	2800      	cmp	r0, #0
 801f1a6:	dc03      	bgt.n	801f1b0 <_dtoa_r+0xab0>
 801f1a8:	d1e1      	bne.n	801f16e <_dtoa_r+0xa6e>
 801f1aa:	f019 0f01 	tst.w	r9, #1
 801f1ae:	d0de      	beq.n	801f16e <_dtoa_r+0xa6e>
 801f1b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f1b4:	d1d8      	bne.n	801f168 <_dtoa_r+0xa68>
 801f1b6:	9a01      	ldr	r2, [sp, #4]
 801f1b8:	2339      	movs	r3, #57	; 0x39
 801f1ba:	7013      	strb	r3, [r2, #0]
 801f1bc:	462b      	mov	r3, r5
 801f1be:	461d      	mov	r5, r3
 801f1c0:	3b01      	subs	r3, #1
 801f1c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f1c6:	2a39      	cmp	r2, #57	; 0x39
 801f1c8:	d06c      	beq.n	801f2a4 <_dtoa_r+0xba4>
 801f1ca:	3201      	adds	r2, #1
 801f1cc:	701a      	strb	r2, [r3, #0]
 801f1ce:	e747      	b.n	801f060 <_dtoa_r+0x960>
 801f1d0:	2a00      	cmp	r2, #0
 801f1d2:	dd07      	ble.n	801f1e4 <_dtoa_r+0xae4>
 801f1d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801f1d8:	d0ed      	beq.n	801f1b6 <_dtoa_r+0xab6>
 801f1da:	9a01      	ldr	r2, [sp, #4]
 801f1dc:	f109 0301 	add.w	r3, r9, #1
 801f1e0:	7013      	strb	r3, [r2, #0]
 801f1e2:	e73d      	b.n	801f060 <_dtoa_r+0x960>
 801f1e4:	9b04      	ldr	r3, [sp, #16]
 801f1e6:	9a08      	ldr	r2, [sp, #32]
 801f1e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801f1ec:	4293      	cmp	r3, r2
 801f1ee:	d043      	beq.n	801f278 <_dtoa_r+0xb78>
 801f1f0:	4651      	mov	r1, sl
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	220a      	movs	r2, #10
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	f000 f9d6 	bl	801f5a8 <__multadd>
 801f1fc:	45b8      	cmp	r8, r7
 801f1fe:	4682      	mov	sl, r0
 801f200:	f04f 0300 	mov.w	r3, #0
 801f204:	f04f 020a 	mov.w	r2, #10
 801f208:	4641      	mov	r1, r8
 801f20a:	4620      	mov	r0, r4
 801f20c:	d107      	bne.n	801f21e <_dtoa_r+0xb1e>
 801f20e:	f000 f9cb 	bl	801f5a8 <__multadd>
 801f212:	4680      	mov	r8, r0
 801f214:	4607      	mov	r7, r0
 801f216:	9b04      	ldr	r3, [sp, #16]
 801f218:	3301      	adds	r3, #1
 801f21a:	9304      	str	r3, [sp, #16]
 801f21c:	e775      	b.n	801f10a <_dtoa_r+0xa0a>
 801f21e:	f000 f9c3 	bl	801f5a8 <__multadd>
 801f222:	4639      	mov	r1, r7
 801f224:	4680      	mov	r8, r0
 801f226:	2300      	movs	r3, #0
 801f228:	220a      	movs	r2, #10
 801f22a:	4620      	mov	r0, r4
 801f22c:	f000 f9bc 	bl	801f5a8 <__multadd>
 801f230:	4607      	mov	r7, r0
 801f232:	e7f0      	b.n	801f216 <_dtoa_r+0xb16>
 801f234:	9b04      	ldr	r3, [sp, #16]
 801f236:	9301      	str	r3, [sp, #4]
 801f238:	9d00      	ldr	r5, [sp, #0]
 801f23a:	4631      	mov	r1, r6
 801f23c:	4650      	mov	r0, sl
 801f23e:	f7ff f9d4 	bl	801e5ea <quorem>
 801f242:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801f246:	9b00      	ldr	r3, [sp, #0]
 801f248:	f805 9b01 	strb.w	r9, [r5], #1
 801f24c:	1aea      	subs	r2, r5, r3
 801f24e:	9b01      	ldr	r3, [sp, #4]
 801f250:	4293      	cmp	r3, r2
 801f252:	dd07      	ble.n	801f264 <_dtoa_r+0xb64>
 801f254:	4651      	mov	r1, sl
 801f256:	2300      	movs	r3, #0
 801f258:	220a      	movs	r2, #10
 801f25a:	4620      	mov	r0, r4
 801f25c:	f000 f9a4 	bl	801f5a8 <__multadd>
 801f260:	4682      	mov	sl, r0
 801f262:	e7ea      	b.n	801f23a <_dtoa_r+0xb3a>
 801f264:	9b01      	ldr	r3, [sp, #4]
 801f266:	2b00      	cmp	r3, #0
 801f268:	bfc8      	it	gt
 801f26a:	461d      	movgt	r5, r3
 801f26c:	9b00      	ldr	r3, [sp, #0]
 801f26e:	bfd8      	it	le
 801f270:	2501      	movle	r5, #1
 801f272:	441d      	add	r5, r3
 801f274:	f04f 0800 	mov.w	r8, #0
 801f278:	4651      	mov	r1, sl
 801f27a:	2201      	movs	r2, #1
 801f27c:	4620      	mov	r0, r4
 801f27e:	f000 fb41 	bl	801f904 <__lshift>
 801f282:	4631      	mov	r1, r6
 801f284:	4682      	mov	sl, r0
 801f286:	f000 fba9 	bl	801f9dc <__mcmp>
 801f28a:	2800      	cmp	r0, #0
 801f28c:	dc96      	bgt.n	801f1bc <_dtoa_r+0xabc>
 801f28e:	d102      	bne.n	801f296 <_dtoa_r+0xb96>
 801f290:	f019 0f01 	tst.w	r9, #1
 801f294:	d192      	bne.n	801f1bc <_dtoa_r+0xabc>
 801f296:	462b      	mov	r3, r5
 801f298:	461d      	mov	r5, r3
 801f29a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f29e:	2a30      	cmp	r2, #48	; 0x30
 801f2a0:	d0fa      	beq.n	801f298 <_dtoa_r+0xb98>
 801f2a2:	e6dd      	b.n	801f060 <_dtoa_r+0x960>
 801f2a4:	9a00      	ldr	r2, [sp, #0]
 801f2a6:	429a      	cmp	r2, r3
 801f2a8:	d189      	bne.n	801f1be <_dtoa_r+0xabe>
 801f2aa:	f10b 0b01 	add.w	fp, fp, #1
 801f2ae:	2331      	movs	r3, #49	; 0x31
 801f2b0:	e796      	b.n	801f1e0 <_dtoa_r+0xae0>
 801f2b2:	4b0a      	ldr	r3, [pc, #40]	; (801f2dc <_dtoa_r+0xbdc>)
 801f2b4:	f7ff ba99 	b.w	801e7ea <_dtoa_r+0xea>
 801f2b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	f47f aa6d 	bne.w	801e79a <_dtoa_r+0x9a>
 801f2c0:	4b07      	ldr	r3, [pc, #28]	; (801f2e0 <_dtoa_r+0xbe0>)
 801f2c2:	f7ff ba92 	b.w	801e7ea <_dtoa_r+0xea>
 801f2c6:	9b01      	ldr	r3, [sp, #4]
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	dcb5      	bgt.n	801f238 <_dtoa_r+0xb38>
 801f2cc:	9b07      	ldr	r3, [sp, #28]
 801f2ce:	2b02      	cmp	r3, #2
 801f2d0:	f73f aeb1 	bgt.w	801f036 <_dtoa_r+0x936>
 801f2d4:	e7b0      	b.n	801f238 <_dtoa_r+0xb38>
 801f2d6:	bf00      	nop
 801f2d8:	080238cf 	.word	0x080238cf
 801f2dc:	0802382f 	.word	0x0802382f
 801f2e0:	08023853 	.word	0x08023853

0801f2e4 <_free_r>:
 801f2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f2e6:	2900      	cmp	r1, #0
 801f2e8:	d044      	beq.n	801f374 <_free_r+0x90>
 801f2ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f2ee:	9001      	str	r0, [sp, #4]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	f1a1 0404 	sub.w	r4, r1, #4
 801f2f6:	bfb8      	it	lt
 801f2f8:	18e4      	addlt	r4, r4, r3
 801f2fa:	f000 f8e7 	bl	801f4cc <__malloc_lock>
 801f2fe:	4a1e      	ldr	r2, [pc, #120]	; (801f378 <_free_r+0x94>)
 801f300:	9801      	ldr	r0, [sp, #4]
 801f302:	6813      	ldr	r3, [r2, #0]
 801f304:	b933      	cbnz	r3, 801f314 <_free_r+0x30>
 801f306:	6063      	str	r3, [r4, #4]
 801f308:	6014      	str	r4, [r2, #0]
 801f30a:	b003      	add	sp, #12
 801f30c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f310:	f000 b8e2 	b.w	801f4d8 <__malloc_unlock>
 801f314:	42a3      	cmp	r3, r4
 801f316:	d908      	bls.n	801f32a <_free_r+0x46>
 801f318:	6825      	ldr	r5, [r4, #0]
 801f31a:	1961      	adds	r1, r4, r5
 801f31c:	428b      	cmp	r3, r1
 801f31e:	bf01      	itttt	eq
 801f320:	6819      	ldreq	r1, [r3, #0]
 801f322:	685b      	ldreq	r3, [r3, #4]
 801f324:	1949      	addeq	r1, r1, r5
 801f326:	6021      	streq	r1, [r4, #0]
 801f328:	e7ed      	b.n	801f306 <_free_r+0x22>
 801f32a:	461a      	mov	r2, r3
 801f32c:	685b      	ldr	r3, [r3, #4]
 801f32e:	b10b      	cbz	r3, 801f334 <_free_r+0x50>
 801f330:	42a3      	cmp	r3, r4
 801f332:	d9fa      	bls.n	801f32a <_free_r+0x46>
 801f334:	6811      	ldr	r1, [r2, #0]
 801f336:	1855      	adds	r5, r2, r1
 801f338:	42a5      	cmp	r5, r4
 801f33a:	d10b      	bne.n	801f354 <_free_r+0x70>
 801f33c:	6824      	ldr	r4, [r4, #0]
 801f33e:	4421      	add	r1, r4
 801f340:	1854      	adds	r4, r2, r1
 801f342:	42a3      	cmp	r3, r4
 801f344:	6011      	str	r1, [r2, #0]
 801f346:	d1e0      	bne.n	801f30a <_free_r+0x26>
 801f348:	681c      	ldr	r4, [r3, #0]
 801f34a:	685b      	ldr	r3, [r3, #4]
 801f34c:	6053      	str	r3, [r2, #4]
 801f34e:	440c      	add	r4, r1
 801f350:	6014      	str	r4, [r2, #0]
 801f352:	e7da      	b.n	801f30a <_free_r+0x26>
 801f354:	d902      	bls.n	801f35c <_free_r+0x78>
 801f356:	230c      	movs	r3, #12
 801f358:	6003      	str	r3, [r0, #0]
 801f35a:	e7d6      	b.n	801f30a <_free_r+0x26>
 801f35c:	6825      	ldr	r5, [r4, #0]
 801f35e:	1961      	adds	r1, r4, r5
 801f360:	428b      	cmp	r3, r1
 801f362:	bf04      	itt	eq
 801f364:	6819      	ldreq	r1, [r3, #0]
 801f366:	685b      	ldreq	r3, [r3, #4]
 801f368:	6063      	str	r3, [r4, #4]
 801f36a:	bf04      	itt	eq
 801f36c:	1949      	addeq	r1, r1, r5
 801f36e:	6021      	streq	r1, [r4, #0]
 801f370:	6054      	str	r4, [r2, #4]
 801f372:	e7ca      	b.n	801f30a <_free_r+0x26>
 801f374:	b003      	add	sp, #12
 801f376:	bd30      	pop	{r4, r5, pc}
 801f378:	20016a70 	.word	0x20016a70

0801f37c <malloc>:
 801f37c:	4b02      	ldr	r3, [pc, #8]	; (801f388 <malloc+0xc>)
 801f37e:	4601      	mov	r1, r0
 801f380:	6818      	ldr	r0, [r3, #0]
 801f382:	f000 b823 	b.w	801f3cc <_malloc_r>
 801f386:	bf00      	nop
 801f388:	200001e8 	.word	0x200001e8

0801f38c <sbrk_aligned>:
 801f38c:	b570      	push	{r4, r5, r6, lr}
 801f38e:	4e0e      	ldr	r6, [pc, #56]	; (801f3c8 <sbrk_aligned+0x3c>)
 801f390:	460c      	mov	r4, r1
 801f392:	6831      	ldr	r1, [r6, #0]
 801f394:	4605      	mov	r5, r0
 801f396:	b911      	cbnz	r1, 801f39e <sbrk_aligned+0x12>
 801f398:	f001 f85e 	bl	8020458 <_sbrk_r>
 801f39c:	6030      	str	r0, [r6, #0]
 801f39e:	4621      	mov	r1, r4
 801f3a0:	4628      	mov	r0, r5
 801f3a2:	f001 f859 	bl	8020458 <_sbrk_r>
 801f3a6:	1c43      	adds	r3, r0, #1
 801f3a8:	d00a      	beq.n	801f3c0 <sbrk_aligned+0x34>
 801f3aa:	1cc4      	adds	r4, r0, #3
 801f3ac:	f024 0403 	bic.w	r4, r4, #3
 801f3b0:	42a0      	cmp	r0, r4
 801f3b2:	d007      	beq.n	801f3c4 <sbrk_aligned+0x38>
 801f3b4:	1a21      	subs	r1, r4, r0
 801f3b6:	4628      	mov	r0, r5
 801f3b8:	f001 f84e 	bl	8020458 <_sbrk_r>
 801f3bc:	3001      	adds	r0, #1
 801f3be:	d101      	bne.n	801f3c4 <sbrk_aligned+0x38>
 801f3c0:	f04f 34ff 	mov.w	r4, #4294967295
 801f3c4:	4620      	mov	r0, r4
 801f3c6:	bd70      	pop	{r4, r5, r6, pc}
 801f3c8:	20016a74 	.word	0x20016a74

0801f3cc <_malloc_r>:
 801f3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3d0:	1ccd      	adds	r5, r1, #3
 801f3d2:	f025 0503 	bic.w	r5, r5, #3
 801f3d6:	3508      	adds	r5, #8
 801f3d8:	2d0c      	cmp	r5, #12
 801f3da:	bf38      	it	cc
 801f3dc:	250c      	movcc	r5, #12
 801f3de:	2d00      	cmp	r5, #0
 801f3e0:	4607      	mov	r7, r0
 801f3e2:	db01      	blt.n	801f3e8 <_malloc_r+0x1c>
 801f3e4:	42a9      	cmp	r1, r5
 801f3e6:	d905      	bls.n	801f3f4 <_malloc_r+0x28>
 801f3e8:	230c      	movs	r3, #12
 801f3ea:	603b      	str	r3, [r7, #0]
 801f3ec:	2600      	movs	r6, #0
 801f3ee:	4630      	mov	r0, r6
 801f3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f3f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f4c8 <_malloc_r+0xfc>
 801f3f8:	f000 f868 	bl	801f4cc <__malloc_lock>
 801f3fc:	f8d8 3000 	ldr.w	r3, [r8]
 801f400:	461c      	mov	r4, r3
 801f402:	bb5c      	cbnz	r4, 801f45c <_malloc_r+0x90>
 801f404:	4629      	mov	r1, r5
 801f406:	4638      	mov	r0, r7
 801f408:	f7ff ffc0 	bl	801f38c <sbrk_aligned>
 801f40c:	1c43      	adds	r3, r0, #1
 801f40e:	4604      	mov	r4, r0
 801f410:	d155      	bne.n	801f4be <_malloc_r+0xf2>
 801f412:	f8d8 4000 	ldr.w	r4, [r8]
 801f416:	4626      	mov	r6, r4
 801f418:	2e00      	cmp	r6, #0
 801f41a:	d145      	bne.n	801f4a8 <_malloc_r+0xdc>
 801f41c:	2c00      	cmp	r4, #0
 801f41e:	d048      	beq.n	801f4b2 <_malloc_r+0xe6>
 801f420:	6823      	ldr	r3, [r4, #0]
 801f422:	4631      	mov	r1, r6
 801f424:	4638      	mov	r0, r7
 801f426:	eb04 0903 	add.w	r9, r4, r3
 801f42a:	f001 f815 	bl	8020458 <_sbrk_r>
 801f42e:	4581      	cmp	r9, r0
 801f430:	d13f      	bne.n	801f4b2 <_malloc_r+0xe6>
 801f432:	6821      	ldr	r1, [r4, #0]
 801f434:	1a6d      	subs	r5, r5, r1
 801f436:	4629      	mov	r1, r5
 801f438:	4638      	mov	r0, r7
 801f43a:	f7ff ffa7 	bl	801f38c <sbrk_aligned>
 801f43e:	3001      	adds	r0, #1
 801f440:	d037      	beq.n	801f4b2 <_malloc_r+0xe6>
 801f442:	6823      	ldr	r3, [r4, #0]
 801f444:	442b      	add	r3, r5
 801f446:	6023      	str	r3, [r4, #0]
 801f448:	f8d8 3000 	ldr.w	r3, [r8]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d038      	beq.n	801f4c2 <_malloc_r+0xf6>
 801f450:	685a      	ldr	r2, [r3, #4]
 801f452:	42a2      	cmp	r2, r4
 801f454:	d12b      	bne.n	801f4ae <_malloc_r+0xe2>
 801f456:	2200      	movs	r2, #0
 801f458:	605a      	str	r2, [r3, #4]
 801f45a:	e00f      	b.n	801f47c <_malloc_r+0xb0>
 801f45c:	6822      	ldr	r2, [r4, #0]
 801f45e:	1b52      	subs	r2, r2, r5
 801f460:	d41f      	bmi.n	801f4a2 <_malloc_r+0xd6>
 801f462:	2a0b      	cmp	r2, #11
 801f464:	d917      	bls.n	801f496 <_malloc_r+0xca>
 801f466:	1961      	adds	r1, r4, r5
 801f468:	42a3      	cmp	r3, r4
 801f46a:	6025      	str	r5, [r4, #0]
 801f46c:	bf18      	it	ne
 801f46e:	6059      	strne	r1, [r3, #4]
 801f470:	6863      	ldr	r3, [r4, #4]
 801f472:	bf08      	it	eq
 801f474:	f8c8 1000 	streq.w	r1, [r8]
 801f478:	5162      	str	r2, [r4, r5]
 801f47a:	604b      	str	r3, [r1, #4]
 801f47c:	4638      	mov	r0, r7
 801f47e:	f104 060b 	add.w	r6, r4, #11
 801f482:	f000 f829 	bl	801f4d8 <__malloc_unlock>
 801f486:	f026 0607 	bic.w	r6, r6, #7
 801f48a:	1d23      	adds	r3, r4, #4
 801f48c:	1af2      	subs	r2, r6, r3
 801f48e:	d0ae      	beq.n	801f3ee <_malloc_r+0x22>
 801f490:	1b9b      	subs	r3, r3, r6
 801f492:	50a3      	str	r3, [r4, r2]
 801f494:	e7ab      	b.n	801f3ee <_malloc_r+0x22>
 801f496:	42a3      	cmp	r3, r4
 801f498:	6862      	ldr	r2, [r4, #4]
 801f49a:	d1dd      	bne.n	801f458 <_malloc_r+0x8c>
 801f49c:	f8c8 2000 	str.w	r2, [r8]
 801f4a0:	e7ec      	b.n	801f47c <_malloc_r+0xb0>
 801f4a2:	4623      	mov	r3, r4
 801f4a4:	6864      	ldr	r4, [r4, #4]
 801f4a6:	e7ac      	b.n	801f402 <_malloc_r+0x36>
 801f4a8:	4634      	mov	r4, r6
 801f4aa:	6876      	ldr	r6, [r6, #4]
 801f4ac:	e7b4      	b.n	801f418 <_malloc_r+0x4c>
 801f4ae:	4613      	mov	r3, r2
 801f4b0:	e7cc      	b.n	801f44c <_malloc_r+0x80>
 801f4b2:	230c      	movs	r3, #12
 801f4b4:	603b      	str	r3, [r7, #0]
 801f4b6:	4638      	mov	r0, r7
 801f4b8:	f000 f80e 	bl	801f4d8 <__malloc_unlock>
 801f4bc:	e797      	b.n	801f3ee <_malloc_r+0x22>
 801f4be:	6025      	str	r5, [r4, #0]
 801f4c0:	e7dc      	b.n	801f47c <_malloc_r+0xb0>
 801f4c2:	605b      	str	r3, [r3, #4]
 801f4c4:	deff      	udf	#255	; 0xff
 801f4c6:	bf00      	nop
 801f4c8:	20016a70 	.word	0x20016a70

0801f4cc <__malloc_lock>:
 801f4cc:	4801      	ldr	r0, [pc, #4]	; (801f4d4 <__malloc_lock+0x8>)
 801f4ce:	f7ff b875 	b.w	801e5bc <__retarget_lock_acquire_recursive>
 801f4d2:	bf00      	nop
 801f4d4:	20016a6c 	.word	0x20016a6c

0801f4d8 <__malloc_unlock>:
 801f4d8:	4801      	ldr	r0, [pc, #4]	; (801f4e0 <__malloc_unlock+0x8>)
 801f4da:	f7ff b870 	b.w	801e5be <__retarget_lock_release_recursive>
 801f4de:	bf00      	nop
 801f4e0:	20016a6c 	.word	0x20016a6c

0801f4e4 <_Balloc>:
 801f4e4:	b570      	push	{r4, r5, r6, lr}
 801f4e6:	69c6      	ldr	r6, [r0, #28]
 801f4e8:	4604      	mov	r4, r0
 801f4ea:	460d      	mov	r5, r1
 801f4ec:	b976      	cbnz	r6, 801f50c <_Balloc+0x28>
 801f4ee:	2010      	movs	r0, #16
 801f4f0:	f7ff ff44 	bl	801f37c <malloc>
 801f4f4:	4602      	mov	r2, r0
 801f4f6:	61e0      	str	r0, [r4, #28]
 801f4f8:	b920      	cbnz	r0, 801f504 <_Balloc+0x20>
 801f4fa:	4b18      	ldr	r3, [pc, #96]	; (801f55c <_Balloc+0x78>)
 801f4fc:	4818      	ldr	r0, [pc, #96]	; (801f560 <_Balloc+0x7c>)
 801f4fe:	216b      	movs	r1, #107	; 0x6b
 801f500:	f7fe fa36 	bl	801d970 <__assert_func>
 801f504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f508:	6006      	str	r6, [r0, #0]
 801f50a:	60c6      	str	r6, [r0, #12]
 801f50c:	69e6      	ldr	r6, [r4, #28]
 801f50e:	68f3      	ldr	r3, [r6, #12]
 801f510:	b183      	cbz	r3, 801f534 <_Balloc+0x50>
 801f512:	69e3      	ldr	r3, [r4, #28]
 801f514:	68db      	ldr	r3, [r3, #12]
 801f516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f51a:	b9b8      	cbnz	r0, 801f54c <_Balloc+0x68>
 801f51c:	2101      	movs	r1, #1
 801f51e:	fa01 f605 	lsl.w	r6, r1, r5
 801f522:	1d72      	adds	r2, r6, #5
 801f524:	0092      	lsls	r2, r2, #2
 801f526:	4620      	mov	r0, r4
 801f528:	f000 ffa6 	bl	8020478 <_calloc_r>
 801f52c:	b160      	cbz	r0, 801f548 <_Balloc+0x64>
 801f52e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f532:	e00e      	b.n	801f552 <_Balloc+0x6e>
 801f534:	2221      	movs	r2, #33	; 0x21
 801f536:	2104      	movs	r1, #4
 801f538:	4620      	mov	r0, r4
 801f53a:	f000 ff9d 	bl	8020478 <_calloc_r>
 801f53e:	69e3      	ldr	r3, [r4, #28]
 801f540:	60f0      	str	r0, [r6, #12]
 801f542:	68db      	ldr	r3, [r3, #12]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d1e4      	bne.n	801f512 <_Balloc+0x2e>
 801f548:	2000      	movs	r0, #0
 801f54a:	bd70      	pop	{r4, r5, r6, pc}
 801f54c:	6802      	ldr	r2, [r0, #0]
 801f54e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f552:	2300      	movs	r3, #0
 801f554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f558:	e7f7      	b.n	801f54a <_Balloc+0x66>
 801f55a:	bf00      	nop
 801f55c:	08023860 	.word	0x08023860
 801f560:	080238e0 	.word	0x080238e0

0801f564 <_Bfree>:
 801f564:	b570      	push	{r4, r5, r6, lr}
 801f566:	69c6      	ldr	r6, [r0, #28]
 801f568:	4605      	mov	r5, r0
 801f56a:	460c      	mov	r4, r1
 801f56c:	b976      	cbnz	r6, 801f58c <_Bfree+0x28>
 801f56e:	2010      	movs	r0, #16
 801f570:	f7ff ff04 	bl	801f37c <malloc>
 801f574:	4602      	mov	r2, r0
 801f576:	61e8      	str	r0, [r5, #28]
 801f578:	b920      	cbnz	r0, 801f584 <_Bfree+0x20>
 801f57a:	4b09      	ldr	r3, [pc, #36]	; (801f5a0 <_Bfree+0x3c>)
 801f57c:	4809      	ldr	r0, [pc, #36]	; (801f5a4 <_Bfree+0x40>)
 801f57e:	218f      	movs	r1, #143	; 0x8f
 801f580:	f7fe f9f6 	bl	801d970 <__assert_func>
 801f584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f588:	6006      	str	r6, [r0, #0]
 801f58a:	60c6      	str	r6, [r0, #12]
 801f58c:	b13c      	cbz	r4, 801f59e <_Bfree+0x3a>
 801f58e:	69eb      	ldr	r3, [r5, #28]
 801f590:	6862      	ldr	r2, [r4, #4]
 801f592:	68db      	ldr	r3, [r3, #12]
 801f594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f598:	6021      	str	r1, [r4, #0]
 801f59a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f59e:	bd70      	pop	{r4, r5, r6, pc}
 801f5a0:	08023860 	.word	0x08023860
 801f5a4:	080238e0 	.word	0x080238e0

0801f5a8 <__multadd>:
 801f5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5ac:	690d      	ldr	r5, [r1, #16]
 801f5ae:	4607      	mov	r7, r0
 801f5b0:	460c      	mov	r4, r1
 801f5b2:	461e      	mov	r6, r3
 801f5b4:	f101 0c14 	add.w	ip, r1, #20
 801f5b8:	2000      	movs	r0, #0
 801f5ba:	f8dc 3000 	ldr.w	r3, [ip]
 801f5be:	b299      	uxth	r1, r3
 801f5c0:	fb02 6101 	mla	r1, r2, r1, r6
 801f5c4:	0c1e      	lsrs	r6, r3, #16
 801f5c6:	0c0b      	lsrs	r3, r1, #16
 801f5c8:	fb02 3306 	mla	r3, r2, r6, r3
 801f5cc:	b289      	uxth	r1, r1
 801f5ce:	3001      	adds	r0, #1
 801f5d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f5d4:	4285      	cmp	r5, r0
 801f5d6:	f84c 1b04 	str.w	r1, [ip], #4
 801f5da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f5de:	dcec      	bgt.n	801f5ba <__multadd+0x12>
 801f5e0:	b30e      	cbz	r6, 801f626 <__multadd+0x7e>
 801f5e2:	68a3      	ldr	r3, [r4, #8]
 801f5e4:	42ab      	cmp	r3, r5
 801f5e6:	dc19      	bgt.n	801f61c <__multadd+0x74>
 801f5e8:	6861      	ldr	r1, [r4, #4]
 801f5ea:	4638      	mov	r0, r7
 801f5ec:	3101      	adds	r1, #1
 801f5ee:	f7ff ff79 	bl	801f4e4 <_Balloc>
 801f5f2:	4680      	mov	r8, r0
 801f5f4:	b928      	cbnz	r0, 801f602 <__multadd+0x5a>
 801f5f6:	4602      	mov	r2, r0
 801f5f8:	4b0c      	ldr	r3, [pc, #48]	; (801f62c <__multadd+0x84>)
 801f5fa:	480d      	ldr	r0, [pc, #52]	; (801f630 <__multadd+0x88>)
 801f5fc:	21ba      	movs	r1, #186	; 0xba
 801f5fe:	f7fe f9b7 	bl	801d970 <__assert_func>
 801f602:	6922      	ldr	r2, [r4, #16]
 801f604:	3202      	adds	r2, #2
 801f606:	f104 010c 	add.w	r1, r4, #12
 801f60a:	0092      	lsls	r2, r2, #2
 801f60c:	300c      	adds	r0, #12
 801f60e:	f7fe ffd7 	bl	801e5c0 <memcpy>
 801f612:	4621      	mov	r1, r4
 801f614:	4638      	mov	r0, r7
 801f616:	f7ff ffa5 	bl	801f564 <_Bfree>
 801f61a:	4644      	mov	r4, r8
 801f61c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f620:	3501      	adds	r5, #1
 801f622:	615e      	str	r6, [r3, #20]
 801f624:	6125      	str	r5, [r4, #16]
 801f626:	4620      	mov	r0, r4
 801f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f62c:	080238cf 	.word	0x080238cf
 801f630:	080238e0 	.word	0x080238e0

0801f634 <__hi0bits>:
 801f634:	0c03      	lsrs	r3, r0, #16
 801f636:	041b      	lsls	r3, r3, #16
 801f638:	b9d3      	cbnz	r3, 801f670 <__hi0bits+0x3c>
 801f63a:	0400      	lsls	r0, r0, #16
 801f63c:	2310      	movs	r3, #16
 801f63e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f642:	bf04      	itt	eq
 801f644:	0200      	lsleq	r0, r0, #8
 801f646:	3308      	addeq	r3, #8
 801f648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f64c:	bf04      	itt	eq
 801f64e:	0100      	lsleq	r0, r0, #4
 801f650:	3304      	addeq	r3, #4
 801f652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f656:	bf04      	itt	eq
 801f658:	0080      	lsleq	r0, r0, #2
 801f65a:	3302      	addeq	r3, #2
 801f65c:	2800      	cmp	r0, #0
 801f65e:	db05      	blt.n	801f66c <__hi0bits+0x38>
 801f660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f664:	f103 0301 	add.w	r3, r3, #1
 801f668:	bf08      	it	eq
 801f66a:	2320      	moveq	r3, #32
 801f66c:	4618      	mov	r0, r3
 801f66e:	4770      	bx	lr
 801f670:	2300      	movs	r3, #0
 801f672:	e7e4      	b.n	801f63e <__hi0bits+0xa>

0801f674 <__lo0bits>:
 801f674:	6803      	ldr	r3, [r0, #0]
 801f676:	f013 0207 	ands.w	r2, r3, #7
 801f67a:	d00c      	beq.n	801f696 <__lo0bits+0x22>
 801f67c:	07d9      	lsls	r1, r3, #31
 801f67e:	d422      	bmi.n	801f6c6 <__lo0bits+0x52>
 801f680:	079a      	lsls	r2, r3, #30
 801f682:	bf49      	itett	mi
 801f684:	085b      	lsrmi	r3, r3, #1
 801f686:	089b      	lsrpl	r3, r3, #2
 801f688:	6003      	strmi	r3, [r0, #0]
 801f68a:	2201      	movmi	r2, #1
 801f68c:	bf5c      	itt	pl
 801f68e:	6003      	strpl	r3, [r0, #0]
 801f690:	2202      	movpl	r2, #2
 801f692:	4610      	mov	r0, r2
 801f694:	4770      	bx	lr
 801f696:	b299      	uxth	r1, r3
 801f698:	b909      	cbnz	r1, 801f69e <__lo0bits+0x2a>
 801f69a:	0c1b      	lsrs	r3, r3, #16
 801f69c:	2210      	movs	r2, #16
 801f69e:	b2d9      	uxtb	r1, r3
 801f6a0:	b909      	cbnz	r1, 801f6a6 <__lo0bits+0x32>
 801f6a2:	3208      	adds	r2, #8
 801f6a4:	0a1b      	lsrs	r3, r3, #8
 801f6a6:	0719      	lsls	r1, r3, #28
 801f6a8:	bf04      	itt	eq
 801f6aa:	091b      	lsreq	r3, r3, #4
 801f6ac:	3204      	addeq	r2, #4
 801f6ae:	0799      	lsls	r1, r3, #30
 801f6b0:	bf04      	itt	eq
 801f6b2:	089b      	lsreq	r3, r3, #2
 801f6b4:	3202      	addeq	r2, #2
 801f6b6:	07d9      	lsls	r1, r3, #31
 801f6b8:	d403      	bmi.n	801f6c2 <__lo0bits+0x4e>
 801f6ba:	085b      	lsrs	r3, r3, #1
 801f6bc:	f102 0201 	add.w	r2, r2, #1
 801f6c0:	d003      	beq.n	801f6ca <__lo0bits+0x56>
 801f6c2:	6003      	str	r3, [r0, #0]
 801f6c4:	e7e5      	b.n	801f692 <__lo0bits+0x1e>
 801f6c6:	2200      	movs	r2, #0
 801f6c8:	e7e3      	b.n	801f692 <__lo0bits+0x1e>
 801f6ca:	2220      	movs	r2, #32
 801f6cc:	e7e1      	b.n	801f692 <__lo0bits+0x1e>
	...

0801f6d0 <__i2b>:
 801f6d0:	b510      	push	{r4, lr}
 801f6d2:	460c      	mov	r4, r1
 801f6d4:	2101      	movs	r1, #1
 801f6d6:	f7ff ff05 	bl	801f4e4 <_Balloc>
 801f6da:	4602      	mov	r2, r0
 801f6dc:	b928      	cbnz	r0, 801f6ea <__i2b+0x1a>
 801f6de:	4b05      	ldr	r3, [pc, #20]	; (801f6f4 <__i2b+0x24>)
 801f6e0:	4805      	ldr	r0, [pc, #20]	; (801f6f8 <__i2b+0x28>)
 801f6e2:	f240 1145 	movw	r1, #325	; 0x145
 801f6e6:	f7fe f943 	bl	801d970 <__assert_func>
 801f6ea:	2301      	movs	r3, #1
 801f6ec:	6144      	str	r4, [r0, #20]
 801f6ee:	6103      	str	r3, [r0, #16]
 801f6f0:	bd10      	pop	{r4, pc}
 801f6f2:	bf00      	nop
 801f6f4:	080238cf 	.word	0x080238cf
 801f6f8:	080238e0 	.word	0x080238e0

0801f6fc <__multiply>:
 801f6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f700:	4691      	mov	r9, r2
 801f702:	690a      	ldr	r2, [r1, #16]
 801f704:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f708:	429a      	cmp	r2, r3
 801f70a:	bfb8      	it	lt
 801f70c:	460b      	movlt	r3, r1
 801f70e:	460c      	mov	r4, r1
 801f710:	bfbc      	itt	lt
 801f712:	464c      	movlt	r4, r9
 801f714:	4699      	movlt	r9, r3
 801f716:	6927      	ldr	r7, [r4, #16]
 801f718:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f71c:	68a3      	ldr	r3, [r4, #8]
 801f71e:	6861      	ldr	r1, [r4, #4]
 801f720:	eb07 060a 	add.w	r6, r7, sl
 801f724:	42b3      	cmp	r3, r6
 801f726:	b085      	sub	sp, #20
 801f728:	bfb8      	it	lt
 801f72a:	3101      	addlt	r1, #1
 801f72c:	f7ff feda 	bl	801f4e4 <_Balloc>
 801f730:	b930      	cbnz	r0, 801f740 <__multiply+0x44>
 801f732:	4602      	mov	r2, r0
 801f734:	4b44      	ldr	r3, [pc, #272]	; (801f848 <__multiply+0x14c>)
 801f736:	4845      	ldr	r0, [pc, #276]	; (801f84c <__multiply+0x150>)
 801f738:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801f73c:	f7fe f918 	bl	801d970 <__assert_func>
 801f740:	f100 0514 	add.w	r5, r0, #20
 801f744:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f748:	462b      	mov	r3, r5
 801f74a:	2200      	movs	r2, #0
 801f74c:	4543      	cmp	r3, r8
 801f74e:	d321      	bcc.n	801f794 <__multiply+0x98>
 801f750:	f104 0314 	add.w	r3, r4, #20
 801f754:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f758:	f109 0314 	add.w	r3, r9, #20
 801f75c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f760:	9202      	str	r2, [sp, #8]
 801f762:	1b3a      	subs	r2, r7, r4
 801f764:	3a15      	subs	r2, #21
 801f766:	f022 0203 	bic.w	r2, r2, #3
 801f76a:	3204      	adds	r2, #4
 801f76c:	f104 0115 	add.w	r1, r4, #21
 801f770:	428f      	cmp	r7, r1
 801f772:	bf38      	it	cc
 801f774:	2204      	movcc	r2, #4
 801f776:	9201      	str	r2, [sp, #4]
 801f778:	9a02      	ldr	r2, [sp, #8]
 801f77a:	9303      	str	r3, [sp, #12]
 801f77c:	429a      	cmp	r2, r3
 801f77e:	d80c      	bhi.n	801f79a <__multiply+0x9e>
 801f780:	2e00      	cmp	r6, #0
 801f782:	dd03      	ble.n	801f78c <__multiply+0x90>
 801f784:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d05b      	beq.n	801f844 <__multiply+0x148>
 801f78c:	6106      	str	r6, [r0, #16]
 801f78e:	b005      	add	sp, #20
 801f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f794:	f843 2b04 	str.w	r2, [r3], #4
 801f798:	e7d8      	b.n	801f74c <__multiply+0x50>
 801f79a:	f8b3 a000 	ldrh.w	sl, [r3]
 801f79e:	f1ba 0f00 	cmp.w	sl, #0
 801f7a2:	d024      	beq.n	801f7ee <__multiply+0xf2>
 801f7a4:	f104 0e14 	add.w	lr, r4, #20
 801f7a8:	46a9      	mov	r9, r5
 801f7aa:	f04f 0c00 	mov.w	ip, #0
 801f7ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f7b2:	f8d9 1000 	ldr.w	r1, [r9]
 801f7b6:	fa1f fb82 	uxth.w	fp, r2
 801f7ba:	b289      	uxth	r1, r1
 801f7bc:	fb0a 110b 	mla	r1, sl, fp, r1
 801f7c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f7c4:	f8d9 2000 	ldr.w	r2, [r9]
 801f7c8:	4461      	add	r1, ip
 801f7ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f7ce:	fb0a c20b 	mla	r2, sl, fp, ip
 801f7d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f7d6:	b289      	uxth	r1, r1
 801f7d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f7dc:	4577      	cmp	r7, lr
 801f7de:	f849 1b04 	str.w	r1, [r9], #4
 801f7e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f7e6:	d8e2      	bhi.n	801f7ae <__multiply+0xb2>
 801f7e8:	9a01      	ldr	r2, [sp, #4]
 801f7ea:	f845 c002 	str.w	ip, [r5, r2]
 801f7ee:	9a03      	ldr	r2, [sp, #12]
 801f7f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f7f4:	3304      	adds	r3, #4
 801f7f6:	f1b9 0f00 	cmp.w	r9, #0
 801f7fa:	d021      	beq.n	801f840 <__multiply+0x144>
 801f7fc:	6829      	ldr	r1, [r5, #0]
 801f7fe:	f104 0c14 	add.w	ip, r4, #20
 801f802:	46ae      	mov	lr, r5
 801f804:	f04f 0a00 	mov.w	sl, #0
 801f808:	f8bc b000 	ldrh.w	fp, [ip]
 801f80c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f810:	fb09 220b 	mla	r2, r9, fp, r2
 801f814:	4452      	add	r2, sl
 801f816:	b289      	uxth	r1, r1
 801f818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f81c:	f84e 1b04 	str.w	r1, [lr], #4
 801f820:	f85c 1b04 	ldr.w	r1, [ip], #4
 801f824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f828:	f8be 1000 	ldrh.w	r1, [lr]
 801f82c:	fb09 110a 	mla	r1, r9, sl, r1
 801f830:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801f834:	4567      	cmp	r7, ip
 801f836:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f83a:	d8e5      	bhi.n	801f808 <__multiply+0x10c>
 801f83c:	9a01      	ldr	r2, [sp, #4]
 801f83e:	50a9      	str	r1, [r5, r2]
 801f840:	3504      	adds	r5, #4
 801f842:	e799      	b.n	801f778 <__multiply+0x7c>
 801f844:	3e01      	subs	r6, #1
 801f846:	e79b      	b.n	801f780 <__multiply+0x84>
 801f848:	080238cf 	.word	0x080238cf
 801f84c:	080238e0 	.word	0x080238e0

0801f850 <__pow5mult>:
 801f850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f854:	4615      	mov	r5, r2
 801f856:	f012 0203 	ands.w	r2, r2, #3
 801f85a:	4606      	mov	r6, r0
 801f85c:	460f      	mov	r7, r1
 801f85e:	d007      	beq.n	801f870 <__pow5mult+0x20>
 801f860:	4c25      	ldr	r4, [pc, #148]	; (801f8f8 <__pow5mult+0xa8>)
 801f862:	3a01      	subs	r2, #1
 801f864:	2300      	movs	r3, #0
 801f866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f86a:	f7ff fe9d 	bl	801f5a8 <__multadd>
 801f86e:	4607      	mov	r7, r0
 801f870:	10ad      	asrs	r5, r5, #2
 801f872:	d03d      	beq.n	801f8f0 <__pow5mult+0xa0>
 801f874:	69f4      	ldr	r4, [r6, #28]
 801f876:	b97c      	cbnz	r4, 801f898 <__pow5mult+0x48>
 801f878:	2010      	movs	r0, #16
 801f87a:	f7ff fd7f 	bl	801f37c <malloc>
 801f87e:	4602      	mov	r2, r0
 801f880:	61f0      	str	r0, [r6, #28]
 801f882:	b928      	cbnz	r0, 801f890 <__pow5mult+0x40>
 801f884:	4b1d      	ldr	r3, [pc, #116]	; (801f8fc <__pow5mult+0xac>)
 801f886:	481e      	ldr	r0, [pc, #120]	; (801f900 <__pow5mult+0xb0>)
 801f888:	f240 11b3 	movw	r1, #435	; 0x1b3
 801f88c:	f7fe f870 	bl	801d970 <__assert_func>
 801f890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f894:	6004      	str	r4, [r0, #0]
 801f896:	60c4      	str	r4, [r0, #12]
 801f898:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801f89c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f8a0:	b94c      	cbnz	r4, 801f8b6 <__pow5mult+0x66>
 801f8a2:	f240 2171 	movw	r1, #625	; 0x271
 801f8a6:	4630      	mov	r0, r6
 801f8a8:	f7ff ff12 	bl	801f6d0 <__i2b>
 801f8ac:	2300      	movs	r3, #0
 801f8ae:	f8c8 0008 	str.w	r0, [r8, #8]
 801f8b2:	4604      	mov	r4, r0
 801f8b4:	6003      	str	r3, [r0, #0]
 801f8b6:	f04f 0900 	mov.w	r9, #0
 801f8ba:	07eb      	lsls	r3, r5, #31
 801f8bc:	d50a      	bpl.n	801f8d4 <__pow5mult+0x84>
 801f8be:	4639      	mov	r1, r7
 801f8c0:	4622      	mov	r2, r4
 801f8c2:	4630      	mov	r0, r6
 801f8c4:	f7ff ff1a 	bl	801f6fc <__multiply>
 801f8c8:	4639      	mov	r1, r7
 801f8ca:	4680      	mov	r8, r0
 801f8cc:	4630      	mov	r0, r6
 801f8ce:	f7ff fe49 	bl	801f564 <_Bfree>
 801f8d2:	4647      	mov	r7, r8
 801f8d4:	106d      	asrs	r5, r5, #1
 801f8d6:	d00b      	beq.n	801f8f0 <__pow5mult+0xa0>
 801f8d8:	6820      	ldr	r0, [r4, #0]
 801f8da:	b938      	cbnz	r0, 801f8ec <__pow5mult+0x9c>
 801f8dc:	4622      	mov	r2, r4
 801f8de:	4621      	mov	r1, r4
 801f8e0:	4630      	mov	r0, r6
 801f8e2:	f7ff ff0b 	bl	801f6fc <__multiply>
 801f8e6:	6020      	str	r0, [r4, #0]
 801f8e8:	f8c0 9000 	str.w	r9, [r0]
 801f8ec:	4604      	mov	r4, r0
 801f8ee:	e7e4      	b.n	801f8ba <__pow5mult+0x6a>
 801f8f0:	4638      	mov	r0, r7
 801f8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f8f6:	bf00      	nop
 801f8f8:	08023a30 	.word	0x08023a30
 801f8fc:	08023860 	.word	0x08023860
 801f900:	080238e0 	.word	0x080238e0

0801f904 <__lshift>:
 801f904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f908:	460c      	mov	r4, r1
 801f90a:	6849      	ldr	r1, [r1, #4]
 801f90c:	6923      	ldr	r3, [r4, #16]
 801f90e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f912:	68a3      	ldr	r3, [r4, #8]
 801f914:	4607      	mov	r7, r0
 801f916:	4691      	mov	r9, r2
 801f918:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f91c:	f108 0601 	add.w	r6, r8, #1
 801f920:	42b3      	cmp	r3, r6
 801f922:	db0b      	blt.n	801f93c <__lshift+0x38>
 801f924:	4638      	mov	r0, r7
 801f926:	f7ff fddd 	bl	801f4e4 <_Balloc>
 801f92a:	4605      	mov	r5, r0
 801f92c:	b948      	cbnz	r0, 801f942 <__lshift+0x3e>
 801f92e:	4602      	mov	r2, r0
 801f930:	4b28      	ldr	r3, [pc, #160]	; (801f9d4 <__lshift+0xd0>)
 801f932:	4829      	ldr	r0, [pc, #164]	; (801f9d8 <__lshift+0xd4>)
 801f934:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801f938:	f7fe f81a 	bl	801d970 <__assert_func>
 801f93c:	3101      	adds	r1, #1
 801f93e:	005b      	lsls	r3, r3, #1
 801f940:	e7ee      	b.n	801f920 <__lshift+0x1c>
 801f942:	2300      	movs	r3, #0
 801f944:	f100 0114 	add.w	r1, r0, #20
 801f948:	f100 0210 	add.w	r2, r0, #16
 801f94c:	4618      	mov	r0, r3
 801f94e:	4553      	cmp	r3, sl
 801f950:	db33      	blt.n	801f9ba <__lshift+0xb6>
 801f952:	6920      	ldr	r0, [r4, #16]
 801f954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f958:	f104 0314 	add.w	r3, r4, #20
 801f95c:	f019 091f 	ands.w	r9, r9, #31
 801f960:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f964:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f968:	d02b      	beq.n	801f9c2 <__lshift+0xbe>
 801f96a:	f1c9 0e20 	rsb	lr, r9, #32
 801f96e:	468a      	mov	sl, r1
 801f970:	2200      	movs	r2, #0
 801f972:	6818      	ldr	r0, [r3, #0]
 801f974:	fa00 f009 	lsl.w	r0, r0, r9
 801f978:	4310      	orrs	r0, r2
 801f97a:	f84a 0b04 	str.w	r0, [sl], #4
 801f97e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f982:	459c      	cmp	ip, r3
 801f984:	fa22 f20e 	lsr.w	r2, r2, lr
 801f988:	d8f3      	bhi.n	801f972 <__lshift+0x6e>
 801f98a:	ebac 0304 	sub.w	r3, ip, r4
 801f98e:	3b15      	subs	r3, #21
 801f990:	f023 0303 	bic.w	r3, r3, #3
 801f994:	3304      	adds	r3, #4
 801f996:	f104 0015 	add.w	r0, r4, #21
 801f99a:	4584      	cmp	ip, r0
 801f99c:	bf38      	it	cc
 801f99e:	2304      	movcc	r3, #4
 801f9a0:	50ca      	str	r2, [r1, r3]
 801f9a2:	b10a      	cbz	r2, 801f9a8 <__lshift+0xa4>
 801f9a4:	f108 0602 	add.w	r6, r8, #2
 801f9a8:	3e01      	subs	r6, #1
 801f9aa:	4638      	mov	r0, r7
 801f9ac:	612e      	str	r6, [r5, #16]
 801f9ae:	4621      	mov	r1, r4
 801f9b0:	f7ff fdd8 	bl	801f564 <_Bfree>
 801f9b4:	4628      	mov	r0, r5
 801f9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f9ba:	f842 0f04 	str.w	r0, [r2, #4]!
 801f9be:	3301      	adds	r3, #1
 801f9c0:	e7c5      	b.n	801f94e <__lshift+0x4a>
 801f9c2:	3904      	subs	r1, #4
 801f9c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801f9c8:	f841 2f04 	str.w	r2, [r1, #4]!
 801f9cc:	459c      	cmp	ip, r3
 801f9ce:	d8f9      	bhi.n	801f9c4 <__lshift+0xc0>
 801f9d0:	e7ea      	b.n	801f9a8 <__lshift+0xa4>
 801f9d2:	bf00      	nop
 801f9d4:	080238cf 	.word	0x080238cf
 801f9d8:	080238e0 	.word	0x080238e0

0801f9dc <__mcmp>:
 801f9dc:	b530      	push	{r4, r5, lr}
 801f9de:	6902      	ldr	r2, [r0, #16]
 801f9e0:	690c      	ldr	r4, [r1, #16]
 801f9e2:	1b12      	subs	r2, r2, r4
 801f9e4:	d10e      	bne.n	801fa04 <__mcmp+0x28>
 801f9e6:	f100 0314 	add.w	r3, r0, #20
 801f9ea:	3114      	adds	r1, #20
 801f9ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f9f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f9f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f9f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f9fc:	42a5      	cmp	r5, r4
 801f9fe:	d003      	beq.n	801fa08 <__mcmp+0x2c>
 801fa00:	d305      	bcc.n	801fa0e <__mcmp+0x32>
 801fa02:	2201      	movs	r2, #1
 801fa04:	4610      	mov	r0, r2
 801fa06:	bd30      	pop	{r4, r5, pc}
 801fa08:	4283      	cmp	r3, r0
 801fa0a:	d3f3      	bcc.n	801f9f4 <__mcmp+0x18>
 801fa0c:	e7fa      	b.n	801fa04 <__mcmp+0x28>
 801fa0e:	f04f 32ff 	mov.w	r2, #4294967295
 801fa12:	e7f7      	b.n	801fa04 <__mcmp+0x28>

0801fa14 <__mdiff>:
 801fa14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa18:	460c      	mov	r4, r1
 801fa1a:	4606      	mov	r6, r0
 801fa1c:	4611      	mov	r1, r2
 801fa1e:	4620      	mov	r0, r4
 801fa20:	4690      	mov	r8, r2
 801fa22:	f7ff ffdb 	bl	801f9dc <__mcmp>
 801fa26:	1e05      	subs	r5, r0, #0
 801fa28:	d110      	bne.n	801fa4c <__mdiff+0x38>
 801fa2a:	4629      	mov	r1, r5
 801fa2c:	4630      	mov	r0, r6
 801fa2e:	f7ff fd59 	bl	801f4e4 <_Balloc>
 801fa32:	b930      	cbnz	r0, 801fa42 <__mdiff+0x2e>
 801fa34:	4b3a      	ldr	r3, [pc, #232]	; (801fb20 <__mdiff+0x10c>)
 801fa36:	4602      	mov	r2, r0
 801fa38:	f240 2137 	movw	r1, #567	; 0x237
 801fa3c:	4839      	ldr	r0, [pc, #228]	; (801fb24 <__mdiff+0x110>)
 801fa3e:	f7fd ff97 	bl	801d970 <__assert_func>
 801fa42:	2301      	movs	r3, #1
 801fa44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fa48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa4c:	bfa4      	itt	ge
 801fa4e:	4643      	movge	r3, r8
 801fa50:	46a0      	movge	r8, r4
 801fa52:	4630      	mov	r0, r6
 801fa54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fa58:	bfa6      	itte	ge
 801fa5a:	461c      	movge	r4, r3
 801fa5c:	2500      	movge	r5, #0
 801fa5e:	2501      	movlt	r5, #1
 801fa60:	f7ff fd40 	bl	801f4e4 <_Balloc>
 801fa64:	b920      	cbnz	r0, 801fa70 <__mdiff+0x5c>
 801fa66:	4b2e      	ldr	r3, [pc, #184]	; (801fb20 <__mdiff+0x10c>)
 801fa68:	4602      	mov	r2, r0
 801fa6a:	f240 2145 	movw	r1, #581	; 0x245
 801fa6e:	e7e5      	b.n	801fa3c <__mdiff+0x28>
 801fa70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801fa74:	6926      	ldr	r6, [r4, #16]
 801fa76:	60c5      	str	r5, [r0, #12]
 801fa78:	f104 0914 	add.w	r9, r4, #20
 801fa7c:	f108 0514 	add.w	r5, r8, #20
 801fa80:	f100 0e14 	add.w	lr, r0, #20
 801fa84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801fa88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801fa8c:	f108 0210 	add.w	r2, r8, #16
 801fa90:	46f2      	mov	sl, lr
 801fa92:	2100      	movs	r1, #0
 801fa94:	f859 3b04 	ldr.w	r3, [r9], #4
 801fa98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fa9c:	fa11 f88b 	uxtah	r8, r1, fp
 801faa0:	b299      	uxth	r1, r3
 801faa2:	0c1b      	lsrs	r3, r3, #16
 801faa4:	eba8 0801 	sub.w	r8, r8, r1
 801faa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801faac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801fab0:	fa1f f888 	uxth.w	r8, r8
 801fab4:	1419      	asrs	r1, r3, #16
 801fab6:	454e      	cmp	r6, r9
 801fab8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801fabc:	f84a 3b04 	str.w	r3, [sl], #4
 801fac0:	d8e8      	bhi.n	801fa94 <__mdiff+0x80>
 801fac2:	1b33      	subs	r3, r6, r4
 801fac4:	3b15      	subs	r3, #21
 801fac6:	f023 0303 	bic.w	r3, r3, #3
 801faca:	3304      	adds	r3, #4
 801facc:	3415      	adds	r4, #21
 801face:	42a6      	cmp	r6, r4
 801fad0:	bf38      	it	cc
 801fad2:	2304      	movcc	r3, #4
 801fad4:	441d      	add	r5, r3
 801fad6:	4473      	add	r3, lr
 801fad8:	469e      	mov	lr, r3
 801fada:	462e      	mov	r6, r5
 801fadc:	4566      	cmp	r6, ip
 801fade:	d30e      	bcc.n	801fafe <__mdiff+0xea>
 801fae0:	f10c 0203 	add.w	r2, ip, #3
 801fae4:	1b52      	subs	r2, r2, r5
 801fae6:	f022 0203 	bic.w	r2, r2, #3
 801faea:	3d03      	subs	r5, #3
 801faec:	45ac      	cmp	ip, r5
 801faee:	bf38      	it	cc
 801faf0:	2200      	movcc	r2, #0
 801faf2:	4413      	add	r3, r2
 801faf4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801faf8:	b17a      	cbz	r2, 801fb1a <__mdiff+0x106>
 801fafa:	6107      	str	r7, [r0, #16]
 801fafc:	e7a4      	b.n	801fa48 <__mdiff+0x34>
 801fafe:	f856 8b04 	ldr.w	r8, [r6], #4
 801fb02:	fa11 f288 	uxtah	r2, r1, r8
 801fb06:	1414      	asrs	r4, r2, #16
 801fb08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801fb0c:	b292      	uxth	r2, r2
 801fb0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801fb12:	f84e 2b04 	str.w	r2, [lr], #4
 801fb16:	1421      	asrs	r1, r4, #16
 801fb18:	e7e0      	b.n	801fadc <__mdiff+0xc8>
 801fb1a:	3f01      	subs	r7, #1
 801fb1c:	e7ea      	b.n	801faf4 <__mdiff+0xe0>
 801fb1e:	bf00      	nop
 801fb20:	080238cf 	.word	0x080238cf
 801fb24:	080238e0 	.word	0x080238e0

0801fb28 <__d2b>:
 801fb28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fb2c:	460f      	mov	r7, r1
 801fb2e:	2101      	movs	r1, #1
 801fb30:	ec59 8b10 	vmov	r8, r9, d0
 801fb34:	4616      	mov	r6, r2
 801fb36:	f7ff fcd5 	bl	801f4e4 <_Balloc>
 801fb3a:	4604      	mov	r4, r0
 801fb3c:	b930      	cbnz	r0, 801fb4c <__d2b+0x24>
 801fb3e:	4602      	mov	r2, r0
 801fb40:	4b24      	ldr	r3, [pc, #144]	; (801fbd4 <__d2b+0xac>)
 801fb42:	4825      	ldr	r0, [pc, #148]	; (801fbd8 <__d2b+0xb0>)
 801fb44:	f240 310f 	movw	r1, #783	; 0x30f
 801fb48:	f7fd ff12 	bl	801d970 <__assert_func>
 801fb4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fb50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fb54:	bb2d      	cbnz	r5, 801fba2 <__d2b+0x7a>
 801fb56:	9301      	str	r3, [sp, #4]
 801fb58:	f1b8 0300 	subs.w	r3, r8, #0
 801fb5c:	d026      	beq.n	801fbac <__d2b+0x84>
 801fb5e:	4668      	mov	r0, sp
 801fb60:	9300      	str	r3, [sp, #0]
 801fb62:	f7ff fd87 	bl	801f674 <__lo0bits>
 801fb66:	e9dd 1200 	ldrd	r1, r2, [sp]
 801fb6a:	b1e8      	cbz	r0, 801fba8 <__d2b+0x80>
 801fb6c:	f1c0 0320 	rsb	r3, r0, #32
 801fb70:	fa02 f303 	lsl.w	r3, r2, r3
 801fb74:	430b      	orrs	r3, r1
 801fb76:	40c2      	lsrs	r2, r0
 801fb78:	6163      	str	r3, [r4, #20]
 801fb7a:	9201      	str	r2, [sp, #4]
 801fb7c:	9b01      	ldr	r3, [sp, #4]
 801fb7e:	61a3      	str	r3, [r4, #24]
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	bf14      	ite	ne
 801fb84:	2202      	movne	r2, #2
 801fb86:	2201      	moveq	r2, #1
 801fb88:	6122      	str	r2, [r4, #16]
 801fb8a:	b1bd      	cbz	r5, 801fbbc <__d2b+0x94>
 801fb8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fb90:	4405      	add	r5, r0
 801fb92:	603d      	str	r5, [r7, #0]
 801fb94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fb98:	6030      	str	r0, [r6, #0]
 801fb9a:	4620      	mov	r0, r4
 801fb9c:	b003      	add	sp, #12
 801fb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fba6:	e7d6      	b.n	801fb56 <__d2b+0x2e>
 801fba8:	6161      	str	r1, [r4, #20]
 801fbaa:	e7e7      	b.n	801fb7c <__d2b+0x54>
 801fbac:	a801      	add	r0, sp, #4
 801fbae:	f7ff fd61 	bl	801f674 <__lo0bits>
 801fbb2:	9b01      	ldr	r3, [sp, #4]
 801fbb4:	6163      	str	r3, [r4, #20]
 801fbb6:	3020      	adds	r0, #32
 801fbb8:	2201      	movs	r2, #1
 801fbba:	e7e5      	b.n	801fb88 <__d2b+0x60>
 801fbbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fbc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fbc4:	6038      	str	r0, [r7, #0]
 801fbc6:	6918      	ldr	r0, [r3, #16]
 801fbc8:	f7ff fd34 	bl	801f634 <__hi0bits>
 801fbcc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fbd0:	e7e2      	b.n	801fb98 <__d2b+0x70>
 801fbd2:	bf00      	nop
 801fbd4:	080238cf 	.word	0x080238cf
 801fbd8:	080238e0 	.word	0x080238e0

0801fbdc <__ssputs_r>:
 801fbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbe0:	688e      	ldr	r6, [r1, #8]
 801fbe2:	461f      	mov	r7, r3
 801fbe4:	42be      	cmp	r6, r7
 801fbe6:	680b      	ldr	r3, [r1, #0]
 801fbe8:	4682      	mov	sl, r0
 801fbea:	460c      	mov	r4, r1
 801fbec:	4690      	mov	r8, r2
 801fbee:	d82c      	bhi.n	801fc4a <__ssputs_r+0x6e>
 801fbf0:	898a      	ldrh	r2, [r1, #12]
 801fbf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fbf6:	d026      	beq.n	801fc46 <__ssputs_r+0x6a>
 801fbf8:	6965      	ldr	r5, [r4, #20]
 801fbfa:	6909      	ldr	r1, [r1, #16]
 801fbfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fc00:	eba3 0901 	sub.w	r9, r3, r1
 801fc04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fc08:	1c7b      	adds	r3, r7, #1
 801fc0a:	444b      	add	r3, r9
 801fc0c:	106d      	asrs	r5, r5, #1
 801fc0e:	429d      	cmp	r5, r3
 801fc10:	bf38      	it	cc
 801fc12:	461d      	movcc	r5, r3
 801fc14:	0553      	lsls	r3, r2, #21
 801fc16:	d527      	bpl.n	801fc68 <__ssputs_r+0x8c>
 801fc18:	4629      	mov	r1, r5
 801fc1a:	f7ff fbd7 	bl	801f3cc <_malloc_r>
 801fc1e:	4606      	mov	r6, r0
 801fc20:	b360      	cbz	r0, 801fc7c <__ssputs_r+0xa0>
 801fc22:	6921      	ldr	r1, [r4, #16]
 801fc24:	464a      	mov	r2, r9
 801fc26:	f7fe fccb 	bl	801e5c0 <memcpy>
 801fc2a:	89a3      	ldrh	r3, [r4, #12]
 801fc2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fc30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc34:	81a3      	strh	r3, [r4, #12]
 801fc36:	6126      	str	r6, [r4, #16]
 801fc38:	6165      	str	r5, [r4, #20]
 801fc3a:	444e      	add	r6, r9
 801fc3c:	eba5 0509 	sub.w	r5, r5, r9
 801fc40:	6026      	str	r6, [r4, #0]
 801fc42:	60a5      	str	r5, [r4, #8]
 801fc44:	463e      	mov	r6, r7
 801fc46:	42be      	cmp	r6, r7
 801fc48:	d900      	bls.n	801fc4c <__ssputs_r+0x70>
 801fc4a:	463e      	mov	r6, r7
 801fc4c:	6820      	ldr	r0, [r4, #0]
 801fc4e:	4632      	mov	r2, r6
 801fc50:	4641      	mov	r1, r8
 801fc52:	f000 fba3 	bl	802039c <memmove>
 801fc56:	68a3      	ldr	r3, [r4, #8]
 801fc58:	1b9b      	subs	r3, r3, r6
 801fc5a:	60a3      	str	r3, [r4, #8]
 801fc5c:	6823      	ldr	r3, [r4, #0]
 801fc5e:	4433      	add	r3, r6
 801fc60:	6023      	str	r3, [r4, #0]
 801fc62:	2000      	movs	r0, #0
 801fc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc68:	462a      	mov	r2, r5
 801fc6a:	f000 fc2d 	bl	80204c8 <_realloc_r>
 801fc6e:	4606      	mov	r6, r0
 801fc70:	2800      	cmp	r0, #0
 801fc72:	d1e0      	bne.n	801fc36 <__ssputs_r+0x5a>
 801fc74:	6921      	ldr	r1, [r4, #16]
 801fc76:	4650      	mov	r0, sl
 801fc78:	f7ff fb34 	bl	801f2e4 <_free_r>
 801fc7c:	230c      	movs	r3, #12
 801fc7e:	f8ca 3000 	str.w	r3, [sl]
 801fc82:	89a3      	ldrh	r3, [r4, #12]
 801fc84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc88:	81a3      	strh	r3, [r4, #12]
 801fc8a:	f04f 30ff 	mov.w	r0, #4294967295
 801fc8e:	e7e9      	b.n	801fc64 <__ssputs_r+0x88>

0801fc90 <_svfiprintf_r>:
 801fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc94:	4698      	mov	r8, r3
 801fc96:	898b      	ldrh	r3, [r1, #12]
 801fc98:	061b      	lsls	r3, r3, #24
 801fc9a:	b09d      	sub	sp, #116	; 0x74
 801fc9c:	4607      	mov	r7, r0
 801fc9e:	460d      	mov	r5, r1
 801fca0:	4614      	mov	r4, r2
 801fca2:	d50e      	bpl.n	801fcc2 <_svfiprintf_r+0x32>
 801fca4:	690b      	ldr	r3, [r1, #16]
 801fca6:	b963      	cbnz	r3, 801fcc2 <_svfiprintf_r+0x32>
 801fca8:	2140      	movs	r1, #64	; 0x40
 801fcaa:	f7ff fb8f 	bl	801f3cc <_malloc_r>
 801fcae:	6028      	str	r0, [r5, #0]
 801fcb0:	6128      	str	r0, [r5, #16]
 801fcb2:	b920      	cbnz	r0, 801fcbe <_svfiprintf_r+0x2e>
 801fcb4:	230c      	movs	r3, #12
 801fcb6:	603b      	str	r3, [r7, #0]
 801fcb8:	f04f 30ff 	mov.w	r0, #4294967295
 801fcbc:	e0d0      	b.n	801fe60 <_svfiprintf_r+0x1d0>
 801fcbe:	2340      	movs	r3, #64	; 0x40
 801fcc0:	616b      	str	r3, [r5, #20]
 801fcc2:	2300      	movs	r3, #0
 801fcc4:	9309      	str	r3, [sp, #36]	; 0x24
 801fcc6:	2320      	movs	r3, #32
 801fcc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fccc:	f8cd 800c 	str.w	r8, [sp, #12]
 801fcd0:	2330      	movs	r3, #48	; 0x30
 801fcd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fe78 <_svfiprintf_r+0x1e8>
 801fcd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fcda:	f04f 0901 	mov.w	r9, #1
 801fcde:	4623      	mov	r3, r4
 801fce0:	469a      	mov	sl, r3
 801fce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fce6:	b10a      	cbz	r2, 801fcec <_svfiprintf_r+0x5c>
 801fce8:	2a25      	cmp	r2, #37	; 0x25
 801fcea:	d1f9      	bne.n	801fce0 <_svfiprintf_r+0x50>
 801fcec:	ebba 0b04 	subs.w	fp, sl, r4
 801fcf0:	d00b      	beq.n	801fd0a <_svfiprintf_r+0x7a>
 801fcf2:	465b      	mov	r3, fp
 801fcf4:	4622      	mov	r2, r4
 801fcf6:	4629      	mov	r1, r5
 801fcf8:	4638      	mov	r0, r7
 801fcfa:	f7ff ff6f 	bl	801fbdc <__ssputs_r>
 801fcfe:	3001      	adds	r0, #1
 801fd00:	f000 80a9 	beq.w	801fe56 <_svfiprintf_r+0x1c6>
 801fd04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd06:	445a      	add	r2, fp
 801fd08:	9209      	str	r2, [sp, #36]	; 0x24
 801fd0a:	f89a 3000 	ldrb.w	r3, [sl]
 801fd0e:	2b00      	cmp	r3, #0
 801fd10:	f000 80a1 	beq.w	801fe56 <_svfiprintf_r+0x1c6>
 801fd14:	2300      	movs	r3, #0
 801fd16:	f04f 32ff 	mov.w	r2, #4294967295
 801fd1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fd1e:	f10a 0a01 	add.w	sl, sl, #1
 801fd22:	9304      	str	r3, [sp, #16]
 801fd24:	9307      	str	r3, [sp, #28]
 801fd26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fd2a:	931a      	str	r3, [sp, #104]	; 0x68
 801fd2c:	4654      	mov	r4, sl
 801fd2e:	2205      	movs	r2, #5
 801fd30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd34:	4850      	ldr	r0, [pc, #320]	; (801fe78 <_svfiprintf_r+0x1e8>)
 801fd36:	f7e0 fa73 	bl	8000220 <memchr>
 801fd3a:	9a04      	ldr	r2, [sp, #16]
 801fd3c:	b9d8      	cbnz	r0, 801fd76 <_svfiprintf_r+0xe6>
 801fd3e:	06d0      	lsls	r0, r2, #27
 801fd40:	bf44      	itt	mi
 801fd42:	2320      	movmi	r3, #32
 801fd44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd48:	0711      	lsls	r1, r2, #28
 801fd4a:	bf44      	itt	mi
 801fd4c:	232b      	movmi	r3, #43	; 0x2b
 801fd4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd52:	f89a 3000 	ldrb.w	r3, [sl]
 801fd56:	2b2a      	cmp	r3, #42	; 0x2a
 801fd58:	d015      	beq.n	801fd86 <_svfiprintf_r+0xf6>
 801fd5a:	9a07      	ldr	r2, [sp, #28]
 801fd5c:	4654      	mov	r4, sl
 801fd5e:	2000      	movs	r0, #0
 801fd60:	f04f 0c0a 	mov.w	ip, #10
 801fd64:	4621      	mov	r1, r4
 801fd66:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd6a:	3b30      	subs	r3, #48	; 0x30
 801fd6c:	2b09      	cmp	r3, #9
 801fd6e:	d94d      	bls.n	801fe0c <_svfiprintf_r+0x17c>
 801fd70:	b1b0      	cbz	r0, 801fda0 <_svfiprintf_r+0x110>
 801fd72:	9207      	str	r2, [sp, #28]
 801fd74:	e014      	b.n	801fda0 <_svfiprintf_r+0x110>
 801fd76:	eba0 0308 	sub.w	r3, r0, r8
 801fd7a:	fa09 f303 	lsl.w	r3, r9, r3
 801fd7e:	4313      	orrs	r3, r2
 801fd80:	9304      	str	r3, [sp, #16]
 801fd82:	46a2      	mov	sl, r4
 801fd84:	e7d2      	b.n	801fd2c <_svfiprintf_r+0x9c>
 801fd86:	9b03      	ldr	r3, [sp, #12]
 801fd88:	1d19      	adds	r1, r3, #4
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	9103      	str	r1, [sp, #12]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	bfbb      	ittet	lt
 801fd92:	425b      	neglt	r3, r3
 801fd94:	f042 0202 	orrlt.w	r2, r2, #2
 801fd98:	9307      	strge	r3, [sp, #28]
 801fd9a:	9307      	strlt	r3, [sp, #28]
 801fd9c:	bfb8      	it	lt
 801fd9e:	9204      	strlt	r2, [sp, #16]
 801fda0:	7823      	ldrb	r3, [r4, #0]
 801fda2:	2b2e      	cmp	r3, #46	; 0x2e
 801fda4:	d10c      	bne.n	801fdc0 <_svfiprintf_r+0x130>
 801fda6:	7863      	ldrb	r3, [r4, #1]
 801fda8:	2b2a      	cmp	r3, #42	; 0x2a
 801fdaa:	d134      	bne.n	801fe16 <_svfiprintf_r+0x186>
 801fdac:	9b03      	ldr	r3, [sp, #12]
 801fdae:	1d1a      	adds	r2, r3, #4
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	9203      	str	r2, [sp, #12]
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	bfb8      	it	lt
 801fdb8:	f04f 33ff 	movlt.w	r3, #4294967295
 801fdbc:	3402      	adds	r4, #2
 801fdbe:	9305      	str	r3, [sp, #20]
 801fdc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801fe88 <_svfiprintf_r+0x1f8>
 801fdc4:	7821      	ldrb	r1, [r4, #0]
 801fdc6:	2203      	movs	r2, #3
 801fdc8:	4650      	mov	r0, sl
 801fdca:	f7e0 fa29 	bl	8000220 <memchr>
 801fdce:	b138      	cbz	r0, 801fde0 <_svfiprintf_r+0x150>
 801fdd0:	9b04      	ldr	r3, [sp, #16]
 801fdd2:	eba0 000a 	sub.w	r0, r0, sl
 801fdd6:	2240      	movs	r2, #64	; 0x40
 801fdd8:	4082      	lsls	r2, r0
 801fdda:	4313      	orrs	r3, r2
 801fddc:	3401      	adds	r4, #1
 801fdde:	9304      	str	r3, [sp, #16]
 801fde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fde4:	4825      	ldr	r0, [pc, #148]	; (801fe7c <_svfiprintf_r+0x1ec>)
 801fde6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fdea:	2206      	movs	r2, #6
 801fdec:	f7e0 fa18 	bl	8000220 <memchr>
 801fdf0:	2800      	cmp	r0, #0
 801fdf2:	d038      	beq.n	801fe66 <_svfiprintf_r+0x1d6>
 801fdf4:	4b22      	ldr	r3, [pc, #136]	; (801fe80 <_svfiprintf_r+0x1f0>)
 801fdf6:	bb1b      	cbnz	r3, 801fe40 <_svfiprintf_r+0x1b0>
 801fdf8:	9b03      	ldr	r3, [sp, #12]
 801fdfa:	3307      	adds	r3, #7
 801fdfc:	f023 0307 	bic.w	r3, r3, #7
 801fe00:	3308      	adds	r3, #8
 801fe02:	9303      	str	r3, [sp, #12]
 801fe04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe06:	4433      	add	r3, r6
 801fe08:	9309      	str	r3, [sp, #36]	; 0x24
 801fe0a:	e768      	b.n	801fcde <_svfiprintf_r+0x4e>
 801fe0c:	fb0c 3202 	mla	r2, ip, r2, r3
 801fe10:	460c      	mov	r4, r1
 801fe12:	2001      	movs	r0, #1
 801fe14:	e7a6      	b.n	801fd64 <_svfiprintf_r+0xd4>
 801fe16:	2300      	movs	r3, #0
 801fe18:	3401      	adds	r4, #1
 801fe1a:	9305      	str	r3, [sp, #20]
 801fe1c:	4619      	mov	r1, r3
 801fe1e:	f04f 0c0a 	mov.w	ip, #10
 801fe22:	4620      	mov	r0, r4
 801fe24:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fe28:	3a30      	subs	r2, #48	; 0x30
 801fe2a:	2a09      	cmp	r2, #9
 801fe2c:	d903      	bls.n	801fe36 <_svfiprintf_r+0x1a6>
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	d0c6      	beq.n	801fdc0 <_svfiprintf_r+0x130>
 801fe32:	9105      	str	r1, [sp, #20]
 801fe34:	e7c4      	b.n	801fdc0 <_svfiprintf_r+0x130>
 801fe36:	fb0c 2101 	mla	r1, ip, r1, r2
 801fe3a:	4604      	mov	r4, r0
 801fe3c:	2301      	movs	r3, #1
 801fe3e:	e7f0      	b.n	801fe22 <_svfiprintf_r+0x192>
 801fe40:	ab03      	add	r3, sp, #12
 801fe42:	9300      	str	r3, [sp, #0]
 801fe44:	462a      	mov	r2, r5
 801fe46:	4b0f      	ldr	r3, [pc, #60]	; (801fe84 <_svfiprintf_r+0x1f4>)
 801fe48:	a904      	add	r1, sp, #16
 801fe4a:	4638      	mov	r0, r7
 801fe4c:	f7fd fe4e 	bl	801daec <_printf_float>
 801fe50:	1c42      	adds	r2, r0, #1
 801fe52:	4606      	mov	r6, r0
 801fe54:	d1d6      	bne.n	801fe04 <_svfiprintf_r+0x174>
 801fe56:	89ab      	ldrh	r3, [r5, #12]
 801fe58:	065b      	lsls	r3, r3, #25
 801fe5a:	f53f af2d 	bmi.w	801fcb8 <_svfiprintf_r+0x28>
 801fe5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe60:	b01d      	add	sp, #116	; 0x74
 801fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe66:	ab03      	add	r3, sp, #12
 801fe68:	9300      	str	r3, [sp, #0]
 801fe6a:	462a      	mov	r2, r5
 801fe6c:	4b05      	ldr	r3, [pc, #20]	; (801fe84 <_svfiprintf_r+0x1f4>)
 801fe6e:	a904      	add	r1, sp, #16
 801fe70:	4638      	mov	r0, r7
 801fe72:	f7fe f8df 	bl	801e034 <_printf_i>
 801fe76:	e7eb      	b.n	801fe50 <_svfiprintf_r+0x1c0>
 801fe78:	08023a3c 	.word	0x08023a3c
 801fe7c:	08023a46 	.word	0x08023a46
 801fe80:	0801daed 	.word	0x0801daed
 801fe84:	0801fbdd 	.word	0x0801fbdd
 801fe88:	08023a42 	.word	0x08023a42

0801fe8c <__sfputc_r>:
 801fe8c:	6893      	ldr	r3, [r2, #8]
 801fe8e:	3b01      	subs	r3, #1
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	b410      	push	{r4}
 801fe94:	6093      	str	r3, [r2, #8]
 801fe96:	da08      	bge.n	801feaa <__sfputc_r+0x1e>
 801fe98:	6994      	ldr	r4, [r2, #24]
 801fe9a:	42a3      	cmp	r3, r4
 801fe9c:	db01      	blt.n	801fea2 <__sfputc_r+0x16>
 801fe9e:	290a      	cmp	r1, #10
 801fea0:	d103      	bne.n	801feaa <__sfputc_r+0x1e>
 801fea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fea6:	f000 b9e3 	b.w	8020270 <__swbuf_r>
 801feaa:	6813      	ldr	r3, [r2, #0]
 801feac:	1c58      	adds	r0, r3, #1
 801feae:	6010      	str	r0, [r2, #0]
 801feb0:	7019      	strb	r1, [r3, #0]
 801feb2:	4608      	mov	r0, r1
 801feb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801feb8:	4770      	bx	lr

0801feba <__sfputs_r>:
 801feba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801febc:	4606      	mov	r6, r0
 801febe:	460f      	mov	r7, r1
 801fec0:	4614      	mov	r4, r2
 801fec2:	18d5      	adds	r5, r2, r3
 801fec4:	42ac      	cmp	r4, r5
 801fec6:	d101      	bne.n	801fecc <__sfputs_r+0x12>
 801fec8:	2000      	movs	r0, #0
 801feca:	e007      	b.n	801fedc <__sfputs_r+0x22>
 801fecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fed0:	463a      	mov	r2, r7
 801fed2:	4630      	mov	r0, r6
 801fed4:	f7ff ffda 	bl	801fe8c <__sfputc_r>
 801fed8:	1c43      	adds	r3, r0, #1
 801feda:	d1f3      	bne.n	801fec4 <__sfputs_r+0xa>
 801fedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fee0 <_vfiprintf_r>:
 801fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fee4:	460d      	mov	r5, r1
 801fee6:	b09d      	sub	sp, #116	; 0x74
 801fee8:	4614      	mov	r4, r2
 801feea:	4698      	mov	r8, r3
 801feec:	4606      	mov	r6, r0
 801feee:	b118      	cbz	r0, 801fef8 <_vfiprintf_r+0x18>
 801fef0:	6a03      	ldr	r3, [r0, #32]
 801fef2:	b90b      	cbnz	r3, 801fef8 <_vfiprintf_r+0x18>
 801fef4:	f7fe fa3a 	bl	801e36c <__sinit>
 801fef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fefa:	07d9      	lsls	r1, r3, #31
 801fefc:	d405      	bmi.n	801ff0a <_vfiprintf_r+0x2a>
 801fefe:	89ab      	ldrh	r3, [r5, #12]
 801ff00:	059a      	lsls	r2, r3, #22
 801ff02:	d402      	bmi.n	801ff0a <_vfiprintf_r+0x2a>
 801ff04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff06:	f7fe fb59 	bl	801e5bc <__retarget_lock_acquire_recursive>
 801ff0a:	89ab      	ldrh	r3, [r5, #12]
 801ff0c:	071b      	lsls	r3, r3, #28
 801ff0e:	d501      	bpl.n	801ff14 <_vfiprintf_r+0x34>
 801ff10:	692b      	ldr	r3, [r5, #16]
 801ff12:	b99b      	cbnz	r3, 801ff3c <_vfiprintf_r+0x5c>
 801ff14:	4629      	mov	r1, r5
 801ff16:	4630      	mov	r0, r6
 801ff18:	f000 f9e8 	bl	80202ec <__swsetup_r>
 801ff1c:	b170      	cbz	r0, 801ff3c <_vfiprintf_r+0x5c>
 801ff1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff20:	07dc      	lsls	r4, r3, #31
 801ff22:	d504      	bpl.n	801ff2e <_vfiprintf_r+0x4e>
 801ff24:	f04f 30ff 	mov.w	r0, #4294967295
 801ff28:	b01d      	add	sp, #116	; 0x74
 801ff2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff2e:	89ab      	ldrh	r3, [r5, #12]
 801ff30:	0598      	lsls	r0, r3, #22
 801ff32:	d4f7      	bmi.n	801ff24 <_vfiprintf_r+0x44>
 801ff34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff36:	f7fe fb42 	bl	801e5be <__retarget_lock_release_recursive>
 801ff3a:	e7f3      	b.n	801ff24 <_vfiprintf_r+0x44>
 801ff3c:	2300      	movs	r3, #0
 801ff3e:	9309      	str	r3, [sp, #36]	; 0x24
 801ff40:	2320      	movs	r3, #32
 801ff42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ff46:	f8cd 800c 	str.w	r8, [sp, #12]
 801ff4a:	2330      	movs	r3, #48	; 0x30
 801ff4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8020100 <_vfiprintf_r+0x220>
 801ff50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ff54:	f04f 0901 	mov.w	r9, #1
 801ff58:	4623      	mov	r3, r4
 801ff5a:	469a      	mov	sl, r3
 801ff5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff60:	b10a      	cbz	r2, 801ff66 <_vfiprintf_r+0x86>
 801ff62:	2a25      	cmp	r2, #37	; 0x25
 801ff64:	d1f9      	bne.n	801ff5a <_vfiprintf_r+0x7a>
 801ff66:	ebba 0b04 	subs.w	fp, sl, r4
 801ff6a:	d00b      	beq.n	801ff84 <_vfiprintf_r+0xa4>
 801ff6c:	465b      	mov	r3, fp
 801ff6e:	4622      	mov	r2, r4
 801ff70:	4629      	mov	r1, r5
 801ff72:	4630      	mov	r0, r6
 801ff74:	f7ff ffa1 	bl	801feba <__sfputs_r>
 801ff78:	3001      	adds	r0, #1
 801ff7a:	f000 80a9 	beq.w	80200d0 <_vfiprintf_r+0x1f0>
 801ff7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff80:	445a      	add	r2, fp
 801ff82:	9209      	str	r2, [sp, #36]	; 0x24
 801ff84:	f89a 3000 	ldrb.w	r3, [sl]
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	f000 80a1 	beq.w	80200d0 <_vfiprintf_r+0x1f0>
 801ff8e:	2300      	movs	r3, #0
 801ff90:	f04f 32ff 	mov.w	r2, #4294967295
 801ff94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ff98:	f10a 0a01 	add.w	sl, sl, #1
 801ff9c:	9304      	str	r3, [sp, #16]
 801ff9e:	9307      	str	r3, [sp, #28]
 801ffa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ffa4:	931a      	str	r3, [sp, #104]	; 0x68
 801ffa6:	4654      	mov	r4, sl
 801ffa8:	2205      	movs	r2, #5
 801ffaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ffae:	4854      	ldr	r0, [pc, #336]	; (8020100 <_vfiprintf_r+0x220>)
 801ffb0:	f7e0 f936 	bl	8000220 <memchr>
 801ffb4:	9a04      	ldr	r2, [sp, #16]
 801ffb6:	b9d8      	cbnz	r0, 801fff0 <_vfiprintf_r+0x110>
 801ffb8:	06d1      	lsls	r1, r2, #27
 801ffba:	bf44      	itt	mi
 801ffbc:	2320      	movmi	r3, #32
 801ffbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ffc2:	0713      	lsls	r3, r2, #28
 801ffc4:	bf44      	itt	mi
 801ffc6:	232b      	movmi	r3, #43	; 0x2b
 801ffc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ffcc:	f89a 3000 	ldrb.w	r3, [sl]
 801ffd0:	2b2a      	cmp	r3, #42	; 0x2a
 801ffd2:	d015      	beq.n	8020000 <_vfiprintf_r+0x120>
 801ffd4:	9a07      	ldr	r2, [sp, #28]
 801ffd6:	4654      	mov	r4, sl
 801ffd8:	2000      	movs	r0, #0
 801ffda:	f04f 0c0a 	mov.w	ip, #10
 801ffde:	4621      	mov	r1, r4
 801ffe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ffe4:	3b30      	subs	r3, #48	; 0x30
 801ffe6:	2b09      	cmp	r3, #9
 801ffe8:	d94d      	bls.n	8020086 <_vfiprintf_r+0x1a6>
 801ffea:	b1b0      	cbz	r0, 802001a <_vfiprintf_r+0x13a>
 801ffec:	9207      	str	r2, [sp, #28]
 801ffee:	e014      	b.n	802001a <_vfiprintf_r+0x13a>
 801fff0:	eba0 0308 	sub.w	r3, r0, r8
 801fff4:	fa09 f303 	lsl.w	r3, r9, r3
 801fff8:	4313      	orrs	r3, r2
 801fffa:	9304      	str	r3, [sp, #16]
 801fffc:	46a2      	mov	sl, r4
 801fffe:	e7d2      	b.n	801ffa6 <_vfiprintf_r+0xc6>
 8020000:	9b03      	ldr	r3, [sp, #12]
 8020002:	1d19      	adds	r1, r3, #4
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	9103      	str	r1, [sp, #12]
 8020008:	2b00      	cmp	r3, #0
 802000a:	bfbb      	ittet	lt
 802000c:	425b      	neglt	r3, r3
 802000e:	f042 0202 	orrlt.w	r2, r2, #2
 8020012:	9307      	strge	r3, [sp, #28]
 8020014:	9307      	strlt	r3, [sp, #28]
 8020016:	bfb8      	it	lt
 8020018:	9204      	strlt	r2, [sp, #16]
 802001a:	7823      	ldrb	r3, [r4, #0]
 802001c:	2b2e      	cmp	r3, #46	; 0x2e
 802001e:	d10c      	bne.n	802003a <_vfiprintf_r+0x15a>
 8020020:	7863      	ldrb	r3, [r4, #1]
 8020022:	2b2a      	cmp	r3, #42	; 0x2a
 8020024:	d134      	bne.n	8020090 <_vfiprintf_r+0x1b0>
 8020026:	9b03      	ldr	r3, [sp, #12]
 8020028:	1d1a      	adds	r2, r3, #4
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	9203      	str	r2, [sp, #12]
 802002e:	2b00      	cmp	r3, #0
 8020030:	bfb8      	it	lt
 8020032:	f04f 33ff 	movlt.w	r3, #4294967295
 8020036:	3402      	adds	r4, #2
 8020038:	9305      	str	r3, [sp, #20]
 802003a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8020110 <_vfiprintf_r+0x230>
 802003e:	7821      	ldrb	r1, [r4, #0]
 8020040:	2203      	movs	r2, #3
 8020042:	4650      	mov	r0, sl
 8020044:	f7e0 f8ec 	bl	8000220 <memchr>
 8020048:	b138      	cbz	r0, 802005a <_vfiprintf_r+0x17a>
 802004a:	9b04      	ldr	r3, [sp, #16]
 802004c:	eba0 000a 	sub.w	r0, r0, sl
 8020050:	2240      	movs	r2, #64	; 0x40
 8020052:	4082      	lsls	r2, r0
 8020054:	4313      	orrs	r3, r2
 8020056:	3401      	adds	r4, #1
 8020058:	9304      	str	r3, [sp, #16]
 802005a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802005e:	4829      	ldr	r0, [pc, #164]	; (8020104 <_vfiprintf_r+0x224>)
 8020060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020064:	2206      	movs	r2, #6
 8020066:	f7e0 f8db 	bl	8000220 <memchr>
 802006a:	2800      	cmp	r0, #0
 802006c:	d03f      	beq.n	80200ee <_vfiprintf_r+0x20e>
 802006e:	4b26      	ldr	r3, [pc, #152]	; (8020108 <_vfiprintf_r+0x228>)
 8020070:	bb1b      	cbnz	r3, 80200ba <_vfiprintf_r+0x1da>
 8020072:	9b03      	ldr	r3, [sp, #12]
 8020074:	3307      	adds	r3, #7
 8020076:	f023 0307 	bic.w	r3, r3, #7
 802007a:	3308      	adds	r3, #8
 802007c:	9303      	str	r3, [sp, #12]
 802007e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020080:	443b      	add	r3, r7
 8020082:	9309      	str	r3, [sp, #36]	; 0x24
 8020084:	e768      	b.n	801ff58 <_vfiprintf_r+0x78>
 8020086:	fb0c 3202 	mla	r2, ip, r2, r3
 802008a:	460c      	mov	r4, r1
 802008c:	2001      	movs	r0, #1
 802008e:	e7a6      	b.n	801ffde <_vfiprintf_r+0xfe>
 8020090:	2300      	movs	r3, #0
 8020092:	3401      	adds	r4, #1
 8020094:	9305      	str	r3, [sp, #20]
 8020096:	4619      	mov	r1, r3
 8020098:	f04f 0c0a 	mov.w	ip, #10
 802009c:	4620      	mov	r0, r4
 802009e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80200a2:	3a30      	subs	r2, #48	; 0x30
 80200a4:	2a09      	cmp	r2, #9
 80200a6:	d903      	bls.n	80200b0 <_vfiprintf_r+0x1d0>
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d0c6      	beq.n	802003a <_vfiprintf_r+0x15a>
 80200ac:	9105      	str	r1, [sp, #20]
 80200ae:	e7c4      	b.n	802003a <_vfiprintf_r+0x15a>
 80200b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80200b4:	4604      	mov	r4, r0
 80200b6:	2301      	movs	r3, #1
 80200b8:	e7f0      	b.n	802009c <_vfiprintf_r+0x1bc>
 80200ba:	ab03      	add	r3, sp, #12
 80200bc:	9300      	str	r3, [sp, #0]
 80200be:	462a      	mov	r2, r5
 80200c0:	4b12      	ldr	r3, [pc, #72]	; (802010c <_vfiprintf_r+0x22c>)
 80200c2:	a904      	add	r1, sp, #16
 80200c4:	4630      	mov	r0, r6
 80200c6:	f7fd fd11 	bl	801daec <_printf_float>
 80200ca:	4607      	mov	r7, r0
 80200cc:	1c78      	adds	r0, r7, #1
 80200ce:	d1d6      	bne.n	802007e <_vfiprintf_r+0x19e>
 80200d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80200d2:	07d9      	lsls	r1, r3, #31
 80200d4:	d405      	bmi.n	80200e2 <_vfiprintf_r+0x202>
 80200d6:	89ab      	ldrh	r3, [r5, #12]
 80200d8:	059a      	lsls	r2, r3, #22
 80200da:	d402      	bmi.n	80200e2 <_vfiprintf_r+0x202>
 80200dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80200de:	f7fe fa6e 	bl	801e5be <__retarget_lock_release_recursive>
 80200e2:	89ab      	ldrh	r3, [r5, #12]
 80200e4:	065b      	lsls	r3, r3, #25
 80200e6:	f53f af1d 	bmi.w	801ff24 <_vfiprintf_r+0x44>
 80200ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80200ec:	e71c      	b.n	801ff28 <_vfiprintf_r+0x48>
 80200ee:	ab03      	add	r3, sp, #12
 80200f0:	9300      	str	r3, [sp, #0]
 80200f2:	462a      	mov	r2, r5
 80200f4:	4b05      	ldr	r3, [pc, #20]	; (802010c <_vfiprintf_r+0x22c>)
 80200f6:	a904      	add	r1, sp, #16
 80200f8:	4630      	mov	r0, r6
 80200fa:	f7fd ff9b 	bl	801e034 <_printf_i>
 80200fe:	e7e4      	b.n	80200ca <_vfiprintf_r+0x1ea>
 8020100:	08023a3c 	.word	0x08023a3c
 8020104:	08023a46 	.word	0x08023a46
 8020108:	0801daed 	.word	0x0801daed
 802010c:	0801febb 	.word	0x0801febb
 8020110:	08023a42 	.word	0x08023a42

08020114 <__sflush_r>:
 8020114:	898a      	ldrh	r2, [r1, #12]
 8020116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802011a:	4605      	mov	r5, r0
 802011c:	0710      	lsls	r0, r2, #28
 802011e:	460c      	mov	r4, r1
 8020120:	d458      	bmi.n	80201d4 <__sflush_r+0xc0>
 8020122:	684b      	ldr	r3, [r1, #4]
 8020124:	2b00      	cmp	r3, #0
 8020126:	dc05      	bgt.n	8020134 <__sflush_r+0x20>
 8020128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802012a:	2b00      	cmp	r3, #0
 802012c:	dc02      	bgt.n	8020134 <__sflush_r+0x20>
 802012e:	2000      	movs	r0, #0
 8020130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020136:	2e00      	cmp	r6, #0
 8020138:	d0f9      	beq.n	802012e <__sflush_r+0x1a>
 802013a:	2300      	movs	r3, #0
 802013c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020140:	682f      	ldr	r7, [r5, #0]
 8020142:	6a21      	ldr	r1, [r4, #32]
 8020144:	602b      	str	r3, [r5, #0]
 8020146:	d032      	beq.n	80201ae <__sflush_r+0x9a>
 8020148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802014a:	89a3      	ldrh	r3, [r4, #12]
 802014c:	075a      	lsls	r2, r3, #29
 802014e:	d505      	bpl.n	802015c <__sflush_r+0x48>
 8020150:	6863      	ldr	r3, [r4, #4]
 8020152:	1ac0      	subs	r0, r0, r3
 8020154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020156:	b10b      	cbz	r3, 802015c <__sflush_r+0x48>
 8020158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802015a:	1ac0      	subs	r0, r0, r3
 802015c:	2300      	movs	r3, #0
 802015e:	4602      	mov	r2, r0
 8020160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020162:	6a21      	ldr	r1, [r4, #32]
 8020164:	4628      	mov	r0, r5
 8020166:	47b0      	blx	r6
 8020168:	1c43      	adds	r3, r0, #1
 802016a:	89a3      	ldrh	r3, [r4, #12]
 802016c:	d106      	bne.n	802017c <__sflush_r+0x68>
 802016e:	6829      	ldr	r1, [r5, #0]
 8020170:	291d      	cmp	r1, #29
 8020172:	d82b      	bhi.n	80201cc <__sflush_r+0xb8>
 8020174:	4a29      	ldr	r2, [pc, #164]	; (802021c <__sflush_r+0x108>)
 8020176:	410a      	asrs	r2, r1
 8020178:	07d6      	lsls	r6, r2, #31
 802017a:	d427      	bmi.n	80201cc <__sflush_r+0xb8>
 802017c:	2200      	movs	r2, #0
 802017e:	6062      	str	r2, [r4, #4]
 8020180:	04d9      	lsls	r1, r3, #19
 8020182:	6922      	ldr	r2, [r4, #16]
 8020184:	6022      	str	r2, [r4, #0]
 8020186:	d504      	bpl.n	8020192 <__sflush_r+0x7e>
 8020188:	1c42      	adds	r2, r0, #1
 802018a:	d101      	bne.n	8020190 <__sflush_r+0x7c>
 802018c:	682b      	ldr	r3, [r5, #0]
 802018e:	b903      	cbnz	r3, 8020192 <__sflush_r+0x7e>
 8020190:	6560      	str	r0, [r4, #84]	; 0x54
 8020192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020194:	602f      	str	r7, [r5, #0]
 8020196:	2900      	cmp	r1, #0
 8020198:	d0c9      	beq.n	802012e <__sflush_r+0x1a>
 802019a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802019e:	4299      	cmp	r1, r3
 80201a0:	d002      	beq.n	80201a8 <__sflush_r+0x94>
 80201a2:	4628      	mov	r0, r5
 80201a4:	f7ff f89e 	bl	801f2e4 <_free_r>
 80201a8:	2000      	movs	r0, #0
 80201aa:	6360      	str	r0, [r4, #52]	; 0x34
 80201ac:	e7c0      	b.n	8020130 <__sflush_r+0x1c>
 80201ae:	2301      	movs	r3, #1
 80201b0:	4628      	mov	r0, r5
 80201b2:	47b0      	blx	r6
 80201b4:	1c41      	adds	r1, r0, #1
 80201b6:	d1c8      	bne.n	802014a <__sflush_r+0x36>
 80201b8:	682b      	ldr	r3, [r5, #0]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d0c5      	beq.n	802014a <__sflush_r+0x36>
 80201be:	2b1d      	cmp	r3, #29
 80201c0:	d001      	beq.n	80201c6 <__sflush_r+0xb2>
 80201c2:	2b16      	cmp	r3, #22
 80201c4:	d101      	bne.n	80201ca <__sflush_r+0xb6>
 80201c6:	602f      	str	r7, [r5, #0]
 80201c8:	e7b1      	b.n	802012e <__sflush_r+0x1a>
 80201ca:	89a3      	ldrh	r3, [r4, #12]
 80201cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80201d0:	81a3      	strh	r3, [r4, #12]
 80201d2:	e7ad      	b.n	8020130 <__sflush_r+0x1c>
 80201d4:	690f      	ldr	r7, [r1, #16]
 80201d6:	2f00      	cmp	r7, #0
 80201d8:	d0a9      	beq.n	802012e <__sflush_r+0x1a>
 80201da:	0793      	lsls	r3, r2, #30
 80201dc:	680e      	ldr	r6, [r1, #0]
 80201de:	bf08      	it	eq
 80201e0:	694b      	ldreq	r3, [r1, #20]
 80201e2:	600f      	str	r7, [r1, #0]
 80201e4:	bf18      	it	ne
 80201e6:	2300      	movne	r3, #0
 80201e8:	eba6 0807 	sub.w	r8, r6, r7
 80201ec:	608b      	str	r3, [r1, #8]
 80201ee:	f1b8 0f00 	cmp.w	r8, #0
 80201f2:	dd9c      	ble.n	802012e <__sflush_r+0x1a>
 80201f4:	6a21      	ldr	r1, [r4, #32]
 80201f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80201f8:	4643      	mov	r3, r8
 80201fa:	463a      	mov	r2, r7
 80201fc:	4628      	mov	r0, r5
 80201fe:	47b0      	blx	r6
 8020200:	2800      	cmp	r0, #0
 8020202:	dc06      	bgt.n	8020212 <__sflush_r+0xfe>
 8020204:	89a3      	ldrh	r3, [r4, #12]
 8020206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802020a:	81a3      	strh	r3, [r4, #12]
 802020c:	f04f 30ff 	mov.w	r0, #4294967295
 8020210:	e78e      	b.n	8020130 <__sflush_r+0x1c>
 8020212:	4407      	add	r7, r0
 8020214:	eba8 0800 	sub.w	r8, r8, r0
 8020218:	e7e9      	b.n	80201ee <__sflush_r+0xda>
 802021a:	bf00      	nop
 802021c:	dfbffffe 	.word	0xdfbffffe

08020220 <_fflush_r>:
 8020220:	b538      	push	{r3, r4, r5, lr}
 8020222:	690b      	ldr	r3, [r1, #16]
 8020224:	4605      	mov	r5, r0
 8020226:	460c      	mov	r4, r1
 8020228:	b913      	cbnz	r3, 8020230 <_fflush_r+0x10>
 802022a:	2500      	movs	r5, #0
 802022c:	4628      	mov	r0, r5
 802022e:	bd38      	pop	{r3, r4, r5, pc}
 8020230:	b118      	cbz	r0, 802023a <_fflush_r+0x1a>
 8020232:	6a03      	ldr	r3, [r0, #32]
 8020234:	b90b      	cbnz	r3, 802023a <_fflush_r+0x1a>
 8020236:	f7fe f899 	bl	801e36c <__sinit>
 802023a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802023e:	2b00      	cmp	r3, #0
 8020240:	d0f3      	beq.n	802022a <_fflush_r+0xa>
 8020242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020244:	07d0      	lsls	r0, r2, #31
 8020246:	d404      	bmi.n	8020252 <_fflush_r+0x32>
 8020248:	0599      	lsls	r1, r3, #22
 802024a:	d402      	bmi.n	8020252 <_fflush_r+0x32>
 802024c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802024e:	f7fe f9b5 	bl	801e5bc <__retarget_lock_acquire_recursive>
 8020252:	4628      	mov	r0, r5
 8020254:	4621      	mov	r1, r4
 8020256:	f7ff ff5d 	bl	8020114 <__sflush_r>
 802025a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802025c:	07da      	lsls	r2, r3, #31
 802025e:	4605      	mov	r5, r0
 8020260:	d4e4      	bmi.n	802022c <_fflush_r+0xc>
 8020262:	89a3      	ldrh	r3, [r4, #12]
 8020264:	059b      	lsls	r3, r3, #22
 8020266:	d4e1      	bmi.n	802022c <_fflush_r+0xc>
 8020268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802026a:	f7fe f9a8 	bl	801e5be <__retarget_lock_release_recursive>
 802026e:	e7dd      	b.n	802022c <_fflush_r+0xc>

08020270 <__swbuf_r>:
 8020270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020272:	460e      	mov	r6, r1
 8020274:	4614      	mov	r4, r2
 8020276:	4605      	mov	r5, r0
 8020278:	b118      	cbz	r0, 8020282 <__swbuf_r+0x12>
 802027a:	6a03      	ldr	r3, [r0, #32]
 802027c:	b90b      	cbnz	r3, 8020282 <__swbuf_r+0x12>
 802027e:	f7fe f875 	bl	801e36c <__sinit>
 8020282:	69a3      	ldr	r3, [r4, #24]
 8020284:	60a3      	str	r3, [r4, #8]
 8020286:	89a3      	ldrh	r3, [r4, #12]
 8020288:	071a      	lsls	r2, r3, #28
 802028a:	d525      	bpl.n	80202d8 <__swbuf_r+0x68>
 802028c:	6923      	ldr	r3, [r4, #16]
 802028e:	b31b      	cbz	r3, 80202d8 <__swbuf_r+0x68>
 8020290:	6823      	ldr	r3, [r4, #0]
 8020292:	6922      	ldr	r2, [r4, #16]
 8020294:	1a98      	subs	r0, r3, r2
 8020296:	6963      	ldr	r3, [r4, #20]
 8020298:	b2f6      	uxtb	r6, r6
 802029a:	4283      	cmp	r3, r0
 802029c:	4637      	mov	r7, r6
 802029e:	dc04      	bgt.n	80202aa <__swbuf_r+0x3a>
 80202a0:	4621      	mov	r1, r4
 80202a2:	4628      	mov	r0, r5
 80202a4:	f7ff ffbc 	bl	8020220 <_fflush_r>
 80202a8:	b9e0      	cbnz	r0, 80202e4 <__swbuf_r+0x74>
 80202aa:	68a3      	ldr	r3, [r4, #8]
 80202ac:	3b01      	subs	r3, #1
 80202ae:	60a3      	str	r3, [r4, #8]
 80202b0:	6823      	ldr	r3, [r4, #0]
 80202b2:	1c5a      	adds	r2, r3, #1
 80202b4:	6022      	str	r2, [r4, #0]
 80202b6:	701e      	strb	r6, [r3, #0]
 80202b8:	6962      	ldr	r2, [r4, #20]
 80202ba:	1c43      	adds	r3, r0, #1
 80202bc:	429a      	cmp	r2, r3
 80202be:	d004      	beq.n	80202ca <__swbuf_r+0x5a>
 80202c0:	89a3      	ldrh	r3, [r4, #12]
 80202c2:	07db      	lsls	r3, r3, #31
 80202c4:	d506      	bpl.n	80202d4 <__swbuf_r+0x64>
 80202c6:	2e0a      	cmp	r6, #10
 80202c8:	d104      	bne.n	80202d4 <__swbuf_r+0x64>
 80202ca:	4621      	mov	r1, r4
 80202cc:	4628      	mov	r0, r5
 80202ce:	f7ff ffa7 	bl	8020220 <_fflush_r>
 80202d2:	b938      	cbnz	r0, 80202e4 <__swbuf_r+0x74>
 80202d4:	4638      	mov	r0, r7
 80202d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80202d8:	4621      	mov	r1, r4
 80202da:	4628      	mov	r0, r5
 80202dc:	f000 f806 	bl	80202ec <__swsetup_r>
 80202e0:	2800      	cmp	r0, #0
 80202e2:	d0d5      	beq.n	8020290 <__swbuf_r+0x20>
 80202e4:	f04f 37ff 	mov.w	r7, #4294967295
 80202e8:	e7f4      	b.n	80202d4 <__swbuf_r+0x64>
	...

080202ec <__swsetup_r>:
 80202ec:	b538      	push	{r3, r4, r5, lr}
 80202ee:	4b2a      	ldr	r3, [pc, #168]	; (8020398 <__swsetup_r+0xac>)
 80202f0:	4605      	mov	r5, r0
 80202f2:	6818      	ldr	r0, [r3, #0]
 80202f4:	460c      	mov	r4, r1
 80202f6:	b118      	cbz	r0, 8020300 <__swsetup_r+0x14>
 80202f8:	6a03      	ldr	r3, [r0, #32]
 80202fa:	b90b      	cbnz	r3, 8020300 <__swsetup_r+0x14>
 80202fc:	f7fe f836 	bl	801e36c <__sinit>
 8020300:	89a3      	ldrh	r3, [r4, #12]
 8020302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020306:	0718      	lsls	r0, r3, #28
 8020308:	d422      	bmi.n	8020350 <__swsetup_r+0x64>
 802030a:	06d9      	lsls	r1, r3, #27
 802030c:	d407      	bmi.n	802031e <__swsetup_r+0x32>
 802030e:	2309      	movs	r3, #9
 8020310:	602b      	str	r3, [r5, #0]
 8020312:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020316:	81a3      	strh	r3, [r4, #12]
 8020318:	f04f 30ff 	mov.w	r0, #4294967295
 802031c:	e034      	b.n	8020388 <__swsetup_r+0x9c>
 802031e:	0758      	lsls	r0, r3, #29
 8020320:	d512      	bpl.n	8020348 <__swsetup_r+0x5c>
 8020322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020324:	b141      	cbz	r1, 8020338 <__swsetup_r+0x4c>
 8020326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802032a:	4299      	cmp	r1, r3
 802032c:	d002      	beq.n	8020334 <__swsetup_r+0x48>
 802032e:	4628      	mov	r0, r5
 8020330:	f7fe ffd8 	bl	801f2e4 <_free_r>
 8020334:	2300      	movs	r3, #0
 8020336:	6363      	str	r3, [r4, #52]	; 0x34
 8020338:	89a3      	ldrh	r3, [r4, #12]
 802033a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802033e:	81a3      	strh	r3, [r4, #12]
 8020340:	2300      	movs	r3, #0
 8020342:	6063      	str	r3, [r4, #4]
 8020344:	6923      	ldr	r3, [r4, #16]
 8020346:	6023      	str	r3, [r4, #0]
 8020348:	89a3      	ldrh	r3, [r4, #12]
 802034a:	f043 0308 	orr.w	r3, r3, #8
 802034e:	81a3      	strh	r3, [r4, #12]
 8020350:	6923      	ldr	r3, [r4, #16]
 8020352:	b94b      	cbnz	r3, 8020368 <__swsetup_r+0x7c>
 8020354:	89a3      	ldrh	r3, [r4, #12]
 8020356:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802035a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802035e:	d003      	beq.n	8020368 <__swsetup_r+0x7c>
 8020360:	4621      	mov	r1, r4
 8020362:	4628      	mov	r0, r5
 8020364:	f000 f912 	bl	802058c <__smakebuf_r>
 8020368:	89a0      	ldrh	r0, [r4, #12]
 802036a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802036e:	f010 0301 	ands.w	r3, r0, #1
 8020372:	d00a      	beq.n	802038a <__swsetup_r+0x9e>
 8020374:	2300      	movs	r3, #0
 8020376:	60a3      	str	r3, [r4, #8]
 8020378:	6963      	ldr	r3, [r4, #20]
 802037a:	425b      	negs	r3, r3
 802037c:	61a3      	str	r3, [r4, #24]
 802037e:	6923      	ldr	r3, [r4, #16]
 8020380:	b943      	cbnz	r3, 8020394 <__swsetup_r+0xa8>
 8020382:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020386:	d1c4      	bne.n	8020312 <__swsetup_r+0x26>
 8020388:	bd38      	pop	{r3, r4, r5, pc}
 802038a:	0781      	lsls	r1, r0, #30
 802038c:	bf58      	it	pl
 802038e:	6963      	ldrpl	r3, [r4, #20]
 8020390:	60a3      	str	r3, [r4, #8]
 8020392:	e7f4      	b.n	802037e <__swsetup_r+0x92>
 8020394:	2000      	movs	r0, #0
 8020396:	e7f7      	b.n	8020388 <__swsetup_r+0x9c>
 8020398:	200001e8 	.word	0x200001e8

0802039c <memmove>:
 802039c:	4288      	cmp	r0, r1
 802039e:	b510      	push	{r4, lr}
 80203a0:	eb01 0402 	add.w	r4, r1, r2
 80203a4:	d902      	bls.n	80203ac <memmove+0x10>
 80203a6:	4284      	cmp	r4, r0
 80203a8:	4623      	mov	r3, r4
 80203aa:	d807      	bhi.n	80203bc <memmove+0x20>
 80203ac:	1e43      	subs	r3, r0, #1
 80203ae:	42a1      	cmp	r1, r4
 80203b0:	d008      	beq.n	80203c4 <memmove+0x28>
 80203b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80203b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80203ba:	e7f8      	b.n	80203ae <memmove+0x12>
 80203bc:	4402      	add	r2, r0
 80203be:	4601      	mov	r1, r0
 80203c0:	428a      	cmp	r2, r1
 80203c2:	d100      	bne.n	80203c6 <memmove+0x2a>
 80203c4:	bd10      	pop	{r4, pc}
 80203c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80203ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80203ce:	e7f7      	b.n	80203c0 <memmove+0x24>

080203d0 <_raise_r>:
 80203d0:	291f      	cmp	r1, #31
 80203d2:	b538      	push	{r3, r4, r5, lr}
 80203d4:	4604      	mov	r4, r0
 80203d6:	460d      	mov	r5, r1
 80203d8:	d904      	bls.n	80203e4 <_raise_r+0x14>
 80203da:	2316      	movs	r3, #22
 80203dc:	6003      	str	r3, [r0, #0]
 80203de:	f04f 30ff 	mov.w	r0, #4294967295
 80203e2:	bd38      	pop	{r3, r4, r5, pc}
 80203e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80203e6:	b112      	cbz	r2, 80203ee <_raise_r+0x1e>
 80203e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80203ec:	b94b      	cbnz	r3, 8020402 <_raise_r+0x32>
 80203ee:	4620      	mov	r0, r4
 80203f0:	f000 f830 	bl	8020454 <_getpid_r>
 80203f4:	462a      	mov	r2, r5
 80203f6:	4601      	mov	r1, r0
 80203f8:	4620      	mov	r0, r4
 80203fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203fe:	f000 b817 	b.w	8020430 <_kill_r>
 8020402:	2b01      	cmp	r3, #1
 8020404:	d00a      	beq.n	802041c <_raise_r+0x4c>
 8020406:	1c59      	adds	r1, r3, #1
 8020408:	d103      	bne.n	8020412 <_raise_r+0x42>
 802040a:	2316      	movs	r3, #22
 802040c:	6003      	str	r3, [r0, #0]
 802040e:	2001      	movs	r0, #1
 8020410:	e7e7      	b.n	80203e2 <_raise_r+0x12>
 8020412:	2400      	movs	r4, #0
 8020414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020418:	4628      	mov	r0, r5
 802041a:	4798      	blx	r3
 802041c:	2000      	movs	r0, #0
 802041e:	e7e0      	b.n	80203e2 <_raise_r+0x12>

08020420 <raise>:
 8020420:	4b02      	ldr	r3, [pc, #8]	; (802042c <raise+0xc>)
 8020422:	4601      	mov	r1, r0
 8020424:	6818      	ldr	r0, [r3, #0]
 8020426:	f7ff bfd3 	b.w	80203d0 <_raise_r>
 802042a:	bf00      	nop
 802042c:	200001e8 	.word	0x200001e8

08020430 <_kill_r>:
 8020430:	b538      	push	{r3, r4, r5, lr}
 8020432:	4d07      	ldr	r5, [pc, #28]	; (8020450 <_kill_r+0x20>)
 8020434:	2300      	movs	r3, #0
 8020436:	4604      	mov	r4, r0
 8020438:	4608      	mov	r0, r1
 802043a:	4611      	mov	r1, r2
 802043c:	602b      	str	r3, [r5, #0]
 802043e:	f7e5 f9a3 	bl	8005788 <_kill>
 8020442:	1c43      	adds	r3, r0, #1
 8020444:	d102      	bne.n	802044c <_kill_r+0x1c>
 8020446:	682b      	ldr	r3, [r5, #0]
 8020448:	b103      	cbz	r3, 802044c <_kill_r+0x1c>
 802044a:	6023      	str	r3, [r4, #0]
 802044c:	bd38      	pop	{r3, r4, r5, pc}
 802044e:	bf00      	nop
 8020450:	20016a68 	.word	0x20016a68

08020454 <_getpid_r>:
 8020454:	f7e5 b990 	b.w	8005778 <_getpid>

08020458 <_sbrk_r>:
 8020458:	b538      	push	{r3, r4, r5, lr}
 802045a:	4d06      	ldr	r5, [pc, #24]	; (8020474 <_sbrk_r+0x1c>)
 802045c:	2300      	movs	r3, #0
 802045e:	4604      	mov	r4, r0
 8020460:	4608      	mov	r0, r1
 8020462:	602b      	str	r3, [r5, #0]
 8020464:	f7e5 f9fc 	bl	8005860 <_sbrk>
 8020468:	1c43      	adds	r3, r0, #1
 802046a:	d102      	bne.n	8020472 <_sbrk_r+0x1a>
 802046c:	682b      	ldr	r3, [r5, #0]
 802046e:	b103      	cbz	r3, 8020472 <_sbrk_r+0x1a>
 8020470:	6023      	str	r3, [r4, #0]
 8020472:	bd38      	pop	{r3, r4, r5, pc}
 8020474:	20016a68 	.word	0x20016a68

08020478 <_calloc_r>:
 8020478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802047a:	fba1 2402 	umull	r2, r4, r1, r2
 802047e:	b94c      	cbnz	r4, 8020494 <_calloc_r+0x1c>
 8020480:	4611      	mov	r1, r2
 8020482:	9201      	str	r2, [sp, #4]
 8020484:	f7fe ffa2 	bl	801f3cc <_malloc_r>
 8020488:	9a01      	ldr	r2, [sp, #4]
 802048a:	4605      	mov	r5, r0
 802048c:	b930      	cbnz	r0, 802049c <_calloc_r+0x24>
 802048e:	4628      	mov	r0, r5
 8020490:	b003      	add	sp, #12
 8020492:	bd30      	pop	{r4, r5, pc}
 8020494:	220c      	movs	r2, #12
 8020496:	6002      	str	r2, [r0, #0]
 8020498:	2500      	movs	r5, #0
 802049a:	e7f8      	b.n	802048e <_calloc_r+0x16>
 802049c:	4621      	mov	r1, r4
 802049e:	f7fe f810 	bl	801e4c2 <memset>
 80204a2:	e7f4      	b.n	802048e <_calloc_r+0x16>

080204a4 <__ascii_mbtowc>:
 80204a4:	b082      	sub	sp, #8
 80204a6:	b901      	cbnz	r1, 80204aa <__ascii_mbtowc+0x6>
 80204a8:	a901      	add	r1, sp, #4
 80204aa:	b142      	cbz	r2, 80204be <__ascii_mbtowc+0x1a>
 80204ac:	b14b      	cbz	r3, 80204c2 <__ascii_mbtowc+0x1e>
 80204ae:	7813      	ldrb	r3, [r2, #0]
 80204b0:	600b      	str	r3, [r1, #0]
 80204b2:	7812      	ldrb	r2, [r2, #0]
 80204b4:	1e10      	subs	r0, r2, #0
 80204b6:	bf18      	it	ne
 80204b8:	2001      	movne	r0, #1
 80204ba:	b002      	add	sp, #8
 80204bc:	4770      	bx	lr
 80204be:	4610      	mov	r0, r2
 80204c0:	e7fb      	b.n	80204ba <__ascii_mbtowc+0x16>
 80204c2:	f06f 0001 	mvn.w	r0, #1
 80204c6:	e7f8      	b.n	80204ba <__ascii_mbtowc+0x16>

080204c8 <_realloc_r>:
 80204c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204cc:	4680      	mov	r8, r0
 80204ce:	4614      	mov	r4, r2
 80204d0:	460e      	mov	r6, r1
 80204d2:	b921      	cbnz	r1, 80204de <_realloc_r+0x16>
 80204d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80204d8:	4611      	mov	r1, r2
 80204da:	f7fe bf77 	b.w	801f3cc <_malloc_r>
 80204de:	b92a      	cbnz	r2, 80204ec <_realloc_r+0x24>
 80204e0:	f7fe ff00 	bl	801f2e4 <_free_r>
 80204e4:	4625      	mov	r5, r4
 80204e6:	4628      	mov	r0, r5
 80204e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204ec:	f000 f8ac 	bl	8020648 <_malloc_usable_size_r>
 80204f0:	4284      	cmp	r4, r0
 80204f2:	4607      	mov	r7, r0
 80204f4:	d802      	bhi.n	80204fc <_realloc_r+0x34>
 80204f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80204fa:	d812      	bhi.n	8020522 <_realloc_r+0x5a>
 80204fc:	4621      	mov	r1, r4
 80204fe:	4640      	mov	r0, r8
 8020500:	f7fe ff64 	bl	801f3cc <_malloc_r>
 8020504:	4605      	mov	r5, r0
 8020506:	2800      	cmp	r0, #0
 8020508:	d0ed      	beq.n	80204e6 <_realloc_r+0x1e>
 802050a:	42bc      	cmp	r4, r7
 802050c:	4622      	mov	r2, r4
 802050e:	4631      	mov	r1, r6
 8020510:	bf28      	it	cs
 8020512:	463a      	movcs	r2, r7
 8020514:	f7fe f854 	bl	801e5c0 <memcpy>
 8020518:	4631      	mov	r1, r6
 802051a:	4640      	mov	r0, r8
 802051c:	f7fe fee2 	bl	801f2e4 <_free_r>
 8020520:	e7e1      	b.n	80204e6 <_realloc_r+0x1e>
 8020522:	4635      	mov	r5, r6
 8020524:	e7df      	b.n	80204e6 <_realloc_r+0x1e>

08020526 <__ascii_wctomb>:
 8020526:	b149      	cbz	r1, 802053c <__ascii_wctomb+0x16>
 8020528:	2aff      	cmp	r2, #255	; 0xff
 802052a:	bf85      	ittet	hi
 802052c:	238a      	movhi	r3, #138	; 0x8a
 802052e:	6003      	strhi	r3, [r0, #0]
 8020530:	700a      	strbls	r2, [r1, #0]
 8020532:	f04f 30ff 	movhi.w	r0, #4294967295
 8020536:	bf98      	it	ls
 8020538:	2001      	movls	r0, #1
 802053a:	4770      	bx	lr
 802053c:	4608      	mov	r0, r1
 802053e:	4770      	bx	lr

08020540 <__swhatbuf_r>:
 8020540:	b570      	push	{r4, r5, r6, lr}
 8020542:	460c      	mov	r4, r1
 8020544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020548:	2900      	cmp	r1, #0
 802054a:	b096      	sub	sp, #88	; 0x58
 802054c:	4615      	mov	r5, r2
 802054e:	461e      	mov	r6, r3
 8020550:	da0d      	bge.n	802056e <__swhatbuf_r+0x2e>
 8020552:	89a3      	ldrh	r3, [r4, #12]
 8020554:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020558:	f04f 0100 	mov.w	r1, #0
 802055c:	bf0c      	ite	eq
 802055e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020562:	2340      	movne	r3, #64	; 0x40
 8020564:	2000      	movs	r0, #0
 8020566:	6031      	str	r1, [r6, #0]
 8020568:	602b      	str	r3, [r5, #0]
 802056a:	b016      	add	sp, #88	; 0x58
 802056c:	bd70      	pop	{r4, r5, r6, pc}
 802056e:	466a      	mov	r2, sp
 8020570:	f000 f848 	bl	8020604 <_fstat_r>
 8020574:	2800      	cmp	r0, #0
 8020576:	dbec      	blt.n	8020552 <__swhatbuf_r+0x12>
 8020578:	9901      	ldr	r1, [sp, #4]
 802057a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802057e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8020582:	4259      	negs	r1, r3
 8020584:	4159      	adcs	r1, r3
 8020586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802058a:	e7eb      	b.n	8020564 <__swhatbuf_r+0x24>

0802058c <__smakebuf_r>:
 802058c:	898b      	ldrh	r3, [r1, #12]
 802058e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020590:	079d      	lsls	r5, r3, #30
 8020592:	4606      	mov	r6, r0
 8020594:	460c      	mov	r4, r1
 8020596:	d507      	bpl.n	80205a8 <__smakebuf_r+0x1c>
 8020598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802059c:	6023      	str	r3, [r4, #0]
 802059e:	6123      	str	r3, [r4, #16]
 80205a0:	2301      	movs	r3, #1
 80205a2:	6163      	str	r3, [r4, #20]
 80205a4:	b002      	add	sp, #8
 80205a6:	bd70      	pop	{r4, r5, r6, pc}
 80205a8:	ab01      	add	r3, sp, #4
 80205aa:	466a      	mov	r2, sp
 80205ac:	f7ff ffc8 	bl	8020540 <__swhatbuf_r>
 80205b0:	9900      	ldr	r1, [sp, #0]
 80205b2:	4605      	mov	r5, r0
 80205b4:	4630      	mov	r0, r6
 80205b6:	f7fe ff09 	bl	801f3cc <_malloc_r>
 80205ba:	b948      	cbnz	r0, 80205d0 <__smakebuf_r+0x44>
 80205bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80205c0:	059a      	lsls	r2, r3, #22
 80205c2:	d4ef      	bmi.n	80205a4 <__smakebuf_r+0x18>
 80205c4:	f023 0303 	bic.w	r3, r3, #3
 80205c8:	f043 0302 	orr.w	r3, r3, #2
 80205cc:	81a3      	strh	r3, [r4, #12]
 80205ce:	e7e3      	b.n	8020598 <__smakebuf_r+0xc>
 80205d0:	89a3      	ldrh	r3, [r4, #12]
 80205d2:	6020      	str	r0, [r4, #0]
 80205d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205d8:	81a3      	strh	r3, [r4, #12]
 80205da:	9b00      	ldr	r3, [sp, #0]
 80205dc:	6163      	str	r3, [r4, #20]
 80205de:	9b01      	ldr	r3, [sp, #4]
 80205e0:	6120      	str	r0, [r4, #16]
 80205e2:	b15b      	cbz	r3, 80205fc <__smakebuf_r+0x70>
 80205e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80205e8:	4630      	mov	r0, r6
 80205ea:	f000 f81d 	bl	8020628 <_isatty_r>
 80205ee:	b128      	cbz	r0, 80205fc <__smakebuf_r+0x70>
 80205f0:	89a3      	ldrh	r3, [r4, #12]
 80205f2:	f023 0303 	bic.w	r3, r3, #3
 80205f6:	f043 0301 	orr.w	r3, r3, #1
 80205fa:	81a3      	strh	r3, [r4, #12]
 80205fc:	89a3      	ldrh	r3, [r4, #12]
 80205fe:	431d      	orrs	r5, r3
 8020600:	81a5      	strh	r5, [r4, #12]
 8020602:	e7cf      	b.n	80205a4 <__smakebuf_r+0x18>

08020604 <_fstat_r>:
 8020604:	b538      	push	{r3, r4, r5, lr}
 8020606:	4d07      	ldr	r5, [pc, #28]	; (8020624 <_fstat_r+0x20>)
 8020608:	2300      	movs	r3, #0
 802060a:	4604      	mov	r4, r0
 802060c:	4608      	mov	r0, r1
 802060e:	4611      	mov	r1, r2
 8020610:	602b      	str	r3, [r5, #0]
 8020612:	f7e5 f8fc 	bl	800580e <_fstat>
 8020616:	1c43      	adds	r3, r0, #1
 8020618:	d102      	bne.n	8020620 <_fstat_r+0x1c>
 802061a:	682b      	ldr	r3, [r5, #0]
 802061c:	b103      	cbz	r3, 8020620 <_fstat_r+0x1c>
 802061e:	6023      	str	r3, [r4, #0]
 8020620:	bd38      	pop	{r3, r4, r5, pc}
 8020622:	bf00      	nop
 8020624:	20016a68 	.word	0x20016a68

08020628 <_isatty_r>:
 8020628:	b538      	push	{r3, r4, r5, lr}
 802062a:	4d06      	ldr	r5, [pc, #24]	; (8020644 <_isatty_r+0x1c>)
 802062c:	2300      	movs	r3, #0
 802062e:	4604      	mov	r4, r0
 8020630:	4608      	mov	r0, r1
 8020632:	602b      	str	r3, [r5, #0]
 8020634:	f7e5 f8fb 	bl	800582e <_isatty>
 8020638:	1c43      	adds	r3, r0, #1
 802063a:	d102      	bne.n	8020642 <_isatty_r+0x1a>
 802063c:	682b      	ldr	r3, [r5, #0]
 802063e:	b103      	cbz	r3, 8020642 <_isatty_r+0x1a>
 8020640:	6023      	str	r3, [r4, #0]
 8020642:	bd38      	pop	{r3, r4, r5, pc}
 8020644:	20016a68 	.word	0x20016a68

08020648 <_malloc_usable_size_r>:
 8020648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802064c:	1f18      	subs	r0, r3, #4
 802064e:	2b00      	cmp	r3, #0
 8020650:	bfbc      	itt	lt
 8020652:	580b      	ldrlt	r3, [r1, r0]
 8020654:	18c0      	addlt	r0, r0, r3
 8020656:	4770      	bx	lr

08020658 <sinf>:
 8020658:	ee10 3a10 	vmov	r3, s0
 802065c:	b507      	push	{r0, r1, r2, lr}
 802065e:	4a1f      	ldr	r2, [pc, #124]	; (80206dc <sinf+0x84>)
 8020660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020664:	4293      	cmp	r3, r2
 8020666:	dc07      	bgt.n	8020678 <sinf+0x20>
 8020668:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80206e0 <sinf+0x88>
 802066c:	2000      	movs	r0, #0
 802066e:	b003      	add	sp, #12
 8020670:	f85d eb04 	ldr.w	lr, [sp], #4
 8020674:	f000 b894 	b.w	80207a0 <__kernel_sinf>
 8020678:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802067c:	db04      	blt.n	8020688 <sinf+0x30>
 802067e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8020682:	b003      	add	sp, #12
 8020684:	f85d fb04 	ldr.w	pc, [sp], #4
 8020688:	4668      	mov	r0, sp
 802068a:	f000 f8d1 	bl	8020830 <__ieee754_rem_pio2f>
 802068e:	f000 0003 	and.w	r0, r0, #3
 8020692:	2801      	cmp	r0, #1
 8020694:	d00a      	beq.n	80206ac <sinf+0x54>
 8020696:	2802      	cmp	r0, #2
 8020698:	d00f      	beq.n	80206ba <sinf+0x62>
 802069a:	b9c0      	cbnz	r0, 80206ce <sinf+0x76>
 802069c:	eddd 0a01 	vldr	s1, [sp, #4]
 80206a0:	ed9d 0a00 	vldr	s0, [sp]
 80206a4:	2001      	movs	r0, #1
 80206a6:	f000 f87b 	bl	80207a0 <__kernel_sinf>
 80206aa:	e7ea      	b.n	8020682 <sinf+0x2a>
 80206ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80206b0:	ed9d 0a00 	vldr	s0, [sp]
 80206b4:	f000 f816 	bl	80206e4 <__kernel_cosf>
 80206b8:	e7e3      	b.n	8020682 <sinf+0x2a>
 80206ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80206be:	ed9d 0a00 	vldr	s0, [sp]
 80206c2:	2001      	movs	r0, #1
 80206c4:	f000 f86c 	bl	80207a0 <__kernel_sinf>
 80206c8:	eeb1 0a40 	vneg.f32	s0, s0
 80206cc:	e7d9      	b.n	8020682 <sinf+0x2a>
 80206ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80206d2:	ed9d 0a00 	vldr	s0, [sp]
 80206d6:	f000 f805 	bl	80206e4 <__kernel_cosf>
 80206da:	e7f5      	b.n	80206c8 <sinf+0x70>
 80206dc:	3f490fd8 	.word	0x3f490fd8
 80206e0:	00000000 	.word	0x00000000

080206e4 <__kernel_cosf>:
 80206e4:	ee10 3a10 	vmov	r3, s0
 80206e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80206ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80206f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80206f4:	da05      	bge.n	8020702 <__kernel_cosf+0x1e>
 80206f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80206fa:	ee17 2a90 	vmov	r2, s15
 80206fe:	2a00      	cmp	r2, #0
 8020700:	d03b      	beq.n	802077a <__kernel_cosf+0x96>
 8020702:	ee20 7a00 	vmul.f32	s14, s0, s0
 8020706:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020780 <__kernel_cosf+0x9c>
 802070a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8020784 <__kernel_cosf+0xa0>
 802070e:	4a1e      	ldr	r2, [pc, #120]	; (8020788 <__kernel_cosf+0xa4>)
 8020710:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020714:	4293      	cmp	r3, r2
 8020716:	eddf 7a1d 	vldr	s15, [pc, #116]	; 802078c <__kernel_cosf+0xa8>
 802071a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802071e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8020790 <__kernel_cosf+0xac>
 8020722:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020726:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8020794 <__kernel_cosf+0xb0>
 802072a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802072e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8020798 <__kernel_cosf+0xb4>
 8020732:	eea7 6a87 	vfma.f32	s12, s15, s14
 8020736:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802073a:	ee26 6a07 	vmul.f32	s12, s12, s14
 802073e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020742:	eee7 0a06 	vfma.f32	s1, s14, s12
 8020746:	ee67 7a27 	vmul.f32	s15, s14, s15
 802074a:	dc04      	bgt.n	8020756 <__kernel_cosf+0x72>
 802074c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020750:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8020754:	4770      	bx	lr
 8020756:	4a11      	ldr	r2, [pc, #68]	; (802079c <__kernel_cosf+0xb8>)
 8020758:	4293      	cmp	r3, r2
 802075a:	bfda      	itte	le
 802075c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8020760:	ee07 3a10 	vmovle	s14, r3
 8020764:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8020768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802076c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8020770:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020774:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020778:	4770      	bx	lr
 802077a:	eeb0 0a66 	vmov.f32	s0, s13
 802077e:	4770      	bx	lr
 8020780:	ad47d74e 	.word	0xad47d74e
 8020784:	310f74f6 	.word	0x310f74f6
 8020788:	3e999999 	.word	0x3e999999
 802078c:	b493f27c 	.word	0xb493f27c
 8020790:	37d00d01 	.word	0x37d00d01
 8020794:	bab60b61 	.word	0xbab60b61
 8020798:	3d2aaaab 	.word	0x3d2aaaab
 802079c:	3f480000 	.word	0x3f480000

080207a0 <__kernel_sinf>:
 80207a0:	ee10 3a10 	vmov	r3, s0
 80207a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80207a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80207ac:	da04      	bge.n	80207b8 <__kernel_sinf+0x18>
 80207ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80207b2:	ee17 3a90 	vmov	r3, s15
 80207b6:	b35b      	cbz	r3, 8020810 <__kernel_sinf+0x70>
 80207b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80207bc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8020814 <__kernel_sinf+0x74>
 80207c0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8020818 <__kernel_sinf+0x78>
 80207c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80207c8:	eddf 7a14 	vldr	s15, [pc, #80]	; 802081c <__kernel_sinf+0x7c>
 80207cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80207d0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8020820 <__kernel_sinf+0x80>
 80207d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80207d8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8020824 <__kernel_sinf+0x84>
 80207dc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80207e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80207e4:	b930      	cbnz	r0, 80207f4 <__kernel_sinf+0x54>
 80207e6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8020828 <__kernel_sinf+0x88>
 80207ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 80207ee:	eea6 0a26 	vfma.f32	s0, s12, s13
 80207f2:	4770      	bx	lr
 80207f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80207f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80207fc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8020800:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8020804:	eddf 7a09 	vldr	s15, [pc, #36]	; 802082c <__kernel_sinf+0x8c>
 8020808:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802080c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8020810:	4770      	bx	lr
 8020812:	bf00      	nop
 8020814:	2f2ec9d3 	.word	0x2f2ec9d3
 8020818:	b2d72f34 	.word	0xb2d72f34
 802081c:	3638ef1b 	.word	0x3638ef1b
 8020820:	b9500d01 	.word	0xb9500d01
 8020824:	3c088889 	.word	0x3c088889
 8020828:	be2aaaab 	.word	0xbe2aaaab
 802082c:	3e2aaaab 	.word	0x3e2aaaab

08020830 <__ieee754_rem_pio2f>:
 8020830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020832:	ee10 6a10 	vmov	r6, s0
 8020836:	4b86      	ldr	r3, [pc, #536]	; (8020a50 <__ieee754_rem_pio2f+0x220>)
 8020838:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802083c:	429d      	cmp	r5, r3
 802083e:	b087      	sub	sp, #28
 8020840:	4604      	mov	r4, r0
 8020842:	dc05      	bgt.n	8020850 <__ieee754_rem_pio2f+0x20>
 8020844:	2300      	movs	r3, #0
 8020846:	ed80 0a00 	vstr	s0, [r0]
 802084a:	6043      	str	r3, [r0, #4]
 802084c:	2000      	movs	r0, #0
 802084e:	e020      	b.n	8020892 <__ieee754_rem_pio2f+0x62>
 8020850:	4b80      	ldr	r3, [pc, #512]	; (8020a54 <__ieee754_rem_pio2f+0x224>)
 8020852:	429d      	cmp	r5, r3
 8020854:	dc38      	bgt.n	80208c8 <__ieee754_rem_pio2f+0x98>
 8020856:	2e00      	cmp	r6, #0
 8020858:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8020a58 <__ieee754_rem_pio2f+0x228>
 802085c:	4b7f      	ldr	r3, [pc, #508]	; (8020a5c <__ieee754_rem_pio2f+0x22c>)
 802085e:	f025 050f 	bic.w	r5, r5, #15
 8020862:	dd18      	ble.n	8020896 <__ieee754_rem_pio2f+0x66>
 8020864:	429d      	cmp	r5, r3
 8020866:	ee70 7a47 	vsub.f32	s15, s0, s14
 802086a:	bf09      	itett	eq
 802086c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8020a60 <__ieee754_rem_pio2f+0x230>
 8020870:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8020a64 <__ieee754_rem_pio2f+0x234>
 8020874:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8020878:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8020a68 <__ieee754_rem_pio2f+0x238>
 802087c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8020880:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020884:	edc0 6a00 	vstr	s13, [r0]
 8020888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802088c:	edc0 7a01 	vstr	s15, [r0, #4]
 8020890:	2001      	movs	r0, #1
 8020892:	b007      	add	sp, #28
 8020894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020896:	429d      	cmp	r5, r3
 8020898:	ee70 7a07 	vadd.f32	s15, s0, s14
 802089c:	bf09      	itett	eq
 802089e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8020a60 <__ieee754_rem_pio2f+0x230>
 80208a2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8020a64 <__ieee754_rem_pio2f+0x234>
 80208a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80208aa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8020a68 <__ieee754_rem_pio2f+0x238>
 80208ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 80208b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80208b6:	edc0 6a00 	vstr	s13, [r0]
 80208ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80208be:	edc0 7a01 	vstr	s15, [r0, #4]
 80208c2:	f04f 30ff 	mov.w	r0, #4294967295
 80208c6:	e7e4      	b.n	8020892 <__ieee754_rem_pio2f+0x62>
 80208c8:	4b68      	ldr	r3, [pc, #416]	; (8020a6c <__ieee754_rem_pio2f+0x23c>)
 80208ca:	429d      	cmp	r5, r3
 80208cc:	dc71      	bgt.n	80209b2 <__ieee754_rem_pio2f+0x182>
 80208ce:	f000 f8db 	bl	8020a88 <fabsf>
 80208d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8020a70 <__ieee754_rem_pio2f+0x240>
 80208d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80208da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80208de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80208e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80208e6:	ee17 0a90 	vmov	r0, s15
 80208ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8020a58 <__ieee754_rem_pio2f+0x228>
 80208ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80208f2:	281f      	cmp	r0, #31
 80208f4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8020a64 <__ieee754_rem_pio2f+0x234>
 80208f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80208fc:	eeb1 6a47 	vneg.f32	s12, s14
 8020900:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020904:	ee16 2a90 	vmov	r2, s13
 8020908:	dc1c      	bgt.n	8020944 <__ieee754_rem_pio2f+0x114>
 802090a:	495a      	ldr	r1, [pc, #360]	; (8020a74 <__ieee754_rem_pio2f+0x244>)
 802090c:	1e47      	subs	r7, r0, #1
 802090e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8020912:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8020916:	428b      	cmp	r3, r1
 8020918:	d014      	beq.n	8020944 <__ieee754_rem_pio2f+0x114>
 802091a:	6022      	str	r2, [r4, #0]
 802091c:	ed94 7a00 	vldr	s14, [r4]
 8020920:	ee30 0a47 	vsub.f32	s0, s0, s14
 8020924:	2e00      	cmp	r6, #0
 8020926:	ee30 0a67 	vsub.f32	s0, s0, s15
 802092a:	ed84 0a01 	vstr	s0, [r4, #4]
 802092e:	dab0      	bge.n	8020892 <__ieee754_rem_pio2f+0x62>
 8020930:	eeb1 7a47 	vneg.f32	s14, s14
 8020934:	eeb1 0a40 	vneg.f32	s0, s0
 8020938:	ed84 7a00 	vstr	s14, [r4]
 802093c:	ed84 0a01 	vstr	s0, [r4, #4]
 8020940:	4240      	negs	r0, r0
 8020942:	e7a6      	b.n	8020892 <__ieee754_rem_pio2f+0x62>
 8020944:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8020948:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 802094c:	2908      	cmp	r1, #8
 802094e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8020952:	dde2      	ble.n	802091a <__ieee754_rem_pio2f+0xea>
 8020954:	eddf 5a42 	vldr	s11, [pc, #264]	; 8020a60 <__ieee754_rem_pio2f+0x230>
 8020958:	eef0 6a40 	vmov.f32	s13, s0
 802095c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8020960:	ee70 7a66 	vsub.f32	s15, s0, s13
 8020964:	eee6 7a25 	vfma.f32	s15, s12, s11
 8020968:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8020a68 <__ieee754_rem_pio2f+0x238>
 802096c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8020970:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8020974:	ee15 2a90 	vmov	r2, s11
 8020978:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802097c:	1a5b      	subs	r3, r3, r1
 802097e:	2b19      	cmp	r3, #25
 8020980:	dc04      	bgt.n	802098c <__ieee754_rem_pio2f+0x15c>
 8020982:	edc4 5a00 	vstr	s11, [r4]
 8020986:	eeb0 0a66 	vmov.f32	s0, s13
 802098a:	e7c7      	b.n	802091c <__ieee754_rem_pio2f+0xec>
 802098c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8020a78 <__ieee754_rem_pio2f+0x248>
 8020990:	eeb0 0a66 	vmov.f32	s0, s13
 8020994:	eea6 0a25 	vfma.f32	s0, s12, s11
 8020998:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802099c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8020a7c <__ieee754_rem_pio2f+0x24c>
 80209a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80209a4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80209a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80209ac:	ed84 7a00 	vstr	s14, [r4]
 80209b0:	e7b4      	b.n	802091c <__ieee754_rem_pio2f+0xec>
 80209b2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80209b6:	db06      	blt.n	80209c6 <__ieee754_rem_pio2f+0x196>
 80209b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80209bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80209c0:	edc0 7a00 	vstr	s15, [r0]
 80209c4:	e742      	b.n	802084c <__ieee754_rem_pio2f+0x1c>
 80209c6:	15ea      	asrs	r2, r5, #23
 80209c8:	3a86      	subs	r2, #134	; 0x86
 80209ca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80209ce:	ee07 3a90 	vmov	s15, r3
 80209d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80209d6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8020a80 <__ieee754_rem_pio2f+0x250>
 80209da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80209e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80209e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80209ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80209ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80209f6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80209fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80209fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a06:	edcd 7a05 	vstr	s15, [sp, #20]
 8020a0a:	d11e      	bne.n	8020a4a <__ieee754_rem_pio2f+0x21a>
 8020a0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8020a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a14:	bf14      	ite	ne
 8020a16:	2302      	movne	r3, #2
 8020a18:	2301      	moveq	r3, #1
 8020a1a:	491a      	ldr	r1, [pc, #104]	; (8020a84 <__ieee754_rem_pio2f+0x254>)
 8020a1c:	9101      	str	r1, [sp, #4]
 8020a1e:	2102      	movs	r1, #2
 8020a20:	9100      	str	r1, [sp, #0]
 8020a22:	a803      	add	r0, sp, #12
 8020a24:	4621      	mov	r1, r4
 8020a26:	f000 f837 	bl	8020a98 <__kernel_rem_pio2f>
 8020a2a:	2e00      	cmp	r6, #0
 8020a2c:	f6bf af31 	bge.w	8020892 <__ieee754_rem_pio2f+0x62>
 8020a30:	edd4 7a00 	vldr	s15, [r4]
 8020a34:	eef1 7a67 	vneg.f32	s15, s15
 8020a38:	edc4 7a00 	vstr	s15, [r4]
 8020a3c:	edd4 7a01 	vldr	s15, [r4, #4]
 8020a40:	eef1 7a67 	vneg.f32	s15, s15
 8020a44:	edc4 7a01 	vstr	s15, [r4, #4]
 8020a48:	e77a      	b.n	8020940 <__ieee754_rem_pio2f+0x110>
 8020a4a:	2303      	movs	r3, #3
 8020a4c:	e7e5      	b.n	8020a1a <__ieee754_rem_pio2f+0x1ea>
 8020a4e:	bf00      	nop
 8020a50:	3f490fd8 	.word	0x3f490fd8
 8020a54:	4016cbe3 	.word	0x4016cbe3
 8020a58:	3fc90f80 	.word	0x3fc90f80
 8020a5c:	3fc90fd0 	.word	0x3fc90fd0
 8020a60:	37354400 	.word	0x37354400
 8020a64:	37354443 	.word	0x37354443
 8020a68:	2e85a308 	.word	0x2e85a308
 8020a6c:	43490f80 	.word	0x43490f80
 8020a70:	3f22f984 	.word	0x3f22f984
 8020a74:	08023b58 	.word	0x08023b58
 8020a78:	2e85a300 	.word	0x2e85a300
 8020a7c:	248d3132 	.word	0x248d3132
 8020a80:	43800000 	.word	0x43800000
 8020a84:	08023bd8 	.word	0x08023bd8

08020a88 <fabsf>:
 8020a88:	ee10 3a10 	vmov	r3, s0
 8020a8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020a90:	ee00 3a10 	vmov	s0, r3
 8020a94:	4770      	bx	lr
	...

08020a98 <__kernel_rem_pio2f>:
 8020a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a9c:	ed2d 8b04 	vpush	{d8-d9}
 8020aa0:	b0d9      	sub	sp, #356	; 0x164
 8020aa2:	4688      	mov	r8, r1
 8020aa4:	9002      	str	r0, [sp, #8]
 8020aa6:	49b8      	ldr	r1, [pc, #736]	; (8020d88 <__kernel_rem_pio2f+0x2f0>)
 8020aa8:	9866      	ldr	r0, [sp, #408]	; 0x198
 8020aaa:	9301      	str	r3, [sp, #4]
 8020aac:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8020ab0:	9901      	ldr	r1, [sp, #4]
 8020ab2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8020ab4:	f101 3bff 	add.w	fp, r1, #4294967295
 8020ab8:	1d11      	adds	r1, r2, #4
 8020aba:	db25      	blt.n	8020b08 <__kernel_rem_pio2f+0x70>
 8020abc:	1ed0      	subs	r0, r2, #3
 8020abe:	bf48      	it	mi
 8020ac0:	1d10      	addmi	r0, r2, #4
 8020ac2:	10c0      	asrs	r0, r0, #3
 8020ac4:	1c45      	adds	r5, r0, #1
 8020ac6:	00e9      	lsls	r1, r5, #3
 8020ac8:	eba0 070b 	sub.w	r7, r0, fp
 8020acc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020ad0:	9103      	str	r1, [sp, #12]
 8020ad2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8020ad6:	eb0a 0c0b 	add.w	ip, sl, fp
 8020ada:	ae1c      	add	r6, sp, #112	; 0x70
 8020adc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8020ae0:	2400      	movs	r4, #0
 8020ae2:	4564      	cmp	r4, ip
 8020ae4:	dd12      	ble.n	8020b0c <__kernel_rem_pio2f+0x74>
 8020ae6:	9901      	ldr	r1, [sp, #4]
 8020ae8:	ac1c      	add	r4, sp, #112	; 0x70
 8020aea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020aee:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8020af2:	f04f 0c00 	mov.w	ip, #0
 8020af6:	45d4      	cmp	ip, sl
 8020af8:	dc27      	bgt.n	8020b4a <__kernel_rem_pio2f+0xb2>
 8020afa:	f8dd e008 	ldr.w	lr, [sp, #8]
 8020afe:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020b02:	4627      	mov	r7, r4
 8020b04:	2600      	movs	r6, #0
 8020b06:	e016      	b.n	8020b36 <__kernel_rem_pio2f+0x9e>
 8020b08:	2000      	movs	r0, #0
 8020b0a:	e7db      	b.n	8020ac4 <__kernel_rem_pio2f+0x2c>
 8020b0c:	42e7      	cmn	r7, r4
 8020b0e:	bf5d      	ittte	pl
 8020b10:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8020b14:	ee07 1a90 	vmovpl	s15, r1
 8020b18:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8020b1c:	eef0 7a47 	vmovmi.f32	s15, s14
 8020b20:	ece6 7a01 	vstmia	r6!, {s15}
 8020b24:	3401      	adds	r4, #1
 8020b26:	e7dc      	b.n	8020ae2 <__kernel_rem_pio2f+0x4a>
 8020b28:	ecfe 6a01 	vldmia	lr!, {s13}
 8020b2c:	ed97 7a00 	vldr	s14, [r7]
 8020b30:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020b34:	3601      	adds	r6, #1
 8020b36:	455e      	cmp	r6, fp
 8020b38:	f1a7 0704 	sub.w	r7, r7, #4
 8020b3c:	ddf4      	ble.n	8020b28 <__kernel_rem_pio2f+0x90>
 8020b3e:	ece9 7a01 	vstmia	r9!, {s15}
 8020b42:	f10c 0c01 	add.w	ip, ip, #1
 8020b46:	3404      	adds	r4, #4
 8020b48:	e7d5      	b.n	8020af6 <__kernel_rem_pio2f+0x5e>
 8020b4a:	a908      	add	r1, sp, #32
 8020b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020b50:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8020b54:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8020d94 <__kernel_rem_pio2f+0x2fc>
 8020b58:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8020d90 <__kernel_rem_pio2f+0x2f8>
 8020b5c:	9105      	str	r1, [sp, #20]
 8020b5e:	9304      	str	r3, [sp, #16]
 8020b60:	4656      	mov	r6, sl
 8020b62:	00b3      	lsls	r3, r6, #2
 8020b64:	9306      	str	r3, [sp, #24]
 8020b66:	ab58      	add	r3, sp, #352	; 0x160
 8020b68:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8020b6c:	ac08      	add	r4, sp, #32
 8020b6e:	ab44      	add	r3, sp, #272	; 0x110
 8020b70:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8020b74:	46a4      	mov	ip, r4
 8020b76:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8020b7a:	4637      	mov	r7, r6
 8020b7c:	2f00      	cmp	r7, #0
 8020b7e:	f1a0 0004 	sub.w	r0, r0, #4
 8020b82:	dc4a      	bgt.n	8020c1a <__kernel_rem_pio2f+0x182>
 8020b84:	4628      	mov	r0, r5
 8020b86:	9207      	str	r2, [sp, #28]
 8020b88:	f000 f9f8 	bl	8020f7c <scalbnf>
 8020b8c:	eeb0 8a40 	vmov.f32	s16, s0
 8020b90:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8020b94:	ee28 0a00 	vmul.f32	s0, s16, s0
 8020b98:	f000 fa56 	bl	8021048 <floorf>
 8020b9c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8020ba0:	eea0 8a67 	vfms.f32	s16, s0, s15
 8020ba4:	2d00      	cmp	r5, #0
 8020ba6:	9a07      	ldr	r2, [sp, #28]
 8020ba8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8020bac:	ee17 9a90 	vmov	r9, s15
 8020bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020bb4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8020bb8:	dd41      	ble.n	8020c3e <__kernel_rem_pio2f+0x1a6>
 8020bba:	f106 3cff 	add.w	ip, r6, #4294967295
 8020bbe:	ab08      	add	r3, sp, #32
 8020bc0:	f1c5 0e08 	rsb	lr, r5, #8
 8020bc4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8020bc8:	fa47 f00e 	asr.w	r0, r7, lr
 8020bcc:	4481      	add	r9, r0
 8020bce:	fa00 f00e 	lsl.w	r0, r0, lr
 8020bd2:	1a3f      	subs	r7, r7, r0
 8020bd4:	f1c5 0007 	rsb	r0, r5, #7
 8020bd8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8020bdc:	4107      	asrs	r7, r0
 8020bde:	2f00      	cmp	r7, #0
 8020be0:	dd3c      	ble.n	8020c5c <__kernel_rem_pio2f+0x1c4>
 8020be2:	f04f 0e00 	mov.w	lr, #0
 8020be6:	f109 0901 	add.w	r9, r9, #1
 8020bea:	4671      	mov	r1, lr
 8020bec:	4576      	cmp	r6, lr
 8020bee:	dc67      	bgt.n	8020cc0 <__kernel_rem_pio2f+0x228>
 8020bf0:	2d00      	cmp	r5, #0
 8020bf2:	dd03      	ble.n	8020bfc <__kernel_rem_pio2f+0x164>
 8020bf4:	2d01      	cmp	r5, #1
 8020bf6:	d074      	beq.n	8020ce2 <__kernel_rem_pio2f+0x24a>
 8020bf8:	2d02      	cmp	r5, #2
 8020bfa:	d07b      	beq.n	8020cf4 <__kernel_rem_pio2f+0x25c>
 8020bfc:	2f02      	cmp	r7, #2
 8020bfe:	d12d      	bne.n	8020c5c <__kernel_rem_pio2f+0x1c4>
 8020c00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020c04:	ee30 8a48 	vsub.f32	s16, s0, s16
 8020c08:	b341      	cbz	r1, 8020c5c <__kernel_rem_pio2f+0x1c4>
 8020c0a:	4628      	mov	r0, r5
 8020c0c:	9207      	str	r2, [sp, #28]
 8020c0e:	f000 f9b5 	bl	8020f7c <scalbnf>
 8020c12:	9a07      	ldr	r2, [sp, #28]
 8020c14:	ee38 8a40 	vsub.f32	s16, s16, s0
 8020c18:	e020      	b.n	8020c5c <__kernel_rem_pio2f+0x1c4>
 8020c1a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8020c1e:	3f01      	subs	r7, #1
 8020c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020c28:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8020c2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020c30:	ecac 0a01 	vstmia	ip!, {s0}
 8020c34:	ed90 0a00 	vldr	s0, [r0]
 8020c38:	ee37 0a80 	vadd.f32	s0, s15, s0
 8020c3c:	e79e      	b.n	8020b7c <__kernel_rem_pio2f+0xe4>
 8020c3e:	d105      	bne.n	8020c4c <__kernel_rem_pio2f+0x1b4>
 8020c40:	1e70      	subs	r0, r6, #1
 8020c42:	ab08      	add	r3, sp, #32
 8020c44:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8020c48:	11ff      	asrs	r7, r7, #7
 8020c4a:	e7c8      	b.n	8020bde <__kernel_rem_pio2f+0x146>
 8020c4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020c50:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8020c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c58:	da30      	bge.n	8020cbc <__kernel_rem_pio2f+0x224>
 8020c5a:	2700      	movs	r7, #0
 8020c5c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8020c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c64:	f040 809a 	bne.w	8020d9c <__kernel_rem_pio2f+0x304>
 8020c68:	1e74      	subs	r4, r6, #1
 8020c6a:	46a4      	mov	ip, r4
 8020c6c:	2100      	movs	r1, #0
 8020c6e:	45d4      	cmp	ip, sl
 8020c70:	da47      	bge.n	8020d02 <__kernel_rem_pio2f+0x26a>
 8020c72:	2900      	cmp	r1, #0
 8020c74:	d063      	beq.n	8020d3e <__kernel_rem_pio2f+0x2a6>
 8020c76:	ab08      	add	r3, sp, #32
 8020c78:	3d08      	subs	r5, #8
 8020c7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d07f      	beq.n	8020d82 <__kernel_rem_pio2f+0x2ea>
 8020c82:	4628      	mov	r0, r5
 8020c84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8020c88:	f000 f978 	bl	8020f7c <scalbnf>
 8020c8c:	1c63      	adds	r3, r4, #1
 8020c8e:	aa44      	add	r2, sp, #272	; 0x110
 8020c90:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8020d94 <__kernel_rem_pio2f+0x2fc>
 8020c94:	0099      	lsls	r1, r3, #2
 8020c96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020c9a:	4623      	mov	r3, r4
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	f280 80ad 	bge.w	8020dfc <__kernel_rem_pio2f+0x364>
 8020ca2:	4623      	mov	r3, r4
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	f2c0 80cb 	blt.w	8020e40 <__kernel_rem_pio2f+0x3a8>
 8020caa:	aa44      	add	r2, sp, #272	; 0x110
 8020cac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8020cb0:	4e36      	ldr	r6, [pc, #216]	; (8020d8c <__kernel_rem_pio2f+0x2f4>)
 8020cb2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020cb6:	2000      	movs	r0, #0
 8020cb8:	1ae2      	subs	r2, r4, r3
 8020cba:	e0b6      	b.n	8020e2a <__kernel_rem_pio2f+0x392>
 8020cbc:	2702      	movs	r7, #2
 8020cbe:	e790      	b.n	8020be2 <__kernel_rem_pio2f+0x14a>
 8020cc0:	6820      	ldr	r0, [r4, #0]
 8020cc2:	b949      	cbnz	r1, 8020cd8 <__kernel_rem_pio2f+0x240>
 8020cc4:	b118      	cbz	r0, 8020cce <__kernel_rem_pio2f+0x236>
 8020cc6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020cca:	6020      	str	r0, [r4, #0]
 8020ccc:	2001      	movs	r0, #1
 8020cce:	f10e 0e01 	add.w	lr, lr, #1
 8020cd2:	3404      	adds	r4, #4
 8020cd4:	4601      	mov	r1, r0
 8020cd6:	e789      	b.n	8020bec <__kernel_rem_pio2f+0x154>
 8020cd8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8020cdc:	6020      	str	r0, [r4, #0]
 8020cde:	4608      	mov	r0, r1
 8020ce0:	e7f5      	b.n	8020cce <__kernel_rem_pio2f+0x236>
 8020ce2:	1e74      	subs	r4, r6, #1
 8020ce4:	ab08      	add	r3, sp, #32
 8020ce6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020cea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8020cee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8020cf2:	e783      	b.n	8020bfc <__kernel_rem_pio2f+0x164>
 8020cf4:	1e74      	subs	r4, r6, #1
 8020cf6:	ab08      	add	r3, sp, #32
 8020cf8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020cfc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8020d00:	e7f5      	b.n	8020cee <__kernel_rem_pio2f+0x256>
 8020d02:	ab08      	add	r3, sp, #32
 8020d04:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8020d08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020d0c:	4301      	orrs	r1, r0
 8020d0e:	e7ae      	b.n	8020c6e <__kernel_rem_pio2f+0x1d6>
 8020d10:	3001      	adds	r0, #1
 8020d12:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8020d16:	2f00      	cmp	r7, #0
 8020d18:	d0fa      	beq.n	8020d10 <__kernel_rem_pio2f+0x278>
 8020d1a:	9b06      	ldr	r3, [sp, #24]
 8020d1c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8020d20:	eb0d 0403 	add.w	r4, sp, r3
 8020d24:	9b01      	ldr	r3, [sp, #4]
 8020d26:	18f7      	adds	r7, r6, r3
 8020d28:	ab1c      	add	r3, sp, #112	; 0x70
 8020d2a:	f106 0c01 	add.w	ip, r6, #1
 8020d2e:	3c4c      	subs	r4, #76	; 0x4c
 8020d30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020d34:	4430      	add	r0, r6
 8020d36:	4560      	cmp	r0, ip
 8020d38:	da04      	bge.n	8020d44 <__kernel_rem_pio2f+0x2ac>
 8020d3a:	4606      	mov	r6, r0
 8020d3c:	e711      	b.n	8020b62 <__kernel_rem_pio2f+0xca>
 8020d3e:	9c05      	ldr	r4, [sp, #20]
 8020d40:	2001      	movs	r0, #1
 8020d42:	e7e6      	b.n	8020d12 <__kernel_rem_pio2f+0x27a>
 8020d44:	9b04      	ldr	r3, [sp, #16]
 8020d46:	f8dd e008 	ldr.w	lr, [sp, #8]
 8020d4a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020d4e:	9306      	str	r3, [sp, #24]
 8020d50:	ee07 3a90 	vmov	s15, r3
 8020d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020d58:	2600      	movs	r6, #0
 8020d5a:	ece7 7a01 	vstmia	r7!, {s15}
 8020d5e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020d62:	46b9      	mov	r9, r7
 8020d64:	455e      	cmp	r6, fp
 8020d66:	dd04      	ble.n	8020d72 <__kernel_rem_pio2f+0x2da>
 8020d68:	ece4 7a01 	vstmia	r4!, {s15}
 8020d6c:	f10c 0c01 	add.w	ip, ip, #1
 8020d70:	e7e1      	b.n	8020d36 <__kernel_rem_pio2f+0x29e>
 8020d72:	ecfe 6a01 	vldmia	lr!, {s13}
 8020d76:	ed39 7a01 	vldmdb	r9!, {s14}
 8020d7a:	3601      	adds	r6, #1
 8020d7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020d80:	e7f0      	b.n	8020d64 <__kernel_rem_pio2f+0x2cc>
 8020d82:	3c01      	subs	r4, #1
 8020d84:	e777      	b.n	8020c76 <__kernel_rem_pio2f+0x1de>
 8020d86:	bf00      	nop
 8020d88:	08023f1c 	.word	0x08023f1c
 8020d8c:	08023ef0 	.word	0x08023ef0
 8020d90:	43800000 	.word	0x43800000
 8020d94:	3b800000 	.word	0x3b800000
 8020d98:	00000000 	.word	0x00000000
 8020d9c:	9b03      	ldr	r3, [sp, #12]
 8020d9e:	eeb0 0a48 	vmov.f32	s0, s16
 8020da2:	1a98      	subs	r0, r3, r2
 8020da4:	f000 f8ea 	bl	8020f7c <scalbnf>
 8020da8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8020d90 <__kernel_rem_pio2f+0x2f8>
 8020dac:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8020db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020db4:	db19      	blt.n	8020dea <__kernel_rem_pio2f+0x352>
 8020db6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8020d94 <__kernel_rem_pio2f+0x2fc>
 8020dba:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020dbe:	aa08      	add	r2, sp, #32
 8020dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020dc4:	1c74      	adds	r4, r6, #1
 8020dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dca:	3508      	adds	r5, #8
 8020dcc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8020dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020dd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020dd8:	ee10 3a10 	vmov	r3, s0
 8020ddc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8020de0:	ee17 3a90 	vmov	r3, s15
 8020de4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8020de8:	e74b      	b.n	8020c82 <__kernel_rem_pio2f+0x1ea>
 8020dea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020dee:	aa08      	add	r2, sp, #32
 8020df0:	ee10 3a10 	vmov	r3, s0
 8020df4:	4634      	mov	r4, r6
 8020df6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8020dfa:	e742      	b.n	8020c82 <__kernel_rem_pio2f+0x1ea>
 8020dfc:	a808      	add	r0, sp, #32
 8020dfe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8020e02:	9001      	str	r0, [sp, #4]
 8020e04:	ee07 0a90 	vmov	s15, r0
 8020e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e0c:	3b01      	subs	r3, #1
 8020e0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020e12:	ee20 0a07 	vmul.f32	s0, s0, s14
 8020e16:	ed62 7a01 	vstmdb	r2!, {s15}
 8020e1a:	e73f      	b.n	8020c9c <__kernel_rem_pio2f+0x204>
 8020e1c:	ecf6 6a01 	vldmia	r6!, {s13}
 8020e20:	ecb5 7a01 	vldmia	r5!, {s14}
 8020e24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020e28:	3001      	adds	r0, #1
 8020e2a:	4550      	cmp	r0, sl
 8020e2c:	dc01      	bgt.n	8020e32 <__kernel_rem_pio2f+0x39a>
 8020e2e:	4290      	cmp	r0, r2
 8020e30:	ddf4      	ble.n	8020e1c <__kernel_rem_pio2f+0x384>
 8020e32:	a858      	add	r0, sp, #352	; 0x160
 8020e34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8020e38:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8020e3c:	3b01      	subs	r3, #1
 8020e3e:	e731      	b.n	8020ca4 <__kernel_rem_pio2f+0x20c>
 8020e40:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8020e42:	2b02      	cmp	r3, #2
 8020e44:	dc09      	bgt.n	8020e5a <__kernel_rem_pio2f+0x3c2>
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	dc2b      	bgt.n	8020ea2 <__kernel_rem_pio2f+0x40a>
 8020e4a:	d044      	beq.n	8020ed6 <__kernel_rem_pio2f+0x43e>
 8020e4c:	f009 0007 	and.w	r0, r9, #7
 8020e50:	b059      	add	sp, #356	; 0x164
 8020e52:	ecbd 8b04 	vpop	{d8-d9}
 8020e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e5a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8020e5c:	2b03      	cmp	r3, #3
 8020e5e:	d1f5      	bne.n	8020e4c <__kernel_rem_pio2f+0x3b4>
 8020e60:	aa30      	add	r2, sp, #192	; 0xc0
 8020e62:	1f0b      	subs	r3, r1, #4
 8020e64:	4413      	add	r3, r2
 8020e66:	461a      	mov	r2, r3
 8020e68:	4620      	mov	r0, r4
 8020e6a:	2800      	cmp	r0, #0
 8020e6c:	f1a2 0204 	sub.w	r2, r2, #4
 8020e70:	dc52      	bgt.n	8020f18 <__kernel_rem_pio2f+0x480>
 8020e72:	4622      	mov	r2, r4
 8020e74:	2a01      	cmp	r2, #1
 8020e76:	f1a3 0304 	sub.w	r3, r3, #4
 8020e7a:	dc5d      	bgt.n	8020f38 <__kernel_rem_pio2f+0x4a0>
 8020e7c:	ab30      	add	r3, sp, #192	; 0xc0
 8020e7e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020e82:	440b      	add	r3, r1
 8020e84:	2c01      	cmp	r4, #1
 8020e86:	dc67      	bgt.n	8020f58 <__kernel_rem_pio2f+0x4c0>
 8020e88:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8020e8c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8020e90:	2f00      	cmp	r7, #0
 8020e92:	d167      	bne.n	8020f64 <__kernel_rem_pio2f+0x4cc>
 8020e94:	edc8 6a00 	vstr	s13, [r8]
 8020e98:	ed88 7a01 	vstr	s14, [r8, #4]
 8020e9c:	edc8 7a02 	vstr	s15, [r8, #8]
 8020ea0:	e7d4      	b.n	8020e4c <__kernel_rem_pio2f+0x3b4>
 8020ea2:	ab30      	add	r3, sp, #192	; 0xc0
 8020ea4:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020ea8:	440b      	add	r3, r1
 8020eaa:	4622      	mov	r2, r4
 8020eac:	2a00      	cmp	r2, #0
 8020eae:	da24      	bge.n	8020efa <__kernel_rem_pio2f+0x462>
 8020eb0:	b34f      	cbz	r7, 8020f06 <__kernel_rem_pio2f+0x46e>
 8020eb2:	eef1 7a47 	vneg.f32	s15, s14
 8020eb6:	edc8 7a00 	vstr	s15, [r8]
 8020eba:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8020ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020ec2:	aa31      	add	r2, sp, #196	; 0xc4
 8020ec4:	2301      	movs	r3, #1
 8020ec6:	429c      	cmp	r4, r3
 8020ec8:	da20      	bge.n	8020f0c <__kernel_rem_pio2f+0x474>
 8020eca:	b10f      	cbz	r7, 8020ed0 <__kernel_rem_pio2f+0x438>
 8020ecc:	eef1 7a67 	vneg.f32	s15, s15
 8020ed0:	edc8 7a01 	vstr	s15, [r8, #4]
 8020ed4:	e7ba      	b.n	8020e4c <__kernel_rem_pio2f+0x3b4>
 8020ed6:	ab30      	add	r3, sp, #192	; 0xc0
 8020ed8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8020d98 <__kernel_rem_pio2f+0x300>
 8020edc:	440b      	add	r3, r1
 8020ede:	2c00      	cmp	r4, #0
 8020ee0:	da05      	bge.n	8020eee <__kernel_rem_pio2f+0x456>
 8020ee2:	b10f      	cbz	r7, 8020ee8 <__kernel_rem_pio2f+0x450>
 8020ee4:	eef1 7a67 	vneg.f32	s15, s15
 8020ee8:	edc8 7a00 	vstr	s15, [r8]
 8020eec:	e7ae      	b.n	8020e4c <__kernel_rem_pio2f+0x3b4>
 8020eee:	ed33 7a01 	vldmdb	r3!, {s14}
 8020ef2:	3c01      	subs	r4, #1
 8020ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020ef8:	e7f1      	b.n	8020ede <__kernel_rem_pio2f+0x446>
 8020efa:	ed73 7a01 	vldmdb	r3!, {s15}
 8020efe:	3a01      	subs	r2, #1
 8020f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020f04:	e7d2      	b.n	8020eac <__kernel_rem_pio2f+0x414>
 8020f06:	eef0 7a47 	vmov.f32	s15, s14
 8020f0a:	e7d4      	b.n	8020eb6 <__kernel_rem_pio2f+0x41e>
 8020f0c:	ecb2 7a01 	vldmia	r2!, {s14}
 8020f10:	3301      	adds	r3, #1
 8020f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020f16:	e7d6      	b.n	8020ec6 <__kernel_rem_pio2f+0x42e>
 8020f18:	edd2 7a00 	vldr	s15, [r2]
 8020f1c:	edd2 6a01 	vldr	s13, [r2, #4]
 8020f20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020f24:	3801      	subs	r0, #1
 8020f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020f2a:	ed82 7a00 	vstr	s14, [r2]
 8020f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020f32:	edc2 7a01 	vstr	s15, [r2, #4]
 8020f36:	e798      	b.n	8020e6a <__kernel_rem_pio2f+0x3d2>
 8020f38:	edd3 7a00 	vldr	s15, [r3]
 8020f3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8020f40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020f44:	3a01      	subs	r2, #1
 8020f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020f4a:	ed83 7a00 	vstr	s14, [r3]
 8020f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020f52:	edc3 7a01 	vstr	s15, [r3, #4]
 8020f56:	e78d      	b.n	8020e74 <__kernel_rem_pio2f+0x3dc>
 8020f58:	ed33 7a01 	vldmdb	r3!, {s14}
 8020f5c:	3c01      	subs	r4, #1
 8020f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020f62:	e78f      	b.n	8020e84 <__kernel_rem_pio2f+0x3ec>
 8020f64:	eef1 6a66 	vneg.f32	s13, s13
 8020f68:	eeb1 7a47 	vneg.f32	s14, s14
 8020f6c:	edc8 6a00 	vstr	s13, [r8]
 8020f70:	ed88 7a01 	vstr	s14, [r8, #4]
 8020f74:	eef1 7a67 	vneg.f32	s15, s15
 8020f78:	e790      	b.n	8020e9c <__kernel_rem_pio2f+0x404>
 8020f7a:	bf00      	nop

08020f7c <scalbnf>:
 8020f7c:	ee10 3a10 	vmov	r3, s0
 8020f80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8020f84:	d02b      	beq.n	8020fde <scalbnf+0x62>
 8020f86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8020f8a:	d302      	bcc.n	8020f92 <scalbnf+0x16>
 8020f8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8020f90:	4770      	bx	lr
 8020f92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8020f96:	d123      	bne.n	8020fe0 <scalbnf+0x64>
 8020f98:	4b24      	ldr	r3, [pc, #144]	; (802102c <scalbnf+0xb0>)
 8020f9a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8021030 <scalbnf+0xb4>
 8020f9e:	4298      	cmp	r0, r3
 8020fa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020fa4:	db17      	blt.n	8020fd6 <scalbnf+0x5a>
 8020fa6:	ee10 3a10 	vmov	r3, s0
 8020faa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020fae:	3a19      	subs	r2, #25
 8020fb0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8020fb4:	4288      	cmp	r0, r1
 8020fb6:	dd15      	ble.n	8020fe4 <scalbnf+0x68>
 8020fb8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8021034 <scalbnf+0xb8>
 8020fbc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8021038 <scalbnf+0xbc>
 8020fc0:	ee10 3a10 	vmov	r3, s0
 8020fc4:	eeb0 7a67 	vmov.f32	s14, s15
 8020fc8:	2b00      	cmp	r3, #0
 8020fca:	bfb8      	it	lt
 8020fcc:	eef0 7a66 	vmovlt.f32	s15, s13
 8020fd0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8020fd4:	4770      	bx	lr
 8020fd6:	eddf 7a19 	vldr	s15, [pc, #100]	; 802103c <scalbnf+0xc0>
 8020fda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8020fde:	4770      	bx	lr
 8020fe0:	0dd2      	lsrs	r2, r2, #23
 8020fe2:	e7e5      	b.n	8020fb0 <scalbnf+0x34>
 8020fe4:	4410      	add	r0, r2
 8020fe6:	28fe      	cmp	r0, #254	; 0xfe
 8020fe8:	dce6      	bgt.n	8020fb8 <scalbnf+0x3c>
 8020fea:	2800      	cmp	r0, #0
 8020fec:	dd06      	ble.n	8020ffc <scalbnf+0x80>
 8020fee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020ff2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8020ff6:	ee00 3a10 	vmov	s0, r3
 8020ffa:	4770      	bx	lr
 8020ffc:	f110 0f16 	cmn.w	r0, #22
 8021000:	da09      	bge.n	8021016 <scalbnf+0x9a>
 8021002:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802103c <scalbnf+0xc0>
 8021006:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8021040 <scalbnf+0xc4>
 802100a:	ee10 3a10 	vmov	r3, s0
 802100e:	eeb0 7a67 	vmov.f32	s14, s15
 8021012:	2b00      	cmp	r3, #0
 8021014:	e7d9      	b.n	8020fca <scalbnf+0x4e>
 8021016:	3019      	adds	r0, #25
 8021018:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802101c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8021020:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8021044 <scalbnf+0xc8>
 8021024:	ee07 3a90 	vmov	s15, r3
 8021028:	e7d7      	b.n	8020fda <scalbnf+0x5e>
 802102a:	bf00      	nop
 802102c:	ffff3cb0 	.word	0xffff3cb0
 8021030:	4c000000 	.word	0x4c000000
 8021034:	7149f2ca 	.word	0x7149f2ca
 8021038:	f149f2ca 	.word	0xf149f2ca
 802103c:	0da24260 	.word	0x0da24260
 8021040:	8da24260 	.word	0x8da24260
 8021044:	33000000 	.word	0x33000000

08021048 <floorf>:
 8021048:	ee10 3a10 	vmov	r3, s0
 802104c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021050:	3a7f      	subs	r2, #127	; 0x7f
 8021052:	2a16      	cmp	r2, #22
 8021054:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021058:	dc2a      	bgt.n	80210b0 <floorf+0x68>
 802105a:	2a00      	cmp	r2, #0
 802105c:	da11      	bge.n	8021082 <floorf+0x3a>
 802105e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80210c0 <floorf+0x78>
 8021062:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021066:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802106e:	dd05      	ble.n	802107c <floorf+0x34>
 8021070:	2b00      	cmp	r3, #0
 8021072:	da23      	bge.n	80210bc <floorf+0x74>
 8021074:	4a13      	ldr	r2, [pc, #76]	; (80210c4 <floorf+0x7c>)
 8021076:	2900      	cmp	r1, #0
 8021078:	bf18      	it	ne
 802107a:	4613      	movne	r3, r2
 802107c:	ee00 3a10 	vmov	s0, r3
 8021080:	4770      	bx	lr
 8021082:	4911      	ldr	r1, [pc, #68]	; (80210c8 <floorf+0x80>)
 8021084:	4111      	asrs	r1, r2
 8021086:	420b      	tst	r3, r1
 8021088:	d0fa      	beq.n	8021080 <floorf+0x38>
 802108a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80210c0 <floorf+0x78>
 802108e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021092:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802109a:	ddef      	ble.n	802107c <floorf+0x34>
 802109c:	2b00      	cmp	r3, #0
 802109e:	bfbe      	ittt	lt
 80210a0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80210a4:	fa40 f202 	asrlt.w	r2, r0, r2
 80210a8:	189b      	addlt	r3, r3, r2
 80210aa:	ea23 0301 	bic.w	r3, r3, r1
 80210ae:	e7e5      	b.n	802107c <floorf+0x34>
 80210b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80210b4:	d3e4      	bcc.n	8021080 <floorf+0x38>
 80210b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80210ba:	4770      	bx	lr
 80210bc:	2300      	movs	r3, #0
 80210be:	e7dd      	b.n	802107c <floorf+0x34>
 80210c0:	7149f2ca 	.word	0x7149f2ca
 80210c4:	bf800000 	.word	0xbf800000
 80210c8:	007fffff 	.word	0x007fffff

080210cc <_init>:
 80210cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210ce:	bf00      	nop
 80210d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80210d2:	bc08      	pop	{r3}
 80210d4:	469e      	mov	lr, r3
 80210d6:	4770      	bx	lr

080210d8 <_fini>:
 80210d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210da:	bf00      	nop
 80210dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80210de:	bc08      	pop	{r3}
 80210e0:	469e      	mov	lr, r3
 80210e2:	4770      	bx	lr
