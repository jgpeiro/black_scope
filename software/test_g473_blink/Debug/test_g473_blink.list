
test_g473_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028084  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003210  08028268  08028268  00038268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b478  0802b478  00040368  2**0
                  CONTENTS
  4 .ARM          00000000  0802b478  0802b478  00040368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802b478  0802b478  00040368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b478  0802b478  0003b478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b47c  0802b47c  0003b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0802b480  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001673c  20000368  0802b7e8  00040368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016aa4  0802b7e8  00046aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006ca7a  00000000  00000000  000403db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a23e  00000000  00000000  000ace55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003038  00000000  00000000  000b7098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002630  00000000  00000000  000ba0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d6e  00000000  00000000  000bc700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f8de  00000000  00000000  000e546e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100454  00000000  00000000  00124d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000dda0  00000000  00000000  002251a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00232f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000368 	.word	0x20000368
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802824c 	.word	0x0802824c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000036c 	.word	0x2000036c
 800021c:	0802824c 	.word	0x0802824c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f024 fc9c 	bl	8025642 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d12:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d32:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d54:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6a:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d70:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d7a:	f006 fab5 	bl	80072e8 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f003 fffd 	bl	8004d82 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000d94:	f008 f944 	bl	8009020 <HAL_ADCEx_MultiModeConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000d9e:	f003 fff0 	bl	8004d82 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0x168>)
 8000da4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000da6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 4095;
 8000db6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 2048+768;
 8000dbc:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dce:	f007 fc2d 	bl	800862c <HAL_ADC_AnalogWDGConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f003 ffd3 	bl	8004d82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC1_Init+0x16c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	237f      	movs	r3, #127	; 0x7f
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dec:	2304      	movs	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000dfa:	f006 ffd7 	bl	8007dac <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000e04:	f003 ffbd 	bl	8004d82 <Error_Handler>
  }

  /** Configure the channel to be monitored by WatchDog 2
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x170>)
 8000e0a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REGINJEC;
 8000e0c:	f04f 73e0 	mov.w	r3, #29360128	; 0x1c00000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.HighThreshold = 2816;
 8000e12:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_ADC1_Init+0x164>)
 8000e24:	f007 fc02 	bl	800862c <HAL_ADC_AnalogWDGConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000e2e:	f003 ffa8 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3748      	adds	r7, #72	; 0x48
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000384 	.word	0x20000384
 8000e40:	7dc00000 	.word	0x7dc00000
 8000e44:	b6902000 	.word	0xb6902000
 8000e48:	0017ffff 	.word	0x0017ffff

08000e4c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f024 fbec 	bl	8025642 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e6c:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_ADC3_Init+0xec>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eb2:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ed8:	f006 fa06 	bl	80072e8 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000ee2:	f003 ff4e 	bl	8004d82 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000ef2:	f008 f895 	bl	8009020 <HAL_ADCEx_MultiModeConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000efc:	f003 ff41 	bl	8004d82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_ADC3_Init+0xf0>)
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f04:	2306      	movs	r3, #6
 8000f06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0c:	237f      	movs	r3, #127	; 0x7f
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f10:	2304      	movs	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_ADC3_Init+0xe8>)
 8000f1e:	f006 ff45 	bl	8007dac <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000f28:	f003 ff2b 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200003f0 	.word	0x200003f0
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	b6982000 	.word	0xb6982000

08000f40 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f024 fb78 	bl	8025642 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f54:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_ADC4_Init+0xc8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000f9a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fc0:	f006 f992 	bl	80072e8 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC4_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f003 feda 	bl	8004d82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_ADC4_Init+0xcc>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fda:	237f      	movs	r3, #127	; 0x7f
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC4_Init+0xc4>)
 8000fec:	f006 fede 	bl	8007dac <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC4_Init+0xba>
  {
    Error_Handler();
 8000ff6:	f003 fec4 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000045c 	.word	0x2000045c
 8001008:	50000500 	.word	0x50000500
 800100c:	c75a0000 	.word	0xc75a0000

08001010 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f024 fb10 	bl	8025642 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <MX_ADC5_Init+0xc8>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800104a:	2204      	movs	r2, #4
 800104c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001050:	2200      	movs	r2, #0
 8001052:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001056:	2200      	movs	r2, #0
 8001058:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800106a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_ADC5_Init+0xc4>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC5_Init+0xc4>)
 8001090:	f006 f92a 	bl	80072e8 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC5_Init+0x8e>
  {
    Error_Handler();
 800109a:	f003 fe72 	bl	8004d82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP5;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC5_Init+0xcc>)
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010aa:	237f      	movs	r3, #127	; 0x7f
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2304      	movs	r3, #4
 80010b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC5_Init+0xc4>)
 80010bc:	f006 fe76 	bl	8007dac <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC5_Init+0xba>
  {
    Error_Handler();
 80010c6:	f003 fe5c 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004c8 	.word	0x200004c8
 80010d8:	50000600 	.word	0x50000600
 80010dc:	8c900008 	.word	0x8c900008

080010e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f024 faa6 	bl	8025642 <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d14f      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fbbb 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800111c:	f003 fe31 	bl	8004d82 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a74      	ldr	r2, [pc, #464]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69bb      	ldr	r3, [r7, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001138:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_ADC_MspInit+0x220>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001140:	2205      	movs	r2, #5
 8001142:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001168:	2220      	movs	r2, #32
 800116a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001174:	f008 fd26 	bl	8009bc4 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 800117e:	f003 fe00 	bl	8004d82 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
 8001188:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <HAL_ADC_MspInit+0x21c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f008 f927 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f008 f93e 	bl	800941a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800119e:	e114      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a57      	ldr	r2, [pc, #348]	; (8001304 <HAL_ADC_MspInit+0x224>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d150      	bne.n	800124c <HAL_ADC_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80011b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a fb66 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_ADC_MspInit+0xea>
      Error_Handler();
 80011c6:	f003 fddc 	bl	8004d82 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011d4:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_ADC_MspInit+0x228>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    hdma_adc3.Instance = DMA1_Channel2;
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_ADC_MspInit+0x230>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_ADC_MspInit+0x22c>)
 80011fc:	2225      	movs	r2, #37	; 0x25
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001224:	2220      	movs	r2, #32
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x22c>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800122e:	4837      	ldr	r0, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001230:	f008 fcc8 	bl	8009bc4 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x15e>
      Error_Handler();
 800123a:	f003 fda2 	bl	8004d82 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0x22c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6293      	str	r3, [r2, #40]	; 0x28
}
 800124a:	e0be      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
  else if(adcHandle->Instance==ADC4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_ADC_MspInit+0x234>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d164      	bne.n	8001320 <HAL_ADC_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800125c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f00a fb10 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_ADC_MspInit+0x196>
      Error_Handler();
 8001272:	f003 fd86 	bl	8004d82 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_ADC_MspInit+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_ADC_MspInit+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x1c0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_ADC_MspInit+0x218>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    hdma_adc4.Instance = DMA1_Channel3;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_ADC_MspInit+0x23c>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012a8:	2226      	movs	r2, #38	; 0x26
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012dc:	f008 fc72 	bl	8009bc4 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 80012e6:	f003 fd4c 	bl	8004d82 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_ADC_MspInit+0x238>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012f6:	e068      	b.n	80013ca <HAL_ADC_MspInit+0x2ea>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000534 	.word	0x20000534
 8001300:	40020008 	.word	0x40020008
 8001304:	50000400 	.word	0x50000400
 8001308:	200006b4 	.word	0x200006b4
 800130c:	20000594 	.word	0x20000594
 8001310:	4002001c 	.word	0x4002001c
 8001314:	50000500 	.word	0x50000500
 8001318:	200005f4 	.word	0x200005f4
 800131c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ADC_MspInit+0x2f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d14f      	bne.n	80013ca <HAL_ADC_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4618      	mov	r0, r3
 800133c:	f00a faa6 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0x26a>
      Error_Handler();
 8001346:	f003 fd1c 	bl	8004d82 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_ADC_MspInit+0x2f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x294>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_ADC_MspInit+0x2fc>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    hdma_adc5.Instance = DMA1_Channel4;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0x304>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800137c:	2227      	movs	r2, #39	; 0x27
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 8001394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001398:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013b0:	f008 fc08 	bl	8009bc4 <HAL_DMA_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_ADC_MspInit+0x2de>
      Error_Handler();
 80013ba:	f003 fce2 	bl	8004d82 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_ADC_MspInit+0x300>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013ca:	bf00      	nop
 80013cc:	3770      	adds	r7, #112	; 0x70
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	50000600 	.word	0x50000600
 80013d8:	200006b4 	.word	0x200006b4
 80013dc:	40021000 	.word	0x40021000
 80013e0:	20000654 	.word	0x20000654
 80013e4:	40020044 	.word	0x40020044

080013e8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f024 f924 	bl	8025642 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_DAC1_Init+0x80>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <MX_DAC1_Init+0x84>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_DAC1_Init+0x80>)
 8001402:	f008 f824 	bl	800944e <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f003 fcb9 	bl	8004d82 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001420:	2322      	movs	r3, #34	; 0x22
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_DAC1_Init+0x80>)
 800143c:	f008 f990 	bl	8009760 <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f003 fc9c 	bl	8004d82 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DAC1_Init+0x80>)
 8001452:	f008 f985 	bl	8009760 <HAL_DAC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800145c:	f003 fc91 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200006b8 	.word	0x200006b8
 800146c:	50000800 	.word	0x50000800

08001470 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f024 f8e0 	bl	8025642 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_DAC2_Init+0x6c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <MX_DAC2_Init+0x70>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_DAC2_Init+0x6c>)
 800148a:	f007 ffe0 	bl	800944e <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001494:	f003 fc75 	bl	8004d82 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001498:	2302      	movs	r3, #2
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC2_Init+0x6c>)
 80014c4:	f008 f94c 	bl	8009760 <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80014ce:	f003 fc58 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3730      	adds	r7, #48	; 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200006cc 	.word	0x200006cc
 80014e0:	50000c00 	.word	0x50000c00

080014e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DAC_MspInit+0x178>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d17b      	bne.n	80015fe <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2330      	movs	r3, #48	; 0x30
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f008 fe6c 	bl	800a228 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Channel1;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_DAC_MspInit+0x184>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001558:	2206      	movs	r2, #6
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800155e:	2210      	movs	r2, #16
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_DAC_MspInit+0x180>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800158c:	f008 fb1a 	bl	8009bc4 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001596:	f003 fbf4 	bl	8004d82 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a31      	ldr	r2, [pc, #196]	; (8001664 <HAL_DAC_MspInit+0x180>)
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_DAC_MspInit+0x180>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA2_Channel2;
 80015a6:	4b31      	ldr	r3, [pc, #196]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_DAC_MspInit+0x18c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80015e0:	4822      	ldr	r0, [pc, #136]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015e2:	f008 faef 	bl	8009bc4 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80015ec:	f003 fbc9 	bl	8004d82 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DAC_MspInit+0x188>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015fc:	e029      	b.n	8001652 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_DAC_MspInit+0x190>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d124      	bne.n	8001652 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_DAC_MspInit+0x17c>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f008 fdeb 	bl	800a228 <HAL_GPIO_Init>
}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	; 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	50000800 	.word	0x50000800
 8001660:	40021000 	.word	0x40021000
 8001664:	200006e0 	.word	0x200006e0
 8001668:	40020408 	.word	0x40020408
 800166c:	20000740 	.word	0x20000740
 8001670:	4002041c 	.word	0x4002041c
 8001674:	50000c00 	.word	0x50000c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <MX_DMA_Init+0xc8>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <MX_DMA_Init+0xc8>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <MX_DMA_Init+0xc8>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <MX_DMA_Init+0xc8>)
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	4a29      	ldr	r2, [pc, #164]	; (8001740 <MX_DMA_Init+0xc8>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6493      	str	r3, [r2, #72]	; 0x48
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <MX_DMA_Init+0xc8>)
 80016a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MX_DMA_Init+0xc8>)
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <MX_DMA_Init+0xc8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6493      	str	r3, [r2, #72]	; 0x48
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <MX_DMA_Init+0xc8>)
 80016bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	200b      	movs	r0, #11
 80016cc:	f007 fe8b 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016d0:	200b      	movs	r0, #11
 80016d2:	f007 fea2 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	200c      	movs	r0, #12
 80016dc:	f007 fe83 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016e0:	200c      	movs	r0, #12
 80016e2:	f007 fe9a 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	200d      	movs	r0, #13
 80016ec:	f007 fe7b 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016f0:	200d      	movs	r0, #13
 80016f2:	f007 fe92 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	200e      	movs	r0, #14
 80016fc:	f007 fe73 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001700:	200e      	movs	r0, #14
 8001702:	f007 fe8a 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2038      	movs	r0, #56	; 0x38
 800170c:	f007 fe6b 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001710:	2038      	movs	r0, #56	; 0x38
 8001712:	f007 fe82 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2039      	movs	r0, #57	; 0x39
 800171c:	f007 fe63 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001720:	2039      	movs	r0, #57	; 0x39
 8001722:	f007 fe7a 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	203a      	movs	r0, #58	; 0x3a
 800172c:	f007 fe5b 	bl	80093e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001730:	203a      	movs	r0, #58	; 0x3a
 8001732:	f007 fe72 	bl	800941a <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2220      	movs	r2, #32
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f023 ff76 	bl	8025642 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <MX_FMC_Init+0xcc>)
 8001758:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800175c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <MX_FMC_Init+0xcc>)
 8001760:	4a2c      	ldr	r2, [pc, #176]	; (8001814 <MX_FMC_Init+0xd0>)
 8001762:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <MX_FMC_Init+0xcc>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <MX_FMC_Init+0xcc>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <MX_FMC_Init+0xcc>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001776:	4b26      	ldr	r3, [pc, #152]	; (8001810 <MX_FMC_Init+0xcc>)
 8001778:	2210      	movs	r2, #16
 800177a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <MX_FMC_Init+0xcc>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_FMC_Init+0xcc>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_FMC_Init+0xcc>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <MX_FMC_Init+0xcc>)
 8001790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_FMC_Init+0xcc>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_FMC_Init+0xcc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_FMC_Init+0xcc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_FMC_Init+0xcc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_FMC_Init+0xcc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_FMC_Init+0xcc>)
 80017b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_FMC_Init+0xcc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_FMC_Init+0xcc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_FMC_Init+0xcc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80017d0:	230f      	movs	r3, #15
 80017d2:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80017d4:	230f      	movs	r3, #15
 80017d6:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 15;
 80017d8:	230f      	movs	r3, #15
 80017da:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80017e0:	230f      	movs	r3, #15
 80017e2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017e4:	2310      	movs	r3, #16
 80017e6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017e8:	2311      	movs	r3, #17
 80017ea:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <MX_FMC_Init+0xcc>)
 80017f8:	f00a feb8 	bl	800c56c <HAL_SRAM_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_FMC_Init+0xc2>
  {
    Error_Handler( );
 8001802:	f003 fabe 	bl	8004d82 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200007a0 	.word	0x200007a0
 8001814:	a0000104 	.word	0xa0000104

08001818 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_FMC_MspInit+0xa4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d13f      	bne.n	80018b4 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_FMC_MspInit+0xa4>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_FMC_MspInit+0xa8>)
 800183c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_FMC_MspInit+0xa8>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6513      	str	r3, [r2, #80]	; 0x50
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_FMC_MspInit+0xa8>)
 8001848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001856:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001864:	230c      	movs	r3, #12
 8001866:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4815      	ldr	r0, [pc, #84]	; (80018c4 <HAL_FMC_MspInit+0xac>)
 800186e:	f008 fcdb 	bl	800a228 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001872:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001876:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001884:	230c      	movs	r3, #12
 8001886:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4619      	mov	r1, r3
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <HAL_FMC_MspInit+0xb0>)
 800188e:	f008 fccb 	bl	800a228 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001892:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001896:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018a4:	230c      	movs	r3, #12
 80018a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <HAL_FMC_MspInit+0xb4>)
 80018ae:	f008 fcbb 	bl	800a228 <HAL_GPIO_Init>
 80018b2:	e000      	b.n	80018b6 <HAL_FMC_MspInit+0x9e>
    return;
 80018b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200007f8 	.word	0x200007f8
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48001400 	.word	0x48001400
 80018c8:	48001000 	.word	0x48001000
 80018cc:	48000c00 	.word	0x48000c00

080018d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018d8:	f7ff ff9e 	bl	8001818 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <MX_GPIO_Init+0xdc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <MX_GPIO_Init+0xdc>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_GPIO_Init+0xdc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_GPIO_Init+0xdc>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f248 3104 	movw	r1, #33540	; 0x8304
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f008 fdca 	bl	800a52c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 8001998:	f248 3304 	movw	r3, #33540	; 0x8304
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f008 fc38 	bl	800a228 <HAL_GPIO_Init>

}
 80019b8:	bf00      	nop
 80019ba:	3730      	adds	r7, #48	; 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80019dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80019e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00b      	beq.n	8001a04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80019ec:	e000      	b.n	80019f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80019ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80019f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f9      	beq.n	80019ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80019fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ffc9 	bl	80019c4 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
	}
    return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <get_systick>:

int32_t get_systick()
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	return SysTick->VAL;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <get_systick+0x14>)
 8001a52:	689b      	ldr	r3, [r3, #8]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <diff_systick>:

int32_t diff_systick( int32_t b, int32_t a )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
	int d = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
	if( b < a )
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	da04      	bge.n	8001a84 <diff_systick+0x20>
	{
	  d = a-b;
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e006      	b.n	8001a92 <diff_systick+0x2e>
	}
	else
	{
	  d = a+(SysTick->LOAD-b);
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <diff_systick+0x3c>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
	}
	return d;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <text_width_f>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color );
tRectangle get_char_rect( const tFont *pFont, uint8_t c );
tRectangle get_text_rect( const tFont *pFont, char *pString );

float text_width_f( nk_handle handle, float h, const char* t, int len )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ab0:	6079      	str	r1, [r7, #4]
 8001ab2:	603a      	str	r2, [r7, #0]

	return get_text_rect( &fontUbuntuBookRNormal16, t ).width;
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <text_width_f+0x34>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fc2e 	bl	800231e <get_text_rect>
 8001ac2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001ace:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	0802a478 	.word	0x0802a478

08001adc <lcd_config>:

void lcd_config( void );
void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color );

void lcd_config( void )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_8, GPIO_PIN_SET );
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f008 fd1e 	bl	800a52c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_RESET );
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f008 fd17 	bl	800a52c <HAL_GPIO_WritePin>
	HAL_Delay( 10 );
 8001afe:	200a      	movs	r0, #10
 8001b00:	f005 f842 	bl	8006b88 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_9, GPIO_PIN_SET );
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f008 fd0d 	bl	800a52c <HAL_GPIO_WritePin>
	HAL_Delay( 100 );
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f005 f838 	bl	8006b88 <HAL_Delay>

	*addr_cmd = 0x01;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <lcd_config+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 100 );
 8001b20:	2064      	movs	r0, #100	; 0x64
 8001b22:	f005 f831 	bl	8006b88 <HAL_Delay>
	*addr_cmd = 0x11;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <lcd_config+0xa0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2211      	movs	r2, #17
 8001b2c:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b2e:	200a      	movs	r0, #10
 8001b30:	f005 f82a 	bl	8006b88 <HAL_Delay>
	*addr_cmd = 0x3A;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <lcd_config+0xa0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	223a      	movs	r2, #58	; 0x3a
 8001b3a:	801a      	strh	r2, [r3, #0]
	*addr_data = 0x06;//0x05;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <lcd_config+0xa4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2206      	movs	r2, #6
 8001b42:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x36;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <lcd_config+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2236      	movs	r2, #54	; 0x36
 8001b4a:	801a      	strh	r2, [r3, #0]
	*addr_data = (0x01<<5)|(0x01<<6)|(0x01<<7);
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <lcd_config+0xa4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	22e0      	movs	r2, #224	; 0xe0
 8001b52:	801a      	strh	r2, [r3, #0]
	*addr_cmd = 0x29;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <lcd_config+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2229      	movs	r2, #41	; 0x29
 8001b5a:	801a      	strh	r2, [r3, #0]
	HAL_Delay( 10 );
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f005 f813 	bl	8006b88 <HAL_Delay>

	lcd_rect( 0, 0, 480, 320, 0x0000 );
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 f867 	bl	8001c44 <lcd_rect>
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <nk_colot_to_rgb666>:

uint32_t nk_colot_to_rgb666( struct nk_color color )
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	uint32_t rgb666 = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]

	color.r = (color.r*color.a)/256.0;
 8001b90:	793b      	ldrb	r3, [r7, #4]
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fceb 	bl	8000574 <__aeabi_i2d>
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <nk_colot_to_rgb666+0xbc>)
 8001ba4:	f7fe fe7a 	bl	800089c <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff f822 	bl	8000bf8 <__aeabi_d2uiz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	713b      	strb	r3, [r7, #4]
	color.g = (color.g*color.a)/256.0;
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fcd6 	bl	8000574 <__aeabi_i2d>
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <nk_colot_to_rgb666+0xbc>)
 8001bce:	f7fe fe65 	bl	800089c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7ff f80d 	bl	8000bf8 <__aeabi_d2uiz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	717b      	strb	r3, [r7, #5]
	color.b = (color.b*color.a)/256.0;
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcc1 	bl	8000574 <__aeabi_i2d>
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <nk_colot_to_rgb666+0xbc>)
 8001bf8:	f7fe fe50 	bl	800089c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe fff8 	bl	8000bf8 <__aeabi_d2uiz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	71bb      	strb	r3, [r7, #6]

	color.r >>= 2;
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	713b      	strb	r3, [r7, #4]
	color.g >>= 2;
 8001c16:	797b      	ldrb	r3, [r7, #5]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	717b      	strb	r3, [r7, #5]
	color.b >>= 2;
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	71bb      	strb	r3, [r7, #6]
	rgb666 = (color.r<<12) | (color.g<<6) | (color.b<<0);
 8001c26:	793b      	ldrb	r3, [r7, #4]
 8001c28:	031a      	lsls	r2, r3, #12
 8001c2a:	797b      	ldrb	r3, [r7, #5]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	79ba      	ldrb	r2, [r7, #6]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
	return rgb666;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40700000 	.word	0x40700000

08001c44 <lcd_rect>:

void lcd_rect( int16_t x, int16_t y, int16_t w, int16_t h, uint32_t color )
{
 8001c44:	b490      	push	{r4, r7}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	80fb      	strh	r3, [r7, #6]
 8001c56:	4603      	mov	r3, r0
 8001c58:	80bb      	strh	r3, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y0 = y;
 8001c66:	88bb      	ldrh	r3, [r7, #4]
 8001c68:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t x1 = x + w - 1;
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t y1 = y + h - 1;
 8001c78:	88ba      	ldrh	r2, [r7, #4]
 8001c7a:	883b      	ldrh	r3, [r7, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	843b      	strh	r3, [r7, #32]

	if( x0 < 0 )
 8001c86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da02      	bge.n	8001c94 <lcd_rect+0x50>
	{
		x0 = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c92:	e007      	b.n	8001ca4 <lcd_rect+0x60>
	}
	else if( x0 > 480 - 1 )
 8001c94:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c9c:	db02      	blt.n	8001ca4 <lcd_rect+0x60>
	{
		x0 = 480 - 1;
 8001c9e:	f240 13df 	movw	r3, #479	; 0x1df
 8001ca2:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	if( x1 < 0 )
 8001ca4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da02      	bge.n	8001cb2 <lcd_rect+0x6e>
	{
		x1 = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cb0:	e007      	b.n	8001cc2 <lcd_rect+0x7e>
	}
	else if( x1 > 480 - 1 )
 8001cb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001cb6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001cba:	db02      	blt.n	8001cc2 <lcd_rect+0x7e>
	{
		x1 = 480 - 1;
 8001cbc:	f240 13df 	movw	r3, #479	; 0x1df
 8001cc0:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 < 0 )
 8001cc2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da02      	bge.n	8001cd0 <lcd_rect+0x8c>
	{
		y0 = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001cce:	e007      	b.n	8001ce0 <lcd_rect+0x9c>
	}
	else if( y0 > 320 - 1 )
 8001cd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cd4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cd8:	db02      	blt.n	8001ce0 <lcd_rect+0x9c>
	{
		y0 = 320 - 1;
 8001cda:	f240 133f 	movw	r3, #319	; 0x13f
 8001cde:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( y1 < 0 )
 8001ce0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da02      	bge.n	8001cee <lcd_rect+0xaa>
	{
		y1 = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	843b      	strh	r3, [r7, #32]
 8001cec:	e007      	b.n	8001cfe <lcd_rect+0xba>
	}
	else if( y1 > 320 - 1 )
 8001cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cf2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cf6:	db02      	blt.n	8001cfe <lcd_rect+0xba>
	{
		y1 = 320 - 1;
 8001cf8:	f240 133f 	movw	r3, #319	; 0x13f
 8001cfc:	843b      	strh	r3, [r7, #32]
	}

	if( x0 > x1 )
 8001cfe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001d02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dd06      	ble.n	8001d18 <lcd_rect+0xd4>
	{
		int tmp = x0;
 8001d0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001d0e:	61bb      	str	r3, [r7, #24]
		x0 = x1;
 8001d10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d12:	84fb      	strh	r3, [r7, #38]	; 0x26
		x1 = tmp;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	if( y0 > y1 )
 8001d18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001d1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dd06      	ble.n	8001d32 <lcd_rect+0xee>
	{
		int tmp = y0;
 8001d24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d28:	617b      	str	r3, [r7, #20]
		y0 = y1;
 8001d2a:	8c3b      	ldrh	r3, [r7, #32]
 8001d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		y1 = tmp;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	843b      	strh	r3, [r7, #32]
	}

	w = x1 - x0 + 1;
 8001d32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8001d40:	8c3a      	ldrh	r2, [r7, #32]
 8001d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
	uint32_t n = w*h;
 8001d52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	613b      	str	r3, [r7, #16]

	uint16_t color_l = (color>>0)&0x1FF;
 8001d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d68:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	0a5b      	lsrs	r3, r3, #9
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d74:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <lcd_rect+0x1d8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	222a      	movs	r2, #42	; 0x2a
 8001d7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001d7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <lcd_rect+0x1dc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0a12      	lsrs	r2, r2, #8
 8001d86:	b292      	uxth	r2, r2
 8001d88:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001d8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <lcd_rect+0x1dc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	b292      	uxth	r2, r2
 8001d94:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001d96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <lcd_rect+0x1dc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0a12      	lsrs	r2, r2, #8
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001da2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <lcd_rect+0x1dc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	b292      	uxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <lcd_rect+0x1d8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	222b      	movs	r2, #43	; 0x2b
 8001db4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <lcd_rect+0x1dc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a12      	lsrs	r2, r2, #8
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <lcd_rect+0x1dc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001dce:	8c3a      	ldrh	r2, [r7, #32]
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <lcd_rect+0x1dc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0a12      	lsrs	r2, r2, #8
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001dda:	8c3a      	ldrh	r2, [r7, #32]
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <lcd_rect+0x1dc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	b292      	uxth	r2, r2
 8001de4:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <lcd_rect+0x1d8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	222c      	movs	r2, #44	; 0x2c
 8001dec:	801a      	strh	r2, [r3, #0]
	for( i=n ; i ; i-- )
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e00a      	b.n	8001e0a <lcd_rect+0x1c6>
	{
		*addr_data = color_l;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <lcd_rect+0x1dc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	89fa      	ldrh	r2, [r7, #14]
 8001dfa:	801a      	strh	r2, [r3, #0]
		*addr_data = color_h;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <lcd_rect+0x1dc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	89ba      	ldrh	r2, [r7, #12]
 8001e02:	801a      	strh	r2, [r3, #0]
	for( i=n ; i ; i-- )
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f1      	bne.n	8001df4 <lcd_rect+0x1b0>
	}
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc90      	pop	{r4, r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <lcd_set_pixel>:

void lcd_set_pixel( int16_t x, int16_t y, uint32_t color )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	603a      	str	r2, [r7, #0]
 8001e2e:	80fb      	strh	r3, [r7, #6]
 8001e30:	460b      	mov	r3, r1
 8001e32:	80bb      	strh	r3, [r7, #4]
	int16_t x0 = x;
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	82fb      	strh	r3, [r7, #22]
	int16_t y0 = y;
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	82bb      	strh	r3, [r7, #20]
	int16_t x1 = x + 1;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	827b      	strh	r3, [r7, #18]
	int16_t y1 = y + 1;
 8001e44:	88bb      	ldrh	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	823b      	strh	r3, [r7, #16]
	uint16_t color_l = (color>>0)&0x1FF;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e54:	81fb      	strh	r3, [r7, #14]
	uint16_t color_h = (color>>9)&0x1FF;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	0a5b      	lsrs	r3, r3, #9
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e60:	81bb      	strh	r3, [r7, #12]

	*addr_cmd = 0x2A;
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <lcd_set_pixel+0xd4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	222a      	movs	r2, #42	; 0x2a
 8001e68:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001e6a:	8afa      	ldrh	r2, [r7, #22]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <lcd_set_pixel+0xd8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0a12      	lsrs	r2, r2, #8
 8001e72:	b292      	uxth	r2, r2
 8001e74:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001e76:	8afa      	ldrh	r2, [r7, #22]
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <lcd_set_pixel+0xd8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001e82:	8a7a      	ldrh	r2, [r7, #18]
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <lcd_set_pixel+0xd8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0a12      	lsrs	r2, r2, #8
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001e8e:	8a7a      	ldrh	r2, [r7, #18]
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <lcd_set_pixel+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	b292      	uxth	r2, r2
 8001e98:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <lcd_set_pixel+0xd4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	222b      	movs	r2, #43	; 0x2b
 8001ea0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001ea2:	8aba      	ldrh	r2, [r7, #20]
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <lcd_set_pixel+0xd8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0a12      	lsrs	r2, r2, #8
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001eae:	8aba      	ldrh	r2, [r7, #20]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <lcd_set_pixel+0xd8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001eba:	8a3a      	ldrh	r2, [r7, #16]
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <lcd_set_pixel+0xd8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0a12      	lsrs	r2, r2, #8
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001ec6:	8a3a      	ldrh	r2, [r7, #16]
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <lcd_set_pixel+0xd8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <lcd_set_pixel+0xd4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	222c      	movs	r2, #44	; 0x2c
 8001ed8:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <lcd_set_pixel+0xd8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <lcd_set_pixel+0xd8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	89ba      	ldrh	r2, [r7, #12]
 8001ee8:	801a      	strh	r2, [r3, #0]
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <lcd_set_pixel_bench>:


int32_t lcd_set_pixel_bench( int16_t x, int16_t y, uint32_t color )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	603a      	str	r2, [r7, #0]
 8001f0a:	80fb      	strh	r3, [r7, #6]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	80bb      	strh	r3, [r7, #4]
	int32_t a, b, d;
	int16_t x0 = x;
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 8001f14:	88bb      	ldrh	r3, [r7, #4]
 8001f16:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + 4;
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + 4;
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	3304      	adds	r3, #4
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	833b      	strh	r3, [r7, #24]
	uint16_t color_l = (color>>0)&0x1FF;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f30:	82fb      	strh	r3, [r7, #22]
	uint16_t color_h = (color>>9)&0x1FF;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	0a5b      	lsrs	r3, r3, #9
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3c:	82bb      	strh	r3, [r7, #20]

	*addr_cmd = 0x2A;
 8001f3e:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <lcd_set_pixel_bench+0x1d8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	222a      	movs	r2, #42	; 0x2a
 8001f44:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 8001f46:	8bfa      	ldrh	r2, [r7, #30]
 8001f48:	4b64      	ldr	r3, [pc, #400]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0a12      	lsrs	r2, r2, #8
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 8001f52:	8bfa      	ldrh	r2, [r7, #30]
 8001f54:	4b61      	ldr	r3, [pc, #388]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 8001f5e:	8b7a      	ldrh	r2, [r7, #26]
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0a12      	lsrs	r2, r2, #8
 8001f66:	b292      	uxth	r2, r2
 8001f68:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 8001f6a:	8b7a      	ldrh	r2, [r7, #26]
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	b292      	uxth	r2, r2
 8001f74:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 8001f76:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <lcd_set_pixel_bench+0x1d8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	222b      	movs	r2, #43	; 0x2b
 8001f7c:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 8001f7e:	8bba      	ldrh	r2, [r7, #28]
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0a12      	lsrs	r2, r2, #8
 8001f86:	b292      	uxth	r2, r2
 8001f88:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8001f8a:	8bba      	ldrh	r2, [r7, #28]
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	b292      	uxth	r2, r2
 8001f94:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 8001f96:	8b3a      	ldrh	r2, [r7, #24]
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0a12      	lsrs	r2, r2, #8
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8001fa2:	8b3a      	ldrh	r2, [r7, #24]
 8001fa4:	4b4d      	ldr	r3, [pc, #308]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	b292      	uxth	r2, r2
 8001fac:	801a      	strh	r2, [r3, #0]

	a = get_systick();
 8001fae:	f7ff fd4d 	bl	8001a4c <get_systick>
 8001fb2:	6138      	str	r0, [r7, #16]
	*addr_cmd = 0x2C;
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <lcd_set_pixel_bench+0x1d8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	222c      	movs	r2, #44	; 0x2c
 8001fba:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fbc:	4b47      	ldr	r3, [pc, #284]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	8afa      	ldrh	r2, [r7, #22]
 8001fc2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fc4:	4b45      	ldr	r3, [pc, #276]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	8aba      	ldrh	r2, [r7, #20]
 8001fca:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fcc:	4b43      	ldr	r3, [pc, #268]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	8afa      	ldrh	r2, [r7, #22]
 8001fd2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	8aba      	ldrh	r2, [r7, #20]
 8001fda:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	8afa      	ldrh	r2, [r7, #22]
 8001fe2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	8aba      	ldrh	r2, [r7, #20]
 8001fea:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 8001fec:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	8afa      	ldrh	r2, [r7, #22]
 8001ff2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	8aba      	ldrh	r2, [r7, #20]
 8001ffa:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	8afa      	ldrh	r2, [r7, #22]
 8002002:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	8aba      	ldrh	r2, [r7, #20]
 800200a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	8afa      	ldrh	r2, [r7, #22]
 8002012:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002014:	4b31      	ldr	r3, [pc, #196]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	8aba      	ldrh	r2, [r7, #20]
 800201a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800201c:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	8afa      	ldrh	r2, [r7, #22]
 8002022:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	8aba      	ldrh	r2, [r7, #20]
 800202a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	8afa      	ldrh	r2, [r7, #22]
 8002032:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	8aba      	ldrh	r2, [r7, #20]
 800203a:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	8afa      	ldrh	r2, [r7, #22]
 8002042:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	8aba      	ldrh	r2, [r7, #20]
 800204a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	8afa      	ldrh	r2, [r7, #22]
 8002052:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	8aba      	ldrh	r2, [r7, #20]
 800205a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	8afa      	ldrh	r2, [r7, #22]
 8002062:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	8aba      	ldrh	r2, [r7, #20]
 800206a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	8afa      	ldrh	r2, [r7, #22]
 8002072:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	8aba      	ldrh	r2, [r7, #20]
 800207a:	801a      	strh	r2, [r3, #0]

	*addr_data = color_l;
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	8afa      	ldrh	r2, [r7, #22]
 8002082:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	8aba      	ldrh	r2, [r7, #20]
 800208a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	8afa      	ldrh	r2, [r7, #22]
 8002092:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	8aba      	ldrh	r2, [r7, #20]
 800209a:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	8afa      	ldrh	r2, [r7, #22]
 80020a2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	8aba      	ldrh	r2, [r7, #20]
 80020aa:	801a      	strh	r2, [r3, #0]
	*addr_data = color_l;
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	8afa      	ldrh	r2, [r7, #22]
 80020b2:	801a      	strh	r2, [r3, #0]
	*addr_data = color_h;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <lcd_set_pixel_bench+0x1dc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	8aba      	ldrh	r2, [r7, #20]
 80020ba:	801a      	strh	r2, [r3, #0]
	b = get_systick();
 80020bc:	f7ff fcc6 	bl	8001a4c <get_systick>
 80020c0:	60f8      	str	r0, [r7, #12]
	d = diff_systick(b,a);
 80020c2:	6939      	ldr	r1, [r7, #16]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fccd 	bl	8001a64 <diff_systick>
 80020ca:	60b8      	str	r0, [r7, #8]
	return d;
 80020cc:	68bb      	ldr	r3, [r7, #8]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <lcd_text>:
void lcd_text( const tFramebuf *fb, uint16_t x0, uint16_t y0, char *str, uint32_t color )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	4613      	mov	r3, r2
 80020f0:	813b      	strh	r3, [r7, #8]
	for(; *str; ++str) {
 80020f2:	e02a      	b.n	800214a <lcd_text+0x6a>
	        // get char and make sure its in range of font
	        int chr = *(uint8_t *)str;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	61fb      	str	r3, [r7, #28]
	        if (chr < 32 || chr > 127) {
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	2b1f      	cmp	r3, #31
 80020fe:	dd02      	ble.n	8002106 <lcd_text+0x26>
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b7f      	cmp	r3, #127	; 0x7f
 8002104:	dd01      	ble.n	800210a <lcd_text+0x2a>
	            chr = 127;
 8002106:	237f      	movs	r3, #127	; 0x7f
 8002108:	61fb      	str	r3, [r7, #28]
	        }
	        draw_char( fb, &fontUbuntuBookRNormal16, x0, y0, chr, color );
 800210a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800210e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	4603      	mov	r3, r0
 800211e:	460a      	mov	r2, r1
 8002120:	490e      	ldr	r1, [pc, #56]	; (800215c <lcd_text+0x7c>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f81c 	bl	8002160 <draw_char>
	        x0 += get_char_rect( &fontUbuntuBookRNormal16, chr ).width;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	490a      	ldr	r1, [pc, #40]	; (800215c <lcd_text+0x7c>)
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f8c9 	bl	80022ca <get_char_rect>
 8002138:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800213c:	b29a      	uxth	r2, r3
 800213e:	897b      	ldrh	r3, [r7, #10]
 8002140:	4413      	add	r3, r2
 8002142:	817b      	strh	r3, [r7, #10]
	for(; *str; ++str) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1d0      	bne.n	80020f4 <lcd_text+0x14>
	}
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	0802a478 	.word	0x0802a478

08002160 <draw_char>:
void draw_char( const tFramebuf *fb, const tFont *pFont, int16_t x0, int16_t y0, uint8_t c, uint32_t color )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	460b      	mov	r3, r1
 8002170:	80fb      	strh	r3, [r7, #6]
 8002172:	4613      	mov	r3, r2
 8002174:	80bb      	strh	r3, [r7, #4]
    int16_t x, y, w, bitmap, b;
    int16_t px, py;
    const tGlyph *pGlyph;

    pGlyph = pFont->pGlyphs[c-32];
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800217e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002182:	3b20      	subs	r3, #32
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	61fb      	str	r3, [r7, #28]

    y0 += pFont->bbxh;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002192:	b29a      	uxth	r2, r3
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	80bb      	strh	r3, [r7, #4]
    y0 -= pFont->descent;
 800219c:	88ba      	ldrh	r2, [r7, #4]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	79db      	ldrb	r3, [r3, #7]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxh;
 80021aa:	88ba      	ldrh	r2, [r7, #4]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	80bb      	strh	r3, [r7, #4]
    y0 -= pGlyph->bbxy;
 80021ba:	88ba      	ldrh	r2, [r7, #4]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	80bb      	strh	r3, [r7, #4]

    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 80021ca:	2300      	movs	r3, #0
 80021cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021ce:	e06f      	b.n	80022b0 <draw_char+0x150>
    {
        py = y0+y;
 80021d0:	88ba      	ldrh	r2, [r7, #4]
 80021d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021d4:	4413      	add	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	837b      	strh	r3, [r7, #26]

        w = (pGlyph->bbxw-1)/8+1;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da00      	bge.n	80021e8 <draw_char+0x88>
 80021e6:	3307      	adds	r3, #7
 80021e8:	10db      	asrs	r3, r3, #3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	833b      	strh	r3, [r7, #24]

        int16_t yw = y*w;
 80021f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021f4:	8b3b      	ldrh	r3, [r7, #24]
 80021f6:	fb12 f303 	smulbb	r3, r2, r3
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	82fb      	strh	r3, [r7, #22]
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 80021fe:	2300      	movs	r3, #0
 8002200:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002202:	e047      	b.n	8002294 <draw_char+0x134>
        {
            bitmap = pGlyph->pBitmap[yw+x/8];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800220c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002210:	2b00      	cmp	r3, #0
 8002212:	da00      	bge.n	8002216 <draw_char+0xb6>
 8002214:	3307      	adds	r3, #7
 8002216:	10db      	asrs	r3, r3, #3
 8002218:	b21b      	sxth	r3, r3
 800221a:	440b      	add	r3, r1
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	82bb      	strh	r3, [r7, #20]

            for( b = 0 ; b < 8 ; b++ )
 8002222:	2300      	movs	r3, #0
 8002224:	847b      	strh	r3, [r7, #34]	; 0x22
 8002226:	e02b      	b.n	8002280 <draw_char+0x120>
            {
                if( x+b >= pGlyph->bbxw )
 8002228:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800222c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002230:	4413      	add	r3, r2
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f992 2009 	ldrsb.w	r2, [r2, #9]
 8002238:	4293      	cmp	r3, r2
 800223a:	da26      	bge.n	800228a <draw_char+0x12a>
                {
                    break;
                }

                px = x0+x+b;
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002240:	4413      	add	r3, r2
 8002242:	b29a      	uxth	r2, r3
 8002244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002246:	4413      	add	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	827b      	strh	r3, [r7, #18]

                if( bitmap & (0x80>>b) )
 800224c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002250:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	fa41 f303 	asr.w	r3, r1, r3
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <draw_char+0x114>
                {
                    //set_pixel( px, py, color );
                    //lcd_rect( px, py, 1, 1, color);
                	setpixel_checked(fb, px, py, color, 1);
 8002260:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002264:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226a:	2001      	movs	r0, #1
 800226c:	9000      	str	r0, [sp, #0]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f00b fe4e 	bl	800df10 <setpixel_checked>
            for( b = 0 ; b < 8 ; b++ )
 8002274:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002278:	b29b      	uxth	r3, r3
 800227a:	3301      	adds	r3, #1
 800227c:	b29b      	uxth	r3, r3
 800227e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002280:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002284:	2b07      	cmp	r3, #7
 8002286:	ddcf      	ble.n	8002228 <draw_char+0xc8>
 8002288:	e000      	b.n	800228c <draw_char+0x12c>
                    break;
 800228a:	bf00      	nop
        for( x = 0 ; x < pGlyph->bbxw ; x+=8 )
 800228c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800228e:	3308      	adds	r3, #8
 8002290:	b29b      	uxth	r3, r3
 8002292:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800229a:	b21b      	sxth	r3, r3
 800229c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbaf      	blt.n	8002204 <draw_char+0xa4>
    for( y = 0 ; y < pGlyph->bbxh ; y++ )
 80022a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80022bc:	429a      	cmp	r2, r3
 80022be:	db87      	blt.n	80021d0 <draw_char+0x70>
                }
            }
        }
    }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <get_char_rect>:


tRectangle get_char_rect( const tFont *pFont, uint8_t c )
{
 80022ca:	b480      	push	{r7}
 80022cc:	b087      	sub	sp, #28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
    tRectangle rect = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]

    rect.width = pFont->pGlyphs[c-32]->dwidthx;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	3b20      	subs	r3, #32
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	79db      	ldrb	r3, [r3, #7]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	82bb      	strh	r3, [r7, #20]
    rect.height = pFont->bbxh;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002300:	b21b      	sxth	r3, r3
 8002302:	82fb      	strh	r3, [r7, #22]
    return rect;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	461a      	mov	r2, r3
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	cb03      	ldmia	r3!, {r0, r1}
 800230e:	6010      	str	r0, [r2, #0]
 8002310:	6051      	str	r1, [r2, #4]
}
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <get_text_rect>:

tRectangle get_text_rect( const tFont *pFont, char *pString )
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08a      	sub	sp, #40	; 0x28
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
	uint8_t i;
	tRectangle rect = {0};
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]

	rect.height = pFont->bbxh;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800233a:	b21b      	sxth	r3, r3
 800233c:	837b      	strh	r3, [r7, #26]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002344:	e019      	b.n	800237a <get_text_rect+0x5c>
	{
		rect.width += get_char_rect( pFont, pString[i] ).width;
 8002346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffb7 	bl	80022ca <get_char_rect>
 800235c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002360:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002364:	b292      	uxth	r2, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	b21b      	sxth	r3, r3
 800236e:	833b      	strh	r3, [r7, #24]
	for( i = 0 ; pString[i] != '\0' ; i++ )
 8002370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002374:	3301      	adds	r3, #1
 8002376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800237a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1de      	bne.n	8002346 <get_text_rect+0x28>
    }

    return rect;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	461a      	mov	r2, r3
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	cb03      	ldmia	r3!, {r0, r1}
 8002392:	6010      	str	r0, [r2, #0]
 8002394:	6051      	str	r1, [r2, #4]
}
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <lcd_bmp>:
	        }
	    }
}

void lcd_bmp( int16_t x, int16_t y, int16_t w, int16_t h, uint8_t *buf )
{
 80023a0:	b490      	push	{r4, r7}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	80fb      	strh	r3, [r7, #6]
 80023b2:	4603      	mov	r3, r0
 80023b4:	80bb      	strh	r3, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	803b      	strh	r3, [r7, #0]
	int16_t x0 = x;
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	83fb      	strh	r3, [r7, #30]
	int16_t y0 = y;
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	83bb      	strh	r3, [r7, #28]
	int16_t x1 = x + w - 1;
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	4413      	add	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	837b      	strh	r3, [r7, #26]
	int16_t y1 = y + h - 1;
 80023d4:	88ba      	ldrh	r2, [r7, #4]
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	833b      	strh	r3, [r7, #24]

	if( x0 < 0 )
 80023e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da02      	bge.n	80023f0 <lcd_bmp+0x50>
	{
		x0 = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	83fb      	strh	r3, [r7, #30]
 80023ee:	e005      	b.n	80023fc <lcd_bmp+0x5c>
	}
	else if( x0 > 240 - 1 )
 80023f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023f4:	2bef      	cmp	r3, #239	; 0xef
 80023f6:	dd01      	ble.n	80023fc <lcd_bmp+0x5c>
	{
		x0 = 240 - 1;
 80023f8:	23ef      	movs	r3, #239	; 0xef
 80023fa:	83fb      	strh	r3, [r7, #30]
	}

	if( x1 < 0 )
 80023fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002400:	2b00      	cmp	r3, #0
 8002402:	da02      	bge.n	800240a <lcd_bmp+0x6a>
	{
		x1 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	837b      	strh	r3, [r7, #26]
 8002408:	e005      	b.n	8002416 <lcd_bmp+0x76>
	}
	else if( x1 > 240 - 1 )
 800240a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800240e:	2bef      	cmp	r3, #239	; 0xef
 8002410:	dd01      	ble.n	8002416 <lcd_bmp+0x76>
	{
		x1 = 240 - 1;
 8002412:	23ef      	movs	r3, #239	; 0xef
 8002414:	837b      	strh	r3, [r7, #26]
	}

	if( y0 < 0 )
 8002416:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da02      	bge.n	8002424 <lcd_bmp+0x84>
	{
		y0 = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	83bb      	strh	r3, [r7, #28]
 8002422:	e007      	b.n	8002434 <lcd_bmp+0x94>
	}
	else if( y0 > 320 - 1 )
 8002424:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002428:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800242c:	db02      	blt.n	8002434 <lcd_bmp+0x94>
	{
		y0 = 320 - 1;
 800242e:	f240 133f 	movw	r3, #319	; 0x13f
 8002432:	83bb      	strh	r3, [r7, #28]
	}

	if( y1 < 0 )
 8002434:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	da02      	bge.n	8002442 <lcd_bmp+0xa2>
	{
		y1 = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	833b      	strh	r3, [r7, #24]
 8002440:	e007      	b.n	8002452 <lcd_bmp+0xb2>
	}
	else if( y1 > 320 - 1 )
 8002442:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002446:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800244a:	db02      	blt.n	8002452 <lcd_bmp+0xb2>
	{
		y1 = 320 - 1;
 800244c:	f240 133f 	movw	r3, #319	; 0x13f
 8002450:	833b      	strh	r3, [r7, #24]
	}

	if( x0 > x1 )
 8002452:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002456:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800245a:	429a      	cmp	r2, r3
 800245c:	dd06      	ble.n	800246c <lcd_bmp+0xcc>
	{
		int tmp = x0;
 800245e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002462:	613b      	str	r3, [r7, #16]
		x0 = x1;
 8002464:	8b7b      	ldrh	r3, [r7, #26]
 8002466:	83fb      	strh	r3, [r7, #30]
		x1 = tmp;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	837b      	strh	r3, [r7, #26]
	}

	if( y0 > y1 )
 800246c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002470:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002474:	429a      	cmp	r2, r3
 8002476:	dd06      	ble.n	8002486 <lcd_bmp+0xe6>
	{
		int tmp = y0;
 8002478:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800247c:	60fb      	str	r3, [r7, #12]
		y0 = y1;
 800247e:	8b3b      	ldrh	r3, [r7, #24]
 8002480:	83bb      	strh	r3, [r7, #28]
		y1 = tmp;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	833b      	strh	r3, [r7, #24]
	}

	w = x1 - x0 + 1;
 8002486:	8b7a      	ldrh	r2, [r7, #26]
 8002488:	8bfb      	ldrh	r3, [r7, #30]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b29b      	uxth	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	b29b      	uxth	r3, r3
 8002492:	807b      	strh	r3, [r7, #2]
	h = y1 - y0 + 1;
 8002494:	8b3a      	ldrh	r2, [r7, #24]
 8002496:	8bbb      	ldrh	r3, [r7, #28]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	b29b      	uxth	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	b29b      	uxth	r3, r3
 80024a0:	803b      	strh	r3, [r7, #0]

	uint32_t i = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
	uint32_t n = w*h;
 80024a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	60bb      	str	r3, [r7, #8]

	//uint16_t color_l = (color>>0)&0x1FF;
	//uint16_t color_h = (color>>9)&0x1FF;

	*addr_cmd = 0x2A;
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <lcd_bmp+0x1d0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	222a      	movs	r2, #42	; 0x2a
 80024ba:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>8)&0xFF;
 80024bc:	8bfa      	ldrh	r2, [r7, #30]
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <lcd_bmp+0x1d4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0a12      	lsrs	r2, r2, #8
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
	*addr_data = (x0>>0)&0xFF;
 80024c8:	8bfa      	ldrh	r2, [r7, #30]
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <lcd_bmp+0x1d4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	b292      	uxth	r2, r2
 80024d2:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>8)&0xFF;
 80024d4:	8b7a      	ldrh	r2, [r7, #26]
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <lcd_bmp+0x1d4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0a12      	lsrs	r2, r2, #8
 80024dc:	b292      	uxth	r2, r2
 80024de:	801a      	strh	r2, [r3, #0]
	*addr_data = (x1>>0)&0xFF;
 80024e0:	8b7a      	ldrh	r2, [r7, #26]
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <lcd_bmp+0x1d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	b292      	uxth	r2, r2
 80024ea:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2B;
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <lcd_bmp+0x1d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	222b      	movs	r2, #43	; 0x2b
 80024f2:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>8)&0xFF;
 80024f4:	8bba      	ldrh	r2, [r7, #28]
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <lcd_bmp+0x1d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0a12      	lsrs	r2, r2, #8
 80024fc:	b292      	uxth	r2, r2
 80024fe:	801a      	strh	r2, [r3, #0]
	*addr_data = (y0>>0)&0xFF;
 8002500:	8bba      	ldrh	r2, [r7, #28]
 8002502:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <lcd_bmp+0x1d4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	b292      	uxth	r2, r2
 800250a:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>8)&0xFF;
 800250c:	8b3a      	ldrh	r2, [r7, #24]
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <lcd_bmp+0x1d4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0a12      	lsrs	r2, r2, #8
 8002514:	b292      	uxth	r2, r2
 8002516:	801a      	strh	r2, [r3, #0]
	*addr_data = (y1>>0)&0xFF;
 8002518:	8b3a      	ldrh	r2, [r7, #24]
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <lcd_bmp+0x1d4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	b292      	uxth	r2, r2
 8002522:	801a      	strh	r2, [r3, #0]

	*addr_cmd = 0x2C;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <lcd_bmp+0x1d0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	222c      	movs	r2, #44	; 0x2c
 800252a:	801a      	strh	r2, [r3, #0]
	for( i = n ; i ; i-- )
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e014      	b.n	800255c <lcd_bmp+0x1bc>
	{
		*addr_data = *buf;
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <lcd_bmp+0x1d4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b292      	uxth	r2, r2
 800253c:	801a      	strh	r2, [r3, #0]
		buf++;
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	3301      	adds	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
		*addr_data = *buf;
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <lcd_bmp+0x1d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b292      	uxth	r2, r2
 800254e:	801a      	strh	r2, [r3, #0]
		buf++;
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	3301      	adds	r3, #1
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
	for( i = n ; i ; i-- )
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3b01      	subs	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e7      	bne.n	8002532 <lcd_bmp+0x192>
	}
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bc90      	pop	{r4, r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <oscilloscope_process>:
    int draw_signals;
};
int visible = 0;
struct nk_rect keypad_size = {35, 35, 142, 208};
void oscilloscope_process(struct Oscilloscope *osc, struct nk_context *ctx)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b0fc      	sub	sp, #496	; 0x1f0
 800257c:	af04      	add	r7, sp, #16
 800257e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002582:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002586:	6018      	str	r0, [r3, #0]
 8002588:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800258c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002590:	6019      	str	r1, [r3, #0]
	visible = 0;
 8002592:	4b6d      	ldr	r3, [pc, #436]	; (8002748 <oscilloscope_process+0x1d0>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
	if( nk_begin(ctx, "STM32G4 Scope", nk_rect(0, 0, 240, 320), NK_WINDOW_MINIMIZABLE ) )
 8002598:	eddf 1a6c 	vldr	s3, [pc, #432]	; 800274c <oscilloscope_process+0x1d4>
 800259c:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8002750 <oscilloscope_process+0x1d8>
 80025a0:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8002754 <oscilloscope_process+0x1dc>
 80025a4:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002754 <oscilloscope_process+0x1dc>
 80025a8:	f014 f94c 	bl	8016844 <nk_rect>
 80025ac:	eeb0 6a40 	vmov.f32	s12, s0
 80025b0:	eef0 6a60 	vmov.f32	s13, s1
 80025b4:	eeb0 7a41 	vmov.f32	s14, s2
 80025b8:	eef0 7a61 	vmov.f32	s15, s3
 80025bc:	ed87 6a59 	vstr	s12, [r7, #356]	; 0x164
 80025c0:	edc7 6a5a 	vstr	s13, [r7, #360]	; 0x168
 80025c4:	ed87 7a5b 	vstr	s14, [r7, #364]	; 0x16c
 80025c8:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
 80025cc:	ed97 6a59 	vldr	s12, [r7, #356]	; 0x164
 80025d0:	edd7 6a5a 	vldr	s13, [r7, #360]	; 0x168
 80025d4:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 80025d8:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 80025dc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80025e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025e4:	2210      	movs	r2, #16
 80025e6:	eeb0 0a46 	vmov.f32	s0, s12
 80025ea:	eef0 0a66 	vmov.f32	s1, s13
 80025ee:	eeb0 1a47 	vmov.f32	s2, s14
 80025f2:	eef0 1a67 	vmov.f32	s3, s15
 80025f6:	4958      	ldr	r1, [pc, #352]	; (8002758 <oscilloscope_process+0x1e0>)
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	f021 fbe4 	bl	8023dc6 <nk_begin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	f001 85ac 	beq.w	800415e <oscilloscope_process+0x1be6>
	{
		visible = 1;
 8002606:	4b50      	ldr	r3, [pc, #320]	; (8002748 <oscilloscope_process+0x1d0>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
        osc->draw_bg = nk_true;
 800260c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002610:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        if( nk_tree_push( ctx, NK_TREE_TAB, "Acquire", NK_MAXIMIZED) ){
 800261c:	484f      	ldr	r0, [pc, #316]	; (800275c <oscilloscope_process+0x1e4>)
 800261e:	f020 f85b 	bl	80226d8 <nk_strlen>
 8002622:	4603      	mov	r3, r0
 8002624:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002628:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 800262c:	f44f 721a 	mov.w	r2, #616	; 0x268
 8002630:	9202      	str	r2, [sp, #8]
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	4b49      	ldr	r3, [pc, #292]	; (800275c <oscilloscope_process+0x1e4>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2301      	movs	r3, #1
 800263a:	4a49      	ldr	r2, [pc, #292]	; (8002760 <oscilloscope_process+0x1e8>)
 800263c:	2101      	movs	r1, #1
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	f01f fcf0 	bl	8022024 <nk_tree_push_hashed>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a5 	beq.w	8002796 <oscilloscope_process+0x21e>
            osc->draw_bg = nk_false;
 800264c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002650:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 60, 60, 60});
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <oscilloscope_process+0x1ec>)
 800265e:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 8002662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002668:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800266c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002670:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002674:	2204      	movs	r2, #4
 8002676:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800267a:	2101      	movs	r1, #1
 800267c:	6800      	ldr	r0, [r0, #0]
 800267e:	f013 fac5 	bl	8015c0c <nk_layout_row>
            if (osc->acquire_run) {
 8002682:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002686:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d012      	beq.n	80026b8 <oscilloscope_process+0x140>
                if (nk_button_label(ctx, "Stop")) {
 8002692:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002696:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800269a:	4933      	ldr	r1, [pc, #204]	; (8002768 <oscilloscope_process+0x1f0>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	f00d fa1f 	bl	800fae0 <nk_button_label>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d019      	beq.n	80026dc <oscilloscope_process+0x164>
                    osc->acquire_run = nk_false;
 80026a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e011      	b.n	80026dc <oscilloscope_process+0x164>
                }
            } else {
                if (nk_button_label(ctx, "Run")) {
 80026b8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026c0:	492a      	ldr	r1, [pc, #168]	; (800276c <oscilloscope_process+0x1f4>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	f00d fa0c 	bl	800fae0 <nk_button_label>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <oscilloscope_process+0x164>
                    osc->acquire_run = nk_true;
 80026ce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
                }
            }

            if (nk_button_label(ctx, "Single")) {
 80026dc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026e4:	4922      	ldr	r1, [pc, #136]	; (8002770 <oscilloscope_process+0x1f8>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	f00d f9fa 	bl	800fae0 <nk_button_label>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <oscilloscope_process+0x188>
                osc->acquire_single = nk_true;
 80026f2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80026f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	605a      	str	r2, [r3, #4]
            }

            if (nk_button_label(ctx, "Draw")) {
 8002700:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002704:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002708:	491a      	ldr	r1, [pc, #104]	; (8002774 <oscilloscope_process+0x1fc>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f00d f9e8 	bl	800fae0 <nk_button_label>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d038      	beq.n	8002788 <oscilloscope_process+0x210>
                if (osc->draw_signals + 1 < 3) {
 8002716:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800271a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002724:	2b01      	cmp	r3, #1
 8002726:	dc27      	bgt.n	8002778 <oscilloscope_process+0x200>
                    osc->draw_signals += 1;
 8002728:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800272c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800273c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002746:	e01f      	b.n	8002788 <oscilloscope_process+0x210>
 8002748:	200007fc 	.word	0x200007fc
 800274c:	43a00000 	.word	0x43a00000
 8002750:	43700000 	.word	0x43700000
 8002754:	00000000 	.word	0x00000000
 8002758:	08028268 	.word	0x08028268
 800275c:	08028278 	.word	0x08028278
 8002760:	08028290 	.word	0x08028290
 8002764:	0802843c 	.word	0x0802843c
 8002768:	08028298 	.word	0x08028298
 800276c:	080282a0 	.word	0x080282a0
 8002770:	080282a4 	.word	0x080282a4
 8002774:	080282ac 	.word	0x080282ac
                } else {
                    osc->draw_signals = 0;
 8002778:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800277c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                }
            }
            nk_tree_pop(ctx);
 8002788:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800278c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f01f fc64 	bl	802205e <nk_tree_pop>
        }

        {
        	if( nk_tree_push( ctx, NK_TREE_TAB, "Horizontal", NK_MINIMIZED) ){
 8002796:	48a8      	ldr	r0, [pc, #672]	; (8002a38 <oscilloscope_process+0x4c0>)
 8002798:	f01f ff9e 	bl	80226d8 <nk_strlen>
 800279c:	4603      	mov	r3, r0
 800279e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80027a2:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80027a6:	f44f 7221 	mov.w	r2, #644	; 0x284
 80027aa:	9202      	str	r2, [sp, #8]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	4ba2      	ldr	r3, [pc, #648]	; (8002a38 <oscilloscope_process+0x4c0>)
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	4aa1      	ldr	r2, [pc, #644]	; (8002a3c <oscilloscope_process+0x4c4>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	6800      	ldr	r0, [r0, #0]
 80027ba:	f01f fc33 	bl	8022024 <nk_tree_push_hashed>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 81cf 	beq.w	8002b64 <oscilloscope_process+0x5ec>
        		nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80027c6:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <oscilloscope_process+0x4c8>)
 80027c8:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 80027cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027d2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80027d6:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80027da:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80027de:	2204      	movs	r2, #4
 80027e0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80027e4:	2101      	movs	r1, #1
 80027e6:	6800      	ldr	r0, [r0, #0]
 80027e8:	f013 fa10 	bl	8015c0c <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80027ec:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80027f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027f4:	2211      	movs	r2, #17
 80027f6:	4993      	ldr	r1, [pc, #588]	; (8002a44 <oscilloscope_process+0x4cc>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	f01d f9a7 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80027fe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002802:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002806:	2101      	movs	r1, #1
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	f00d f865 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 800280e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002812:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002816:	2109      	movs	r1, #9
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f00d fa17 	bl	800fc4c <nk_button_symbol>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d011      	beq.n	8002848 <oscilloscope_process+0x2d0>
        		{
        			osc->horizontal_offset -= 1;
 8002824:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002828:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800283a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800283e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	edc3 7a02 	vstr	s15, [r3, #8]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->horizontal_offset);
 8002848:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800284c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe9f 	bl	8000598 <__aeabi_f2d>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	f107 0008 	add.w	r0, r7, #8
 8002862:	4979      	ldr	r1, [pc, #484]	; (8002a48 <oscilloscope_process+0x4d0>)
 8002864:	f022 fe8a 	bl	802557c <siprintf>

        		static int show_app_about = 0;
        		show_app_about |= nk_button_label( ctx, combo_buffer );
 8002868:	f107 0208 	add.w	r2, r7, #8
 800286c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002870:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002874:	4611      	mov	r1, r2
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	f00d f932 	bl	800fae0 <nk_button_label>
 800287c:	4602      	mov	r2, r0
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <oscilloscope_process+0x4d4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	4a71      	ldr	r2, [pc, #452]	; (8002a4c <oscilloscope_process+0x4d4>)
 8002886:	6013      	str	r3, [r2, #0]

                if (show_app_about)
 8002888:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <oscilloscope_process+0x4d4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 810a 	beq.w	8002aa6 <oscilloscope_process+0x52e>
                {
                    /* about popup */
                    //static struct nk_rect s = {20, 20, 200, 200};
                    if (nk_popup_begin(ctx, NK_POPUP_STATIC, "Keypad", NK_WINDOW_CLOSABLE | NK_WINDOW_NO_SCROLLBAR, keypad_size ) )
 8002892:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <oscilloscope_process+0x4d8>)
 8002894:	ed93 6a00 	vldr	s12, [r3]
 8002898:	edd3 6a01 	vldr	s13, [r3, #4]
 800289c:	ed93 7a02 	vldr	s14, [r3, #8]
 80028a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80028a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80028a8:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 80028ac:	eeb0 0a46 	vmov.f32	s0, s12
 80028b0:	eef0 0a66 	vmov.f32	s1, s13
 80028b4:	eeb0 1a47 	vmov.f32	s2, s14
 80028b8:	eef0 1a67 	vmov.f32	s3, s15
 80028bc:	2328      	movs	r3, #40	; 0x28
 80028be:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <oscilloscope_process+0x4dc>)
 80028c0:	2100      	movs	r1, #0
 80028c2:	6800      	ldr	r0, [r0, #0]
 80028c4:	f016 fe20 	bl	8019508 <nk_popup_begin>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80e8 	beq.w	8002aa0 <oscilloscope_process+0x528>
                    {
                    	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){30+30+30+30});
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <oscilloscope_process+0x4e0>)
 80028d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80028d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028da:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80028de:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80028e2:	2201      	movs	r2, #1
 80028e4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80028e8:	2101      	movs	r1, #1
 80028ea:	6800      	ldr	r0, [r0, #0]
 80028ec:	f013 f98e 	bl	8015c0c <nk_layout_row>
                        nk_label(ctx, "0.00", NK_TEXT_RIGHT );
 80028f0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80028f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028f8:	2214      	movs	r2, #20
 80028fa:	4958      	ldr	r1, [pc, #352]	; (8002a5c <oscilloscope_process+0x4e4>)
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	f01d f925 	bl	801fb4c <nk_label>
                        nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){30, 30, 30, 30});
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <oscilloscope_process+0x4e8>)
 8002904:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8002908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800290a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800290e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002912:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002916:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 800291a:	2204      	movs	r2, #4
 800291c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002920:	2101      	movs	r1, #1
 8002922:	6800      	ldr	r0, [r0, #0]
 8002924:	f013 f972 	bl	8015c0c <nk_layout_row>
                        nk_button_label( ctx, "7" );
 8002928:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800292c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002930:	494c      	ldr	r1, [pc, #304]	; (8002a64 <oscilloscope_process+0x4ec>)
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	f00d f8d4 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "8" );
 8002938:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800293c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002940:	4949      	ldr	r1, [pc, #292]	; (8002a68 <oscilloscope_process+0x4f0>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	f00d f8cc 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "9" );
 8002948:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800294c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002950:	4946      	ldr	r1, [pc, #280]	; (8002a6c <oscilloscope_process+0x4f4>)
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	f00d f8c4 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "k" );
 8002958:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800295c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002960:	4943      	ldr	r1, [pc, #268]	; (8002a70 <oscilloscope_process+0x4f8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	f00d f8bc 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "4" );
 8002968:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800296c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002970:	4940      	ldr	r1, [pc, #256]	; (8002a74 <oscilloscope_process+0x4fc>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f00d f8b4 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "5" );
 8002978:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800297c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002980:	493d      	ldr	r1, [pc, #244]	; (8002a78 <oscilloscope_process+0x500>)
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	f00d f8ac 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "6" );
 8002988:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800298c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002990:	493a      	ldr	r1, [pc, #232]	; (8002a7c <oscilloscope_process+0x504>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	f00d f8a4 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "m" );
 8002998:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800299c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029a0:	4937      	ldr	r1, [pc, #220]	; (8002a80 <oscilloscope_process+0x508>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	f00d f89c 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "1" );
 80029a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029b0:	4934      	ldr	r1, [pc, #208]	; (8002a84 <oscilloscope_process+0x50c>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	f00d f894 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "2" );
 80029b8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029c0:	4931      	ldr	r1, [pc, #196]	; (8002a88 <oscilloscope_process+0x510>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	f00d f88c 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "3" );
 80029c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029d0:	492e      	ldr	r1, [pc, #184]	; (8002a8c <oscilloscope_process+0x514>)
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	f00d f884 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "u" );
 80029d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029e0:	492b      	ldr	r1, [pc, #172]	; (8002a90 <oscilloscope_process+0x518>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	f00d f87c 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "C" );
 80029e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80029f0:	4928      	ldr	r1, [pc, #160]	; (8002a94 <oscilloscope_process+0x51c>)
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	f00d f874 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "0" );
 80029f8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80029fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a00:	4925      	ldr	r1, [pc, #148]	; (8002a98 <oscilloscope_process+0x520>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	f00d f86c 	bl	800fae0 <nk_button_label>
                        nk_button_label( ctx, "." );
 8002a08:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002a0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a10:	4922      	ldr	r1, [pc, #136]	; (8002a9c <oscilloscope_process+0x524>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	f00d f864 	bl	800fae0 <nk_button_label>
                        nk_button_symbol( ctx, NK_SYMBOL_X );
 8002a18:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002a1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a20:	2101      	movs	r1, #1
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	f00d f912 	bl	800fc4c <nk_button_symbol>
                        nk_popup_end(ctx);
 8002a28:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002a2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f017 f913 	bl	8019c5c <nk_popup_end>
 8002a36:	e036      	b.n	8002aa6 <oscilloscope_process+0x52e>
 8002a38:	080282b4 	.word	0x080282b4
 8002a3c:	080282cc 	.word	0x080282cc
 8002a40:	0802844c 	.word	0x0802844c
 8002a44:	080282d8 	.word	0x080282d8
 8002a48:	080282e0 	.word	0x080282e0
 8002a4c:	20000800 	.word	0x20000800
 8002a50:	20000008 	.word	0x20000008
 8002a54:	080282e8 	.word	0x080282e8
 8002a58:	42f00000 	.word	0x42f00000
 8002a5c:	080282f0 	.word	0x080282f0
 8002a60:	0802845c 	.word	0x0802845c
 8002a64:	080282f8 	.word	0x080282f8
 8002a68:	080282fc 	.word	0x080282fc
 8002a6c:	08028300 	.word	0x08028300
 8002a70:	08028304 	.word	0x08028304
 8002a74:	08028308 	.word	0x08028308
 8002a78:	0802830c 	.word	0x0802830c
 8002a7c:	08028310 	.word	0x08028310
 8002a80:	08028314 	.word	0x08028314
 8002a84:	08028318 	.word	0x08028318
 8002a88:	0802831c 	.word	0x0802831c
 8002a8c:	08028320 	.word	0x08028320
 8002a90:	08028324 	.word	0x08028324
 8002a94:	08028328 	.word	0x08028328
 8002a98:	0802832c 	.word	0x0802832c
 8002a9c:	08028330 	.word	0x08028330
                    } else show_app_about = nk_false;
 8002aa0:	4bd0      	ldr	r3, [pc, #832]	; (8002de4 <oscilloscope_process+0x86c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
                }

        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002aa6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002aaa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002aae:	2101      	movs	r1, #1
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	f00c ff11 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002ab6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002aba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002abe:	210a      	movs	r1, #10
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	f00d f8c3 	bl	800fc4c <nk_button_symbol>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d011      	beq.n	8002af0 <oscilloscope_process+0x578>
        		{
        			osc->horizontal_offset += 1;
 8002acc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ad0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ae2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ae6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	edc3 7a02 	vstr	s15, [r3, #8]
        		}

        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60,30+60+30});
 8002af0:	4abd      	ldr	r2, [pc, #756]	; (8002de8 <oscilloscope_process+0x870>)
 8002af2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002afa:	e883 0003 	stmia.w	r3, {r0, r1}
 8002afe:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002b02:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b06:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002b10:	2101      	movs	r1, #1
 8002b12:	6800      	ldr	r0, [r0, #0]
 8002b14:	f013 f87a 	bl	8015c0c <nk_layout_row>
        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 8002b18:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b20:	2211      	movs	r2, #17
 8002b22:	49b2      	ldr	r1, [pc, #712]	; (8002dec <oscilloscope_process+0x874>)
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	f01d f811 	bl	801fb4c <nk_label>
        		nk_property_int(ctx, "", -100, &osc->horizontal_scale, 100, 1, 1);
 8002b2a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b3a:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002b3e:	2201      	movs	r2, #1
 8002b40:	9201      	str	r2, [sp, #4]
 8002b42:	2264      	movs	r2, #100	; 0x64
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002b4a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8002b4e:	49a8      	ldr	r1, [pc, #672]	; (8002df0 <oscilloscope_process+0x878>)
 8002b50:	6800      	ldr	r0, [r0, #0]
 8002b52:	f018 fc1d 	bl	801b390 <nk_property_int>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
				{
					osc->horizontal_scale += 1;
				}*/
                nk_tree_pop(ctx);
 8002b56:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002b5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	f01f fa7d 	bl	802205e <nk_tree_pop>
            }

        	if( nk_tree_push( ctx, NK_TREE_TAB, "Vertical", NK_MINIMIZED) ){
 8002b64:	48a3      	ldr	r0, [pc, #652]	; (8002df4 <oscilloscope_process+0x87c>)
 8002b66:	f01f fdb7 	bl	80226d8 <nk_strlen>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002b70:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002b74:	f240 22ca 	movw	r2, #714	; 0x2ca
 8002b78:	9202      	str	r2, [sp, #8]
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	4b9d      	ldr	r3, [pc, #628]	; (8002df4 <oscilloscope_process+0x87c>)
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	4a9d      	ldr	r2, [pc, #628]	; (8002df8 <oscilloscope_process+0x880>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	f01f fa4c 	bl	8022024 <nk_tree_push_hashed>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8285 	beq.w	800309e <oscilloscope_process+0xb26>
        		nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8002b94:	4b99      	ldr	r3, [pc, #612]	; (8002dfc <oscilloscope_process+0x884>)
 8002b96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b9a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002b9e:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002ba2:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002bac:	2101      	movs	r1, #1
 8002bae:	6800      	ldr	r0, [r0, #0]
 8002bb0:	f013 f82c 	bl	8015c0c <nk_layout_row>
        		//nk_style_push_style_item(&ctx, &ctx->style.combo.button.text_background, nk_style_item_color(nk_rgb(255,0,0)));
        		osc->channel_selected = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->channel_selected, 30, nk_vec2(94, 160));
 8002bb4:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <oscilloscope_process+0x888>)
 8002bb6:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8002bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bc0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002bc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002bcc:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8002e04 <oscilloscope_process+0x88c>
 8002bd0:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8002e08 <oscilloscope_process+0x890>
 8002bd4:	f013 fee8 	bl	80169a8 <nk_vec2>
 8002bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8002bdc:	eef0 7a60 	vmov.f32	s15, s1
 8002be0:	ed87 7a5d 	vstr	s14, [r7, #372]	; 0x174
 8002be4:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
 8002be8:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 8002bec:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 8002bf0:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002bf4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002bf8:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002bfc:	231e      	movs	r3, #30
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	eeb0 0a47 	vmov.f32	s0, s14
 8002c04:	eef0 0a67 	vmov.f32	s1, s15
 8002c08:	4623      	mov	r3, r4
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	6800      	ldr	r0, [r0, #0]
 8002c0e:	f00d fd1f 	bl	8010650 <nk_combo>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
        		//nk_style_pop_style_item(&ctx);
        		nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8002c20:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <oscilloscope_process+0x894>)
 8002c22:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c2e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002c32:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002c36:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002c40:	2101      	movs	r1, #1
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	f012 ffe2 	bl	8015c0c <nk_layout_row>
                osc->channels[osc->channel_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->channels[osc->channel_selected].enabled, 30, nk_vec2(94, 120));
 8002c48:	4a71      	ldr	r2, [pc, #452]	; (8002e10 <oscilloscope_process+0x898>)
 8002c4a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c52:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c56:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c62:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3328      	adds	r3, #40	; 0x28
 8002c78:	681d      	ldr	r5, [r3, #0]
 8002c7a:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002e14 <oscilloscope_process+0x89c>
 8002c7e:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002e08 <oscilloscope_process+0x890>
 8002c82:	f013 fe91 	bl	80169a8 <nk_vec2>
 8002c86:	eeb0 7a40 	vmov.f32	s14, s0
 8002c8a:	eef0 7a60 	vmov.f32	s15, s1
 8002c8e:	ed87 7a5f 	vstr	s14, [r7, #380]	; 0x17c
 8002c92:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
 8002c96:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002c9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002ca2:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 8002ca6:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 8002caa:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002cae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002cb2:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002cb6:	231e      	movs	r3, #30
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	eeb0 0a47 	vmov.f32	s0, s14
 8002cbe:	eef0 0a67 	vmov.f32	s1, s15
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	6800      	ldr	r0, [r0, #0]
 8002cc8:	f00d fcc2 	bl	8010650 <nk_combo>
 8002ccc:	4601      	mov	r1, r0
 8002cce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002cd2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4623      	mov	r3, r4
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4423      	add	r3, r4
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3328      	adds	r3, #40	; 0x28
 8002ce4:	6019      	str	r1, [r3, #0]
                osc->channels[osc->channel_selected].coupling = nk_combo(ctx, (const char*[]){"DC", "AC", "Gnd"}, 3, osc->channels[osc->channel_selected].coupling, 30, nk_vec2(94, 120));
 8002ce6:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <oscilloscope_process+0x8a0>)
 8002ce8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cf2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002cf6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	332c      	adds	r3, #44	; 0x2c
 8002d14:	681d      	ldr	r5, [r3, #0]
 8002d16:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002e14 <oscilloscope_process+0x89c>
 8002d1a:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8002e08 <oscilloscope_process+0x890>
 8002d1e:	f013 fe43 	bl	80169a8 <nk_vec2>
 8002d22:	eeb0 7a40 	vmov.f32	s14, s0
 8002d26:	eef0 7a60 	vmov.f32	s15, s1
 8002d2a:	ed87 7a61 	vstr	s14, [r7, #388]	; 0x184
 8002d2e:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
 8002d32:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d36:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d3e:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8002d42:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002d46:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002d4a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d4e:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8002d52:	231e      	movs	r3, #30
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5a:	eef0 0a67 	vmov.f32	s1, s15
 8002d5e:	462b      	mov	r3, r5
 8002d60:	2203      	movs	r2, #3
 8002d62:	6800      	ldr	r0, [r0, #0]
 8002d64:	f00d fc74 	bl	8010650 <nk_combo>
 8002d68:	4601      	mov	r1, r0
 8002d6a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002d6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4623      	mov	r3, r4
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4423      	add	r3, r4
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	332c      	adds	r3, #44	; 0x2c
 8002d80:	6019      	str	r1, [r3, #0]
                //osc->channels[osc->channel_selected].offset = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].offset, 10.0f, 1.0f);
                //osc->channels[osc->channel_selected].scale = nk_slider_float(ctx, -10.0f, &osc->channels[osc->channel_selected].scale, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <oscilloscope_process+0x8a4>)
 8002d84:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8002d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d92:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002d96:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002da0:	2101      	movs	r1, #1
 8002da2:	6800      	ldr	r0, [r0, #0]
 8002da4:	f012 ff32 	bl	8015c0c <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8002da8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002dac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002db0:	2211      	movs	r2, #17
 8002db2:	491b      	ldr	r1, [pc, #108]	; (8002e20 <oscilloscope_process+0x8a8>)
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	f01c fec9 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002dba:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002dbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f00c fd87 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002dca:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002dce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002dd2:	2109      	movs	r1, #9
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f00c ff39 	bl	800fc4c <nk_button_symbol>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d04b      	beq.n	8002e78 <oscilloscope_process+0x900>
 8002de0:	e020      	b.n	8002e24 <oscilloscope_process+0x8ac>
 8002de2:	bf00      	nop
 8002de4:	20000800 	.word	0x20000800
 8002de8:	0802846c 	.word	0x0802846c
 8002dec:	08028334 	.word	0x08028334
 8002df0:	0802833c 	.word	0x0802833c
 8002df4:	08028340 	.word	0x08028340
 8002df8:	08028358 	.word	0x08028358
 8002dfc:	42bc0000 	.word	0x42bc0000
 8002e00:	08028484 	.word	0x08028484
 8002e04:	43200000 	.word	0x43200000
 8002e08:	42bc0000 	.word	0x42bc0000
 8002e0c:	08028494 	.word	0x08028494
 8002e10:	080284a4 	.word	0x080284a4
 8002e14:	42f00000 	.word	0x42f00000
 8002e18:	080284b8 	.word	0x080284b8
 8002e1c:	0802844c 	.word	0x0802844c
 8002e20:	080282d8 	.word	0x080282d8
        		{
        			osc->channels[osc->channel_selected].offset -= 1;
 8002e24:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e30:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3330      	adds	r3, #48	; 0x30
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e5e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e62:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3330      	adds	r3, #48	; 0x30
 8002e74:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].offset);
 8002e78:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e7c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e84:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002e88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3330      	adds	r3, #48	; 0x30
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fb7b 	bl	8000598 <__aeabi_f2d>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	f107 0008 	add.w	r0, r7, #8
 8002eaa:	49db      	ldr	r1, [pc, #876]	; (8003218 <oscilloscope_process+0xca0>)
 8002eac:	f022 fb66 	bl	802557c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8002eb0:	f107 0108 	add.w	r1, r7, #8
 8002eb4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002eb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ebc:	2212      	movs	r2, #18
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f01c fe44 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002ec4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ec8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ecc:	2101      	movs	r1, #1
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f00c fd02 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8002ed4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002ed8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002edc:	210a      	movs	r1, #10
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	f00c feb4 	bl	800fc4c <nk_button_symbol>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d029      	beq.n	8002f3e <oscilloscope_process+0x9c6>
        		{
        			osc->channels[osc->channel_selected].offset += 1;
 8002eea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002eee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002efa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3330      	adds	r3, #48	; 0x30
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f14:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f24:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3330      	adds	r3, #48	; 0x30
 8002f3a:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 8002f3e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f46:	2211      	movs	r2, #17
 8002f48:	49b4      	ldr	r1, [pc, #720]	; (800321c <oscilloscope_process+0xca4>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	f01c fdfe 	bl	801fb4c <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8002f50:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f58:	2101      	movs	r1, #1
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	f00c fcbc 	bl	800f8d8 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8002f60:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f68:	2109      	movs	r1, #9
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	f00c fe6e 	bl	800fc4c <nk_button_symbol>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d029      	beq.n	8002fca <oscilloscope_process+0xa52>
				{
					osc->channels[osc->channel_selected].scale -= 1;
 8002f76:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f82:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002f86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3334      	adds	r3, #52	; 0x34
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002fa0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fb0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002fb4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3334      	adds	r3, #52	; 0x34
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
				}
				//char combo_buffer[32];
				sprintf(combo_buffer, "%.2f", osc->channels[osc->channel_selected].scale);
 8002fca:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002fce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002fda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3334      	adds	r3, #52	; 0x34
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fad2 	bl	8000598 <__aeabi_f2d>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	f107 0008 	add.w	r0, r7, #8
 8002ffc:	4986      	ldr	r1, [pc, #536]	; (8003218 <oscilloscope_process+0xca0>)
 8002ffe:	f022 fabd 	bl	802557c <siprintf>
				nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003002:	f107 0108 	add.w	r1, r7, #8
 8003006:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800300a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800300e:	2212      	movs	r2, #18
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	f01c fd9b 	bl	801fb4c <nk_label>
				nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003016:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800301a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800301e:	2101      	movs	r1, #1
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f00c fc59 	bl	800f8d8 <nk_button_set_behavior>
				if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003026:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800302a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800302e:	210a      	movs	r1, #10
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f00c fe0b 	bl	800fc4c <nk_button_symbol>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d029      	beq.n	8003090 <oscilloscope_process+0xb18>
				{
					osc->channels[osc->channel_selected].scale += 1;
 800303c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003040:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003048:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800304c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3334      	adds	r3, #52	; 0x34
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003066:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003072:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003076:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800307a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3334      	adds	r3, #52	; 0x34
 800308c:	edc3 7a00 	vstr	s15, [r3]
				}
                nk_tree_pop(ctx);
 8003090:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003094:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	f01e ffe0 	bl	802205e <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Trigger", NK_MINIMIZED) ){
 800309e:	4860      	ldr	r0, [pc, #384]	; (8003220 <oscilloscope_process+0xca8>)
 80030a0:	f01f fb1a 	bl	80226d8 <nk_strlen>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80030aa:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80030ae:	f240 22f6 	movw	r2, #758	; 0x2f6
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	4b5a      	ldr	r3, [pc, #360]	; (8003220 <oscilloscope_process+0xca8>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	4a59      	ldr	r2, [pc, #356]	; (8003224 <oscilloscope_process+0xcac>)
 80030be:	2101      	movs	r1, #1
 80030c0:	6800      	ldr	r0, [r0, #0]
 80030c2:	f01e ffaf 	bl	8022024 <nk_tree_push_hashed>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8176 	beq.w	80033ba <oscilloscope_process+0xe42>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <oscilloscope_process+0xcb0>)
 80030d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030d8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80030dc:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80030e0:	2201      	movs	r2, #1
 80030e2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80030e6:	2101      	movs	r1, #1
 80030e8:	6800      	ldr	r0, [r0, #0]
 80030ea:	f012 fd8f 	bl	8015c0c <nk_layout_row>
                osc->trigger_source = nk_combo(ctx, (const char*[]){"Ch1", "Ch2", "Ch3", "Ch4"}, CHANNEL_COUNT, osc->trigger_source, 30, nk_vec2(94, 160));
 80030ee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80030f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030f6:	4a4d      	ldr	r2, [pc, #308]	; (800322c <oscilloscope_process+0xcb4>)
 80030f8:	461c      	mov	r4, r3
 80030fa:	4613      	mov	r3, r2
 80030fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003102:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003106:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69dc      	ldr	r4, [r3, #28]
 800310e:	eddf 0a48 	vldr	s1, [pc, #288]	; 8003230 <oscilloscope_process+0xcb8>
 8003112:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003244 <oscilloscope_process+0xccc>
 8003116:	f013 fc47 	bl	80169a8 <nk_vec2>
 800311a:	eeb0 7a40 	vmov.f32	s14, s0
 800311e:	eef0 7a60 	vmov.f32	s15, s1
 8003122:	ed87 7a63 	vstr	s14, [r7, #396]	; 0x18c
 8003126:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
 800312a:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800312e:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8003132:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8003136:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800313a:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 800313e:	231e      	movs	r3, #30
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	eeb0 0a47 	vmov.f32	s0, s14
 8003146:	eef0 0a67 	vmov.f32	s1, s15
 800314a:	4623      	mov	r3, r4
 800314c:	2204      	movs	r2, #4
 800314e:	6800      	ldr	r0, [r0, #0]
 8003150:	f00d fa7e 	bl	8010650 <nk_combo>
 8003154:	4602      	mov	r2, r0
 8003156:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800315a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61da      	str	r2, [r3, #28]
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8003162:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003166:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800316a:	4a32      	ldr	r2, [pc, #200]	; (8003234 <oscilloscope_process+0xcbc>)
 800316c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003170:	e883 0003 	stmia.w	r3, {r0, r1}
 8003174:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003178:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800317c:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003180:	2202      	movs	r2, #2
 8003182:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003186:	2101      	movs	r1, #1
 8003188:	6800      	ldr	r0, [r0, #0]
 800318a:	f012 fd3f 	bl	8015c0c <nk_layout_row>
                osc->trigger_mode = nk_combo(ctx, (const char*[]){"Normal", "Auto"}, 2, osc->trigger_mode, 30, nk_vec2(94, 120));
 800318e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003192:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003196:	4a28      	ldr	r2, [pc, #160]	; (8003238 <oscilloscope_process+0xcc0>)
 8003198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800319c:	e883 0003 	stmia.w	r3, {r0, r1}
 80031a0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695c      	ldr	r4, [r3, #20]
 80031ac:	eddf 0a24 	vldr	s1, [pc, #144]	; 8003240 <oscilloscope_process+0xcc8>
 80031b0:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8003244 <oscilloscope_process+0xccc>
 80031b4:	f013 fbf8 	bl	80169a8 <nk_vec2>
 80031b8:	eeb0 7a40 	vmov.f32	s14, s0
 80031bc:	eef0 7a60 	vmov.f32	s15, s1
 80031c0:	ed87 7a65 	vstr	s14, [r7, #404]	; 0x194
 80031c4:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 80031c8:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 80031cc:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80031d0:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80031d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031d8:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 80031dc:	231e      	movs	r3, #30
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	eeb0 0a47 	vmov.f32	s0, s14
 80031e4:	eef0 0a67 	vmov.f32	s1, s15
 80031e8:	4623      	mov	r3, r4
 80031ea:	2202      	movs	r2, #2
 80031ec:	6800      	ldr	r0, [r0, #0]
 80031ee:	f00d fa2f 	bl	8010650 <nk_combo>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80031f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	615a      	str	r2, [r3, #20]
                osc->trigger_slope = nk_combo(ctx, (const char*[]){"Rising", "Falling", "Both"}, 3, osc->trigger_slope, 30, nk_vec2(94, 120));
 8003200:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003204:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <oscilloscope_process+0xcc4>)
 800320a:	ca07      	ldmia	r2, {r0, r1, r2}
 800320c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003210:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003214:	e018      	b.n	8003248 <oscilloscope_process+0xcd0>
 8003216:	bf00      	nop
 8003218:	080282e0 	.word	0x080282e0
 800321c:	08028334 	.word	0x08028334
 8003220:	08028364 	.word	0x08028364
 8003224:	0802837c 	.word	0x0802837c
 8003228:	42bc0000 	.word	0x42bc0000
 800322c:	08028484 	.word	0x08028484
 8003230:	43200000 	.word	0x43200000
 8003234:	08028494 	.word	0x08028494
 8003238:	080284d4 	.word	0x080284d4
 800323c:	080284f4 	.word	0x080284f4
 8003240:	42f00000 	.word	0x42f00000
 8003244:	42bc0000 	.word	0x42bc0000
 8003248:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699c      	ldr	r4, [r3, #24]
 8003250:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 8003240 <oscilloscope_process+0xcc8>
 8003254:	ed1f 0a05 	vldr	s0, [pc, #-20]	; 8003244 <oscilloscope_process+0xccc>
 8003258:	f013 fba6 	bl	80169a8 <nk_vec2>
 800325c:	eeb0 7a40 	vmov.f32	s14, s0
 8003260:	eef0 7a60 	vmov.f32	s15, s1
 8003264:	ed87 7a67 	vstr	s14, [r7, #412]	; 0x19c
 8003268:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
 800326c:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8003270:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8003274:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8003278:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800327c:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003280:	231e      	movs	r3, #30
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	eeb0 0a47 	vmov.f32	s0, s14
 8003288:	eef0 0a67 	vmov.f32	s1, s15
 800328c:	4623      	mov	r3, r4
 800328e:	2203      	movs	r2, #3
 8003290:	6800      	ldr	r0, [r0, #0]
 8003292:	f00d f9dd 	bl	8010650 <nk_combo>
 8003296:	4602      	mov	r2, r0
 8003298:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800329c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	619a      	str	r2, [r3, #24]
                //nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){200});
                //nk_slider_float(ctx, -10.0f, &osc->trigger_offset, 10.0f, 1.0f);


                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80032a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032a8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032ac:	4adb      	ldr	r2, [pc, #876]	; (800361c <oscilloscope_process+0x10a4>)
 80032ae:	461c      	mov	r4, r3
 80032b0:	4613      	mov	r3, r2
 80032b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032b8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80032bc:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80032c0:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80032c4:	2204      	movs	r2, #4
 80032c6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80032ca:	2101      	movs	r1, #1
 80032cc:	6800      	ldr	r0, [r0, #0]
 80032ce:	f012 fc9d 	bl	8015c0c <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 80032d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032d6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032da:	2211      	movs	r2, #17
 80032dc:	49d0      	ldr	r1, [pc, #832]	; (8003620 <oscilloscope_process+0x10a8>)
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	f01c fc34 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80032e4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032ec:	2101      	movs	r1, #1
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	f00c faf2 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80032f4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80032f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032fc:	2109      	movs	r1, #9
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	f00c fca4 	bl	800fc4c <nk_button_symbol>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d011      	beq.n	800332e <oscilloscope_process+0xdb6>
        		{
        			osc->trigger_offset -= 1;
 800330a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800330e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	edd3 7a04 	vldr	s15, [r3, #16]
 8003318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800331c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003320:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003324:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	edc3 7a04 	vstr	s15, [r3, #16]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->trigger_offset);
 800332e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003332:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f92c 	bl	8000598 <__aeabi_f2d>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	f107 0008 	add.w	r0, r7, #8
 8003348:	49b6      	ldr	r1, [pc, #728]	; (8003624 <oscilloscope_process+0x10ac>)
 800334a:	f022 f917 	bl	802557c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 800334e:	f107 0108 	add.w	r1, r7, #8
 8003352:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003356:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800335a:	2212      	movs	r2, #18
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	f01c fbf5 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003362:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003366:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800336a:	2101      	movs	r1, #1
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	f00c fab3 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003372:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003376:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800337a:	210a      	movs	r1, #10
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f00c fc65 	bl	800fc4c <nk_button_symbol>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <oscilloscope_process+0xe34>
        		{
        			osc->trigger_offset += 1;
 8003388:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800338c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	edd3 7a04 	vldr	s15, [r3, #16]
 8003396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800339a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800339e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80033a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	edc3 7a04 	vstr	s15, [r3, #16]
        		}


                nk_tree_pop(ctx);
 80033ac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80033b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	f01e fe52 	bl	802205e <nk_tree_pop>
            }

            if( nk_tree_push( ctx, NK_TREE_TAB, "Waveform", NK_MINIMIZED) ){
 80033ba:	489b      	ldr	r0, [pc, #620]	; (8003628 <oscilloscope_process+0x10b0>)
 80033bc:	f01f f98c 	bl	80226d8 <nk_strlen>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80033c6:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80033ca:	f44f 7245 	mov.w	r2, #788	; 0x314
 80033ce:	9202      	str	r2, [sp, #8]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	4b95      	ldr	r3, [pc, #596]	; (8003628 <oscilloscope_process+0x10b0>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	4a94      	ldr	r2, [pc, #592]	; (800362c <oscilloscope_process+0x10b4>)
 80033da:	2101      	movs	r1, #1
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f01e fe21 	bl	8022024 <nk_tree_push_hashed>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8347 	beq.w	8003a78 <oscilloscope_process+0x1500>
            	nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 80033ea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80033ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033f2:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <oscilloscope_process+0x10b8>)
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033fa:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80033fe:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003402:	2201      	movs	r2, #1
 8003404:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003408:	2101      	movs	r1, #1
 800340a:	6800      	ldr	r0, [r0, #0]
 800340c:	f012 fbfe 	bl	8015c0c <nk_layout_row>
                osc->waveform_selected = nk_combo(ctx, (const char*[]){"Wf1", "Wf2"}, WAVEFORM_COUNT, osc->waveform_selected, 30, nk_vec2(94, 80));
 8003410:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003414:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003418:	4a86      	ldr	r2, [pc, #536]	; (8003634 <oscilloscope_process+0x10bc>)
 800341a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003422:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003426:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800342e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8003638 <oscilloscope_process+0x10c0>
 8003432:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800363c <oscilloscope_process+0x10c4>
 8003436:	f013 fab7 	bl	80169a8 <nk_vec2>
 800343a:	eeb0 7a40 	vmov.f32	s14, s0
 800343e:	eef0 7a60 	vmov.f32	s15, s1
 8003442:	ed87 7a69 	vstr	s14, [r7, #420]	; 0x1a4
 8003446:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
 800344a:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800344e:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8003452:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8003456:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800345a:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 800345e:	231e      	movs	r3, #30
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	eeb0 0a47 	vmov.f32	s0, s14
 8003466:	eef0 0a67 	vmov.f32	s1, s15
 800346a:	4623      	mov	r3, r4
 800346c:	2202      	movs	r2, #2
 800346e:	6800      	ldr	r0, [r0, #0]
 8003470:	f00d f8ee 	bl	8010650 <nk_combo>
 8003474:	4602      	mov	r2, r0
 8003476:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800347a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	679a      	str	r2, [r3, #120]	; 0x78
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8003482:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003486:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800348a:	4a6d      	ldr	r2, [pc, #436]	; (8003640 <oscilloscope_process+0x10c8>)
 800348c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003490:	e883 0003 	stmia.w	r3, {r0, r1}
 8003494:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003498:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800349c:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 80034a0:	2202      	movs	r2, #2
 80034a2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80034a6:	2101      	movs	r1, #1
 80034a8:	6800      	ldr	r0, [r0, #0]
 80034aa:	f012 fbaf 	bl	8015c0c <nk_layout_row>
                osc->waveforms[osc->waveform_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->waveforms[osc->waveform_selected].enabled, 30, nk_vec2(94, 200));
 80034ae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80034b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034b6:	4a63      	ldr	r2, [pc, #396]	; (8003644 <oscilloscope_process+0x10cc>)
 80034b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80034c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80034c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80034d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	337c      	adds	r3, #124	; 0x7c
 80034e2:	681d      	ldr	r5, [r3, #0]
 80034e4:	eddf 0a58 	vldr	s1, [pc, #352]	; 8003648 <oscilloscope_process+0x10d0>
 80034e8:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800363c <oscilloscope_process+0x10c4>
 80034ec:	f013 fa5c 	bl	80169a8 <nk_vec2>
 80034f0:	eeb0 7a40 	vmov.f32	s14, s0
 80034f4:	eef0 7a60 	vmov.f32	s15, s1
 80034f8:	ed87 7a6b 	vstr	s14, [r7, #428]	; 0x1ac
 80034fc:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
 8003500:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003504:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800350c:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8003510:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003514:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003518:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800351c:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003520:	231e      	movs	r3, #30
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	eeb0 0a47 	vmov.f32	s0, s14
 8003528:	eef0 0a67 	vmov.f32	s1, s15
 800352c:	462b      	mov	r3, r5
 800352e:	2202      	movs	r2, #2
 8003530:	6800      	ldr	r0, [r0, #0]
 8003532:	f00d f88d 	bl	8010650 <nk_combo>
 8003536:	4601      	mov	r1, r0
 8003538:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800353c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4623      	mov	r3, r4
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4423      	add	r3, r4
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	337c      	adds	r3, #124	; 0x7c
 800354e:	6019      	str	r1, [r3, #0]
                osc->waveforms[osc->waveform_selected].type = nk_combo(ctx, (const char*[]){"DC", "PWM", "Sine", "Tria", "Saw", "Noise"}, 6, osc->waveforms[osc->waveform_selected].type, 30, nk_vec2(94, 240));
 8003550:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003554:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003558:	4a3c      	ldr	r2, [pc, #240]	; (800364c <oscilloscope_process+0x10d4>)
 800355a:	461c      	mov	r4, r3
 800355c:	4615      	mov	r5, r2
 800355e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003566:	e884 0003 	stmia.w	r4, {r0, r1}
 800356a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800356e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003576:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800357a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	3380      	adds	r3, #128	; 0x80
 800358c:	681d      	ldr	r5, [r3, #0]
 800358e:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003650 <oscilloscope_process+0x10d8>
 8003592:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800363c <oscilloscope_process+0x10c4>
 8003596:	f013 fa07 	bl	80169a8 <nk_vec2>
 800359a:	eeb0 7a40 	vmov.f32	s14, s0
 800359e:	eef0 7a60 	vmov.f32	s15, s1
 80035a2:	ed87 7a6d 	vstr	s14, [r7, #436]	; 0x1b4
 80035a6:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
 80035aa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80035b6:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 80035ba:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80035be:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80035c2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035c6:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 80035ca:	231e      	movs	r3, #30
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	eeb0 0a47 	vmov.f32	s0, s14
 80035d2:	eef0 0a67 	vmov.f32	s1, s15
 80035d6:	462b      	mov	r3, r5
 80035d8:	2206      	movs	r2, #6
 80035da:	6800      	ldr	r0, [r0, #0]
 80035dc:	f00d f838 	bl	8010650 <nk_combo>
 80035e0:	4601      	mov	r1, r0
 80035e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4623      	mov	r3, r4
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4423      	add	r3, r4
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	3380      	adds	r3, #128	; 0x80
 80035f8:	6019      	str	r1, [r3, #0]
                //osc->waveforms[osc->waveform_selected].offset = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].offset, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].scale = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].scale, 10.0f, 1.0f);
                //osc->waveforms[osc->waveform_selected].duty_cycle = nk_slider_float(ctx, -10.0f, &osc->waveforms[osc->waveform_selected].duty_cycle, 10.0f, 1.0f);

                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 80035fa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80035fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003602:	4a06      	ldr	r2, [pc, #24]	; (800361c <oscilloscope_process+0x10a4>)
 8003604:	461c      	mov	r4, r3
 8003606:	4613      	mov	r3, r2
 8003608:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800360a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800360e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003612:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003616:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 800361a:	e01b      	b.n	8003654 <oscilloscope_process+0x10dc>
 800361c:	0802844c 	.word	0x0802844c
 8003620:	080282d8 	.word	0x080282d8
 8003624:	080282e0 	.word	0x080282e0
 8003628:	08028384 	.word	0x08028384
 800362c:	0802839c 	.word	0x0802839c
 8003630:	42bc0000 	.word	0x42bc0000
 8003634:	08028508 	.word	0x08028508
 8003638:	42a00000 	.word	0x42a00000
 800363c:	42bc0000 	.word	0x42bc0000
 8003640:	08028494 	.word	0x08028494
 8003644:	080284a4 	.word	0x080284a4
 8003648:	43480000 	.word	0x43480000
 800364c:	08028530 	.word	0x08028530
 8003650:	43700000 	.word	0x43700000
 8003654:	2204      	movs	r2, #4
 8003656:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800365a:	2101      	movs	r1, #1
 800365c:	6800      	ldr	r0, [r0, #0]
 800365e:	f012 fad5 	bl	8015c0c <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8003662:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003666:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800366a:	2211      	movs	r2, #17
 800366c:	49d7      	ldr	r1, [pc, #860]	; (80039cc <oscilloscope_process+0x1454>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	f01c fa6c 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003674:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003678:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800367c:	2101      	movs	r1, #1
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	f00c f92a 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003684:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003688:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800368c:	2109      	movs	r1, #9
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	f00c fadc 	bl	800fc4c <nk_button_symbol>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d029      	beq.n	80036ee <oscilloscope_process+0x1176>
        		{
        			osc->waveforms[osc->waveform_selected].offset -= 1;
 800369a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800369e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036a6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	3384      	adds	r3, #132	; 0x84
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	3384      	adds	r3, #132	; 0x84
 80036ea:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].offset);
 80036ee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80036fa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80036fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	3384      	adds	r3, #132	; 0x84
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc ff40 	bl	8000598 <__aeabi_f2d>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	f107 0008 	add.w	r0, r7, #8
 8003720:	49ab      	ldr	r1, [pc, #684]	; (80039d0 <oscilloscope_process+0x1458>)
 8003722:	f021 ff2b 	bl	802557c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003726:	f107 0108 	add.w	r1, r7, #8
 800372a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800372e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003732:	2212      	movs	r2, #18
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f01c fa09 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800373a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800373e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003742:	2101      	movs	r1, #1
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	f00c f8c7 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800374a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800374e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003752:	210a      	movs	r1, #10
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f00c fa79 	bl	800fc4c <nk_button_symbol>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d029      	beq.n	80037b4 <oscilloscope_process+0x123c>
        		{
        			osc->waveforms[osc->waveform_selected].offset += 1;
 8003760:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003764:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800376c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003770:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	440b      	add	r3, r1
 8003780:	3384      	adds	r3, #132	; 0x84
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800378a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003796:	ee77 7a87 	vadd.f32	s15, s15, s14
 800379a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800379e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	3384      	adds	r3, #132	; 0x84
 80037b0:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Scale", NK_TEXT_LEFT );
 80037b4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037bc:	2211      	movs	r2, #17
 80037be:	4985      	ldr	r1, [pc, #532]	; (80039d4 <oscilloscope_process+0x145c>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	f01c f9c3 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80037c6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037ce:	2101      	movs	r1, #1
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f00c f881 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 80037d6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037de:	2109      	movs	r1, #9
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	f00c fa33 	bl	800fc4c <nk_button_symbol>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d029      	beq.n	8003840 <oscilloscope_process+0x12c8>
        		{
        			osc->waveforms[osc->waveform_selected].scale -= 1;
 80037ec:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037f8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80037fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	3388      	adds	r3, #136	; 0x88
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003816:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800381e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003826:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800382a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	440b      	add	r3, r1
 800383a:	3388      	adds	r3, #136	; 0x88
 800383c:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].scale);
 8003840:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003844:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800384c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003850:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	3388      	adds	r3, #136	; 0x88
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe97 	bl	8000598 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	f107 0008 	add.w	r0, r7, #8
 8003872:	4957      	ldr	r1, [pc, #348]	; (80039d0 <oscilloscope_process+0x1458>)
 8003874:	f021 fe82 	bl	802557c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003878:	f107 0108 	add.w	r1, r7, #8
 800387c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003880:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003884:	2212      	movs	r2, #18
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	f01c f960 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 800388c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003890:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003894:	2101      	movs	r1, #1
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	f00c f81e 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 800389c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038a4:	210a      	movs	r1, #10
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	f00c f9d0 	bl	800fc4c <nk_button_symbol>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d029      	beq.n	8003906 <oscilloscope_process+0x138e>
        		{
        			osc->waveforms[osc->waveform_selected].scale += 1;
 80038b2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038be:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	3388      	adds	r3, #136	; 0x88
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ec:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80038f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	440b      	add	r3, r1
 8003900:	3388      	adds	r3, #136	; 0x88
 8003902:	edc3 7a00 	vstr	s15, [r3]
        		}

        		nk_label( ctx, "Duty", NK_TEXT_LEFT );
 8003906:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800390a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800390e:	2211      	movs	r2, #17
 8003910:	4931      	ldr	r1, [pc, #196]	; (80039d8 <oscilloscope_process+0x1460>)
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	f01c f91a 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003918:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800391c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003920:	2101      	movs	r1, #1
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	f00b ffd8 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003928:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800392c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003930:	2109      	movs	r1, #9
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	f00c f98a 	bl	800fc4c <nk_button_symbol>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d029      	beq.n	8003992 <oscilloscope_process+0x141a>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle -= 1;
 800393e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003942:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800394a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800394e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	338c      	adds	r3, #140	; 0x8c
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003968:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003978:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800397c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	440b      	add	r3, r1
 800398c:	338c      	adds	r3, #140	; 0x8c
 800398e:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->waveforms[osc->waveform_selected].duty_cycle);
 8003992:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003996:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800399e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80039a2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	338c      	adds	r3, #140	; 0x8c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fdee 	bl	8000598 <__aeabi_f2d>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	f107 0008 	add.w	r0, r7, #8
 80039c4:	4902      	ldr	r1, [pc, #8]	; (80039d0 <oscilloscope_process+0x1458>)
 80039c6:	f021 fdd9 	bl	802557c <siprintf>
 80039ca:	e007      	b.n	80039dc <oscilloscope_process+0x1464>
 80039cc:	080282d8 	.word	0x080282d8
 80039d0:	080282e0 	.word	0x080282e0
 80039d4:	08028334 	.word	0x08028334
 80039d8:	080283a8 	.word	0x080283a8
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 80039dc:	f107 0108 	add.w	r1, r7, #8
 80039e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80039e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039e8:	2212      	movs	r2, #18
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	f01c f8ae 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 80039f0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80039f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039f8:	2101      	movs	r1, #1
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	f00b ff6c 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003a00:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a08:	210a      	movs	r1, #10
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	f00c f91e 	bl	800fc4c <nk_button_symbol>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d029      	beq.n	8003a6a <oscilloscope_process+0x14f2>
        		{
        			osc->waveforms[osc->waveform_selected].duty_cycle += 1;
 8003a16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a22:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	338c      	adds	r3, #140	; 0x8c
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a40:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a50:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	440b      	add	r3, r1
 8003a64:	338c      	adds	r3, #140	; 0x8c
 8003a66:	edc3 7a00 	vstr	s15, [r3]
        		}
                nk_tree_pop(ctx);
 8003a6a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003a6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	f01e faf3 	bl	802205e <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Cursor", NK_MINIMIZED) ){
 8003a78:	48dd      	ldr	r0, [pc, #884]	; (8003df0 <oscilloscope_process+0x1878>)
 8003a7a:	f01e fe2d 	bl	80226d8 <nk_strlen>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003a84:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003a88:	f240 324e 	movw	r2, #846	; 0x34e
 8003a8c:	9202      	str	r2, [sp, #8]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	4bd7      	ldr	r3, [pc, #860]	; (8003df0 <oscilloscope_process+0x1878>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	4ad7      	ldr	r2, [pc, #860]	; (8003df4 <oscilloscope_process+0x187c>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	6800      	ldr	r0, [r0, #0]
 8003a9c:	f01e fac2 	bl	8022024 <nk_tree_push_hashed>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 829d 	beq.w	8003fe2 <oscilloscope_process+0x1a6a>
				nk_layout_row(ctx, NK_STATIC, 30, 1, (float[]){94});
 8003aa8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003aac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ab0:	4ad1      	ldr	r2, [pc, #836]	; (8003df8 <oscilloscope_process+0x1880>)
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ab8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003abc:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	6800      	ldr	r0, [r0, #0]
 8003aca:	f012 f89f 	bl	8015c0c <nk_layout_row>
                osc->cursor_selected = nk_combo(ctx, (const char*[]){"C1", "C2"}, CURSOR_COUNT, osc->cursor_selected, 20, nk_vec2(94, 100));
 8003ace:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ad2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ad6:	4ac9      	ldr	r2, [pc, #804]	; (8003dfc <oscilloscope_process+0x1884>)
 8003ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003adc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ae0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ae4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003aee:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8003e00 <oscilloscope_process+0x1888>
 8003af2:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8003e04 <oscilloscope_process+0x188c>
 8003af6:	f012 ff57 	bl	80169a8 <nk_vec2>
 8003afa:	eeb0 7a40 	vmov.f32	s14, s0
 8003afe:	eef0 7a60 	vmov.f32	s15, s1
 8003b02:	ed87 7a6f 	vstr	s14, [r7, #444]	; 0x1bc
 8003b06:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
 8003b0a:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 8003b0e:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 8003b12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003b16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b1a:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003b1e:	2314      	movs	r3, #20
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	eeb0 0a47 	vmov.f32	s0, s14
 8003b26:	eef0 0a67 	vmov.f32	s1, s15
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	6800      	ldr	r0, [r0, #0]
 8003b30:	f00c fd8e 	bl	8010650 <nk_combo>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){94, 94});
 8003b44:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b4c:	4aae      	ldr	r2, [pc, #696]	; (8003e08 <oscilloscope_process+0x1890>)
 8003b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b52:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b5a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003b5e:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003b62:	2202      	movs	r2, #2
 8003b64:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	f012 f84e 	bl	8015c0c <nk_layout_row>
                osc->cursors[osc->cursor_selected].enabled = nk_combo(ctx, (const char*[]){"Off", "On"}, 2, osc->cursors[osc->cursor_selected].enabled, 30, nk_vec2(94, 100));
 8003b70:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b78:	4aa4      	ldr	r2, [pc, #656]	; (8003e0c <oscilloscope_process+0x1894>)
 8003b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003b82:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b90:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003b94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	33b0      	adds	r3, #176	; 0xb0
 8003ba6:	681d      	ldr	r5, [r3, #0]
 8003ba8:	eddf 0a95 	vldr	s1, [pc, #596]	; 8003e00 <oscilloscope_process+0x1888>
 8003bac:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8003e04 <oscilloscope_process+0x188c>
 8003bb0:	f012 fefa 	bl	80169a8 <nk_vec2>
 8003bb4:	eeb0 7a40 	vmov.f32	s14, s0
 8003bb8:	eef0 7a60 	vmov.f32	s15, s1
 8003bbc:	ed87 7a71 	vstr	s14, [r7, #452]	; 0x1c4
 8003bc0:	edc7 7a72 	vstr	s15, [r7, #456]	; 0x1c8
 8003bc4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003bc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003bd2:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 8003bd6:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 8003bda:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003bde:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003be2:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003be6:	231e      	movs	r3, #30
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	eeb0 0a47 	vmov.f32	s0, s14
 8003bee:	eef0 0a67 	vmov.f32	s1, s15
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	6800      	ldr	r0, [r0, #0]
 8003bf8:	f00c fd2a 	bl	8010650 <nk_combo>
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4623      	mov	r3, r4
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4423      	add	r3, r4
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	33b0      	adds	r3, #176	; 0xb0
 8003c14:	6019      	str	r1, [r3, #0]
                osc->cursors[osc->cursor_selected].horizontal = nk_combo(ctx, (const char*[]){"Track", "Free"}, 2, osc->cursors[osc->cursor_selected].horizontal, 30, nk_vec2(94, 100));
 8003c16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c1a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <oscilloscope_process+0x1898>)
 8003c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c24:	e883 0003 	stmia.w	r3, {r0, r1}
 8003c28:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c36:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c3a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	33b4      	adds	r3, #180	; 0xb4
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8003e00 <oscilloscope_process+0x1888>
 8003c52:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8003e04 <oscilloscope_process+0x188c>
 8003c56:	f012 fea7 	bl	80169a8 <nk_vec2>
 8003c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8003c5e:	eef0 7a60 	vmov.f32	s15, s1
 8003c62:	ed87 7a73 	vstr	s14, [r7, #460]	; 0x1cc
 8003c66:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
 8003c6a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8003c78:	ed97 7a73 	vldr	s14, [r7, #460]	; 0x1cc
 8003c7c:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8003c80:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003c84:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003c88:	f5a3 70f0 	sub.w	r0, r3, #480	; 0x1e0
 8003c8c:	231e      	movs	r3, #30
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	eeb0 0a47 	vmov.f32	s0, s14
 8003c94:	eef0 0a67 	vmov.f32	s1, s15
 8003c98:	462b      	mov	r3, r5
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	6800      	ldr	r0, [r0, #0]
 8003c9e:	f00c fcd7 	bl	8010650 <nk_combo>
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ca8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4623      	mov	r3, r4
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4423      	add	r3, r4
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	33b4      	adds	r3, #180	; 0xb4
 8003cba:	6019      	str	r1, [r3, #0]


                //osc->cursors[osc->cursor_selected].offset = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].offset, 10.0f, 1.0f);
                //osc->cursors[osc->cursor_selected].track = nk_slider_float(ctx, -10.0f, &osc->cursors[osc->cursor_selected].track, 10.0f, 1.0f);
                nk_layout_row(ctx, NK_STATIC, 30, 4, (float[]){60, 30, 60, 30});
 8003cbc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003cc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003cc4:	4a53      	ldr	r2, [pc, #332]	; (8003e14 <oscilloscope_process+0x189c>)
 8003cc6:	461c      	mov	r4, r3
 8003cc8:	4613      	mov	r3, r2
 8003cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cd4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003cd8:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003cdc:	2204      	movs	r2, #4
 8003cde:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	6800      	ldr	r0, [r0, #0]
 8003ce6:	f011 ff91 	bl	8015c0c <nk_layout_row>
        		nk_label( ctx, "Offset", NK_TEXT_LEFT );
 8003cea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003cee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003cf2:	2211      	movs	r2, #17
 8003cf4:	4948      	ldr	r1, [pc, #288]	; (8003e18 <oscilloscope_process+0x18a0>)
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	f01b ff28 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003cfc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d04:	2101      	movs	r1, #1
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	f00b fde6 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003d0c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d14:	2109      	movs	r1, #9
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	f00b ff98 	bl	800fc4c <nk_button_symbol>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d02b      	beq.n	8003d7a <oscilloscope_process+0x1802>
        		{
        			osc->cursors[osc->cursor_selected].offset -= 1;
 8003d22:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d30:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	33b8      	adds	r3, #184	; 0xb8
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d60:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	33b8      	adds	r3, #184	; 0xb8
 8003d76:	edc3 7a00 	vstr	s15, [r3]
        		}
        		char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].offset);
 8003d7a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d88:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003d8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	33b8      	adds	r3, #184	; 0xb8
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fbf9 	bl	8000598 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	f107 0008 	add.w	r0, r7, #8
 8003dae:	491b      	ldr	r1, [pc, #108]	; (8003e1c <oscilloscope_process+0x18a4>)
 8003db0:	f021 fbe4 	bl	802557c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003db4:	f107 0108 	add.w	r1, r7, #8
 8003db8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003dbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003dc0:	2212      	movs	r2, #18
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	f01b fec2 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003dc8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003dcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	f00b fd80 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003dd8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ddc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003de0:	210a      	movs	r1, #10
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	f00b ff32 	bl	800fc4c <nk_button_symbol>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <oscilloscope_process+0x1900>
 8003dee:	e017      	b.n	8003e20 <oscilloscope_process+0x18a8>
 8003df0:	080283b0 	.word	0x080283b0
 8003df4:	080283c8 	.word	0x080283c8
 8003df8:	42bc0000 	.word	0x42bc0000
 8003dfc:	08028550 	.word	0x08028550
 8003e00:	42c80000 	.word	0x42c80000
 8003e04:	42bc0000 	.word	0x42bc0000
 8003e08:	08028494 	.word	0x08028494
 8003e0c:	080284a4 	.word	0x080284a4
 8003e10:	08028560 	.word	0x08028560
 8003e14:	0802844c 	.word	0x0802844c
 8003e18:	080282d8 	.word	0x080282d8
 8003e1c:	080282e0 	.word	0x080282e0
        		{
        			osc->cursors[osc->cursor_selected].offset += 1;
 8003e20:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e2e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	33b8      	adds	r3, #184	; 0xb8
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e5e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e62:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	33b8      	adds	r3, #184	; 0xb8
 8003e74:	edc3 7a00 	vstr	s15, [r3]
        		}


        		nk_label( ctx, "Track", NK_TEXT_LEFT );
 8003e78:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e7c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e80:	2211      	movs	r2, #17
 8003e82:	49bd      	ldr	r1, [pc, #756]	; (8004178 <oscilloscope_process+0x1c00>)
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	f01b fe61 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003e8a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e92:	2101      	movs	r1, #1
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f00b fd1f 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_LEFT) )
 8003e9a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003e9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ea2:	2109      	movs	r1, #9
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	f00b fed1 	bl	800fc4c <nk_button_symbol>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02b      	beq.n	8003f08 <oscilloscope_process+0x1990>
        		{
        			osc->cursors[osc->cursor_selected].track -= 1;
 8003eb0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003eb4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ebe:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ec2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	33bc      	adds	r3, #188	; 0xbc
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003edc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003ef2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	33bc      	adds	r3, #188	; 0xbc
 8003f04:	edc3 7a00 	vstr	s15, [r3]
        		}
        		//char combo_buffer[32];
        		sprintf(combo_buffer, "%.2f", osc->cursors[osc->cursor_selected].track);
 8003f08:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f16:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f1e:	6819      	ldr	r1, [r3, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	33bc      	adds	r3, #188	; 0xbc
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fb32 	bl	8000598 <__aeabi_f2d>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	f107 0008 	add.w	r0, r7, #8
 8003f3c:	498f      	ldr	r1, [pc, #572]	; (800417c <oscilloscope_process+0x1c04>)
 8003f3e:	f021 fb1d 	bl	802557c <siprintf>
        		nk_label( ctx, combo_buffer, NK_TEXT_CENTERED );
 8003f42:	f107 0108 	add.w	r1, r7, #8
 8003f46:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f4a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f4e:	2212      	movs	r2, #18
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	f01b fdfb 	bl	801fb4c <nk_label>
        		nk_button_set_behavior(ctx, NK_BUTTON_REPEATER);
 8003f56:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f5e:	2101      	movs	r1, #1
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	f00b fcb9 	bl	800f8d8 <nk_button_set_behavior>
        		if( nk_button_symbol(ctx, NK_SYMBOL_TRIANGLE_RIGHT) )
 8003f66:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f6a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f6e:	210a      	movs	r1, #10
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	f00b fe6b 	bl	800fc4c <nk_button_symbol>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d02b      	beq.n	8003fd4 <oscilloscope_process+0x1a5c>
        		{
        			osc->cursors[osc->cursor_selected].track += 1;
 8003f7c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f8a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003f8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	33bc      	adds	r3, #188	; 0xbc
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003fa8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fba:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003fbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	33bc      	adds	r3, #188	; 0xbc
 8003fd0:	edc3 7a00 	vstr	s15, [r3]
        		}


                nk_tree_pop(ctx);
 8003fd4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8003fd8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	f01e f83e 	bl	802205e <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Measurements", NK_MINIMIZED) ){
 8003fe2:	4867      	ldr	r0, [pc, #412]	; (8004180 <oscilloscope_process+0x1c08>)
 8003fe4:	f01e fb78 	bl	80226d8 <nk_strlen>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8003fee:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8003ff2:	f44f 725f 	mov.w	r2, #892	; 0x37c
 8003ff6:	9202      	str	r2, [sp, #8]
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	4b61      	ldr	r3, [pc, #388]	; (8004180 <oscilloscope_process+0x1c08>)
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2300      	movs	r3, #0
 8004000:	4a60      	ldr	r2, [pc, #384]	; (8004184 <oscilloscope_process+0x1c0c>)
 8004002:	2101      	movs	r1, #1
 8004004:	6800      	ldr	r0, [r0, #0]
 8004006:	f01e f80d 	bl	8022024 <nk_tree_push_hashed>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00f      	beq.n	8004030 <oscilloscope_process+0x1ab8>
                nk_label(ctx, "Todo", NK_TEXT_LEFT);
 8004010:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004014:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004018:	2211      	movs	r2, #17
 800401a:	495b      	ldr	r1, [pc, #364]	; (8004188 <oscilloscope_process+0x1c10>)
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f01b fd95 	bl	801fb4c <nk_label>
                nk_tree_pop(ctx);
 8004022:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004026:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	f01e f817 	bl	802205e <nk_tree_pop>
            }

			if( nk_tree_push( ctx, NK_TREE_TAB, "Info", NK_MINIMIZED) ){
 8004030:	4856      	ldr	r0, [pc, #344]	; (800418c <oscilloscope_process+0x1c14>)
 8004032:	f01e fb51 	bl	80226d8 <nk_strlen>
 8004036:	4603      	mov	r3, r0
 8004038:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800403c:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 8004040:	f240 3281 	movw	r2, #897	; 0x381
 8004044:	9202      	str	r2, [sp, #8]
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <oscilloscope_process+0x1c14>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	4a50      	ldr	r2, [pc, #320]	; (8004190 <oscilloscope_process+0x1c18>)
 8004050:	2101      	movs	r1, #1
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	f01d ffe6 	bl	8022024 <nk_tree_push_hashed>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d07f      	beq.n	800415e <oscilloscope_process+0x1be6>
                nk_layout_row(ctx, NK_STATIC, 30, 2, (float[]){60, 120});
 800405e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004062:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004066:	4a4b      	ldr	r2, [pc, #300]	; (8004194 <oscilloscope_process+0x1c1c>)
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004074:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8004078:	f5a2 70f0 	sub.w	r0, r2, #480	; 0x1e0
 800407c:	2202      	movs	r2, #2
 800407e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8004082:	2101      	movs	r1, #1
 8004084:	6800      	ldr	r0, [r0, #0]
 8004086:	f011 fdc1 	bl	8015c0c <nk_layout_row>

                float fps = 0.0f; // Calculate fps here
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
                nk_label(ctx, "FPS", NK_TEXT_LEFT);
 8004092:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004096:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800409a:	2211      	movs	r2, #17
 800409c:	493e      	ldr	r1, [pc, #248]	; (8004198 <oscilloscope_process+0x1c20>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f01b fd54 	bl	801fb4c <nk_label>

                static int a = 0;
                static int b = 0;
                b = a;
 80040a4:	4b3d      	ldr	r3, [pc, #244]	; (800419c <oscilloscope_process+0x1c24>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3d      	ldr	r2, [pc, #244]	; (80041a0 <oscilloscope_process+0x1c28>)
 80040aa:	6013      	str	r3, [r2, #0]
                a = HAL_GetTick();
 80040ac:	f002 fd60 	bl	8006b70 <HAL_GetTick>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <oscilloscope_process+0x1c24>)
 80040b6:	601a      	str	r2, [r3, #0]
                int d = a-b;
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <oscilloscope_process+0x1c24>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b38      	ldr	r3, [pc, #224]	; (80041a0 <oscilloscope_process+0x1c28>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                char buffer[32];
                sprintf(buffer, "%f", 1000.0f/d);
 80040c6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80041a4 <oscilloscope_process+0x1c2c>
 80040d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040da:	ee16 0a90 	vmov	r0, s13
 80040de:	f7fc fa5b 	bl	8000598 <__aeabi_f2d>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	f107 0008 	add.w	r0, r7, #8
 80040ea:	492f      	ldr	r1, [pc, #188]	; (80041a8 <oscilloscope_process+0x1c30>)
 80040ec:	f021 fa46 	bl	802557c <siprintf>

                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual fps
 80040f0:	f107 0108 	add.w	r1, r7, #8
 80040f4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80040f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040fc:	2211      	movs	r2, #17
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	f01b fd24 	bl	801fb4c <nk_label>

                float ratio = 0.0f; // Calculate memory ratio here
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                nk_label(ctx, "Memory", NK_TEXT_LEFT);
 800410c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004110:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004114:	2211      	movs	r2, #17
 8004116:	4925      	ldr	r1, [pc, #148]	; (80041ac <oscilloscope_process+0x1c34>)
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	f01b fd17 	bl	801fb4c <nk_label>

                sprintf(buffer, "%d", ctx->memory.allocated );
 800411e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004122:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8004130:	f107 0308 	add.w	r3, r7, #8
 8004134:	491e      	ldr	r1, [pc, #120]	; (80041b0 <oscilloscope_process+0x1c38>)
 8004136:	4618      	mov	r0, r3
 8004138:	f021 fa20 	bl	802557c <siprintf>
                nk_label(ctx, buffer, NK_TEXT_LEFT); // Replace with actual memory ratio
 800413c:	f107 0108 	add.w	r1, r7, #8
 8004140:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004144:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004148:	2211      	movs	r2, #17
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	f01b fcfe 	bl	801fb4c <nk_label>

                nk_tree_pop(ctx);
 8004150:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004154:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f01d ff80 	bl	802205e <nk_tree_pop>
            }
        }
        //nk_end(ctx);
    }
	nk_end(ctx);
 800415e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004162:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	f020 fa9e 	bl	80246a8 <nk_end>
}
 800416c:	bf00      	nop
 800416e:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8004172:	46bd      	mov	sp, r7
 8004174:	bdb0      	pop	{r4, r5, r7, pc}
 8004176:	bf00      	nop
 8004178:	080283d0 	.word	0x080283d0
 800417c:	080282e0 	.word	0x080282e0
 8004180:	080283d8 	.word	0x080283d8
 8004184:	080283f0 	.word	0x080283f0
 8004188:	08028400 	.word	0x08028400
 800418c:	08028408 	.word	0x08028408
 8004190:	08028420 	.word	0x08028420
 8004194:	0802846c 	.word	0x0802846c
 8004198:	08028428 	.word	0x08028428
 800419c:	20000804 	.word	0x20000804
 80041a0:	20000808 	.word	0x20000808
 80041a4:	447a0000 	.word	0x447a0000
 80041a8:	0802842c 	.word	0x0802842c
 80041ac:	08028430 	.word	0x08028430
 80041b0:	08028438 	.word	0x08028438

080041b4 <nk_draw_fb>:


int tmp = 0;
int quadrant = 0x01;
void nk_draw_fb( struct nk_context *ctx, tFramebuf *pfb )
{
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	b094      	sub	sp, #80	; 0x50
 80041ba:	af02      	add	r7, sp, #8
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
	  for( int y0 = 0 ; y0 < 320 ; y0 += pfb->height )
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	e3d9      	b.n	800497a <nk_draw_fb+0x7c6>
	  {
	   framebuf_fill( pfb, 0x00000000 );
 80041c6:	2100      	movs	r1, #0
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	f009 ff5a 	bl	800e082 <framebuf_fill>
	  {
		  const struct nk_command *cmd = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	643b      	str	r3, [r7, #64]	; 0x40
		  nk_foreach(cmd, ctx)
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f00c ff78 	bl	80110c8 <nk__begin>
 80041d8:	6438      	str	r0, [r7, #64]	; 0x40
 80041da:	e3b5      	b.n	8004948 <nk_draw_fb+0x794>
		  {
			  //printf( "cmd->type = %d\n", cmd->type );
			  switch (cmd->type) {
 80041dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b11      	cmp	r3, #17
 80041e2:	f200 83ab 	bhi.w	800493c <nk_draw_fb+0x788>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <nk_draw_fb+0x38>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	0800493d 	.word	0x0800493d
 80041f0:	08004235 	.word	0x08004235
 80041f4:	0800423b 	.word	0x0800423b
 80041f8:	0800493d 	.word	0x0800493d
 80041fc:	08004331 	.word	0x08004331
 8004200:	08004537 	.word	0x08004537
 8004204:	0800493d 	.word	0x0800493d
 8004208:	08004721 	.word	0x08004721
 800420c:	0800479b 	.word	0x0800479b
 8004210:	0800493d 	.word	0x0800493d
 8004214:	0800493d 	.word	0x0800493d
 8004218:	0800493d 	.word	0x0800493d
 800421c:	08004873 	.word	0x08004873
 8004220:	0800493d 	.word	0x0800493d
 8004224:	0800493d 	.word	0x0800493d
 8004228:	0800493d 	.word	0x0800493d
 800422c:	0800480f 	.word	0x0800480f
 8004230:	0800483d 	.word	0x0800483d
			  case NK_COMMAND_NOP: break;
			  case NK_COMMAND_SCISSOR: {
				  const struct nk_command_scissor *s = (const struct nk_command_scissor*)cmd;
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	617b      	str	r3, [r7, #20]
			  } break;
 8004238:	e381      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_LINE: {
				  const struct nk_command_line *l = (const struct nk_command_line*)cmd;
 800423a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423c:	61bb      	str	r3, [r7, #24]
				  if( l->begin.y == l->end.y )
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	d121      	bne.n	8004292 <nk_draw_fb+0xde>
				  {
					  framebuf_hline( pfb, l->begin.x, l->begin.y-y0, l->end.x-l->begin.x, nk_colot_to_rgb666( l->color ) );
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004254:	461e      	mov	r6, r3
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800425c:	461a      	mov	r2, r3
 800425e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004260:	1ad4      	subs	r4, r2, r3
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004268:	461a      	mov	r2, r3
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004270:	1ad5      	subs	r5, r2, r3
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004278:	4613      	mov	r3, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fc82 	bl	8001b84 <nk_colot_to_rgb666>
 8004280:	4603      	mov	r3, r0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462b      	mov	r3, r5
 8004286:	4622      	mov	r2, r4
 8004288:	4631      	mov	r1, r6
 800428a:	6838      	ldr	r0, [r7, #0]
 800428c:	f009 ff49 	bl	800e122 <framebuf_hline>
				  }
				  else
				  {
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
				  }
			  } break;
 8004290:	e355      	b.n	800493e <nk_draw_fb+0x78a>
				  else if( l->begin.x == l->end.x )
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d121      	bne.n	80042e6 <nk_draw_fb+0x132>
					  framebuf_vline( pfb, l->begin.x, l->begin.y-y0, l->end.y-l->begin.y, nk_colot_to_rgb666( l->color ) );
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042a8:	461e      	mov	r6, r3
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b4:	1ad4      	subs	r4, r2, r3
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80042bc:	461a      	mov	r2, r3
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042c4:	1ad5      	subs	r5, r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80042cc:	4613      	mov	r3, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fc58 	bl	8001b84 <nk_colot_to_rgb666>
 80042d4:	4603      	mov	r3, r0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	462b      	mov	r3, r5
 80042da:	4622      	mov	r2, r4
 80042dc:	4631      	mov	r1, r6
 80042de:	6838      	ldr	r0, [r7, #0]
 80042e0:	f009 ff34 	bl	800e14c <framebuf_vline>
			  } break;
 80042e4:	e32b      	b.n	800493e <nk_draw_fb+0x78a>
					  framebuf_line( pfb, l->begin.x, l->begin.y-y0, l->end.x, l->end.y-y0, nk_colot_to_rgb666( l->color ) );
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80042ec:	461e      	mov	r6, r3
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f8:	1ad5      	subs	r5, r2, r3
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004300:	4698      	mov	r8, r3
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004308:	461a      	mov	r2, r3
 800430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430c:	1ad4      	subs	r4, r2, r3
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004314:	4613      	mov	r3, r2
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fc34 	bl	8001b84 <nk_colot_to_rgb666>
 800431c:	4603      	mov	r3, r0
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	9400      	str	r4, [sp, #0]
 8004322:	4643      	mov	r3, r8
 8004324:	462a      	mov	r2, r5
 8004326:	4631      	mov	r1, r6
 8004328:	6838      	ldr	r0, [r7, #0]
 800432a:	f009 ffdb 	bl	800e2e4 <framebuf_line>
			  } break;
 800432e:	e306      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_RECT: {
				  const struct nk_command_rect *r = (const struct nk_command_rect*)cmd;
 8004330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004332:	623b      	str	r3, [r7, #32]
				  //printf( "NK_COMMAND_RECT x: %d, y: %d, width: %d, height: %d, rounding: %d, thickness: %d\n", r->x, r->y, r->w, r->h, r->rounding, r->line_thickness );
				  //framebuf_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
				  int rad = 4;//r->rounding;
 8004334:	2304      	movs	r3, #4
 8004336:	61fb      	str	r3, [r7, #28]
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_0 );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	8a1b      	ldrh	r3, [r3, #16]
 8004344:	441a      	add	r2, r3
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	1ad4      	subs	r4, r2, r3
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004350:	461a      	mov	r2, r3
 8004352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	8a52      	ldrh	r2, [r2, #18]
 800435a:	441a      	add	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1ad5      	subs	r5, r2, r3
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	6958      	ldr	r0, [r3, #20]
 8004364:	f7fd fc0e 	bl	8001b84 <nk_colot_to_rgb666>
 8004368:	4603      	mov	r3, r0
 800436a:	2201      	movs	r2, #1
 800436c:	9201      	str	r2, [sp, #4]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	462a      	mov	r2, r5
 8004374:	4621      	mov	r1, r4
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f00a f84b 	bl	800e412 <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_90 );
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004382:	461a      	mov	r2, r3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	18d4      	adds	r4, r2, r3
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800438e:	461a      	mov	r2, r3
 8004390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	8a52      	ldrh	r2, [r2, #18]
 8004398:	441a      	add	r2, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	1ad5      	subs	r5, r2, r3
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	6958      	ldr	r0, [r3, #20]
 80043a2:	f7fd fbef 	bl	8001b84 <nk_colot_to_rgb666>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2202      	movs	r2, #2
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	462a      	mov	r2, r5
 80043b2:	4621      	mov	r1, r4
 80043b4:	6838      	ldr	r0, [r7, #0]
 80043b6:	f00a f82c 	bl	800e412 <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_180 );
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043c0:	461a      	mov	r2, r3
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	18d4      	adds	r4, r2, r3
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80043cc:	461a      	mov	r2, r3
 80043ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d0:	1ad2      	subs	r2, r2, r3
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	18d5      	adds	r5, r2, r3
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	6958      	ldr	r0, [r3, #20]
 80043da:	f7fd fbd3 	bl	8001b84 <nk_colot_to_rgb666>
 80043de:	4603      	mov	r3, r0
 80043e0:	2204      	movs	r2, #4
 80043e2:	9201      	str	r2, [sp, #4]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	462a      	mov	r2, r5
 80043ea:	4621      	mov	r1, r4
 80043ec:	6838      	ldr	r0, [r7, #0]
 80043ee:	f00a f810 	bl	800e412 <framebuf_circle_quadrant>
                    framebuf_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r->color ), QUADRANT_270 );
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	8a1b      	ldrh	r3, [r3, #16]
 80043fe:	441a      	add	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	1ad4      	subs	r4, r2, r3
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800440a:	461a      	mov	r2, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	18d5      	adds	r5, r2, r3
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	6958      	ldr	r0, [r3, #20]
 8004418:	f7fd fbb4 	bl	8001b84 <nk_colot_to_rgb666>
 800441c:	4603      	mov	r3, r0
 800441e:	2208      	movs	r2, #8
 8004420:	9201      	str	r2, [sp, #4]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	462a      	mov	r2, r5
 8004428:	4621      	mov	r1, r4
 800442a:	6838      	ldr	r0, [r7, #0]
 800442c:	f009 fff1 	bl	800e412 <framebuf_circle_quadrant>

                    framebuf_hline( pfb, r->x+rad, r->y-y0, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	18d4      	adds	r4, r2, r3
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004442:	461a      	mov	r2, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004446:	1ad5      	subs	r5, r2, r3
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	8a1b      	ldrh	r3, [r3, #16]
 800444c:	461a      	mov	r2, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	1ad2      	subs	r2, r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	1ad6      	subs	r6, r2, r3
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	6958      	ldr	r0, [r3, #20]
 800445a:	f7fd fb93 	bl	8001b84 <nk_colot_to_rgb666>
 800445e:	4603      	mov	r3, r0
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	4633      	mov	r3, r6
 8004464:	462a      	mov	r2, r5
 8004466:	4621      	mov	r1, r4
 8004468:	6838      	ldr	r0, [r7, #0]
 800446a:	f009 fe5a 	bl	800e122 <framebuf_hline>
                    framebuf_hline( pfb, r->x+rad, r->y-y0+r->h, r->w-rad-rad, nk_colot_to_rgb666( r->color ) );
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004474:	461a      	mov	r2, r3
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	18d4      	adds	r4, r2, r3
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004480:	461a      	mov	r2, r3
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	6a3a      	ldr	r2, [r7, #32]
 8004488:	8a52      	ldrh	r2, [r2, #18]
 800448a:	189d      	adds	r5, r3, r2
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	8a1b      	ldrh	r3, [r3, #16]
 8004490:	461a      	mov	r2, r3
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	1ad2      	subs	r2, r2, r3
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	1ad6      	subs	r6, r2, r3
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	6958      	ldr	r0, [r3, #20]
 800449e:	f7fd fb71 	bl	8001b84 <nk_colot_to_rgb666>
 80044a2:	4603      	mov	r3, r0
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	4633      	mov	r3, r6
 80044a8:	462a      	mov	r2, r5
 80044aa:	4621      	mov	r1, r4
 80044ac:	6838      	ldr	r0, [r7, #0]
 80044ae:	f009 fe38 	bl	800e122 <framebuf_hline>
                    framebuf_vline( pfb, r->x, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044b8:	461e      	mov	r6, r3
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c4:	1ad2      	subs	r2, r2, r3
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	18d4      	adds	r4, r2, r3
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	8a5b      	ldrh	r3, [r3, #18]
 80044ce:	461a      	mov	r2, r3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	1ad5      	subs	r5, r2, r3
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	6958      	ldr	r0, [r3, #20]
 80044dc:	f7fd fb52 	bl	8001b84 <nk_colot_to_rgb666>
 80044e0:	4603      	mov	r3, r0
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	462b      	mov	r3, r5
 80044e6:	4622      	mov	r2, r4
 80044e8:	4631      	mov	r1, r6
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f009 fe2e 	bl	800e14c <framebuf_vline>
                    framebuf_vline( pfb, r->x+r->w, r->y-y0+rad, r->h-rad-rad, nk_colot_to_rgb666( r->color ) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044f6:	461a      	mov	r2, r3
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	8a1b      	ldrh	r3, [r3, #16]
 80044fc:	18d4      	adds	r4, r2, r3
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004504:	461a      	mov	r2, r3
 8004506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004508:	1ad2      	subs	r2, r2, r3
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	18d5      	adds	r5, r2, r3
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	8a5b      	ldrh	r3, [r3, #18]
 8004512:	461a      	mov	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1ad6      	subs	r6, r2, r3
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	6958      	ldr	r0, [r3, #20]
 8004520:	f7fd fb30 	bl	8001b84 <nk_colot_to_rgb666>
 8004524:	4603      	mov	r3, r0
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4633      	mov	r3, r6
 800452a:	462a      	mov	r2, r5
 800452c:	4621      	mov	r1, r4
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	f009 fe0c 	bl	800e14c <framebuf_vline>
			  } break;
 8004534:	e203      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_RECT_FILLED: {
				  const struct nk_command_rect_filled *r = (const struct nk_command_rect_filled*)cmd;
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
				  //framebuf_fill_rect( pfb, r->x, r->y-y0, r->w, r->h, nk_colot_to_rgb666( r->color ) );
                  int rad = 4;//r->rounding;
 800453a:	2304      	movs	r3, #4
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
                  struct nk_color r_color = r->color;
 800453e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	3212      	adds	r2, #18
 8004546:	6810      	ldr	r0, [r2, #0]
 8004548:	6018      	str	r0, [r3, #0]
                  if( r_color.r == 50 )
 800454a:	7c3b      	ldrb	r3, [r7, #16]
 800454c:	2b32      	cmp	r3, #50	; 0x32
 800454e:	d107      	bne.n	8004560 <nk_draw_fb+0x3ac>
                  {
                	  r_color.r = 40;
 8004550:	2328      	movs	r3, #40	; 0x28
 8004552:	743b      	strb	r3, [r7, #16]
                	  r_color.g = 40;
 8004554:	2328      	movs	r3, #40	; 0x28
 8004556:	747b      	strb	r3, [r7, #17]
                	  r_color.b = 40;
 8004558:	2328      	movs	r3, #40	; 0x28
 800455a:	74bb      	strb	r3, [r7, #18]
                	  r_color.a = 255;
 800455c:	23ff      	movs	r3, #255	; 0xff
 800455e:	74fb      	strb	r3, [r7, #19]
                  }
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004566:	461a      	mov	r2, r3
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	89db      	ldrh	r3, [r3, #14]
 800456c:	441a      	add	r2, r3
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1ad4      	subs	r4, r2, r3
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004578:	461a      	mov	r2, r3
 800457a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004580:	8a12      	ldrh	r2, [r2, #16]
 8004582:	441a      	add	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad5      	subs	r5, r2, r3
 8004588:	6938      	ldr	r0, [r7, #16]
 800458a:	f7fd fafb 	bl	8001b84 <nk_colot_to_rgb666>
 800458e:	4603      	mov	r3, r0
 8004590:	2202      	movs	r2, #2
 8004592:	9201      	str	r2, [sp, #4]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	462a      	mov	r2, r5
 800459a:	4621      	mov	r1, r4
 800459c:	6838      	ldr	r0, [r7, #0]
 800459e:	f00a f84f 	bl	800e640 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+r->h-rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	18d4      	adds	r4, r2, r3
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80045b4:	461a      	mov	r2, r3
 80045b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045bc:	8a12      	ldrh	r2, [r2, #16]
 80045be:	441a      	add	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	1ad5      	subs	r5, r2, r3
 80045c4:	6938      	ldr	r0, [r7, #16]
 80045c6:	f7fd fadd 	bl	8001b84 <nk_colot_to_rgb666>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2202      	movs	r2, #2
 80045ce:	9201      	str	r2, [sp, #4]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	462a      	mov	r2, r5
 80045d6:	4621      	mov	r1, r4
 80045d8:	6838      	ldr	r0, [r7, #0]
 80045da:	f00a f831 	bl	800e640 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	18d4      	adds	r4, r2, r3
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80045f0:	461a      	mov	r2, r3
 80045f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	18d5      	adds	r5, r2, r3
 80045fa:	6938      	ldr	r0, [r7, #16]
 80045fc:	f7fd fac2 	bl	8001b84 <nk_colot_to_rgb666>
 8004600:	4603      	mov	r3, r0
 8004602:	2202      	movs	r2, #2
 8004604:	9201      	str	r2, [sp, #4]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	462a      	mov	r2, r5
 800460c:	4621      	mov	r1, r4
 800460e:	6838      	ldr	r0, [r7, #0]
 8004610:	f00a f816 	bl	800e640 <framebuf_fill_circle_quadrant>
                    framebuf_fill_circle_quadrant( pfb, r->x+r->w-rad, r->y-y0+rad, rad, nk_colot_to_rgb666( r_color ), QUADRANT_90 );
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800461a:	461a      	mov	r2, r3
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	89db      	ldrh	r3, [r3, #14]
 8004620:	441a      	add	r2, r3
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad4      	subs	r4, r2, r3
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800462c:	461a      	mov	r2, r3
 800462e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004630:	1ad2      	subs	r2, r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	18d5      	adds	r5, r2, r3
 8004636:	6938      	ldr	r0, [r7, #16]
 8004638:	f7fd faa4 	bl	8001b84 <nk_colot_to_rgb666>
 800463c:	4603      	mov	r3, r0
 800463e:	2202      	movs	r2, #2
 8004640:	9201      	str	r2, [sp, #4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	462a      	mov	r2, r5
 8004648:	4621      	mov	r1, r4
 800464a:	6838      	ldr	r0, [r7, #0]
 800464c:	f009 fff8 	bl	800e640 <framebuf_fill_circle_quadrant>
                    // up and down
                    //framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, r->h, nk_colot_to_rgb666( r_color ) );
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004656:	461a      	mov	r2, r3
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	18d4      	adds	r4, r2, r3
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004666:	1ad5      	subs	r5, r2, r3
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	89db      	ldrh	r3, [r3, #14]
 800466c:	461a      	mov	r2, r3
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad2      	subs	r2, r2, r3
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	1ad6      	subs	r6, r2, r3
 8004676:	6938      	ldr	r0, [r7, #16]
 8004678:	f7fd fa84 	bl	8001b84 <nk_colot_to_rgb666>
 800467c:	4603      	mov	r3, r0
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	4633      	mov	r3, r6
 8004686:	462a      	mov	r2, r5
 8004688:	4621      	mov	r1, r4
 800468a:	6838      	ldr	r0, [r7, #0]
 800468c:	f009 fd11 	bl	800e0b2 <framebuf_fill_rect>
                    framebuf_fill_rect( pfb, r->x+rad, r->y-y0+r->h-rad, r->w-rad-rad, rad, nk_colot_to_rgb666( r_color ) );
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004696:	461a      	mov	r2, r3
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	18d4      	adds	r4, r2, r3
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046aa:	8a12      	ldrh	r2, [r2, #16]
 80046ac:	441a      	add	r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	1ad5      	subs	r5, r2, r3
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	89db      	ldrh	r3, [r3, #14]
 80046b6:	461a      	mov	r2, r3
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	1ad2      	subs	r2, r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	1ad6      	subs	r6, r2, r3
 80046c0:	6938      	ldr	r0, [r7, #16]
 80046c2:	f7fd fa5f 	bl	8001b84 <nk_colot_to_rgb666>
 80046c6:	4603      	mov	r3, r0
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	4633      	mov	r3, r6
 80046d0:	462a      	mov	r2, r5
 80046d2:	4621      	mov	r1, r4
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f009 fcec 	bl	800e0b2 <framebuf_fill_rect>
                    // middle
                    framebuf_fill_rect(  pfb, r->x, r->y-y0+rad, r->w, r->h-rad-rad, nk_colot_to_rgb666( r_color ) );
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80046e0:	461e      	mov	r6, r3
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ec:	1ad2      	subs	r2, r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	18d5      	adds	r5, r2, r3
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	89db      	ldrh	r3, [r3, #14]
 80046f6:	4698      	mov	r8, r3
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	8a1b      	ldrh	r3, [r3, #16]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	1ad4      	subs	r4, r2, r3
 8004706:	6938      	ldr	r0, [r7, #16]
 8004708:	f7fd fa3c 	bl	8001b84 <nk_colot_to_rgb666>
 800470c:	4603      	mov	r3, r0
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	9400      	str	r4, [sp, #0]
 8004712:	4643      	mov	r3, r8
 8004714:	462a      	mov	r2, r5
 8004716:	4631      	mov	r1, r6
 8004718:	6838      	ldr	r0, [r7, #0]
 800471a:	f009 fcca 	bl	800e0b2 <framebuf_fill_rect>
			 } break;
 800471e:	e10e      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_CIRCLE: {
				  const struct nk_command_circle *c = (const struct nk_command_circle*)cmd;
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
				  framebuf_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800472a:	461a      	mov	r2, r3
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	89db      	ldrh	r3, [r3, #14]
 8004730:	4619      	mov	r1, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	8a1b      	ldrh	r3, [r3, #16]
 8004736:	440b      	add	r3, r1
 8004738:	2b00      	cmp	r3, #0
 800473a:	da00      	bge.n	800473e <nk_draw_fb+0x58a>
 800473c:	3303      	adds	r3, #3
 800473e:	109b      	asrs	r3, r3, #2
 8004740:	18d4      	adds	r4, r2, r3
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004748:	461a      	mov	r2, r3
 800474a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474c:	1ad2      	subs	r2, r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	89db      	ldrh	r3, [r3, #14]
 8004752:	4619      	mov	r1, r3
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	8a1b      	ldrh	r3, [r3, #16]
 8004758:	440b      	add	r3, r1
 800475a:	2b00      	cmp	r3, #0
 800475c:	da00      	bge.n	8004760 <nk_draw_fb+0x5ac>
 800475e:	3303      	adds	r3, #3
 8004760:	109b      	asrs	r3, r3, #2
 8004762:	18d5      	adds	r5, r2, r3
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	89db      	ldrh	r3, [r3, #14]
 8004768:	461a      	mov	r2, r3
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	8a1b      	ldrh	r3, [r3, #16]
 800476e:	4413      	add	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	da00      	bge.n	8004776 <nk_draw_fb+0x5c2>
 8004774:	3303      	adds	r3, #3
 8004776:	109b      	asrs	r3, r3, #2
 8004778:	461e      	mov	r6, r3
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	f8d3 2012 	ldr.w	r2, [r3, #18]
 8004780:	4613      	mov	r3, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd f9fe 	bl	8001b84 <nk_colot_to_rgb666>
 8004788:	4603      	mov	r3, r0
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4633      	mov	r3, r6
 800478e:	462a      	mov	r2, r5
 8004790:	4621      	mov	r1, r4
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	f009 fdbb 	bl	800e30e <framebuf_circle>
			  } break;
 8004798:	e0d1      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_CIRCLE_FILLED: {
				  const struct nk_command_circle_filled *c = (const struct nk_command_circle_filled *)cmd;
 800479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
				  framebuf_fill_circle( pfb, c->x+(c->w+c->h)/4, c->y-y0+(c->w+c->h)/4, (c->w+c->h)/4, nk_colot_to_rgb666( c->color ) );
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	899b      	ldrh	r3, [r3, #12]
 80047aa:	4619      	mov	r1, r3
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	89db      	ldrh	r3, [r3, #14]
 80047b0:	440b      	add	r3, r1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da00      	bge.n	80047b8 <nk_draw_fb+0x604>
 80047b6:	3303      	adds	r3, #3
 80047b8:	109b      	asrs	r3, r3, #2
 80047ba:	18d4      	adds	r4, r2, r3
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80047c2:	461a      	mov	r2, r3
 80047c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	899b      	ldrh	r3, [r3, #12]
 80047cc:	4619      	mov	r1, r3
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	89db      	ldrh	r3, [r3, #14]
 80047d2:	440b      	add	r3, r1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	da00      	bge.n	80047da <nk_draw_fb+0x626>
 80047d8:	3303      	adds	r3, #3
 80047da:	109b      	asrs	r3, r3, #2
 80047dc:	18d5      	adds	r5, r2, r3
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	899b      	ldrh	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	89db      	ldrh	r3, [r3, #14]
 80047e8:	4413      	add	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da00      	bge.n	80047f0 <nk_draw_fb+0x63c>
 80047ee:	3303      	adds	r3, #3
 80047f0:	109b      	asrs	r3, r3, #2
 80047f2:	461e      	mov	r6, r3
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	6918      	ldr	r0, [r3, #16]
 80047f8:	f7fd f9c4 	bl	8001b84 <nk_colot_to_rgb666>
 80047fc:	4603      	mov	r3, r0
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4633      	mov	r3, r6
 8004802:	462a      	mov	r2, r5
 8004804:	4621      	mov	r1, r4
 8004806:	6838      	ldr	r0, [r7, #0]
 8004808:	f009 fe9e 	bl	800e548 <framebuf_fill_circle>
			  } break;
 800480c:	e097      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_TEXT: {
				  const struct nk_command_text *t = (const struct nk_command_text*)cmd;
 800480e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
				  //framebuf_text( pfb, t->x, t->y-y0, (char *)t->string, nk_colot_to_rgb666( t->foreground ) );
				  lcd_text( pfb,  t->x, t->y-y0, (char *)t->string, 0xFFFF );
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004818:	b299      	uxth	r1, r3
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004820:	b29a      	uxth	r2, r3
 8004822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004824:	b29b      	uxth	r3, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b29a      	uxth	r2, r3
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	3324      	adds	r3, #36	; 0x24
 800482e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004832:	9000      	str	r0, [sp, #0]
 8004834:	6838      	ldr	r0, [r7, #0]
 8004836:	f7fd fc53 	bl	80020e0 <lcd_text>
			  } break;
 800483a:	e080      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_IMAGE: {
				  const struct nk_command_image *i = (const struct nk_command_image*)cmd;
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
				  framebuf_fill_rect( pfb, i->x, i->y-y0, i->w, i->h, 0x0003FFFF );
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800484e:	461a      	mov	r2, r3
 8004850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004852:	1ad2      	subs	r2, r2, r3
 8004854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004856:	899b      	ldrh	r3, [r3, #12]
 8004858:	461c      	mov	r4, r3
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	89db      	ldrh	r3, [r3, #14]
 800485e:	4619      	mov	r1, r3
 8004860:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <nk_draw_fb+0x7dc>)
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	9100      	str	r1, [sp, #0]
 8004866:	4623      	mov	r3, r4
 8004868:	4601      	mov	r1, r0
 800486a:	6838      	ldr	r0, [r7, #0]
 800486c:	f009 fc21 	bl	800e0b2 <framebuf_fill_rect>
			  } break;
 8004870:	e065      	b.n	800493e <nk_draw_fb+0x78a>
			  case NK_COMMAND_TRIANGLE_FILLED: {
				  const struct nk_command_triangle_filled *t = (const struct nk_command_triangle_filled*)cmd;
 8004872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
				  struct nk_color t_color = t->color;
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	60fb      	str	r3, [r7, #12]
				if( 1 )
				{
				  t_color.r = 175;
 800487c:	23af      	movs	r3, #175	; 0xaf
 800487e:	733b      	strb	r3, [r7, #12]
				  t_color.g = 175;
 8004880:	23af      	movs	r3, #175	; 0xaf
 8004882:	737b      	strb	r3, [r7, #13]
				  t_color.b = 175;
 8004884:	23af      	movs	r3, #175	; 0xaf
 8004886:	73bb      	strb	r3, [r7, #14]
				  t_color.a = 255;
 8004888:	23ff      	movs	r3, #255	; 0xff
 800488a:	73fb      	strb	r3, [r7, #15]
				}

				  framebuf_line( pfb, t->a.x, t->a.y-y0, t->b.x, t->b.y-y0, 0xFFFF );
 800488c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004896:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800489a:	461a      	mov	r2, r3
 800489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80048a6:	461c      	mov	r4, r3
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80048ae:	4619      	mov	r1, r3
 80048b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b2:	1acb      	subs	r3, r1, r3
 80048b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048b8:	9101      	str	r1, [sp, #4]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4623      	mov	r3, r4
 80048be:	4601      	mov	r1, r0
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	f009 fd0f 	bl	800e2e4 <framebuf_line>
				  framebuf_line( pfb, t->b.x, t->b.y-y0, t->c.x, t->c.y-y0, 0xFFFF );
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80048cc:	4618      	mov	r0, r3
 80048ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048e0:	461c      	mov	r4, r3
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048e8:	4619      	mov	r1, r3
 80048ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ec:	1acb      	subs	r3, r1, r3
 80048ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048f2:	9101      	str	r1, [sp, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4623      	mov	r3, r4
 80048f8:	4601      	mov	r1, r0
 80048fa:	6838      	ldr	r0, [r7, #0]
 80048fc:	f009 fcf2 	bl	800e2e4 <framebuf_line>
				  framebuf_line( pfb, t->c.x, t->c.y-y0, t->a.x, t->a.y-y0, 0xFFFF );
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004906:	4618      	mov	r0, r3
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800490e:	461a      	mov	r2, r3
 8004910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004916:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800491a:	461c      	mov	r4, r3
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004922:	4619      	mov	r1, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004926:	1acb      	subs	r3, r1, r3
 8004928:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800492c:	9101      	str	r1, [sp, #4]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4623      	mov	r3, r4
 8004932:	4601      	mov	r1, r0
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f009 fcd5 	bl	800e2e4 <framebuf_line>
			  } break;
 800493a:	e000      	b.n	800493e <nk_draw_fb+0x78a>
			  default: break;
 800493c:	bf00      	nop
		  nk_foreach(cmd, ctx)
 800493e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f00c fc2d 	bl	80111a0 <nk__next>
 8004946:	6438      	str	r0, [r7, #64]	; 0x40
 8004948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	f47f ac46 	bne.w	80041dc <nk_draw_fb+0x28>
			  }
		  }
	  }

		lcd_bmp( 0, y0, pfb->width, pfb->height, pfb->buf );
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	b219      	sxth	r1, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	889b      	ldrh	r3, [r3, #4]
 8004958:	b21a      	sxth	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	88db      	ldrh	r3, [r3, #6]
 800495e:	b218      	sxth	r0, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4603      	mov	r3, r0
 8004968:	2000      	movs	r0, #0
 800496a:	f7fd fd19 	bl	80023a0 <lcd_bmp>
	  for( int y0 = 0 ; y0 < 320 ; y0 += pfb->height )
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	88db      	ldrh	r3, [r3, #6]
 8004972:	461a      	mov	r2, r3
 8004974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004976:	4413      	add	r3, r2
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
 800497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004980:	f6ff ac21 	blt.w	80041c6 <nk_draw_fb+0x12>
	  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3748      	adds	r7, #72	; 0x48
 800498a:	46bd      	mov	sp, r7
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	0003ffff 	.word	0x0003ffff

08004994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b09a      	sub	sp, #104	; 0x68
 8004998:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800499a:	f002 f884 	bl	8006aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800499e:	f000 f9a7 	bl	8004cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049a2:	f7fc ff9f 	bl	80018e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80049a6:	f7fc fe67 	bl	8001678 <MX_DMA_Init>
  MX_QUADSPI1_Init();
 80049aa:	f000 fb6f 	bl	800508c <MX_QUADSPI1_Init>
  MX_ADC1_Init();
 80049ae:	f7fc f993 	bl	8000cd8 <MX_ADC1_Init>
  MX_DAC2_Init();
 80049b2:	f7fc fd5d 	bl	8001470 <MX_DAC2_Init>
  MX_OPAMP1_Init();
 80049b6:	f000 f9e9 	bl	8004d8c <MX_OPAMP1_Init>
  MX_DAC1_Init();
 80049ba:	f7fc fd15 	bl	80013e8 <MX_DAC1_Init>
  MX_ADC3_Init();
 80049be:	f7fc fa45 	bl	8000e4c <MX_ADC3_Init>
  MX_ADC4_Init();
 80049c2:	f7fc fabd 	bl	8000f40 <MX_ADC4_Init>
  MX_ADC5_Init();
 80049c6:	f7fc fb23 	bl	8001010 <MX_ADC5_Init>
  MX_OPAMP3_Init();
 80049ca:	f000 fa0b 	bl	8004de4 <MX_OPAMP3_Init>
  MX_OPAMP5_Init();
 80049ce:	f000 fa35 	bl	8004e3c <MX_OPAMP5_Init>
  MX_OPAMP6_Init();
 80049d2:	f000 fa5f 	bl	8004e94 <MX_OPAMP6_Init>
  MX_FMC_Init();
 80049d6:	f7fc feb5 	bl	8001744 <MX_FMC_Init>
  MX_SPI3_Init();
 80049da:	f001 fcd5 	bl	8006388 <MX_SPI3_Init>
  MX_TIM1_Init();
 80049de:	f001 fed9 	bl	8006794 <MX_TIM1_Init>
  MX_TIM2_Init();
 80049e2:	f001 ff29 	bl	8006838 <MX_TIM2_Init>
  MX_TIM3_Init();
 80049e6:	f001 ff9b 	bl	8006920 <MX_TIM3_Init>
  //float bx = -15800/989.0;
  //float ay = 250/1407.0;
  //float by = -1150/67.0;

  //solve([50=a*250+b,480-50=a*1760+b],[a,b])
  float ax = 38.0/151.0;
 80049ea:	4bad      	ldr	r3, [pc, #692]	; (8004ca0 <main+0x30c>)
 80049ec:	653b      	str	r3, [r7, #80]	; 0x50
  float bx = -1950.0/151.0;
 80049ee:	4bad      	ldr	r3, [pc, #692]	; (8004ca4 <main+0x310>)
 80049f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  //solve([50=a*387+b,320-50=a*1627+b],[a,b])
  float ay = 11.0/62.0;
 80049f2:	4bad      	ldr	r3, [pc, #692]	; (8004ca8 <main+0x314>)
 80049f4:	64bb      	str	r3, [r7, #72]	; 0x48
  float by = -1157.0/62.0;
 80049f6:	4bad      	ldr	r3, [pc, #692]	; (8004cac <main+0x318>)
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44

  uint16_t x = 0, y = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	867b      	strh	r3, [r7, #50]	; 0x32
 80049fe:	2300      	movs	r3, #0
 8004a00:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t x_bck = 0, y_bck = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40



  tTsc2046 tsc;
  tsc2046_init( &tsc, &hspi3, GPIOA, GPIO_PIN_15, ax, bx, ay, by, 8 );
 8004a0e:	f107 0010 	add.w	r0, r7, #16
 8004a12:	2308      	movs	r3, #8
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	edd7 1a11 	vldr	s3, [r7, #68]	; 0x44
 8004a1a:	ed97 1a12 	vldr	s2, [r7, #72]	; 0x48
 8004a1e:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8004a22:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004a2e:	49a0      	ldr	r1, [pc, #640]	; (8004cb0 <main+0x31c>)
 8004a30:	f01f ff4e 	bl	80248d0 <tsc2046_init>

  lcd_config();
 8004a34:	f7fd f852 	bl	8001adc <lcd_config>

  lcd_rect( 50, 50, 2, 2, 0xFFFF );
 8004a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	2302      	movs	r3, #2
 8004a40:	2202      	movs	r2, #2
 8004a42:	2132      	movs	r1, #50	; 0x32
 8004a44:	2032      	movs	r0, #50	; 0x32
 8004a46:	f7fd f8fd 	bl	8001c44 <lcd_rect>
  lcd_rect( 240-50, 50, 2, 2, 0xFFFF );
 8004a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2302      	movs	r3, #2
 8004a52:	2202      	movs	r2, #2
 8004a54:	2132      	movs	r1, #50	; 0x32
 8004a56:	20be      	movs	r0, #190	; 0xbe
 8004a58:	f7fd f8f4 	bl	8001c44 <lcd_rect>
  lcd_rect( 50, 320-50, 2, 2, 0xFFFF );
 8004a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	2302      	movs	r3, #2
 8004a64:	2202      	movs	r2, #2
 8004a66:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004a6a:	2032      	movs	r0, #50	; 0x32
 8004a6c:	f7fd f8ea 	bl	8001c44 <lcd_rect>
  lcd_rect( 240-50, 320-50, 2, 2, 0xFFFF );
 8004a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2302      	movs	r3, #2
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004a7e:	20be      	movs	r0, #190	; 0xbe
 8004a80:	f7fd f8e0 	bl	8001c44 <lcd_rect>

  while( 0 )
 8004a84:	bf00      	nop
	  lcd_rect( x, y, 2, 2, 0xFFFF );
	  printf("%d, %d, %d\n", cnt++, x, y );
	  HAL_Delay( 1 );
  }

  int d = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  d = lcd_set_pixel_bench( 100, 100, 0xFFFF );
 8004a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a8e:	2164      	movs	r1, #100	; 0x64
 8004a90:	2064      	movs	r0, #100	; 0x64
 8004a92:	f7fd fa35 	bl	8001f00 <lcd_set_pixel_bench>
 8004a96:	63f8      	str	r0, [r7, #60]	; 0x3c
  d = d+1;
 8004a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  static struct nk_buffer pool;
  static struct nk_user_font font;
  static uint8_t buf_cmds[1024*8] = {0};
  static uint8_t buf_pool[1024*8] = {0};

  nk_buffer_init_fixed( &cmds, buf_cmds, 1024*8 );
 8004a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aa2:	4984      	ldr	r1, [pc, #528]	; (8004cb4 <main+0x320>)
 8004aa4:	4884      	ldr	r0, [pc, #528]	; (8004cb8 <main+0x324>)
 8004aa6:	f009 fe9f 	bl	800e7e8 <nk_buffer_init_fixed>
  nk_buffer_init_fixed( &pool, buf_pool, 1024*8 );
 8004aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aae:	4983      	ldr	r1, [pc, #524]	; (8004cbc <main+0x328>)
 8004ab0:	4883      	ldr	r0, [pc, #524]	; (8004cc0 <main+0x32c>)
 8004ab2:	f009 fe99 	bl	800e7e8 <nk_buffer_init_fixed>

  font.height = fontUbuntuBookRNormal16.bbxh;
 8004ab6:	4b83      	ldr	r3, [pc, #524]	; (8004cc4 <main+0x330>)
 8004ab8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac4:	4b80      	ldr	r3, [pc, #512]	; (8004cc8 <main+0x334>)
 8004ac6:	edc3 7a01 	vstr	s15, [r3, #4]
  font.width = text_width_f;
 8004aca:	4b7f      	ldr	r3, [pc, #508]	; (8004cc8 <main+0x334>)
 8004acc:	4a7f      	ldr	r2, [pc, #508]	; (8004ccc <main+0x338>)
 8004ace:	609a      	str	r2, [r3, #8]
  nk_init_custom( &ctx, &cmds, &pool, &font );
 8004ad0:	4b7d      	ldr	r3, [pc, #500]	; (8004cc8 <main+0x334>)
 8004ad2:	4a7b      	ldr	r2, [pc, #492]	; (8004cc0 <main+0x32c>)
 8004ad4:	4978      	ldr	r1, [pc, #480]	; (8004cb8 <main+0x324>)
 8004ad6:	487e      	ldr	r0, [pc, #504]	; (8004cd0 <main+0x33c>)
 8004ad8:	f00b fece 	bl	8010878 <nk_init_custom>

	static uint8_t fb_buf[240*80*2];
	tFramebuf fb;

	framebuf_init( &fb, 240, 80, fb_buf );
 8004adc:	1d38      	adds	r0, r7, #4
 8004ade:	4b7d      	ldr	r3, [pc, #500]	; (8004cd4 <main+0x340>)
 8004ae0:	2250      	movs	r2, #80	; 0x50
 8004ae2:	21f0      	movs	r1, #240	; 0xf0
 8004ae4:	f009 fab1 	bl	800e04a <framebuf_init>

	  int pressed = 1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	65fb      	str	r3, [r7, #92]	; 0x5c
	  int pressed_bck = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	65bb      	str	r3, [r7, #88]	; 0x58
	  int pressed_bck2 = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
	int pressed_cnt = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	657b      	str	r3, [r7, #84]	; 0x54
	static struct Oscilloscope osc = {0};

  while( 1 )
  {
	  x_bck = x;
 8004af8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004afa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  y_bck = y;
 8004afe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  tsc2046_read( &tsc, &x, &y );
 8004b04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b08:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8004b0c:	f107 0310 	add.w	r3, r7, #16
 8004b10:	4618      	mov	r0, r3
 8004b12:	f01f ff75 	bl	8024a00 <tsc2046_read>

	  pressed_bck2 = pressed_bck;
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	63bb      	str	r3, [r7, #56]	; 0x38
	  pressed_bck = pressed;
 8004b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1c:	65bb      	str	r3, [r7, #88]	; 0x58
	  pressed = (x!=0);
 8004b1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	65fb      	str	r3, [r7, #92]	; 0x5c

	  if(  (pressed || pressed_bck) )// && (pressed != pressed_bck) )
 8004b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <main+0x1a6>
 8004b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 808c 	beq.w	8004c52 <main+0x2be>
	  {
		  //printf("%d, %d, %d, %d, %d, %d, %d,\n", pressed_cnt, pressed, pressed_bck, x, y, x_bck, y_bck );
		  static int a = 0;
		  static int b = 0;
		  int d = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
		  a = get_systick();
 8004b3e:	f7fc ff85 	bl	8001a4c <get_systick>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a64      	ldr	r2, [pc, #400]	; (8004cd8 <main+0x344>)
 8004b46:	6013      	str	r3, [r2, #0]
		  pressed_cnt++;
 8004b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	657b      	str	r3, [r7, #84]	; 0x54
		  nk_input_begin( &ctx );
 8004b4e:	4860      	ldr	r0, [pc, #384]	; (8004cd0 <main+0x33c>)
 8004b50:	f010 f9e0 	bl	8014f14 <nk_input_begin>
		  if( pressed )
 8004b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <main+0x1ec>
		  {
			  nk_input_motion( &ctx, x, y );
 8004b5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b60:	461a      	mov	r2, r3
 8004b62:	485b      	ldr	r0, [pc, #364]	; (8004cd0 <main+0x33c>)
 8004b64:	f010 fa76 	bl	8015054 <nk_input_motion>
			  nk_input_button( &ctx, 0, x, y, 1 );
 8004b68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b6e:	4619      	mov	r1, r3
 8004b70:	2301      	movs	r3, #1
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	460b      	mov	r3, r1
 8004b76:	2100      	movs	r1, #0
 8004b78:	4855      	ldr	r0, [pc, #340]	; (8004cd0 <main+0x33c>)
 8004b7a:	f010 fab1 	bl	80150e0 <nk_input_button>
 8004b7e:	e014      	b.n	8004baa <main+0x216>
		  }
		  else if( pressed_bck )
 8004b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <main+0x216>
		  {
			  nk_input_motion( &ctx, x_bck, y_bck );
 8004b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b8e:	4619      	mov	r1, r3
 8004b90:	484f      	ldr	r0, [pc, #316]	; (8004cd0 <main+0x33c>)
 8004b92:	f010 fa5f 	bl	8015054 <nk_input_motion>
			  nk_input_button( &ctx, 0, x_bck, y_bck, 0 );
 8004b96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004b9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	9100      	str	r1, [sp, #0]
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	484a      	ldr	r0, [pc, #296]	; (8004cd0 <main+0x33c>)
 8004ba6:	f010 fa9b 	bl	80150e0 <nk_input_button>
		  }
		  nk_input_end( &ctx );
 8004baa:	4849      	ldr	r0, [pc, #292]	; (8004cd0 <main+0x33c>)
 8004bac:	f010 fa1a 	bl	8014fe4 <nk_input_end>

		  oscilloscope_process(&osc, &ctx);
 8004bb0:	4947      	ldr	r1, [pc, #284]	; (8004cd0 <main+0x33c>)
 8004bb2:	484a      	ldr	r0, [pc, #296]	; (8004cdc <main+0x348>)
 8004bb4:	f7fd fce0 	bl	8002578 <oscilloscope_process>
		  nk_draw_fb( &ctx, &fb );
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4844      	ldr	r0, [pc, #272]	; (8004cd0 <main+0x33c>)
 8004bbe:	f7ff faf9 	bl	80041b4 <nk_draw_fb>
		  nk_clear(&ctx);
 8004bc2:	4843      	ldr	r0, [pc, #268]	; (8004cd0 <main+0x33c>)
 8004bc4:	f00b fec0 	bl	8010948 <nk_clear>
		  //HAL_Delay(10);
		  b = get_systick();
 8004bc8:	f7fc ff40 	bl	8001a4c <get_systick>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a44      	ldr	r2, [pc, #272]	; (8004ce0 <main+0x34c>)
 8004bd0:	6013      	str	r3, [r2, #0]
		  d = diff_systick( b, a );
 8004bd2:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <main+0x34c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a40      	ldr	r2, [pc, #256]	; (8004cd8 <main+0x344>)
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fc ff41 	bl	8001a64 <diff_systick>
 8004be2:	6378      	str	r0, [r7, #52]	; 0x34
		  if( x )
 8004be4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d033      	beq.n	8004c52 <main+0x2be>
		  {
			  lcd_rect( x-4, y, 4, 2, 0xFFFF );
 8004bea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bec:	3b04      	subs	r3, #4
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	b218      	sxth	r0, r3
 8004bf2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bf4:	b219      	sxth	r1, r3
 8004bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	2204      	movs	r2, #4
 8004c00:	f7fd f820 	bl	8001c44 <lcd_rect>
			  lcd_rect( x+2, y, 4, 2, 0xFFFF );
 8004c04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c06:	3302      	adds	r3, #2
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b218      	sxth	r0, r3
 8004c0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c0e:	b219      	sxth	r1, r3
 8004c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2302      	movs	r3, #2
 8004c18:	2204      	movs	r2, #4
 8004c1a:	f7fd f813 	bl	8001c44 <lcd_rect>
			  lcd_rect( x, y-4, 2, 4, 0xFFFF );
 8004c1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c20:	b218      	sxth	r0, r3
 8004c22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c24:	3b04      	subs	r3, #4
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	b219      	sxth	r1, r3
 8004c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2304      	movs	r3, #4
 8004c32:	2202      	movs	r2, #2
 8004c34:	f7fd f806 	bl	8001c44 <lcd_rect>
			  lcd_rect( x, y+2, 2, 4, 0xFFFF );
 8004c38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c3a:	b218      	sxth	r0, r3
 8004c3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c3e:	3302      	adds	r3, #2
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	b219      	sxth	r1, r3
 8004c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f7fc fff9 	bl	8001c44 <lcd_rect>
	  }
	  //else if( nk_window_is_collapsed( &ctx, "STM32G4 Scope" ) )
	  {
		  static int collapsed = 0;
		  static int collapsed_bck = 0;
		  collapsed_bck = collapsed;
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <main+0x350>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <main+0x354>)
 8004c58:	6013      	str	r3, [r2, #0]
		  collapsed = nk_window_is_collapsed( &ctx, "STM32G4 Scope" );
 8004c5a:	4924      	ldr	r1, [pc, #144]	; (8004cec <main+0x358>)
 8004c5c:	481c      	ldr	r0, [pc, #112]	; (8004cd0 <main+0x33c>)
 8004c5e:	f01f fdff 	bl	8024860 <nk_window_is_collapsed>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <main+0x350>)
 8004c66:	6013      	str	r3, [r2, #0]
		  test_scope( !collapsed );
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <main+0x350>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fdfa 	bl	8005870 <test_scope>
		  if( collapsed != collapsed_bck )
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <main+0x350>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <main+0x354>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	f43f af37 	beq.w	8004af8 <main+0x164>
		  {
			  lcd_rect( 0, 0, 480, 320, 0x0000 );
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004c92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c96:	2100      	movs	r1, #0
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fc ffd3 	bl	8001c44 <lcd_rect>
	  x_bck = x;
 8004c9e:	e72b      	b.n	8004af8 <main+0x164>
 8004ca0:	3e80d902 	.word	0x3e80d902
 8004ca4:	c14e9f5d 	.word	0xc14e9f5d
 8004ca8:	3e35ad6b 	.word	0x3e35ad6b
 8004cac:	c1954a53 	.word	0xc1954a53
 8004cb0:	20016808 	.word	0x20016808
 8004cb4:	20000848 	.word	0x20000848
 8004cb8:	2000080c 	.word	0x2000080c
 8004cbc:	20002884 	.word	0x20002884
 8004cc0:	20002848 	.word	0x20002848
 8004cc4:	0802a478 	.word	0x0802a478
 8004cc8:	20004884 	.word	0x20004884
 8004ccc:	08001aa5 	.word	0x08001aa5
 8004cd0:	20004890 	.word	0x20004890
 8004cd4:	20007ef8 	.word	0x20007ef8
 8004cd8:	200114f8 	.word	0x200114f8
 8004cdc:	200114fc 	.word	0x200114fc
 8004ce0:	200115dc 	.word	0x200115dc
 8004ce4:	200115e0 	.word	0x200115e0
 8004ce8:	200115e4 	.word	0x200115e4
 8004cec:	08028268 	.word	0x08028268

08004cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b094      	sub	sp, #80	; 0x50
 8004cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cf6:	f107 0318 	add.w	r3, r7, #24
 8004cfa:	2238      	movs	r2, #56	; 0x38
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f020 fc9f 	bl	8025642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004d12:	2000      	movs	r0, #0
 8004d14:	f005 fd24 	bl	800a760 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d22:	2302      	movs	r3, #2
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d26:	2303      	movs	r3, #3
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8004d2a:	2306      	movs	r3, #6
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004d2e:	2355      	movs	r3, #85	; 0x55
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d32:	2302      	movs	r3, #2
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004d36:	2308      	movs	r3, #8
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d3e:	f107 0318 	add.w	r3, r7, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f006 f89a 	bl	800ae7c <HAL_RCC_OscConfig>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8004d4e:	f000 f818 	bl	8004d82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d52:	230f      	movs	r3, #15
 8004d54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d56:	2303      	movs	r3, #3
 8004d58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f006 fb9e 	bl	800b4ac <HAL_RCC_ClockConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004d76:	f000 f804 	bl	8004d82 <Error_Handler>
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3750      	adds	r7, #80	; 0x50
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d86:	b672      	cpsid	i
}
 8004d88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d8a:	e7fe      	b.n	8004d8a <Error_Handler+0x8>

08004d8c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp5;
OPAMP_HandleTypeDef hopamp6;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004d92:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <MX_OPAMP1_Init+0x54>)
 8004d94:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004da2:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004da4:	2208      	movs	r2, #8
 8004da6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004dc8:	4804      	ldr	r0, [pc, #16]	; (8004ddc <MX_OPAMP1_Init+0x50>)
 8004dca:	f005 fbc7 	bl	800a55c <HAL_OPAMP_Init>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 8004dd4:	f7ff ffd5 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	200115e8 	.word	0x200115e8
 8004de0:	40010300 	.word	0x40010300

08004de4 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004de8:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004dea:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <MX_OPAMP3_Init+0x54>)
 8004dec:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004e0c:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004e20:	4804      	ldr	r0, [pc, #16]	; (8004e34 <MX_OPAMP3_Init+0x50>)
 8004e22:	f005 fb9b 	bl	800a55c <HAL_OPAMP_Init>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <MX_OPAMP3_Init+0x4c>
  {
    Error_Handler();
 8004e2c:	f7ff ffa9 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004e30:	bf00      	nop
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20011624 	.word	0x20011624
 8004e38:	40010308 	.word	0x40010308

08004e3c <MX_OPAMP5_Init>:
/* OPAMP5 init function */
void MX_OPAMP5_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP5_Init 0 */

  /* USER CODE BEGIN OPAMP5_Init 1 */

  /* USER CODE END OPAMP5_Init 1 */
  hopamp5.Instance = OPAMP5;
 8004e40:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <MX_OPAMP5_Init+0x54>)
 8004e44:	601a      	str	r2, [r3, #0]
  hopamp5.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004e46:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
  hopamp5.Init.Mode = OPAMP_PGA_MODE;
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	609a      	str	r2, [r3, #8]
  hopamp5.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	611a      	str	r2, [r3, #16]
  hopamp5.Init.InternalOutput = ENABLE;
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	751a      	strb	r2, [r3, #20]
  hopamp5.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	619a      	str	r2, [r3, #24]
  hopamp5.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp5.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp5.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp5) != HAL_OK)
 8004e78:	4804      	ldr	r0, [pc, #16]	; (8004e8c <MX_OPAMP5_Init+0x50>)
 8004e7a:	f005 fb6f 	bl	800a55c <HAL_OPAMP_Init>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <MX_OPAMP5_Init+0x4c>
  {
    Error_Handler();
 8004e84:	f7ff ff7d 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP5_Init 2 */

  /* USER CODE END OPAMP5_Init 2 */

}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20011660 	.word	0x20011660
 8004e90:	40010310 	.word	0x40010310

08004e94 <MX_OPAMP6_Init>:
/* OPAMP6 init function */
void MX_OPAMP6_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004e9a:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <MX_OPAMP6_Init+0x54>)
 8004e9c:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004ea6:	2240      	movs	r2, #64	; 0x40
 8004ea8:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004eac:	2208      	movs	r2, #8
 8004eae:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_2_OR_MINUS_1;
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8004ed0:	4804      	ldr	r0, [pc, #16]	; (8004ee4 <MX_OPAMP6_Init+0x50>)
 8004ed2:	f005 fb43 	bl	800a55c <HAL_OPAMP_Init>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_OPAMP6_Init+0x4c>
  {
    Error_Handler();
 8004edc:	f7ff ff51 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	2001169c 	.word	0x2001169c
 8004ee8:	40010314 	.word	0x40010314

08004eec <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	; 0x30
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef4:	f107 031c 	add.w	r3, r7, #28
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a4a      	ldr	r2, [pc, #296]	; (8005034 <HAL_OPAMP_MspInit+0x148>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d119      	bne.n	8004f42 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b4a      	ldr	r3, [pc, #296]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4a49      	ldr	r2, [pc, #292]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f1a:	4b47      	ldr	r3, [pc, #284]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PA3     ------> OPAMP1_VINM0
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8004f26:	2388      	movs	r3, #136	; 0x88
 8004f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f32:	f107 031c 	add.w	r3, r7, #28
 8004f36:	4619      	mov	r1, r3
 8004f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f3c:	f005 f974 	bl	800a228 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }
}
 8004f40:	e073      	b.n	800502a <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP3)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <HAL_OPAMP_MspInit+0x150>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d118      	bne.n	8004f7e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4c:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	4a39      	ldr	r2, [pc, #228]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f52:	f043 0302 	orr.w	r3, r3, #2
 8004f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f58:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004f64:	2305      	movs	r3, #5
 8004f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f70:	f107 031c 	add.w	r3, r7, #28
 8004f74:	4619      	mov	r1, r3
 8004f76:	4832      	ldr	r0, [pc, #200]	; (8005040 <HAL_OPAMP_MspInit+0x154>)
 8004f78:	f005 f956 	bl	800a228 <HAL_GPIO_Init>
}
 8004f7c:	e055      	b.n	800502a <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP5)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a30      	ldr	r2, [pc, #192]	; (8005044 <HAL_OPAMP_MspInit+0x158>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d119      	bne.n	8004fbc <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f8e:	f043 0302 	orr.w	r3, r3, #2
 8004f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004fa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fae:	f107 031c 	add.w	r3, r7, #28
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4822      	ldr	r0, [pc, #136]	; (8005040 <HAL_OPAMP_MspInit+0x154>)
 8004fb6:	f005 f937 	bl	800a228 <HAL_GPIO_Init>
}
 8004fba:	e036      	b.n	800502a <HAL_OPAMP_MspInit+0x13e>
  else if(opampHandle->Instance==OPAMP6)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a21      	ldr	r2, [pc, #132]	; (8005048 <HAL_OPAMP_MspInit+0x15c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d131      	bne.n	800502a <HAL_OPAMP_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fd2:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fde:	4b16      	ldr	r3, [pc, #88]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_OPAMP_MspInit+0x14c>)
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005002:	f107 031c 	add.w	r3, r7, #28
 8005006:	4619      	mov	r1, r3
 8005008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800500c:	f005 f90c 	bl	800a228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005016:	2303      	movs	r3, #3
 8005018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800501e:	f107 031c 	add.w	r3, r7, #28
 8005022:	4619      	mov	r1, r3
 8005024:	4806      	ldr	r0, [pc, #24]	; (8005040 <HAL_OPAMP_MspInit+0x154>)
 8005026:	f005 f8ff 	bl	800a228 <HAL_GPIO_Init>
}
 800502a:	bf00      	nop
 800502c:	3730      	adds	r7, #48	; 0x30
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40010300 	.word	0x40010300
 8005038:	40021000 	.word	0x40021000
 800503c:	40010308 	.word	0x40010308
 8005040:	48000400 	.word	0x48000400
 8005044:	40010310 	.word	0x40010310
 8005048:	40010314 	.word	0x40010314

0800504c <HAL_QSPI_TxCpltCallback>:
    uint32_t SIOOMode,
	enum ePsram_Direction direction
);

void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    TxCpltCallback = 1;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_QSPI_TxCpltCallback+0x1c>)
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	200116d8 	.word	0x200116d8

0800506c <HAL_QSPI_RxCpltCallback>:
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    RxCpltCallback = 1;
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <HAL_QSPI_RxCpltCallback+0x1c>)
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	200116d9 	.word	0x200116d9

0800508c <MX_QUADSPI1_Init>:
QSPI_HandleTypeDef hqspi1;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 8005090:	4b12      	ldr	r3, [pc, #72]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <MX_QUADSPI1_Init+0x54>)
 8005094:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 6;
 8005096:	4b11      	ldr	r3, [pc, #68]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 8005098:	2206      	movs	r2, #6
 800509a:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 800509e:	2201      	movs	r2, #1
 80050a0:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 23;
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050aa:	2217      	movs	r2, #23
 80050ac:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_2;
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80050c6:	4805      	ldr	r0, [pc, #20]	; (80050dc <MX_QUADSPI1_Init+0x50>)
 80050c8:	f005 fbee 	bl	800a8a8 <HAL_QSPI_Init>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 80050d2:	f7ff fe56 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	200116dc 	.word	0x200116dc
 80050e0:	a0001000 	.word	0xa0001000

080050e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b0a0      	sub	sp, #128	; 0x80
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050fc:	f107 0318 	add.w	r3, r7, #24
 8005100:	2254      	movs	r2, #84	; 0x54
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f020 fa9c 	bl	8025642 <memset>
  if(qspiHandle->Instance==QUADSPI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a54      	ldr	r2, [pc, #336]	; (8005260 <HAL_QSPI_MspInit+0x17c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	f040 80a1 	bne.w	8005258 <HAL_QSPI_MspInit+0x174>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8005116:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800511a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 800511c:	2300      	movs	r3, #0
 800511e:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005120:	f107 0318 	add.w	r3, r7, #24
 8005124:	4618      	mov	r0, r3
 8005126:	f006 fbb1 	bl	800b88c <HAL_RCCEx_PeriphCLKConfig>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8005130:	f7ff fe27 	bl	8004d82 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005134:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	4a4a      	ldr	r2, [pc, #296]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 800513a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513e:	6513      	str	r3, [r2, #80]	; 0x50
 8005140:	4b48      	ldr	r3, [pc, #288]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800514c:	4b45      	ldr	r3, [pc, #276]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	4a44      	ldr	r2, [pc, #272]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005158:	4b42      	ldr	r3, [pc, #264]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005164:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005170:	4b3c      	ldr	r3, [pc, #240]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 8005172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800517c:	4b39      	ldr	r3, [pc, #228]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005180:	4a38      	ldr	r2, [pc, #224]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 8005182:	f043 0308 	orr.w	r3, r3, #8
 8005186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005188:	4b36      	ldr	r3, [pc, #216]	; (8005264 <HAL_QSPI_MspInit+0x180>)
 800518a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> QUADSPI1_BK2_IO2
    PC4     ------> QUADSPI1_BK2_IO3
    PB10     ------> QUADSPI1_CLK
    PD3     ------> QUADSPI1_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8005194:	231e      	movs	r3, #30
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005198:	2302      	movs	r3, #2
 800519a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a0:	2300      	movs	r3, #0
 80051a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80051a4:	230a      	movs	r3, #10
 80051a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051ac:	4619      	mov	r1, r3
 80051ae:	482e      	ldr	r0, [pc, #184]	; (8005268 <HAL_QSPI_MspInit+0x184>)
 80051b0:	f005 f83a 	bl	800a228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ba:	2302      	movs	r3, #2
 80051bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c2:	2300      	movs	r3, #0
 80051c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80051c6:	230a      	movs	r3, #10
 80051c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051ce:	4619      	mov	r1, r3
 80051d0:	4826      	ldr	r0, [pc, #152]	; (800526c <HAL_QSPI_MspInit+0x188>)
 80051d2:	f005 f829 	bl	800a228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80051d6:	2308      	movs	r3, #8
 80051d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051da:	2302      	movs	r3, #2
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e2:	2300      	movs	r3, #0
 80051e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80051e6:	230a      	movs	r3, #10
 80051e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051ee:	4619      	mov	r1, r3
 80051f0:	481f      	ldr	r0, [pc, #124]	; (8005270 <HAL_QSPI_MspInit+0x18c>)
 80051f2:	f005 f819 	bl	800a228 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA2_Channel3;
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 80051f8:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <HAL_QSPI_MspInit+0x194>)
 80051fa:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Request = DMA_REQUEST_QUADSPI;
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 80051fe:	2228      	movs	r2, #40	; 0x28
 8005200:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005204:	2210      	movs	r2, #16
 8005206:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 800520a:	2200      	movs	r2, #0
 800520c:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 800520e:	4b19      	ldr	r3, [pc, #100]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005210:	2280      	movs	r2, #128	; 0x80
 8005212:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005214:	4b17      	ldr	r3, [pc, #92]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005216:	2200      	movs	r2, #0
 8005218:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800521a:	4b16      	ldr	r3, [pc, #88]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005222:	2200      	movs	r2, #0
 8005224:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005228:	2200      	movs	r2, #0
 800522a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 800522c:	4811      	ldr	r0, [pc, #68]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 800522e:	f004 fcc9 	bl	8009bc4 <HAL_DMA_Init>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_QSPI_MspInit+0x158>
    {
      Error_Handler();
 8005238:	f7ff fda3 	bl	8004d82 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a0d      	ldr	r2, [pc, #52]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005240:	63da      	str	r2, [r3, #60]	; 0x3c
 8005242:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <HAL_QSPI_MspInit+0x190>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6293      	str	r3, [r2, #40]	; 0x28

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8005248:	2200      	movs	r2, #0
 800524a:	2100      	movs	r1, #0
 800524c:	205f      	movs	r0, #95	; 0x5f
 800524e:	f004 f8ca 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005252:	205f      	movs	r0, #95	; 0x5f
 8005254:	f004 f8e1 	bl	800941a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8005258:	bf00      	nop
 800525a:	3780      	adds	r7, #128	; 0x80
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	a0001000 	.word	0xa0001000
 8005264:	40021000 	.word	0x40021000
 8005268:	48000800 	.word	0x48000800
 800526c:	48000400 	.word	0x48000400
 8005270:	48000c00 	.word	0x48000c00
 8005274:	20011728 	.word	0x20011728
 8005278:	40020430 	.word	0x40020430

0800527c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	605a      	str	r2, [r3, #4]
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	605a      	str	r2, [r3, #4]
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	605a      	str	r2, [r3, #4]
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	605a      	str	r2, [r3, #4]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <scope_init>:
#include "scope.h"

static tScope *_scope;

void scope_init( tScope *scope, uint16_t trigger_level, uint16_t sample_rate, uint16_t *buffer1, uint16_t *buffer2, uint16_t *buffer3, uint16_t *buffer4, uint16_t len )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	817b      	strh	r3, [r7, #10]
 800530a:	4613      	mov	r3, r2
 800530c:	813b      	strh	r3, [r7, #8]
	scope->trigger_level = trigger_level;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	897a      	ldrh	r2, [r7, #10]
 8005312:	82da      	strh	r2, [r3, #22]
	scope->sample_rate = sample_rate;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	893a      	ldrh	r2, [r7, #8]
 8005318:	805a      	strh	r2, [r3, #2]
	scope->buffer1 = buffer1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	605a      	str	r2, [r3, #4]
	scope->buffer2 = buffer2;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	609a      	str	r2, [r3, #8]
	scope->buffer3 = buffer3;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	60da      	str	r2, [r3, #12]
	scope->buffer4 = buffer4;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	611a      	str	r2, [r3, #16]
	scope->len = len;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005336:	829a      	strh	r2, [r3, #20]
	scope->trigger_location = 0;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	831a      	strh	r2, [r3, #24]
	scope->state = SCOPE_STATE_RESET;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]

	_scope = scope;
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <scope_init+0x98>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6013      	str	r3, [r2, #0]
	extern DMA_HandleTypeDef hdma_adc5;
	extern DMA_HandleTypeDef hdma_adc4;
	extern TIM_HandleTypeDef htim1;
	extern TIM_HandleTypeDef htim2;

	scope->hadc1 = &hadc1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a12      	ldr	r2, [pc, #72]	; (8005398 <scope_init+0x9c>)
 800534e:	61da      	str	r2, [r3, #28]
	scope->hadc2 = &hadc3;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <scope_init+0xa0>)
 8005354:	621a      	str	r2, [r3, #32]
	scope->hadc3 = &hadc5;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <scope_init+0xa4>)
 800535a:	625a      	str	r2, [r3, #36]	; 0x24
	scope->hadc4 = &hadc4;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <scope_init+0xa8>)
 8005360:	629a      	str	r2, [r3, #40]	; 0x28
	scope->hdma_adc1 = &hdma_adc1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <scope_init+0xac>)
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c
	scope->hdma_adc2 = &hdma_adc3;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <scope_init+0xb0>)
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
	scope->hdma_adc3 = &hdma_adc5;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <scope_init+0xb4>)
 8005372:	635a      	str	r2, [r3, #52]	; 0x34
	scope->hdma_adc4 = &hdma_adc4;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <scope_init+0xb8>)
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
	scope->htim1 = &htim1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <scope_init+0xbc>)
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c
	scope->htim2 = &htim2;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <scope_init+0xc0>)
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
	//MX_DMA_Init();
	//MX_ADC1_Init();
	//MX_OPAMP1_Init();
	//MX_TIM1_Init();
	//MX_TIM2_Init();
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20011788 	.word	0x20011788
 8005398:	20000384 	.word	0x20000384
 800539c:	200003f0 	.word	0x200003f0
 80053a0:	200004c8 	.word	0x200004c8
 80053a4:	2000045c 	.word	0x2000045c
 80053a8:	20000534 	.word	0x20000534
 80053ac:	20000594 	.word	0x20000594
 80053b0:	20000654 	.word	0x20000654
 80053b4:	200005f4 	.word	0x200005f4
 80053b8:	20016870 	.word	0x20016870
 80053bc:	200168bc 	.word	0x200168bc

080053c0 <scope_start>:
	scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = 0;
	scope->state = SCOPE_STATE_RESET;
}

void scope_start( tScope *scope )
{
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e009      	b.n	80053e2 <scope_start+0x22>
	{
		scope->CNDTRs[i] = 0;
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3310      	adds	r3, #16
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < SCOPE_STATE_MAX ; i++ )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b05      	cmp	r3, #5
 80053e6:	ddf2      	ble.n	80053ce <scope_start+0xe>
	}

	__HAL_DBGMCU_FREEZE_TIM1();
 80053e8:	4b5b      	ldr	r3, [pc, #364]	; (8005558 <scope_start+0x198>)
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	4a5a      	ldr	r2, [pc, #360]	; (8005558 <scope_start+0x198>)
 80053ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053f2:	6113      	str	r3, [r2, #16]
	__HAL_DBGMCU_FREEZE_TIM2();
 80053f4:	4b58      	ldr	r3, [pc, #352]	; (8005558 <scope_start+0x198>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a57      	ldr	r2, [pc, #348]	; (8005558 <scope_start+0x198>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	6093      	str	r3, [r2, #8]

	extern DAC_HandleTypeDef hdac2;
	int vcc = 3.3;
 8005400:	2303      	movs	r3, #3
 8005402:	60bb      	str	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (vcc/2.0)/vcc*4095);
 8005404:	68b8      	ldr	r0, [r7, #8]
 8005406:	f7fb f8b5 	bl	8000574 <__aeabi_i2d>
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005412:	f7fb fa43 	bl	800089c <__aeabi_ddiv>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4614      	mov	r4, r2
 800541c:	461d      	mov	r5, r3
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f7fb f8a8 	bl	8000574 <__aeabi_i2d>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fb fa36 	bl	800089c <__aeabi_ddiv>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	a345      	add	r3, pc, #276	; (adr r3, 8005550 <scope_start+0x190>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fb f903 	bl	8000648 <__aeabi_dmul>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	f7fb fbd5 	bl	8000bf8 <__aeabi_d2uiz>
 800544e:	4603      	mov	r3, r0
 8005450:	2200      	movs	r2, #0
 8005452:	2100      	movs	r1, #0
 8005454:	4841      	ldr	r0, [pc, #260]	; (800555c <scope_start+0x19c>)
 8005456:	f004 f93d 	bl	80096d4 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 800545a:	2100      	movs	r1, #0
 800545c:	483f      	ldr	r0, [pc, #252]	; (800555c <scope_start+0x19c>)
 800545e:	f004 f818 	bl	8009492 <HAL_DAC_Start>

	extern OPAMP_HandleTypeDef hopamp1;
	extern OPAMP_HandleTypeDef hopamp3;
	extern OPAMP_HandleTypeDef hopamp5;
	extern OPAMP_HandleTypeDef hopamp6;
	HAL_OPAMP_Start(&hopamp1);
 8005462:	483f      	ldr	r0, [pc, #252]	; (8005560 <scope_start+0x1a0>)
 8005464:	f005 f94a 	bl	800a6fc <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8005468:	483e      	ldr	r0, [pc, #248]	; (8005564 <scope_start+0x1a4>)
 800546a:	f005 f947 	bl	800a6fc <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp5);
 800546e:	483e      	ldr	r0, [pc, #248]	; (8005568 <scope_start+0x1a8>)
 8005470:	f005 f944 	bl	800a6fc <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp6);
 8005474:	483d      	ldr	r0, [pc, #244]	; (800556c <scope_start+0x1ac>)
 8005476:	f005 f941 	bl	800a6fc <HAL_OPAMP_Start>

	HAL_ADCEx_Calibration_Start( scope->hadc1, ADC_SINGLE_ENDED );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	217f      	movs	r1, #127	; 0x7f
 8005480:	4618      	mov	r0, r3
 8005482:	f003 fd43 	bl	8008f0c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc2, ADC_SINGLE_ENDED );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	217f      	movs	r1, #127	; 0x7f
 800548c:	4618      	mov	r0, r3
 800548e:	f003 fd3d 	bl	8008f0c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc3, ADC_SINGLE_ENDED );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	217f      	movs	r1, #127	; 0x7f
 8005498:	4618      	mov	r0, r3
 800549a:	f003 fd37 	bl	8008f0c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start( scope->hadc4, ADC_SINGLE_ENDED );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	217f      	movs	r1, #127	; 0x7f
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 fd31 	bl	8008f0c <HAL_ADCEx_Calibration_Start>

	LL_ADC_DisableIT_AWD1( scope->hadc1->Instance );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff03 	bl	80052bc <LL_ADC_DisableIT_AWD1>
	LL_ADC_DisableIT_AWD2( scope->hadc1->Instance );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff0d 	bl	80052dc <LL_ADC_DisableIT_AWD2>
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD1 );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2280      	movs	r2, #128	; 0x80
 80054ca:	601a      	str	r2, [r3, #0]
	__HAL_ADC_CLEAR_FLAG( scope->hadc1, ADC_FLAG_AWD2 );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d6:	601a      	str	r2, [r3, #0]

	scope->htim1->Instance->CNT = 0;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24
	scope->htim2->Instance->CNT = 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_ADC_Start_DMA( scope->hadc1, (uint32_t*)scope->buffer1, scope->len );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69d8      	ldr	r0, [r3, #28]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8a9b      	ldrh	r3, [r3, #20]
 80054f8:	461a      	mov	r2, r3
 80054fa:	f002 f8b7 	bl	800766c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc2, (uint32_t*)scope->buffer2, scope->len );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a18      	ldr	r0, [r3, #32]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6899      	ldr	r1, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8a9b      	ldrh	r3, [r3, #20]
 800550a:	461a      	mov	r2, r3
 800550c:	f002 f8ae 	bl	800766c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc3, (uint32_t*)scope->buffer3, scope->len );
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68d9      	ldr	r1, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8a9b      	ldrh	r3, [r3, #20]
 800551c:	461a      	mov	r2, r3
 800551e:	f002 f8a5 	bl	800766c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA( scope->hadc4, (uint32_t*)scope->buffer4, scope->len );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6919      	ldr	r1, [r3, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8a9b      	ldrh	r3, [r3, #20]
 800552e:	461a      	mov	r2, r3
 8005530:	f002 f89c 	bl	800766c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start( scope->htim1 );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	4618      	mov	r0, r3
 800553a:	f007 f8b7 	bl	800c6ac <HAL_TIM_Base_Start>
	scope->state = SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bdb0      	pop	{r4, r5, r7, pc}
 800554c:	f3af 8000 	nop.w
 8005550:	00000000 	.word	0x00000000
 8005554:	40affe00 	.word	0x40affe00
 8005558:	e0042000 	.word	0xe0042000
 800555c:	200006cc 	.word	0x200006cc
 8005560:	200115e8 	.word	0x200115e8
 8005564:	20011624 	.word	0x20011624
 8005568:	20011660 	.word	0x20011660
 800556c:	2001169c 	.word	0x2001169c

08005570 <scope_stop>:

void scope_stop( tScope *scope )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop( scope->htim1 );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	4618      	mov	r0, r3
 800557e:	f007 f905 	bl	800c78c <HAL_TIM_Base_Stop>
	HAL_TIM_OnePulse_Stop_IT( scope->htim2, TIM_CHANNEL_1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f007 fa15 	bl	800c9b8 <HAL_TIM_OnePulse_Stop_IT>
	HAL_TIM_Base_Stop( scope->htim2 );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4618      	mov	r0, r3
 8005594:	f007 f8fa 	bl	800c78c <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA( scope->hadc1 );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	4618      	mov	r0, r3
 800559e:	f002 f939 	bl	8007814 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc2 );
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f002 f934 	bl	8007814 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc3 );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f002 f92f 	bl	8007814 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA( scope->hadc4 );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 f92a 	bl	8007814 <HAL_ADC_Stop_DMA>
	scope->state = SCOPE_STATE_DONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2205      	movs	r2, #5
 80055c4:	701a      	strb	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <scope_is_busy>:

uint8_t scope_is_busy( tScope *scope )
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
	return scope->state != SCOPE_STATE_DONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b05      	cmp	r3, #5
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <scope_get_trigger>:

int32_t scope_get_trigger( tScope *scope )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	return scope->len - scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP];
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8a9b      	ldrh	r3, [r3, #20]
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	1ad3      	subs	r3, r2, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_ADC_ConvHalfCpltCallback>:

// ********************** IRQs ********************** //
int cndtr1 = 0;
int cndtr2 = 0;
void HAL_ADC_ConvHalfCpltCallback( ADC_HandleTypeDef* hadc )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
	{
	}
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef* hadc )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 800562c:	4b15      	ldr	r3, [pc, #84]	; (8005684 <HAL_ADC_ConvCpltCallback+0x60>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d120      	bne.n	800567a <HAL_ADC_ConvCpltCallback+0x56>
	{
		if( 1 && _scope->state == SCOPE_STATE_WAIT_FOR_CONVERSION_COMPLETE )
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <HAL_ADC_ConvCpltCallback+0x60>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d11b      	bne.n	800567a <HAL_ADC_ConvCpltCallback+0x56>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_ARM;
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_ADC_ConvCpltCallback+0x60>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2202      	movs	r2, #2
 8005648:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_ARM] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <HAL_ADC_ConvCpltCallback+0x60>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <HAL_ADC_ConvCpltCallback+0x64>)
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	64da      	str	r2, [r3, #76]	; 0x4c
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_ADC_ConvCpltCallback+0x60>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2280      	movs	r2, #128	; 0x80
 800565e:	601a      	str	r2, [r3, #0]
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
			LL_ADC_EnableIT_AWD1( _scope->hadc1->Instance );
 8005660:	4b08      	ldr	r3, [pc, #32]	; (8005684 <HAL_ADC_ConvCpltCallback+0x60>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fe07 	bl	800527c <LL_ADC_EnableIT_AWD1>
			cndtr1 = 0;
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_ADC_ConvCpltCallback+0x64>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
			cndtr2 = 0;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_ADC_ConvCpltCallback+0x68>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20011788 	.word	0x20011788
 8005688:	2001178c 	.word	0x2001178c
 800568c:	20011790 	.word	0x20011790

08005690 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback( ADC_HandleTypeDef* hadc )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005698:	4b17      	ldr	r3, [pc, #92]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d125      	bne.n	80056f0 <HAL_ADC_LevelOutOfWindowCallback+0x60>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_ARM )
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d120      	bne.n	80056f0 <HAL_ADC_LevelOutOfWindowCallback+0x60>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_TRIGGER;
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2203      	movs	r2, #3
 80056b4:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_TRIGGER] = _scope->hdma_adc1->Instance->CNDTR;
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50
			LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fdf4 	bl	80052bc <LL_ADC_DisableIT_AWD1>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e0:	601a      	str	r2, [r3, #0]
			LL_ADC_EnableIT_AWD2( _scope->hadc1->Instance );
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_ADC_LevelOutOfWindowCallback+0x68>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fdd6 	bl	800529c <LL_ADC_EnableIT_AWD2>
		}
	}
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20011788 	.word	0x20011788

080056fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
uint32_t start_cpu;
uint32_t stop_cpu;

void HAL_ADCEx_LevelOutOfWindow2Callback( ADC_HandleTypeDef* hadc )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	if( hadc == _scope->hadc1 )
 8005704:	4b2c      	ldr	r3, [pc, #176]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d14f      	bne.n	80057b0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_TRIGGER )
 8005710:	4b29      	ldr	r3, [pc, #164]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d14a      	bne.n	80057b0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xb4>
		{
			_scope->state = SCOPE_STATE_WAIT_FOR_STOP;
 800571a:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2204      	movs	r2, #4
 8005720:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_WAIT_FOR_STOP] = cndtr1;//_scope->hdma_adc1->Instance->CNDTR;
 8005722:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a25      	ldr	r2, [pc, #148]	; (80057bc <HAL_ADCEx_LevelOutOfWindow2Callback+0xc0>)
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

			//_scope->htim2->Instance->CCR1 = 127;
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC1 );
 800572c:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0202 	mvn.w	r2, #2
 8005738:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_CC2 );
 800573a:	4b1f      	ldr	r3, [pc, #124]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0204 	mvn.w	r2, #4
 8005746:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_IT( _scope->htim2, TIM_IT_UPDATE );
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0201 	mvn.w	r2, #1
 8005754:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC1 );
 8005756:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f06f 0202 	mvn.w	r2, #2
 8005762:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_CC2 );
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0204 	mvn.w	r2, #4
 8005770:	611a      	str	r2, [r3, #16]
			__HAL_TIM_CLEAR_FLAG( _scope->htim2, TIM_FLAG_UPDATE );
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0201 	mvn.w	r2, #1
 800577e:	611a      	str	r2, [r3, #16]
			start_cpu = SysTick->VAL;
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc4>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <HAL_ADCEx_LevelOutOfWindow2Callback+0xc8>)
 8005786:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start( _scope->htim2 );
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	4618      	mov	r0, r3
 8005790:	f006 ff8c 	bl	800c6ac <HAL_TIM_Base_Start>
			HAL_TIM_OnePulse_Start_IT( _scope->htim2, TIM_CHANNEL_1);
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f007 f87d 	bl	800c89c <HAL_TIM_OnePulse_Start_IT>
			//LL_ADC_DisableIT_AWD1( _scope->hadc1->Instance );
			LL_ADC_DisableIT_AWD2( _scope->hadc1->Instance );
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_ADCEx_LevelOutOfWindow2Callback+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fd96 	bl	80052dc <LL_ADC_DisableIT_AWD2>
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD1 );
			//__HAL_ADC_CLEAR_FLAG( _scope->hadc1, ADC_FLAG_AWD2 );
		}
	}
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20011788 	.word	0x20011788
 80057bc:	2001178c 	.word	0x2001178c
 80057c0:	e000e010 	.word	0xe000e010
 80057c4:	20011794 	.word	0x20011794

080057c8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback( TIM_HandleTypeDef *htim )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	if( htim == _scope->htim2 ) // htim2
 80057d0:	4b23      	ldr	r3, [pc, #140]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d13c      	bne.n	8005856 <HAL_TIM_OC_DelayElapsedCallback+0x8e>
	{
		if( _scope->state == SCOPE_STATE_WAIT_FOR_STOP )
 80057dc:	4b20      	ldr	r3, [pc, #128]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d137      	bne.n	8005856 <HAL_TIM_OC_DelayElapsedCallback+0x8e>
		{
			stop_cpu = SysTick->VAL;
 80057e6:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4a1f      	ldr	r2, [pc, #124]	; (8005868 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 80057ec:	6013      	str	r3, [r2, #0]
			_scope->state = SCOPE_STATE_DONE;
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2205      	movs	r2, #5
 80057f4:	701a      	strb	r2, [r3, #0]
			_scope->CNDTRs[SCOPE_STATE_DONE] = cndtr2;//_scope->hdma_adc1->Instance->CNDTR;
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_TIM_Base_Stop( _scope->htim1 );
 8005800:	4b17      	ldr	r3, [pc, #92]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	4618      	mov	r0, r3
 8005808:	f006 ffc0 	bl	800c78c <HAL_TIM_Base_Stop>
			HAL_ADC_Stop_DMA( _scope->hadc1 );
 800580c:	4b14      	ldr	r3, [pc, #80]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	4618      	mov	r0, r3
 8005814:	f001 fffe 	bl	8007814 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc2 );
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	4618      	mov	r0, r3
 8005820:	f001 fff8 	bl	8007814 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc3 );
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fff2 	bl	8007814 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_DMA( _scope->hadc4 );
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	4618      	mov	r0, r3
 8005838:	f001 ffec 	bl	8007814 <HAL_ADC_Stop_DMA>
			HAL_TIM_OnePulse_Stop_IT( _scope->htim2, TIM_CHANNEL_1);
 800583c:	4b08      	ldr	r3, [pc, #32]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f007 f8b7 	bl	800c9b8 <HAL_TIM_OnePulse_Stop_IT>
			HAL_TIM_Base_Stop( _scope->htim2 );
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	4618      	mov	r0, r3
 8005852:	f006 ff9b 	bl	800c78c <HAL_TIM_Base_Stop>
		}
	}
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20011788 	.word	0x20011788
 8005864:	e000e010 	.word	0xe000e010
 8005868:	20011798 	.word	0x20011798
 800586c:	20011790 	.word	0x20011790

08005870 <test_scope>:
uint16_t buffer6[BUFFER_LEN];
uint16_t buffer7[BUFFER_LEN];
uint16_t buffer8[BUFFER_LEN];
tScope scope = {0};
void test_scope( int collapsed )
{
 8005870:	b5b0      	push	{r4, r5, r7, lr}
 8005872:	b098      	sub	sp, #96	; 0x60
 8005874:	af04      	add	r7, sp, #16
 8005876:	6078      	str	r0, [r7, #4]
	// test scope

	uint16_t start = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  static int trigger_bck = 0;
	  static int i = 0;

	if( _scope_init == 0 )
 800587c:	4ba8      	ldr	r3, [pc, #672]	; (8005b20 <test_scope+0x2b0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d17e      	bne.n	8005982 <test_scope+0x112>
	{

		float freq = 3;
 8005884:	4ba7      	ldr	r3, [pc, #668]	; (8005b24 <test_scope+0x2b4>)
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8005888:	2300      	movs	r3, #0
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800588c:	e057      	b.n	800593e <test_scope+0xce>
		{
			dac1_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*1023 + 2048;
 800588e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005896:	ee17 0a90 	vmov	r0, s15
 800589a:	f7fa fe7d 	bl	8000598 <__aeabi_f2d>
 800589e:	a39e      	add	r3, pc, #632	; (adr r3, 8005b18 <test_scope+0x2a8>)
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f7fa fed0 	bl	8000648 <__aeabi_dmul>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	461d      	mov	r5, r3
 80058b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058b2:	f7fa fe5f 	bl	8000574 <__aeabi_i2d>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fec3 	bl	8000648 <__aeabi_dmul>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	4b96      	ldr	r3, [pc, #600]	; (8005b28 <test_scope+0x2b8>)
 80058d0:	f7fa ffe4 	bl	800089c <__aeabi_ddiv>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	f7fb f9ac 	bl	8000c38 <__aeabi_d2f>
 80058e0:	4603      	mov	r3, r0
 80058e2:	ee00 3a10 	vmov	s0, r3
 80058e6:	f021 ff77 	bl	80277d8 <sinf>
 80058ea:	eef0 7a40 	vmov.f32	s15, s0
 80058ee:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005b2c <test_scope+0x2bc>
 80058f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058f6:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8005b30 <test_scope+0x2c0>
 80058fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005902:	ee17 3a90 	vmov	r3, s15
 8005906:	b299      	uxth	r1, r3
 8005908:	4a8a      	ldr	r2, [pc, #552]	; (8005b34 <test_scope+0x2c4>)
 800590a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			//dac2_buffer[i] = sinf(freq*2*M_PI*i/BUFFER_LEN)*2000 + 2048;
			dac2_buffer[i] = 1024+(((BUFFER_LEN-i-1)*8)%2048);
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005916:	3303      	adds	r3, #3
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	425a      	negs	r2, r3
 800591c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005920:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005924:	bf58      	it	pl
 8005926:	4253      	negpl	r3, r2
 8005928:	b29b      	uxth	r3, r3
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	b299      	uxth	r1, r3
 8005930:	4a81      	ldr	r2, [pc, #516]	; (8005b38 <test_scope+0x2c8>)
 8005932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005934:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( int i = 0 ; i < BUFFER_LEN ; i++ )
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	3301      	adds	r3, #1
 800593c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	dba3      	blt.n	800588e <test_scope+0x1e>
		}
		extern DAC_HandleTypeDef hdac1;
		extern TIM_HandleTypeDef htim2;
		extern TIM_HandleTypeDef htim3;
		__HAL_DBGMCU_FREEZE_TIM3();
 8005946:	4b7d      	ldr	r3, [pc, #500]	; (8005b3c <test_scope+0x2cc>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	4a7c      	ldr	r2, [pc, #496]	; (8005b3c <test_scope+0x2cc>)
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	6093      	str	r3, [r2, #8]
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 8005952:	2300      	movs	r3, #0
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595a:	4a76      	ldr	r2, [pc, #472]	; (8005b34 <test_scope+0x2c4>)
 800595c:	2100      	movs	r1, #0
 800595e:	4878      	ldr	r0, [pc, #480]	; (8005b40 <test_scope+0x2d0>)
 8005960:	f003 fdea 	bl	8009538 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA( &hdac1, DAC_CHANNEL_2, (uint32_t*)dac2_buffer, BUFFER_LEN, DAC_ALIGN_12B_R );
 8005964:	2300      	movs	r3, #0
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596c:	4a72      	ldr	r2, [pc, #456]	; (8005b38 <test_scope+0x2c8>)
 800596e:	2110      	movs	r1, #16
 8005970:	4873      	ldr	r0, [pc, #460]	; (8005b40 <test_scope+0x2d0>)
 8005972:	f003 fde1 	bl	8009538 <HAL_DAC_Start_DMA>
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start( &htim3 );
 8005976:	4873      	ldr	r0, [pc, #460]	; (8005b44 <test_scope+0x2d4>)
 8005978:	f006 fe98 	bl	800c6ac <HAL_TIM_Base_Start>
		//htim1.Instance->ARR = 0x54;
		//htim1.Instance->CNT = 0x2A;
		//HAL_TIM_Base_Start( &htim1 );


		_scope_init = 1;
 800597c:	4b68      	ldr	r3, [pc, #416]	; (8005b20 <test_scope+0x2b0>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]


	{

		static int dd = 0;
		if( dd<10 )
 8005982:	4b71      	ldr	r3, [pc, #452]	; (8005b48 <test_scope+0x2d8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b09      	cmp	r3, #9
 8005988:	dc05      	bgt.n	8005996 <test_scope+0x126>
		{
			dd++;
 800598a:	4b6f      	ldr	r3, [pc, #444]	; (8005b48 <test_scope+0x2d8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3301      	adds	r3, #1
 8005990:	4a6d      	ldr	r2, [pc, #436]	; (8005b48 <test_scope+0x2d8>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e09b      	b.n	8005ace <test_scope+0x25e>
		}
		else
		{
			dd = 0;
 8005996:	4b6c      	ldr	r3, [pc, #432]	; (8005b48 <test_scope+0x2d8>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
			if( collapsed )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d04d      	beq.n	8005a3e <test_scope+0x1ce>
			{
				for( int d = 0 ; d < 480 ; d += 40 )
 80059a2:	2300      	movs	r3, #0
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a6:	e011      	b.n	80059cc <test_scope+0x15c>
				{
					lcd_rect( d/2+240, 0, 1, 320, 0x55555555 );
 80059a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059aa:	0fda      	lsrs	r2, r3, #31
 80059ac:	4413      	add	r3, r2
 80059ae:	105b      	asrs	r3, r3, #1
 80059b0:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80059b4:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80059be:	2201      	movs	r2, #1
 80059c0:	2100      	movs	r1, #0
 80059c2:	f7fc f93f 	bl	8001c44 <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 80059c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c8:	3328      	adds	r3, #40	; 0x28
 80059ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80059d2:	dbe9      	blt.n	80059a8 <test_scope+0x138>
				}
				lcd_rect( 480/2+240, 0, 1, 320, 0x55555555 );
 80059d4:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80059de:	2201      	movs	r2, #1
 80059e0:	2100      	movs	r1, #0
 80059e2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80059e6:	f7fc f92d 	bl	8001c44 <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 80059ea:	2300      	movs	r3, #0
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
 80059ee:	e00c      	b.n	8005a0a <test_scope+0x19a>
				{
					lcd_rect( 0/2+240, d, 480, 1, 0x55555555 );
 80059f0:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2301      	movs	r3, #1
 80059f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80059fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059fe:	20f0      	movs	r0, #240	; 0xf0
 8005a00:	f7fc f920 	bl	8001c44 <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a06:	3328      	adds	r3, #40	; 0x28
 8005a08:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a10:	dbee      	blt.n	80059f0 <test_scope+0x180>
				}
				lcd_rect( 0/2+240, 320, 480, 1, 0x55555555 );
 8005a12:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a22:	20f0      	movs	r0, #240	; 0xf0
 8005a24:	f7fc f90e 	bl	8001c44 <lcd_rect>

				lcd_rect( 0/2+240, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005a28:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a34:	2164      	movs	r1, #100	; 0x64
 8005a36:	20f0      	movs	r0, #240	; 0xf0
 8005a38:	f7fc f904 	bl	8001c44 <lcd_rect>
 8005a3c:	e047      	b.n	8005ace <test_scope+0x25e>
			}
			else
			{
				for( int d = 0 ; d < 480 ; d += 40 )
 8005a3e:	2300      	movs	r3, #0
 8005a40:	643b      	str	r3, [r7, #64]	; 0x40
 8005a42:	e00c      	b.n	8005a5e <test_scope+0x1ee>
				{
					lcd_rect( d, 0, 1, 320, 0x55555555 );
 8005a44:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2100      	movs	r1, #0
 8005a52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a54:	f7fc f8f6 	bl	8001c44 <lcd_rect>
				for( int d = 0 ; d < 480 ; d += 40 )
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	3328      	adds	r3, #40	; 0x28
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a60:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005a64:	dbee      	blt.n	8005a44 <test_scope+0x1d4>
				}
				lcd_rect( 480, 0, 1, 320, 0x55555555 );
 8005a66:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005a70:	2201      	movs	r2, #1
 8005a72:	2100      	movs	r1, #0
 8005a74:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8005a78:	f7fc f8e4 	bl	8001c44 <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	e00c      	b.n	8005a9c <test_scope+0x22c>
				{
					lcd_rect( 0, d, 480, 1, 0x55555555 );
 8005a82:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a90:	2000      	movs	r0, #0
 8005a92:	f7fc f8d7 	bl	8001c44 <lcd_rect>
				for( int d = 0 ; d < 320 ; d += 40 )
 8005a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a98:	3328      	adds	r3, #40	; 0x28
 8005a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005aa2:	dbee      	blt.n	8005a82 <test_scope+0x212>
				}
				lcd_rect( 0, 320, 480, 1, 0x55555555 );
 8005aa4:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ab0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fc f8c5 	bl	8001c44 <lcd_rect>

				lcd_rect( 0, 320-((2048+768)*320)/4096, 480, 1, 0xFFFFFF00 );
 8005aba:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ac6:	2164      	movs	r1, #100	; 0x64
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f7fc f8bb 	bl	8001c44 <lcd_rect>

		}


		scope_init( &scope, 2048, 1000000,
				(i&0x01)?buffer1:buffer5,
 8005ace:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <test_scope+0x2dc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <test_scope+0x26e>
 8005ada:	481d      	ldr	r0, [pc, #116]	; (8005b50 <test_scope+0x2e0>)
 8005adc:	e000      	b.n	8005ae0 <test_scope+0x270>
 8005ade:	481d      	ldr	r0, [pc, #116]	; (8005b54 <test_scope+0x2e4>)
				(i&0x01)?buffer2:buffer6,
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <test_scope+0x2dc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
		scope_init( &scope, 2048, 1000000,
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <test_scope+0x280>
 8005aec:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <test_scope+0x2e8>)
 8005aee:	e000      	b.n	8005af2 <test_scope+0x282>
 8005af0:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <test_scope+0x2ec>)
				(i&0x01)?buffer3:buffer7,
 8005af2:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <test_scope+0x2dc>)
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	f002 0201 	and.w	r2, r2, #1
		scope_init( &scope, 2048, 1000000,
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d001      	beq.n	8005b02 <test_scope+0x292>
 8005afe:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <test_scope+0x2f0>)
 8005b00:	e000      	b.n	8005b04 <test_scope+0x294>
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <test_scope+0x2f4>)
				(i&0x01)?buffer4:buffer8,
 8005b04:	4911      	ldr	r1, [pc, #68]	; (8005b4c <test_scope+0x2dc>)
 8005b06:	6809      	ldr	r1, [r1, #0]
 8005b08:	f001 0101 	and.w	r1, r1, #1
		scope_init( &scope, 2048, 1000000,
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	d02d      	beq.n	8005b6c <test_scope+0x2fc>
 8005b10:	4915      	ldr	r1, [pc, #84]	; (8005b68 <test_scope+0x2f8>)
 8005b12:	e02c      	b.n	8005b6e <test_scope+0x2fe>
 8005b14:	f3af 8000 	nop.w
 8005b18:	54442d18 	.word	0x54442d18
 8005b1c:	400921fb 	.word	0x400921fb
 8005b20:	2001179c 	.word	0x2001179c
 8005b24:	40400000 	.word	0x40400000
 8005b28:	40900000 	.word	0x40900000
 8005b2c:	447fc000 	.word	0x447fc000
 8005b30:	45000000 	.word	0x45000000
 8005b34:	200117a0 	.word	0x200117a0
 8005b38:	20011fa0 	.word	0x20011fa0
 8005b3c:	e0042000 	.word	0xe0042000
 8005b40:	200006b8 	.word	0x200006b8
 8005b44:	20016908 	.word	0x20016908
 8005b48:	200167fc 	.word	0x200167fc
 8005b4c:	20016800 	.word	0x20016800
 8005b50:	200127a0 	.word	0x200127a0
 8005b54:	200147a0 	.word	0x200147a0
 8005b58:	20012fa0 	.word	0x20012fa0
 8005b5c:	20014fa0 	.word	0x20014fa0
 8005b60:	200137a0 	.word	0x200137a0
 8005b64:	200157a0 	.word	0x200157a0
 8005b68:	20013fa0 	.word	0x20013fa0
 8005b6c:	49af      	ldr	r1, [pc, #700]	; (8005e2c <test_scope+0x5bc>)
 8005b6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005b72:	9403      	str	r4, [sp, #12]
 8005b74:	9102      	str	r1, [sp, #8]
 8005b76:	9201      	str	r2, [sp, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f244 2240 	movw	r2, #16960	; 0x4240
 8005b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b84:	48aa      	ldr	r0, [pc, #680]	; (8005e30 <test_scope+0x5c0>)
 8005b86:	f7ff fbb9 	bl	80052fc <scope_init>
				BUFFER_LEN );
		scope_start( &scope );
 8005b8a:	48a9      	ldr	r0, [pc, #676]	; (8005e30 <test_scope+0x5c0>)
 8005b8c:	f7ff fc18 	bl	80053c0 <scope_start>
		while( scope_is_busy( &scope ) );
 8005b90:	bf00      	nop
 8005b92:	48a7      	ldr	r0, [pc, #668]	; (8005e30 <test_scope+0x5c0>)
 8005b94:	f7ff fd1b 	bl	80055ce <scope_is_busy>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f9      	bne.n	8005b92 <test_scope+0x322>
		scope_stop( &scope );
 8005b9e:	48a4      	ldr	r0, [pc, #656]	; (8005e30 <test_scope+0x5c0>)
 8005ba0:	f7ff fce6 	bl	8005570 <scope_stop>

		int32_t trigger = scope_get_trigger( &scope ) - BUFFER_LEN/2;
 8005ba4:	48a2      	ldr	r0, [pc, #648]	; (8005e30 <test_scope+0x5c0>)
 8005ba6:	f7ff fd23 	bl	80055f0 <scope_get_trigger>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24

		//printf( "data%d = np.array( [", i );
		for( int jj = 0; jj < 480; jj++ )
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb6:	e3c7      	b.n	8006348 <test_scope+0xad8>
		//for( int jj = 0; jj < BUFFER_LEN; jj++ )
		{
			int j = (jj*BUFFER_LEN)/480.0;
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	029b      	lsls	r3, r3, #10
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fcd9 	bl	8000574 <__aeabi_i2d>
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	4b9b      	ldr	r3, [pc, #620]	; (8005e34 <test_scope+0x5c4>)
 8005bc8:	f7fa fe68 	bl	800089c <__aeabi_ddiv>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f7fa ffe8 	bl	8000ba8 <__aeabi_d2iz>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	623b      	str	r3, [r7, #32]
			//int j = jj;
			int n = trigger + j;
 8005bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	4413      	add	r3, r2
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
			if( n < 0 )
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da04      	bge.n	8005bf4 <test_scope+0x384>
			{
				n += BUFFER_LEN;
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	e007      	b.n	8005c04 <test_scope+0x394>
			}
			else if( n >= BUFFER_LEN )
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfa:	db03      	blt.n	8005c04 <test_scope+0x394>
			{
				n -= BUFFER_LEN;
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
			}

			int n2 = trigger_bck + j;
 8005c04:	4b8c      	ldr	r3, [pc, #560]	; (8005e38 <test_scope+0x5c8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a3a      	ldr	r2, [r7, #32]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	633b      	str	r3, [r7, #48]	; 0x30
			if( n2 < 0 )
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da04      	bge.n	8005c1e <test_scope+0x3ae>
			{
				n2 += BUFFER_LEN;
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c1c:	e007      	b.n	8005c2e <test_scope+0x3be>
			}
			else if( n2 >= BUFFER_LEN )
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	db03      	blt.n	8005c2e <test_scope+0x3be>
			{
				n2 -= BUFFER_LEN;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			//printf( "%d, ", buffer[n] );

			if( collapsed )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 81dc 	beq.w	8005fee <test_scope+0x77e>
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	613b      	str	r3, [r7, #16]
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005c3a:	4b80      	ldr	r3, [pc, #512]	; (8005e3c <test_scope+0x5cc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <test_scope+0x3fa>
 8005c46:	4a7e      	ldr	r2, [pc, #504]	; (8005e40 <test_scope+0x5d0>)
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	019b      	lsls	r3, r3, #6
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	da01      	bge.n	8005c60 <test_scope+0x3f0>
 8005c5c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005c60:	131b      	asrs	r3, r3, #12
 8005c62:	425b      	negs	r3, r3
 8005c64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005c68:	e010      	b.n	8005c8c <test_scope+0x41c>
 8005c6a:	4a76      	ldr	r2, [pc, #472]	; (8005e44 <test_scope+0x5d4>)
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c72:	461a      	mov	r2, r3
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	019b      	lsls	r3, r3, #6
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da01      	bge.n	8005c84 <test_scope+0x414>
 8005c80:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005c84:	131b      	asrs	r3, r3, #12
 8005c86:	425b      	negs	r3, r3
 8005c88:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005c8c:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8005c8e:	4b6b      	ldr	r3, [pc, #428]	; (8005e3c <test_scope+0x5cc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d011      	beq.n	8005cbe <test_scope+0x44e>
 8005c9a:	4a6a      	ldr	r2, [pc, #424]	; (8005e44 <test_scope+0x5d4>)
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	019b      	lsls	r3, r3, #6
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da01      	bge.n	8005cb4 <test_scope+0x444>
 8005cb0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005cb4:	131b      	asrs	r3, r3, #12
 8005cb6:	425b      	negs	r3, r3
 8005cb8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005cbc:	e010      	b.n	8005ce0 <test_scope+0x470>
 8005cbe:	4a60      	ldr	r2, [pc, #384]	; (8005e40 <test_scope+0x5d0>)
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	019b      	lsls	r3, r3, #6
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	da01      	bge.n	8005cd8 <test_scope+0x468>
 8005cd4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005cd8:	131b      	asrs	r3, r3, #12
 8005cda:	425b      	negs	r3, r3
 8005cdc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ce0:	60bb      	str	r3, [r7, #8]
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	0fda      	lsrs	r2, r3, #31
 8005ce6:	4413      	add	r3, r2
 8005ce8:	105b      	asrs	r3, r3, #1
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	33f0      	adds	r3, #240	; 0xf0
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	b21b      	sxth	r3, r3
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	b211      	sxth	r1, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fc f893 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x0001C007 );
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	0fda      	lsrs	r2, r3, #31
 8005d02:	4413      	add	r3, r2
 8005d04:	105b      	asrs	r3, r3, #1
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	33f0      	adds	r3, #240	; 0xf0
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	b211      	sxth	r1, r2
 8005d12:	4a4d      	ldr	r2, [pc, #308]	; (8005e48 <test_scope+0x5d8>)
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc f885 	bl	8001e24 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 8005d1a:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <test_scope+0x5cc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <test_scope+0x4da>
 8005d26:	4a49      	ldr	r2, [pc, #292]	; (8005e4c <test_scope+0x5dc>)
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	019b      	lsls	r3, r3, #6
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da01      	bge.n	8005d40 <test_scope+0x4d0>
 8005d3c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d40:	131b      	asrs	r3, r3, #12
 8005d42:	425b      	negs	r3, r3
 8005d44:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d48:	e010      	b.n	8005d6c <test_scope+0x4fc>
 8005d4a:	4a41      	ldr	r2, [pc, #260]	; (8005e50 <test_scope+0x5e0>)
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d52:	461a      	mov	r2, r3
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	019b      	lsls	r3, r3, #6
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	da01      	bge.n	8005d64 <test_scope+0x4f4>
 8005d60:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d64:	131b      	asrs	r3, r3, #12
 8005d66:	425b      	negs	r3, r3
 8005d68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d6c:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 8005d6e:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <test_scope+0x5cc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d011      	beq.n	8005d9e <test_scope+0x52e>
 8005d7a:	4a35      	ldr	r2, [pc, #212]	; (8005e50 <test_scope+0x5e0>)
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d82:	461a      	mov	r2, r3
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	019b      	lsls	r3, r3, #6
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	da01      	bge.n	8005d94 <test_scope+0x524>
 8005d90:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005d94:	131b      	asrs	r3, r3, #12
 8005d96:	425b      	negs	r3, r3
 8005d98:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005d9c:	e010      	b.n	8005dc0 <test_scope+0x550>
 8005d9e:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <test_scope+0x5dc>)
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da6:	461a      	mov	r2, r3
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	019b      	lsls	r3, r3, #6
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	da01      	bge.n	8005db8 <test_scope+0x548>
 8005db4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005db8:	131b      	asrs	r3, r3, #12
 8005dba:	425b      	negs	r3, r3
 8005dbc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005dc0:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	0fda      	lsrs	r2, r3, #31
 8005dc6:	4413      	add	r3, r2
 8005dc8:	105b      	asrs	r3, r3, #1
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	33f0      	adds	r3, #240	; 0xf0
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	b21b      	sxth	r3, r3
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	b211      	sxth	r1, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fc f823 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x00003F00 );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	0fda      	lsrs	r2, r3, #31
 8005de2:	4413      	add	r3, r2
 8005de4:	105b      	asrs	r3, r3, #1
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	33f0      	adds	r3, #240	; 0xf0
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	b211      	sxth	r1, r2
 8005df2:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fc f814 	bl	8001e24 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <test_scope+0x5cc>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d027      	beq.n	8005e58 <test_scope+0x5e8>
 8005e08:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <test_scope+0x5e4>)
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da01      	bge.n	8005e22 <test_scope+0x5b2>
 8005e1e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e22:	131b      	asrs	r3, r3, #12
 8005e24:	425b      	negs	r3, r3
 8005e26:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e2a:	e026      	b.n	8005e7a <test_scope+0x60a>
 8005e2c:	20015fa0 	.word	0x20015fa0
 8005e30:	200167a0 	.word	0x200167a0
 8005e34:	407e0000 	.word	0x407e0000
 8005e38:	20016804 	.word	0x20016804
 8005e3c:	20016800 	.word	0x20016800
 8005e40:	200147a0 	.word	0x200147a0
 8005e44:	200127a0 	.word	0x200127a0
 8005e48:	0001c007 	.word	0x0001c007
 8005e4c:	20014fa0 	.word	0x20014fa0
 8005e50:	20012fa0 	.word	0x20012fa0
 8005e54:	200157a0 	.word	0x200157a0
 8005e58:	4ab9      	ldr	r2, [pc, #740]	; (8006140 <test_scope+0x8d0>)
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e60:	461a      	mov	r2, r3
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da01      	bge.n	8005e72 <test_scope+0x602>
 8005e6e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e72:	131b      	asrs	r3, r3, #12
 8005e74:	425b      	negs	r3, r3
 8005e76:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005e7a:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8005e7c:	4bb1      	ldr	r3, [pc, #708]	; (8006144 <test_scope+0x8d4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <test_scope+0x63c>
 8005e88:	4aad      	ldr	r2, [pc, #692]	; (8006140 <test_scope+0x8d0>)
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e90:	461a      	mov	r2, r3
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da01      	bge.n	8005ea2 <test_scope+0x632>
 8005e9e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005ea2:	131b      	asrs	r3, r3, #12
 8005ea4:	425b      	negs	r3, r3
 8005ea6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005eaa:	e010      	b.n	8005ece <test_scope+0x65e>
 8005eac:	4aa6      	ldr	r2, [pc, #664]	; (8006148 <test_scope+0x8d8>)
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	019b      	lsls	r3, r3, #6
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da01      	bge.n	8005ec6 <test_scope+0x656>
 8005ec2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005ec6:	131b      	asrs	r3, r3, #12
 8005ec8:	425b      	negs	r3, r3
 8005eca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005ece:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	0fda      	lsrs	r2, r3, #31
 8005ed4:	4413      	add	r3, r2
 8005ed6:	105b      	asrs	r3, r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	33f0      	adds	r3, #240	; 0xf0
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	b211      	sxth	r1, r2
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fb ff9c 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0x000001F8 );
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	0fda      	lsrs	r2, r3, #31
 8005ef0:	4413      	add	r3, r2
 8005ef2:	105b      	asrs	r3, r3, #1
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	33f0      	adds	r3, #240	; 0xf0
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	b211      	sxth	r1, r2
 8005f00:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fb ff8d 	bl	8001e24 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8005f0a:	4b8e      	ldr	r3, [pc, #568]	; (8006144 <test_scope+0x8d4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d011      	beq.n	8005f3a <test_scope+0x6ca>
 8005f16:	4a8d      	ldr	r2, [pc, #564]	; (800614c <test_scope+0x8dc>)
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	019b      	lsls	r3, r3, #6
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da01      	bge.n	8005f30 <test_scope+0x6c0>
 8005f2c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f30:	131b      	asrs	r3, r3, #12
 8005f32:	425b      	negs	r3, r3
 8005f34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f38:	e010      	b.n	8005f5c <test_scope+0x6ec>
 8005f3a:	4a85      	ldr	r2, [pc, #532]	; (8006150 <test_scope+0x8e0>)
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f42:	461a      	mov	r2, r3
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	019b      	lsls	r3, r3, #6
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da01      	bge.n	8005f54 <test_scope+0x6e4>
 8005f50:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f54:	131b      	asrs	r3, r3, #12
 8005f56:	425b      	negs	r3, r3
 8005f58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f5c:	60fb      	str	r3, [r7, #12]
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 8005f5e:	4b79      	ldr	r3, [pc, #484]	; (8006144 <test_scope+0x8d4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <test_scope+0x71e>
 8005f6a:	4a79      	ldr	r2, [pc, #484]	; (8006150 <test_scope+0x8e0>)
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f72:	461a      	mov	r2, r3
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	019b      	lsls	r3, r3, #6
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	da01      	bge.n	8005f84 <test_scope+0x714>
 8005f80:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005f84:	131b      	asrs	r3, r3, #12
 8005f86:	425b      	negs	r3, r3
 8005f88:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f8c:	e010      	b.n	8005fb0 <test_scope+0x740>
 8005f8e:	4a6f      	ldr	r2, [pc, #444]	; (800614c <test_scope+0x8dc>)
 8005f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f96:	461a      	mov	r2, r3
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	019b      	lsls	r3, r3, #6
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da01      	bge.n	8005fa8 <test_scope+0x738>
 8005fa4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005fa8:	131b      	asrs	r3, r3, #12
 8005faa:	425b      	negs	r3, r3
 8005fac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005fb0:	60bb      	str	r3, [r7, #8]
				lcd_set_pixel( x0/2+240, y0, 0x00000000 );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	0fda      	lsrs	r2, r3, #31
 8005fb6:	4413      	add	r3, r2
 8005fb8:	105b      	asrs	r3, r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	33f0      	adds	r3, #240	; 0xf0
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	b211      	sxth	r1, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fb ff2b 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0/2+240, y1, 0xFFFFFFFF );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	0fda      	lsrs	r2, r3, #31
 8005fd2:	4413      	add	r3, r2
 8005fd4:	105b      	asrs	r3, r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	33f0      	adds	r3, #240	; 0xf0
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	b211      	sxth	r1, r2
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fb ff1c 	bl	8001e24 <lcd_set_pixel>
 8005fec:	e1a9      	b.n	8006342 <test_scope+0xad2>
			}
			else
			{
				int x0, y0, y1;
				x0 = jj;//(j*480)/BUFFER_LEN;
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	61fb      	str	r3, [r7, #28]
				y0 = 320-(((i&0x01)?buffer5[n2]:buffer1[n2])*320)/4096;
 8005ff2:	4b54      	ldr	r3, [pc, #336]	; (8006144 <test_scope+0x8d4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d011      	beq.n	8006022 <test_scope+0x7b2>
 8005ffe:	4a55      	ldr	r2, [pc, #340]	; (8006154 <test_scope+0x8e4>)
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006006:	461a      	mov	r2, r3
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	019b      	lsls	r3, r3, #6
 8006010:	2b00      	cmp	r3, #0
 8006012:	da01      	bge.n	8006018 <test_scope+0x7a8>
 8006014:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006018:	131b      	asrs	r3, r3, #12
 800601a:	425b      	negs	r3, r3
 800601c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006020:	e010      	b.n	8006044 <test_scope+0x7d4>
 8006022:	4a4d      	ldr	r2, [pc, #308]	; (8006158 <test_scope+0x8e8>)
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800602a:	461a      	mov	r2, r3
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	019b      	lsls	r3, r3, #6
 8006034:	2b00      	cmp	r3, #0
 8006036:	da01      	bge.n	800603c <test_scope+0x7cc>
 8006038:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800603c:	131b      	asrs	r3, r3, #12
 800603e:	425b      	negs	r3, r3
 8006040:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006044:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer1[n]:buffer5[n])*320)/4096;
 8006046:	4b3f      	ldr	r3, [pc, #252]	; (8006144 <test_scope+0x8d4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d011      	beq.n	8006076 <test_scope+0x806>
 8006052:	4a41      	ldr	r2, [pc, #260]	; (8006158 <test_scope+0x8e8>)
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800605a:	461a      	mov	r2, r3
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	019b      	lsls	r3, r3, #6
 8006064:	2b00      	cmp	r3, #0
 8006066:	da01      	bge.n	800606c <test_scope+0x7fc>
 8006068:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800606c:	131b      	asrs	r3, r3, #12
 800606e:	425b      	negs	r3, r3
 8006070:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006074:	e010      	b.n	8006098 <test_scope+0x828>
 8006076:	4a37      	ldr	r2, [pc, #220]	; (8006154 <test_scope+0x8e4>)
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607e:	461a      	mov	r2, r3
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	019b      	lsls	r3, r3, #6
 8006088:	2b00      	cmp	r3, #0
 800608a:	da01      	bge.n	8006090 <test_scope+0x820>
 800608c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006090:	131b      	asrs	r3, r3, #12
 8006092:	425b      	negs	r3, r3
 8006094:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006098:	617b      	str	r3, [r7, #20]
				extern void lcd_set_pixel( int16_t x, int16_t y, uint32_t color );
				lcd_set_pixel( x0, y0, 0x00000000 );
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	b21b      	sxth	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	b211      	sxth	r1, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fb febd 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x0001C007 );
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	b21b      	sxth	r3, r3
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	b211      	sxth	r1, r2
 80060b2:	4a2a      	ldr	r2, [pc, #168]	; (800615c <test_scope+0x8ec>)
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fb feb5 	bl	8001e24 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer6[n2]:buffer2[n2])*320)/4096;
 80060ba:	4b22      	ldr	r3, [pc, #136]	; (8006144 <test_scope+0x8d4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <test_scope+0x87a>
 80060c6:	4a26      	ldr	r2, [pc, #152]	; (8006160 <test_scope+0x8f0>)
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ce:	461a      	mov	r2, r3
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	019b      	lsls	r3, r3, #6
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da01      	bge.n	80060e0 <test_scope+0x870>
 80060dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060e0:	131b      	asrs	r3, r3, #12
 80060e2:	425b      	negs	r3, r3
 80060e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80060e8:	e010      	b.n	800610c <test_scope+0x89c>
 80060ea:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <test_scope+0x8f4>)
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f2:	461a      	mov	r2, r3
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	019b      	lsls	r3, r3, #6
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da01      	bge.n	8006104 <test_scope+0x894>
 8006100:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006104:	131b      	asrs	r3, r3, #12
 8006106:	425b      	negs	r3, r3
 8006108:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800610c:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer2[n]:buffer6[n])*320)/4096;
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <test_scope+0x8d4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d026      	beq.n	8006168 <test_scope+0x8f8>
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <test_scope+0x8f4>)
 800611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006122:	461a      	mov	r2, r3
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	019b      	lsls	r3, r3, #6
 800612c:	2b00      	cmp	r3, #0
 800612e:	da01      	bge.n	8006134 <test_scope+0x8c4>
 8006130:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006134:	131b      	asrs	r3, r3, #12
 8006136:	425b      	negs	r3, r3
 8006138:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800613c:	e025      	b.n	800618a <test_scope+0x91a>
 800613e:	bf00      	nop
 8006140:	200137a0 	.word	0x200137a0
 8006144:	20016800 	.word	0x20016800
 8006148:	200157a0 	.word	0x200157a0
 800614c:	20015fa0 	.word	0x20015fa0
 8006150:	20013fa0 	.word	0x20013fa0
 8006154:	200147a0 	.word	0x200147a0
 8006158:	200127a0 	.word	0x200127a0
 800615c:	0001c007 	.word	0x0001c007
 8006160:	20014fa0 	.word	0x20014fa0
 8006164:	20012fa0 	.word	0x20012fa0
 8006168:	4a80      	ldr	r2, [pc, #512]	; (800636c <test_scope+0xafc>)
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006170:	461a      	mov	r2, r3
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	019b      	lsls	r3, r3, #6
 800617a:	2b00      	cmp	r3, #0
 800617c:	da01      	bge.n	8006182 <test_scope+0x912>
 800617e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006182:	131b      	asrs	r3, r3, #12
 8006184:	425b      	negs	r3, r3
 8006186:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800618a:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	b21b      	sxth	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	b211      	sxth	r1, r2
 8006194:	2200      	movs	r2, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f7fb fe44 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x00003F00 );
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	b21b      	sxth	r3, r3
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	b211      	sxth	r1, r2
 80061a4:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fb fe3b 	bl	8001e24 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer7[n2]:buffer3[n2])*320)/4096;
 80061ae:	4b70      	ldr	r3, [pc, #448]	; (8006370 <test_scope+0xb00>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d011      	beq.n	80061de <test_scope+0x96e>
 80061ba:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <test_scope+0xb04>)
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c2:	461a      	mov	r2, r3
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	019b      	lsls	r3, r3, #6
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da01      	bge.n	80061d4 <test_scope+0x964>
 80061d0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80061d4:	131b      	asrs	r3, r3, #12
 80061d6:	425b      	negs	r3, r3
 80061d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80061dc:	e010      	b.n	8006200 <test_scope+0x990>
 80061de:	4a66      	ldr	r2, [pc, #408]	; (8006378 <test_scope+0xb08>)
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e6:	461a      	mov	r2, r3
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	019b      	lsls	r3, r3, #6
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da01      	bge.n	80061f8 <test_scope+0x988>
 80061f4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80061f8:	131b      	asrs	r3, r3, #12
 80061fa:	425b      	negs	r3, r3
 80061fc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006200:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer3[n]:buffer7[n])*320)/4096;
 8006202:	4b5b      	ldr	r3, [pc, #364]	; (8006370 <test_scope+0xb00>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d011      	beq.n	8006232 <test_scope+0x9c2>
 800620e:	4a5a      	ldr	r2, [pc, #360]	; (8006378 <test_scope+0xb08>)
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006216:	461a      	mov	r2, r3
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	019b      	lsls	r3, r3, #6
 8006220:	2b00      	cmp	r3, #0
 8006222:	da01      	bge.n	8006228 <test_scope+0x9b8>
 8006224:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006228:	131b      	asrs	r3, r3, #12
 800622a:	425b      	negs	r3, r3
 800622c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006230:	e010      	b.n	8006254 <test_scope+0x9e4>
 8006232:	4a50      	ldr	r2, [pc, #320]	; (8006374 <test_scope+0xb04>)
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623a:	461a      	mov	r2, r3
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	019b      	lsls	r3, r3, #6
 8006244:	2b00      	cmp	r3, #0
 8006246:	da01      	bge.n	800624c <test_scope+0x9dc>
 8006248:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800624c:	131b      	asrs	r3, r3, #12
 800624e:	425b      	negs	r3, r3
 8006250:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006254:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	b21b      	sxth	r3, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	b211      	sxth	r1, r2
 800625e:	2200      	movs	r2, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f7fb fddf 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0x000001F8 );
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	b21b      	sxth	r3, r3
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	b211      	sxth	r1, r2
 800626e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8006272:	4618      	mov	r0, r3
 8006274:	f7fb fdd6 	bl	8001e24 <lcd_set_pixel>

				y0 = 320-(((i&0x01)?buffer8[n2]:buffer4[n2])*320)/4096;
 8006278:	4b3d      	ldr	r3, [pc, #244]	; (8006370 <test_scope+0xb00>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <test_scope+0xa38>
 8006284:	4a3d      	ldr	r2, [pc, #244]	; (800637c <test_scope+0xb0c>)
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628c:	461a      	mov	r2, r3
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	019b      	lsls	r3, r3, #6
 8006296:	2b00      	cmp	r3, #0
 8006298:	da01      	bge.n	800629e <test_scope+0xa2e>
 800629a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800629e:	131b      	asrs	r3, r3, #12
 80062a0:	425b      	negs	r3, r3
 80062a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062a6:	e010      	b.n	80062ca <test_scope+0xa5a>
 80062a8:	4a35      	ldr	r2, [pc, #212]	; (8006380 <test_scope+0xb10>)
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	019b      	lsls	r3, r3, #6
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da01      	bge.n	80062c2 <test_scope+0xa52>
 80062be:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80062c2:	131b      	asrs	r3, r3, #12
 80062c4:	425b      	negs	r3, r3
 80062c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062ca:	61bb      	str	r3, [r7, #24]
				y1 = 320-(((i&0x01)?buffer4[n]:buffer8[n])*320)/4096;
 80062cc:	4b28      	ldr	r3, [pc, #160]	; (8006370 <test_scope+0xb00>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d011      	beq.n	80062fc <test_scope+0xa8c>
 80062d8:	4a29      	ldr	r2, [pc, #164]	; (8006380 <test_scope+0xb10>)
 80062da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da01      	bge.n	80062f2 <test_scope+0xa82>
 80062ee:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80062f2:	131b      	asrs	r3, r3, #12
 80062f4:	425b      	negs	r3, r3
 80062f6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80062fa:	e010      	b.n	800631e <test_scope+0xaae>
 80062fc:	4a1f      	ldr	r2, [pc, #124]	; (800637c <test_scope+0xb0c>)
 80062fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006304:	461a      	mov	r2, r3
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	019b      	lsls	r3, r3, #6
 800630e:	2b00      	cmp	r3, #0
 8006310:	da01      	bge.n	8006316 <test_scope+0xaa6>
 8006312:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8006316:	131b      	asrs	r3, r3, #12
 8006318:	425b      	negs	r3, r3
 800631a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800631e:	617b      	str	r3, [r7, #20]
				lcd_set_pixel( x0, y0, 0x00000000 );
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	b21b      	sxth	r3, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	b211      	sxth	r1, r2
 8006328:	2200      	movs	r2, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f7fb fd7a 	bl	8001e24 <lcd_set_pixel>
				lcd_set_pixel( x0, y1, 0xFFFFFFFF );
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	b21b      	sxth	r3, r3
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	b211      	sxth	r1, r2
 8006338:	f04f 32ff 	mov.w	r2, #4294967295
 800633c:	4618      	mov	r0, r3
 800633e:	f7fb fd71 	bl	8001e24 <lcd_set_pixel>
		for( int jj = 0; jj < 480; jj++ )
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	3301      	adds	r3, #1
 8006346:	63bb      	str	r3, [r7, #56]	; 0x38
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800634e:	f6ff ac33 	blt.w	8005bb8 <test_scope+0x348>

		}

		//lcd_rect( 240, 0, 1, 320, 0xFFFFFF00 );
		//printf( "], dtype=np.float32 )\n" );
		i += 1;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <test_scope+0xb00>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	4a05      	ldr	r2, [pc, #20]	; (8006370 <test_scope+0xb00>)
 800635a:	6013      	str	r3, [r2, #0]
		trigger_bck = trigger;
 800635c:	4a09      	ldr	r2, [pc, #36]	; (8006384 <test_scope+0xb14>)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	6013      	str	r3, [r2, #0]
		//HAL_Delay( 10 );
	}
}
 8006362:	bf00      	nop
 8006364:	3750      	adds	r7, #80	; 0x50
 8006366:	46bd      	mov	sp, r7
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	bf00      	nop
 800636c:	20014fa0 	.word	0x20014fa0
 8006370:	20016800 	.word	0x20016800
 8006374:	200157a0 	.word	0x200157a0
 8006378:	200137a0 	.word	0x200137a0
 800637c:	20015fa0 	.word	0x20015fa0
 8006380:	20013fa0 	.word	0x20013fa0
 8006384:	20016804 	.word	0x20016804

08006388 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <MX_SPI3_Init+0x74>)
 800638e:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <MX_SPI3_Init+0x78>)
 8006390:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006392:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <MX_SPI3_Init+0x74>)
 8006394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006398:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800639a:	4b18      	ldr	r3, [pc, #96]	; (80063fc <MX_SPI3_Init+0x74>)
 800639c:	2200      	movs	r2, #0
 800639e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80063a0:	4b16      	ldr	r3, [pc, #88]	; (80063fc <MX_SPI3_Init+0x74>)
 80063a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80063a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <MX_SPI3_Init+0x74>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <MX_SPI3_Init+0x74>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <MX_SPI3_Init+0x74>)
 80063b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <MX_SPI3_Init+0x74>)
 80063be:	2230      	movs	r2, #48	; 0x30
 80063c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063c2:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <MX_SPI3_Init+0x74>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <MX_SPI3_Init+0x74>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <MX_SPI3_Init+0x74>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <MX_SPI3_Init+0x74>)
 80063d6:	2207      	movs	r2, #7
 80063d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <MX_SPI3_Init+0x74>)
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <MX_SPI3_Init+0x74>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80063e6:	4805      	ldr	r0, [pc, #20]	; (80063fc <MX_SPI3_Init+0x74>)
 80063e8:	f005 fc9e 	bl	800bd28 <HAL_SPI_Init>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80063f2:	f7fe fcc6 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80063f6:	bf00      	nop
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20016808 	.word	0x20016808
 8006400:	40003c00 	.word	0x40003c00

08006404 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a17      	ldr	r2, [pc, #92]	; (8006480 <HAL_SPI_MspInit+0x7c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d128      	bne.n	8006478 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006426:	4b17      	ldr	r3, [pc, #92]	; (8006484 <HAL_SPI_MspInit+0x80>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	4a16      	ldr	r2, [pc, #88]	; (8006484 <HAL_SPI_MspInit+0x80>)
 800642c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006430:	6593      	str	r3, [r2, #88]	; 0x58
 8006432:	4b14      	ldr	r3, [pc, #80]	; (8006484 <HAL_SPI_MspInit+0x80>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800643e:	4b11      	ldr	r3, [pc, #68]	; (8006484 <HAL_SPI_MspInit+0x80>)
 8006440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006442:	4a10      	ldr	r2, [pc, #64]	; (8006484 <HAL_SPI_MspInit+0x80>)
 8006444:	f043 0304 	orr.w	r3, r3, #4
 8006448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <HAL_SPI_MspInit+0x80>)
 800644c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006456:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800645a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645c:	2302      	movs	r3, #2
 800645e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006464:	2300      	movs	r3, #0
 8006466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006468:	2306      	movs	r3, #6
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4619      	mov	r1, r3
 8006472:	4805      	ldr	r0, [pc, #20]	; (8006488 <HAL_SPI_MspInit+0x84>)
 8006474:	f003 fed8 	bl	800a228 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006478:	bf00      	nop
 800647a:	3728      	adds	r7, #40	; 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40003c00 	.word	0x40003c00
 8006484:	40021000 	.word	0x40021000
 8006488:	48000800 	.word	0x48000800

0800648c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <HAL_MspInit+0x48>)
 8006494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006496:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <HAL_MspInit+0x48>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6613      	str	r3, [r2, #96]	; 0x60
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <HAL_MspInit+0x48>)
 80064a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	607b      	str	r3, [r7, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <HAL_MspInit+0x48>)
 80064ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <HAL_MspInit+0x48>)
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6593      	str	r3, [r2, #88]	; 0x58
 80064b6:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <HAL_MspInit+0x48>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80064c2:	f000 fb97 	bl	8006bf4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80064c6:	2002      	movs	r0, #2
 80064c8:	f000 fb80 	bl	8006bcc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40021000 	.word	0x40021000

080064d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064dc:	e7fe      	b.n	80064dc <NMI_Handler+0x4>

080064de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064de:	b480      	push	{r7}
 80064e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064e2:	e7fe      	b.n	80064e2 <HardFault_Handler+0x4>

080064e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064e8:	e7fe      	b.n	80064e8 <MemManage_Handler+0x4>

080064ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064ea:	b480      	push	{r7}
 80064ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064ee:	e7fe      	b.n	80064ee <BusFault_Handler+0x4>

080064f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064f4:	e7fe      	b.n	80064f4 <UsageFault_Handler+0x4>

080064f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064f6:	b480      	push	{r7}
 80064f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006512:	b480      	push	{r7}
 8006514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006524:	f000 fb12 	bl	8006b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006528:	bf00      	nop
 800652a:	bd80      	pop	{r7, pc}

0800652c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006530:	4802      	ldr	r0, [pc, #8]	; (800653c <DMA1_Channel1_IRQHandler+0x10>)
 8006532:	f003 fd2a 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000534 	.word	0x20000534

08006540 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8006544:	4802      	ldr	r0, [pc, #8]	; (8006550 <DMA1_Channel2_IRQHandler+0x10>)
 8006546:	f003 fd20 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800654a:	bf00      	nop
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000594 	.word	0x20000594

08006554 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8006558:	4802      	ldr	r0, [pc, #8]	; (8006564 <DMA1_Channel3_IRQHandler+0x10>)
 800655a:	f003 fd16 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800655e:	bf00      	nop
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	200005f4 	.word	0x200005f4

08006568 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800656c:	4802      	ldr	r0, [pc, #8]	; (8006578 <DMA1_Channel4_IRQHandler+0x10>)
 800656e:	f003 fd0c 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000654 	.word	0x20000654

0800657c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	extern int cndtr1;
	cndtr1 = hdma_adc1.Instance->CNDTR;
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <ADC1_2_IRQHandler+0x1c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	461a      	mov	r2, r3
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <ADC1_2_IRQHandler+0x20>)
 800658a:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800658c:	4804      	ldr	r0, [pc, #16]	; (80065a0 <ADC1_2_IRQHandler+0x24>)
 800658e:	f001 f9a3 	bl	80078d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000534 	.word	0x20000534
 800659c:	2001178c 	.word	0x2001178c
 80065a0:	20000384 	.word	0x20000384

080065a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern int cndtr2;
	cndtr2 = hdma_adc1.Instance->CNDTR;
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <TIM2_IRQHandler+0x1c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	461a      	mov	r2, r3
 80065b0:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <TIM2_IRQHandler+0x20>)
 80065b2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80065b4:	4804      	ldr	r0, [pc, #16]	; (80065c8 <TIM2_IRQHandler+0x24>)
 80065b6:	f006 fa97 	bl	800cae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80065ba:	bf00      	nop
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000534 	.word	0x20000534
 80065c4:	20011790 	.word	0x20011790
 80065c8:	200168bc 	.word	0x200168bc

080065cc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80065d0:	4802      	ldr	r0, [pc, #8]	; (80065dc <DMA2_Channel1_IRQHandler+0x10>)
 80065d2:	f003 fcda 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200006e0 	.word	0x200006e0

080065e0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80065e4:	4802      	ldr	r0, [pc, #8]	; (80065f0 <DMA2_Channel2_IRQHandler+0x10>)
 80065e6:	f003 fcd0 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000740 	.word	0x20000740

080065f4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 80065f8:	4802      	ldr	r0, [pc, #8]	; (8006604 <DMA2_Channel3_IRQHandler+0x10>)
 80065fa:	f003 fcc6 	bl	8009f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20011728 	.word	0x20011728

08006608 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi1);
 800660c:	4802      	ldr	r0, [pc, #8]	; (8006618 <QUADSPI_IRQHandler+0x10>)
 800660e:	f004 f9c7 	bl	800a9a0 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200116dc 	.word	0x200116dc

0800661c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  return 1;
 8006620:	2301      	movs	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <_kill>:

int _kill(int pid, int sig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006636:	f01f f857 	bl	80256e8 <__errno>
 800663a:	4603      	mov	r3, r0
 800663c:	2216      	movs	r2, #22
 800663e:	601a      	str	r2, [r3, #0]
  return -1;
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <_exit>:

void _exit (int status)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006654:	f04f 31ff 	mov.w	r1, #4294967295
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ffe7 	bl	800662c <_kill>
  while (1) {}    /* Make sure we hang here */
 800665e:	e7fe      	b.n	800665e <_exit+0x12>

08006660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e00a      	b.n	8006688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006672:	f3af 8000 	nop.w
 8006676:	4601      	mov	r1, r0
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	60ba      	str	r2, [r7, #8]
 800667e:	b2ca      	uxtb	r2, r1
 8006680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3301      	adds	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	dbf0      	blt.n	8006672 <_read+0x12>
  }

  return len;
 8006690:	687b      	ldr	r3, [r7, #4]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <_close>:
  }
  return len;
}

int _close(int file)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066c2:	605a      	str	r2, [r3, #4]
  return 0;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <_isatty>:

int _isatty(int file)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80066da:	2301      	movs	r3, #1
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800670c:	4a14      	ldr	r2, [pc, #80]	; (8006760 <_sbrk+0x5c>)
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <_sbrk+0x60>)
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006718:	4b13      	ldr	r3, [pc, #76]	; (8006768 <_sbrk+0x64>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <_sbrk+0x64>)
 8006722:	4a12      	ldr	r2, [pc, #72]	; (800676c <_sbrk+0x68>)
 8006724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006726:	4b10      	ldr	r3, [pc, #64]	; (8006768 <_sbrk+0x64>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d207      	bcs.n	8006744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006734:	f01e ffd8 	bl	80256e8 <__errno>
 8006738:	4603      	mov	r3, r0
 800673a:	220c      	movs	r2, #12
 800673c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800673e:	f04f 33ff 	mov.w	r3, #4294967295
 8006742:	e009      	b.n	8006758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006744:	4b08      	ldr	r3, [pc, #32]	; (8006768 <_sbrk+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <_sbrk+0x64>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	4a05      	ldr	r2, [pc, #20]	; (8006768 <_sbrk+0x64>)
 8006754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006756:	68fb      	ldr	r3, [r7, #12]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20020000 	.word	0x20020000
 8006764:	00000400 	.word	0x00000400
 8006768:	2001686c 	.word	0x2001686c
 800676c:	20016aa8 	.word	0x20016aa8

08006770 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <SystemInit+0x20>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	4a05      	ldr	r2, [pc, #20]	; (8006790 <SystemInit+0x20>)
 800677c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000ed00 	.word	0xe000ed00

08006794 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800679a:	f107 0310 	add.w	r3, r7, #16
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067a8:	1d3b      	adds	r3, r7, #4
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	605a      	str	r2, [r3, #4]
 80067b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80067b2:	4b1f      	ldr	r3, [pc, #124]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067b4:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <MX_TIM1_Init+0xa0>)
 80067b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 85-1;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067ba:	2254      	movs	r2, #84	; 0x54
 80067bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ca:	4b19      	ldr	r3, [pc, #100]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067d6:	4b16      	ldr	r3, [pc, #88]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80067dc:	4814      	ldr	r0, [pc, #80]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067de:	f005 ff0d 	bl	800c5fc <HAL_TIM_Base_Init>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80067e8:	f7fe facb 	bl	8004d82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80067f2:	f107 0310 	add.w	r3, r7, #16
 80067f6:	4619      	mov	r1, r3
 80067f8:	480d      	ldr	r0, [pc, #52]	; (8006830 <MX_TIM1_Init+0x9c>)
 80067fa:	f006 fb6f 	bl	800cedc <HAL_TIM_ConfigClockSource>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8006804:	f7fe fabd 	bl	8004d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006808:	2320      	movs	r3, #32
 800680a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800680c:	2300      	movs	r3, #0
 800680e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006814:	1d3b      	adds	r3, r7, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4805      	ldr	r0, [pc, #20]	; (8006830 <MX_TIM1_Init+0x9c>)
 800681a:	f007 f927 	bl	800da6c <HAL_TIMEx_MasterConfigSynchronization>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8006824:	f7fe faad 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20016870 	.word	0x20016870
 8006834:	40012c00 	.word	0x40012c00

08006838 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08e      	sub	sp, #56	; 0x38
 800683c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800683e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	609a      	str	r2, [r3, #8]
 800684a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800684c:	f107 031c 	add.w	r3, r7, #28
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006858:	463b      	mov	r3, r7
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	609a      	str	r2, [r3, #8]
 8006862:	60da      	str	r2, [r3, #12]
 8006864:	611a      	str	r2, [r3, #16]
 8006866:	615a      	str	r2, [r3, #20]
 8006868:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800686a:	4b2c      	ldr	r3, [pc, #176]	; (800691c <MX_TIM2_Init+0xe4>)
 800686c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006870:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 85-1;
 8006872:	4b2a      	ldr	r3, [pc, #168]	; (800691c <MX_TIM2_Init+0xe4>)
 8006874:	2254      	movs	r2, #84	; 0x54
 8006876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <MX_TIM2_Init+0xe4>)
 800687a:	2200      	movs	r2, #0
 800687c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <MX_TIM2_Init+0xe4>)
 8006880:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <MX_TIM2_Init+0xe4>)
 8006888:	2200      	movs	r2, #0
 800688a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800688c:	4b23      	ldr	r3, [pc, #140]	; (800691c <MX_TIM2_Init+0xe4>)
 800688e:	2200      	movs	r2, #0
 8006890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006892:	4822      	ldr	r0, [pc, #136]	; (800691c <MX_TIM2_Init+0xe4>)
 8006894:	f005 feb2 	bl	800c5fc <HAL_TIM_Base_Init>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800689e:	f7fe fa70 	bl	8004d82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80068a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068ac:	4619      	mov	r1, r3
 80068ae:	481b      	ldr	r0, [pc, #108]	; (800691c <MX_TIM2_Init+0xe4>)
 80068b0:	f006 fb14 	bl	800cedc <HAL_TIM_ConfigClockSource>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80068ba:	f7fe fa62 	bl	8004d82 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80068be:	4817      	ldr	r0, [pc, #92]	; (800691c <MX_TIM2_Init+0xe4>)
 80068c0:	f005 ff8b 	bl	800c7da <HAL_TIM_OC_Init>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80068ca:	f7fe fa5a 	bl	8004d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068d6:	f107 031c 	add.w	r3, r7, #28
 80068da:	4619      	mov	r1, r3
 80068dc:	480f      	ldr	r0, [pc, #60]	; (800691c <MX_TIM2_Init+0xe4>)
 80068de:	f007 f8c5 	bl	800da6c <HAL_TIMEx_MasterConfigSynchronization>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80068e8:	f7fe fa4b 	bl	8004d82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80068ec:	2300      	movs	r3, #0
 80068ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1023;
 80068f0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80068f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068fe:	463b      	mov	r3, r7
 8006900:	2200      	movs	r2, #0
 8006902:	4619      	mov	r1, r3
 8006904:	4805      	ldr	r0, [pc, #20]	; (800691c <MX_TIM2_Init+0xe4>)
 8006906:	f006 fa6f 	bl	800cde8 <HAL_TIM_OC_ConfigChannel>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8006910:	f7fe fa37 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006914:	bf00      	nop
 8006916:	3738      	adds	r7, #56	; 0x38
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	200168bc 	.word	0x200168bc

08006920 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006926:	f107 0310 	add.w	r3, r7, #16
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	609a      	str	r2, [r3, #8]
 8006932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	605a      	str	r2, [r3, #4]
 800693c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800693e:	4b1d      	ldr	r3, [pc, #116]	; (80069b4 <MX_TIM3_Init+0x94>)
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <MX_TIM3_Init+0x98>)
 8006942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85-1;
 8006944:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <MX_TIM3_Init+0x94>)
 8006946:	2254      	movs	r2, #84	; 0x54
 8006948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800694a:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <MX_TIM3_Init+0x94>)
 800694c:	2200      	movs	r2, #0
 800694e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8006950:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <MX_TIM3_Init+0x94>)
 8006952:	2201      	movs	r2, #1
 8006954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006956:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <MX_TIM3_Init+0x94>)
 8006958:	2200      	movs	r2, #0
 800695a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800695c:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <MX_TIM3_Init+0x94>)
 800695e:	2200      	movs	r2, #0
 8006960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006962:	4814      	ldr	r0, [pc, #80]	; (80069b4 <MX_TIM3_Init+0x94>)
 8006964:	f005 fe4a 	bl	800c5fc <HAL_TIM_Base_Init>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800696e:	f7fe fa08 	bl	8004d82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006978:	f107 0310 	add.w	r3, r7, #16
 800697c:	4619      	mov	r1, r3
 800697e:	480d      	ldr	r0, [pc, #52]	; (80069b4 <MX_TIM3_Init+0x94>)
 8006980:	f006 faac 	bl	800cedc <HAL_TIM_ConfigClockSource>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800698a:	f7fe f9fa 	bl	8004d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800698e:	2320      	movs	r3, #32
 8006990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	4619      	mov	r1, r3
 800699a:	4806      	ldr	r0, [pc, #24]	; (80069b4 <MX_TIM3_Init+0x94>)
 800699c:	f007 f866 	bl	800da6c <HAL_TIMEx_MasterConfigSynchronization>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80069a6:	f7fe f9ec 	bl	8004d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80069aa:	bf00      	nop
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20016908 	.word	0x20016908
 80069b8:	40000400 	.word	0x40000400

080069bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <HAL_TIM_Base_MspInit+0x8c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d10c      	bne.n	80069e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80069ce:	4b1f      	ldr	r3, [pc, #124]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 80069d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 80069d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069d8:	6613      	str	r3, [r2, #96]	; 0x60
 80069da:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 80069dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80069e6:	e02a      	b.n	8006a3e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f0:	d114      	bne.n	8006a1c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069f2:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 80069f8:	f043 0301 	orr.w	r3, r3, #1
 80069fc:	6593      	str	r3, [r2, #88]	; 0x58
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	201c      	movs	r0, #28
 8006a10:	f002 fce9 	bl	80093e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a14:	201c      	movs	r0, #28
 8006a16:	f002 fd00 	bl	800941a <HAL_NVIC_EnableIRQ>
}
 8006a1a:	e010      	b.n	8006a3e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0b      	ldr	r2, [pc, #44]	; (8006a50 <HAL_TIM_Base_MspInit+0x94>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d10b      	bne.n	8006a3e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 8006a2c:	f043 0302 	orr.w	r3, r3, #2
 8006a30:	6593      	str	r3, [r2, #88]	; 0x58
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_TIM_Base_MspInit+0x90>)
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	40000400 	.word	0x40000400

08006a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a54:	480d      	ldr	r0, [pc, #52]	; (8006a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006a56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a58:	480d      	ldr	r0, [pc, #52]	; (8006a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a5a:	490e      	ldr	r1, [pc, #56]	; (8006a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a5c:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <LoopForever+0xe>)
  movs r3, #0
 8006a5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006a60:	e002      	b.n	8006a68 <LoopCopyDataInit>

08006a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a66:	3304      	adds	r3, #4

08006a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a6c:	d3f9      	bcc.n	8006a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a6e:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a70:	4c0b      	ldr	r4, [pc, #44]	; (8006aa0 <LoopForever+0x16>)
  movs r3, #0
 8006a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a74:	e001      	b.n	8006a7a <LoopFillZerobss>

08006a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a78:	3204      	adds	r2, #4

08006a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a7c:	d3fb      	bcc.n	8006a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a7e:	f7ff fe77 	bl	8006770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a82:	f01e fe37 	bl	80256f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a86:	f7fd ff85 	bl	8004994 <main>

08006a8a <LoopForever>:

LoopForever:
    b LoopForever
 8006a8a:	e7fe      	b.n	8006a8a <LoopForever>
  ldr   r0, =_estack
 8006a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a94:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8006a98:	0802b480 	.word	0x0802b480
  ldr r2, =_sbss
 8006a9c:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8006aa0:	20016aa4 	.word	0x20016aa4

08006aa4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006aa4:	e7fe      	b.n	8006aa4 <ADC3_IRQHandler>

08006aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ab0:	2003      	movs	r0, #3
 8006ab2:	f002 fc8d 	bl	80093d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f000 f80e 	bl	8006ad8 <HAL_InitTick>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	71fb      	strb	r3, [r7, #7]
 8006ac6:	e001      	b.n	8006acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006ac8:	f7ff fce0 	bl	800648c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006acc:	79fb      	ldrb	r3, [r7, #7]

}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006ae4:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <HAL_InitTick+0x68>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d022      	beq.n	8006b32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006aec:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <HAL_InitTick+0x6c>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <HAL_InitTick+0x68>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	4618      	mov	r0, r3
 8006b02:	f002 fc98 	bl	8009436 <HAL_SYSTICK_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10f      	bne.n	8006b2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b0f      	cmp	r3, #15
 8006b10:	d809      	bhi.n	8006b26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b12:	2200      	movs	r2, #0
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	f002 fc64 	bl	80093e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b1e:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <HAL_InitTick+0x70>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	e007      	b.n	8006b36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
 8006b2a:	e004      	b.n	8006b36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
 8006b30:	e001      	b.n	8006b36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20000020 	.word	0x20000020
 8006b44:	20000018 	.word	0x20000018
 8006b48:	2000001c 	.word	0x2000001c

08006b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_IncTick+0x1c>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_IncTick+0x20>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4413      	add	r3, r2
 8006b5a:	4a03      	ldr	r2, [pc, #12]	; (8006b68 <HAL_IncTick+0x1c>)
 8006b5c:	6013      	str	r3, [r2, #0]
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	20016954 	.word	0x20016954
 8006b6c:	20000020 	.word	0x20000020

08006b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return uwTick;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_GetTick+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20016954 	.word	0x20016954

08006b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b90:	f7ff ffee 	bl	8006b70 <HAL_GetTick>
 8006b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d004      	beq.n	8006bac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <HAL_Delay+0x40>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006bac:	bf00      	nop
 8006bae:	f7ff ffdf 	bl	8006b70 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d8f7      	bhi.n	8006bae <HAL_Delay+0x26>
  {
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000020 	.word	0x20000020

08006bcc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f023 0202 	bic.w	r2, r3, #2
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	600b      	str	r3, [r1, #0]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40010030 	.word	0x40010030

08006bf4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a04      	ldr	r2, [pc, #16]	; (8006c10 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8006bfe:	f023 0301 	bic.w	r3, r3, #1
 8006c02:	6013      	str	r3, [r2, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010030 	.word	0x40010030

08006c14 <LL_ADC_SetCommonClock>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	609a      	str	r2, [r3, #8]
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <LL_ADC_SetCommonPathInternalCh>:
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <LL_ADC_GetCommonPathInternalCh>:
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <LL_ADC_SetOffset>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3360      	adds	r3, #96	; 0x60
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <LL_ADC_SetOffset+0x44>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	03fff000 	.word	0x03fff000

08006cc4 <LL_ADC_GetOffsetChannel>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3360      	adds	r3, #96	; 0x60
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <LL_ADC_SetOffsetState>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3360      	adds	r3, #96	; 0x60
 8006d00:	461a      	mov	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	601a      	str	r2, [r3, #0]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <LL_ADC_SetOffsetSign>:
{
 8006d26:	b480      	push	{r7}
 8006d28:	b087      	sub	sp, #28
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3360      	adds	r3, #96	; 0x60
 8006d36:	461a      	mov	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <LL_ADC_SetOffsetSaturation>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3360      	adds	r3, #96	; 0x60
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	431a      	orrs	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	615a      	str	r2, [r3, #20]
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <LL_ADC_REG_SetSequencerRanks>:
{
 8006dde:	b480      	push	{r7}
 8006de0:	b087      	sub	sp, #28
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3330      	adds	r3, #48	; 0x30
 8006dee:	461a      	mov	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	4413      	add	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	211f      	movs	r1, #31
 8006e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	401a      	ands	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0e9b      	lsrs	r3, r3, #26
 8006e16:	f003 011f 	and.w	r1, r3, #31
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	431a      	orrs	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	601a      	str	r2, [r3, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <LL_ADC_SetChannelSamplingTime>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	0e5b      	lsrs	r3, r3, #25
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	4413      	add	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	0d1b      	lsrs	r3, r3, #20
 8006e84:	f003 031f 	and.w	r3, r3, #31
 8006e88:	2107      	movs	r1, #7
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	401a      	ands	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	0d1b      	lsrs	r3, r3, #20
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <LL_ADC_SetChannelSingleDiff>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d10a      	bne.n	8006ede <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006edc:	e00a      	b.n	8006ef4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eea:	43db      	mvns	r3, r3
 8006eec:	401a      	ands	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	407f0000 	.word	0x407f0000

08006f04 <LL_ADC_SetAnalogWDMonitChannels>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	330c      	adds	r3, #12
 8006f14:	4618      	mov	r0, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	f003 0103 	and.w	r1, r3, #3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f003 0201 	and.w	r2, r3, #1
 8006f24:	4613      	mov	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4403      	add	r3, r0
 8006f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006f3e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006f42:	43db      	mvns	r3, r3
 8006f44:	401a      	ands	r2, r3
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	400b      	ands	r3, r1
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	601a      	str	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_ADC_ConfigAnalogWDThresholds>:
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3320      	adds	r3, #32
 8006f70:	461a      	mov	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	0d1b      	lsrs	r3, r3, #20
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	f003 030c 	and.w	r3, r3, #12
 8006f7c:	4413      	add	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	0419      	lsls	r1, r3, #16
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	431a      	orrs	r2, r3
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	601a      	str	r2, [r3, #0]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <LL_ADC_GetMultimode>:
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 031f 	and.w	r3, r3, #31
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <LL_ADC_GetMultiDMATransfer>:
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <LL_ADC_DisableDeepPowerDown>:
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006fea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6093      	str	r3, [r2, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <LL_ADC_IsDeepPowerDownEnabled>:
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800700e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007012:	d101      	bne.n	8007018 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <LL_ADC_EnableInternalRegulator>:
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007036:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800703a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	609a      	str	r2, [r3, #8]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <LL_ADC_IsInternalRegulatorEnabled>:
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007062:	d101      	bne.n	8007068 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <LL_ADC_Enable>:
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007086:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800708a:	f043 0201 	orr.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	609a      	str	r2, [r3, #8]
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <LL_ADC_Disable>:
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070b2:	f043 0202 	orr.w	r2, r3, #2
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	609a      	str	r2, [r3, #8]
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <LL_ADC_IsEnabled>:
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <LL_ADC_IsEnabled+0x18>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <LL_ADC_IsEnabled+0x1a>
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <LL_ADC_IsDisableOngoing>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d101      	bne.n	8007104 <LL_ADC_IsDisableOngoing+0x18>
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <LL_ADC_IsDisableOngoing+0x1a>
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <LL_ADC_REG_StartConversion>:
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007122:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007126:	f043 0204 	orr.w	r2, r3, #4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	609a      	str	r2, [r3, #8]
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <LL_ADC_REG_StopConversion>:
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800714a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800714e:	f043 0210 	orr.w	r2, r3, #16
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	609a      	str	r2, [r3, #8]
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <LL_ADC_REG_IsConversionOngoing>:
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d101      	bne.n	800717a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <LL_ADC_INJ_StopConversion>:
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	609a      	str	r2, [r3, #8]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <LL_ADC_INJ_IsConversionOngoing>:
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d101      	bne.n	80071c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <LL_ADC_ClearFlag_AWD1>:
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2280      	movs	r2, #128	; 0x80
 80071e2:	601a      	str	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <LL_ADC_ClearFlag_AWD2>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071fe:	601a      	str	r2, [r3, #0]
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <LL_ADC_ClearFlag_AWD3>:
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800721a:	601a      	str	r2, [r3, #0]
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <LL_ADC_EnableIT_AWD1>:
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	605a      	str	r2, [r3, #4]
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <LL_ADC_EnableIT_AWD2>:
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	605a      	str	r2, [r3, #4]
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <LL_ADC_EnableIT_AWD3>:
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	605a      	str	r2, [r3, #4]
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <LL_ADC_DisableIT_AWD1>:
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	605a      	str	r2, [r3, #4]
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <LL_ADC_DisableIT_AWD2>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	605a      	str	r2, [r3, #4]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	605a      	str	r2, [r3, #4]
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b089      	sub	sp, #36	; 0x24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e1af      	b.n	8007662 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7f9 fee5 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff fe68 	bl	8006ffe <LL_ADC_IsDeepPowerDownEnabled>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fe4e 	bl	8006fda <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fe83 	bl	800704e <LL_ADC_IsInternalRegulatorEnabled>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d115      	bne.n	800737a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fe67 	bl	8007026 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007358:	4b9f      	ldr	r3, [pc, #636]	; (80075d8 <HAL_ADC_Init+0x2f0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	099b      	lsrs	r3, r3, #6
 800735e:	4a9f      	ldr	r2, [pc, #636]	; (80075dc <HAL_ADC_Init+0x2f4>)
 8007360:	fba2 2303 	umull	r2, r3, r2, r3
 8007364:	099b      	lsrs	r3, r3, #6
 8007366:	3301      	adds	r3, #1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800736c:	e002      	b.n	8007374 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	3b01      	subs	r3, #1
 8007372:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f9      	bne.n	800736e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fe65 	bl	800704e <LL_ADC_IsInternalRegulatorEnabled>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10d      	bne.n	80073a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738e:	f043 0210 	orr.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739a:	f043 0201 	orr.w	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff fed9 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 80073b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 8148 	bne.w	8007650 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 8144 	bne.w	8007650 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80073d0:	f043 0202 	orr.w	r2, r3, #2
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fe72 	bl	80070c6 <LL_ADC_IsEnabled>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d141      	bne.n	800746c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073f0:	d004      	beq.n	80073fc <HAL_ADC_Init+0x114>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a7a      	ldr	r2, [pc, #488]	; (80075e0 <HAL_ADC_Init+0x2f8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d10f      	bne.n	800741c <HAL_ADC_Init+0x134>
 80073fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007400:	f7ff fe61 	bl	80070c6 <LL_ADC_IsEnabled>
 8007404:	4604      	mov	r4, r0
 8007406:	4876      	ldr	r0, [pc, #472]	; (80075e0 <HAL_ADC_Init+0x2f8>)
 8007408:	f7ff fe5d 	bl	80070c6 <LL_ADC_IsEnabled>
 800740c:	4603      	mov	r3, r0
 800740e:	4323      	orrs	r3, r4
 8007410:	2b00      	cmp	r3, #0
 8007412:	bf0c      	ite	eq
 8007414:	2301      	moveq	r3, #1
 8007416:	2300      	movne	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e012      	b.n	8007442 <HAL_ADC_Init+0x15a>
 800741c:	4871      	ldr	r0, [pc, #452]	; (80075e4 <HAL_ADC_Init+0x2fc>)
 800741e:	f7ff fe52 	bl	80070c6 <LL_ADC_IsEnabled>
 8007422:	4604      	mov	r4, r0
 8007424:	4870      	ldr	r0, [pc, #448]	; (80075e8 <HAL_ADC_Init+0x300>)
 8007426:	f7ff fe4e 	bl	80070c6 <LL_ADC_IsEnabled>
 800742a:	4603      	mov	r3, r0
 800742c:	431c      	orrs	r4, r3
 800742e:	486f      	ldr	r0, [pc, #444]	; (80075ec <HAL_ADC_Init+0x304>)
 8007430:	f7ff fe49 	bl	80070c6 <LL_ADC_IsEnabled>
 8007434:	4603      	mov	r3, r0
 8007436:	4323      	orrs	r3, r4
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d012      	beq.n	800746c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800744e:	d004      	beq.n	800745a <HAL_ADC_Init+0x172>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a62      	ldr	r2, [pc, #392]	; (80075e0 <HAL_ADC_Init+0x2f8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d101      	bne.n	800745e <HAL_ADC_Init+0x176>
 800745a:	4a65      	ldr	r2, [pc, #404]	; (80075f0 <HAL_ADC_Init+0x308>)
 800745c:	e000      	b.n	8007460 <HAL_ADC_Init+0x178>
 800745e:	4a65      	ldr	r2, [pc, #404]	; (80075f4 <HAL_ADC_Init+0x30c>)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7ff fbd4 	bl	8006c14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	7f5b      	ldrb	r3, [r3, #29]
 8007470:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007476:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800747c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007482:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800748a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800748c:	4313      	orrs	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007496:	2b01      	cmp	r3, #1
 8007498:	d106      	bne.n	80074a8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	3b01      	subs	r3, #1
 80074a0:	045b      	lsls	r3, r3, #17
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	4b4b      	ldr	r3, [pc, #300]	; (80075f8 <HAL_ADC_Init+0x310>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	69b9      	ldr	r1, [r7, #24]
 80074d4:	430b      	orrs	r3, r1
 80074d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fe35 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 80074f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fe56 	bl	80071b0 <LL_ADC_INJ_IsConversionOngoing>
 8007504:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d17f      	bne.n	800760c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d17c      	bne.n	800760c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007516:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800751e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007520:	4313      	orrs	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752e:	f023 0302 	bic.w	r3, r3, #2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	69b9      	ldr	r1, [r7, #24]
 8007538:	430b      	orrs	r3, r1
 800753a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d017      	beq.n	8007574 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691a      	ldr	r2, [r3, #16]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007552:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800755c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6911      	ldr	r1, [r2, #16]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	430b      	orrs	r3, r1
 800756e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007572:	e013      	b.n	800759c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007582:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d12a      	bne.n	80075fc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075bc:	4311      	orrs	r1, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80075c2:	4311      	orrs	r1, r2
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075c8:	430a      	orrs	r2, r1
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0201 	orr.w	r2, r2, #1
 80075d4:	611a      	str	r2, [r3, #16]
 80075d6:	e019      	b.n	800760c <HAL_ADC_Init+0x324>
 80075d8:	20000018 	.word	0x20000018
 80075dc:	053e2d63 	.word	0x053e2d63
 80075e0:	50000100 	.word	0x50000100
 80075e4:	50000400 	.word	0x50000400
 80075e8:	50000500 	.word	0x50000500
 80075ec:	50000600 	.word	0x50000600
 80075f0:	50000300 	.word	0x50000300
 80075f4:	50000700 	.word	0x50000700
 80075f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0201 	bic.w	r2, r2, #1
 800760a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d10c      	bne.n	800762e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	f023 010f 	bic.w	r1, r3, #15
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	1e5a      	subs	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
 800762c:	e007      	b.n	800763e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 020f 	bic.w	r2, r2, #15
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	f043 0201 	orr.w	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	65da      	str	r2, [r3, #92]	; 0x5c
 800764e:	e007      	b.n	8007660 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007654:	f043 0210 	orr.w	r2, r3, #16
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007660:	7ffb      	ldrb	r3, [r7, #31]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3724      	adds	r7, #36	; 0x24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd90      	pop	{r4, r7, pc}
 800766a:	bf00      	nop

0800766c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007680:	d004      	beq.n	800768c <HAL_ADC_Start_DMA+0x20>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a5a      	ldr	r2, [pc, #360]	; (80077f0 <HAL_ADC_Start_DMA+0x184>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d101      	bne.n	8007690 <HAL_ADC_Start_DMA+0x24>
 800768c:	4b59      	ldr	r3, [pc, #356]	; (80077f4 <HAL_ADC_Start_DMA+0x188>)
 800768e:	e000      	b.n	8007692 <HAL_ADC_Start_DMA+0x26>
 8007690:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <HAL_ADC_Start_DMA+0x18c>)
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fc85 	bl	8006fa2 <LL_ADC_GetMultimode>
 8007698:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fd5f 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 809b 	bne.w	80077e2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_ADC_Start_DMA+0x4e>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e096      	b.n	80077e8 <HAL_ADC_Start_DMA+0x17c>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a4d      	ldr	r2, [pc, #308]	; (80077fc <HAL_ADC_Start_DMA+0x190>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d008      	beq.n	80076de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b05      	cmp	r3, #5
 80076d6:	d002      	beq.n	80076de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d17a      	bne.n	80077d4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f001 fa6c 	bl	8008bbc <ADC_Enable>
 80076e4:	4603      	mov	r3, r0
 80076e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d16d      	bne.n	80077ca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a3a      	ldr	r2, [pc, #232]	; (80077f0 <HAL_ADC_Start_DMA+0x184>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d009      	beq.n	8007720 <HAL_ADC_Start_DMA+0xb4>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a3b      	ldr	r2, [pc, #236]	; (8007800 <HAL_ADC_Start_DMA+0x194>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d002      	beq.n	800771c <HAL_ADC_Start_DMA+0xb0>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	e003      	b.n	8007724 <HAL_ADC_Start_DMA+0xb8>
 800771c:	4b39      	ldr	r3, [pc, #228]	; (8007804 <HAL_ADC_Start_DMA+0x198>)
 800771e:	e001      	b.n	8007724 <HAL_ADC_Start_DMA+0xb8>
 8007720:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	4293      	cmp	r3, r2
 800772a:	d002      	beq.n	8007732 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d105      	bne.n	800773e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d006      	beq.n	8007758 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	f023 0206 	bic.w	r2, r3, #6
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	661a      	str	r2, [r3, #96]	; 0x60
 8007756:	e002      	b.n	800775e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007762:	4a29      	ldr	r2, [pc, #164]	; (8007808 <HAL_ADC_Start_DMA+0x19c>)
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	4a28      	ldr	r2, [pc, #160]	; (800780c <HAL_ADC_Start_DMA+0x1a0>)
 800776c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	4a27      	ldr	r2, [pc, #156]	; (8007810 <HAL_ADC_Start_DMA+0x1a4>)
 8007774:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	221c      	movs	r2, #28
 800777c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0210 	orr.w	r2, r2, #16
 8007794:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3340      	adds	r3, #64	; 0x40
 80077b0:	4619      	mov	r1, r3
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f002 faad 	bl	8009d14 <HAL_DMA_Start_IT>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fca5 	bl	8007112 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80077c8:	e00d      	b.n	80077e6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80077d2:	e008      	b.n	80077e6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80077e0:	e001      	b.n	80077e6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
 80077e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	50000100 	.word	0x50000100
 80077f4:	50000300 	.word	0x50000300
 80077f8:	50000700 	.word	0x50000700
 80077fc:	50000600 	.word	0x50000600
 8007800:	50000500 	.word	0x50000500
 8007804:	50000400 	.word	0x50000400
 8007808:	08008d3f 	.word	0x08008d3f
 800780c:	08008e17 	.word	0x08008e17
 8007810:	08008e33 	.word	0x08008e33

08007814 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_ADC_Stop_DMA+0x16>
 8007826:	2302      	movs	r3, #2
 8007828:	e051      	b.n	80078ce <HAL_ADC_Stop_DMA+0xba>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007832:	2103      	movs	r1, #3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f905 	bl	8008a44 <ADC_ConversionStop>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d13f      	bne.n	80078c4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d10f      	bne.n	8007882 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	4618      	mov	r0, r3
 8007868:	f002 facf 	bl	8009e0a <HAL_DMA_Abort>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0210 	bic.w	r2, r2, #16
 8007890:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d105      	bne.n	80078a4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 f9f1 	bl	8008c80 <ADC_Disable>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
 80078a2:	e002      	b.n	80078aa <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 f9eb 	bl	8008c80 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d109      	bne.n	80078c4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80078b8:	f023 0301 	bic.w	r3, r3, #1
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80078e0:	2300      	movs	r3, #0
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078fc:	d004      	beq.n	8007908 <HAL_ADC_IRQHandler+0x30>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a8e      	ldr	r2, [pc, #568]	; (8007b3c <HAL_ADC_IRQHandler+0x264>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d101      	bne.n	800790c <HAL_ADC_IRQHandler+0x34>
 8007908:	4b8d      	ldr	r3, [pc, #564]	; (8007b40 <HAL_ADC_IRQHandler+0x268>)
 800790a:	e000      	b.n	800790e <HAL_ADC_IRQHandler+0x36>
 800790c:	4b8d      	ldr	r3, [pc, #564]	; (8007b44 <HAL_ADC_IRQHandler+0x26c>)
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fb47 	bl	8006fa2 <LL_ADC_GetMultimode>
 8007914:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d017      	beq.n	8007950 <HAL_ADC_IRQHandler+0x78>
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d012      	beq.n	8007950 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b00      	cmp	r3, #0
 8007934:	d105      	bne.n	8007942 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fb62 	bl	800900c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2202      	movs	r2, #2
 800794e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <HAL_ADC_IRQHandler+0x8c>
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 8094 	beq.w	8007a98 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 808e 	beq.w	8007a98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d105      	bne.n	8007994 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fa0d 	bl	8006db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d072      	beq.n	8007a8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a64      	ldr	r2, [pc, #400]	; (8007b3c <HAL_ADC_IRQHandler+0x264>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_ADC_IRQHandler+0xea>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a65      	ldr	r2, [pc, #404]	; (8007b48 <HAL_ADC_IRQHandler+0x270>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d002      	beq.n	80079be <HAL_ADC_IRQHandler+0xe6>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	e003      	b.n	80079c6 <HAL_ADC_IRQHandler+0xee>
 80079be:	4b63      	ldr	r3, [pc, #396]	; (8007b4c <HAL_ADC_IRQHandler+0x274>)
 80079c0:	e001      	b.n	80079c6 <HAL_ADC_IRQHandler+0xee>
 80079c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d008      	beq.n	80079e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d002      	beq.n	80079e0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b09      	cmp	r3, #9
 80079de:	d104      	bne.n	80079ea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	623b      	str	r3, [r7, #32]
 80079e8:	e014      	b.n	8007a14 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a53      	ldr	r2, [pc, #332]	; (8007b3c <HAL_ADC_IRQHandler+0x264>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_ADC_IRQHandler+0x130>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a53      	ldr	r2, [pc, #332]	; (8007b48 <HAL_ADC_IRQHandler+0x270>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d002      	beq.n	8007a04 <HAL_ADC_IRQHandler+0x12c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	e003      	b.n	8007a0c <HAL_ADC_IRQHandler+0x134>
 8007a04:	4b51      	ldr	r3, [pc, #324]	; (8007b4c <HAL_ADC_IRQHandler+0x274>)
 8007a06:	e001      	b.n	8007a0c <HAL_ADC_IRQHandler+0x134>
 8007a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d135      	bne.n	8007a8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d12e      	bne.n	8007a8a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff fb96 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11a      	bne.n	8007a72 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 020c 	bic.w	r2, r2, #12
 8007a4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d112      	bne.n	8007a8a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a68:	f043 0201 	orr.w	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a70:	e00b      	b.n	8007a8a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a76:	f043 0210 	orr.w	r2, r3, #16
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a82:	f043 0201 	orr.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fd fdca 	bl	8005624 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	220c      	movs	r2, #12
 8007a96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <HAL_ADC_IRQHandler+0x1d4>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10b      	bne.n	8007ac4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80b3 	beq.w	8007c1e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80ad 	beq.w	8007c1e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	f003 0310 	and.w	r3, r3, #16
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff f9a8 	bl	8006e36 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007ae6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff f963 	bl	8006db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007af2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <HAL_ADC_IRQHandler+0x264>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_ADC_IRQHandler+0x23a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a11      	ldr	r2, [pc, #68]	; (8007b48 <HAL_ADC_IRQHandler+0x270>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d002      	beq.n	8007b0e <HAL_ADC_IRQHandler+0x236>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	e003      	b.n	8007b16 <HAL_ADC_IRQHandler+0x23e>
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <HAL_ADC_IRQHandler+0x274>)
 8007b10:	e001      	b.n	8007b16 <HAL_ADC_IRQHandler+0x23e>
 8007b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d008      	beq.n	8007b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2b06      	cmp	r3, #6
 8007b28:	d002      	beq.n	8007b30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b07      	cmp	r3, #7
 8007b2e:	d10f      	bne.n	8007b50 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	623b      	str	r3, [r7, #32]
 8007b38:	e01f      	b.n	8007b7a <HAL_ADC_IRQHandler+0x2a2>
 8007b3a:	bf00      	nop
 8007b3c:	50000100 	.word	0x50000100
 8007b40:	50000300 	.word	0x50000300
 8007b44:	50000700 	.word	0x50000700
 8007b48:	50000500 	.word	0x50000500
 8007b4c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a8b      	ldr	r2, [pc, #556]	; (8007d84 <HAL_ADC_IRQHandler+0x4ac>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x296>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a8a      	ldr	r2, [pc, #552]	; (8007d88 <HAL_ADC_IRQHandler+0x4b0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d002      	beq.n	8007b6a <HAL_ADC_IRQHandler+0x292>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	e003      	b.n	8007b72 <HAL_ADC_IRQHandler+0x29a>
 8007b6a:	4b88      	ldr	r3, [pc, #544]	; (8007d8c <HAL_ADC_IRQHandler+0x4b4>)
 8007b6c:	e001      	b.n	8007b72 <HAL_ADC_IRQHandler+0x29a>
 8007b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007b72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d047      	beq.n	8007c10 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <HAL_ADC_IRQHandler+0x2c2>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d03f      	beq.n	8007c10 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d13a      	bne.n	8007c10 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	d133      	bne.n	8007c10 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d12e      	bne.n	8007c10 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fafa 	bl	80071b0 <LL_ADC_INJ_IsConversionOngoing>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11a      	bne.n	8007bf8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d112      	bne.n	8007c10 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bee:	f043 0201 	orr.w	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007bf6:	e00b      	b.n	8007c10 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfc:	f043 0210 	orr.w	r2, r3, #16
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c08:	f043 0201 	orr.w	r2, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f9dd 	bl	8008fd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2260      	movs	r2, #96	; 0x60
 8007c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d011      	beq.n	8007c4c <HAL_ADC_IRQHandler+0x374>
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00c      	beq.n	8007c4c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fd fd26 	bl	8005690 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d012      	beq.n	8007c7c <HAL_ADC_IRQHandler+0x3a4>
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fd fd45 	bl	80056fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d012      	beq.n	8007cac <HAL_ADC_IRQHandler+0x3d4>
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00d      	beq.n	8007cac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f9ab 	bl	8008ff8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007caa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d043      	beq.n	8007d3e <HAL_ADC_IRQHandler+0x466>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d03e      	beq.n	8007d3e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ccc:	e021      	b.n	8007d12 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cdc:	d004      	beq.n	8007ce8 <HAL_ADC_IRQHandler+0x410>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a28      	ldr	r2, [pc, #160]	; (8007d84 <HAL_ADC_IRQHandler+0x4ac>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d101      	bne.n	8007cec <HAL_ADC_IRQHandler+0x414>
 8007ce8:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <HAL_ADC_IRQHandler+0x4b8>)
 8007cea:	e000      	b.n	8007cee <HAL_ADC_IRQHandler+0x416>
 8007cec:	4b29      	ldr	r3, [pc, #164]	; (8007d94 <HAL_ADC_IRQHandler+0x4bc>)
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff f965 	bl	8006fbe <LL_ADC_GetMultiDMATransfer>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00b      	beq.n	8007d12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cfe:	e008      	b.n	8007d12 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10e      	bne.n	8007d36 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d28:	f043 0202 	orr.w	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f831 	bl	8007d98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2210      	movs	r2, #16
 8007d3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d018      	beq.n	8007d7a <HAL_ADC_IRQHandler+0x4a2>
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d62:	f043 0208 	orr.w	r2, r3, #8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f935 	bl	8008fe4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007d7a:	bf00      	nop
 8007d7c:	3728      	adds	r7, #40	; 0x28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	50000100 	.word	0x50000100
 8007d88:	50000500 	.word	0x50000500
 8007d8c:	50000400 	.word	0x50000400
 8007d90:	50000300 	.word	0x50000300
 8007d94:	50000700 	.word	0x50000700

08007d98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b0b6      	sub	sp, #216	; 0xd8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d102      	bne.n	8007dd0 <HAL_ADC_ConfigChannel+0x24>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	f000 bc13 	b.w	80085f6 <HAL_ADC_ConfigChannel+0x84a>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff f9c0 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 83f3 	bne.w	80085d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7fe fff1 	bl	8006dde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff f9ae 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 8007e06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff f9ce 	bl	80071b0 <LL_ADC_INJ_IsConversionOngoing>
 8007e14:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 81d9 	bne.w	80081d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f040 81d4 	bne.w	80081d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e34:	d10f      	bne.n	8007e56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4619      	mov	r1, r3
 8007e42:	f7ff f80b 	bl	8006e5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe ff9f 	bl	8006d92 <LL_ADC_SetSamplingTimeCommonConfig>
 8007e54:	e00e      	b.n	8007e74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7fe fffa 	bl	8006e5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe ff8f 	bl	8006d92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695a      	ldr	r2, [r3, #20]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	08db      	lsrs	r3, r3, #3
 8007e80:	f003 0303 	and.w	r3, r3, #3
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d022      	beq.n	8007edc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6919      	ldr	r1, [r3, #16]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea6:	f7fe fee9 	bl	8006c7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6919      	ldr	r1, [r3, #16]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7fe ff35 	bl	8006d26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6919      	ldr	r1, [r3, #16]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	7f1b      	ldrb	r3, [r3, #28]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d102      	bne.n	8007ed2 <HAL_ADC_ConfigChannel+0x126>
 8007ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ed0:	e000      	b.n	8007ed4 <HAL_ADC_ConfigChannel+0x128>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f7fe ff41 	bl	8006d5c <LL_ADC_SetOffsetSaturation>
 8007eda:	e17b      	b.n	80081d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe feee 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x15c>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fee3 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8007efe:	4603      	mov	r3, r0
 8007f00:	0e9b      	lsrs	r3, r3, #26
 8007f02:	f003 021f 	and.w	r2, r3, #31
 8007f06:	e01e      	b.n	8007f46 <HAL_ADC_ConfigChannel+0x19a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fed8 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f1e:	fa93 f3a3 	rbit	r3, r3
 8007f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007f36:	2320      	movs	r3, #32
 8007f38:	e004      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f3e:	fab3 f383 	clz	r3, r3
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <HAL_ADC_ConfigChannel+0x1b2>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	0e9b      	lsrs	r3, r3, #26
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	e018      	b.n	8007f90 <HAL_ADC_ConfigChannel+0x1e4>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f6a:	fa93 f3a3 	rbit	r3, r3
 8007f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007f82:	2320      	movs	r3, #32
 8007f84:	e004      	b.n	8007f90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f8a:	fab3 f383 	clz	r3, r3
 8007f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d106      	bne.n	8007fa2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe fea7 	bl	8006cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fe8b 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <HAL_ADC_ConfigChannel+0x222>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fe80 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	0e9b      	lsrs	r3, r3, #26
 8007fc8:	f003 021f 	and.w	r2, r3, #31
 8007fcc:	e01e      	b.n	800800c <HAL_ADC_ConfigChannel+0x260>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fe fe75 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007fe4:	fa93 f3a3 	rbit	r3, r3
 8007fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007fec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	e004      	b.n	800800a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008004:	fab3 f383 	clz	r3, r3
 8008008:	b2db      	uxtb	r3, r3
 800800a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008014:	2b00      	cmp	r3, #0
 8008016:	d105      	bne.n	8008024 <HAL_ADC_ConfigChannel+0x278>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	0e9b      	lsrs	r3, r3, #26
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	e018      	b.n	8008056 <HAL_ADC_ConfigChannel+0x2aa>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800802c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008030:	fa93 f3a3 	rbit	r3, r3
 8008034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008038:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800803c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008048:	2320      	movs	r3, #32
 800804a:	e004      	b.n	8008056 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800804c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008050:	fab3 f383 	clz	r3, r3
 8008054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008056:	429a      	cmp	r2, r3
 8008058:	d106      	bne.n	8008068 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	2101      	movs	r1, #1
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fe44 	bl	8006cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2102      	movs	r1, #2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fe28 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8008074:	4603      	mov	r3, r0
 8008076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <HAL_ADC_ConfigChannel+0x2e8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2102      	movs	r1, #2
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fe1d 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 800808a:	4603      	mov	r3, r0
 800808c:	0e9b      	lsrs	r3, r3, #26
 800808e:	f003 021f 	and.w	r2, r3, #31
 8008092:	e01e      	b.n	80080d2 <HAL_ADC_ConfigChannel+0x326>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2102      	movs	r1, #2
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fe12 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080aa:	fa93 f3a3 	rbit	r3, r3
 80080ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80080b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80080ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80080c2:	2320      	movs	r3, #32
 80080c4:	e004      	b.n	80080d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80080c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080ca:	fab3 f383 	clz	r3, r3
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x33e>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	0e9b      	lsrs	r3, r3, #26
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	e016      	b.n	8008118 <HAL_ADC_ConfigChannel+0x36c>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080f6:	fa93 f3a3 	rbit	r3, r3
 80080fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80080fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800810a:	2320      	movs	r3, #32
 800810c:	e004      	b.n	8008118 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800810e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008112:	fab3 f383 	clz	r3, r3
 8008116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008118:	429a      	cmp	r2, r3
 800811a:	d106      	bne.n	800812a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2200      	movs	r2, #0
 8008122:	2102      	movs	r1, #2
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe fde3 	bl	8006cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2103      	movs	r1, #3
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fdc7 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8008136:	4603      	mov	r3, r0
 8008138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <HAL_ADC_ConfigChannel+0x3aa>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2103      	movs	r1, #3
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fdbc 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 800814c:	4603      	mov	r3, r0
 800814e:	0e9b      	lsrs	r3, r3, #26
 8008150:	f003 021f 	and.w	r2, r3, #31
 8008154:	e017      	b.n	8008186 <HAL_ADC_ConfigChannel+0x3da>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2103      	movs	r1, #3
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fdb1 	bl	8006cc4 <LL_ADC_GetOffsetChannel>
 8008162:	4603      	mov	r3, r0
 8008164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008168:	fa93 f3a3 	rbit	r3, r3
 800816c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800816e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008170:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008178:	2320      	movs	r3, #32
 800817a:	e003      	b.n	8008184 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800817c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817e:	fab3 f383 	clz	r3, r3
 8008182:	b2db      	uxtb	r3, r3
 8008184:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <HAL_ADC_ConfigChannel+0x3f2>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	0e9b      	lsrs	r3, r3, #26
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	e011      	b.n	80081c2 <HAL_ADC_ConfigChannel+0x416>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081a6:	fa93 f3a3 	rbit	r3, r3
 80081aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80081ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80081b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80081b6:	2320      	movs	r3, #32
 80081b8:	e003      	b.n	80081c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80081ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081bc:	fab3 f383 	clz	r3, r3
 80081c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d106      	bne.n	80081d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2103      	movs	r1, #3
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe fd8e 	bl	8006cf0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe ff74 	bl	80070c6 <LL_ADC_IsEnabled>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f040 813d 	bne.w	8008460 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6819      	ldr	r1, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f7fe fe5e 	bl	8006eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	4aa2      	ldr	r2, [pc, #648]	; (8008488 <HAL_ADC_ConfigChannel+0x6dc>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	f040 812e 	bne.w	8008460 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <HAL_ADC_ConfigChannel+0x480>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	0e9b      	lsrs	r3, r3, #26
 800821a:	3301      	adds	r3, #1
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2b09      	cmp	r3, #9
 8008222:	bf94      	ite	ls
 8008224:	2301      	movls	r3, #1
 8008226:	2300      	movhi	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e019      	b.n	8008260 <HAL_ADC_ConfigChannel+0x4b4>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008234:	fa93 f3a3 	rbit	r3, r3
 8008238:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800823a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800823c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800823e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008244:	2320      	movs	r3, #32
 8008246:	e003      	b.n	8008250 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800824a:	fab3 f383 	clz	r3, r3
 800824e:	b2db      	uxtb	r3, r3
 8008250:	3301      	adds	r3, #1
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	2b09      	cmp	r3, #9
 8008258:	bf94      	ite	ls
 800825a:	2301      	movls	r3, #1
 800825c:	2300      	movhi	r3, #0
 800825e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008260:	2b00      	cmp	r3, #0
 8008262:	d079      	beq.n	8008358 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <HAL_ADC_ConfigChannel+0x4d4>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	0e9b      	lsrs	r3, r3, #26
 8008276:	3301      	adds	r3, #1
 8008278:	069b      	lsls	r3, r3, #26
 800827a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800827e:	e015      	b.n	80082ac <HAL_ADC_ConfigChannel+0x500>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	fa93 f3a3 	rbit	r3, r3
 800828c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008298:	2320      	movs	r3, #32
 800829a:	e003      	b.n	80082a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800829c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800829e:	fab3 f383 	clz	r3, r3
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	3301      	adds	r3, #1
 80082a6:	069b      	lsls	r3, r3, #26
 80082a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <HAL_ADC_ConfigChannel+0x520>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	0e9b      	lsrs	r3, r3, #26
 80082be:	3301      	adds	r3, #1
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	2101      	movs	r1, #1
 80082c6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ca:	e017      	b.n	80082fc <HAL_ADC_ConfigChannel+0x550>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d4:	fa93 f3a3 	rbit	r3, r3
 80082d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80082da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80082de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80082e4:	2320      	movs	r3, #32
 80082e6:	e003      	b.n	80082f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80082e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ea:	fab3 f383 	clz	r3, r3
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	3301      	adds	r3, #1
 80082f2:	f003 031f 	and.w	r3, r3, #31
 80082f6:	2101      	movs	r1, #1
 80082f8:	fa01 f303 	lsl.w	r3, r1, r3
 80082fc:	ea42 0103 	orr.w	r1, r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <HAL_ADC_ConfigChannel+0x576>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	0e9b      	lsrs	r3, r3, #26
 8008312:	3301      	adds	r3, #1
 8008314:	f003 021f 	and.w	r2, r3, #31
 8008318:	4613      	mov	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	4413      	add	r3, r2
 800831e:	051b      	lsls	r3, r3, #20
 8008320:	e018      	b.n	8008354 <HAL_ADC_ConfigChannel+0x5a8>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	fa93 f3a3 	rbit	r3, r3
 800832e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800833a:	2320      	movs	r3, #32
 800833c:	e003      	b.n	8008346 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800833e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008340:	fab3 f383 	clz	r3, r3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	3301      	adds	r3, #1
 8008348:	f003 021f 	and.w	r2, r3, #31
 800834c:	4613      	mov	r3, r2
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	4413      	add	r3, r2
 8008352:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008354:	430b      	orrs	r3, r1
 8008356:	e07e      	b.n	8008456 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008360:	2b00      	cmp	r3, #0
 8008362:	d107      	bne.n	8008374 <HAL_ADC_ConfigChannel+0x5c8>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	0e9b      	lsrs	r3, r3, #26
 800836a:	3301      	adds	r3, #1
 800836c:	069b      	lsls	r3, r3, #26
 800836e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008372:	e015      	b.n	80083a0 <HAL_ADC_ConfigChannel+0x5f4>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	fa93 f3a3 	rbit	r3, r3
 8008380:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800838c:	2320      	movs	r3, #32
 800838e:	e003      	b.n	8008398 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	fab3 f383 	clz	r3, r3
 8008396:	b2db      	uxtb	r3, r3
 8008398:	3301      	adds	r3, #1
 800839a:	069b      	lsls	r3, r3, #26
 800839c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d109      	bne.n	80083c0 <HAL_ADC_ConfigChannel+0x614>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	0e9b      	lsrs	r3, r3, #26
 80083b2:	3301      	adds	r3, #1
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	2101      	movs	r1, #1
 80083ba:	fa01 f303 	lsl.w	r3, r1, r3
 80083be:	e017      	b.n	80083f0 <HAL_ADC_ConfigChannel+0x644>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	fa93 f3a3 	rbit	r3, r3
 80083cc:	61fb      	str	r3, [r7, #28]
  return result;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80083d8:	2320      	movs	r3, #32
 80083da:	e003      	b.n	80083e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	fab3 f383 	clz	r3, r3
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	3301      	adds	r3, #1
 80083e6:	f003 031f 	and.w	r3, r3, #31
 80083ea:	2101      	movs	r1, #1
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	ea42 0103 	orr.w	r1, r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <HAL_ADC_ConfigChannel+0x670>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	0e9b      	lsrs	r3, r3, #26
 8008406:	3301      	adds	r3, #1
 8008408:	f003 021f 	and.w	r2, r3, #31
 800840c:	4613      	mov	r3, r2
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	4413      	add	r3, r2
 8008412:	3b1e      	subs	r3, #30
 8008414:	051b      	lsls	r3, r3, #20
 8008416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800841a:	e01b      	b.n	8008454 <HAL_ADC_ConfigChannel+0x6a8>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	fa93 f3a3 	rbit	r3, r3
 8008428:	613b      	str	r3, [r7, #16]
  return result;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8008434:	2320      	movs	r3, #32
 8008436:	e003      	b.n	8008440 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	fab3 f383 	clz	r3, r3
 800843e:	b2db      	uxtb	r3, r3
 8008440:	3301      	adds	r3, #1
 8008442:	f003 021f 	and.w	r2, r3, #31
 8008446:	4613      	mov	r3, r2
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4413      	add	r3, r2
 800844c:	3b1e      	subs	r3, #30
 800844e:	051b      	lsls	r3, r3, #20
 8008450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008454:	430b      	orrs	r3, r1
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	6892      	ldr	r2, [r2, #8]
 800845a:	4619      	mov	r1, r3
 800845c:	f7fe fcfe 	bl	8006e5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_ADC_ConfigChannel+0x6e0>)
 8008466:	4013      	ands	r3, r2
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80be 	beq.w	80085ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008476:	d004      	beq.n	8008482 <HAL_ADC_ConfigChannel+0x6d6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a04      	ldr	r2, [pc, #16]	; (8008490 <HAL_ADC_ConfigChannel+0x6e4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d10a      	bne.n	8008498 <HAL_ADC_ConfigChannel+0x6ec>
 8008482:	4b04      	ldr	r3, [pc, #16]	; (8008494 <HAL_ADC_ConfigChannel+0x6e8>)
 8008484:	e009      	b.n	800849a <HAL_ADC_ConfigChannel+0x6ee>
 8008486:	bf00      	nop
 8008488:	407f0000 	.word	0x407f0000
 800848c:	80080000 	.word	0x80080000
 8008490:	50000100 	.word	0x50000100
 8008494:	50000300 	.word	0x50000300
 8008498:	4b59      	ldr	r3, [pc, #356]	; (8008600 <HAL_ADC_ConfigChannel+0x854>)
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fbe0 	bl	8006c60 <LL_ADC_GetCommonPathInternalCh>
 80084a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a56      	ldr	r2, [pc, #344]	; (8008604 <HAL_ADC_ConfigChannel+0x858>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <HAL_ADC_ConfigChannel+0x70c>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a55      	ldr	r2, [pc, #340]	; (8008608 <HAL_ADC_ConfigChannel+0x85c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d13a      	bne.n	800852e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80084b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d134      	bne.n	800852e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084cc:	d005      	beq.n	80084da <HAL_ADC_ConfigChannel+0x72e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a4e      	ldr	r2, [pc, #312]	; (800860c <HAL_ADC_ConfigChannel+0x860>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	f040 8085 	bne.w	80085e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084e2:	d004      	beq.n	80084ee <HAL_ADC_ConfigChannel+0x742>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a49      	ldr	r2, [pc, #292]	; (8008610 <HAL_ADC_ConfigChannel+0x864>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d101      	bne.n	80084f2 <HAL_ADC_ConfigChannel+0x746>
 80084ee:	4a49      	ldr	r2, [pc, #292]	; (8008614 <HAL_ADC_ConfigChannel+0x868>)
 80084f0:	e000      	b.n	80084f4 <HAL_ADC_ConfigChannel+0x748>
 80084f2:	4a43      	ldr	r2, [pc, #268]	; (8008600 <HAL_ADC_ConfigChannel+0x854>)
 80084f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084fc:	4619      	mov	r1, r3
 80084fe:	4610      	mov	r0, r2
 8008500:	f7fe fb9b 	bl	8006c3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008504:	4b44      	ldr	r3, [pc, #272]	; (8008618 <HAL_ADC_ConfigChannel+0x86c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	099b      	lsrs	r3, r3, #6
 800850a:	4a44      	ldr	r2, [pc, #272]	; (800861c <HAL_ADC_ConfigChannel+0x870>)
 800850c:	fba2 2303 	umull	r2, r3, r2, r3
 8008510:	099b      	lsrs	r3, r3, #6
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	4613      	mov	r3, r2
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800851e:	e002      	b.n	8008526 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3b01      	subs	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1f9      	bne.n	8008520 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800852c:	e05a      	b.n	80085e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a3b      	ldr	r2, [pc, #236]	; (8008620 <HAL_ADC_ConfigChannel+0x874>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d125      	bne.n	8008584 <HAL_ADC_ConfigChannel+0x7d8>
 8008538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800853c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d11f      	bne.n	8008584 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a31      	ldr	r2, [pc, #196]	; (8008610 <HAL_ADC_ConfigChannel+0x864>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d104      	bne.n	8008558 <HAL_ADC_ConfigChannel+0x7ac>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a34      	ldr	r2, [pc, #208]	; (8008624 <HAL_ADC_ConfigChannel+0x878>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d047      	beq.n	80085e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008560:	d004      	beq.n	800856c <HAL_ADC_ConfigChannel+0x7c0>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <HAL_ADC_ConfigChannel+0x864>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d101      	bne.n	8008570 <HAL_ADC_ConfigChannel+0x7c4>
 800856c:	4a29      	ldr	r2, [pc, #164]	; (8008614 <HAL_ADC_ConfigChannel+0x868>)
 800856e:	e000      	b.n	8008572 <HAL_ADC_ConfigChannel+0x7c6>
 8008570:	4a23      	ldr	r2, [pc, #140]	; (8008600 <HAL_ADC_ConfigChannel+0x854>)
 8008572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800857a:	4619      	mov	r1, r3
 800857c:	4610      	mov	r0, r2
 800857e:	f7fe fb5c 	bl	8006c3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008582:	e031      	b.n	80085e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a27      	ldr	r2, [pc, #156]	; (8008628 <HAL_ADC_ConfigChannel+0x87c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d12d      	bne.n	80085ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800858e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d127      	bne.n	80085ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <HAL_ADC_ConfigChannel+0x864>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d022      	beq.n	80085ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ac:	d004      	beq.n	80085b8 <HAL_ADC_ConfigChannel+0x80c>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a17      	ldr	r2, [pc, #92]	; (8008610 <HAL_ADC_ConfigChannel+0x864>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d101      	bne.n	80085bc <HAL_ADC_ConfigChannel+0x810>
 80085b8:	4a16      	ldr	r2, [pc, #88]	; (8008614 <HAL_ADC_ConfigChannel+0x868>)
 80085ba:	e000      	b.n	80085be <HAL_ADC_ConfigChannel+0x812>
 80085bc:	4a10      	ldr	r2, [pc, #64]	; (8008600 <HAL_ADC_ConfigChannel+0x854>)
 80085be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f7fe fb36 	bl	8006c3a <LL_ADC_SetCommonPathInternalCh>
 80085ce:	e00c      	b.n	80085ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80085e2:	e002      	b.n	80085ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80085e4:	bf00      	nop
 80085e6:	e000      	b.n	80085ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80085e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80085f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	37d8      	adds	r7, #216	; 0xd8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	50000700 	.word	0x50000700
 8008604:	c3210000 	.word	0xc3210000
 8008608:	90c00010 	.word	0x90c00010
 800860c:	50000600 	.word	0x50000600
 8008610:	50000100 	.word	0x50000100
 8008614:	50000300 	.word	0x50000300
 8008618:	20000018 	.word	0x20000018
 800861c:	053e2d63 	.word	0x053e2d63
 8008620:	c7520000 	.word	0xc7520000
 8008624:	50000500 	.word	0x50000500
 8008628:	cb840000 	.word	0xcb840000

0800862c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08e      	sub	sp, #56	; 0x38
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008644:	d003      	beq.n	800864e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800864a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_ADC_AnalogWDGConfig+0x30>
 8008658:	2302      	movs	r3, #2
 800865a:	e1ea      	b.n	8008a32 <HAL_ADC_AnalogWDGConfig+0x406>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fd7a 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 800866e:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe fd9b 	bl	80071b0 <LL_ADC_INJ_IsConversionOngoing>
 800867a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	2b00      	cmp	r3, #0
 8008680:	f040 8175 	bne.w	800896e <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	f040 8171 	bne.w	800896e <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a90      	ldr	r2, [pc, #576]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008692:	4293      	cmp	r3, r2
 8008694:	f040 808d 	bne.w	80087b2 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80086a0:	d034      	beq.n	800870c <HAL_ADC_AnalogWDGConfig+0xe0>
 80086a2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80086a6:	d856      	bhi.n	8008756 <HAL_ADC_AnalogWDGConfig+0x12a>
 80086a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086ac:	d04b      	beq.n	8008746 <HAL_ADC_AnalogWDGConfig+0x11a>
 80086ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086b2:	d850      	bhi.n	8008756 <HAL_ADC_AnalogWDGConfig+0x12a>
 80086b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80086b8:	d01b      	beq.n	80086f2 <HAL_ADC_AnalogWDGConfig+0xc6>
 80086ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80086be:	d84a      	bhi.n	8008756 <HAL_ADC_AnalogWDGConfig+0x12a>
 80086c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086c4:	d037      	beq.n	8008736 <HAL_ADC_AnalogWDGConfig+0x10a>
 80086c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086ca:	d844      	bhi.n	8008756 <HAL_ADC_AnalogWDGConfig+0x12a>
 80086cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086d0:	d029      	beq.n	8008726 <HAL_ADC_AnalogWDGConfig+0xfa>
 80086d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086d6:	d13e      	bne.n	8008756 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80086e4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80086e8:	461a      	mov	r2, r3
 80086ea:	497a      	ldr	r1, [pc, #488]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80086ec:	f7fe fc0a 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80086f0:	e039      	b.n	8008766 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80086fe:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8008702:	461a      	mov	r2, r3
 8008704:	4973      	ldr	r1, [pc, #460]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008706:	f7fe fbfd 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800870a:	e02c      	b.n	8008766 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008718:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 800871c:	461a      	mov	r2, r3
 800871e:	496d      	ldr	r1, [pc, #436]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008720:	f7fe fbf0 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8008724:	e01f      	b.n	8008766 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a6b      	ldr	r2, [pc, #428]	; (80088d8 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 800872c:	4969      	ldr	r1, [pc, #420]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fbe8 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008734:	e017      	b.n	8008766 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a68      	ldr	r2, [pc, #416]	; (80088dc <HAL_ADC_AnalogWDGConfig+0x2b0>)
 800873c:	4965      	ldr	r1, [pc, #404]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fbe0 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008744:	e00f      	b.n	8008766 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a65      	ldr	r2, [pc, #404]	; (80088e0 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 800874c:	4961      	ldr	r1, [pc, #388]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fbd8 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008754:	e007      	b.n	8008766 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2200      	movs	r2, #0
 800875c:	495d      	ldr	r1, [pc, #372]	; (80088d4 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fbd0 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008764:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f7fe fd22 	bl	80071d6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d105      	bne.n	80087a6 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fd42 	bl	8007228 <LL_ADC_EnableIT_AWD1>
 80087a4:	e0e3      	b.n	800896e <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fd6c 	bl	8007288 <LL_ADC_DisableIT_AWD1>
 80087b0:	e0dd      	b.n	800896e <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80087ba:	d01d      	beq.n	80087f8 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80087bc:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80087c0:	f200 8092 	bhi.w	80088e8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087c8:	d07b      	beq.n	80088c2 <HAL_ADC_AnalogWDGConfig+0x296>
 80087ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087ce:	f200 808b 	bhi.w	80088e8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80087d6:	d00f      	beq.n	80087f8 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80087d8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80087dc:	f200 8084 	bhi.w	80088e8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087e4:	d06d      	beq.n	80088c2 <HAL_ADC_AnalogWDGConfig+0x296>
 80087e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087ea:	d87d      	bhi.n	80088e8 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80087ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087f0:	d067      	beq.n	80088c2 <HAL_ADC_AnalogWDGConfig+0x296>
 80087f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087f6:	d177      	bne.n	80088e8 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a39      	ldr	r2, [pc, #228]	; (80088e4 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d12f      	bne.n	8008862 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800880a:	2b00      	cmp	r3, #0
 800880c:	d108      	bne.n	8008820 <HAL_ADC_AnalogWDGConfig+0x1f4>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	0e9b      	lsrs	r3, r3, #26
 8008814:	f003 031f 	and.w	r3, r3, #31
 8008818:	2201      	movs	r2, #1
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	e016      	b.n	800884e <HAL_ADC_AnalogWDGConfig+0x222>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	fa93 f3a3 	rbit	r3, r3
 800882c:	61bb      	str	r3, [r7, #24]
  return result;
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8008838:	2320      	movs	r3, #32
 800883a:	e003      	b.n	8008844 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	fab3 f383 	clz	r3, r3
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	2201      	movs	r2, #1
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	430b      	orrs	r3, r1
 800885c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8008860:	e04b      	b.n	80088fa <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800886a:	2b00      	cmp	r3, #0
 800886c:	d108      	bne.n	8008880 <HAL_ADC_AnalogWDGConfig+0x254>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	0e9b      	lsrs	r3, r3, #26
 8008874:	f003 031f 	and.w	r3, r3, #31
 8008878:	2201      	movs	r2, #1
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	e016      	b.n	80088ae <HAL_ADC_AnalogWDGConfig+0x282>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	fa93 f3a3 	rbit	r3, r3
 800888c:	60fb      	str	r3, [r7, #12]
  return result;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8008898:	2320      	movs	r3, #32
 800889a:	e003      	b.n	80088a4 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	fab3 f383 	clz	r3, r3
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	f003 031f 	and.w	r3, r3, #31
 80088a8:	2201      	movs	r2, #1
 80088aa:	fa02 f303 	lsl.w	r3, r2, r3
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	430b      	orrs	r3, r1
 80088bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80088c0:	e01b      	b.n	80088fa <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a05      	ldr	r2, [pc, #20]	; (80088e0 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7fe fb19 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80088d2:	e012      	b.n	80088fa <HAL_ADC_AnalogWDGConfig+0x2ce>
 80088d4:	7dc00000 	.word	0x7dc00000
 80088d8:	0087ffff 	.word	0x0087ffff
 80088dc:	0107ffff 	.word	0x0107ffff
 80088e0:	0187ffff 	.word	0x0187ffff
 80088e4:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	4619      	mov	r1, r3
 80088f4:	f7fe fb06 	bl	8006f04 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80088f8:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a4f      	ldr	r2, [pc, #316]	; (8008a3c <HAL_ADC_AnalogWDGConfig+0x410>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d11a      	bne.n	800893a <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008908:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fc6b 	bl	80071f0 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	7b1b      	ldrb	r3, [r3, #12]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d105      	bne.n	800892e <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fc8e 	bl	8007248 <LL_ADC_EnableIT_AWD2>
 800892c:	e01f      	b.n	800896e <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fcb8 	bl	80072a8 <LL_ADC_DisableIT_AWD2>
 8008938:	e019      	b.n	800896e <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800893e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fc5e 	bl	800720c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	7b1b      	ldrb	r3, [r3, #12]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d105      	bne.n	8008964 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fc83 	bl	8007268 <LL_ADC_EnableIT_AWD3>
 8008962:	e004      	b.n	800896e <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fcad 	bl	80072c8 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a33      	ldr	r2, [pc, #204]	; (8008a40 <HAL_ADC_AnalogWDGConfig+0x414>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d118      	bne.n	80089aa <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	695a      	ldr	r2, [r3, #20]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	08db      	lsrs	r3, r3, #3
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	633b      	str	r3, [r7, #48]	; 0x30
 80089a8:	e035      	b.n	8008a16 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f003 0318 	and.w	r3, r3, #24
 80089b4:	2b18      	cmp	r3, #24
 80089b6:	d00f      	beq.n	80089d8 <HAL_ADC_AnalogWDGConfig+0x3ac>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	08db      	lsrs	r3, r3, #3
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	f1c3 0302 	rsb	r3, r3, #2
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	f003 031e 	and.w	r3, r3, #30
 80089d2:	fa22 f303 	lsr.w	r3, r2, r3
 80089d6:	e002      	b.n	80089de <HAL_ADC_AnalogWDGConfig+0x3b2>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f003 0318 	and.w	r3, r3, #24
 80089ea:	2b18      	cmp	r3, #24
 80089ec:	d00f      	beq.n	8008a0e <HAL_ADC_AnalogWDGConfig+0x3e2>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	08db      	lsrs	r3, r3, #3
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	f1c3 0302 	rsb	r3, r3, #2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	f003 031e 	and.w	r3, r3, #30
 8008a08:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0c:	e002      	b.n	8008a14 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6819      	ldr	r1, [r3, #0]
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a22:	f7fe fa9c 	bl	8006f5e <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3738      	adds	r7, #56	; 0x38
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	0017ffff 	.word	0x0017ffff
 8008a40:	7dc00000 	.word	0x7dc00000

08008a44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fb81 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 8008a60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fba2 	bl	80071b0 <LL_ADC_INJ_IsConversionOngoing>
 8008a6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d103      	bne.n	8008a7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8098 	beq.w	8008bac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d02a      	beq.n	8008ae0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7f5b      	ldrb	r3, [r3, #29]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d126      	bne.n	8008ae0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7f1b      	ldrb	r3, [r3, #28]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d122      	bne.n	8008ae0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008a9e:	e014      	b.n	8008aca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4a45      	ldr	r2, [pc, #276]	; (8008bb8 <ADC_ConversionStop+0x174>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d90d      	bls.n	8008ac4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aac:	f043 0210 	orr.w	r2, r3, #16
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab8:	f043 0201 	orr.w	r2, r3, #1
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e074      	b.n	8008bae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad4:	2b40      	cmp	r3, #64	; 0x40
 8008ad6:	d1e3      	bne.n	8008aa0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2240      	movs	r2, #64	; 0x40
 8008ade:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d014      	beq.n	8008b10 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fb39 	bl	8007162 <LL_ADC_REG_IsConversionOngoing>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe faf6 	bl	80070ec <LL_ADC_IsDisableOngoing>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fb15 	bl	800713a <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d014      	beq.n	8008b40 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fb48 	bl	80071b0 <LL_ADC_INJ_IsConversionOngoing>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe fade 	bl	80070ec <LL_ADC_IsDisableOngoing>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fb24 	bl	8007188 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d005      	beq.n	8008b52 <ADC_ConversionStop+0x10e>
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d105      	bne.n	8008b58 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	617b      	str	r3, [r7, #20]
        break;
 8008b50:	e005      	b.n	8008b5e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008b52:	2308      	movs	r3, #8
 8008b54:	617b      	str	r3, [r7, #20]
        break;
 8008b56:	e002      	b.n	8008b5e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008b58:	2304      	movs	r3, #4
 8008b5a:	617b      	str	r3, [r7, #20]
        break;
 8008b5c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008b5e:	f7fe f807 	bl	8006b70 <HAL_GetTick>
 8008b62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b64:	e01b      	b.n	8008b9e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008b66:	f7fe f803 	bl	8006b70 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b05      	cmp	r3, #5
 8008b72:	d914      	bls.n	8008b9e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00d      	beq.n	8008b9e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b86:	f043 0210 	orr.w	r2, r3, #16
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b92:	f043 0201 	orr.w	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e007      	b.n	8008bae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1dc      	bne.n	8008b66 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	a33fffff 	.word	0xa33fffff

08008bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe fa7c 	bl	80070c6 <LL_ADC_IsEnabled>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d14d      	bne.n	8008c70 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	4b28      	ldr	r3, [pc, #160]	; (8008c7c <ADC_Enable+0xc0>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00d      	beq.n	8008bfe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be6:	f043 0210 	orr.w	r2, r3, #16
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf2:	f043 0201 	orr.w	r2, r3, #1
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e039      	b.n	8008c72 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fa37 	bl	8007076 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008c08:	f7fd ffb2 	bl	8006b70 <HAL_GetTick>
 8008c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c0e:	e028      	b.n	8008c62 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fa56 	bl	80070c6 <LL_ADC_IsEnabled>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe fa26 	bl	8007076 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c2a:	f7fd ffa1 	bl	8006b70 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d914      	bls.n	8008c62 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d00d      	beq.n	8008c62 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4a:	f043 0210 	orr.w	r2, r3, #16
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c56:	f043 0201 	orr.w	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e007      	b.n	8008c72 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d1cf      	bne.n	8008c10 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	8000003f 	.word	0x8000003f

08008c80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fa2d 	bl	80070ec <LL_ADC_IsDisableOngoing>
 8008c92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fa14 	bl	80070c6 <LL_ADC_IsEnabled>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d047      	beq.n	8008d34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d144      	bne.n	8008d34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f003 030d 	and.w	r3, r3, #13
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d10c      	bne.n	8008cd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe f9ee 	bl	800709e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008cca:	f7fd ff51 	bl	8006b70 <HAL_GetTick>
 8008cce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008cd0:	e029      	b.n	8008d26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd6:	f043 0210 	orr.w	r2, r3, #16
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce2:	f043 0201 	orr.w	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e023      	b.n	8008d36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008cee:	f7fd ff3f 	bl	8006b70 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d914      	bls.n	8008d26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00d      	beq.n	8008d26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0e:	f043 0210 	orr.w	r2, r3, #16
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d1a:	f043 0201 	orr.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e007      	b.n	8008d36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1dc      	bne.n	8008cee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d14b      	bne.n	8008df0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d021      	beq.n	8008db6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe f81e 	bl	8006db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d032      	beq.n	8008de8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d12b      	bne.n	8008de8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11f      	bne.n	8008de8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dac:	f043 0201 	orr.w	r2, r3, #1
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8008db4:	e018      	b.n	8008de8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d111      	bne.n	8008de8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d105      	bne.n	8008de8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de0:	f043 0201 	orr.w	r2, r3, #1
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7fc fc1b 	bl	8005624 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008dee:	e00e      	b.n	8008e0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f7fe ffcb 	bl	8007d98 <HAL_ADC_ErrorCallback>
}
 8008e02:	e004      	b.n	8008e0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7fc fbf3 	bl	8005610 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e50:	f043 0204 	orr.w	r2, r3, #4
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7fe ff9d 	bl	8007d98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <LL_ADC_IsEnabled>:
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <LL_ADC_IsEnabled+0x18>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <LL_ADC_IsEnabled+0x1a>
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <LL_ADC_StartCalibration>:
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	609a      	str	r2, [r3, #8]
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <LL_ADC_IsCalibrationOnGoing>:
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed2:	d101      	bne.n	8008ed8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e000      	b.n	8008eda <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <LL_ADC_REG_IsConversionOngoing>:
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d101      	bne.n	8008efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_ADCEx_Calibration_Start+0x1c>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e04d      	b.n	8008fc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff fea5 	bl	8008c80 <ADC_Disable>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d136      	bne.n	8008fae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f48:	f023 0302 	bic.w	r3, r3, #2
 8008f4c:	f043 0202 	orr.w	r2, r3, #2
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff ff96 	bl	8008e8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008f60:	e014      	b.n	8008f8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <HAL_ADCEx_Calibration_Start+0xc0>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d90d      	bls.n	8008f8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f74:	f023 0312 	bic.w	r3, r3, #18
 8008f78:	f043 0210 	orr.w	r2, r3, #16
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e01b      	b.n	8008fc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff ff94 	bl	8008ebe <LL_ADC_IsCalibrationOnGoing>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e2      	bne.n	8008f62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa0:	f023 0303 	bic.w	r3, r3, #3
 8008fa4:	f043 0201 	orr.w	r2, r3, #1
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	65da      	str	r2, [r3, #92]	; 0x5c
 8008fac:	e005      	b.n	8008fba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	f043 0210 	orr.w	r2, r3, #16
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	0004de01 	.word	0x0004de01

08008fd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b0a1      	sub	sp, #132	; 0x84
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800903a:	2302      	movs	r3, #2
 800903c:	e0e7      	b.n	800920e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8009046:	2300      	movs	r3, #0
 8009048:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800904a:	2300      	movs	r3, #0
 800904c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009056:	d102      	bne.n	800905e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009058:	4b6f      	ldr	r3, [pc, #444]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	e009      	b.n	8009072 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a6e      	ldr	r2, [pc, #440]	; (800921c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d102      	bne.n	800906e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8009068:	4b6d      	ldr	r3, [pc, #436]	; (8009220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	e001      	b.n	8009072 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10b      	bne.n	8009090 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e0be      	b.n	800920e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff ff27 	bl	8008ee6 <LL_ADC_REG_IsConversionOngoing>
 8009098:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff ff21 	bl	8008ee6 <LL_ADC_REG_IsConversionOngoing>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 80a0 	bne.w	80091ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80090ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f040 809c 	bne.w	80091ec <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090bc:	d004      	beq.n	80090c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a55      	ldr	r2, [pc, #340]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d101      	bne.n	80090cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80090c8:	4b56      	ldr	r3, [pc, #344]	; (8009224 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80090ca:	e000      	b.n	80090ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80090cc:	4b56      	ldr	r3, [pc, #344]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80090ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d04b      	beq.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	6859      	ldr	r1, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090ea:	035b      	lsls	r3, r3, #13
 80090ec:	430b      	orrs	r3, r1
 80090ee:	431a      	orrs	r2, r3
 80090f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090fc:	d004      	beq.n	8009108 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a45      	ldr	r2, [pc, #276]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d10f      	bne.n	8009128 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8009108:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800910c:	f7ff feab 	bl	8008e66 <LL_ADC_IsEnabled>
 8009110:	4604      	mov	r4, r0
 8009112:	4841      	ldr	r0, [pc, #260]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009114:	f7ff fea7 	bl	8008e66 <LL_ADC_IsEnabled>
 8009118:	4603      	mov	r3, r0
 800911a:	4323      	orrs	r3, r4
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e012      	b.n	800914e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8009128:	483c      	ldr	r0, [pc, #240]	; (800921c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800912a:	f7ff fe9c 	bl	8008e66 <LL_ADC_IsEnabled>
 800912e:	4604      	mov	r4, r0
 8009130:	483b      	ldr	r0, [pc, #236]	; (8009220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009132:	f7ff fe98 	bl	8008e66 <LL_ADC_IsEnabled>
 8009136:	4603      	mov	r3, r0
 8009138:	431c      	orrs	r4, r3
 800913a:	483c      	ldr	r0, [pc, #240]	; (800922c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800913c:	f7ff fe93 	bl	8008e66 <LL_ADC_IsEnabled>
 8009140:	4603      	mov	r3, r0
 8009142:	4323      	orrs	r3, r4
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf0c      	ite	eq
 8009148:	2301      	moveq	r3, #1
 800914a:	2300      	movne	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d056      	beq.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800915a:	f023 030f 	bic.w	r3, r3, #15
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	6811      	ldr	r1, [r2, #0]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	6892      	ldr	r2, [r2, #8]
 8009166:	430a      	orrs	r2, r1
 8009168:	431a      	orrs	r2, r3
 800916a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800916c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800916e:	e047      	b.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800917a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009184:	d004      	beq.n	8009190 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a23      	ldr	r2, [pc, #140]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10f      	bne.n	80091b0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8009190:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009194:	f7ff fe67 	bl	8008e66 <LL_ADC_IsEnabled>
 8009198:	4604      	mov	r4, r0
 800919a:	481f      	ldr	r0, [pc, #124]	; (8009218 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800919c:	f7ff fe63 	bl	8008e66 <LL_ADC_IsEnabled>
 80091a0:	4603      	mov	r3, r0
 80091a2:	4323      	orrs	r3, r4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf0c      	ite	eq
 80091a8:	2301      	moveq	r3, #1
 80091aa:	2300      	movne	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e012      	b.n	80091d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80091b0:	481a      	ldr	r0, [pc, #104]	; (800921c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80091b2:	f7ff fe58 	bl	8008e66 <LL_ADC_IsEnabled>
 80091b6:	4604      	mov	r4, r0
 80091b8:	4819      	ldr	r0, [pc, #100]	; (8009220 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80091ba:	f7ff fe54 	bl	8008e66 <LL_ADC_IsEnabled>
 80091be:	4603      	mov	r3, r0
 80091c0:	431c      	orrs	r4, r3
 80091c2:	481a      	ldr	r0, [pc, #104]	; (800922c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80091c4:	f7ff fe4f 	bl	8008e66 <LL_ADC_IsEnabled>
 80091c8:	4603      	mov	r3, r0
 80091ca:	4323      	orrs	r3, r4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf0c      	ite	eq
 80091d0:	2301      	moveq	r3, #1
 80091d2:	2300      	movne	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d012      	beq.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80091da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091e2:	f023 030f 	bic.w	r3, r3, #15
 80091e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80091e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091ea:	e009      	b.n	8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f0:	f043 0220 	orr.w	r2, r3, #32
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80091fe:	e000      	b.n	8009202 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009200:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800920a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800920e:	4618      	mov	r0, r3
 8009210:	3784      	adds	r7, #132	; 0x84
 8009212:	46bd      	mov	sp, r7
 8009214:	bd90      	pop	{r4, r7, pc}
 8009216:	bf00      	nop
 8009218:	50000100 	.word	0x50000100
 800921c:	50000400 	.word	0x50000400
 8009220:	50000500 	.word	0x50000500
 8009224:	50000300 	.word	0x50000300
 8009228:	50000700 	.word	0x50000700
 800922c:	50000600 	.word	0x50000600

08009230 <__NVIC_SetPriorityGrouping>:
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <__NVIC_SetPriorityGrouping+0x44>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800924c:	4013      	ands	r3, r2
 800924e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800925c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009262:	4a04      	ldr	r2, [pc, #16]	; (8009274 <__NVIC_SetPriorityGrouping+0x44>)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	60d3      	str	r3, [r2, #12]
}
 8009268:	bf00      	nop
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	e000ed00 	.word	0xe000ed00

08009278 <__NVIC_GetPriorityGrouping>:
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800927c:	4b04      	ldr	r3, [pc, #16]	; (8009290 <__NVIC_GetPriorityGrouping+0x18>)
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	f003 0307 	and.w	r3, r3, #7
}
 8009286:	4618      	mov	r0, r3
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	e000ed00 	.word	0xe000ed00

08009294 <__NVIC_EnableIRQ>:
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800929e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	db0b      	blt.n	80092be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	f003 021f 	and.w	r2, r3, #31
 80092ac:	4907      	ldr	r1, [pc, #28]	; (80092cc <__NVIC_EnableIRQ+0x38>)
 80092ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	2001      	movs	r0, #1
 80092b6:	fa00 f202 	lsl.w	r2, r0, r2
 80092ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	e000e100 	.word	0xe000e100

080092d0 <__NVIC_SetPriority>:
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	6039      	str	r1, [r7, #0]
 80092da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db0a      	blt.n	80092fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	490c      	ldr	r1, [pc, #48]	; (800931c <__NVIC_SetPriority+0x4c>)
 80092ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ee:	0112      	lsls	r2, r2, #4
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	440b      	add	r3, r1
 80092f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092f8:	e00a      	b.n	8009310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	4908      	ldr	r1, [pc, #32]	; (8009320 <__NVIC_SetPriority+0x50>)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	3b04      	subs	r3, #4
 8009308:	0112      	lsls	r2, r2, #4
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	440b      	add	r3, r1
 800930e:	761a      	strb	r2, [r3, #24]
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	e000e100 	.word	0xe000e100
 8009320:	e000ed00 	.word	0xe000ed00

08009324 <NVIC_EncodePriority>:
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	; 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f1c3 0307 	rsb	r3, r3, #7
 800933e:	2b04      	cmp	r3, #4
 8009340:	bf28      	it	cs
 8009342:	2304      	movcs	r3, #4
 8009344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	3304      	adds	r3, #4
 800934a:	2b06      	cmp	r3, #6
 800934c:	d902      	bls.n	8009354 <NVIC_EncodePriority+0x30>
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	3b03      	subs	r3, #3
 8009352:	e000      	b.n	8009356 <NVIC_EncodePriority+0x32>
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009358:	f04f 32ff 	mov.w	r2, #4294967295
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	43da      	mvns	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	401a      	ands	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800936c:	f04f 31ff 	mov.w	r1, #4294967295
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	fa01 f303 	lsl.w	r3, r1, r3
 8009376:	43d9      	mvns	r1, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800937c:	4313      	orrs	r3, r2
}
 800937e:	4618      	mov	r0, r3
 8009380:	3724      	adds	r7, #36	; 0x24
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <SysTick_Config>:
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3b01      	subs	r3, #1
 8009398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800939c:	d301      	bcc.n	80093a2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800939e:	2301      	movs	r3, #1
 80093a0:	e00f      	b.n	80093c2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80093a2:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <SysTick_Config+0x40>)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80093aa:	210f      	movs	r1, #15
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	f7ff ff8e 	bl	80092d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80093b4:	4b05      	ldr	r3, [pc, #20]	; (80093cc <SysTick_Config+0x40>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80093ba:	4b04      	ldr	r3, [pc, #16]	; (80093cc <SysTick_Config+0x40>)
 80093bc:	2207      	movs	r2, #7
 80093be:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	e000e010 	.word	0xe000e010

080093d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff ff29 	bl	8009230 <__NVIC_SetPriorityGrouping>
}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b086      	sub	sp, #24
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	4603      	mov	r3, r0
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80093f4:	f7ff ff40 	bl	8009278 <__NVIC_GetPriorityGrouping>
 80093f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	6978      	ldr	r0, [r7, #20]
 8009400:	f7ff ff90 	bl	8009324 <NVIC_EncodePriority>
 8009404:	4602      	mov	r2, r0
 8009406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff ff5f 	bl	80092d0 <__NVIC_SetPriority>
}
 8009412:	bf00      	nop
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	4603      	mov	r3, r0
 8009422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff ff33 	bl	8009294 <__NVIC_EnableIRQ>
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ffa4 	bl	800938c <SysTick_Config>
 8009444:	4603      	mov	r3, r0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e014      	b.n	800948a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	791b      	ldrb	r3, [r3, #4]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7f8 f837 	bl	80014e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	795b      	ldrb	r3, [r3, #5]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_DAC_Start+0x16>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e043      	b.n	8009530 <HAL_DAC_Start+0x9e>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6819      	ldr	r1, [r3, #0]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2201      	movs	r2, #1
 80094c2:	409a      	lsls	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80094cc:	2001      	movs	r0, #1
 80094ce:	f7fd fb5b 	bl	8006b88 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10f      	bne.n	80094f8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d11d      	bne.n	8009522 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0201 	orr.w	r2, r2, #1
 80094f4:	605a      	str	r2, [r3, #4]
 80094f6:	e014      	b.n	8009522 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2102      	movs	r1, #2
 800950a:	fa01 f303 	lsl.w	r3, r1, r3
 800950e:	429a      	cmp	r2, r3
 8009510:	d107      	bne.n	8009522 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0202 	orr.w	r2, r2, #2
 8009520:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	795b      	ldrb	r3, [r3, #5]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_DAC_Start_DMA+0x1e>
 8009552:	2302      	movs	r3, #2
 8009554:	e0ae      	b.n	80096b4 <HAL_DAC_Start_DMA+0x17c>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2202      	movs	r2, #2
 8009560:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d12f      	bne.n	80095c8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	4a53      	ldr	r2, [pc, #332]	; (80096bc <HAL_DAC_Start_DMA+0x184>)
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	4a52      	ldr	r2, [pc, #328]	; (80096c0 <HAL_DAC_Start_DMA+0x188>)
 8009576:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	4a51      	ldr	r2, [pc, #324]	; (80096c4 <HAL_DAC_Start_DMA+0x18c>)
 800957e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800958e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	2b08      	cmp	r3, #8
 8009594:	d013      	beq.n	80095be <HAL_DAC_Start_DMA+0x86>
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	2b08      	cmp	r3, #8
 800959a:	d845      	bhi.n	8009628 <HAL_DAC_Start_DMA+0xf0>
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <HAL_DAC_Start_DMA+0x72>
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	d005      	beq.n	80095b4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80095a8:	e03e      	b.n	8009628 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	613b      	str	r3, [r7, #16]
        break;
 80095b2:	e03c      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	330c      	adds	r3, #12
 80095ba:	613b      	str	r3, [r7, #16]
        break;
 80095bc:	e037      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3310      	adds	r3, #16
 80095c4:	613b      	str	r3, [r7, #16]
        break;
 80095c6:	e032      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	4a3e      	ldr	r2, [pc, #248]	; (80096c8 <HAL_DAC_Start_DMA+0x190>)
 80095ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	4a3d      	ldr	r2, [pc, #244]	; (80096cc <HAL_DAC_Start_DMA+0x194>)
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	4a3c      	ldr	r2, [pc, #240]	; (80096d0 <HAL_DAC_Start_DMA+0x198>)
 80095de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80095ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d013      	beq.n	800961e <HAL_DAC_Start_DMA+0xe6>
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d817      	bhi.n	800962c <HAL_DAC_Start_DMA+0xf4>
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_DAC_Start_DMA+0xd2>
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	2b04      	cmp	r3, #4
 8009606:	d005      	beq.n	8009614 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009608:	e010      	b.n	800962c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3314      	adds	r3, #20
 8009610:	613b      	str	r3, [r7, #16]
        break;
 8009612:	e00c      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3318      	adds	r3, #24
 800961a:	613b      	str	r3, [r7, #16]
        break;
 800961c:	e007      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	331c      	adds	r3, #28
 8009624:	613b      	str	r3, [r7, #16]
        break;
 8009626:	e002      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
        break;
 8009628:	bf00      	nop
 800962a:	e000      	b.n	800962e <HAL_DAC_Start_DMA+0xf6>
        break;
 800962c:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d111      	bne.n	8009658 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009642:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6898      	ldr	r0, [r3, #8]
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	f000 fb61 	bl	8009d14 <HAL_DMA_Start_IT>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]
 8009656:	e010      	b.n	800967a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009666:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68d8      	ldr	r0, [r3, #12]
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	f000 fb4f 	bl	8009d14 <HAL_DMA_Start_IT>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10f      	bne.n	80096a6 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6819      	ldr	r1, [r3, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f003 0310 	and.w	r3, r3, #16
 8009692:	2201      	movs	r2, #1
 8009694:	409a      	lsls	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800969e:	2001      	movs	r0, #1
 80096a0:	f7fd fa72 	bl	8006b88 <HAL_Delay>
 80096a4:	e005      	b.n	80096b2 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	f043 0204 	orr.w	r2, r3, #4
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	08009ab1 	.word	0x08009ab1
 80096c0:	08009ad3 	.word	0x08009ad3
 80096c4:	08009aef 	.word	0x08009aef
 80096c8:	08009b59 	.word	0x08009b59
 80096cc:	08009b7b 	.word	0x08009b7b
 80096d0:	08009b97 	.word	0x08009b97

080096d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d105      	bne.n	8009704 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	3308      	adds	r3, #8
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	e004      	b.n	800970e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4413      	add	r3, r2
 800970a:	3314      	adds	r3, #20
 800970c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	461a      	mov	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08a      	sub	sp, #40	; 0x28
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	795b      	ldrb	r3, [r3, #5]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d101      	bne.n	8009778 <HAL_DAC_ConfigChannel+0x18>
 8009774:	2302      	movs	r3, #2
 8009776:	e192      	b.n	8009a9e <HAL_DAC_ConfigChannel+0x33e>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2202      	movs	r2, #2
 8009782:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2b04      	cmp	r3, #4
 800978a:	d174      	bne.n	8009876 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800978c:	f7fd f9f0 	bl	8006b70 <HAL_GetTick>
 8009790:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d134      	bne.n	8009802 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009798:	e011      	b.n	80097be <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800979a:	f7fd f9e9 	bl	8006b70 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d90a      	bls.n	80097be <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	f043 0208 	orr.w	r2, r3, #8
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2203      	movs	r2, #3
 80097b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e16f      	b.n	8009a9e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e6      	bne.n	800979a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80097cc:	2001      	movs	r0, #1
 80097ce:	f7fd f9db 	bl	8006b88 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097da:	641a      	str	r2, [r3, #64]	; 0x40
 80097dc:	e01e      	b.n	800981c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80097de:	f7fd f9c7 	bl	8006b70 <HAL_GetTick>
 80097e2:	4602      	mov	r2, r0
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d90a      	bls.n	8009802 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	f043 0208 	orr.w	r2, r3, #8
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2203      	movs	r2, #3
 80097fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e14d      	b.n	8009a9e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009808:	2b00      	cmp	r3, #0
 800980a:	dbe8      	blt.n	80097de <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800980c:	2001      	movs	r0, #1
 800980e:	f7fd f9bb 	bl	8006b88 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800981a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800982c:	fa01 f303 	lsl.w	r3, r1, r3
 8009830:	43db      	mvns	r3, r3
 8009832:	ea02 0103 	and.w	r1, r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f003 0310 	and.w	r3, r3, #16
 8009840:	409a      	lsls	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	21ff      	movs	r1, #255	; 0xff
 8009858:	fa01 f303 	lsl.w	r3, r1, r3
 800985c:	43db      	mvns	r3, r3
 800985e:	ea02 0103 	and.w	r1, r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	409a      	lsls	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d11d      	bne.n	80098ba <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f003 0310 	and.w	r3, r3, #16
 800988c:	221f      	movs	r2, #31
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	43db      	mvns	r3, r3
 8009894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009896:	4013      	ands	r3, r2
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ae:	4313      	orrs	r3, r2
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f003 0310 	and.w	r3, r3, #16
 80098c8:	2207      	movs	r2, #7
 80098ca:	fa02 f303 	lsl.w	r3, r2, r3
 80098ce:	43db      	mvns	r3, r3
 80098d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d2:	4013      	ands	r3, r2
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d102      	bne.n	80098e4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80098de:	2300      	movs	r3, #0
 80098e0:	623b      	str	r3, [r7, #32]
 80098e2:	e00f      	b.n	8009904 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d102      	bne.n	80098f2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80098ec:	2301      	movs	r3, #1
 80098ee:	623b      	str	r3, [r7, #32]
 80098f0:	e008      	b.n	8009904 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80098fa:	2301      	movs	r3, #1
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	e001      	b.n	8009904 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009900:	2300      	movs	r3, #0
 8009902:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	6a3a      	ldr	r2, [r7, #32]
 8009910:	4313      	orrs	r3, r2
 8009912:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	43db      	mvns	r3, r3
 8009924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009926:	4013      	ands	r3, r2
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d102      	bne.n	8009938 <HAL_DAC_ConfigChannel+0x1d8>
 8009932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009936:	e000      	b.n	800993a <HAL_DAC_ConfigChannel+0x1da>
 8009938:	2300      	movs	r3, #0
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	4313      	orrs	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f003 0310 	and.w	r3, r3, #16
 8009946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800994a:	fa02 f303 	lsl.w	r3, r2, r3
 800994e:	43db      	mvns	r3, r3
 8009950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009952:	4013      	ands	r3, r2
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	795b      	ldrb	r3, [r3, #5]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d102      	bne.n	8009964 <HAL_DAC_ConfigChannel+0x204>
 800995e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009962:	e000      	b.n	8009966 <HAL_DAC_ConfigChannel+0x206>
 8009964:	2300      	movs	r3, #0
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	4313      	orrs	r3, r2
 800996a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d114      	bne.n	80099a6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800997c:	f001 ff34 	bl	800b7e8 <HAL_RCC_GetHCLKFreq>
 8009980:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	4a48      	ldr	r2, [pc, #288]	; (8009aa8 <HAL_DAC_ConfigChannel+0x348>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d904      	bls.n	8009994 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
 8009992:	e00f      	b.n	80099b4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4a45      	ldr	r2, [pc, #276]	; (8009aac <HAL_DAC_ConfigChannel+0x34c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d90a      	bls.n	80099b2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099a2:	627b      	str	r3, [r7, #36]	; 0x24
 80099a4:	e006      	b.n	80099b4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ac:	4313      	orrs	r3, r2
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
 80099b0:	e000      	b.n	80099b4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80099b2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f003 0310 	and.w	r3, r3, #16
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	4313      	orrs	r3, r2
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f003 0310 	and.w	r3, r3, #16
 80099da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099de:	fa02 f303 	lsl.w	r3, r2, r3
 80099e2:	43da      	mvns	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	400a      	ands	r2, r1
 80099ea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80099fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009a02:	43db      	mvns	r3, r3
 8009a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a06:	4013      	ands	r3, r2
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	22c0      	movs	r2, #192	; 0xc0
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	43da      	mvns	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	400a      	ands	r2, r1
 8009a44:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	089b      	lsrs	r3, r3, #2
 8009a4c:	f003 030f 	and.w	r3, r3, #15
 8009a50:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	089b      	lsrs	r3, r3, #2
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f003 0310 	and.w	r3, r3, #16
 8009a70:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009a74:	fa01 f303 	lsl.w	r3, r1, r3
 8009a78:	43db      	mvns	r3, r3
 8009a7a:	ea02 0103 	and.w	r1, r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	409a      	lsls	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2201      	movs	r2, #1
 8009a94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	09896800 	.word	0x09896800
 8009aac:	04c4b400 	.word	0x04c4b400

08009ab0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fe30 	bl	8009724 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	711a      	strb	r2, [r3, #4]
}
 8009aca:	bf00      	nop
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ade:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f7ff fe29 	bl	8009738 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f043 0204 	orr.w	r2, r3, #4
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f7ff fe1f 	bl	800974c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	711a      	strb	r2, [r3, #4]
}
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff ffd8 	bl	8009b1c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	711a      	strb	r2, [r3, #4]
}
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff ffd1 	bl	8009b30 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f043 0204 	orr.w	r2, r3, #4
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7ff ffc7 	bl	8009b44 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	711a      	strb	r2, [r3, #4]
}
 8009bbc:	bf00      	nop
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e08d      	b.n	8009cf2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	4b47      	ldr	r3, [pc, #284]	; (8009cfc <HAL_DMA_Init+0x138>)
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d80f      	bhi.n	8009c02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	4b45      	ldr	r3, [pc, #276]	; (8009d00 <HAL_DMA_Init+0x13c>)
 8009bea:	4413      	add	r3, r2
 8009bec:	4a45      	ldr	r2, [pc, #276]	; (8009d04 <HAL_DMA_Init+0x140>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	091b      	lsrs	r3, r3, #4
 8009bf4:	009a      	lsls	r2, r3, #2
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a42      	ldr	r2, [pc, #264]	; (8009d08 <HAL_DMA_Init+0x144>)
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8009c00:	e00e      	b.n	8009c20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	4b40      	ldr	r3, [pc, #256]	; (8009d0c <HAL_DMA_Init+0x148>)
 8009c0a:	4413      	add	r3, r2
 8009c0c:	4a3d      	ldr	r2, [pc, #244]	; (8009d04 <HAL_DMA_Init+0x140>)
 8009c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c12:	091b      	lsrs	r3, r3, #4
 8009c14:	009a      	lsls	r2, r3, #2
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a3c      	ldr	r2, [pc, #240]	; (8009d10 <HAL_DMA_Init+0x14c>)
 8009c1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa76 	bl	800a164 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c80:	d102      	bne.n	8009c88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c90:	b2d2      	uxtb	r2, r2
 8009c92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d010      	beq.n	8009cc8 <HAL_DMA_Init+0x104>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d80c      	bhi.n	8009cc8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa96 	bl	800a1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	e008      	b.n	8009cda <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40020407 	.word	0x40020407
 8009d00:	bffdfff8 	.word	0xbffdfff8
 8009d04:	cccccccd 	.word	0xcccccccd
 8009d08:	40020000 	.word	0x40020000
 8009d0c:	bffdfbf8 	.word	0xbffdfbf8
 8009d10:	40020400 	.word	0x40020400

08009d14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d101      	bne.n	8009d34 <HAL_DMA_Start_IT+0x20>
 8009d30:	2302      	movs	r3, #2
 8009d32:	e066      	b.n	8009e02 <HAL_DMA_Start_IT+0xee>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d155      	bne.n	8009df4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0201 	bic.w	r2, r2, #1
 8009d64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f9bb 	bl	800a0e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d008      	beq.n	8009d8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f042 020e 	orr.w	r2, r2, #14
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	e00f      	b.n	8009dac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0204 	bic.w	r2, r2, #4
 8009d9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 020a 	orr.w	r2, r2, #10
 8009daa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009de0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f042 0201 	orr.w	r2, r2, #1
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	e005      	b.n	8009e00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d005      	beq.n	8009e2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2204      	movs	r2, #4
 8009e26:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
 8009e2c:	e037      	b.n	8009e9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 020e 	bic.w	r2, r2, #14
 8009e3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0201 	bic.w	r2, r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e62:	f003 021f 	and.w	r2, r3, #31
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8009e70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00c      	beq.n	8009e9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d00d      	beq.n	8009ef0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
 8009eee:	e047      	b.n	8009f80 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 020e 	bic.w	r2, r2, #14
 8009efe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f022 0201 	bic.w	r2, r2, #1
 8009f0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f24:	f003 021f 	and.w	r2, r3, #31
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8009f32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009f3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00c      	beq.n	8009f60 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009f5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	4798      	blx	r3
    }
  }
  return status;
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2204      	movs	r2, #4
 8009fac:	409a      	lsls	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d026      	beq.n	800a004 <HAL_DMA_IRQHandler+0x7a>
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f003 0304 	and.w	r3, r3, #4
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d021      	beq.n	800a004 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d107      	bne.n	8009fde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0204 	bic.w	r2, r2, #4
 8009fdc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe2:	f003 021f 	and.w	r2, r3, #31
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	2104      	movs	r1, #4
 8009fec:	fa01 f202 	lsl.w	r2, r1, r2
 8009ff0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d071      	beq.n	800a0de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a002:	e06c      	b.n	800a0de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a008:	f003 031f 	and.w	r3, r3, #31
 800a00c:	2202      	movs	r2, #2
 800a00e:	409a      	lsls	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4013      	ands	r3, r2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02e      	beq.n	800a076 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d029      	beq.n	800a076 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10b      	bne.n	800a048 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 020a 	bic.w	r2, r2, #10
 800a03e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04c:	f003 021f 	and.w	r2, r3, #31
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a054:	2102      	movs	r1, #2
 800a056:	fa01 f202 	lsl.w	r2, r1, r2
 800a05a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d038      	beq.n	800a0de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a074:	e033      	b.n	800a0de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	2208      	movs	r2, #8
 800a080:	409a      	lsls	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4013      	ands	r3, r2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d02a      	beq.n	800a0e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d025      	beq.n	800a0e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f022 020e 	bic.w	r2, r2, #14
 800a0a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a8:	f003 021f 	and.w	r2, r3, #31
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	fa01 f202 	lsl.w	r2, r1, r2
 800a0b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d004      	beq.n	800a0e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
}
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a0fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a110:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a116:	f003 021f 	and.w	r2, r3, #31
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	2101      	movs	r1, #1
 800a120:	fa01 f202 	lsl.w	r2, r1, r2
 800a124:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2b10      	cmp	r3, #16
 800a134:	d108      	bne.n	800a148 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a146:	e007      	b.n	800a158 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	60da      	str	r2, [r3, #12]
}
 800a158:	bf00      	nop
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	4b16      	ldr	r3, [pc, #88]	; (800a1cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a174:	429a      	cmp	r2, r3
 800a176:	d802      	bhi.n	800a17e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	e001      	b.n	800a182 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a17e:	4b15      	ldr	r3, [pc, #84]	; (800a1d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a180:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	3b08      	subs	r3, #8
 800a18e:	4a12      	ldr	r2, [pc, #72]	; (800a1d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a190:	fba2 2303 	umull	r2, r3, r2, r3
 800a194:	091b      	lsrs	r3, r3, #4
 800a196:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19c:	089b      	lsrs	r3, r3, #2
 800a19e:	009a      	lsls	r2, r3, #2
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a0b      	ldr	r2, [pc, #44]	; (800a1dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a1ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f003 031f 	and.w	r3, r3, #31
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	409a      	lsls	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a1be:	bf00      	nop
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	40020407 	.word	0x40020407
 800a1d0:	40020800 	.word	0x40020800
 800a1d4:	40020820 	.word	0x40020820
 800a1d8:	cccccccd 	.word	0xcccccccd
 800a1dc:	40020880 	.word	0x40020880

0800a1e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a08      	ldr	r2, [pc, #32]	; (800a224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a202:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3b01      	subs	r3, #1
 800a208:	f003 031f 	and.w	r3, r3, #31
 800a20c:	2201      	movs	r2, #1
 800a20e:	409a      	lsls	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a214:	bf00      	nop
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	1000823f 	.word	0x1000823f
 800a224:	40020940 	.word	0x40020940

0800a228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a228:	b480      	push	{r7}
 800a22a:	b087      	sub	sp, #28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a236:	e15a      	b.n	800a4ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	2101      	movs	r1, #1
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	fa01 f303 	lsl.w	r3, r1, r3
 800a244:	4013      	ands	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 814c 	beq.w	800a4e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f003 0303 	and.w	r3, r3, #3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d005      	beq.n	800a268 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a264:	2b02      	cmp	r3, #2
 800a266:	d130      	bne.n	800a2ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	2203      	movs	r2, #3
 800a274:	fa02 f303 	lsl.w	r3, r2, r3
 800a278:	43db      	mvns	r3, r3
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	4013      	ands	r3, r2
 800a27e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	fa02 f303 	lsl.w	r3, r2, r3
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4313      	orrs	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a29e:	2201      	movs	r2, #1
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a6:	43db      	mvns	r3, r3
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	091b      	lsrs	r3, r3, #4
 800a2b4:	f003 0201 	and.w	r2, r3, #1
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d017      	beq.n	800a306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e6:	43db      	mvns	r3, r3
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d123      	bne.n	800a35a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	08da      	lsrs	r2, r3, #3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3208      	adds	r2, #8
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	220f      	movs	r2, #15
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	43db      	mvns	r3, r3
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4013      	ands	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	08da      	lsrs	r2, r3, #3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	3208      	adds	r2, #8
 800a354:	6939      	ldr	r1, [r7, #16]
 800a356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	2203      	movs	r2, #3
 800a366:	fa02 f303 	lsl.w	r3, r2, r3
 800a36a:	43db      	mvns	r3, r3
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4013      	ands	r3, r2
 800a370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f003 0203 	and.w	r2, r3, #3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4313      	orrs	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80a6 	beq.w	800a4e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a39c:	4b5b      	ldr	r3, [pc, #364]	; (800a50c <HAL_GPIO_Init+0x2e4>)
 800a39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3a0:	4a5a      	ldr	r2, [pc, #360]	; (800a50c <HAL_GPIO_Init+0x2e4>)
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	6613      	str	r3, [r2, #96]	; 0x60
 800a3a8:	4b58      	ldr	r3, [pc, #352]	; (800a50c <HAL_GPIO_Init+0x2e4>)
 800a3aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	60bb      	str	r3, [r7, #8]
 800a3b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a3b4:	4a56      	ldr	r2, [pc, #344]	; (800a510 <HAL_GPIO_Init+0x2e8>)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	089b      	lsrs	r3, r3, #2
 800a3ba:	3302      	adds	r3, #2
 800a3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f003 0303 	and.w	r3, r3, #3
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	220f      	movs	r2, #15
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a3de:	d01f      	beq.n	800a420 <HAL_GPIO_Init+0x1f8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a4c      	ldr	r2, [pc, #304]	; (800a514 <HAL_GPIO_Init+0x2ec>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d019      	beq.n	800a41c <HAL_GPIO_Init+0x1f4>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a4b      	ldr	r2, [pc, #300]	; (800a518 <HAL_GPIO_Init+0x2f0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d013      	beq.n	800a418 <HAL_GPIO_Init+0x1f0>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a4a      	ldr	r2, [pc, #296]	; (800a51c <HAL_GPIO_Init+0x2f4>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d00d      	beq.n	800a414 <HAL_GPIO_Init+0x1ec>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a49      	ldr	r2, [pc, #292]	; (800a520 <HAL_GPIO_Init+0x2f8>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d007      	beq.n	800a410 <HAL_GPIO_Init+0x1e8>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a48      	ldr	r2, [pc, #288]	; (800a524 <HAL_GPIO_Init+0x2fc>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d101      	bne.n	800a40c <HAL_GPIO_Init+0x1e4>
 800a408:	2305      	movs	r3, #5
 800a40a:	e00a      	b.n	800a422 <HAL_GPIO_Init+0x1fa>
 800a40c:	2306      	movs	r3, #6
 800a40e:	e008      	b.n	800a422 <HAL_GPIO_Init+0x1fa>
 800a410:	2304      	movs	r3, #4
 800a412:	e006      	b.n	800a422 <HAL_GPIO_Init+0x1fa>
 800a414:	2303      	movs	r3, #3
 800a416:	e004      	b.n	800a422 <HAL_GPIO_Init+0x1fa>
 800a418:	2302      	movs	r3, #2
 800a41a:	e002      	b.n	800a422 <HAL_GPIO_Init+0x1fa>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <HAL_GPIO_Init+0x1fa>
 800a420:	2300      	movs	r3, #0
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	f002 0203 	and.w	r2, r2, #3
 800a428:	0092      	lsls	r2, r2, #2
 800a42a:	4093      	lsls	r3, r2
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a432:	4937      	ldr	r1, [pc, #220]	; (800a510 <HAL_GPIO_Init+0x2e8>)
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	089b      	lsrs	r3, r3, #2
 800a438:	3302      	adds	r3, #2
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a440:	4b39      	ldr	r3, [pc, #228]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	43db      	mvns	r3, r3
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4013      	ands	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4313      	orrs	r3, r2
 800a462:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a464:	4a30      	ldr	r2, [pc, #192]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a46a:	4b2f      	ldr	r3, [pc, #188]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	43db      	mvns	r3, r3
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4013      	ands	r3, r2
 800a478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a48e:	4a26      	ldr	r2, [pc, #152]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a494:	4b24      	ldr	r3, [pc, #144]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	43db      	mvns	r3, r3
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a4b8:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a4be:	4b1a      	ldr	r3, [pc, #104]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	43db      	mvns	r3, r3
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a4e2:	4a11      	ldr	r2, [pc, #68]	; (800a528 <HAL_GPIO_Init+0x300>)
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f47f ae9d 	bne.w	800a238 <HAL_GPIO_Init+0x10>
  }
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	40021000 	.word	0x40021000
 800a510:	40010000 	.word	0x40010000
 800a514:	48000400 	.word	0x48000400
 800a518:	48000800 	.word	0x48000800
 800a51c:	48000c00 	.word	0x48000c00
 800a520:	48001000 	.word	0x48001000
 800a524:	48001400 	.word	0x48001400
 800a528:	40010400 	.word	0x40010400

0800a52c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	807b      	strh	r3, [r7, #2]
 800a538:	4613      	mov	r3, r2
 800a53a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a53c:	787b      	ldrb	r3, [r7, #1]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a542:	887a      	ldrh	r2, [r7, #2]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a548:	e002      	b.n	800a550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a54a:	887a      	ldrh	r2, [r7, #2]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e0bb      	b.n	800a6ea <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b05      	cmp	r3, #5
 800a57c:	d101      	bne.n	800a582 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e0b3      	b.n	800a6ea <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d101      	bne.n	800a592 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e0ab      	b.n	800a6ea <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a592:	4b58      	ldr	r3, [pc, #352]	; (800a6f4 <HAL_OPAMP_Init+0x198>)
 800a594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a596:	4a57      	ldr	r2, [pc, #348]	; (800a6f4 <HAL_OPAMP_Init+0x198>)
 800a598:	f043 0301 	orr.w	r3, r3, #1
 800a59c:	6613      	str	r3, [r2, #96]	; 0x60
 800a59e:	4b55      	ldr	r3, [pc, #340]	; (800a6f4 <HAL_OPAMP_Init+0x198>)
 800a5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	60bb      	str	r3, [r7, #8]
 800a5a8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d103      	bne.n	800a5be <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7fa fc94 	bl	8004eec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	2b40      	cmp	r3, #64	; 0x40
 800a5ca:	d003      	beq.n	800a5d4 <HAL_OPAMP_Init+0x78>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	2b60      	cmp	r3, #96	; 0x60
 800a5d2:	d133      	bne.n	800a63c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f023 0110 	bic.w	r1, r3, #16
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	4b41      	ldr	r3, [pc, #260]	; (800a6f8 <HAL_OPAMP_Init+0x19c>)
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	6851      	ldr	r1, [r2, #4]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	6892      	ldr	r2, [r2, #8]
 800a5fc:	4311      	orrs	r1, r2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6912      	ldr	r2, [r2, #16]
 800a602:	430a      	orrs	r2, r1
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	7d09      	ldrb	r1, [r1, #20]
 800a608:	2901      	cmp	r1, #1
 800a60a:	d102      	bne.n	800a612 <HAL_OPAMP_Init+0xb6>
 800a60c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a610:	e000      	b.n	800a614 <HAL_OPAMP_Init+0xb8>
 800a612:	2100      	movs	r1, #0
 800a614:	4311      	orrs	r1, r2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a61a:	4311      	orrs	r1, r2
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a620:	4311      	orrs	r1, r2
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a626:	04d2      	lsls	r2, r2, #19
 800a628:	4311      	orrs	r1, r2
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a62e:	0612      	lsls	r2, r2, #24
 800a630:	4311      	orrs	r1, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	430b      	orrs	r3, r1
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	e035      	b.n	800a6a8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f023 0110 	bic.w	r1, r3, #16
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	4b27      	ldr	r3, [pc, #156]	; (800a6f8 <HAL_OPAMP_Init+0x19c>)
 800a65a:	4013      	ands	r3, r2
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6851      	ldr	r1, [r2, #4]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6892      	ldr	r2, [r2, #8]
 800a664:	4311      	orrs	r1, r2
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	68d2      	ldr	r2, [r2, #12]
 800a66a:	4311      	orrs	r1, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	6912      	ldr	r2, [r2, #16]
 800a670:	430a      	orrs	r2, r1
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	7d09      	ldrb	r1, [r1, #20]
 800a676:	2901      	cmp	r1, #1
 800a678:	d102      	bne.n	800a680 <HAL_OPAMP_Init+0x124>
 800a67a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a67e:	e000      	b.n	800a682 <HAL_OPAMP_Init+0x126>
 800a680:	2100      	movs	r1, #0
 800a682:	4311      	orrs	r1, r2
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a688:	4311      	orrs	r1, r2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a68e:	4311      	orrs	r1, r2
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a694:	04d2      	lsls	r2, r2, #19
 800a696:	4311      	orrs	r1, r2
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a69c:	0612      	lsls	r2, r2, #24
 800a69e:	4311      	orrs	r1, r2
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6812      	ldr	r2, [r2, #0]
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	db10      	blt.n	800a6d4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	699a      	ldr	r2, [r3, #24]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d103      	bne.n	800a6e8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	40021000 	.word	0x40021000
 800a6f8:	e0003e11 	.word	0xe0003e11

0800a6fc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	73fb      	strb	r3, [r7, #15]
 800a712:	e01d      	b.n	800a750 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b05      	cmp	r3, #5
 800a71e:	d102      	bne.n	800a726 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	73fb      	strb	r3, [r7, #15]
 800a724:	e014      	b.n	800a750 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d10c      	bne.n	800a74c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f042 0201 	orr.w	r2, r2, #1
 800a740:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2204      	movs	r2, #4
 800a746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a74a:	e001      	b.n	800a750 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
	...

0800a760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d141      	bne.n	800a7f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a76e:	4b4b      	ldr	r3, [pc, #300]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a77a:	d131      	bne.n	800a7e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a77c:	4b47      	ldr	r3, [pc, #284]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a782:	4a46      	ldr	r2, [pc, #280]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a78c:	4b43      	ldr	r3, [pc, #268]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a794:	4a41      	ldr	r2, [pc, #260]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a79a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a79c:	4b40      	ldr	r3, [pc, #256]	; (800a8a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2232      	movs	r2, #50	; 0x32
 800a7a2:	fb02 f303 	mul.w	r3, r2, r3
 800a7a6:	4a3f      	ldr	r2, [pc, #252]	; (800a8a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a7a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ac:	0c9b      	lsrs	r3, r3, #18
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7b2:	e002      	b.n	800a7ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7ba:	4b38      	ldr	r3, [pc, #224]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c6:	d102      	bne.n	800a7ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1f2      	bne.n	800a7b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a7ce:	4b33      	ldr	r3, [pc, #204]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7da:	d158      	bne.n	800a88e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e057      	b.n	800a890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7e0:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e6:	4a2d      	ldr	r2, [pc, #180]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a7f0:	e04d      	b.n	800a88e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f8:	d141      	bne.n	800a87e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7fa:	4b28      	ldr	r3, [pc, #160]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a806:	d131      	bne.n	800a86c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a808:	4b24      	ldr	r3, [pc, #144]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a80a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a80e:	4a23      	ldr	r2, [pc, #140]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a818:	4b20      	ldr	r3, [pc, #128]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a820:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a828:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2232      	movs	r2, #50	; 0x32
 800a82e:	fb02 f303 	mul.w	r3, r2, r3
 800a832:	4a1c      	ldr	r2, [pc, #112]	; (800a8a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a834:	fba2 2303 	umull	r2, r3, r2, r3
 800a838:	0c9b      	lsrs	r3, r3, #18
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a83e:	e002      	b.n	800a846 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3b01      	subs	r3, #1
 800a844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a846:	4b15      	ldr	r3, [pc, #84]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a84e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a852:	d102      	bne.n	800a85a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f2      	bne.n	800a840 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a85a:	4b10      	ldr	r3, [pc, #64]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a866:	d112      	bne.n	800a88e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e011      	b.n	800a890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a86c:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a872:	4a0a      	ldr	r2, [pc, #40]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a87c:	e007      	b.n	800a88e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a87e:	4b07      	ldr	r3, [pc, #28]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a886:	4a05      	ldr	r2, [pc, #20]	; (800a89c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a88c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	40007000 	.word	0x40007000
 800a8a0:	20000018 	.word	0x20000018
 800a8a4:	431bde83 	.word	0x431bde83

0800a8a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a8b0:	f7fc f95e 	bl	8006b70 <HAL_GetTick>
 800a8b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e069      	b.n	800a994 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10b      	bne.n	800a8e4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7fa fc05 	bl	80050e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a8da:	f241 3188 	movw	r1, #5000	; 0x1388
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa54 	bl	800ad8c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	021a      	lsls	r2, r3, #8
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	2120      	movs	r1, #32
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa7f 	bl	800ae0e <QSPI_WaitFlagStateUntilTimeout>
 800a910:	4603      	mov	r3, r0
 800a912:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d137      	bne.n	800a98a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a924:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6852      	ldr	r2, [r2, #4]
 800a92c:	0611      	lsls	r1, r2, #24
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	68d2      	ldr	r2, [r2, #12]
 800a932:	4311      	orrs	r1, r2
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	69d2      	ldr	r2, [r2, #28]
 800a938:	4311      	orrs	r1, r2
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6a12      	ldr	r2, [r2, #32]
 800a93e:	4311      	orrs	r1, r2
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	430b      	orrs	r3, r1
 800a946:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <HAL_QSPI_Init+0xf4>)
 800a950:	4013      	ands	r3, r2
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6912      	ldr	r2, [r2, #16]
 800a956:	0411      	lsls	r1, r2, #16
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6952      	ldr	r2, [r2, #20]
 800a95c:	4311      	orrs	r1, r2
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6992      	ldr	r2, [r2, #24]
 800a962:	4311      	orrs	r1, r2
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6812      	ldr	r2, [r2, #0]
 800a968:	430b      	orrs	r3, r1
 800a96a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0201 	orr.w	r2, r2, #1
 800a97a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a992:	7afb      	ldrb	r3, [r7, #11]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	ffe0f8fe 	.word	0xffe0f8fe

0800a9a0 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d064      	beq.n	800aa8c <HAL_QSPI_IRQHandler+0xec>
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d05f      	beq.n	800aa8c <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3320      	adds	r3, #32
 800a9d2:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b12      	cmp	r3, #18
 800a9de:	d125      	bne.n	800aa2c <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800a9e0:	e01c      	b.n	800aa1c <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00f      	beq.n	800aa0a <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	1e5a      	subs	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa08:	e008      	b.n	800aa1c <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa18:	601a      	str	r2, [r3, #0]
          break;
 800aa1a:	e033      	b.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1db      	bne.n	800a9e2 <HAL_QSPI_IRQHandler+0x42>
 800aa2a:	e02b      	b.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b22      	cmp	r3, #34	; 0x22
 800aa36:	d125      	bne.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa38:	e01d      	b.n	800aa76 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d010      	beq.n	800aa64 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	7812      	ldrb	r2, [r2, #0]
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5c:	1e5a      	subs	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38
 800aa62:	e008      	b.n	800aa76 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa72:	601a      	str	r2, [r3, #0]
          break;
 800aa74:	e006      	b.n	800aa84 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1da      	bne.n	800aa3a <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f963 	bl	800ad50 <HAL_QSPI_FifoThresholdCallback>
 800aa8a:	e13c      	b.n	800ad06 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80b0 	beq.w	800abf8 <HAL_QSPI_IRQHandler+0x258>
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 80aa 	beq.w	800abf8 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800aaba:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b12      	cmp	r3, #18
 800aac6:	d120      	bne.n	800ab0a <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d011      	beq.n	800aafa <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f022 0204 	bic.w	r2, r2, #4
 800aae4:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f022 0201 	bic.w	r2, r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fa faa2 	bl	800504c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ab08:	e0fa      	b.n	800ad00 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b22      	cmp	r3, #34	; 0x22
 800ab14:	d143      	bne.n	800ab9e <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d012      	beq.n	800ab4a <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 0204 	bic.w	r2, r2, #4
 800ab32:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 0201 	bic.w	r2, r2, #1
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	e021      	b.n	800ab8e <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3320      	adds	r3, #32
 800ab50:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ab52:	e013      	b.n	800ab7c <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d017      	beq.n	800ab8c <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	7812      	ldrb	r2, [r2, #0]
 800ab64:	b2d2      	uxtb	r2, r2
 800ab66:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e4      	bne.n	800ab54 <HAL_QSPI_IRQHandler+0x1b4>
 800ab8a:	e000      	b.n	800ab8e <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800ab8c:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7fa fa68 	bl	800506c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ab9c:	e0b0      	b.n	800ad00 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d107      	bne.n	800abba <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f8c2 	bl	800ad3c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abb8:	e0a2      	b.n	800ad00 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b08      	cmp	r3, #8
 800abc4:	f040 809c 	bne.w	800ad00 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695a      	ldr	r2, [r3, #20]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800abd6:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d103      	bne.n	800abf0 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f89d 	bl	800ad28 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abee:	e087      	b.n	800ad00 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f88f 	bl	800ad14 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800abf6:	e083      	b.n	800ad00 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d01f      	beq.n	800ac42 <HAL_QSPI_IRQHandler+0x2a2>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d01a      	beq.n	800ac42 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2208      	movs	r2, #8
 800ac12:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800ac30:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f892 	bl	800ad64 <HAL_QSPI_StatusMatchCallback>
 800ac40:	e061      	b.n	800ad06 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d047      	beq.n	800acdc <HAL_QSPI_IRQHandler+0x33c>
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d042      	beq.n	800acdc <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800ac6c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac72:	f043 0202 	orr.w	r2, r3, #2
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d021      	beq.n	800accc <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 0204 	bic.w	r2, r2, #4
 800ac96:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9c:	4a1c      	ldr	r2, [pc, #112]	; (800ad10 <HAL_QSPI_IRQHandler+0x370>)
 800ac9e:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7ff f909 	bl	8009ebc <HAL_DMA_Abort_IT>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d029      	beq.n	800ad04 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb4:	f043 0204 	orr.w	r2, r3, #4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f825 	bl	800ad14 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800acca:	e01b      	b.n	800ad04 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f81d 	bl	800ad14 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800acda:	e013      	b.n	800ad04 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f003 0310 	and.w	r3, r3, #16
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00f      	beq.n	800ad06 <HAL_QSPI_IRQHandler+0x366>
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00a      	beq.n	800ad06 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2210      	movs	r2, #16
 800acf6:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f83d 	bl	800ad78 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800acfe:	e002      	b.n	800ad06 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800ad04:	bf00      	nop
}
 800ad06:	bf00      	nop
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	0800ada9 	.word	0x0800ada9

0800ad14 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800ad58:	bf00      	nop
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d114      	bne.n	800adf8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2202      	movs	r2, #2
 800add4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ade4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0202 	orr.w	r2, r2, #2
 800adf4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800adf6:	e006      	b.n	800ae06 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7ff ff87 	bl	800ad14 <HAL_QSPI_ErrorCallback>
}
 800ae06:	bf00      	nop
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	603b      	str	r3, [r7, #0]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae1e:	e01a      	b.n	800ae56 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae26:	d016      	beq.n	800ae56 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae28:	f7fb fea2 	bl	8006b70 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	69ba      	ldr	r2, [r7, #24]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d302      	bcc.n	800ae3e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10b      	bne.n	800ae56 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2204      	movs	r2, #4
 800ae42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4a:	f043 0201 	orr.w	r2, r3, #1
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e00e      	b.n	800ae74 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bf14      	ite	ne
 800ae64:	2301      	movne	r3, #1
 800ae66:	2300      	moveq	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d1d6      	bne.n	800ae20 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e306      	b.n	800b49c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d075      	beq.n	800af86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae9a:	4b97      	ldr	r3, [pc, #604]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	f003 030c 	and.w	r3, r3, #12
 800aea2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aea4:	4b94      	ldr	r3, [pc, #592]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	f003 0303 	and.w	r3, r3, #3
 800aeac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	2b0c      	cmp	r3, #12
 800aeb2:	d102      	bne.n	800aeba <HAL_RCC_OscConfig+0x3e>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d002      	beq.n	800aec0 <HAL_RCC_OscConfig+0x44>
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b08      	cmp	r3, #8
 800aebe:	d10b      	bne.n	800aed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aec0:	4b8d      	ldr	r3, [pc, #564]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d05b      	beq.n	800af84 <HAL_RCC_OscConfig+0x108>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d157      	bne.n	800af84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e2e1      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee0:	d106      	bne.n	800aef0 <HAL_RCC_OscConfig+0x74>
 800aee2:	4b85      	ldr	r3, [pc, #532]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a84      	ldr	r2, [pc, #528]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800aee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	e01d      	b.n	800af2c <HAL_RCC_OscConfig+0xb0>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aef8:	d10c      	bne.n	800af14 <HAL_RCC_OscConfig+0x98>
 800aefa:	4b7f      	ldr	r3, [pc, #508]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a7e      	ldr	r2, [pc, #504]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	4b7c      	ldr	r3, [pc, #496]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a7b      	ldr	r2, [pc, #492]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	e00b      	b.n	800af2c <HAL_RCC_OscConfig+0xb0>
 800af14:	4b78      	ldr	r3, [pc, #480]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a77      	ldr	r2, [pc, #476]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	4b75      	ldr	r3, [pc, #468]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a74      	ldr	r2, [pc, #464]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d013      	beq.n	800af5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af34:	f7fb fe1c 	bl	8006b70 <HAL_GetTick>
 800af38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af3a:	e008      	b.n	800af4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af3c:	f7fb fe18 	bl	8006b70 <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b64      	cmp	r3, #100	; 0x64
 800af48:	d901      	bls.n	800af4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e2a6      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af4e:	4b6a      	ldr	r3, [pc, #424]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0f0      	beq.n	800af3c <HAL_RCC_OscConfig+0xc0>
 800af5a:	e014      	b.n	800af86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af5c:	f7fb fe08 	bl	8006b70 <HAL_GetTick>
 800af60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af62:	e008      	b.n	800af76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af64:	f7fb fe04 	bl	8006b70 <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	2b64      	cmp	r3, #100	; 0x64
 800af70:	d901      	bls.n	800af76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	e292      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af76:	4b60      	ldr	r3, [pc, #384]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1f0      	bne.n	800af64 <HAL_RCC_OscConfig+0xe8>
 800af82:	e000      	b.n	800af86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d075      	beq.n	800b07e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af92:	4b59      	ldr	r3, [pc, #356]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f003 030c 	and.w	r3, r3, #12
 800af9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af9c:	4b56      	ldr	r3, [pc, #344]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b0c      	cmp	r3, #12
 800afaa:	d102      	bne.n	800afb2 <HAL_RCC_OscConfig+0x136>
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d002      	beq.n	800afb8 <HAL_RCC_OscConfig+0x13c>
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	d11f      	bne.n	800aff8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afb8:	4b4f      	ldr	r3, [pc, #316]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <HAL_RCC_OscConfig+0x154>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e265      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afd0:	4b49      	ldr	r3, [pc, #292]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	061b      	lsls	r3, r3, #24
 800afde:	4946      	ldr	r1, [pc, #280]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800afe4:	4b45      	ldr	r3, [pc, #276]	; (800b0fc <HAL_RCC_OscConfig+0x280>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fb fd75 	bl	8006ad8 <HAL_InitTick>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d043      	beq.n	800b07c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e251      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d023      	beq.n	800b048 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b000:	4b3d      	ldr	r3, [pc, #244]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a3c      	ldr	r2, [pc, #240]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b00a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b00c:	f7fb fdb0 	bl	8006b70 <HAL_GetTick>
 800b010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b012:	e008      	b.n	800b026 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b014:	f7fb fdac 	bl	8006b70 <HAL_GetTick>
 800b018:	4602      	mov	r2, r0
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d901      	bls.n	800b026 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e23a      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b026:	4b34      	ldr	r3, [pc, #208]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f0      	beq.n	800b014 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b032:	4b31      	ldr	r3, [pc, #196]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	061b      	lsls	r3, r3, #24
 800b040:	492d      	ldr	r1, [pc, #180]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b042:	4313      	orrs	r3, r2
 800b044:	604b      	str	r3, [r1, #4]
 800b046:	e01a      	b.n	800b07e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b048:	4b2b      	ldr	r3, [pc, #172]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a2a      	ldr	r2, [pc, #168]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b04e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b054:	f7fb fd8c 	bl	8006b70 <HAL_GetTick>
 800b058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b05a:	e008      	b.n	800b06e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b05c:	f7fb fd88 	bl	8006b70 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d901      	bls.n	800b06e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e216      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b06e:	4b22      	ldr	r3, [pc, #136]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f0      	bne.n	800b05c <HAL_RCC_OscConfig+0x1e0>
 800b07a:	e000      	b.n	800b07e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b07c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0308 	and.w	r3, r3, #8
 800b086:	2b00      	cmp	r3, #0
 800b088:	d041      	beq.n	800b10e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d01c      	beq.n	800b0cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b092:	4b19      	ldr	r3, [pc, #100]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b098:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b09a:	f043 0301 	orr.w	r3, r3, #1
 800b09e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0a2:	f7fb fd65 	bl	8006b70 <HAL_GetTick>
 800b0a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0a8:	e008      	b.n	800b0bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0aa:	f7fb fd61 	bl	8006b70 <HAL_GetTick>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d901      	bls.n	800b0bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e1ef      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0bc:	4b0e      	ldr	r3, [pc, #56]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b0be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0ef      	beq.n	800b0aa <HAL_RCC_OscConfig+0x22e>
 800b0ca:	e020      	b.n	800b10e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b0ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0d2:	4a09      	ldr	r2, [pc, #36]	; (800b0f8 <HAL_RCC_OscConfig+0x27c>)
 800b0d4:	f023 0301 	bic.w	r3, r3, #1
 800b0d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0dc:	f7fb fd48 	bl	8006b70 <HAL_GetTick>
 800b0e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0e2:	e00d      	b.n	800b100 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0e4:	f7fb fd44 	bl	8006b70 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d906      	bls.n	800b100 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e1d2      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
 800b0f6:	bf00      	nop
 800b0f8:	40021000 	.word	0x40021000
 800b0fc:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b100:	4b8c      	ldr	r3, [pc, #560]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b106:	f003 0302 	and.w	r3, r3, #2
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1ea      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0304 	and.w	r3, r3, #4
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 80a6 	beq.w	800b268 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b11c:	2300      	movs	r3, #0
 800b11e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b120:	4b84      	ldr	r3, [pc, #528]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <HAL_RCC_OscConfig+0x2b4>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e000      	b.n	800b132 <HAL_RCC_OscConfig+0x2b6>
 800b130:	2300      	movs	r3, #0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00d      	beq.n	800b152 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b136:	4b7f      	ldr	r3, [pc, #508]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13a:	4a7e      	ldr	r2, [pc, #504]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b13c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b140:	6593      	str	r3, [r2, #88]	; 0x58
 800b142:	4b7c      	ldr	r3, [pc, #496]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b14e:	2301      	movs	r3, #1
 800b150:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b152:	4b79      	ldr	r3, [pc, #484]	; (800b338 <HAL_RCC_OscConfig+0x4bc>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d118      	bne.n	800b190 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b15e:	4b76      	ldr	r3, [pc, #472]	; (800b338 <HAL_RCC_OscConfig+0x4bc>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a75      	ldr	r2, [pc, #468]	; (800b338 <HAL_RCC_OscConfig+0x4bc>)
 800b164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b16a:	f7fb fd01 	bl	8006b70 <HAL_GetTick>
 800b16e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b170:	e008      	b.n	800b184 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b172:	f7fb fcfd 	bl	8006b70 <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d901      	bls.n	800b184 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e18b      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b184:	4b6c      	ldr	r3, [pc, #432]	; (800b338 <HAL_RCC_OscConfig+0x4bc>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0f0      	beq.n	800b172 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d108      	bne.n	800b1aa <HAL_RCC_OscConfig+0x32e>
 800b198:	4b66      	ldr	r3, [pc, #408]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b19e:	4a65      	ldr	r2, [pc, #404]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1a0:	f043 0301 	orr.w	r3, r3, #1
 800b1a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1a8:	e024      	b.n	800b1f4 <HAL_RCC_OscConfig+0x378>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	d110      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x358>
 800b1b2:	4b60      	ldr	r3, [pc, #384]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b8:	4a5e      	ldr	r2, [pc, #376]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1ba:	f043 0304 	orr.w	r3, r3, #4
 800b1be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1c2:	4b5c      	ldr	r3, [pc, #368]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c8:	4a5a      	ldr	r2, [pc, #360]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1ca:	f043 0301 	orr.w	r3, r3, #1
 800b1ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1d2:	e00f      	b.n	800b1f4 <HAL_RCC_OscConfig+0x378>
 800b1d4:	4b57      	ldr	r3, [pc, #348]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1da:	4a56      	ldr	r2, [pc, #344]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1dc:	f023 0301 	bic.w	r3, r3, #1
 800b1e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1e4:	4b53      	ldr	r3, [pc, #332]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ea:	4a52      	ldr	r2, [pc, #328]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b1ec:	f023 0304 	bic.w	r3, r3, #4
 800b1f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d016      	beq.n	800b22a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1fc:	f7fb fcb8 	bl	8006b70 <HAL_GetTick>
 800b200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b202:	e00a      	b.n	800b21a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b204:	f7fb fcb4 	bl	8006b70 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b212:	4293      	cmp	r3, r2
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e140      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b21a:	4b46      	ldr	r3, [pc, #280]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d0ed      	beq.n	800b204 <HAL_RCC_OscConfig+0x388>
 800b228:	e015      	b.n	800b256 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b22a:	f7fb fca1 	bl	8006b70 <HAL_GetTick>
 800b22e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b230:	e00a      	b.n	800b248 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b232:	f7fb fc9d 	bl	8006b70 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b240:	4293      	cmp	r3, r2
 800b242:	d901      	bls.n	800b248 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e129      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b248:	4b3a      	ldr	r3, [pc, #232]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b24a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1ed      	bne.n	800b232 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b256:	7ffb      	ldrb	r3, [r7, #31]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d105      	bne.n	800b268 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b25c:	4b35      	ldr	r3, [pc, #212]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b260:	4a34      	ldr	r2, [pc, #208]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b266:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0320 	and.w	r3, r3, #32
 800b270:	2b00      	cmp	r3, #0
 800b272:	d03c      	beq.n	800b2ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01c      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b27c:	4b2d      	ldr	r3, [pc, #180]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b27e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b282:	4a2c      	ldr	r2, [pc, #176]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b284:	f043 0301 	orr.w	r3, r3, #1
 800b288:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b28c:	f7fb fc70 	bl	8006b70 <HAL_GetTick>
 800b290:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b294:	f7fb fc6c 	bl	8006b70 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e0fa      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2a6:	4b23      	ldr	r3, [pc, #140]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b2a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0ef      	beq.n	800b294 <HAL_RCC_OscConfig+0x418>
 800b2b4:	e01b      	b.n	800b2ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2b6:	4b1f      	ldr	r3, [pc, #124]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b2b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c6:	f7fb fc53 	bl	8006b70 <HAL_GetTick>
 800b2ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2cc:	e008      	b.n	800b2e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2ce:	f7fb fc4f 	bl	8006b70 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d901      	bls.n	800b2e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e0dd      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2e0:	4b14      	ldr	r3, [pc, #80]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b2e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1ef      	bne.n	800b2ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 80d1 	beq.w	800b49a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2f8:	4b0e      	ldr	r3, [pc, #56]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f003 030c 	and.w	r3, r3, #12
 800b300:	2b0c      	cmp	r3, #12
 800b302:	f000 808b 	beq.w	800b41c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d15e      	bne.n	800b3cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b30e:	4b09      	ldr	r3, [pc, #36]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a08      	ldr	r2, [pc, #32]	; (800b334 <HAL_RCC_OscConfig+0x4b8>)
 800b314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b31a:	f7fb fc29 	bl	8006b70 <HAL_GetTick>
 800b31e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b320:	e00c      	b.n	800b33c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b322:	f7fb fc25 	bl	8006b70 <HAL_GetTick>
 800b326:	4602      	mov	r2, r0
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d905      	bls.n	800b33c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b330:	2303      	movs	r3, #3
 800b332:	e0b3      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
 800b334:	40021000 	.word	0x40021000
 800b338:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b33c:	4b59      	ldr	r3, [pc, #356]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1ec      	bne.n	800b322 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b348:	4b56      	ldr	r3, [pc, #344]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	4b56      	ldr	r3, [pc, #344]	; (800b4a8 <HAL_RCC_OscConfig+0x62c>)
 800b34e:	4013      	ands	r3, r2
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	6a11      	ldr	r1, [r2, #32]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b358:	3a01      	subs	r2, #1
 800b35a:	0112      	lsls	r2, r2, #4
 800b35c:	4311      	orrs	r1, r2
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b362:	0212      	lsls	r2, r2, #8
 800b364:	4311      	orrs	r1, r2
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b36a:	0852      	lsrs	r2, r2, #1
 800b36c:	3a01      	subs	r2, #1
 800b36e:	0552      	lsls	r2, r2, #21
 800b370:	4311      	orrs	r1, r2
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b376:	0852      	lsrs	r2, r2, #1
 800b378:	3a01      	subs	r2, #1
 800b37a:	0652      	lsls	r2, r2, #25
 800b37c:	4311      	orrs	r1, r2
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b382:	06d2      	lsls	r2, r2, #27
 800b384:	430a      	orrs	r2, r1
 800b386:	4947      	ldr	r1, [pc, #284]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b38c:	4b45      	ldr	r3, [pc, #276]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a44      	ldr	r2, [pc, #272]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b396:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b398:	4b42      	ldr	r3, [pc, #264]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	4a41      	ldr	r2, [pc, #260]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b39e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a4:	f7fb fbe4 	bl	8006b70 <HAL_GetTick>
 800b3a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3aa:	e008      	b.n	800b3be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3ac:	f7fb fbe0 	bl	8006b70 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d901      	bls.n	800b3be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e06e      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3be:	4b39      	ldr	r3, [pc, #228]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0f0      	beq.n	800b3ac <HAL_RCC_OscConfig+0x530>
 800b3ca:	e066      	b.n	800b49a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3cc:	4b35      	ldr	r3, [pc, #212]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a34      	ldr	r2, [pc, #208]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b3d8:	4b32      	ldr	r3, [pc, #200]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	4a31      	ldr	r2, [pc, #196]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b3e4:	4b2f      	ldr	r3, [pc, #188]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	4a2e      	ldr	r2, [pc, #184]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b3ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b3ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f4:	f7fb fbbc 	bl	8006b70 <HAL_GetTick>
 800b3f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3fc:	f7fb fbb8 	bl	8006b70 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e046      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b40e:	4b25      	ldr	r3, [pc, #148]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f0      	bne.n	800b3fc <HAL_RCC_OscConfig+0x580>
 800b41a:	e03e      	b.n	800b49a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	e039      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <HAL_RCC_OscConfig+0x628>)
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f003 0203 	and.w	r2, r3, #3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a1b      	ldr	r3, [r3, #32]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d12c      	bne.n	800b496 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	3b01      	subs	r3, #1
 800b448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d123      	bne.n	800b496 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b458:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d11b      	bne.n	800b496 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b468:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d113      	bne.n	800b496 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b478:	085b      	lsrs	r3, r3, #1
 800b47a:	3b01      	subs	r3, #1
 800b47c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b47e:	429a      	cmp	r2, r3
 800b480:	d109      	bne.n	800b496 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48c:	085b      	lsrs	r3, r3, #1
 800b48e:	3b01      	subs	r3, #1
 800b490:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b492:	429a      	cmp	r2, r3
 800b494:	d001      	beq.n	800b49a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40021000 	.word	0x40021000
 800b4a8:	019f800c 	.word	0x019f800c

0800b4ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e11e      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4c4:	4b91      	ldr	r3, [pc, #580]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 030f 	and.w	r3, r3, #15
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d910      	bls.n	800b4f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4d2:	4b8e      	ldr	r3, [pc, #568]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f023 020f 	bic.w	r2, r3, #15
 800b4da:	498c      	ldr	r1, [pc, #560]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4e2:	4b8a      	ldr	r3, [pc, #552]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 030f 	and.w	r3, r3, #15
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d001      	beq.n	800b4f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e106      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d073      	beq.n	800b5e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	2b03      	cmp	r3, #3
 800b506:	d129      	bne.n	800b55c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b508:	4b81      	ldr	r3, [pc, #516]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e0f4      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b518:	f000 f972 	bl	800b800 <RCC_GetSysClockFreqFromPLLSource>
 800b51c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	4a7c      	ldr	r2, [pc, #496]	; (800b714 <HAL_RCC_ClockConfig+0x268>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d93f      	bls.n	800b5a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b526:	4b7a      	ldr	r3, [pc, #488]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d009      	beq.n	800b546 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d033      	beq.n	800b5a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b542:	2b00      	cmp	r3, #0
 800b544:	d12f      	bne.n	800b5a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b546:	4b72      	ldr	r3, [pc, #456]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b54e:	4a70      	ldr	r2, [pc, #448]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b554:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b556:	2380      	movs	r3, #128	; 0x80
 800b558:	617b      	str	r3, [r7, #20]
 800b55a:	e024      	b.n	800b5a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	2b02      	cmp	r3, #2
 800b562:	d107      	bne.n	800b574 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b564:	4b6a      	ldr	r3, [pc, #424]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e0c6      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b574:	4b66      	ldr	r3, [pc, #408]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e0be      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b584:	f000 f8ce 	bl	800b724 <HAL_RCC_GetSysClockFreq>
 800b588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	4a61      	ldr	r2, [pc, #388]	; (800b714 <HAL_RCC_ClockConfig+0x268>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d909      	bls.n	800b5a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b592:	4b5f      	ldr	r3, [pc, #380]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b59a:	4a5d      	ldr	r2, [pc, #372]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b5a2:	2380      	movs	r3, #128	; 0x80
 800b5a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b5a6:	4b5a      	ldr	r3, [pc, #360]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f023 0203 	bic.w	r2, r3, #3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	4957      	ldr	r1, [pc, #348]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5b8:	f7fb fada 	bl	8006b70 <HAL_GetTick>
 800b5bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5be:	e00a      	b.n	800b5d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5c0:	f7fb fad6 	bl	8006b70 <HAL_GetTick>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d901      	bls.n	800b5d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e095      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5d6:	4b4e      	ldr	r3, [pc, #312]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	f003 020c 	and.w	r2, r3, #12
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d1eb      	bne.n	800b5c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d023      	beq.n	800b63c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b600:	4b43      	ldr	r3, [pc, #268]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	4a42      	ldr	r2, [pc, #264]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b60a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d007      	beq.n	800b628 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b618:	4b3d      	ldr	r3, [pc, #244]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b620:	4a3b      	ldr	r2, [pc, #236]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b626:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b628:	4b39      	ldr	r3, [pc, #228]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	4936      	ldr	r1, [pc, #216]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b636:	4313      	orrs	r3, r2
 800b638:	608b      	str	r3, [r1, #8]
 800b63a:	e008      	b.n	800b64e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b80      	cmp	r3, #128	; 0x80
 800b640:	d105      	bne.n	800b64e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b642:	4b33      	ldr	r3, [pc, #204]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	4a32      	ldr	r2, [pc, #200]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b64c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b64e:	4b2f      	ldr	r3, [pc, #188]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 030f 	and.w	r3, r3, #15
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d21d      	bcs.n	800b698 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b65c:	4b2b      	ldr	r3, [pc, #172]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f023 020f 	bic.w	r2, r3, #15
 800b664:	4929      	ldr	r1, [pc, #164]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	4313      	orrs	r3, r2
 800b66a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b66c:	f7fb fa80 	bl	8006b70 <HAL_GetTick>
 800b670:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b672:	e00a      	b.n	800b68a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b674:	f7fb fa7c 	bl	8006b70 <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b682:	4293      	cmp	r3, r2
 800b684:	d901      	bls.n	800b68a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e03b      	b.n	800b702 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b68a:	4b20      	ldr	r3, [pc, #128]	; (800b70c <HAL_RCC_ClockConfig+0x260>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	429a      	cmp	r2, r3
 800b696:	d1ed      	bne.n	800b674 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d008      	beq.n	800b6b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	4917      	ldr	r1, [pc, #92]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0308 	and.w	r3, r3, #8
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d009      	beq.n	800b6d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	490f      	ldr	r1, [pc, #60]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b6d6:	f000 f825 	bl	800b724 <HAL_RCC_GetSysClockFreq>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <HAL_RCC_ClockConfig+0x264>)
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	091b      	lsrs	r3, r3, #4
 800b6e2:	f003 030f 	and.w	r3, r3, #15
 800b6e6:	490c      	ldr	r1, [pc, #48]	; (800b718 <HAL_RCC_ClockConfig+0x26c>)
 800b6e8:	5ccb      	ldrb	r3, [r1, r3]
 800b6ea:	f003 031f 	and.w	r3, r3, #31
 800b6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f2:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <HAL_RCC_ClockConfig+0x270>)
 800b6f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <HAL_RCC_ClockConfig+0x274>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fb f9ec 	bl	8006ad8 <HAL_InitTick>
 800b700:	4603      	mov	r3, r0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	40022000 	.word	0x40022000
 800b710:	40021000 	.word	0x40021000
 800b714:	04c4b400 	.word	0x04c4b400
 800b718:	080297e0 	.word	0x080297e0
 800b71c:	20000018 	.word	0x20000018
 800b720:	2000001c 	.word	0x2000001c

0800b724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b72a:	4b2c      	ldr	r3, [pc, #176]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f003 030c 	and.w	r3, r3, #12
 800b732:	2b04      	cmp	r3, #4
 800b734:	d102      	bne.n	800b73c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b736:	4b2a      	ldr	r3, [pc, #168]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b738:	613b      	str	r3, [r7, #16]
 800b73a:	e047      	b.n	800b7cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b73c:	4b27      	ldr	r3, [pc, #156]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f003 030c 	and.w	r3, r3, #12
 800b744:	2b08      	cmp	r3, #8
 800b746:	d102      	bne.n	800b74e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b748:	4b26      	ldr	r3, [pc, #152]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	e03e      	b.n	800b7cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b74e:	4b23      	ldr	r3, [pc, #140]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	f003 030c 	and.w	r3, r3, #12
 800b756:	2b0c      	cmp	r3, #12
 800b758:	d136      	bne.n	800b7c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b75a:	4b20      	ldr	r3, [pc, #128]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b764:	4b1d      	ldr	r3, [pc, #116]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	091b      	lsrs	r3, r3, #4
 800b76a:	f003 030f 	and.w	r3, r3, #15
 800b76e:	3301      	adds	r3, #1
 800b770:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b03      	cmp	r3, #3
 800b776:	d10c      	bne.n	800b792 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b778:	4a1a      	ldr	r2, [pc, #104]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b780:	4a16      	ldr	r2, [pc, #88]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b782:	68d2      	ldr	r2, [r2, #12]
 800b784:	0a12      	lsrs	r2, r2, #8
 800b786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b78a:	fb02 f303 	mul.w	r3, r2, r3
 800b78e:	617b      	str	r3, [r7, #20]
      break;
 800b790:	e00c      	b.n	800b7ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b792:	4a13      	ldr	r2, [pc, #76]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79a:	4a10      	ldr	r2, [pc, #64]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b79c:	68d2      	ldr	r2, [r2, #12]
 800b79e:	0a12      	lsrs	r2, r2, #8
 800b7a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b7a4:	fb02 f303 	mul.w	r3, r2, r3
 800b7a8:	617b      	str	r3, [r7, #20]
      break;
 800b7aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b7ac:	4b0b      	ldr	r3, [pc, #44]	; (800b7dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	0e5b      	lsrs	r3, r3, #25
 800b7b2:	f003 0303 	and.w	r3, r3, #3
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c4:	613b      	str	r3, [r7, #16]
 800b7c6:	e001      	b.n	800b7cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b7cc:	693b      	ldr	r3, [r7, #16]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	40021000 	.word	0x40021000
 800b7e0:	00f42400 	.word	0x00f42400
 800b7e4:	016e3600 	.word	0x016e3600

0800b7e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7ec:	4b03      	ldr	r3, [pc, #12]	; (800b7fc <HAL_RCC_GetHCLKFreq+0x14>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	20000018 	.word	0x20000018

0800b800 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b806:	4b1e      	ldr	r3, [pc, #120]	; (800b880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b810:	4b1b      	ldr	r3, [pc, #108]	; (800b880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	091b      	lsrs	r3, r3, #4
 800b816:	f003 030f 	and.w	r3, r3, #15
 800b81a:	3301      	adds	r3, #1
 800b81c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	2b03      	cmp	r3, #3
 800b822:	d10c      	bne.n	800b83e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b824:	4a17      	ldr	r2, [pc, #92]	; (800b884 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	4a14      	ldr	r2, [pc, #80]	; (800b880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b82e:	68d2      	ldr	r2, [r2, #12]
 800b830:	0a12      	lsrs	r2, r2, #8
 800b832:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b836:	fb02 f303 	mul.w	r3, r2, r3
 800b83a:	617b      	str	r3, [r7, #20]
    break;
 800b83c:	e00c      	b.n	800b858 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b83e:	4a12      	ldr	r2, [pc, #72]	; (800b888 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	fbb2 f3f3 	udiv	r3, r2, r3
 800b846:	4a0e      	ldr	r2, [pc, #56]	; (800b880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b848:	68d2      	ldr	r2, [r2, #12]
 800b84a:	0a12      	lsrs	r2, r2, #8
 800b84c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b850:	fb02 f303 	mul.w	r3, r2, r3
 800b854:	617b      	str	r3, [r7, #20]
    break;
 800b856:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b858:	4b09      	ldr	r3, [pc, #36]	; (800b880 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	0e5b      	lsrs	r3, r3, #25
 800b85e:	f003 0303 	and.w	r3, r3, #3
 800b862:	3301      	adds	r3, #1
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b870:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b872:	687b      	ldr	r3, [r7, #4]
}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	40021000 	.word	0x40021000
 800b884:	016e3600 	.word	0x016e3600
 800b888:	00f42400 	.word	0x00f42400

0800b88c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b894:	2300      	movs	r3, #0
 800b896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b898:	2300      	movs	r3, #0
 800b89a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f000 8098 	beq.w	800b9da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8ae:	4b43      	ldr	r3, [pc, #268]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10d      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8ba:	4b40      	ldr	r3, [pc, #256]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8be:	4a3f      	ldr	r2, [pc, #252]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8c4:	6593      	str	r3, [r2, #88]	; 0x58
 800b8c6:	4b3d      	ldr	r3, [pc, #244]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8ce:	60bb      	str	r3, [r7, #8]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8d6:	4b3a      	ldr	r3, [pc, #232]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a39      	ldr	r2, [pc, #228]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8e2:	f7fb f945 	bl	8006b70 <HAL_GetTick>
 800b8e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8e8:	e009      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8ea:	f7fb f941 	bl	8006b70 <HAL_GetTick>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d902      	bls.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	74fb      	strb	r3, [r7, #19]
        break;
 800b8fc:	e005      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8fe:	4b30      	ldr	r3, [pc, #192]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0ef      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b90a:	7cfb      	ldrb	r3, [r7, #19]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d159      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b910:	4b2a      	ldr	r3, [pc, #168]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b91a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d01e      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d019      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b92c:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b938:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b93e:	4a1f      	ldr	r2, [pc, #124]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b948:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b94e:	4a1b      	ldr	r2, [pc, #108]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b958:	4a18      	ldr	r2, [pc, #96]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	d016      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b96a:	f7fb f901 	bl	8006b70 <HAL_GetTick>
 800b96e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b970:	e00b      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b972:	f7fb f8fd 	bl	8006b70 <HAL_GetTick>
 800b976:	4602      	mov	r2, r0
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b980:	4293      	cmp	r3, r2
 800b982:	d902      	bls.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	74fb      	strb	r3, [r7, #19]
            break;
 800b988:	e006      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b98a:	4b0c      	ldr	r3, [pc, #48]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b990:	f003 0302 	and.w	r3, r3, #2
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0ec      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b998:	7cfb      	ldrb	r3, [r7, #19]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10b      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b99e:	4b07      	ldr	r3, [pc, #28]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ac:	4903      	ldr	r1, [pc, #12]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b9b4:	e008      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9b6:	7cfb      	ldrb	r3, [r7, #19]
 800b9b8:	74bb      	strb	r3, [r7, #18]
 800b9ba:	e005      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b9bc:	40021000 	.word	0x40021000
 800b9c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c4:	7cfb      	ldrb	r3, [r7, #19]
 800b9c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b9c8:	7c7b      	ldrb	r3, [r7, #17]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d105      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9ce:	4ba7      	ldr	r3, [pc, #668]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d2:	4aa6      	ldr	r2, [pc, #664]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b9e6:	4ba1      	ldr	r3, [pc, #644]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ec:	f023 0203 	bic.w	r2, r3, #3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	499d      	ldr	r1, [pc, #628]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f003 0302 	and.w	r3, r3, #2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00a      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba08:	4b98      	ldr	r3, [pc, #608]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0e:	f023 020c 	bic.w	r2, r3, #12
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	4995      	ldr	r1, [pc, #596]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0304 	and.w	r3, r3, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba2a:	4b90      	ldr	r3, [pc, #576]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	498c      	ldr	r1, [pc, #560]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ba4c:	4b87      	ldr	r3, [pc, #540]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	4984      	ldr	r1, [pc, #528]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f003 0310 	and.w	r3, r3, #16
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ba6e:	4b7f      	ldr	r3, [pc, #508]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	497b      	ldr	r1, [pc, #492]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0320 	and.w	r3, r3, #32
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00a      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba90:	4b76      	ldr	r3, [pc, #472]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	4973      	ldr	r1, [pc, #460]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00a      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bab2:	4b6e      	ldr	r3, [pc, #440]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	69db      	ldr	r3, [r3, #28]
 800bac0:	496a      	ldr	r1, [pc, #424]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bac2:	4313      	orrs	r3, r2
 800bac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00a      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bad4:	4b65      	ldr	r3, [pc, #404]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	4962      	ldr	r1, [pc, #392]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00a      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800baf6:	4b5d      	ldr	r3, [pc, #372]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bafc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	4959      	ldr	r1, [pc, #356]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00a      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb18:	4b54      	ldr	r3, [pc, #336]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb1e:	f023 0203 	bic.w	r2, r3, #3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	4951      	ldr	r1, [pc, #324]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb3a:	4b4c      	ldr	r3, [pc, #304]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4948      	ldr	r1, [pc, #288]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d015      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb5c:	4b43      	ldr	r3, [pc, #268]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6a:	4940      	ldr	r1, [pc, #256]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb7a:	d105      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb7c:	4b3b      	ldr	r3, [pc, #236]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	4a3a      	ldr	r2, [pc, #232]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d015      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bb94:	4b35      	ldr	r3, [pc, #212]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba2:	4932      	ldr	r1, [pc, #200]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbb2:	d105      	bne.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbb4:	4b2d      	ldr	r3, [pc, #180]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	4a2c      	ldr	r2, [pc, #176]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d015      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bbcc:	4b27      	ldr	r3, [pc, #156]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	4924      	ldr	r1, [pc, #144]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbea:	d105      	bne.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbec:	4b1f      	ldr	r3, [pc, #124]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	4a1e      	ldr	r2, [pc, #120]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbf6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d015      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc04:	4b19      	ldr	r3, [pc, #100]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc12:	4916      	ldr	r1, [pc, #88]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc14:	4313      	orrs	r3, r2
 800bc16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc22:	d105      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc24:	4b11      	ldr	r3, [pc, #68]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	4a10      	ldr	r2, [pc, #64]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d019      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	4908      	ldr	r1, [pc, #32]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc5a:	d109      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc5c:	4b03      	ldr	r3, [pc, #12]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	4a02      	ldr	r2, [pc, #8]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc66:	60d3      	str	r3, [r2, #12]
 800bc68:	e002      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bc6a:	bf00      	nop
 800bc6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d015      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bc7c:	4b29      	ldr	r3, [pc, #164]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8a:	4926      	ldr	r1, [pc, #152]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc9a:	d105      	bne.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bc9c:	4b21      	ldr	r3, [pc, #132]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	4a20      	ldr	r2, [pc, #128]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bca6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d015      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bcb4:	4b1b      	ldr	r3, [pc, #108]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc2:	4918      	ldr	r1, [pc, #96]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcd2:	d105      	bne.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bcd4:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	4a12      	ldr	r2, [pc, #72]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcde:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d015      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfa:	490a      	ldr	r1, [pc, #40]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd0a:	d105      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	4a04      	ldr	r2, [pc, #16]	; (800bd24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bd18:	7cbb      	ldrb	r3, [r7, #18]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	40021000 	.word	0x40021000

0800bd28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e09d      	b.n	800be76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d108      	bne.n	800bd54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd4a:	d009      	beq.n	800bd60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	61da      	str	r2, [r3, #28]
 800bd52:	e005      	b.n	800bd60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7fa fb42 	bl	8006404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2202      	movs	r2, #2
 800bd84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bda0:	d902      	bls.n	800bda8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	e002      	b.n	800bdae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bda8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bdb6:	d007      	beq.n	800bdc8 <HAL_SPI_Init+0xa0>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdc0:	d002      	beq.n	800bdc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	69db      	ldr	r3, [r3, #28]
 800bdfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be00:	431a      	orrs	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a1b      	ldr	r3, [r3, #32]
 800be06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be0a:	ea42 0103 	orr.w	r1, r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	f003 0204 	and.w	r2, r3, #4
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2c:	f003 0310 	and.w	r3, r3, #16
 800be30:	431a      	orrs	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be36:	f003 0308 	and.w	r3, r3, #8
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800be44:	ea42 0103 	orr.w	r1, r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	69da      	ldr	r2, [r3, #28]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b08a      	sub	sp, #40	; 0x28
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be8c:	2301      	movs	r3, #1
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d101      	bne.n	800bea4 <HAL_SPI_TransmitReceive+0x26>
 800bea0:	2302      	movs	r3, #2
 800bea2:	e1fb      	b.n	800c29c <HAL_SPI_TransmitReceive+0x41e>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beac:	f7fa fe60 	bl	8006b70 <HAL_GetTick>
 800beb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800beb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bec0:	887b      	ldrh	r3, [r7, #2]
 800bec2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bec4:	887b      	ldrh	r3, [r7, #2]
 800bec6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bec8:	7efb      	ldrb	r3, [r7, #27]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d00e      	beq.n	800beec <HAL_SPI_TransmitReceive+0x6e>
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bed4:	d106      	bne.n	800bee4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <HAL_SPI_TransmitReceive+0x66>
 800bede:	7efb      	ldrb	r3, [r7, #27]
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d003      	beq.n	800beec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bee4:	2302      	movs	r3, #2
 800bee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800beea:	e1cd      	b.n	800c288 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d005      	beq.n	800befe <HAL_SPI_TransmitReceive+0x80>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <HAL_SPI_TransmitReceive+0x80>
 800bef8:	887b      	ldrh	r3, [r7, #2]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d103      	bne.n	800bf06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bf04:	e1c0      	b.n	800c288 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d003      	beq.n	800bf1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2205      	movs	r2, #5
 800bf16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	887a      	ldrh	r2, [r7, #2]
 800bf2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	887a      	ldrh	r2, [r7, #2]
 800bf32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	887a      	ldrh	r2, [r7, #2]
 800bf40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	887a      	ldrh	r2, [r7, #2]
 800bf46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf5c:	d802      	bhi.n	800bf64 <HAL_SPI_TransmitReceive+0xe6>
 800bf5e:	8a3b      	ldrh	r3, [r7, #16]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d908      	bls.n	800bf76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf72:	605a      	str	r2, [r3, #4]
 800bf74:	e007      	b.n	800bf86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf90:	2b40      	cmp	r3, #64	; 0x40
 800bf92:	d007      	beq.n	800bfa4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfac:	d97c      	bls.n	800c0a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <HAL_SPI_TransmitReceive+0x13e>
 800bfb6:	8a7b      	ldrh	r3, [r7, #18]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d169      	bne.n	800c090 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc0:	881a      	ldrh	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfcc:	1c9a      	adds	r2, r3, #2
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfe0:	e056      	b.n	800c090 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d11b      	bne.n	800c028 <HAL_SPI_TransmitReceive+0x1aa>
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d016      	beq.n	800c028 <HAL_SPI_TransmitReceive+0x1aa>
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d113      	bne.n	800c028 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c004:	881a      	ldrh	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c010:	1c9a      	adds	r2, r3, #2
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	3b01      	subs	r3, #1
 800c01e:	b29a      	uxth	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b01      	cmp	r3, #1
 800c034:	d11c      	bne.n	800c070 <HAL_SPI_TransmitReceive+0x1f2>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d016      	beq.n	800c070 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68da      	ldr	r2, [r3, #12]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	b292      	uxth	r2, r2
 800c04e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c054:	1c9a      	adds	r2, r3, #2
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	b29a      	uxth	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c06c:	2301      	movs	r3, #1
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c070:	f7fa fd7e 	bl	8006b70 <HAL_GetTick>
 800c074:	4602      	mov	r2, r0
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d807      	bhi.n	800c090 <HAL_SPI_TransmitReceive+0x212>
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c086:	d003      	beq.n	800c090 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c08e:	e0fb      	b.n	800c288 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1a3      	bne.n	800bfe2 <HAL_SPI_TransmitReceive+0x164>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d19d      	bne.n	800bfe2 <HAL_SPI_TransmitReceive+0x164>
 800c0a6:	e0df      	b.n	800c268 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <HAL_SPI_TransmitReceive+0x23a>
 800c0b0:	8a7b      	ldrh	r3, [r7, #18]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	f040 80cb 	bne.w	800c24e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d912      	bls.n	800c0e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c6:	881a      	ldrh	r2, [r3, #0]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	1c9a      	adds	r2, r3, #2
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b02      	subs	r3, #2
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0e6:	e0b2      	b.n	800c24e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	7812      	ldrb	r2, [r2, #0]
 800c0f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c104:	b29b      	uxth	r3, r3
 800c106:	3b01      	subs	r3, #1
 800c108:	b29a      	uxth	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c10e:	e09e      	b.n	800c24e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d134      	bne.n	800c188 <HAL_SPI_TransmitReceive+0x30a>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c122:	b29b      	uxth	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d02f      	beq.n	800c188 <HAL_SPI_TransmitReceive+0x30a>
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d12c      	bne.n	800c188 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c132:	b29b      	uxth	r3, r3
 800c134:	2b01      	cmp	r3, #1
 800c136:	d912      	bls.n	800c15e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	881a      	ldrh	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c148:	1c9a      	adds	r2, r3, #2
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c152:	b29b      	uxth	r3, r3
 800c154:	3b02      	subs	r3, #2
 800c156:	b29a      	uxth	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c15c:	e012      	b.n	800c184 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	330c      	adds	r3, #12
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	3b01      	subs	r3, #1
 800c17e:	b29a      	uxth	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c184:	2300      	movs	r3, #0
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b01      	cmp	r3, #1
 800c194:	d148      	bne.n	800c228 <HAL_SPI_TransmitReceive+0x3aa>
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d042      	beq.n	800c228 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d923      	bls.n	800c1f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68da      	ldr	r2, [r3, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b8:	b292      	uxth	r2, r2
 800c1ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c0:	1c9a      	adds	r2, r3, #2
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b02      	subs	r3, #2
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d81f      	bhi.n	800c224 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1f2:	605a      	str	r2, [r3, #4]
 800c1f4:	e016      	b.n	800c224 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f103 020c 	add.w	r2, r3, #12
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	7812      	ldrb	r2, [r2, #0]
 800c204:	b2d2      	uxtb	r2, r2
 800c206:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c218:	b29b      	uxth	r3, r3
 800c21a:	3b01      	subs	r3, #1
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c224:	2301      	movs	r3, #1
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c228:	f7fa fca2 	bl	8006b70 <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c234:	429a      	cmp	r2, r3
 800c236:	d803      	bhi.n	800c240 <HAL_SPI_TransmitReceive+0x3c2>
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23e:	d102      	bne.n	800c246 <HAL_SPI_TransmitReceive+0x3c8>
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	2b00      	cmp	r3, #0
 800c244:	d103      	bne.n	800c24e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c246:	2303      	movs	r3, #3
 800c248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c24c:	e01c      	b.n	800c288 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c252:	b29b      	uxth	r3, r3
 800c254:	2b00      	cmp	r3, #0
 800c256:	f47f af5b 	bne.w	800c110 <HAL_SPI_TransmitReceive+0x292>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	f47f af54 	bne.w	800c110 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f937 	bl	800c4e0 <SPI_EndRxTxTransaction>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d006      	beq.n	800c286 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2220      	movs	r2, #32
 800c282:	661a      	str	r2, [r3, #96]	; 0x60
 800c284:	e000      	b.n	800c288 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3728      	adds	r7, #40	; 0x28
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b088      	sub	sp, #32
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c2b4:	f7fa fc5c 	bl	8006b70 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	1a9b      	subs	r3, r3, r2
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c2c4:	f7fa fc54 	bl	8006b70 <HAL_GetTick>
 800c2c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c2ca:	4b39      	ldr	r3, [pc, #228]	; (800c3b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	015b      	lsls	r3, r3, #5
 800c2d0:	0d1b      	lsrs	r3, r3, #20
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	fb02 f303 	mul.w	r3, r2, r3
 800c2d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2da:	e054      	b.n	800c386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e2:	d050      	beq.n	800c386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2e4:	f7fa fc44 	bl	8006b70 <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	69fa      	ldr	r2, [r7, #28]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d902      	bls.n	800c2fa <SPI_WaitFlagStateUntilTimeout+0x56>
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d13d      	bne.n	800c376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c312:	d111      	bne.n	800c338 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c31c:	d004      	beq.n	800c328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c326:	d107      	bne.n	800c338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c340:	d10f      	bne.n	800c362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	e017      	b.n	800c3a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c37c:	2300      	movs	r3, #0
 800c37e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	3b01      	subs	r3, #1
 800c384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689a      	ldr	r2, [r3, #8]
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	4013      	ands	r3, r2
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	429a      	cmp	r2, r3
 800c394:	bf0c      	ite	eq
 800c396:	2301      	moveq	r3, #1
 800c398:	2300      	movne	r3, #0
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	461a      	mov	r2, r3
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d19b      	bne.n	800c2dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3720      	adds	r7, #32
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20000018 	.word	0x20000018

0800c3b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08a      	sub	sp, #40	; 0x28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c3c6:	f7fa fbd3 	bl	8006b70 <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	1a9b      	subs	r3, r3, r2
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c3d6:	f7fa fbcb 	bl	8006b70 <HAL_GetTick>
 800c3da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	330c      	adds	r3, #12
 800c3e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c3e4:	4b3d      	ldr	r3, [pc, #244]	; (800c4dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	00da      	lsls	r2, r3, #3
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	0d1b      	lsrs	r3, r3, #20
 800c3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f6:	fb02 f303 	mul.w	r3, r2, r3
 800c3fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c3fc:	e060      	b.n	800c4c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c404:	d107      	bne.n	800c416 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d104      	bne.n	800c416 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	b2db      	uxtb	r3, r3
 800c412:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c414:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41c:	d050      	beq.n	800c4c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c41e:	f7fa fba7 	bl	8006b70 <HAL_GetTick>
 800c422:	4602      	mov	r2, r0
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d902      	bls.n	800c434 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	d13d      	bne.n	800c4b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c442:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c44c:	d111      	bne.n	800c472 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c456:	d004      	beq.n	800c462 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c460:	d107      	bne.n	800c472 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c470:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c47a:	d10f      	bne.n	800c49c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c48a:	601a      	str	r2, [r3, #0]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c49a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e010      	b.n	800c4d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	689a      	ldr	r2, [r3, #8]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d196      	bne.n	800c3fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3728      	adds	r7, #40	; 0x28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	20000018 	.word	0x20000018

0800c4e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af02      	add	r7, sp, #8
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7ff ff5b 	bl	800c3b4 <SPI_WaitFifoStateUntilTimeout>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d007      	beq.n	800c514 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c508:	f043 0220 	orr.w	r2, r3, #32
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e027      	b.n	800c564 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2200      	movs	r2, #0
 800c51c:	2180      	movs	r1, #128	; 0x80
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7ff fec0 	bl	800c2a4 <SPI_WaitFlagStateUntilTimeout>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d007      	beq.n	800c53a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c52e:	f043 0220 	orr.w	r2, r3, #32
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c536:	2303      	movs	r3, #3
 800c538:	e014      	b.n	800c564 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2200      	movs	r2, #0
 800c542:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f7ff ff34 	bl	800c3b4 <SPI_WaitFifoStateUntilTimeout>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d007      	beq.n	800c562 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c556:	f043 0220 	orr.w	r2, r3, #32
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c55e:	2303      	movs	r3, #3
 800c560:	e000      	b.n	800c564 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e038      	b.n	800c5f4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f7f5 f99a 	bl	80018d0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	f001 fb3c 	bl	800dc24 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6818      	ldr	r0, [r3, #0]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	f001 fc02 	bl	800ddc0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6858      	ldr	r0, [r3, #4]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	689a      	ldr	r2, [r3, #8]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	f001 fc4b 	bl	800de64 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	6892      	ldr	r2, [r2, #8]
 800c5d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68fa      	ldr	r2, [r7, #12]
 800c5e0:	6892      	ldr	r2, [r2, #8]
 800c5e2:	f041 0101 	orr.w	r1, r1, #1
 800c5e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e049      	b.n	800c6a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d106      	bne.n	800c628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7fa f9ca 	bl	80069bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3304      	adds	r3, #4
 800c638:	4619      	mov	r1, r3
 800c63a:	4610      	mov	r0, r2
 800c63c:	f000 fd82 	bl	800d144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d001      	beq.n	800c6c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e04c      	b.n	800c75e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a26      	ldr	r2, [pc, #152]	; (800c76c <HAL_TIM_Base_Start+0xc0>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d022      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6de:	d01d      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a22      	ldr	r2, [pc, #136]	; (800c770 <HAL_TIM_Base_Start+0xc4>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d018      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a21      	ldr	r2, [pc, #132]	; (800c774 <HAL_TIM_Base_Start+0xc8>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d013      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a1f      	ldr	r2, [pc, #124]	; (800c778 <HAL_TIM_Base_Start+0xcc>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00e      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a1e      	ldr	r2, [pc, #120]	; (800c77c <HAL_TIM_Base_Start+0xd0>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d009      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a1c      	ldr	r2, [pc, #112]	; (800c780 <HAL_TIM_Base_Start+0xd4>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d004      	beq.n	800c71c <HAL_TIM_Base_Start+0x70>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a1b      	ldr	r2, [pc, #108]	; (800c784 <HAL_TIM_Base_Start+0xd8>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d115      	bne.n	800c748 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689a      	ldr	r2, [r3, #8]
 800c722:	4b19      	ldr	r3, [pc, #100]	; (800c788 <HAL_TIM_Base_Start+0xdc>)
 800c724:	4013      	ands	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b06      	cmp	r3, #6
 800c72c:	d015      	beq.n	800c75a <HAL_TIM_Base_Start+0xae>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c734:	d011      	beq.n	800c75a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f042 0201 	orr.w	r2, r2, #1
 800c744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c746:	e008      	b.n	800c75a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f042 0201 	orr.w	r2, r2, #1
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	e000      	b.n	800c75c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c75a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	40012c00 	.word	0x40012c00
 800c770:	40000400 	.word	0x40000400
 800c774:	40000800 	.word	0x40000800
 800c778:	40000c00 	.word	0x40000c00
 800c77c:	40013400 	.word	0x40013400
 800c780:	40014000 	.word	0x40014000
 800c784:	40015000 	.word	0x40015000
 800c788:	00010007 	.word	0x00010007

0800c78c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6a1a      	ldr	r2, [r3, #32]
 800c79a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c79e:	4013      	ands	r3, r2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10f      	bne.n	800c7c4 <HAL_TIM_Base_Stop+0x38>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6a1a      	ldr	r2, [r3, #32]
 800c7aa:	f244 4344 	movw	r3, #17476	; 0x4444
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d107      	bne.n	800c7c4 <HAL_TIM_Base_Stop+0x38>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f022 0201 	bic.w	r2, r2, #1
 800c7c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e049      	b.n	800c880 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f841 	bl	800c888 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2202      	movs	r2, #2
 800c80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3304      	adds	r3, #4
 800c816:	4619      	mov	r1, r3
 800c818:	4610      	mov	r0, r2
 800c81a:	f000 fc93 	bl	800d144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d108      	bne.n	800c8de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d105      	bne.n	800c8de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8d2:	7b7b      	ldrb	r3, [r7, #13]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d102      	bne.n	800c8de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8d8:	7b3b      	ldrb	r3, [r7, #12]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d001      	beq.n	800c8e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e059      	b.n	800c996 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68da      	ldr	r2, [r3, #12]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f042 0202 	orr.w	r2, r2, #2
 800c910:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f042 0204 	orr.w	r2, r2, #4
 800c920:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2201      	movs	r2, #1
 800c928:	2100      	movs	r1, #0
 800c92a:	4618      	mov	r0, r3
 800c92c:	f001 f878 	bl	800da20 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2201      	movs	r2, #1
 800c936:	2104      	movs	r1, #4
 800c938:	4618      	mov	r0, r3
 800c93a:	f001 f871 	bl	800da20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a17      	ldr	r2, [pc, #92]	; (800c9a0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d018      	beq.n	800c97a <HAL_TIM_OnePulse_Start_IT+0xde>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a15      	ldr	r2, [pc, #84]	; (800c9a4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d013      	beq.n	800c97a <HAL_TIM_OnePulse_Start_IT+0xde>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a14      	ldr	r2, [pc, #80]	; (800c9a8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00e      	beq.n	800c97a <HAL_TIM_OnePulse_Start_IT+0xde>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a12      	ldr	r2, [pc, #72]	; (800c9ac <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d009      	beq.n	800c97a <HAL_TIM_OnePulse_Start_IT+0xde>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a11      	ldr	r2, [pc, #68]	; (800c9b0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d004      	beq.n	800c97a <HAL_TIM_OnePulse_Start_IT+0xde>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a0f      	ldr	r2, [pc, #60]	; (800c9b4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d101      	bne.n	800c97e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c97a:	2301      	movs	r3, #1
 800c97c:	e000      	b.n	800c980 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c97e:	2300      	movs	r3, #0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d007      	beq.n	800c994 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c992:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	40012c00 	.word	0x40012c00
 800c9a4:	40013400 	.word	0x40013400
 800c9a8:	40014000 	.word	0x40014000
 800c9ac:	40014400 	.word	0x40014400
 800c9b0:	40014800 	.word	0x40014800
 800c9b4:	40015000 	.word	0x40015000

0800c9b8 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68da      	ldr	r2, [r3, #12]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f022 0202 	bic.w	r2, r2, #2
 800c9d0:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68da      	ldr	r2, [r3, #12]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f022 0204 	bic.w	r2, r2, #4
 800c9e0:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f001 f818 	bl	800da20 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2104      	movs	r1, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f001 f811 	bl	800da20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a33      	ldr	r2, [pc, #204]	; (800cad0 <HAL_TIM_OnePulse_Stop_IT+0x118>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d018      	beq.n	800ca3a <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a31      	ldr	r2, [pc, #196]	; (800cad4 <HAL_TIM_OnePulse_Stop_IT+0x11c>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d013      	beq.n	800ca3a <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a30      	ldr	r2, [pc, #192]	; (800cad8 <HAL_TIM_OnePulse_Stop_IT+0x120>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d00e      	beq.n	800ca3a <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a2e      	ldr	r2, [pc, #184]	; (800cadc <HAL_TIM_OnePulse_Stop_IT+0x124>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d009      	beq.n	800ca3a <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a2d      	ldr	r2, [pc, #180]	; (800cae0 <HAL_TIM_OnePulse_Stop_IT+0x128>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d004      	beq.n	800ca3a <HAL_TIM_OnePulse_Stop_IT+0x82>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a2b      	ldr	r2, [pc, #172]	; (800cae4 <HAL_TIM_OnePulse_Stop_IT+0x12c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d101      	bne.n	800ca3e <HAL_TIM_OnePulse_Stop_IT+0x86>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e000      	b.n	800ca40 <HAL_TIM_OnePulse_Stop_IT+0x88>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d017      	beq.n	800ca74 <HAL_TIM_OnePulse_Stop_IT+0xbc>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6a1a      	ldr	r2, [r3, #32]
 800ca4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca4e:	4013      	ands	r3, r2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10f      	bne.n	800ca74 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6a1a      	ldr	r2, [r3, #32]
 800ca5a:	f244 4344 	movw	r3, #17476	; 0x4444
 800ca5e:	4013      	ands	r3, r2
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d107      	bne.n	800ca74 <HAL_TIM_OnePulse_Stop_IT+0xbc>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6a1a      	ldr	r2, [r3, #32]
 800ca7a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ca7e:	4013      	ands	r3, r2
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10f      	bne.n	800caa4 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6a1a      	ldr	r2, [r3, #32]
 800ca8a:	f244 4344 	movw	r3, #17476	; 0x4444
 800ca8e:	4013      	ands	r3, r2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d107      	bne.n	800caa4 <HAL_TIM_OnePulse_Stop_IT+0xec>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f022 0201 	bic.w	r2, r2, #1
 800caa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	40012c00 	.word	0x40012c00
 800cad4:	40013400 	.word	0x40013400
 800cad8:	40014000 	.word	0x40014000
 800cadc:	40014400 	.word	0x40014400
 800cae0:	40014800 	.word	0x40014800
 800cae4:	40015000 	.word	0x40015000

0800cae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d122      	bne.n	800cb44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	f003 0302 	and.w	r3, r3, #2
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d11b      	bne.n	800cb44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f06f 0202 	mvn.w	r2, #2
 800cb14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	f003 0303 	and.w	r3, r3, #3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 faec 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800cb30:	e005      	b.n	800cb3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f8 fe48 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 faef 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	f003 0304 	and.w	r3, r3, #4
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d122      	bne.n	800cb98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b04      	cmp	r3, #4
 800cb5e:	d11b      	bne.n	800cb98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f06f 0204 	mvn.w	r2, #4
 800cb68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fac2 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800cb84:	e005      	b.n	800cb92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7f8 fe1e 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fac5 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f003 0308 	and.w	r3, r3, #8
 800cba2:	2b08      	cmp	r3, #8
 800cba4:	d122      	bne.n	800cbec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f003 0308 	and.w	r3, r3, #8
 800cbb0:	2b08      	cmp	r3, #8
 800cbb2:	d11b      	bne.n	800cbec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f06f 0208 	mvn.w	r2, #8
 800cbbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2204      	movs	r2, #4
 800cbc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	69db      	ldr	r3, [r3, #28]
 800cbca:	f003 0303 	and.w	r3, r3, #3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fa98 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800cbd8:	e005      	b.n	800cbe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7f8 fdf4 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fa9b 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	f003 0310 	and.w	r3, r3, #16
 800cbf6:	2b10      	cmp	r3, #16
 800cbf8:	d122      	bne.n	800cc40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f003 0310 	and.w	r3, r3, #16
 800cc04:	2b10      	cmp	r3, #16
 800cc06:	d11b      	bne.n	800cc40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f06f 0210 	mvn.w	r2, #16
 800cc10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2208      	movs	r2, #8
 800cc16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fa6e 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800cc2c:	e005      	b.n	800cc3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7f8 fdca 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fa71 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d10e      	bne.n	800cc6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f003 0301 	and.w	r3, r3, #1
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d107      	bne.n	800cc6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f06f 0201 	mvn.w	r2, #1
 800cc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fa44 	bl	800d0f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc76:	2b80      	cmp	r3, #128	; 0x80
 800cc78:	d10e      	bne.n	800cc98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc84:	2b80      	cmp	r3, #128	; 0x80
 800cc86:	d107      	bne.n	800cc98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 ff8a 	bl	800dbac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cca6:	d10e      	bne.n	800ccc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb2:	2b80      	cmp	r3, #128	; 0x80
 800ccb4:	d107      	bne.n	800ccc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ccbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 ff7d 	bl	800dbc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd0:	2b40      	cmp	r3, #64	; 0x40
 800ccd2:	d10e      	bne.n	800ccf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccde:	2b40      	cmp	r3, #64	; 0x40
 800cce0:	d107      	bne.n	800ccf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ccea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fa1f 	bl	800d130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	f003 0320 	and.w	r3, r3, #32
 800ccfc:	2b20      	cmp	r3, #32
 800ccfe:	d10e      	bne.n	800cd1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	f003 0320 	and.w	r3, r3, #32
 800cd0a:	2b20      	cmp	r3, #32
 800cd0c:	d107      	bne.n	800cd1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f06f 0220 	mvn.w	r2, #32
 800cd16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 ff3d 	bl	800db98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd2c:	d10f      	bne.n	800cd4e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd3c:	d107      	bne.n	800cd4e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cd46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 ff43 	bl	800dbd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd5c:	d10f      	bne.n	800cd7e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd6c:	d107      	bne.n	800cd7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cd76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 ff35 	bl	800dbe8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd8c:	d10f      	bne.n	800cdae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd9c:	d107      	bne.n	800cdae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cda6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 ff27 	bl	800dbfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdbc:	d10f      	bne.n	800cdde <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdcc:	d107      	bne.n	800cdde <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cdd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 ff19 	bl	800dc10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d101      	bne.n	800ce06 <HAL_TIM_OC_ConfigChannel+0x1e>
 800ce02:	2302      	movs	r3, #2
 800ce04:	e066      	b.n	800ced4 <HAL_TIM_OC_ConfigChannel+0xec>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b14      	cmp	r3, #20
 800ce12:	d857      	bhi.n	800cec4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ce14:	a201      	add	r2, pc, #4	; (adr r2, 800ce1c <HAL_TIM_OC_ConfigChannel+0x34>)
 800ce16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1a:	bf00      	nop
 800ce1c:	0800ce71 	.word	0x0800ce71
 800ce20:	0800cec5 	.word	0x0800cec5
 800ce24:	0800cec5 	.word	0x0800cec5
 800ce28:	0800cec5 	.word	0x0800cec5
 800ce2c:	0800ce7f 	.word	0x0800ce7f
 800ce30:	0800cec5 	.word	0x0800cec5
 800ce34:	0800cec5 	.word	0x0800cec5
 800ce38:	0800cec5 	.word	0x0800cec5
 800ce3c:	0800ce8d 	.word	0x0800ce8d
 800ce40:	0800cec5 	.word	0x0800cec5
 800ce44:	0800cec5 	.word	0x0800cec5
 800ce48:	0800cec5 	.word	0x0800cec5
 800ce4c:	0800ce9b 	.word	0x0800ce9b
 800ce50:	0800cec5 	.word	0x0800cec5
 800ce54:	0800cec5 	.word	0x0800cec5
 800ce58:	0800cec5 	.word	0x0800cec5
 800ce5c:	0800cea9 	.word	0x0800cea9
 800ce60:	0800cec5 	.word	0x0800cec5
 800ce64:	0800cec5 	.word	0x0800cec5
 800ce68:	0800cec5 	.word	0x0800cec5
 800ce6c:	0800ceb7 	.word	0x0800ceb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68b9      	ldr	r1, [r7, #8]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fa0c 	bl	800d294 <TIM_OC1_SetConfig>
      break;
 800ce7c:	e025      	b.n	800ceca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 fa9f 	bl	800d3c8 <TIM_OC2_SetConfig>
      break;
 800ce8a:	e01e      	b.n	800ceca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fb2c 	bl	800d4f0 <TIM_OC3_SetConfig>
      break;
 800ce98:	e017      	b.n	800ceca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f000 fbb7 	bl	800d614 <TIM_OC4_SetConfig>
      break;
 800cea6:	e010      	b.n	800ceca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fc44 	bl	800d73c <TIM_OC5_SetConfig>
      break;
 800ceb4:	e009      	b.n	800ceca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68b9      	ldr	r1, [r7, #8]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fca7 	bl	800d810 <TIM_OC6_SetConfig>
      break;
 800cec2:	e002      	b.n	800ceca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	75fb      	strb	r3, [r7, #23]
      break;
 800cec8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d101      	bne.n	800cef8 <HAL_TIM_ConfigClockSource+0x1c>
 800cef4:	2302      	movs	r3, #2
 800cef6:	e0ee      	b.n	800d0d6 <HAL_TIM_ConfigClockSource+0x1fa>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cf16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cf1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a6b      	ldr	r2, [pc, #428]	; (800d0e0 <HAL_TIM_ConfigClockSource+0x204>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	f000 80b9 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf38:	4a69      	ldr	r2, [pc, #420]	; (800d0e0 <HAL_TIM_ConfigClockSource+0x204>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	f200 80be 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cf40:	4a68      	ldr	r2, [pc, #416]	; (800d0e4 <HAL_TIM_ConfigClockSource+0x208>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	f000 80b1 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf48:	4a66      	ldr	r2, [pc, #408]	; (800d0e4 <HAL_TIM_ConfigClockSource+0x208>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	f200 80b6 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cf50:	4a65      	ldr	r2, [pc, #404]	; (800d0e8 <HAL_TIM_ConfigClockSource+0x20c>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	f000 80a9 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf58:	4a63      	ldr	r2, [pc, #396]	; (800d0e8 <HAL_TIM_ConfigClockSource+0x20c>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	f200 80ae 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cf60:	4a62      	ldr	r2, [pc, #392]	; (800d0ec <HAL_TIM_ConfigClockSource+0x210>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	f000 80a1 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf68:	4a60      	ldr	r2, [pc, #384]	; (800d0ec <HAL_TIM_ConfigClockSource+0x210>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	f200 80a6 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cf70:	4a5f      	ldr	r2, [pc, #380]	; (800d0f0 <HAL_TIM_ConfigClockSource+0x214>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	f000 8099 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf78:	4a5d      	ldr	r2, [pc, #372]	; (800d0f0 <HAL_TIM_ConfigClockSource+0x214>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	f200 809e 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cf80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf84:	f000 8091 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cf8c:	f200 8096 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cf90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf94:	f000 8089 	beq.w	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cf98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf9c:	f200 808e 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfa4:	d03e      	beq.n	800d024 <HAL_TIM_ConfigClockSource+0x148>
 800cfa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfaa:	f200 8087 	bhi.w	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfb2:	f000 8086 	beq.w	800d0c2 <HAL_TIM_ConfigClockSource+0x1e6>
 800cfb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfba:	d87f      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfbc:	2b70      	cmp	r3, #112	; 0x70
 800cfbe:	d01a      	beq.n	800cff6 <HAL_TIM_ConfigClockSource+0x11a>
 800cfc0:	2b70      	cmp	r3, #112	; 0x70
 800cfc2:	d87b      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfc4:	2b60      	cmp	r3, #96	; 0x60
 800cfc6:	d050      	beq.n	800d06a <HAL_TIM_ConfigClockSource+0x18e>
 800cfc8:	2b60      	cmp	r3, #96	; 0x60
 800cfca:	d877      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfcc:	2b50      	cmp	r3, #80	; 0x50
 800cfce:	d03c      	beq.n	800d04a <HAL_TIM_ConfigClockSource+0x16e>
 800cfd0:	2b50      	cmp	r3, #80	; 0x50
 800cfd2:	d873      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfd4:	2b40      	cmp	r3, #64	; 0x40
 800cfd6:	d058      	beq.n	800d08a <HAL_TIM_ConfigClockSource+0x1ae>
 800cfd8:	2b40      	cmp	r3, #64	; 0x40
 800cfda:	d86f      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfdc:	2b30      	cmp	r3, #48	; 0x30
 800cfde:	d064      	beq.n	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cfe0:	2b30      	cmp	r3, #48	; 0x30
 800cfe2:	d86b      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfe4:	2b20      	cmp	r3, #32
 800cfe6:	d060      	beq.n	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	d867      	bhi.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d05c      	beq.n	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cff0:	2b10      	cmp	r3, #16
 800cff2:	d05a      	beq.n	800d0aa <HAL_TIM_ConfigClockSource+0x1ce>
 800cff4:	e062      	b.n	800d0bc <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	6899      	ldr	r1, [r3, #8]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	f000 fceb 	bl	800d9e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	609a      	str	r2, [r3, #8]
      break;
 800d022:	e04f      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6818      	ldr	r0, [r3, #0]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	6899      	ldr	r1, [r3, #8]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	685a      	ldr	r2, [r3, #4]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	f000 fcd4 	bl	800d9e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689a      	ldr	r2, [r3, #8]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d046:	609a      	str	r2, [r3, #8]
      break;
 800d048:	e03c      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6818      	ldr	r0, [r3, #0]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	6859      	ldr	r1, [r3, #4]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	461a      	mov	r2, r3
 800d058:	f000 fc46 	bl	800d8e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2150      	movs	r1, #80	; 0x50
 800d062:	4618      	mov	r0, r3
 800d064:	f000 fc9f 	bl	800d9a6 <TIM_ITRx_SetConfig>
      break;
 800d068:	e02c      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6818      	ldr	r0, [r3, #0]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	6859      	ldr	r1, [r3, #4]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	461a      	mov	r2, r3
 800d078:	f000 fc65 	bl	800d946 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2160      	movs	r1, #96	; 0x60
 800d082:	4618      	mov	r0, r3
 800d084:	f000 fc8f 	bl	800d9a6 <TIM_ITRx_SetConfig>
      break;
 800d088:	e01c      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6859      	ldr	r1, [r3, #4]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	461a      	mov	r2, r3
 800d098:	f000 fc26 	bl	800d8e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2140      	movs	r1, #64	; 0x40
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 fc7f 	bl	800d9a6 <TIM_ITRx_SetConfig>
      break;
 800d0a8:	e00c      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f000 fc76 	bl	800d9a6 <TIM_ITRx_SetConfig>
      break;
 800d0ba:	e003      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c0:	e000      	b.n	800d0c4 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800d0c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	00100070 	.word	0x00100070
 800d0e4:	00100050 	.word	0x00100050
 800d0e8:	00100040 	.word	0x00100040
 800d0ec:	00100030 	.word	0x00100030
 800d0f0:	00100020 	.word	0x00100020

0800d0f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a46      	ldr	r2, [pc, #280]	; (800d270 <TIM_Base_SetConfig+0x12c>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d017      	beq.n	800d18c <TIM_Base_SetConfig+0x48>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d162:	d013      	beq.n	800d18c <TIM_Base_SetConfig+0x48>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a43      	ldr	r2, [pc, #268]	; (800d274 <TIM_Base_SetConfig+0x130>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d00f      	beq.n	800d18c <TIM_Base_SetConfig+0x48>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a42      	ldr	r2, [pc, #264]	; (800d278 <TIM_Base_SetConfig+0x134>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d00b      	beq.n	800d18c <TIM_Base_SetConfig+0x48>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a41      	ldr	r2, [pc, #260]	; (800d27c <TIM_Base_SetConfig+0x138>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d007      	beq.n	800d18c <TIM_Base_SetConfig+0x48>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a40      	ldr	r2, [pc, #256]	; (800d280 <TIM_Base_SetConfig+0x13c>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d003      	beq.n	800d18c <TIM_Base_SetConfig+0x48>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a3f      	ldr	r2, [pc, #252]	; (800d284 <TIM_Base_SetConfig+0x140>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d108      	bne.n	800d19e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a33      	ldr	r2, [pc, #204]	; (800d270 <TIM_Base_SetConfig+0x12c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d023      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ac:	d01f      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a30      	ldr	r2, [pc, #192]	; (800d274 <TIM_Base_SetConfig+0x130>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d01b      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a2f      	ldr	r2, [pc, #188]	; (800d278 <TIM_Base_SetConfig+0x134>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d017      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a2e      	ldr	r2, [pc, #184]	; (800d27c <TIM_Base_SetConfig+0x138>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d013      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a2d      	ldr	r2, [pc, #180]	; (800d280 <TIM_Base_SetConfig+0x13c>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d00f      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a2d      	ldr	r2, [pc, #180]	; (800d288 <TIM_Base_SetConfig+0x144>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d00b      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a2c      	ldr	r2, [pc, #176]	; (800d28c <TIM_Base_SetConfig+0x148>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d007      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a2b      	ldr	r2, [pc, #172]	; (800d290 <TIM_Base_SetConfig+0x14c>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d003      	beq.n	800d1ee <TIM_Base_SetConfig+0xaa>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a26      	ldr	r2, [pc, #152]	; (800d284 <TIM_Base_SetConfig+0x140>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d108      	bne.n	800d200 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	689a      	ldr	r2, [r3, #8]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a12      	ldr	r2, [pc, #72]	; (800d270 <TIM_Base_SetConfig+0x12c>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d013      	beq.n	800d254 <TIM_Base_SetConfig+0x110>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a14      	ldr	r2, [pc, #80]	; (800d280 <TIM_Base_SetConfig+0x13c>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d00f      	beq.n	800d254 <TIM_Base_SetConfig+0x110>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a14      	ldr	r2, [pc, #80]	; (800d288 <TIM_Base_SetConfig+0x144>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d00b      	beq.n	800d254 <TIM_Base_SetConfig+0x110>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a13      	ldr	r2, [pc, #76]	; (800d28c <TIM_Base_SetConfig+0x148>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d007      	beq.n	800d254 <TIM_Base_SetConfig+0x110>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a12      	ldr	r2, [pc, #72]	; (800d290 <TIM_Base_SetConfig+0x14c>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d003      	beq.n	800d254 <TIM_Base_SetConfig+0x110>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a0d      	ldr	r2, [pc, #52]	; (800d284 <TIM_Base_SetConfig+0x140>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d103      	bne.n	800d25c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	691a      	ldr	r2, [r3, #16]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	615a      	str	r2, [r3, #20]
}
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	40012c00 	.word	0x40012c00
 800d274:	40000400 	.word	0x40000400
 800d278:	40000800 	.word	0x40000800
 800d27c:	40000c00 	.word	0x40000c00
 800d280:	40013400 	.word	0x40013400
 800d284:	40015000 	.word	0x40015000
 800d288:	40014000 	.word	0x40014000
 800d28c:	40014400 	.word	0x40014400
 800d290:	40014800 	.word	0x40014800

0800d294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
 800d2a2:	f023 0201 	bic.w	r2, r3, #1
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	699b      	ldr	r3, [r3, #24]
 800d2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0303 	bic.w	r3, r3, #3
 800d2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f023 0302 	bic.w	r3, r3, #2
 800d2e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4a30      	ldr	r2, [pc, #192]	; (800d3b0 <TIM_OC1_SetConfig+0x11c>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d013      	beq.n	800d31c <TIM_OC1_SetConfig+0x88>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4a2f      	ldr	r2, [pc, #188]	; (800d3b4 <TIM_OC1_SetConfig+0x120>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d00f      	beq.n	800d31c <TIM_OC1_SetConfig+0x88>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	4a2e      	ldr	r2, [pc, #184]	; (800d3b8 <TIM_OC1_SetConfig+0x124>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d00b      	beq.n	800d31c <TIM_OC1_SetConfig+0x88>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a2d      	ldr	r2, [pc, #180]	; (800d3bc <TIM_OC1_SetConfig+0x128>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d007      	beq.n	800d31c <TIM_OC1_SetConfig+0x88>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a2c      	ldr	r2, [pc, #176]	; (800d3c0 <TIM_OC1_SetConfig+0x12c>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d003      	beq.n	800d31c <TIM_OC1_SetConfig+0x88>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a2b      	ldr	r2, [pc, #172]	; (800d3c4 <TIM_OC1_SetConfig+0x130>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d10c      	bne.n	800d336 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f023 0308 	bic.w	r3, r3, #8
 800d322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f023 0304 	bic.w	r3, r3, #4
 800d334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a1d      	ldr	r2, [pc, #116]	; (800d3b0 <TIM_OC1_SetConfig+0x11c>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d013      	beq.n	800d366 <TIM_OC1_SetConfig+0xd2>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a1c      	ldr	r2, [pc, #112]	; (800d3b4 <TIM_OC1_SetConfig+0x120>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d00f      	beq.n	800d366 <TIM_OC1_SetConfig+0xd2>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4a1b      	ldr	r2, [pc, #108]	; (800d3b8 <TIM_OC1_SetConfig+0x124>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d00b      	beq.n	800d366 <TIM_OC1_SetConfig+0xd2>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a1a      	ldr	r2, [pc, #104]	; (800d3bc <TIM_OC1_SetConfig+0x128>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d007      	beq.n	800d366 <TIM_OC1_SetConfig+0xd2>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4a19      	ldr	r2, [pc, #100]	; (800d3c0 <TIM_OC1_SetConfig+0x12c>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d003      	beq.n	800d366 <TIM_OC1_SetConfig+0xd2>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4a18      	ldr	r2, [pc, #96]	; (800d3c4 <TIM_OC1_SetConfig+0x130>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d111      	bne.n	800d38a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	699b      	ldr	r3, [r3, #24]
 800d384:	693a      	ldr	r2, [r7, #16]
 800d386:	4313      	orrs	r3, r2
 800d388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	621a      	str	r2, [r3, #32]
}
 800d3a4:	bf00      	nop
 800d3a6:	371c      	adds	r7, #28
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	40012c00 	.word	0x40012c00
 800d3b4:	40013400 	.word	0x40013400
 800d3b8:	40014000 	.word	0x40014000
 800d3bc:	40014400 	.word	0x40014400
 800d3c0:	40014800 	.word	0x40014800
 800d3c4:	40015000 	.word	0x40015000

0800d3c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	f023 0210 	bic.w	r2, r3, #16
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	021b      	lsls	r3, r3, #8
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f023 0320 	bic.w	r3, r3, #32
 800d416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	011b      	lsls	r3, r3, #4
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	4313      	orrs	r3, r2
 800d422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a2c      	ldr	r2, [pc, #176]	; (800d4d8 <TIM_OC2_SetConfig+0x110>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d007      	beq.n	800d43c <TIM_OC2_SetConfig+0x74>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a2b      	ldr	r2, [pc, #172]	; (800d4dc <TIM_OC2_SetConfig+0x114>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d003      	beq.n	800d43c <TIM_OC2_SetConfig+0x74>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a2a      	ldr	r2, [pc, #168]	; (800d4e0 <TIM_OC2_SetConfig+0x118>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d10d      	bne.n	800d458 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	011b      	lsls	r3, r3, #4
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a1f      	ldr	r2, [pc, #124]	; (800d4d8 <TIM_OC2_SetConfig+0x110>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d013      	beq.n	800d488 <TIM_OC2_SetConfig+0xc0>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a1e      	ldr	r2, [pc, #120]	; (800d4dc <TIM_OC2_SetConfig+0x114>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d00f      	beq.n	800d488 <TIM_OC2_SetConfig+0xc0>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a1e      	ldr	r2, [pc, #120]	; (800d4e4 <TIM_OC2_SetConfig+0x11c>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d00b      	beq.n	800d488 <TIM_OC2_SetConfig+0xc0>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a1d      	ldr	r2, [pc, #116]	; (800d4e8 <TIM_OC2_SetConfig+0x120>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d007      	beq.n	800d488 <TIM_OC2_SetConfig+0xc0>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a1c      	ldr	r2, [pc, #112]	; (800d4ec <TIM_OC2_SetConfig+0x124>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d003      	beq.n	800d488 <TIM_OC2_SetConfig+0xc0>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a17      	ldr	r2, [pc, #92]	; (800d4e0 <TIM_OC2_SetConfig+0x118>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d113      	bne.n	800d4b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d48e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	621a      	str	r2, [r3, #32]
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	40012c00 	.word	0x40012c00
 800d4dc:	40013400 	.word	0x40013400
 800d4e0:	40015000 	.word	0x40015000
 800d4e4:	40014000 	.word	0x40014000
 800d4e8:	40014400 	.word	0x40014400
 800d4ec:	40014800 	.word	0x40014800

0800d4f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f023 0303 	bic.w	r3, r3, #3
 800d52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	4313      	orrs	r3, r2
 800d534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	4313      	orrs	r3, r2
 800d548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a2b      	ldr	r2, [pc, #172]	; (800d5fc <TIM_OC3_SetConfig+0x10c>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d007      	beq.n	800d562 <TIM_OC3_SetConfig+0x72>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a2a      	ldr	r2, [pc, #168]	; (800d600 <TIM_OC3_SetConfig+0x110>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d003      	beq.n	800d562 <TIM_OC3_SetConfig+0x72>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a29      	ldr	r2, [pc, #164]	; (800d604 <TIM_OC3_SetConfig+0x114>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d10d      	bne.n	800d57e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	021b      	lsls	r3, r3, #8
 800d570:	697a      	ldr	r2, [r7, #20]
 800d572:	4313      	orrs	r3, r2
 800d574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d57c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a1e      	ldr	r2, [pc, #120]	; (800d5fc <TIM_OC3_SetConfig+0x10c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d013      	beq.n	800d5ae <TIM_OC3_SetConfig+0xbe>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a1d      	ldr	r2, [pc, #116]	; (800d600 <TIM_OC3_SetConfig+0x110>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d00f      	beq.n	800d5ae <TIM_OC3_SetConfig+0xbe>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a1d      	ldr	r2, [pc, #116]	; (800d608 <TIM_OC3_SetConfig+0x118>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d00b      	beq.n	800d5ae <TIM_OC3_SetConfig+0xbe>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a1c      	ldr	r2, [pc, #112]	; (800d60c <TIM_OC3_SetConfig+0x11c>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d007      	beq.n	800d5ae <TIM_OC3_SetConfig+0xbe>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a1b      	ldr	r2, [pc, #108]	; (800d610 <TIM_OC3_SetConfig+0x120>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d003      	beq.n	800d5ae <TIM_OC3_SetConfig+0xbe>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a16      	ldr	r2, [pc, #88]	; (800d604 <TIM_OC3_SetConfig+0x114>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d113      	bne.n	800d5d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	011b      	lsls	r3, r3, #4
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	011b      	lsls	r3, r3, #4
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	621a      	str	r2, [r3, #32]
}
 800d5f0:	bf00      	nop
 800d5f2:	371c      	adds	r7, #28
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	40012c00 	.word	0x40012c00
 800d600:	40013400 	.word	0x40013400
 800d604:	40015000 	.word	0x40015000
 800d608:	40014000 	.word	0x40014000
 800d60c:	40014400 	.word	0x40014400
 800d610:	40014800 	.word	0x40014800

0800d614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d64e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	021b      	lsls	r3, r3, #8
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	4313      	orrs	r3, r2
 800d65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	031b      	lsls	r3, r3, #12
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a2c      	ldr	r2, [pc, #176]	; (800d724 <TIM_OC4_SetConfig+0x110>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d007      	beq.n	800d688 <TIM_OC4_SetConfig+0x74>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a2b      	ldr	r2, [pc, #172]	; (800d728 <TIM_OC4_SetConfig+0x114>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d003      	beq.n	800d688 <TIM_OC4_SetConfig+0x74>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a2a      	ldr	r2, [pc, #168]	; (800d72c <TIM_OC4_SetConfig+0x118>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d10d      	bne.n	800d6a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	031b      	lsls	r3, r3, #12
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	4313      	orrs	r3, r2
 800d69a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a1f      	ldr	r2, [pc, #124]	; (800d724 <TIM_OC4_SetConfig+0x110>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d013      	beq.n	800d6d4 <TIM_OC4_SetConfig+0xc0>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a1e      	ldr	r2, [pc, #120]	; (800d728 <TIM_OC4_SetConfig+0x114>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d00f      	beq.n	800d6d4 <TIM_OC4_SetConfig+0xc0>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a1e      	ldr	r2, [pc, #120]	; (800d730 <TIM_OC4_SetConfig+0x11c>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d00b      	beq.n	800d6d4 <TIM_OC4_SetConfig+0xc0>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a1d      	ldr	r2, [pc, #116]	; (800d734 <TIM_OC4_SetConfig+0x120>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d007      	beq.n	800d6d4 <TIM_OC4_SetConfig+0xc0>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a1c      	ldr	r2, [pc, #112]	; (800d738 <TIM_OC4_SetConfig+0x124>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d003      	beq.n	800d6d4 <TIM_OC4_SetConfig+0xc0>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a17      	ldr	r2, [pc, #92]	; (800d72c <TIM_OC4_SetConfig+0x118>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d113      	bne.n	800d6fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	019b      	lsls	r3, r3, #6
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	699b      	ldr	r3, [r3, #24]
 800d6f4:	019b      	lsls	r3, r3, #6
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	693a      	ldr	r2, [r7, #16]
 800d700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	621a      	str	r2, [r3, #32]
}
 800d716:	bf00      	nop
 800d718:	371c      	adds	r7, #28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	40012c00 	.word	0x40012c00
 800d728:	40013400 	.word	0x40013400
 800d72c:	40015000 	.word	0x40015000
 800d730:	40014000 	.word	0x40014000
 800d734:	40014400 	.word	0x40014400
 800d738:	40014800 	.word	0x40014800

0800d73c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4313      	orrs	r3, r2
 800d778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d780:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	041b      	lsls	r3, r3, #16
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a19      	ldr	r2, [pc, #100]	; (800d7f8 <TIM_OC5_SetConfig+0xbc>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d013      	beq.n	800d7be <TIM_OC5_SetConfig+0x82>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a18      	ldr	r2, [pc, #96]	; (800d7fc <TIM_OC5_SetConfig+0xc0>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d00f      	beq.n	800d7be <TIM_OC5_SetConfig+0x82>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a17      	ldr	r2, [pc, #92]	; (800d800 <TIM_OC5_SetConfig+0xc4>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d00b      	beq.n	800d7be <TIM_OC5_SetConfig+0x82>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a16      	ldr	r2, [pc, #88]	; (800d804 <TIM_OC5_SetConfig+0xc8>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d007      	beq.n	800d7be <TIM_OC5_SetConfig+0x82>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a15      	ldr	r2, [pc, #84]	; (800d808 <TIM_OC5_SetConfig+0xcc>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d003      	beq.n	800d7be <TIM_OC5_SetConfig+0x82>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a14      	ldr	r2, [pc, #80]	; (800d80c <TIM_OC5_SetConfig+0xd0>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d109      	bne.n	800d7d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	695b      	ldr	r3, [r3, #20]
 800d7ca:	021b      	lsls	r3, r3, #8
 800d7cc:	697a      	ldr	r2, [r7, #20]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	685a      	ldr	r2, [r3, #4]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	621a      	str	r2, [r3, #32]
}
 800d7ec:	bf00      	nop
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	40012c00 	.word	0x40012c00
 800d7fc:	40013400 	.word	0x40013400
 800d800:	40014000 	.word	0x40014000
 800d804:	40014400 	.word	0x40014400
 800d808:	40014800 	.word	0x40014800
 800d80c:	40015000 	.word	0x40015000

0800d810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d83e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	021b      	lsls	r3, r3, #8
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	051b      	lsls	r3, r3, #20
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	4313      	orrs	r3, r2
 800d862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a1a      	ldr	r2, [pc, #104]	; (800d8d0 <TIM_OC6_SetConfig+0xc0>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d013      	beq.n	800d894 <TIM_OC6_SetConfig+0x84>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a19      	ldr	r2, [pc, #100]	; (800d8d4 <TIM_OC6_SetConfig+0xc4>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d00f      	beq.n	800d894 <TIM_OC6_SetConfig+0x84>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a18      	ldr	r2, [pc, #96]	; (800d8d8 <TIM_OC6_SetConfig+0xc8>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d00b      	beq.n	800d894 <TIM_OC6_SetConfig+0x84>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a17      	ldr	r2, [pc, #92]	; (800d8dc <TIM_OC6_SetConfig+0xcc>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d007      	beq.n	800d894 <TIM_OC6_SetConfig+0x84>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a16      	ldr	r2, [pc, #88]	; (800d8e0 <TIM_OC6_SetConfig+0xd0>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d003      	beq.n	800d894 <TIM_OC6_SetConfig+0x84>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a15      	ldr	r2, [pc, #84]	; (800d8e4 <TIM_OC6_SetConfig+0xd4>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d109      	bne.n	800d8a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d89a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	029b      	lsls	r3, r3, #10
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	693a      	ldr	r2, [r7, #16]
 800d8c0:	621a      	str	r2, [r3, #32]
}
 800d8c2:	bf00      	nop
 800d8c4:	371c      	adds	r7, #28
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	40012c00 	.word	0x40012c00
 800d8d4:	40013400 	.word	0x40013400
 800d8d8:	40014000 	.word	0x40014000
 800d8dc:	40014400 	.word	0x40014400
 800d8e0:	40014800 	.word	0x40014800
 800d8e4:	40015000 	.word	0x40015000

0800d8e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6a1b      	ldr	r3, [r3, #32]
 800d8f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6a1b      	ldr	r3, [r3, #32]
 800d8fe:	f023 0201 	bic.w	r2, r3, #1
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f023 030a 	bic.w	r3, r3, #10
 800d924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	693a      	ldr	r2, [r7, #16]
 800d932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	621a      	str	r2, [r3, #32]
}
 800d93a:	bf00      	nop
 800d93c:	371c      	adds	r7, #28
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d946:	b480      	push	{r7}
 800d948:	b087      	sub	sp, #28
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	60f8      	str	r0, [r7, #12]
 800d94e:	60b9      	str	r1, [r7, #8]
 800d950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	f023 0210 	bic.w	r2, r3, #16
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6a1b      	ldr	r3, [r3, #32]
 800d968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	031b      	lsls	r3, r3, #12
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	4313      	orrs	r3, r2
 800d97a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	693a      	ldr	r2, [r7, #16]
 800d998:	621a      	str	r2, [r3, #32]
}
 800d99a:	bf00      	nop
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	f043 0307 	orr.w	r3, r3, #7
 800d9cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	609a      	str	r2, [r3, #8]
}
 800d9d4:	bf00      	nop
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
 800d9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	021a      	lsls	r2, r3, #8
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	431a      	orrs	r2, r3
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	4313      	orrs	r3, r2
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	609a      	str	r2, [r3, #8]
}
 800da14:	bf00      	nop
 800da16:	371c      	adds	r7, #28
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da20:	b480      	push	{r7}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	f003 031f 	and.w	r3, r3, #31
 800da32:	2201      	movs	r2, #1
 800da34:	fa02 f303 	lsl.w	r3, r2, r3
 800da38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6a1a      	ldr	r2, [r3, #32]
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	43db      	mvns	r3, r3
 800da42:	401a      	ands	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6a1a      	ldr	r2, [r3, #32]
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f003 031f 	and.w	r3, r3, #31
 800da52:	6879      	ldr	r1, [r7, #4]
 800da54:	fa01 f303 	lsl.w	r3, r1, r3
 800da58:	431a      	orrs	r2, r3
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	621a      	str	r2, [r3, #32]
}
 800da5e:	bf00      	nop
 800da60:	371c      	adds	r7, #28
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
	...

0800da6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d101      	bne.n	800da84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da80:	2302      	movs	r3, #2
 800da82:	e074      	b.n	800db6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2201      	movs	r2, #1
 800da88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2202      	movs	r2, #2
 800da90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a34      	ldr	r2, [pc, #208]	; (800db7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d009      	beq.n	800dac2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a33      	ldr	r2, [pc, #204]	; (800db80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d004      	beq.n	800dac2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a31      	ldr	r2, [pc, #196]	; (800db84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d108      	bne.n	800dad4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dac8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800dada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a21      	ldr	r2, [pc, #132]	; (800db7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d022      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db04:	d01d      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a1f      	ldr	r2, [pc, #124]	; (800db88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d018      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a1d      	ldr	r2, [pc, #116]	; (800db8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d013      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a1c      	ldr	r2, [pc, #112]	; (800db90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d00e      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a15      	ldr	r2, [pc, #84]	; (800db80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d009      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a18      	ldr	r2, [pc, #96]	; (800db94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d004      	beq.n	800db42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a11      	ldr	r2, [pc, #68]	; (800db84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d10c      	bne.n	800db5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4313      	orrs	r3, r2
 800db52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	40012c00 	.word	0x40012c00
 800db80:	40013400 	.word	0x40013400
 800db84:	40015000 	.word	0x40015000
 800db88:	40000400 	.word	0x40000400
 800db8c:	40000800 	.word	0x40000800
 800db90:	40000c00 	.word	0x40000c00
 800db94:	40014000 	.word	0x40014000

0800db98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	6812      	ldr	r2, [r2, #0]
 800dc3c:	f023 0101 	bic.w	r1, r3, #1
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	2b08      	cmp	r3, #8
 800dc4c:	d102      	bne.n	800dc54 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800dc4e:	2340      	movs	r3, #64	; 0x40
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e001      	b.n	800dc58 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800dc64:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800dc6a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800dc70:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800dc76:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800dc7c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800dc82:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800dc88:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800dc8e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800dc94:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca2:	693a      	ldr	r2, [r7, #16]
 800dca4:	4313      	orrs	r3, r2
 800dca6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb6:	693a      	ldr	r2, [r7, #16]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800dcc6:	4b3d      	ldr	r3, [pc, #244]	; (800ddbc <FMC_NORSRAM_Init+0x198>)
 800dcc8:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcd0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dcd8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800dce0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800dce8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	43db      	mvns	r3, r3
 800dcf8:	ea02 0103 	and.w	r1, r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	4319      	orrs	r1, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd12:	d10c      	bne.n	800dd2e <FMC_NORSRAM_Init+0x10a>
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d008      	beq.n	800dd2e <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd28:	431a      	orrs	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d006      	beq.n	800dd44 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3e:	431a      	orrs	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d12f      	bne.n	800ddae <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	0c1b      	lsrs	r3, r3, #16
 800dd54:	041b      	lsls	r3, r3, #16
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b04      	cmp	r3, #4
 800dd66:	d014      	beq.n	800dd92 <FMC_NORSRAM_Init+0x16e>
 800dd68:	2b04      	cmp	r3, #4
 800dd6a:	d819      	bhi.n	800dda0 <FMC_NORSRAM_Init+0x17c>
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d002      	beq.n	800dd76 <FMC_NORSRAM_Init+0x152>
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d007      	beq.n	800dd84 <FMC_NORSRAM_Init+0x160>
 800dd74:	e014      	b.n	800dda0 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1b      	ldr	r3, [r3, #32]
 800dd7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	621a      	str	r2, [r3, #32]
        break;
 800dd82:	e014      	b.n	800ddae <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
 800dd88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	621a      	str	r2, [r3, #32]
        break;
 800dd90:	e00d      	b.n	800ddae <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a1b      	ldr	r3, [r3, #32]
 800dd96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	621a      	str	r2, [r3, #32]
        break;
 800dd9e:	e006      	b.n	800ddae <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
 800dda4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	621a      	str	r2, [r3, #32]
        break;
 800ddac:	bf00      	nop
    }
  }

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	371c      	adds	r7, #28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr
 800ddbc:	0008fb7f 	.word	0x0008fb7f

0800ddc0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	011b      	lsls	r3, r3, #4
 800dde0:	431a      	orrs	r2, r3
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	689b      	ldr	r3, [r3, #8]
 800dde6:	021b      	lsls	r3, r3, #8
 800dde8:	431a      	orrs	r2, r3
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	079b      	lsls	r3, r3, #30
 800ddf0:	431a      	orrs	r2, r3
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	041b      	lsls	r3, r3, #16
 800ddf8:	431a      	orrs	r2, r3
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	3b01      	subs	r3, #1
 800de00:	051b      	lsls	r3, r3, #20
 800de02:	431a      	orrs	r2, r3
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	3b02      	subs	r3, #2
 800de0a:	061b      	lsls	r3, r3, #24
 800de0c:	ea42 0103 	orr.w	r1, r2, r3
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	69db      	ldr	r3, [r3, #28]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	3201      	adds	r2, #1
 800de18:	4319      	orrs	r1, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de2c:	d113      	bne.n	800de56 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de36:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	051b      	lsls	r3, r3, #20
 800de40:	697a      	ldr	r2, [r7, #20]
 800de42:	4313      	orrs	r3, r2
 800de44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	431a      	orrs	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de78:	d121      	bne.n	800debe <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de82:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	6819      	ldr	r1, [r3, #0]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	011b      	lsls	r3, r3, #4
 800de90:	4319      	orrs	r1, r3
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	021b      	lsls	r3, r3, #8
 800de98:	4319      	orrs	r1, r3
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	079b      	lsls	r3, r3, #30
 800dea0:	4319      	orrs	r1, r3
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	69db      	ldr	r3, [r3, #28]
 800dea6:	4319      	orrs	r1, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	041b      	lsls	r3, r3, #16
 800deae:	430b      	orrs	r3, r1
 800deb0:	ea42 0103 	orr.w	r1, r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800debc:	e005      	b.n	800deca <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800dec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <setpixel>:
#include "framebuf.h"

#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))

void setpixel(const tFramebuf *fb, unsigned int x, unsigned int y, uint32_t col) {
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	603b      	str	r3, [r7, #0]
	((uint16_t *)fb->buf)[x + y * fb->stride] = col;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	891b      	ldrh	r3, [r3, #8]
 800deee:	4619      	mov	r1, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	fb03 f101 	mul.w	r1, r3, r1
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	440b      	add	r3, r1
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	4413      	add	r3, r2
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	b292      	uxth	r2, r2
 800df02:	801a      	strh	r2, [r3, #0]
}
 800df04:	bf00      	nop
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <setpixel_checked>:

void setpixel_checked(const tFramebuf *fb, int x, int y, int col, int mask) {
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
 800df1c:	603b      	str	r3, [r7, #0]
    if (mask && 0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d017      	beq.n	800df54 <setpixel_checked+0x44>
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	db14      	blt.n	800df54 <setpixel_checked+0x44>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	889b      	ldrh	r3, [r3, #4]
 800df2e:	461a      	mov	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	4293      	cmp	r3, r2
 800df34:	da0e      	bge.n	800df54 <setpixel_checked+0x44>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	db0b      	blt.n	800df54 <setpixel_checked+0x44>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	88db      	ldrh	r3, [r3, #6]
 800df40:	461a      	mov	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4293      	cmp	r3, r2
 800df46:	da05      	bge.n	800df54 <setpixel_checked+0x44>
        setpixel(fb, x, y, col);
 800df48:	68b9      	ldr	r1, [r7, #8]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff ffc2 	bl	800ded8 <setpixel>
    }
}
 800df54:	bf00      	nop
 800df56:	3710      	adds	r7, #16
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <fill_rect>:

uint32_t getpixel(const tFramebuf *fb, unsigned int x, unsigned int y) {
	return ((uint16_t *)fb->buf)[x + y * fb->stride];
}

void fill_rect(const tFramebuf *fb, int x, int y, int w, int h, uint32_t col) {
 800df5c:	b480      	push	{r7}
 800df5e:	b089      	sub	sp, #36	; 0x24
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	607a      	str	r2, [r7, #4]
 800df68:	603b      	str	r3, [r7, #0]
    if (h < 1 || w < 1 || x + w <= 0 || y + h <= 0 || y >= fb->height || x >= fb->width) {
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dd66      	ble.n	800e03e <fill_rect+0xe2>
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	dd63      	ble.n	800e03e <fill_rect+0xe2>
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	4413      	add	r3, r2
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	dd5e      	ble.n	800e03e <fill_rect+0xe2>
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	4413      	add	r3, r2
 800df86:	2b00      	cmp	r3, #0
 800df88:	dd59      	ble.n	800e03e <fill_rect+0xe2>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	88db      	ldrh	r3, [r3, #6]
 800df8e:	461a      	mov	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4293      	cmp	r3, r2
 800df94:	da53      	bge.n	800e03e <fill_rect+0xe2>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	889b      	ldrh	r3, [r3, #4]
 800df9a:	461a      	mov	r2, r3
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	da4d      	bge.n	800e03e <fill_rect+0xe2>
        // No operation needed.
        return;
    }

    // clip to the framebuffer
    int xend = MIN(fb->width, x + w);
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	8892      	ldrh	r2, [r2, #4]
 800dfac:	4293      	cmp	r3, r2
 800dfae:	bfa8      	it	ge
 800dfb0:	4613      	movge	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]
    int yend = MIN(fb->height, y + h);
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb8:	4413      	add	r3, r2
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	88d2      	ldrh	r2, [r2, #6]
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	bfa8      	it	ge
 800dfc2:	4613      	movge	r3, r2
 800dfc4:	613b      	str	r3, [r7, #16]
    x = MAX(x, 0);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dfcc:	60bb      	str	r3, [r7, #8]
    y = MAX(y, 0);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dfd4:	607b      	str	r3, [r7, #4]

    w = xend - x;
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	603b      	str	r3, [r7, #0]
    h = yend - y;
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t *b = &((uint16_t *)fb->buf)[x + y * fb->stride];
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	891b      	ldrh	r3, [r3, #8]
 800dfee:	4619      	mov	r1, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	fb03 f101 	mul.w	r1, r3, r1
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	440b      	add	r3, r1
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	4413      	add	r3, r2
 800dffe:	61fb      	str	r3, [r7, #28]
    while (h--){
 800e000:	e017      	b.n	800e032 <fill_rect+0xd6>
    	for (unsigned int ww = w; ww; --ww) {
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	e008      	b.n	800e01a <fill_rect+0xbe>
            *b++ = col;
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	1c9a      	adds	r2, r3, #2
 800e00c:	61fa      	str	r2, [r7, #28]
 800e00e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e010:	b292      	uxth	r2, r2
 800e012:	801a      	strh	r2, [r3, #0]
    	for (unsigned int ww = w; ww; --ww) {
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	3b01      	subs	r3, #1
 800e018:	61bb      	str	r3, [r7, #24]
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1f3      	bne.n	800e008 <fill_rect+0xac>
        }
        b += fb->stride - w;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	891b      	ldrh	r3, [r3, #8]
 800e024:	461a      	mov	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	005b      	lsls	r3, r3, #1
 800e02c:	69fa      	ldr	r2, [r7, #28]
 800e02e:	4413      	add	r3, r2
 800e030:	61fb      	str	r3, [r7, #28]
    while (h--){
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	1e5a      	subs	r2, r3, #1
 800e036:	62ba      	str	r2, [r7, #40]	; 0x28
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1e2      	bne.n	800e002 <fill_rect+0xa6>
 800e03c:	e000      	b.n	800e040 <fill_rect+0xe4>
        return;
 800e03e:	bf00      	nop
    }
}
 800e040:	3724      	adds	r7, #36	; 0x24
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <framebuf_init>:

void framebuf_init(tFramebuf *fb, uint16_t width, uint16_t height, char *buf ) {
 800e04a:	b480      	push	{r7}
 800e04c:	b085      	sub	sp, #20
 800e04e:	af00      	add	r7, sp, #0
 800e050:	60f8      	str	r0, [r7, #12]
 800e052:	607b      	str	r3, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	817b      	strh	r3, [r7, #10]
 800e058:	4613      	mov	r3, r2
 800e05a:	813b      	strh	r3, [r7, #8]
    fb->width = width;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	897a      	ldrh	r2, [r7, #10]
 800e060:	809a      	strh	r2, [r3, #4]
    fb->height = height;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	893a      	ldrh	r2, [r7, #8]
 800e066:	80da      	strh	r2, [r3, #6]
	fb->buf = buf;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	601a      	str	r2, [r3, #0]
	fb->stride = fb->width;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	889a      	ldrh	r2, [r3, #4]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	811a      	strh	r2, [r3, #8]
}
 800e076:	bf00      	nop
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <framebuf_fill>:

void framebuf_fill( const tFramebuf *fb, uint32_t col ) {
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af02      	add	r7, sp, #8
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
    fill_rect( fb, 0, 0, fb->width, fb->height, col);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	889b      	ldrh	r3, [r3, #4]
 800e090:	4619      	mov	r1, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	88db      	ldrh	r3, [r3, #6]
 800e096:	461a      	mov	r2, r3
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	9301      	str	r3, [sp, #4]
 800e09c:	9200      	str	r2, [sp, #0]
 800e09e:	460b      	mov	r3, r1
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff ff59 	bl	800df5c <fill_rect>
}
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <framebuf_fill_rect>:

void framebuf_fill_rect( const tFramebuf *fb, int x, int y, int w, int h, uint32_t col ) {
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b086      	sub	sp, #24
 800e0b6:	af02      	add	r7, sp, #8
 800e0b8:	60f8      	str	r0, [r7, #12]
 800e0ba:	60b9      	str	r1, [r7, #8]
 800e0bc:	607a      	str	r2, [r7, #4]
 800e0be:	603b      	str	r3, [r7, #0]
    fill_rect( fb, x, y, w, h, col );
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	9301      	str	r3, [sp, #4]
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	68b9      	ldr	r1, [r7, #8]
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7ff ff44 	bl	800df5c <fill_rect>
}
 800e0d4:	bf00      	nop
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <framebuf_pixel>:

void framebuf_pixel( const tFramebuf *fb, int x, int y, uint32_t col ) {
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	603b      	str	r3, [r7, #0]
    if (0 <= x && x < fb->width && 0 <= y && y < fb->height) {
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	db14      	blt.n	800e11a <framebuf_pixel+0x3e>
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	889b      	ldrh	r3, [r3, #4]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	da0e      	bge.n	800e11a <framebuf_pixel+0x3e>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	db0b      	blt.n	800e11a <framebuf_pixel+0x3e>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	88db      	ldrh	r3, [r3, #6]
 800e106:	461a      	mov	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4293      	cmp	r3, r2
 800e10c:	da05      	bge.n	800e11a <framebuf_pixel+0x3e>
		setpixel( fb, x, y,  col );
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f7ff fedf 	bl	800ded8 <setpixel>
    }
}
 800e11a:	bf00      	nop
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <framebuf_hline>:

void framebuf_hline( const tFramebuf *fb, int x, int y, int w, uint32_t col ) {
 800e122:	b580      	push	{r7, lr}
 800e124:	b086      	sub	sp, #24
 800e126:	af02      	add	r7, sp, #8
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	60b9      	str	r1, [r7, #8]
 800e12c:	607a      	str	r2, [r7, #4]
 800e12e:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, w, 1, col );
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	2301      	movs	r3, #1
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	68b9      	ldr	r1, [r7, #8]
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f7ff ff0c 	bl	800df5c <fill_rect>
}
 800e144:	bf00      	nop
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <framebuf_vline>:

void framebuf_vline( const tFramebuf *fb, int x, int y, int h, uint32_t col ) {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af02      	add	r7, sp, #8
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	603b      	str	r3, [r7, #0]
	fill_rect( fb, x, y, 1, h, col );
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	2301      	movs	r3, #1
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	68b9      	ldr	r1, [r7, #8]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f7ff fef7 	bl	800df5c <fill_rect>
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <line>:
	fill_rect( fb, x, y + h - 1, w, 1, col );
	fill_rect( fb, x, y, 1, h, col );
	fill_rect( fb, x + w - 1, y, 1, h, col );
}

void line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800e176:	b580      	push	{r7, lr}
 800e178:	b08c      	sub	sp, #48	; 0x30
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
 800e182:	603b      	str	r3, [r7, #0]
	int dx = x2 - x1;
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sx;
    if (dx > 0) {
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dd02      	ble.n	800e198 <line+0x22>
        sx = 1;
 800e192:	2301      	movs	r3, #1
 800e194:	62bb      	str	r3, [r7, #40]	; 0x28
 800e196:	e005      	b.n	800e1a4 <line+0x2e>
    } else {
        dx = -dx;
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	425b      	negs	r3, r3
 800e19c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sx = -1;
 800e19e:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int dy = y2 - y1;
 800e1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	627b      	str	r3, [r7, #36]	; 0x24
    int sy;
    if (dy > 0) {
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	dd02      	ble.n	800e1b8 <line+0x42>
        sy = 1;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	623b      	str	r3, [r7, #32]
 800e1b6:	e005      	b.n	800e1c4 <line+0x4e>
    } else {
        dy = -dy;
 800e1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ba:	425b      	negs	r3, r3
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
        sy = -1;
 800e1be:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c2:	623b      	str	r3, [r7, #32]
    }

    int steep;
    if (dy > dx) {
 800e1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	dd14      	ble.n	800e1f6 <line+0x80>
        int temp;
        temp = x1;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	613b      	str	r3, [r7, #16]
        x1 = y1;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	60bb      	str	r3, [r7, #8]
        y1 = temp;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	607b      	str	r3, [r7, #4]
        temp = dx;
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1da:	613b      	str	r3, [r7, #16]
        dx = dy;
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	62fb      	str	r3, [r7, #44]	; 0x2c
        dy = temp;
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	627b      	str	r3, [r7, #36]	; 0x24
        temp = sx;
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	613b      	str	r3, [r7, #16]
        sx = sy;
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	62bb      	str	r3, [r7, #40]	; 0x28
        sy = temp;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	623b      	str	r3, [r7, #32]
        steep = 1;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	61fb      	str	r3, [r7, #28]
 800e1f4:	e001      	b.n	800e1fa <line+0x84>
    } else {
        steep = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	61fb      	str	r3, [r7, #28]
    }

    int e = 2 * dy - dx;
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	005a      	lsls	r2, r3, #1
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800e204:	2300      	movs	r3, #0
 800e206:	617b      	str	r3, [r7, #20]
 800e208:	e04c      	b.n	800e2a4 <line+0x12e>
        if (steep) {
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d018      	beq.n	800e242 <line+0xcc>
            if (0 <= y1 && y1 < fb->width && 0 <= x1 && x1 < fb->height) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	db37      	blt.n	800e286 <line+0x110>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	889b      	ldrh	r3, [r3, #4]
 800e21a:	461a      	mov	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4293      	cmp	r3, r2
 800e220:	da31      	bge.n	800e286 <line+0x110>
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	2b00      	cmp	r3, #0
 800e226:	db2e      	blt.n	800e286 <line+0x110>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	88db      	ldrh	r3, [r3, #6]
 800e22c:	461a      	mov	r2, r3
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	4293      	cmp	r3, r2
 800e232:	da28      	bge.n	800e286 <line+0x110>
                setpixel(fb, y1, x1, col);
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f7ff fe4c 	bl	800ded8 <setpixel>
 800e240:	e021      	b.n	800e286 <line+0x110>
            }
        } else {
            if (0 <= x1 && x1 < fb->width && 0 <= y1 && y1 < fb->height) {
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	db1e      	blt.n	800e286 <line+0x110>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	889b      	ldrh	r3, [r3, #4]
 800e24c:	461a      	mov	r2, r3
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	4293      	cmp	r3, r2
 800e252:	da18      	bge.n	800e286 <line+0x110>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	db15      	blt.n	800e286 <line+0x110>
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	88db      	ldrh	r3, [r3, #6]
 800e25e:	461a      	mov	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4293      	cmp	r3, r2
 800e264:	da0f      	bge.n	800e286 <line+0x110>
                setpixel(fb, x1, y1, col);
 800e266:	68b9      	ldr	r1, [r7, #8]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7ff fe33 	bl	800ded8 <setpixel>
            }
        }
        while (e >= 0) {
 800e272:	e008      	b.n	800e286 <line+0x110>
            y1 += sy;
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	4413      	add	r3, r2
 800e27a:	607b      	str	r3, [r7, #4]
            e -= 2 * dx;
 800e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	69ba      	ldr	r2, [r7, #24]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	61bb      	str	r3, [r7, #24]
        while (e >= 0) {
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	daf3      	bge.n	800e274 <line+0xfe>
        }
        x1 += sx;
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	4413      	add	r3, r2
 800e292:	60bb      	str	r3, [r7, #8]
        e += 2 * dy;
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	69ba      	ldr	r2, [r7, #24]
 800e29a:	4413      	add	r3, r2
 800e29c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < dx; ++i) {
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	697a      	ldr	r2, [r7, #20]
 800e2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	dbae      	blt.n	800e20a <line+0x94>
    }

    if (0 <= x2 && x2 < fb->width && 0 <= y2 && y2 < fb->height) {
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	db14      	blt.n	800e2dc <line+0x166>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	889b      	ldrh	r3, [r3, #4]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	da0e      	bge.n	800e2dc <line+0x166>
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	db0b      	blt.n	800e2dc <line+0x166>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	88db      	ldrh	r3, [r3, #6]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	da05      	bge.n	800e2dc <line+0x166>
        setpixel(fb, x2, y2, col);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f7ff fdfe 	bl	800ded8 <setpixel>
    }
}
 800e2dc:	bf00      	nop
 800e2de:	3730      	adds	r7, #48	; 0x30
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <framebuf_line>:

void framebuf_line(const tFramebuf *fb, int x1, int y1, int x2, int y2, uint32_t col) {
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b086      	sub	sp, #24
 800e2e8:	af02      	add	r7, sp, #8
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
 800e2f0:	603b      	str	r3, [r7, #0]
    line( fb, x1, y1, x2, y2, col );
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f7ff ff38 	bl	800e176 <line>
}
 800e306:	bf00      	nop
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <framebuf_circle>:
        }
    }
}
*/

void framebuf_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800e30e:	b580      	push	{r7, lr}
 800e310:	b088      	sub	sp, #32
 800e312:	af00      	add	r7, sp, #0
 800e314:	60f8      	str	r0, [r7, #12]
 800e316:	60b9      	str	r1, [r7, #8]
 800e318:	607a      	str	r2, [r7, #4]
 800e31a:	603b      	str	r3, [r7, #0]
    int x = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	f1c3 0303 	rsb	r3, r3, #3
 800e32c:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e32e:	e067      	b.n	800e400 <framebuf_circle+0xf2>
        framebuf_pixel(fb, xc + x, yc + y, col);
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	18d1      	adds	r1, r2, r3
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	441a      	add	r2, r3
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff fecc 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc + y, col);
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	1ad1      	subs	r1, r2, r3
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	441a      	add	r2, r3
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f7ff fec2 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc + x, yc - y, col);
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	18d1      	adds	r1, r2, r3
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	1ad2      	subs	r2, r2, r3
 800e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f7ff feb8 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc - x, yc - y, col);
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	1ad1      	subs	r1, r2, r3
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	1ad2      	subs	r2, r2, r3
 800e378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f7ff feae 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc + x, col);
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	18d1      	adds	r1, r2, r3
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	441a      	add	r2, r3
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f7ff fea4 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc + x, col);
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	1ad1      	subs	r1, r2, r3
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	441a      	add	r2, r3
 800e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7ff fe9a 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc + y, yc - x, col);
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	18d1      	adds	r1, r2, r3
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	1ad2      	subs	r2, r2, r3
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f7ff fe90 	bl	800e0dc <framebuf_pixel>
        framebuf_pixel(fb, xc - y, yc - x, col);
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	1ad1      	subs	r1, r2, r3
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	1ad2      	subs	r2, r2, r3
 800e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f7ff fe86 	bl	800e0dc <framebuf_pixel>

        if (d < 0) {
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	da06      	bge.n	800e3e4 <framebuf_circle+0xd6>
            d = d + 4 * x + 6;
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	009a      	lsls	r2, r3, #2
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	4413      	add	r3, r2
 800e3de:	3306      	adds	r3, #6
 800e3e0:	617b      	str	r3, [r7, #20]
 800e3e2:	e00a      	b.n	800e3fa <framebuf_circle+0xec>
        } else {
            d = d + 4 * (x - y) + 10;
 800e3e4:	69fa      	ldr	r2, [r7, #28]
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	009a      	lsls	r2, r3, #2
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	330a      	adds	r3, #10
 800e3f2:	617b      	str	r3, [r7, #20]
            y--;
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e400:	69fa      	ldr	r2, [r7, #28]
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	429a      	cmp	r2, r3
 800e406:	dd93      	ble.n	800e330 <framebuf_circle+0x22>
    }
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	3720      	adds	r7, #32
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <framebuf_circle_quadrant>:
#define QUADRANT_0   0x01
#define QUADRANT_90  0x02
#define QUADRANT_180 0x04
#define QUADRANT_270 0x08
void framebuf_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800e412:	b580      	push	{r7, lr}
 800e414:	b088      	sub	sp, #32
 800e416:	af00      	add	r7, sp, #0
 800e418:	60f8      	str	r0, [r7, #12]
 800e41a:	60b9      	str	r1, [r7, #8]
 800e41c:	607a      	str	r2, [r7, #4]
 800e41e:	603b      	str	r3, [r7, #0]
    int x = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	f1c3 0303 	rsb	r3, r3, #3
 800e430:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e432:	e07f      	b.n	800e534 <framebuf_circle_quadrant+0x122>
        if (quadrant & QUADRANT_0) {
 800e434:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d013      	beq.n	800e468 <framebuf_circle_quadrant+0x56>
            framebuf_pixel(fb, xc + x, yc + y, col);
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	18d1      	adds	r1, r2, r3
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	441a      	add	r2, r3
 800e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7ff fe44 	bl	800e0dc <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc + x, col);
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	18d1      	adds	r1, r2, r3
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	441a      	add	r2, r3
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f7ff fe3a 	bl	800e0dc <framebuf_pixel>
        }
        if (quadrant & QUADRANT_90) {
 800e468:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e46c:	f003 0302 	and.w	r3, r3, #2
 800e470:	2b00      	cmp	r3, #0
 800e472:	d013      	beq.n	800e49c <framebuf_circle_quadrant+0x8a>
            framebuf_pixel(fb, xc - x, yc + y, col);
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	1ad1      	subs	r1, r2, r3
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	441a      	add	r2, r3
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f7ff fe2a 	bl	800e0dc <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc + x, col);
 800e488:	68ba      	ldr	r2, [r7, #8]
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	1ad1      	subs	r1, r2, r3
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	441a      	add	r2, r3
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f7ff fe20 	bl	800e0dc <framebuf_pixel>
        }
        if (quadrant & QUADRANT_180) {
 800e49c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e4a0:	f003 0304 	and.w	r3, r3, #4
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d013      	beq.n	800e4d0 <framebuf_circle_quadrant+0xbe>
            framebuf_pixel(fb, xc - x, yc - y, col);
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	1ad1      	subs	r1, r2, r3
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	1ad2      	subs	r2, r2, r3
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7ff fe10 	bl	800e0dc <framebuf_pixel>
            framebuf_pixel(fb, xc - y, yc - x, col);
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	1ad1      	subs	r1, r2, r3
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	1ad2      	subs	r2, r2, r3
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f7ff fe06 	bl	800e0dc <framebuf_pixel>
        }
        if (quadrant & QUADRANT_270) {
 800e4d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e4d4:	f003 0308 	and.w	r3, r3, #8
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d013      	beq.n	800e504 <framebuf_circle_quadrant+0xf2>
            framebuf_pixel(fb, xc + x, yc - y, col);
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	18d1      	adds	r1, r2, r3
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fdf6 	bl	800e0dc <framebuf_pixel>
            framebuf_pixel(fb, xc + y, yc - x, col);
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	18d1      	adds	r1, r2, r3
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	1ad2      	subs	r2, r2, r3
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7ff fdec 	bl	800e0dc <framebuf_pixel>
        }

        if (d < 0) {
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b00      	cmp	r3, #0
 800e508:	da06      	bge.n	800e518 <framebuf_circle_quadrant+0x106>
            d = d + 4 * x + 6;
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	009a      	lsls	r2, r3, #2
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	4413      	add	r3, r2
 800e512:	3306      	adds	r3, #6
 800e514:	617b      	str	r3, [r7, #20]
 800e516:	e00a      	b.n	800e52e <framebuf_circle_quadrant+0x11c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e518:	69fa      	ldr	r2, [r7, #28]
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	009a      	lsls	r2, r3, #2
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	4413      	add	r3, r2
 800e524:	330a      	adds	r3, #10
 800e526:	617b      	str	r3, [r7, #20]
            y--;
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	3301      	adds	r3, #1
 800e532:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e534:	69fa      	ldr	r2, [r7, #28]
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	429a      	cmp	r2, r3
 800e53a:	f77f af7b 	ble.w	800e434 <framebuf_circle_quadrant+0x22>
    }
}
 800e53e:	bf00      	nop
 800e540:	bf00      	nop
 800e542:	3720      	adds	r7, #32
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <framebuf_fill_circle>:

void framebuf_fill_circle(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col) {
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08a      	sub	sp, #40	; 0x28
 800e54c:	af02      	add	r7, sp, #8
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
 800e554:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	1ad1      	subs	r1, r2, r3
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	005a      	lsls	r2, r3, #1
 800e560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	4613      	mov	r3, r2
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f7ff fdda 	bl	800e122 <framebuf_hline>

    int x = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	f1c3 0303 	rsb	r3, r3, #3
 800e57e:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e580:	e055      	b.n	800e62e <framebuf_fill_circle+0xe6>
        if (y > 0) {
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	2b00      	cmp	r3, #0
 800e586:	dd1b      	ble.n	800e5c0 <framebuf_fill_circle+0x78>
            framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	1ad1      	subs	r1, r2, r3
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	1ad2      	subs	r2, r2, r3
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	0058      	lsls	r0, r3, #1
 800e598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59a:	9300      	str	r3, [sp, #0]
 800e59c:	4603      	mov	r3, r0
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f7ff fdbf 	bl	800e122 <framebuf_hline>
            framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e5a4:	68ba      	ldr	r2, [r7, #8]
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	1ad1      	subs	r1, r2, r3
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	441a      	add	r2, r3
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	0058      	lsls	r0, r3, #1
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f7ff fdb1 	bl	800e122 <framebuf_hline>
        }

        if (x > 0) {
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	dd1b      	ble.n	800e5fe <framebuf_fill_circle+0xb6>
            framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	1ad1      	subs	r1, r2, r3
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	1ad2      	subs	r2, r2, r3
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	0058      	lsls	r0, r3, #1
 800e5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	4603      	mov	r3, r0
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f7ff fda0 	bl	800e122 <framebuf_hline>
            framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e5e2:	68ba      	ldr	r2, [r7, #8]
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	1ad1      	subs	r1, r2, r3
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	441a      	add	r2, r3
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	0058      	lsls	r0, r3, #1
 800e5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f7ff fd92 	bl	800e122 <framebuf_hline>
        }

        if (d < 0) {
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	da06      	bge.n	800e612 <framebuf_fill_circle+0xca>
            d = d + 4 * x + 6;
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	009a      	lsls	r2, r3, #2
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	4413      	add	r3, r2
 800e60c:	3306      	adds	r3, #6
 800e60e:	617b      	str	r3, [r7, #20]
 800e610:	e00a      	b.n	800e628 <framebuf_fill_circle+0xe0>
        } else {
            d = d + 4 * (x - y) + 10;
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	009a      	lsls	r2, r3, #2
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	4413      	add	r3, r2
 800e61e:	330a      	adds	r3, #10
 800e620:	617b      	str	r3, [r7, #20]
            y--;
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	3b01      	subs	r3, #1
 800e626:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	3301      	adds	r3, #1
 800e62c:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e62e:	69fa      	ldr	r2, [r7, #28]
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	429a      	cmp	r2, r3
 800e634:	dda5      	ble.n	800e582 <framebuf_fill_circle+0x3a>
    }
}
 800e636:	bf00      	nop
 800e638:	bf00      	nop
 800e63a:	3720      	adds	r7, #32
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <framebuf_fill_circle_quadrant>:

void framebuf_fill_circle_quadrant(const tFramebuf *fb, int xc, int yc, int radius, uint32_t col, uint8_t quadrant) {
 800e640:	b580      	push	{r7, lr}
 800e642:	b08a      	sub	sp, #40	; 0x28
 800e644:	af02      	add	r7, sp, #8
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	603b      	str	r3, [r7, #0]
    framebuf_hline(fb, xc - radius, yc, 2 * radius, col);
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	1ad1      	subs	r1, r2, r3
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	005a      	lsls	r2, r3, #1
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	4613      	mov	r3, r2
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f7ff fd5e 	bl	800e122 <framebuf_hline>

    int x = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	61fb      	str	r3, [r7, #28]
    int y = radius;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	61bb      	str	r3, [r7, #24]
    int d = 3 - 2 * radius;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	f1c3 0303 	rsb	r3, r3, #3
 800e676:	617b      	str	r3, [r7, #20]

    while (x <= y) {
 800e678:	e0ab      	b.n	800e7d2 <framebuf_fill_circle_quadrant+0x192>
        if (quadrant & QUADRANT_0) {
 800e67a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d01e      	beq.n	800e6c4 <framebuf_fill_circle_quadrant+0x84>
            if (y > 0) {
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dd1b      	ble.n	800e6c4 <framebuf_fill_circle_quadrant+0x84>
                framebuf_hline(fb, xc + x, yc - y, 2 * x, col);
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	18d1      	adds	r1, r2, r3
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	1ad2      	subs	r2, r2, r3
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	0058      	lsls	r0, r3, #1
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7ff fd3d 	bl	800e122 <framebuf_hline>
                framebuf_hline(fb, xc + x, yc + y, 2 * x, col);
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	18d1      	adds	r1, r2, r3
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	441a      	add	r2, r3
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	0058      	lsls	r0, r3, #1
 800e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	4603      	mov	r3, r0
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f7ff fd2f 	bl	800e122 <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_90) {
 800e6c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e6c8:	f003 0302 	and.w	r3, r3, #2
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d01e      	beq.n	800e70e <framebuf_fill_circle_quadrant+0xce>
            if (x > 0) {
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	dd1b      	ble.n	800e70e <framebuf_fill_circle_quadrant+0xce>
                framebuf_hline(fb, xc - y, yc - x, 2 * y, col);
 800e6d6:	68ba      	ldr	r2, [r7, #8]
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	1ad1      	subs	r1, r2, r3
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	1ad2      	subs	r2, r2, r3
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	0058      	lsls	r0, r3, #1
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7ff fd18 	bl	800e122 <framebuf_hline>
                framebuf_hline(fb, xc - y, yc + x, 2 * y, col);
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	1ad1      	subs	r1, r2, r3
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	441a      	add	r2, r3
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	0058      	lsls	r0, r3, #1
 800e702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	4603      	mov	r3, r0
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f7ff fd0a 	bl	800e122 <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_180) {
 800e70e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e712:	f003 0304 	and.w	r3, r3, #4
 800e716:	2b00      	cmp	r3, #0
 800e718:	d01e      	beq.n	800e758 <framebuf_fill_circle_quadrant+0x118>
            if (y > 0) {
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	dd1b      	ble.n	800e758 <framebuf_fill_circle_quadrant+0x118>
                framebuf_hline(fb, xc - x, yc - y, 2 * x, col);
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	1ad1      	subs	r1, r2, r3
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	1ad2      	subs	r2, r2, r3
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	0058      	lsls	r0, r3, #1
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	4603      	mov	r3, r0
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f7ff fcf3 	bl	800e122 <framebuf_hline>
                framebuf_hline(fb, xc - x, yc + y, 2 * x, col);
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	1ad1      	subs	r1, r2, r3
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	441a      	add	r2, r3
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	0058      	lsls	r0, r3, #1
 800e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4603      	mov	r3, r0
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f7ff fce5 	bl	800e122 <framebuf_hline>
            }
        }
        if (quadrant & QUADRANT_270) {
 800e758:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b00      	cmp	r3, #0
 800e762:	d01e      	beq.n	800e7a2 <framebuf_fill_circle_quadrant+0x162>
            if (x > 0) {
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	2b00      	cmp	r3, #0
 800e768:	dd1b      	ble.n	800e7a2 <framebuf_fill_circle_quadrant+0x162>
                framebuf_hline(fb, xc + y, yc - x, 2 * y, col);
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	18d1      	adds	r1, r2, r3
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	1ad2      	subs	r2, r2, r3
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	0058      	lsls	r0, r3, #1
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	4603      	mov	r3, r0
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7ff fcce 	bl	800e122 <framebuf_hline>
                framebuf_hline(fb, xc + y, yc + x, 2 * y, col);
 800e786:	68ba      	ldr	r2, [r7, #8]
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	18d1      	adds	r1, r2, r3
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	441a      	add	r2, r3
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	0058      	lsls	r0, r3, #1
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	4603      	mov	r3, r0
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f7ff fcc0 	bl	800e122 <framebuf_hline>
            }
        }

        if (d < 0) {
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	da06      	bge.n	800e7b6 <framebuf_fill_circle_quadrant+0x176>
            d = d + 4 * x + 6;
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	009a      	lsls	r2, r3, #2
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	3306      	adds	r3, #6
 800e7b2:	617b      	str	r3, [r7, #20]
 800e7b4:	e00a      	b.n	800e7cc <framebuf_fill_circle_quadrant+0x18c>
        } else {
            d = d + 4 * (x - y) + 10;
 800e7b6:	69fa      	ldr	r2, [r7, #28]
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	009a      	lsls	r2, r3, #2
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	330a      	adds	r3, #10
 800e7c4:	617b      	str	r3, [r7, #20]
            y--;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	61bb      	str	r3, [r7, #24]
        }
        x++;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	61fb      	str	r3, [r7, #28]
    while (x <= y) {
 800e7d2:	69fa      	ldr	r2, [r7, #28]
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	f77f af4f 	ble.w	800e67a <framebuf_fill_circle_quadrant+0x3a>
    }
}
 800e7dc:	bf00      	nop
 800e7de:	bf00      	nop
 800e7e0:	3720      	adds	r7, #32
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <nk_buffer_init_fixed>:
    b->grow_factor = 2.0f;
    b->pool = *a;
}
NK_API void
nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
    NK_ASSERT(b);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d105      	bne.n	800e806 <nk_buffer_init_fixed+0x1e>
 800e7fa:	4b1b      	ldr	r3, [pc, #108]	; (800e868 <nk_buffer_init_fixed+0x80>)
 800e7fc:	4a1b      	ldr	r2, [pc, #108]	; (800e86c <nk_buffer_init_fixed+0x84>)
 800e7fe:	2136      	movs	r1, #54	; 0x36
 800e800:	481b      	ldr	r0, [pc, #108]	; (800e870 <nk_buffer_init_fixed+0x88>)
 800e802:	f016 f975 	bl	8024af0 <__assert_func>
    NK_ASSERT(m);
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d105      	bne.n	800e818 <nk_buffer_init_fixed+0x30>
 800e80c:	4b19      	ldr	r3, [pc, #100]	; (800e874 <nk_buffer_init_fixed+0x8c>)
 800e80e:	4a17      	ldr	r2, [pc, #92]	; (800e86c <nk_buffer_init_fixed+0x84>)
 800e810:	2137      	movs	r1, #55	; 0x37
 800e812:	4817      	ldr	r0, [pc, #92]	; (800e870 <nk_buffer_init_fixed+0x88>)
 800e814:	f016 f96c 	bl	8024af0 <__assert_func>
    NK_ASSERT(size);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d105      	bne.n	800e82a <nk_buffer_init_fixed+0x42>
 800e81e:	4b16      	ldr	r3, [pc, #88]	; (800e878 <nk_buffer_init_fixed+0x90>)
 800e820:	4a12      	ldr	r2, [pc, #72]	; (800e86c <nk_buffer_init_fixed+0x84>)
 800e822:	2138      	movs	r1, #56	; 0x38
 800e824:	4812      	ldr	r0, [pc, #72]	; (800e870 <nk_buffer_init_fixed+0x88>)
 800e826:	f016 f963 	bl	8024af0 <__assert_func>
    if (!b || !m || !size) return;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d016      	beq.n	800e85e <nk_buffer_init_fixed+0x76>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d013      	beq.n	800e85e <nk_buffer_init_fixed+0x76>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d010      	beq.n	800e85e <nk_buffer_init_fixed+0x76>

    nk_zero(b, sizeof(*b));
 800e83c:	213c      	movs	r1, #60	; 0x3c
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f013 ff2c 	bl	802269c <nk_zero>
    b->type = NK_BUFFER_FIXED;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2200      	movs	r2, #0
 800e848:	771a      	strb	r2, [r3, #28]
    b->memory.ptr = m;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	621a      	str	r2, [r3, #32]
    b->memory.size = size;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	625a      	str	r2, [r3, #36]	; 0x24
    b->size = size;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38
 800e85c:	e000      	b.n	800e860 <nk_buffer_init_fixed+0x78>
    if (!b || !m || !size) return;
 800e85e:	bf00      	nop
}
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	0802857c 	.word	0x0802857c
 800e86c:	0802a488 	.word	0x0802a488
 800e870:	08028580 	.word	0x08028580
 800e874:	080285b0 	.word	0x080285b0
 800e878:	080285b4 	.word	0x080285b4

0800e87c <nk_buffer_align>:
NK_LIB void*
nk_buffer_align(void *unaligned,
    nk_size align, nk_size *alignment,
    enum nk_buffer_allocation_type type)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b087      	sub	sp, #28
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	70fb      	strb	r3, [r7, #3]
    void *memory = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	617b      	str	r3, [r7, #20]
    switch (type) {
 800e88e:	78fb      	ldrb	r3, [r7, #3]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d018      	beq.n	800e8c6 <nk_buffer_align+0x4a>
    default:
    case NK_BUFFER_MAX:
    case NK_BUFFER_FRONT:
        if (align) {
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00f      	beq.n	800e8ba <nk_buffer_align+0x3e>
            memory = NK_ALIGN_PTR(unaligned, align);
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	3b01      	subs	r3, #1
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	425b      	negs	r3, r3
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 800e8ac:	697a      	ldr	r2, [r7, #20]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e8b8:	e01a      	b.n	800e8f0 <nk_buffer_align+0x74>
            memory = unaligned;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
        break;
 800e8c4:	e014      	b.n	800e8f0 <nk_buffer_align+0x74>
    case NK_BUFFER_BACK:
        if (align) {
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00b      	beq.n	800e8e4 <nk_buffer_align+0x68>
            memory = NK_ALIGN_PTR_BACK(unaligned, align);
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	425a      	negs	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	617b      	str	r3, [r7, #20]
            *alignment = (nk_size)((nk_byte*)unaligned - (nk_byte*)memory);
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	461a      	mov	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	601a      	str	r2, [r3, #0]
        } else {
            memory = unaligned;
            *alignment = 0;
        }
        break;
 800e8e2:	e004      	b.n	800e8ee <nk_buffer_align+0x72>
            memory = unaligned;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	617b      	str	r3, [r7, #20]
            *alignment = 0;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
        break;
 800e8ee:	bf00      	nop
    }
    return memory;
 800e8f0:	697b      	ldr	r3, [r7, #20]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	371c      	adds	r7, #28
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
	...

0800e900 <nk_buffer_realloc>:
NK_LIB void*
nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08a      	sub	sp, #40	; 0x28
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
    void *temp;
    nk_size buffer_size;

    NK_ASSERT(b);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d105      	bne.n	800e91e <nk_buffer_realloc+0x1e>
 800e912:	4b3c      	ldr	r3, [pc, #240]	; (800ea04 <nk_buffer_realloc+0x104>)
 800e914:	4a3c      	ldr	r2, [pc, #240]	; (800ea08 <nk_buffer_realloc+0x108>)
 800e916:	2165      	movs	r1, #101	; 0x65
 800e918:	483c      	ldr	r0, [pc, #240]	; (800ea0c <nk_buffer_realloc+0x10c>)
 800e91a:	f016 f8e9 	bl	8024af0 <__assert_func>
    NK_ASSERT(size);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d105      	bne.n	800e930 <nk_buffer_realloc+0x30>
 800e924:	4b3a      	ldr	r3, [pc, #232]	; (800ea10 <nk_buffer_realloc+0x110>)
 800e926:	4a38      	ldr	r2, [pc, #224]	; (800ea08 <nk_buffer_realloc+0x108>)
 800e928:	2166      	movs	r1, #102	; 0x66
 800e92a:	4838      	ldr	r0, [pc, #224]	; (800ea0c <nk_buffer_realloc+0x10c>)
 800e92c:	f016 f8e0 	bl	8024af0 <__assert_func>
    if (!b || !size || !b->pool.alloc || !b->pool.free)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00a      	beq.n	800e94c <nk_buffer_realloc+0x4c>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d007      	beq.n	800e94c <nk_buffer_realloc+0x4c>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	695b      	ldr	r3, [r3, #20]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d003      	beq.n	800e94c <nk_buffer_realloc+0x4c>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d101      	bne.n	800e950 <nk_buffer_realloc+0x50>
        return 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	e054      	b.n	800e9fa <nk_buffer_realloc+0xfa>

    buffer_size = b->memory.size;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e954:	627b      	str	r3, [r7, #36]	; 0x24
    temp = b->pool.alloc(b->pool.userdata, b->memory.ptr, capacity);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	695b      	ldr	r3, [r3, #20]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	6a11      	ldr	r1, [r2, #32]
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	6900      	ldr	r0, [r0, #16]
 800e964:	4798      	blx	r3
 800e966:	6238      	str	r0, [r7, #32]
    NK_ASSERT(temp);
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d105      	bne.n	800e97a <nk_buffer_realloc+0x7a>
 800e96e:	4b29      	ldr	r3, [pc, #164]	; (800ea14 <nk_buffer_realloc+0x114>)
 800e970:	4a25      	ldr	r2, [pc, #148]	; (800ea08 <nk_buffer_realloc+0x108>)
 800e972:	216c      	movs	r1, #108	; 0x6c
 800e974:	4825      	ldr	r0, [pc, #148]	; (800ea0c <nk_buffer_realloc+0x10c>)
 800e976:	f016 f8bb 	bl	8024af0 <__assert_func>
    if (!temp) return 0;
 800e97a:	6a3b      	ldr	r3, [r7, #32]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d101      	bne.n	800e984 <nk_buffer_realloc+0x84>
 800e980:	2300      	movs	r3, #0
 800e982:	e03a      	b.n	800e9fa <nk_buffer_realloc+0xfa>

    *size = capacity;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	601a      	str	r2, [r3, #0]
    if (temp != b->memory.ptr) {
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	6a3a      	ldr	r2, [r7, #32]
 800e990:	429a      	cmp	r2, r3
 800e992:	d00d      	beq.n	800e9b0 <nk_buffer_realloc+0xb0>
        NK_MEMCPY(temp, b->memory.ptr, buffer_size);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6a1b      	ldr	r3, [r3, #32]
 800e998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e99a:	4619      	mov	r1, r3
 800e99c:	6a38      	ldr	r0, [r7, #32]
 800e99e:	f013 fd2d 	bl	80223fc <nk_memcopy>
        b->pool.free(b->pool.userdata, b->memory.ptr);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	699b      	ldr	r3, [r3, #24]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	6a11      	ldr	r1, [r2, #32]
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	6910      	ldr	r0, [r2, #16]
 800e9ae:	4798      	blx	r3
    }

    if (b->size == buffer_size) {
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d104      	bne.n	800e9c4 <nk_buffer_realloc+0xc4>
        /* no back buffer so just set correct size */
        b->size = capacity;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	639a      	str	r2, [r3, #56]	; 0x38
        return temp;
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	e01a      	b.n	800e9fa <nk_buffer_realloc+0xfa>
    } else {
        /* copy back buffer to the end of the new buffer */
        void *dst, *src;
        nk_size back_size;
        back_size = buffer_size - b->size;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	61fb      	str	r3, [r7, #28]
        dst = nk_ptr_add(void, temp, capacity - back_size);
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	6a3a      	ldr	r2, [r7, #32]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	61bb      	str	r3, [r7, #24]
        src = nk_ptr_add(void, temp, b->size);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9de:	6a3a      	ldr	r2, [r7, #32]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	617b      	str	r3, [r7, #20]
        NK_MEMCPY(dst, src, back_size);
 800e9e4:	69fa      	ldr	r2, [r7, #28]
 800e9e6:	6979      	ldr	r1, [r7, #20]
 800e9e8:	69b8      	ldr	r0, [r7, #24]
 800e9ea:	f013 fd07 	bl	80223fc <nk_memcopy>
        b->size = capacity - back_size;
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	1ad2      	subs	r2, r2, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    return temp;
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3728      	adds	r7, #40	; 0x28
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	0802857c 	.word	0x0802857c
 800ea08:	0802a4a0 	.word	0x0802a4a0
 800ea0c:	08028580 	.word	0x08028580
 800ea10:	080285b4 	.word	0x080285b4
 800ea14:	080285bc 	.word	0x080285bc

0800ea18 <nk_buffer_alloc>:
NK_LIB void*
nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,
    nk_size size, nk_size align)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08a      	sub	sp, #40	; 0x28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	607a      	str	r2, [r7, #4]
 800ea22:	603b      	str	r3, [r7, #0]
 800ea24:	460b      	mov	r3, r1
 800ea26:	72fb      	strb	r3, [r7, #11]
    int full;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d105      	bne.n	800ea3a <nk_buffer_alloc+0x22>
 800ea2e:	4b7a      	ldr	r3, [pc, #488]	; (800ec18 <nk_buffer_alloc+0x200>)
 800ea30:	4a7a      	ldr	r2, [pc, #488]	; (800ec1c <nk_buffer_alloc+0x204>)
 800ea32:	218e      	movs	r1, #142	; 0x8e
 800ea34:	487a      	ldr	r0, [pc, #488]	; (800ec20 <nk_buffer_alloc+0x208>)
 800ea36:	f016 f85b 	bl	8024af0 <__assert_func>
    NK_ASSERT(size);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d105      	bne.n	800ea4c <nk_buffer_alloc+0x34>
 800ea40:	4b78      	ldr	r3, [pc, #480]	; (800ec24 <nk_buffer_alloc+0x20c>)
 800ea42:	4a76      	ldr	r2, [pc, #472]	; (800ec1c <nk_buffer_alloc+0x204>)
 800ea44:	218f      	movs	r1, #143	; 0x8f
 800ea46:	4876      	ldr	r0, [pc, #472]	; (800ec20 <nk_buffer_alloc+0x208>)
 800ea48:	f016 f852 	bl	8024af0 <__assert_func>
    if (!b || !size) return 0;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <nk_buffer_alloc+0x40>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <nk_buffer_alloc+0x44>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	e0d9      	b.n	800ec10 <nk_buffer_alloc+0x1f8>
    b->needed += size;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	441a      	add	r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	631a      	str	r2, [r3, #48]	; 0x30

    /* calculate total size with needed alignment + size */
    if (type == NK_BUFFER_FRONT)
 800ea68:	7afb      	ldrb	r3, [r7, #11]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d106      	bne.n	800ea7c <nk_buffer_alloc+0x64>
        unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6a1a      	ldr	r2, [r3, #32]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	4413      	add	r3, r2
 800ea78:	623b      	str	r3, [r7, #32]
 800ea7a:	e007      	b.n	800ea8c <nk_buffer_alloc+0x74>
    else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6a1a      	ldr	r2, [r3, #32]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	1acb      	subs	r3, r1, r3
 800ea88:	4413      	add	r3, r2
 800ea8a:	623b      	str	r3, [r7, #32]
    memory = nk_buffer_align(unaligned, align, &alignment, type);
 800ea8c:	7afb      	ldrb	r3, [r7, #11]
 800ea8e:	f107 0214 	add.w	r2, r7, #20
 800ea92:	6839      	ldr	r1, [r7, #0]
 800ea94:	6a38      	ldr	r0, [r7, #32]
 800ea96:	f7ff fef1 	bl	800e87c <nk_buffer_align>
 800ea9a:	61f8      	str	r0, [r7, #28]

    /* check if buffer has enough memory*/
    if (type == NK_BUFFER_FRONT)
 800ea9c:	7afb      	ldrb	r3, [r7, #11]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10e      	bne.n	800eac0 <nk_buffer_alloc+0xa8>
        full = ((b->allocated + size + alignment) > b->size);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	441a      	add	r2, r3
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	441a      	add	r2, r3
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab2:	429a      	cmp	r2, r3
 800eab4:	bf8c      	ite	hi
 800eab6:	2301      	movhi	r3, #1
 800eab8:	2300      	movls	r3, #0
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	627b      	str	r3, [r7, #36]	; 0x24
 800eabe:	e012      	b.n	800eae6 <nk_buffer_alloc+0xce>
    else full = ((b->size - NK_MIN(b->size,(size + alignment))) <= b->allocated);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eac4:	6979      	ldr	r1, [r7, #20]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4419      	add	r1, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eace:	428b      	cmp	r3, r1
 800ead0:	bf28      	it	cs
 800ead2:	460b      	movcs	r3, r1
 800ead4:	1ad2      	subs	r2, r2, r3
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eada:	429a      	cmp	r2, r3
 800eadc:	bf94      	ite	ls
 800eade:	2301      	movls	r3, #1
 800eae0:	2300      	movhi	r3, #0
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24

    if (full) {
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d071      	beq.n	800ebd0 <nk_buffer_alloc+0x1b8>
        nk_size capacity;
        if (b->type != NK_BUFFER_DYNAMIC)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	7f1b      	ldrb	r3, [r3, #28]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d001      	beq.n	800eaf8 <nk_buffer_alloc+0xe0>
            return 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	e08b      	b.n	800ec10 <nk_buffer_alloc+0x1f8>
        NK_ASSERT(b->pool.alloc && b->pool.free);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d003      	beq.n	800eb08 <nk_buffer_alloc+0xf0>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d105      	bne.n	800eb14 <nk_buffer_alloc+0xfc>
 800eb08:	4b47      	ldr	r3, [pc, #284]	; (800ec28 <nk_buffer_alloc+0x210>)
 800eb0a:	4a44      	ldr	r2, [pc, #272]	; (800ec1c <nk_buffer_alloc+0x204>)
 800eb0c:	21a2      	movs	r1, #162	; 0xa2
 800eb0e:	4844      	ldr	r0, [pc, #272]	; (800ec20 <nk_buffer_alloc+0x208>)
 800eb10:	f015 ffee 	bl	8024af0 <__assert_func>
        if (b->type != NK_BUFFER_DYNAMIC || !b->pool.alloc || !b->pool.free)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	7f1b      	ldrb	r3, [r3, #28]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d107      	bne.n	800eb2c <nk_buffer_alloc+0x114>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	695b      	ldr	r3, [r3, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d003      	beq.n	800eb2c <nk_buffer_alloc+0x114>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <nk_buffer_alloc+0x118>
            return 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	e06f      	b.n	800ec10 <nk_buffer_alloc+0x1f8>

        /* buffer is full so allocate bigger buffer if dynamic */
        capacity = (nk_size)((float)b->memory.size * b->grow_factor);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb34:	ee07 3a90 	vmov	s15, r3
 800eb38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800eb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb4a:	ee17 3a90 	vmov	r3, s15
 800eb4e:	61bb      	str	r3, [r7, #24]
        capacity = NK_MAX(capacity, nk_round_up_pow2((nk_uint)(b->allocated + size)));
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4413      	add	r3, r2
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f007 fd81 	bl	8016660 <nk_round_up_pow2>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d208      	bcs.n	800eb78 <nk_buffer_alloc+0x160>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f007 fd76 	bl	8016660 <nk_round_up_pow2>
 800eb74:	4603      	mov	r3, r0
 800eb76:	e000      	b.n	800eb7a <nk_buffer_alloc+0x162>
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	61bb      	str	r3, [r7, #24]
        b->memory.ptr = nk_buffer_realloc(b, capacity, &b->memory.size);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	3324      	adds	r3, #36	; 0x24
 800eb80:	461a      	mov	r2, r3
 800eb82:	69b9      	ldr	r1, [r7, #24]
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f7ff febb 	bl	800e900 <nk_buffer_realloc>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	621a      	str	r2, [r3, #32]
        if (!b->memory.ptr) return 0;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6a1b      	ldr	r3, [r3, #32]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <nk_buffer_alloc+0x184>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e039      	b.n	800ec10 <nk_buffer_alloc+0x1f8>

        /* align newly allocated pointer */
        if (type == NK_BUFFER_FRONT)
 800eb9c:	7afb      	ldrb	r3, [r7, #11]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d106      	bne.n	800ebb0 <nk_buffer_alloc+0x198>
            unaligned = nk_ptr_add(void, b->memory.ptr, b->allocated);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6a1a      	ldr	r2, [r3, #32]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebaa:	4413      	add	r3, r2
 800ebac:	623b      	str	r3, [r7, #32]
 800ebae:	e007      	b.n	800ebc0 <nk_buffer_alloc+0x1a8>
        else unaligned = nk_ptr_add(void, b->memory.ptr, b->size - size);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6a1a      	ldr	r2, [r3, #32]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	1acb      	subs	r3, r1, r3
 800ebbc:	4413      	add	r3, r2
 800ebbe:	623b      	str	r3, [r7, #32]
        memory = nk_buffer_align(unaligned, align, &alignment, type);
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	f107 0214 	add.w	r2, r7, #20
 800ebc6:	6839      	ldr	r1, [r7, #0]
 800ebc8:	6a38      	ldr	r0, [r7, #32]
 800ebca:	f7ff fe57 	bl	800e87c <nk_buffer_align>
 800ebce:	61f8      	str	r0, [r7, #28]
    }
    if (type == NK_BUFFER_FRONT)
 800ebd0:	7afb      	ldrb	r3, [r7, #11]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d108      	bne.n	800ebe8 <nk_buffer_alloc+0x1d0>
        b->allocated += size + alignment;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebda:	6979      	ldr	r1, [r7, #20]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	440b      	add	r3, r1
 800ebe0:	441a      	add	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	62da      	str	r2, [r3, #44]	; 0x2c
 800ebe6:	e007      	b.n	800ebf8 <nk_buffer_alloc+0x1e0>
    else b->size -= (size + alignment);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebec:	6979      	ldr	r1, [r7, #20]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	440b      	add	r3, r1
 800ebf2:	1ad2      	subs	r2, r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	639a      	str	r2, [r3, #56]	; 0x38
    b->needed += alignment;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	441a      	add	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	631a      	str	r2, [r3, #48]	; 0x30
    b->calls++;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec08:	1c5a      	adds	r2, r3, #1
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	635a      	str	r2, [r3, #52]	; 0x34
    return memory;
 800ec0e:	69fb      	ldr	r3, [r7, #28]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3728      	adds	r7, #40	; 0x28
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	0802857c 	.word	0x0802857c
 800ec1c:	0802a4b4 	.word	0x0802a4b4
 800ec20:	08028580 	.word	0x08028580
 800ec24:	080285b4 	.word	0x080285b4
 800ec28:	080285c4 	.word	0x080285c4

0800ec2c <nk_buffer_reset>:
        buffer->marker[type].offset = buffer->size;
    else buffer->marker[type].offset = buffer->allocated;
}
NK_API void
nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(buffer);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d105      	bne.n	800ec4a <nk_buffer_reset+0x1e>
 800ec3e:	4b2c      	ldr	r3, [pc, #176]	; (800ecf0 <nk_buffer_reset+0xc4>)
 800ec40:	4a2c      	ldr	r2, [pc, #176]	; (800ecf4 <nk_buffer_reset+0xc8>)
 800ec42:	21ce      	movs	r1, #206	; 0xce
 800ec44:	482c      	ldr	r0, [pc, #176]	; (800ecf8 <nk_buffer_reset+0xcc>)
 800ec46:	f015 ff53 	bl	8024af0 <__assert_func>
    if (!buffer) return;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d04b      	beq.n	800ece8 <nk_buffer_reset+0xbc>
    if (type == NK_BUFFER_BACK) {
 800ec50:	78fb      	ldrb	r3, [r7, #3]
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d124      	bne.n	800eca0 <nk_buffer_reset+0x74>
        /* reset back buffer either back to marker or empty */
        buffer->needed -= (buffer->memory.size - buffer->marker[type].offset);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec5a:	78fb      	ldrb	r3, [r7, #3]
 800ec5c:	6879      	ldr	r1, [r7, #4]
 800ec5e:	00db      	lsls	r3, r3, #3
 800ec60:	440b      	add	r3, r1
 800ec62:	6859      	ldr	r1, [r3, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec68:	1acb      	subs	r3, r1, r3
 800ec6a:	441a      	add	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800ec70:	78fa      	ldrb	r2, [r7, #3]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d007      	beq.n	800ec8c <nk_buffer_reset+0x60>
            buffer->size = buffer->marker[type].offset;
 800ec7c:	78fb      	ldrb	r3, [r7, #3]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	4413      	add	r3, r2
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	639a      	str	r2, [r3, #56]	; 0x38
 800ec8a:	e003      	b.n	800ec94 <nk_buffer_reset+0x68>
        else buffer->size = buffer->memory.size;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	639a      	str	r2, [r3, #56]	; 0x38
        buffer->marker[type].active = nk_false;
 800ec94:	78fa      	ldrb	r2, [r7, #3]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2100      	movs	r1, #0
 800ec9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ec9e:	e024      	b.n	800ecea <nk_buffer_reset+0xbe>
    } else {
        /* reset front buffer either back to back marker or empty */
        buffer->needed -= (buffer->allocated - buffer->marker[type].offset);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eca4:	78fb      	ldrb	r3, [r7, #3]
 800eca6:	6879      	ldr	r1, [r7, #4]
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	440b      	add	r3, r1
 800ecac:	6859      	ldr	r1, [r3, #4]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb2:	1acb      	subs	r3, r1, r3
 800ecb4:	441a      	add	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	631a      	str	r2, [r3, #48]	; 0x30
        if (buffer->marker[type].active)
 800ecba:	78fa      	ldrb	r2, [r7, #3]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d007      	beq.n	800ecd6 <nk_buffer_reset+0xaa>
            buffer->allocated = buffer->marker[type].offset;
 800ecc6:	78fb      	ldrb	r3, [r7, #3]
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	00db      	lsls	r3, r3, #3
 800eccc:	4413      	add	r3, r2
 800ecce:	685a      	ldr	r2, [r3, #4]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	62da      	str	r2, [r3, #44]	; 0x2c
 800ecd4:	e002      	b.n	800ecdc <nk_buffer_reset+0xb0>
        else buffer->allocated = 0;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	62da      	str	r2, [r3, #44]	; 0x2c
        buffer->marker[type].active = nk_false;
 800ecdc:	78fa      	ldrb	r2, [r7, #3]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2100      	movs	r1, #0
 800ece2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800ece6:	e000      	b.n	800ecea <nk_buffer_reset+0xbe>
    if (!buffer) return;
 800ece8:	bf00      	nop
    }
}
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	080285e4 	.word	0x080285e4
 800ecf4:	0802a4c4 	.word	0x0802a4c4
 800ecf8:	08028580 	.word	0x08028580

0800ecfc <nk_buffer_clear>:
NK_API void
nk_buffer_clear(struct nk_buffer *b)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <nk_buffer_clear+0x1a>
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	; (800ed40 <nk_buffer_clear+0x44>)
 800ed0c:	4a0d      	ldr	r2, [pc, #52]	; (800ed44 <nk_buffer_clear+0x48>)
 800ed0e:	21e3      	movs	r1, #227	; 0xe3
 800ed10:	480d      	ldr	r0, [pc, #52]	; (800ed48 <nk_buffer_clear+0x4c>)
 800ed12:	f015 feed 	bl	8024af0 <__assert_func>
    if (!b) return;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00d      	beq.n	800ed38 <nk_buffer_clear+0x3c>
    b->allocated = 0;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	62da      	str	r2, [r3, #44]	; 0x2c
    b->size = b->memory.size;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	639a      	str	r2, [r3, #56]	; 0x38
    b->calls = 0;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	635a      	str	r2, [r3, #52]	; 0x34
    b->needed = 0;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	631a      	str	r2, [r3, #48]	; 0x30
 800ed36:	e000      	b.n	800ed3a <nk_buffer_clear+0x3e>
    if (!b) return;
 800ed38:	bf00      	nop
}
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	0802857c 	.word	0x0802857c
 800ed44:	0802a4d4 	.word	0x0802a4d4
 800ed48:	08028580 	.word	0x08028580

0800ed4c <nk_draw_symbol>:
 * ===============================================================*/
NK_LIB void
nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,
    struct nk_rect content, struct nk_color background, struct nk_color foreground,
    float border_width, const struct nk_user_font *font)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b0a0      	sub	sp, #128	; 0x80
 800ed50:	af02      	add	r7, sp, #8
 800ed52:	6278      	str	r0, [r7, #36]	; 0x24
 800ed54:	eeb0 6a40 	vmov.f32	s12, s0
 800ed58:	eef0 6a60 	vmov.f32	s13, s1
 800ed5c:	eeb0 7a41 	vmov.f32	s14, s2
 800ed60:	eef0 7a61 	vmov.f32	s15, s3
 800ed64:	60fa      	str	r2, [r7, #12]
 800ed66:	60bb      	str	r3, [r7, #8]
 800ed68:	ed87 2a01 	vstr	s4, [r7, #4]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed72:	ed87 6a04 	vstr	s12, [r7, #16]
 800ed76:	edc7 6a05 	vstr	s13, [r7, #20]
 800ed7a:	ed87 7a06 	vstr	s14, [r7, #24]
 800ed7e:	edc7 7a07 	vstr	s15, [r7, #28]
    switch (type) {
 800ed82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed86:	3b01      	subs	r3, #1
 800ed88:	2b0b      	cmp	r3, #11
 800ed8a:	f200 815e 	bhi.w	800f04a <nk_draw_symbol+0x2fe>
 800ed8e:	a201      	add	r2, pc, #4	; (adr r2, 800ed94 <nk_draw_symbol+0x48>)
 800ed90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed94:	0800edc5 	.word	0x0800edc5
 800ed98:	0800edc5 	.word	0x0800edc5
 800ed9c:	0800ee4d 	.word	0x0800ee4d
 800eda0:	0800ee4d 	.word	0x0800ee4d
 800eda4:	0800ee4d 	.word	0x0800ee4d
 800eda8:	0800ee4d 	.word	0x0800ee4d
 800edac:	0800efaf 	.word	0x0800efaf
 800edb0:	0800efaf 	.word	0x0800efaf
 800edb4:	0800efaf 	.word	0x0800efaf
 800edb8:	0800efaf 	.word	0x0800efaf
 800edbc:	0800edc5 	.word	0x0800edc5
 800edc0:	0800edc5 	.word	0x0800edc5
    case NK_SYMBOL_X:
    case NK_SYMBOL_UNDERSCORE:
    case NK_SYMBOL_PLUS:
    case NK_SYMBOL_MINUS: {
        /* single character text symbol */
        const char *X = (type == NK_SYMBOL_X) ? "x":
 800edc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d00d      	beq.n	800ede8 <nk_draw_symbol+0x9c>
 800edcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d007      	beq.n	800ede4 <nk_draw_symbol+0x98>
 800edd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edd8:	2b0b      	cmp	r3, #11
 800edda:	d101      	bne.n	800ede0 <nk_draw_symbol+0x94>
 800eddc:	4b9e      	ldr	r3, [pc, #632]	; (800f058 <nk_draw_symbol+0x30c>)
 800edde:	e004      	b.n	800edea <nk_draw_symbol+0x9e>
 800ede0:	4b9e      	ldr	r3, [pc, #632]	; (800f05c <nk_draw_symbol+0x310>)
 800ede2:	e002      	b.n	800edea <nk_draw_symbol+0x9e>
 800ede4:	4b9e      	ldr	r3, [pc, #632]	; (800f060 <nk_draw_symbol+0x314>)
 800ede6:	e000      	b.n	800edea <nk_draw_symbol+0x9e>
 800ede8:	4b9e      	ldr	r3, [pc, #632]	; (800f064 <nk_draw_symbol+0x318>)
 800edea:	673b      	str	r3, [r7, #112]	; 0x70
            (type == NK_SYMBOL_UNDERSCORE) ? "_":
            (type == NK_SYMBOL_PLUS) ? "+": "-";
        struct nk_text text;
        text.padding = nk_vec2(0,0);
 800edec:	eddf 0a9e 	vldr	s1, [pc, #632]	; 800f068 <nk_draw_symbol+0x31c>
 800edf0:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800f068 <nk_draw_symbol+0x31c>
 800edf4:	f007 fdd8 	bl	80169a8 <nk_vec2>
 800edf8:	eeb0 7a40 	vmov.f32	s14, s0
 800edfc:	eef0 7a60 	vmov.f32	s15, s1
 800ee00:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800ee04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        text.background = background;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	64bb      	str	r3, [r7, #72]	; 0x48
        text.text = foreground;
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	64fb      	str	r3, [r7, #76]	; 0x4c
        nk_widget_text(out, content, X, 1, &text, NK_TEXT_CENTERED, font);
 800ee10:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ee14:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee18:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee1c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee20:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	2312      	movs	r3, #18
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	2201      	movs	r2, #1
 800ee32:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ee34:	eeb0 0a46 	vmov.f32	s0, s12
 800ee38:	eef0 0a66 	vmov.f32	s1, s13
 800ee3c:	eeb0 1a47 	vmov.f32	s2, s14
 800ee40:	eef0 1a67 	vmov.f32	s3, s15
 800ee44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee46:	f010 fb9d 	bl	801f584 <nk_widget_text>
    } break;
 800ee4a:	e101      	b.n	800f050 <nk_draw_symbol+0x304>
    case NK_SYMBOL_CIRCLE_SOLID:
    case NK_SYMBOL_CIRCLE_OUTLINE:
    case NK_SYMBOL_RECT_SOLID:
    case NK_SYMBOL_RECT_OUTLINE: {
        /* simple empty/filled shapes */
        if (type == NK_SYMBOL_RECT_SOLID || type == NK_SYMBOL_RECT_OUTLINE) {
 800ee4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee50:	2b05      	cmp	r3, #5
 800ee52:	d003      	beq.n	800ee5c <nk_draw_symbol+0x110>
 800ee54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee58:	2b06      	cmp	r3, #6
 800ee5a:	d155      	bne.n	800ef08 <nk_draw_symbol+0x1bc>
            nk_fill_rect(out, content,  0, foreground);
 800ee5c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee60:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee64:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee68:	edd7 7a07 	vldr	s15, [r7, #28]
 800ee6c:	68b9      	ldr	r1, [r7, #8]
 800ee6e:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800f068 <nk_draw_symbol+0x31c>
 800ee72:	eeb0 0a46 	vmov.f32	s0, s12
 800ee76:	eef0 0a66 	vmov.f32	s1, s13
 800ee7a:	eeb0 1a47 	vmov.f32	s2, s14
 800ee7e:	eef0 1a67 	vmov.f32	s3, s15
 800ee82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee84:	f002 fe18 	bl	8011ab8 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800ee88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee8c:	2b06      	cmp	r3, #6
 800ee8e:	f040 808d 	bne.w	800efac <nk_draw_symbol+0x260>
                nk_fill_rect(out, nk_shrink_rect(content, border_width), 0, background);
 800ee92:	ed97 6a04 	vldr	s12, [r7, #16]
 800ee96:	edd7 6a05 	vldr	s13, [r7, #20]
 800ee9a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ee9e:	edd7 7a07 	vldr	s15, [r7, #28]
 800eea2:	ed97 2a01 	vldr	s4, [r7, #4]
 800eea6:	eeb0 0a46 	vmov.f32	s0, s12
 800eeaa:	eef0 0a66 	vmov.f32	s1, s13
 800eeae:	eeb0 1a47 	vmov.f32	s2, s14
 800eeb2:	eef0 1a67 	vmov.f32	s3, s15
 800eeb6:	f007 fcf7 	bl	80168a8 <nk_shrink_rect>
 800eeba:	eeb0 6a40 	vmov.f32	s12, s0
 800eebe:	eef0 6a60 	vmov.f32	s13, s1
 800eec2:	eeb0 7a41 	vmov.f32	s14, s2
 800eec6:	eef0 7a61 	vmov.f32	s15, s3
 800eeca:	ed87 6a14 	vstr	s12, [r7, #80]	; 0x50
 800eece:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 800eed2:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 800eed6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800eeda:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 800eede:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800eee2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800eee6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800eeea:	68f9      	ldr	r1, [r7, #12]
 800eeec:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 800f068 <nk_draw_symbol+0x31c>
 800eef0:	eeb0 0a46 	vmov.f32	s0, s12
 800eef4:	eef0 0a66 	vmov.f32	s1, s13
 800eef8:	eeb0 1a47 	vmov.f32	s2, s14
 800eefc:	eef0 1a67 	vmov.f32	s3, s15
 800ef00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef02:	f002 fdd9 	bl	8011ab8 <nk_fill_rect>
            if (type == NK_SYMBOL_RECT_OUTLINE)
 800ef06:	e051      	b.n	800efac <nk_draw_symbol+0x260>
        } else {
            nk_fill_circle(out, content, foreground);
 800ef08:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef0c:	edd7 6a05 	vldr	s13, [r7, #20]
 800ef10:	ed97 7a06 	vldr	s14, [r7, #24]
 800ef14:	edd7 7a07 	vldr	s15, [r7, #28]
 800ef18:	68b9      	ldr	r1, [r7, #8]
 800ef1a:	eeb0 0a46 	vmov.f32	s0, s12
 800ef1e:	eef0 0a66 	vmov.f32	s1, s13
 800ef22:	eeb0 1a47 	vmov.f32	s2, s14
 800ef26:	eef0 1a67 	vmov.f32	s3, s15
 800ef2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef2c:	f002 feba 	bl	8011ca4 <nk_fill_circle>
            if (type == NK_SYMBOL_CIRCLE_OUTLINE)
 800ef30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef34:	2b04      	cmp	r3, #4
 800ef36:	f040 808a 	bne.w	800f04e <nk_draw_symbol+0x302>
                nk_fill_circle(out, nk_shrink_rect(content, 1), background);
 800ef3a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ef3e:	edd7 6a05 	vldr	s13, [r7, #20]
 800ef42:	ed97 7a06 	vldr	s14, [r7, #24]
 800ef46:	edd7 7a07 	vldr	s15, [r7, #28]
 800ef4a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800ef4e:	eeb0 0a46 	vmov.f32	s0, s12
 800ef52:	eef0 0a66 	vmov.f32	s1, s13
 800ef56:	eeb0 1a47 	vmov.f32	s2, s14
 800ef5a:	eef0 1a67 	vmov.f32	s3, s15
 800ef5e:	f007 fca3 	bl	80168a8 <nk_shrink_rect>
 800ef62:	eeb0 6a40 	vmov.f32	s12, s0
 800ef66:	eef0 6a60 	vmov.f32	s13, s1
 800ef6a:	eeb0 7a41 	vmov.f32	s14, s2
 800ef6e:	eef0 7a61 	vmov.f32	s15, s3
 800ef72:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 800ef76:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 800ef7a:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 800ef7e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800ef82:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800ef86:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800ef8a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800ef8e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800ef92:	68f9      	ldr	r1, [r7, #12]
 800ef94:	eeb0 0a46 	vmov.f32	s0, s12
 800ef98:	eef0 0a66 	vmov.f32	s1, s13
 800ef9c:	eeb0 1a47 	vmov.f32	s2, s14
 800efa0:	eef0 1a67 	vmov.f32	s3, s15
 800efa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efa6:	f002 fe7d 	bl	8011ca4 <nk_fill_circle>
        }
    } break;
 800efaa:	e050      	b.n	800f04e <nk_draw_symbol+0x302>
 800efac:	e04f      	b.n	800f04e <nk_draw_symbol+0x302>
    case NK_SYMBOL_TRIANGLE_DOWN:
    case NK_SYMBOL_TRIANGLE_LEFT:
    case NK_SYMBOL_TRIANGLE_RIGHT: {
        enum nk_heading heading;
        struct nk_vec2 points[3];
        heading = (type == NK_SYMBOL_TRIANGLE_RIGHT) ? NK_RIGHT :
 800efae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efb2:	2b0a      	cmp	r3, #10
 800efb4:	d00d      	beq.n	800efd2 <nk_draw_symbol+0x286>
 800efb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efba:	2b09      	cmp	r3, #9
 800efbc:	d007      	beq.n	800efce <nk_draw_symbol+0x282>
 800efbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efc2:	2b07      	cmp	r3, #7
 800efc4:	d101      	bne.n	800efca <nk_draw_symbol+0x27e>
 800efc6:	2300      	movs	r3, #0
 800efc8:	e004      	b.n	800efd4 <nk_draw_symbol+0x288>
 800efca:	2302      	movs	r3, #2
 800efcc:	e002      	b.n	800efd4 <nk_draw_symbol+0x288>
 800efce:	2303      	movs	r3, #3
 800efd0:	e000      	b.n	800efd4 <nk_draw_symbol+0x288>
 800efd2:	2301      	movs	r3, #1
 800efd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            (type == NK_SYMBOL_TRIANGLE_LEFT) ? NK_LEFT:
            (type == NK_SYMBOL_TRIANGLE_UP) ? NK_UP: NK_DOWN;
        nk_triangle_from_direction(points, content, 0, 0, heading);
 800efd8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800efdc:	ed97 6a04 	vldr	s12, [r7, #16]
 800efe0:	edd7 6a05 	vldr	s13, [r7, #20]
 800efe4:	ed97 7a06 	vldr	s14, [r7, #24]
 800efe8:	edd7 7a07 	vldr	s15, [r7, #28]
 800efec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eff0:	4611      	mov	r1, r2
 800eff2:	eddf 2a1d 	vldr	s5, [pc, #116]	; 800f068 <nk_draw_symbol+0x31c>
 800eff6:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800f068 <nk_draw_symbol+0x31c>
 800effa:	eeb0 0a46 	vmov.f32	s0, s12
 800effe:	eef0 0a66 	vmov.f32	s1, s13
 800f002:	eeb0 1a47 	vmov.f32	s2, s14
 800f006:	eef0 1a67 	vmov.f32	s3, s15
 800f00a:	4618      	mov	r0, r3
 800f00c:	f007 fd9e 	bl	8016b4c <nk_triangle_from_direction>
        nk_fill_triangle(out, points[0].x, points[0].y, points[1].x, points[1].y,
 800f010:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f014:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f018:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800f01c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800f020:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800f024:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 800f028:	68b9      	ldr	r1, [r7, #8]
 800f02a:	eef0 2a45 	vmov.f32	s5, s10
 800f02e:	eeb0 2a65 	vmov.f32	s4, s11
 800f032:	eef0 1a46 	vmov.f32	s3, s12
 800f036:	eeb0 1a66 	vmov.f32	s2, s13
 800f03a:	eef0 0a47 	vmov.f32	s1, s14
 800f03e:	eeb0 0a67 	vmov.f32	s0, s15
 800f042:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f044:	f002 ff18 	bl	8011e78 <nk_fill_triangle>
            points[2].x, points[2].y, foreground);
    } break;
 800f048:	e002      	b.n	800f050 <nk_draw_symbol+0x304>
    default:
    case NK_SYMBOL_NONE:
    case NK_SYMBOL_MAX: break;
 800f04a:	bf00      	nop
 800f04c:	e000      	b.n	800f050 <nk_draw_symbol+0x304>
    } break;
 800f04e:	bf00      	nop
    }
}
 800f050:	bf00      	nop
 800f052:	3778      	adds	r7, #120	; 0x78
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	08028600 	.word	0x08028600
 800f05c:	08028604 	.word	0x08028604
 800f060:	08028608 	.word	0x08028608
 800f064:	0802860c 	.word	0x0802860c
 800f068:	00000000 	.word	0x00000000

0800f06c <nk_button_behavior>:
NK_LIB nk_bool
nk_button_behavior(nk_flags *state, struct nk_rect r,
    const struct nk_input *i, enum nk_button_behavior behavior)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08a      	sub	sp, #40	; 0x28
 800f070:	af00      	add	r7, sp, #0
 800f072:	61f8      	str	r0, [r7, #28]
 800f074:	eeb0 6a40 	vmov.f32	s12, s0
 800f078:	eef0 6a60 	vmov.f32	s13, s1
 800f07c:	eeb0 7a41 	vmov.f32	s14, s2
 800f080:	eef0 7a61 	vmov.f32	s15, s3
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	4613      	mov	r3, r2
 800f088:	ed87 6a03 	vstr	s12, [r7, #12]
 800f08c:	edc7 6a04 	vstr	s13, [r7, #16]
 800f090:	ed87 7a05 	vstr	s14, [r7, #20]
 800f094:	edc7 7a06 	vstr	s15, [r7, #24]
 800f098:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	627b      	str	r3, [r7, #36]	; 0x24
    nk_widget_state_reset(state);
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <nk_button_behavior+0x46>
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	2206      	movs	r2, #6
 800f0ae:	601a      	str	r2, [r3, #0]
 800f0b0:	e002      	b.n	800f0b8 <nk_button_behavior+0x4c>
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	2204      	movs	r2, #4
 800f0b6:	601a      	str	r2, [r3, #0]
    if (!i) return 0;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d101      	bne.n	800f0c2 <nk_button_behavior+0x56>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	e088      	b.n	800f1d4 <nk_button_behavior+0x168>
    if (nk_input_is_mouse_hovering_rect(i, r)) {
 800f0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0c6:	edd7 6a04 	vldr	s13, [r7, #16]
 800f0ca:	ed97 7a05 	vldr	s14, [r7, #20]
 800f0ce:	edd7 7a06 	vldr	s15, [r7, #24]
 800f0d2:	eeb0 0a46 	vmov.f32	s0, s12
 800f0d6:	eef0 0a66 	vmov.f32	s1, s13
 800f0da:	eeb0 1a47 	vmov.f32	s2, s14
 800f0de:	eef0 1a67 	vmov.f32	s3, s15
 800f0e2:	68b8      	ldr	r0, [r7, #8]
 800f0e4:	f006 f9cc 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d032      	beq.n	800f154 <nk_button_behavior+0xe8>
        *state = NK_WIDGET_STATE_HOVERED;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	2212      	movs	r2, #18
 800f0f2:	601a      	str	r2, [r3, #0]
        if (nk_input_is_mouse_down(i, NK_BUTTON_LEFT))
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	68b8      	ldr	r0, [r7, #8]
 800f0f8:	f006 fa66 	bl	80155c8 <nk_input_is_mouse_down>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d002      	beq.n	800f108 <nk_button_behavior+0x9c>
            *state = NK_WIDGET_STATE_ACTIVE;
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	2222      	movs	r2, #34	; 0x22
 800f106:	601a      	str	r2, [r3, #0]
        if (nk_input_has_mouse_click_in_button_rect(i, NK_BUTTON_LEFT, r)) {
 800f108:	ed97 6a03 	vldr	s12, [r7, #12]
 800f10c:	edd7 6a04 	vldr	s13, [r7, #16]
 800f110:	ed97 7a05 	vldr	s14, [r7, #20]
 800f114:	edd7 7a06 	vldr	s15, [r7, #24]
 800f118:	eeb0 0a46 	vmov.f32	s0, s12
 800f11c:	eef0 0a66 	vmov.f32	s1, s13
 800f120:	eeb0 1a47 	vmov.f32	s2, s14
 800f124:	eef0 1a67 	vmov.f32	s3, s15
 800f128:	2100      	movs	r1, #0
 800f12a:	68b8      	ldr	r0, [r7, #8]
 800f12c:	f006 f89f 	bl	801526e <nk_input_has_mouse_click_in_button_rect>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00e      	beq.n	800f154 <nk_button_behavior+0xe8>
            ret = (behavior != NK_BUTTON_DEFAULT) ?
                nk_input_is_mouse_down(i, NK_BUTTON_LEFT):
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d005      	beq.n	800f148 <nk_button_behavior+0xdc>
 800f13c:	2100      	movs	r1, #0
 800f13e:	68b8      	ldr	r0, [r7, #8]
 800f140:	f006 fa42 	bl	80155c8 <nk_input_is_mouse_down>
 800f144:	4603      	mov	r3, r0
 800f146:	e004      	b.n	800f152 <nk_button_behavior+0xe6>
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
                nk_input_is_mouse_released(i, NK_BUTTON_LEFT);
#else
                nk_input_is_mouse_pressed(i, NK_BUTTON_LEFT);
 800f148:	2100      	movs	r1, #0
 800f14a:	68b8      	ldr	r0, [r7, #8]
 800f14c:	f006 fa54 	bl	80155f8 <nk_input_is_mouse_pressed>
 800f150:	4603      	mov	r3, r0
            ret = (behavior != NK_BUTTON_DEFAULT) ?
 800f152:	627b      	str	r3, [r7, #36]	; 0x24
#endif
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(i, r))
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0310 	and.w	r3, r3, #16
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d01c      	beq.n	800f19a <nk_button_behavior+0x12e>
 800f160:	ed97 6a03 	vldr	s12, [r7, #12]
 800f164:	edd7 6a04 	vldr	s13, [r7, #16]
 800f168:	ed97 7a05 	vldr	s14, [r7, #20]
 800f16c:	edd7 7a06 	vldr	s15, [r7, #24]
 800f170:	eeb0 0a46 	vmov.f32	s0, s12
 800f174:	eef0 0a66 	vmov.f32	s1, s13
 800f178:	eeb0 1a47 	vmov.f32	s2, s14
 800f17c:	eef0 1a67 	vmov.f32	s3, s15
 800f180:	68b8      	ldr	r0, [r7, #8]
 800f182:	f006 f9cf 	bl	8015524 <nk_input_is_mouse_prev_hovering_rect>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d106      	bne.n	800f19a <nk_button_behavior+0x12e>
        *state |= NK_WIDGET_STATE_ENTERED;
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f043 0208 	orr.w	r2, r3, #8
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	601a      	str	r2, [r3, #0]
 800f198:	e01b      	b.n	800f1d2 <nk_button_behavior+0x166>
    else if (nk_input_is_mouse_prev_hovering_rect(i, r))
 800f19a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f19e:	edd7 6a04 	vldr	s13, [r7, #16]
 800f1a2:	ed97 7a05 	vldr	s14, [r7, #20]
 800f1a6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f1aa:	eeb0 0a46 	vmov.f32	s0, s12
 800f1ae:	eef0 0a66 	vmov.f32	s1, s13
 800f1b2:	eeb0 1a47 	vmov.f32	s2, s14
 800f1b6:	eef0 1a67 	vmov.f32	s3, s15
 800f1ba:	68b8      	ldr	r0, [r7, #8]
 800f1bc:	f006 f9b2 	bl	8015524 <nk_input_is_mouse_prev_hovering_rect>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d005      	beq.n	800f1d2 <nk_button_behavior+0x166>
        *state |= NK_WIDGET_STATE_LEFT;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	601a      	str	r2, [r3, #0]
    return ret;
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3728      	adds	r7, #40	; 0x28
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <nk_draw_button>:
NK_LIB const struct nk_style_item*
nk_draw_button(struct nk_command_buffer *out,
    const struct nk_rect *bounds, nk_flags state,
    const struct nk_style_button *style)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
 800f1e8:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    if (state & NK_WIDGET_STATE_HOVER)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f003 0310 	and.w	r3, r3, #16
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d003      	beq.n	800f1fc <nk_draw_button+0x20>
        background = &style->hover;
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	331c      	adds	r3, #28
 800f1f8:	617b      	str	r3, [r7, #20]
 800f1fa:	e00a      	b.n	800f212 <nk_draw_button+0x36>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f003 0320 	and.w	r3, r3, #32
 800f202:	2b00      	cmp	r3, #0
 800f204:	d003      	beq.n	800f20e <nk_draw_button+0x32>
        background = &style->active;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	3338      	adds	r3, #56	; 0x38
 800f20a:	617b      	str	r3, [r7, #20]
 800f20c:	e001      	b.n	800f212 <nk_draw_button+0x36>
    else background = &style->normal;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	617b      	str	r3, [r7, #20]

    switch(background->type) {
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d01e      	beq.n	800f258 <nk_draw_button+0x7c>
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	dc71      	bgt.n	800f302 <nk_draw_button+0x126>
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d033      	beq.n	800f28a <nk_draw_button+0xae>
 800f222:	2b01      	cmp	r3, #1
 800f224:	d16d      	bne.n	800f302 <nk_draw_button+0x126>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	1d19      	adds	r1, r3, #4
 800f22a:	4a38      	ldr	r2, [pc, #224]	; (800f30c <nk_draw_button+0x130>)
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	ed93 6a00 	vldr	s12, [r3]
 800f232:	edd3 6a01 	vldr	s13, [r3, #4]
 800f236:	ed93 7a02 	vldr	s14, [r3, #8]
 800f23a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f23e:	6812      	ldr	r2, [r2, #0]
 800f240:	eeb0 0a46 	vmov.f32	s0, s12
 800f244:	eef0 0a66 	vmov.f32	s1, s13
 800f248:	eeb0 1a47 	vmov.f32	s2, s14
 800f24c:	eef0 1a67 	vmov.f32	s3, s15
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f002 ff8b 	bl	801216c <nk_draw_image>
            break;
 800f256:	e054      	b.n	800f302 <nk_draw_button+0x126>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	1d19      	adds	r1, r3, #4
 800f25c:	4a2b      	ldr	r2, [pc, #172]	; (800f30c <nk_draw_button+0x130>)
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	ed93 6a00 	vldr	s12, [r3]
 800f264:	edd3 6a01 	vldr	s13, [r3, #4]
 800f268:	ed93 7a02 	vldr	s14, [r3, #8]
 800f26c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f270:	6812      	ldr	r2, [r2, #0]
 800f272:	eeb0 0a46 	vmov.f32	s0, s12
 800f276:	eef0 0a66 	vmov.f32	s1, s13
 800f27a:	eeb0 1a47 	vmov.f32	s2, s14
 800f27e:	eef0 1a67 	vmov.f32	s3, s15
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f003 f864 	bl	8012350 <nk_draw_nine_slice>
            break;
 800f288:	e03b      	b.n	800f302 <nk_draw_button+0x126>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	ed93 6a00 	vldr	s12, [r3]
 800f298:	edd3 6a01 	vldr	s13, [r3, #4]
 800f29c:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2a0:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2a4:	6851      	ldr	r1, [r2, #4]
 800f2a6:	eeb0 2a65 	vmov.f32	s4, s11
 800f2aa:	eeb0 0a46 	vmov.f32	s0, s12
 800f2ae:	eef0 0a66 	vmov.f32	s1, s13
 800f2b2:	eeb0 1a47 	vmov.f32	s2, s14
 800f2b6:	eef0 1a67 	vmov.f32	s3, s15
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f002 fbfc 	bl	8011ab8 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 800f2cc:	683a      	ldr	r2, [r7, #0]
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	ed93 6a00 	vldr	s12, [r3]
 800f2d4:	edd3 6a01 	vldr	s13, [r3, #4]
 800f2d8:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2dc:	edd3 7a03 	vldr	s15, [r3, #12]
 800f2e0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f2e2:	eef0 2a45 	vmov.f32	s5, s10
 800f2e6:	eeb0 2a65 	vmov.f32	s4, s11
 800f2ea:	eeb0 0a46 	vmov.f32	s0, s12
 800f2ee:	eef0 0a66 	vmov.f32	s1, s13
 800f2f2:	eeb0 1a47 	vmov.f32	s2, s14
 800f2f6:	eef0 1a67 	vmov.f32	s3, s15
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f002 fad4 	bl	80118a8 <nk_stroke_rect>
            break;
 800f300:	bf00      	nop
    }
    return background;
 800f302:	697b      	ldr	r3, [r7, #20]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	0802a4e4 	.word	0x0802a4e4

0800f310 <nk_do_button>:
NK_LIB nk_bool
nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,
    const struct nk_style_button *style, const struct nk_input *in,
    enum nk_button_behavior behavior, struct nk_rect *content)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b08c      	sub	sp, #48	; 0x30
 800f314:	af00      	add	r7, sp, #0
 800f316:	61f8      	str	r0, [r7, #28]
 800f318:	61b9      	str	r1, [r7, #24]
 800f31a:	eeb0 6a40 	vmov.f32	s12, s0
 800f31e:	eef0 6a60 	vmov.f32	s13, s1
 800f322:	eeb0 7a41 	vmov.f32	s14, s2
 800f326:	eef0 7a61 	vmov.f32	s15, s3
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	603b      	str	r3, [r7, #0]
 800f32e:	ed87 6a02 	vstr	s12, [r7, #8]
 800f332:	edc7 6a03 	vstr	s13, [r7, #12]
 800f336:	ed87 7a04 	vstr	s14, [r7, #16]
 800f33a:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect bounds;
    NK_ASSERT(style);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d105      	bne.n	800f350 <nk_do_button+0x40>
 800f344:	4b5d      	ldr	r3, [pc, #372]	; (800f4bc <nk_do_button+0x1ac>)
 800f346:	4a5e      	ldr	r2, [pc, #376]	; (800f4c0 <nk_do_button+0x1b0>)
 800f348:	2179      	movs	r1, #121	; 0x79
 800f34a:	485e      	ldr	r0, [pc, #376]	; (800f4c4 <nk_do_button+0x1b4>)
 800f34c:	f015 fbd0 	bl	8024af0 <__assert_func>
    NK_ASSERT(state);
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d105      	bne.n	800f362 <nk_do_button+0x52>
 800f356:	4b5c      	ldr	r3, [pc, #368]	; (800f4c8 <nk_do_button+0x1b8>)
 800f358:	4a59      	ldr	r2, [pc, #356]	; (800f4c0 <nk_do_button+0x1b0>)
 800f35a:	217a      	movs	r1, #122	; 0x7a
 800f35c:	4859      	ldr	r0, [pc, #356]	; (800f4c4 <nk_do_button+0x1b4>)
 800f35e:	f015 fbc7 	bl	8024af0 <__assert_func>
    NK_ASSERT(out);
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d105      	bne.n	800f374 <nk_do_button+0x64>
 800f368:	4b58      	ldr	r3, [pc, #352]	; (800f4cc <nk_do_button+0x1bc>)
 800f36a:	4a55      	ldr	r2, [pc, #340]	; (800f4c0 <nk_do_button+0x1b0>)
 800f36c:	217b      	movs	r1, #123	; 0x7b
 800f36e:	4855      	ldr	r0, [pc, #340]	; (800f4c4 <nk_do_button+0x1b4>)
 800f370:	f015 fbbe 	bl	8024af0 <__assert_func>
    if (!out || !style)
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <nk_do_button+0x70>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <nk_do_button+0x74>
        return nk_false;
 800f380:	2300      	movs	r3, #0
 800f382:	e097      	b.n	800f4b4 <nk_do_button+0x1a4>

    /* calculate button content space */
    content->x = r.x + style->padding.x + style->border + style->rounding;
 800f384:	ed97 7a02 	vldr	s14, [r7, #8]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800f38e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a8:	edc3 7a00 	vstr	s15, [r3]
    content->y = r.y + style->padding.y + style->border + style->rounding;
 800f3ac:	ed97 7a03 	vldr	s14, [r7, #12]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800f3b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f3c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3d0:	edc3 7a01 	vstr	s15, [r3, #4]
    content->w = r.w - (2 * style->padding.x + style->border + style->rounding*2);
 800f3d4:	ed97 7a04 	vldr	s14, [r7, #16]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800f3de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f3e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f3f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f400:	edc3 7a02 	vstr	s15, [r3, #8]
    content->h = r.h - (2 * style->padding.y + style->border + style->rounding*2);
 800f404:	ed97 7a05 	vldr	s14, [r7, #20]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800f40e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800f418:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800f422:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f42a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f430:	edc3 7a03 	vstr	s15, [r3, #12]

    /* execute button behavior */
    bounds.x = r.x - style->touch_padding.x;
 800f434:	ed97 7a02 	vldr	s14, [r7, #8]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f442:	edc7 7a08 	vstr	s15, [r7, #32]
    bounds.y = r.y - style->touch_padding.y;
 800f446:	ed97 7a03 	vldr	s14, [r7, #12]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f450:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f454:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    bounds.w = r.w + 2 * style->touch_padding.x;
 800f458:	ed97 7a04 	vldr	s14, [r7, #16]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f462:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f46a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    bounds.h = r.h + 2 * style->touch_padding.y;
 800f46e:	ed97 7a05 	vldr	s14, [r7, #20]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f478:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f47c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f480:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return nk_button_behavior(state, bounds, in, behavior);
 800f484:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f488:	ed97 6a08 	vldr	s12, [r7, #32]
 800f48c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800f490:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f494:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f498:	461a      	mov	r2, r3
 800f49a:	6839      	ldr	r1, [r7, #0]
 800f49c:	eeb0 0a46 	vmov.f32	s0, s12
 800f4a0:	eef0 0a66 	vmov.f32	s1, s13
 800f4a4:	eeb0 1a47 	vmov.f32	s2, s14
 800f4a8:	eef0 1a67 	vmov.f32	s3, s15
 800f4ac:	69f8      	ldr	r0, [r7, #28]
 800f4ae:	f7ff fddd 	bl	800f06c <nk_button_behavior>
 800f4b2:	4603      	mov	r3, r0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3730      	adds	r7, #48	; 0x30
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	08028610 	.word	0x08028610
 800f4c0:	0802a4e8 	.word	0x0802a4e8
 800f4c4:	08028618 	.word	0x08028618
 800f4c8:	08028634 	.word	0x08028634
 800f4cc:	0802863c 	.word	0x0802863c

0800f4d0 <nk_draw_button_text>:
NK_LIB void
nk_draw_button_text(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content, nk_flags state,
    const struct nk_style_button *style, const char *txt, int len,
    nk_flags text_alignment, const struct nk_user_font *font)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08c      	sub	sp, #48	; 0x30
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
 800f4dc:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;
    background = nk_draw_button(out, bounds, state, style);
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	68b9      	ldr	r1, [r7, #8]
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7ff fe79 	bl	800f1dc <nk_draw_button>
 800f4ea:	6278      	str	r0, [r7, #36]	; 0x24

    /* select correct colors/images */
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d103      	bne.n	800f4fc <nk_draw_button_text+0x2c>
        text.background = background->data.color;
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e002      	b.n	800f502 <nk_draw_button_text+0x32>
    else text.background = style->text_background;
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f500:	61fb      	str	r3, [r7, #28]
    if (state & NK_WIDGET_STATE_HOVER)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	f003 0310 	and.w	r3, r3, #16
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <nk_draw_button_text+0x44>
        text.text = style->text_hover;
 800f50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f510:	623b      	str	r3, [r7, #32]
 800f512:	e00b      	b.n	800f52c <nk_draw_button_text+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	f003 0320 	and.w	r3, r3, #32
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <nk_draw_button_text+0x56>
        text.text = style->text_active;
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f522:	623b      	str	r3, [r7, #32]
 800f524:	e002      	b.n	800f52c <nk_draw_button_text+0x5c>
    else text.text = style->text_normal;
 800f526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f52a:	623b      	str	r3, [r7, #32]

    text.padding = nk_vec2(0,0);
 800f52c:	eddf 0a17 	vldr	s1, [pc, #92]	; 800f58c <nk_draw_button_text+0xbc>
 800f530:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800f58c <nk_draw_button_text+0xbc>
 800f534:	f007 fa38 	bl	80169a8 <nk_vec2>
 800f538:	eeb0 7a40 	vmov.f32	s14, s0
 800f53c:	eef0 7a60 	vmov.f32	s15, s1
 800f540:	ed87 7a05 	vstr	s14, [r7, #20]
 800f544:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *content, txt, len, &text, text_alignment, font);
 800f548:	f107 0214 	add.w	r2, r7, #20
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	ed93 6a00 	vldr	s12, [r3]
 800f552:	edd3 6a01 	vldr	s13, [r3, #4]
 800f556:	ed93 7a02 	vldr	s14, [r3, #8]
 800f55a:	edd3 7a03 	vldr	s15, [r3, #12]
 800f55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f560:	9301      	str	r3, [sp, #4]
 800f562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	4613      	mov	r3, r2
 800f568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f56a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f56c:	eeb0 0a46 	vmov.f32	s0, s12
 800f570:	eef0 0a66 	vmov.f32	s1, s13
 800f574:	eeb0 1a47 	vmov.f32	s2, s14
 800f578:	eef0 1a67 	vmov.f32	s3, s15
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f010 f801 	bl	801f584 <nk_widget_text>
}
 800f582:	bf00      	nop
 800f584:	3728      	adds	r7, #40	; 0x28
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	00000000 	.word	0x00000000

0800f590 <nk_do_button_text>:
nk_do_button_text(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    const char *string, int len, nk_flags align, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b094      	sub	sp, #80	; 0x50
 800f594:	af06      	add	r7, sp, #24
 800f596:	61f8      	str	r0, [r7, #28]
 800f598:	61b9      	str	r1, [r7, #24]
 800f59a:	eeb0 6a40 	vmov.f32	s12, s0
 800f59e:	eef0 6a60 	vmov.f32	s13, s1
 800f5a2:	eeb0 7a41 	vmov.f32	s14, s2
 800f5a6:	eef0 7a61 	vmov.f32	s15, s3
 800f5aa:	607a      	str	r2, [r7, #4]
 800f5ac:	603b      	str	r3, [r7, #0]
 800f5ae:	ed87 6a02 	vstr	s12, [r7, #8]
 800f5b2:	edc7 6a03 	vstr	s13, [r7, #12]
 800f5b6:	ed87 7a04 	vstr	s14, [r7, #16]
 800f5ba:	edc7 7a05 	vstr	s15, [r7, #20]
    struct nk_rect content;
    int ret = nk_false;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	637b      	str	r3, [r7, #52]	; 0x34

    NK_ASSERT(state);
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d105      	bne.n	800f5d4 <nk_do_button_text+0x44>
 800f5c8:	4b43      	ldr	r3, [pc, #268]	; (800f6d8 <nk_do_button_text+0x148>)
 800f5ca:	4a44      	ldr	r2, [pc, #272]	; (800f6dc <nk_do_button_text+0x14c>)
 800f5cc:	21ad      	movs	r1, #173	; 0xad
 800f5ce:	4844      	ldr	r0, [pc, #272]	; (800f6e0 <nk_do_button_text+0x150>)
 800f5d0:	f015 fa8e 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 800f5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d105      	bne.n	800f5e6 <nk_do_button_text+0x56>
 800f5da:	4b42      	ldr	r3, [pc, #264]	; (800f6e4 <nk_do_button_text+0x154>)
 800f5dc:	4a3f      	ldr	r2, [pc, #252]	; (800f6dc <nk_do_button_text+0x14c>)
 800f5de:	21ae      	movs	r1, #174	; 0xae
 800f5e0:	483f      	ldr	r0, [pc, #252]	; (800f6e0 <nk_do_button_text+0x150>)
 800f5e2:	f015 fa85 	bl	8024af0 <__assert_func>
    NK_ASSERT(out);
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d105      	bne.n	800f5f8 <nk_do_button_text+0x68>
 800f5ec:	4b3e      	ldr	r3, [pc, #248]	; (800f6e8 <nk_do_button_text+0x158>)
 800f5ee:	4a3b      	ldr	r2, [pc, #236]	; (800f6dc <nk_do_button_text+0x14c>)
 800f5f0:	21af      	movs	r1, #175	; 0xaf
 800f5f2:	483b      	ldr	r0, [pc, #236]	; (800f6e0 <nk_do_button_text+0x150>)
 800f5f4:	f015 fa7c 	bl	8024af0 <__assert_func>
    NK_ASSERT(string);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d105      	bne.n	800f60a <nk_do_button_text+0x7a>
 800f5fe:	4b3b      	ldr	r3, [pc, #236]	; (800f6ec <nk_do_button_text+0x15c>)
 800f600:	4a36      	ldr	r2, [pc, #216]	; (800f6dc <nk_do_button_text+0x14c>)
 800f602:	21b0      	movs	r1, #176	; 0xb0
 800f604:	4836      	ldr	r0, [pc, #216]	; (800f6e0 <nk_do_button_text+0x150>)
 800f606:	f015 fa73 	bl	8024af0 <__assert_func>
    NK_ASSERT(font);
 800f60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d105      	bne.n	800f61c <nk_do_button_text+0x8c>
 800f610:	4b37      	ldr	r3, [pc, #220]	; (800f6f0 <nk_do_button_text+0x160>)
 800f612:	4a32      	ldr	r2, [pc, #200]	; (800f6dc <nk_do_button_text+0x14c>)
 800f614:	21b1      	movs	r1, #177	; 0xb1
 800f616:	4832      	ldr	r0, [pc, #200]	; (800f6e0 <nk_do_button_text+0x150>)
 800f618:	f015 fa6a 	bl	8024af0 <__assert_func>
    if (!out || !style || !font || !string)
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d008      	beq.n	800f634 <nk_do_button_text+0xa4>
 800f622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <nk_do_button_text+0xa4>
 800f628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d002      	beq.n	800f634 <nk_do_button_text+0xa4>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <nk_do_button_text+0xa8>
        return nk_false;
 800f634:	2300      	movs	r3, #0
 800f636:	e04b      	b.n	800f6d0 <nk_do_button_text+0x140>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f638:	ed97 6a02 	vldr	s12, [r7, #8]
 800f63c:	edd7 6a03 	vldr	s13, [r7, #12]
 800f640:	ed97 7a04 	vldr	s14, [r7, #16]
 800f644:	edd7 7a05 	vldr	s15, [r7, #20]
 800f648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f658:	eeb0 0a46 	vmov.f32	s0, s12
 800f65c:	eef0 0a66 	vmov.f32	s1, s13
 800f660:	eeb0 1a47 	vmov.f32	s2, s14
 800f664:	eef0 1a67 	vmov.f32	s3, s15
 800f668:	69b9      	ldr	r1, [r7, #24]
 800f66a:	69f8      	ldr	r0, [r7, #28]
 800f66c:	f7ff fe50 	bl	800f310 <nk_do_button>
 800f670:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d007      	beq.n	800f68c <nk_do_button_text+0xfc>
 800f67c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f684:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f688:	69b8      	ldr	r0, [r7, #24]
 800f68a:	4798      	blx	r3
    nk_draw_button_text(out, &bounds, &content, *state, style, string, len, align, font);
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f694:	f107 0108 	add.w	r1, r7, #8
 800f698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f69a:	9304      	str	r3, [sp, #16]
 800f69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f69e:	9303      	str	r3, [sp, #12]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	9302      	str	r3, [sp, #8]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	9301      	str	r3, [sp, #4]
 800f6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	69b8      	ldr	r0, [r7, #24]
 800f6b0:	f7ff ff0e 	bl	800f4d0 <nk_draw_button_text>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d007      	beq.n	800f6ce <nk_do_button_text+0x13e>
 800f6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6c6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f6ca:	69b8      	ldr	r0, [r7, #24]
 800f6cc:	4798      	blx	r3
    return ret;
 800f6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3738      	adds	r7, #56	; 0x38
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	08028634 	.word	0x08028634
 800f6dc:	0802a4f8 	.word	0x0802a4f8
 800f6e0:	08028618 	.word	0x08028618
 800f6e4:	08028610 	.word	0x08028610
 800f6e8:	0802863c 	.word	0x0802863c
 800f6ec:	08028640 	.word	0x08028640
 800f6f0:	08028648 	.word	0x08028648

0800f6f4 <nk_draw_button_symbol>:
NK_LIB void
nk_draw_button_symbol(struct nk_command_buffer *out,
    const struct nk_rect *bounds, const struct nk_rect *content,
    nk_flags state, const struct nk_style_button *style,
    enum nk_symbol_type type, const struct nk_user_font *font)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08a      	sub	sp, #40	; 0x28
 800f6f8:	af02      	add	r7, sp, #8
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	603b      	str	r3, [r7, #0]
    struct nk_color sym, bg;
    const struct nk_style_item *background;

    /* select correct colors/images */
    background = nk_draw_button(out, bounds, state, style);
 800f702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	68b9      	ldr	r1, [r7, #8]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f7ff fd67 	bl	800f1dc <nk_draw_button>
 800f70e:	61f8      	str	r0, [r7, #28]
    if (background->type == NK_STYLE_ITEM_COLOR)
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d103      	bne.n	800f720 <nk_draw_button_symbol+0x2c>
        bg = background->data.color;
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	617b      	str	r3, [r7, #20]
 800f71e:	e002      	b.n	800f726 <nk_draw_button_symbol+0x32>
    else bg = style->text_background;
 800f720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f724:	617b      	str	r3, [r7, #20]

    if (state & NK_WIDGET_STATE_HOVER)
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	f003 0310 	and.w	r3, r3, #16
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <nk_draw_button_symbol+0x44>
        sym = style->text_hover;
 800f730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f734:	61bb      	str	r3, [r7, #24]
 800f736:	e00b      	b.n	800f750 <nk_draw_button_symbol+0x5c>
    else if (state & NK_WIDGET_STATE_ACTIVED)
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	f003 0320 	and.w	r3, r3, #32
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d003      	beq.n	800f74a <nk_draw_button_symbol+0x56>
        sym = style->text_active;
 800f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f746:	61bb      	str	r3, [r7, #24]
 800f748:	e002      	b.n	800f750 <nk_draw_button_symbol+0x5c>
    else sym = style->text_normal;
 800f74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f74e:	61bb      	str	r3, [r7, #24]
    nk_draw_symbol(out, type, *content, bg, sym, 1, font);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	ed93 6a00 	vldr	s12, [r3]
 800f756:	edd3 6a01 	vldr	s13, [r3, #4]
 800f75a:	ed93 7a02 	vldr	s14, [r3, #8]
 800f75e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f762:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	eeb0 0a46 	vmov.f32	s0, s12
 800f776:	eef0 0a66 	vmov.f32	s1, s13
 800f77a:	eeb0 1a47 	vmov.f32	s2, s14
 800f77e:	eef0 1a67 	vmov.f32	s3, s15
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f7ff fae2 	bl	800ed4c <nk_draw_symbol>
}
 800f788:	bf00      	nop
 800f78a:	3720      	adds	r7, #32
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <nk_do_button_symbol>:
nk_do_button_symbol(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect bounds,
    enum nk_symbol_type symbol, enum nk_button_behavior behavior,
    const struct nk_style_button *style, const struct nk_input *in,
    const struct nk_user_font *font)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b092      	sub	sp, #72	; 0x48
 800f794:	af04      	add	r7, sp, #16
 800f796:	61f8      	str	r0, [r7, #28]
 800f798:	61b9      	str	r1, [r7, #24]
 800f79a:	eeb0 6a40 	vmov.f32	s12, s0
 800f79e:	eef0 6a60 	vmov.f32	s13, s1
 800f7a2:	eeb0 7a41 	vmov.f32	s14, s2
 800f7a6:	eef0 7a61 	vmov.f32	s15, s3
 800f7aa:	4611      	mov	r1, r2
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	ed87 6a02 	vstr	s12, [r7, #8]
 800f7b2:	edc7 6a03 	vstr	s13, [r7, #12]
 800f7b6:	ed87 7a04 	vstr	s14, [r7, #16]
 800f7ba:	edc7 7a05 	vstr	s15, [r7, #20]
 800f7be:	460b      	mov	r3, r1
 800f7c0:	71fb      	strb	r3, [r7, #7]
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	71bb      	strb	r3, [r7, #6]
    int ret;
    struct nk_rect content;

    NK_ASSERT(state);
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d105      	bne.n	800f7d8 <nk_do_button_symbol+0x48>
 800f7cc:	4b3c      	ldr	r3, [pc, #240]	; (800f8c0 <nk_do_button_symbol+0x130>)
 800f7ce:	4a3d      	ldr	r2, [pc, #244]	; (800f8c4 <nk_do_button_symbol+0x134>)
 800f7d0:	21db      	movs	r1, #219	; 0xdb
 800f7d2:	483d      	ldr	r0, [pc, #244]	; (800f8c8 <nk_do_button_symbol+0x138>)
 800f7d4:	f015 f98c 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 800f7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d105      	bne.n	800f7ea <nk_do_button_symbol+0x5a>
 800f7de:	4b3b      	ldr	r3, [pc, #236]	; (800f8cc <nk_do_button_symbol+0x13c>)
 800f7e0:	4a38      	ldr	r2, [pc, #224]	; (800f8c4 <nk_do_button_symbol+0x134>)
 800f7e2:	21dc      	movs	r1, #220	; 0xdc
 800f7e4:	4838      	ldr	r0, [pc, #224]	; (800f8c8 <nk_do_button_symbol+0x138>)
 800f7e6:	f015 f983 	bl	8024af0 <__assert_func>
    NK_ASSERT(font);
 800f7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d105      	bne.n	800f7fc <nk_do_button_symbol+0x6c>
 800f7f0:	4b37      	ldr	r3, [pc, #220]	; (800f8d0 <nk_do_button_symbol+0x140>)
 800f7f2:	4a34      	ldr	r2, [pc, #208]	; (800f8c4 <nk_do_button_symbol+0x134>)
 800f7f4:	21dd      	movs	r1, #221	; 0xdd
 800f7f6:	4834      	ldr	r0, [pc, #208]	; (800f8c8 <nk_do_button_symbol+0x138>)
 800f7f8:	f015 f97a 	bl	8024af0 <__assert_func>
    NK_ASSERT(out);
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d105      	bne.n	800f80e <nk_do_button_symbol+0x7e>
 800f802:	4b34      	ldr	r3, [pc, #208]	; (800f8d4 <nk_do_button_symbol+0x144>)
 800f804:	4a2f      	ldr	r2, [pc, #188]	; (800f8c4 <nk_do_button_symbol+0x134>)
 800f806:	21de      	movs	r1, #222	; 0xde
 800f808:	482f      	ldr	r0, [pc, #188]	; (800f8c8 <nk_do_button_symbol+0x138>)
 800f80a:	f015 f971 	bl	8024af0 <__assert_func>
    if (!out || !style || !font || !state)
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d008      	beq.n	800f826 <nk_do_button_symbol+0x96>
 800f814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f816:	2b00      	cmp	r3, #0
 800f818:	d005      	beq.n	800f826 <nk_do_button_symbol+0x96>
 800f81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <nk_do_button_symbol+0x96>
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <nk_do_button_symbol+0x9a>
        return nk_false;
 800f826:	2300      	movs	r3, #0
 800f828:	e046      	b.n	800f8b8 <nk_do_button_symbol+0x128>

    ret = nk_do_button(state, out, bounds, style, in, behavior, &content);
 800f82a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f82e:	edd7 6a03 	vldr	s13, [r7, #12]
 800f832:	ed97 7a04 	vldr	s14, [r7, #16]
 800f836:	edd7 7a05 	vldr	s15, [r7, #20]
 800f83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f83e:	9301      	str	r3, [sp, #4]
 800f840:	79bb      	ldrb	r3, [r7, #6]
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f848:	eeb0 0a46 	vmov.f32	s0, s12
 800f84c:	eef0 0a66 	vmov.f32	s1, s13
 800f850:	eeb0 1a47 	vmov.f32	s2, s14
 800f854:	eef0 1a67 	vmov.f32	s3, s15
 800f858:	69b9      	ldr	r1, [r7, #24]
 800f85a:	69f8      	ldr	r0, [r7, #28]
 800f85c:	f7ff fd58 	bl	800f310 <nk_do_button>
 800f860:	6378      	str	r0, [r7, #52]	; 0x34
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 800f862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d007      	beq.n	800f87c <nk_do_button_symbol+0xec>
 800f86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f874:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f878:	69b8      	ldr	r0, [r7, #24]
 800f87a:	4798      	blx	r3
    nk_draw_button_symbol(out, &bounds, &content, *state, style, symbol, font);
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	6818      	ldr	r0, [r3, #0]
 800f880:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f884:	f107 0108 	add.w	r1, r7, #8
 800f888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f88a:	9302      	str	r3, [sp, #8]
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	9301      	str	r3, [sp, #4]
 800f890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	4603      	mov	r3, r0
 800f896:	69b8      	ldr	r0, [r7, #24]
 800f898:	f7ff ff2c 	bl	800f6f4 <nk_draw_button_symbol>
    if (style->draw_end) style->draw_end(out, style->userdata);
 800f89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d007      	beq.n	800f8b6 <nk_do_button_symbol+0x126>
 800f8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8ae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800f8b2:	69b8      	ldr	r0, [r7, #24]
 800f8b4:	4798      	blx	r3
    return ret;
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3738      	adds	r7, #56	; 0x38
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	08028634 	.word	0x08028634
 800f8c4:	0802a50c 	.word	0x0802a50c
 800f8c8:	08028618 	.word	0x08028618
 800f8cc:	08028610 	.word	0x08028610
 800f8d0:	08028648 	.word	0x08028648
 800f8d4:	0802863c 	.word	0x0802863c

0800f8d8 <nk_button_set_behavior>:
    if (style->draw_end) style->draw_end(out, style->userdata);
    return ret;
}
NK_API void
nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d106      	bne.n	800f8f8 <nk_button_set_behavior+0x20>
 800f8ea:	4b0b      	ldr	r3, [pc, #44]	; (800f918 <nk_button_set_behavior+0x40>)
 800f8ec:	4a0b      	ldr	r2, [pc, #44]	; (800f91c <nk_button_set_behavior+0x44>)
 800f8ee:	f240 118b 	movw	r1, #395	; 0x18b
 800f8f2:	480b      	ldr	r0, [pc, #44]	; (800f920 <nk_button_set_behavior+0x48>)
 800f8f4:	f015 f8fc 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d007      	beq.n	800f90e <nk_button_set_behavior+0x36>
    ctx->button_behavior = behavior;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f904:	461a      	mov	r2, r3
 800f906:	78fb      	ldrb	r3, [r7, #3]
 800f908:	f882 3ad8 	strb.w	r3, [r2, #2776]	; 0xad8
 800f90c:	e000      	b.n	800f910 <nk_button_set_behavior+0x38>
    if (!ctx) return;
 800f90e:	bf00      	nop
}
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	08028650 	.word	0x08028650
 800f91c:	0802a520 	.word	0x0802a520
 800f920:	08028618 	.word	0x08028618

0800f924 <nk_button_text_styled>:
    return 1;
}
NK_API nk_bool
nk_button_text_styled(struct nk_context *ctx,
    const struct nk_style_button *style, const char *title, int len)
{
 800f924:	b590      	push	{r4, r7, lr}
 800f926:	b093      	sub	sp, #76	; 0x4c
 800f928:	af06      	add	r7, sp, #24
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	607a      	str	r2, [r7, #4]
 800f930:	603b      	str	r3, [r7, #0]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d106      	bne.n	800f946 <nk_button_text_styled+0x22>
 800f938:	4b4f      	ldr	r3, [pc, #316]	; (800fa78 <nk_button_text_styled+0x154>)
 800f93a:	4a50      	ldr	r2, [pc, #320]	; (800fa7c <nk_button_text_styled+0x158>)
 800f93c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f940:	484f      	ldr	r0, [pc, #316]	; (800fa80 <nk_button_text_styled+0x15c>)
 800f942:	f015 f8d5 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d106      	bne.n	800f95a <nk_button_text_styled+0x36>
 800f94c:	4b4d      	ldr	r3, [pc, #308]	; (800fa84 <nk_button_text_styled+0x160>)
 800f94e:	4a4b      	ldr	r2, [pc, #300]	; (800fa7c <nk_button_text_styled+0x158>)
 800f950:	f240 11c1 	movw	r1, #449	; 0x1c1
 800f954:	484a      	ldr	r0, [pc, #296]	; (800fa80 <nk_button_text_styled+0x15c>)
 800f956:	f015 f8cb 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f960:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f964:	2b00      	cmp	r3, #0
 800f966:	d106      	bne.n	800f976 <nk_button_text_styled+0x52>
 800f968:	4b47      	ldr	r3, [pc, #284]	; (800fa88 <nk_button_text_styled+0x164>)
 800f96a:	4a44      	ldr	r2, [pc, #272]	; (800fa7c <nk_button_text_styled+0x158>)
 800f96c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800f970:	4843      	ldr	r0, [pc, #268]	; (800fa80 <nk_button_text_styled+0x15c>)
 800f972:	f015 f8bd 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f97c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d106      	bne.n	800f996 <nk_button_text_styled+0x72>
 800f988:	4b40      	ldr	r3, [pc, #256]	; (800fa8c <nk_button_text_styled+0x168>)
 800f98a:	4a3c      	ldr	r2, [pc, #240]	; (800fa7c <nk_button_text_styled+0x158>)
 800f98c:	f240 11c3 	movw	r1, #451	; 0x1c3
 800f990:	483b      	ldr	r0, [pc, #236]	; (800fa80 <nk_button_text_styled+0x15c>)
 800f992:	f015 f8ad 	bl	8024af0 <__assert_func>
    if (!style || !ctx || !ctx->current || !ctx->current->layout) return 0;
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d012      	beq.n	800f9c2 <nk_button_text_styled+0x9e>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00f      	beq.n	800f9c2 <nk_button_text_styled+0x9e>
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9a8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d008      	beq.n	800f9c2 <nk_button_text_styled+0x9e>
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9b6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <nk_button_text_styled+0xa2>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e054      	b.n	800fa70 <nk_button_text_styled+0x14c>

    win = ctx->current;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f9cc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800f9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9d8:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800f9da:	f107 0310 	add.w	r3, r7, #16
 800f9de:	68f9      	ldr	r1, [r7, #12]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f013 fd9f 	bl	8023524 <nk_widget>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!state) return 0;
 800f9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <nk_button_text_styled+0xd4>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	e03b      	b.n	800fa70 <nk_button_text_styled+0x14c>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800f9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d007      	beq.n	800fa10 <nk_button_text_styled+0xec>
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d101      	bne.n	800fa10 <nk_button_text_styled+0xec>
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	e000      	b.n	800fa12 <nk_button_text_styled+0xee>
 800fa10:	2300      	movs	r3, #0
 800fa12:	623b      	str	r3, [r7, #32]
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800fa1a:	3014      	adds	r0, #20
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	f103 0464 	add.w	r4, r3, #100	; 0x64
                    title, len, style->text_alignment, ctx->button_behavior,
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    return nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800fa2c:	f892 2ad8 	ldrb.w	r2, [r2, #2776]	; 0xad8
 800fa30:	68f9      	ldr	r1, [r7, #12]
 800fa32:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 800fa36:	ed97 6a04 	vldr	s12, [r7, #16]
 800fa3a:	edd7 6a05 	vldr	s13, [r7, #20]
 800fa3e:	ed97 7a06 	vldr	s14, [r7, #24]
 800fa42:	edd7 7a07 	vldr	s15, [r7, #28]
 800fa46:	9104      	str	r1, [sp, #16]
 800fa48:	6a39      	ldr	r1, [r7, #32]
 800fa4a:	9103      	str	r1, [sp, #12]
 800fa4c:	68b9      	ldr	r1, [r7, #8]
 800fa4e:	9102      	str	r1, [sp, #8]
 800fa50:	9201      	str	r2, [sp, #4]
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	eeb0 0a46 	vmov.f32	s0, s12
 800fa5c:	eef0 0a66 	vmov.f32	s1, s13
 800fa60:	eeb0 1a47 	vmov.f32	s2, s14
 800fa64:	eef0 1a67 	vmov.f32	s3, s15
 800fa68:	4621      	mov	r1, r4
 800fa6a:	f7ff fd91 	bl	800f590 <nk_do_button_text>
 800fa6e:	4603      	mov	r3, r0
                    style, in, ctx->style.font);
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3734      	adds	r7, #52	; 0x34
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd90      	pop	{r4, r7, pc}
 800fa78:	08028650 	.word	0x08028650
 800fa7c:	0802a538 	.word	0x0802a538
 800fa80:	08028618 	.word	0x08028618
 800fa84:	08028610 	.word	0x08028610
 800fa88:	080286cc 	.word	0x080286cc
 800fa8c:	080286dc 	.word	0x080286dc

0800fa90 <nk_button_text>:
NK_API nk_bool
nk_button_text(struct nk_context *ctx, const char *title, int len)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	607a      	str	r2, [r7, #4]
    NK_ASSERT(ctx);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d106      	bne.n	800fab0 <nk_button_text+0x20>
 800faa2:	4b0c      	ldr	r3, [pc, #48]	; (800fad4 <nk_button_text+0x44>)
 800faa4:	4a0c      	ldr	r2, [pc, #48]	; (800fad8 <nk_button_text+0x48>)
 800faa6:	f240 11d3 	movw	r1, #467	; 0x1d3
 800faaa:	480c      	ldr	r0, [pc, #48]	; (800fadc <nk_button_text+0x4c>)
 800faac:	f015 f820 	bl	8024af0 <__assert_func>
    if (!ctx) return 0;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d101      	bne.n	800faba <nk_button_text+0x2a>
 800fab6:	2300      	movs	r3, #0
 800fab8:	e008      	b.n	800facc <nk_button_text+0x3c>
    return nk_button_text_styled(ctx, &ctx->style.button, title, len);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f7ff ff2d 	bl	800f924 <nk_button_text_styled>
 800faca:	4603      	mov	r3, r0
}
 800facc:	4618      	mov	r0, r3
 800face:	3710      	adds	r7, #16
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	08028650 	.word	0x08028650
 800fad8:	0802a550 	.word	0x0802a550
 800fadc:	08028618 	.word	0x08028618

0800fae0 <nk_button_label>:
    const struct nk_style_button *style, const char *title)
{
    return nk_button_text_styled(ctx, style, title, nk_strlen(title));
}
NK_API nk_bool nk_button_label(struct nk_context *ctx, const char *title)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
    return nk_button_text(ctx, title, nk_strlen(title));
 800faea:	6838      	ldr	r0, [r7, #0]
 800faec:	f012 fdf4 	bl	80226d8 <nk_strlen>
 800faf0:	4603      	mov	r3, r0
 800faf2:	461a      	mov	r2, r3
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ffca 	bl	800fa90 <nk_button_text>
 800fafc:	4603      	mov	r3, r0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <nk_button_symbol_styled>:
    return ret;
}
NK_API nk_bool
nk_button_symbol_styled(struct nk_context *ctx,
    const struct nk_style_button *style, enum nk_symbol_type symbol)
{
 800fb08:	b590      	push	{r4, r7, lr}
 800fb0a:	b091      	sub	sp, #68	; 0x44
 800fb0c:	af04      	add	r7, sp, #16
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	4613      	mov	r3, r2
 800fb14:	71fb      	strb	r3, [r7, #7]
    const struct nk_input *in;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d106      	bne.n	800fb2a <nk_button_symbol_styled+0x22>
 800fb1c:	4b46      	ldr	r3, [pc, #280]	; (800fc38 <nk_button_symbol_styled+0x130>)
 800fb1e:	4a47      	ldr	r2, [pc, #284]	; (800fc3c <nk_button_symbol_styled+0x134>)
 800fb20:	f240 210e 	movw	r1, #526	; 0x20e
 800fb24:	4846      	ldr	r0, [pc, #280]	; (800fc40 <nk_button_symbol_styled+0x138>)
 800fb26:	f014 ffe3 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb30:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d106      	bne.n	800fb46 <nk_button_symbol_styled+0x3e>
 800fb38:	4b42      	ldr	r3, [pc, #264]	; (800fc44 <nk_button_symbol_styled+0x13c>)
 800fb3a:	4a40      	ldr	r2, [pc, #256]	; (800fc3c <nk_button_symbol_styled+0x134>)
 800fb3c:	f240 210f 	movw	r1, #527	; 0x20f
 800fb40:	483f      	ldr	r0, [pc, #252]	; (800fc40 <nk_button_symbol_styled+0x138>)
 800fb42:	f014 ffd5 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb4c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d106      	bne.n	800fb66 <nk_button_symbol_styled+0x5e>
 800fb58:	4b3b      	ldr	r3, [pc, #236]	; (800fc48 <nk_button_symbol_styled+0x140>)
 800fb5a:	4a38      	ldr	r2, [pc, #224]	; (800fc3c <nk_button_symbol_styled+0x134>)
 800fb5c:	f44f 7104 	mov.w	r1, #528	; 0x210
 800fb60:	4837      	ldr	r0, [pc, #220]	; (800fc40 <nk_button_symbol_styled+0x138>)
 800fb62:	f014 ffc5 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00f      	beq.n	800fb8c <nk_button_symbol_styled+0x84>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb72:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d008      	beq.n	800fb8c <nk_button_symbol_styled+0x84>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb80:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <nk_button_symbol_styled+0x88>
        return 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e04f      	b.n	800fc30 <nk_button_symbol_styled+0x128>

    win = ctx->current;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fb96:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    layout = win->layout;
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fba2:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget(&bounds, ctx);
 800fba4:	f107 0310 	add.w	r3, r7, #16
 800fba8:	68f9      	ldr	r1, [r7, #12]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f013 fcba 	bl	8023524 <nk_widget>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return 0;
 800fbb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <nk_button_symbol_styled+0xba>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e036      	b.n	800fc30 <nk_button_symbol_styled+0x128>
    in = (state == NK_WIDGET_ROM || layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 800fbc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbc6:	2b02      	cmp	r3, #2
 800fbc8:	d007      	beq.n	800fbda <nk_button_symbol_styled+0xd2>
 800fbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d101      	bne.n	800fbda <nk_button_symbol_styled+0xd2>
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	e000      	b.n	800fbdc <nk_button_symbol_styled+0xd4>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	623b      	str	r3, [r7, #32]
    return nk_do_button_symbol(&ctx->last_widget_state, &win->buffer, bounds,
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 800fbe4:	3014      	adds	r0, #20
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbf2:	f893 4ad8 	ldrb.w	r4, [r3, #2776]	; 0xad8
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800fbfc:	79fa      	ldrb	r2, [r7, #7]
 800fbfe:	ed97 6a04 	vldr	s12, [r7, #16]
 800fc02:	edd7 6a05 	vldr	s13, [r7, #20]
 800fc06:	ed97 7a06 	vldr	s14, [r7, #24]
 800fc0a:	edd7 7a07 	vldr	s15, [r7, #28]
 800fc0e:	9302      	str	r3, [sp, #8]
 800fc10:	6a3b      	ldr	r3, [r7, #32]
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	4623      	mov	r3, r4
 800fc1a:	eeb0 0a46 	vmov.f32	s0, s12
 800fc1e:	eef0 0a66 	vmov.f32	s1, s13
 800fc22:	eeb0 1a47 	vmov.f32	s2, s14
 800fc26:	eef0 1a67 	vmov.f32	s3, s15
 800fc2a:	f7ff fdb1 	bl	800f790 <nk_do_button_symbol>
 800fc2e:	4603      	mov	r3, r0
            symbol, ctx->button_behavior, style, in, ctx->style.font);
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3734      	adds	r7, #52	; 0x34
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd90      	pop	{r4, r7, pc}
 800fc38:	08028650 	.word	0x08028650
 800fc3c:	0802a560 	.word	0x0802a560
 800fc40:	08028618 	.word	0x08028618
 800fc44:	080286cc 	.word	0x080286cc
 800fc48:	080286dc 	.word	0x080286dc

0800fc4c <nk_button_symbol>:
NK_API nk_bool
nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	460b      	mov	r3, r1
 800fc56:	70fb      	strb	r3, [r7, #3]
    NK_ASSERT(ctx);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d106      	bne.n	800fc6c <nk_button_symbol+0x20>
 800fc5e:	4b0c      	ldr	r3, [pc, #48]	; (800fc90 <nk_button_symbol+0x44>)
 800fc60:	4a0c      	ldr	r2, [pc, #48]	; (800fc94 <nk_button_symbol+0x48>)
 800fc62:	f240 211f 	movw	r1, #543	; 0x21f
 800fc66:	480c      	ldr	r0, [pc, #48]	; (800fc98 <nk_button_symbol+0x4c>)
 800fc68:	f014 ff42 	bl	8024af0 <__assert_func>
    if (!ctx) return 0;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d101      	bne.n	800fc76 <nk_button_symbol+0x2a>
 800fc72:	2300      	movs	r3, #0
 800fc74:	e008      	b.n	800fc88 <nk_button_symbol+0x3c>
    return nk_button_symbol_styled(ctx, &ctx->style.button, symbol);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fc7c:	78fa      	ldrb	r2, [r7, #3]
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7ff ff41 	bl	800fb08 <nk_button_symbol_styled>
 800fc86:	4603      	mov	r3, r0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	08028650 	.word	0x08028650
 800fc94:	0802a578 	.word	0x0802a578
 800fc98:	08028618 	.word	0x08028618

0800fc9c <nk_rgba>:
    }
    return i;
}
NK_API struct nk_color
nk_rgba(int r, int g, int b, int a)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b087      	sub	sp, #28
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	db07      	blt.n	800fcc0 <nk_rgba+0x24>
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2bfe      	cmp	r3, #254	; 0xfe
 800fcb4:	dc02      	bgt.n	800fcbc <nk_rgba+0x20>
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	e002      	b.n	800fcc2 <nk_rgba+0x26>
 800fcbc:	23ff      	movs	r3, #255	; 0xff
 800fcbe:	e000      	b.n	800fcc2 <nk_rgba+0x26>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	db07      	blt.n	800fcda <nk_rgba+0x3e>
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	2bfe      	cmp	r3, #254	; 0xfe
 800fcce:	dc02      	bgt.n	800fcd6 <nk_rgba+0x3a>
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	e002      	b.n	800fcdc <nk_rgba+0x40>
 800fcd6:	23ff      	movs	r3, #255	; 0xff
 800fcd8:	e000      	b.n	800fcdc <nk_rgba+0x40>
 800fcda:	2300      	movs	r3, #0
 800fcdc:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	db07      	blt.n	800fcf4 <nk_rgba+0x58>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2bfe      	cmp	r3, #254	; 0xfe
 800fce8:	dc02      	bgt.n	800fcf0 <nk_rgba+0x54>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	e002      	b.n	800fcf6 <nk_rgba+0x5a>
 800fcf0:	23ff      	movs	r3, #255	; 0xff
 800fcf2:	e000      	b.n	800fcf6 <nk_rgba+0x5a>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)NK_CLAMP(0, a, 255);
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	db07      	blt.n	800fd0e <nk_rgba+0x72>
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	2bfe      	cmp	r3, #254	; 0xfe
 800fd02:	dc02      	bgt.n	800fd0a <nk_rgba+0x6e>
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	e002      	b.n	800fd10 <nk_rgba+0x74>
 800fd0a:	23ff      	movs	r3, #255	; 0xff
 800fd0c:	e000      	b.n	800fd10 <nk_rgba+0x74>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	74fb      	strb	r3, [r7, #19]
    return ret;
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	617b      	str	r3, [r7, #20]
 800fd16:	2300      	movs	r3, #0
 800fd18:	7d3a      	ldrb	r2, [r7, #20]
 800fd1a:	f362 0307 	bfi	r3, r2, #0, #8
 800fd1e:	7d7a      	ldrb	r2, [r7, #21]
 800fd20:	f362 230f 	bfi	r3, r2, #8, #8
 800fd24:	7dba      	ldrb	r2, [r7, #22]
 800fd26:	f362 4317 	bfi	r3, r2, #16, #8
 800fd2a:	7dfa      	ldrb	r2, [r7, #23]
 800fd2c:	f362 631f 	bfi	r3, r2, #24, #8
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	371c      	adds	r7, #28
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <nk_rgb>:
{
    return nk_rgba(c[0], c[1], c[2], c[3]);
}
NK_API struct nk_color
nk_rgb(int r, int g, int b)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b087      	sub	sp, #28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
    struct nk_color ret;
    ret.r = (nk_byte)NK_CLAMP(0, r, 255);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	db07      	blt.n	800fd5e <nk_rgb+0x22>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2bfe      	cmp	r3, #254	; 0xfe
 800fd52:	dc02      	bgt.n	800fd5a <nk_rgb+0x1e>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	e002      	b.n	800fd60 <nk_rgb+0x24>
 800fd5a:	23ff      	movs	r3, #255	; 0xff
 800fd5c:	e000      	b.n	800fd60 <nk_rgb+0x24>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	743b      	strb	r3, [r7, #16]
    ret.g = (nk_byte)NK_CLAMP(0, g, 255);
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	db07      	blt.n	800fd78 <nk_rgb+0x3c>
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	2bfe      	cmp	r3, #254	; 0xfe
 800fd6c:	dc02      	bgt.n	800fd74 <nk_rgb+0x38>
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	e002      	b.n	800fd7a <nk_rgb+0x3e>
 800fd74:	23ff      	movs	r3, #255	; 0xff
 800fd76:	e000      	b.n	800fd7a <nk_rgb+0x3e>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	747b      	strb	r3, [r7, #17]
    ret.b = (nk_byte)NK_CLAMP(0, b, 255);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	db07      	blt.n	800fd92 <nk_rgb+0x56>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2bfe      	cmp	r3, #254	; 0xfe
 800fd86:	dc02      	bgt.n	800fd8e <nk_rgb+0x52>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	e002      	b.n	800fd94 <nk_rgb+0x58>
 800fd8e:	23ff      	movs	r3, #255	; 0xff
 800fd90:	e000      	b.n	800fd94 <nk_rgb+0x58>
 800fd92:	2300      	movs	r3, #0
 800fd94:	74bb      	strb	r3, [r7, #18]
    ret.a = (nk_byte)255;
 800fd96:	23ff      	movs	r3, #255	; 0xff
 800fd98:	74fb      	strb	r3, [r7, #19]
    return ret;
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	617b      	str	r3, [r7, #20]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	7d3a      	ldrb	r2, [r7, #20]
 800fda2:	f362 0307 	bfi	r3, r2, #0, #8
 800fda6:	7d7a      	ldrb	r2, [r7, #21]
 800fda8:	f362 230f 	bfi	r3, r2, #8, #8
 800fdac:	7dba      	ldrb	r2, [r7, #22]
 800fdae:	f362 4317 	bfi	r3, r2, #16, #8
 800fdb2:	7dfa      	ldrb	r2, [r7, #23]
 800fdb4:	f362 631f 	bfi	r3, r2, #24, #8
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	371c      	adds	r7, #28
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr

0800fdc4 <nk_combo_begin>:
 *
 * ===============================================================*/
NK_INTERN nk_bool
nk_combo_begin(struct nk_context *ctx, struct nk_window *win,
    struct nk_vec2 size, nk_bool is_clicked, struct nk_rect header)
{
 800fdc4:	b590      	push	{r4, r7, lr}
 800fdc6:	b097      	sub	sp, #92	; 0x5c
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6278      	str	r0, [r7, #36]	; 0x24
 800fdcc:	6239      	str	r1, [r7, #32]
 800fdce:	eeb0 5a40 	vmov.f32	s10, s0
 800fdd2:	eef0 5a60 	vmov.f32	s11, s1
 800fdd6:	617a      	str	r2, [r7, #20]
 800fdd8:	eeb0 6a41 	vmov.f32	s12, s2
 800fddc:	eef0 6a61 	vmov.f32	s13, s3
 800fde0:	eeb0 7a42 	vmov.f32	s14, s4
 800fde4:	eef0 7a62 	vmov.f32	s15, s5
 800fde8:	ed87 5a06 	vstr	s10, [r7, #24]
 800fdec:	edc7 5a07 	vstr	s11, [r7, #28]
 800fdf0:	ed87 6a01 	vstr	s12, [r7, #4]
 800fdf4:	edc7 6a02 	vstr	s13, [r7, #8]
 800fdf8:	ed87 7a03 	vstr	s14, [r7, #12]
 800fdfc:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *popup;
    int is_open = 0;
 800fe00:	2300      	movs	r3, #0
 800fe02:	657b      	str	r3, [r7, #84]	; 0x54
    int is_active = 0;
 800fe04:	2300      	movs	r3, #0
 800fe06:	653b      	str	r3, [r7, #80]	; 0x50
    struct nk_rect body;
    nk_hash hash;

    NK_ASSERT(ctx);
 800fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d105      	bne.n	800fe1a <nk_combo_begin+0x56>
 800fe0e:	4b75      	ldr	r3, [pc, #468]	; (800ffe4 <nk_combo_begin+0x220>)
 800fe10:	4a75      	ldr	r2, [pc, #468]	; (800ffe8 <nk_combo_begin+0x224>)
 800fe12:	2113      	movs	r1, #19
 800fe14:	4875      	ldr	r0, [pc, #468]	; (800ffec <nk_combo_begin+0x228>)
 800fe16:	f014 fe6b 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe20:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d105      	bne.n	800fe34 <nk_combo_begin+0x70>
 800fe28:	4b71      	ldr	r3, [pc, #452]	; (800fff0 <nk_combo_begin+0x22c>)
 800fe2a:	4a6f      	ldr	r2, [pc, #444]	; (800ffe8 <nk_combo_begin+0x224>)
 800fe2c:	2114      	movs	r1, #20
 800fe2e:	486f      	ldr	r0, [pc, #444]	; (800ffec <nk_combo_begin+0x228>)
 800fe30:	f014 fe5e 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe3a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d105      	bne.n	800fe52 <nk_combo_begin+0x8e>
 800fe46:	4b6b      	ldr	r3, [pc, #428]	; (800fff4 <nk_combo_begin+0x230>)
 800fe48:	4a67      	ldr	r2, [pc, #412]	; (800ffe8 <nk_combo_begin+0x224>)
 800fe4a:	2115      	movs	r1, #21
 800fe4c:	4867      	ldr	r0, [pc, #412]	; (800ffec <nk_combo_begin+0x228>)
 800fe4e:	f014 fe4f 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 800fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00f      	beq.n	800fe78 <nk_combo_begin+0xb4>
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe5e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d008      	beq.n	800fe78 <nk_combo_begin+0xb4>
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe6c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 800fe70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d101      	bne.n	800fe7c <nk_combo_begin+0xb8>
        return 0;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	e0af      	b.n	800ffdc <nk_combo_begin+0x218>

    popup = win->popup.win;
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800fe82:	64fb      	str	r3, [r7, #76]	; 0x4c
    body.x = header.x;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	62bb      	str	r3, [r7, #40]	; 0x28
    body.w = size.x;
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	633b      	str	r3, [r7, #48]	; 0x30
    body.y = header.y + header.h-ctx->style.window.combo_border;
 800fe8c:	ed97 7a02 	vldr	s14, [r7, #8]
 800fe90:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe94:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe9e:	f603 231c 	addw	r3, r3, #2588	; 0xa1c
 800fea2:	edd3 7a00 	vldr	s15, [r3]
 800fea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800feaa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    body.h = size.y;
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	637b      	str	r3, [r7, #52]	; 0x34

    hash = win->popup.combo_count++;
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800feb8:	1c59      	adds	r1, r3, #1
 800feba:	6a3a      	ldr	r2, [r7, #32]
 800febc:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 800fec0:	64bb      	str	r3, [r7, #72]	; 0x48
    is_open = (popup) ? nk_true:nk_false;
 800fec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	bf14      	ite	ne
 800fec8:	2301      	movne	r3, #1
 800feca:	2300      	moveq	r3, #0
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	657b      	str	r3, [r7, #84]	; 0x54
    is_active = (popup && (win->popup.name == hash) && win->popup.type == NK_PANEL_COMBO);
 800fed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d00c      	beq.n	800fef0 <nk_combo_begin+0x12c>
 800fed6:	6a3b      	ldr	r3, [r7, #32]
 800fed8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fedc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fede:	429a      	cmp	r2, r3
 800fee0:	d106      	bne.n	800fef0 <nk_combo_begin+0x12c>
 800fee2:	6a3b      	ldr	r3, [r7, #32]
 800fee4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fee8:	2b20      	cmp	r3, #32
 800feea:	d101      	bne.n	800fef0 <nk_combo_begin+0x12c>
 800feec:	2301      	movs	r3, #1
 800feee:	e000      	b.n	800fef2 <nk_combo_begin+0x12e>
 800fef0:	2300      	movs	r3, #0
 800fef2:	653b      	str	r3, [r7, #80]	; 0x50
    if ((is_clicked && is_open && !is_active) || (is_open && !is_active) ||
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d005      	beq.n	800ff06 <nk_combo_begin+0x142>
 800fefa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d002      	beq.n	800ff06 <nk_combo_begin+0x142>
 800ff00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00e      	beq.n	800ff24 <nk_combo_begin+0x160>
 800ff06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d002      	beq.n	800ff12 <nk_combo_begin+0x14e>
 800ff0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d008      	beq.n	800ff24 <nk_combo_begin+0x160>
 800ff12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d107      	bne.n	800ff28 <nk_combo_begin+0x164>
        (!is_open && !is_active && !is_clicked)) return 0;
 800ff18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d104      	bne.n	800ff28 <nk_combo_begin+0x164>
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <nk_combo_begin+0x164>
 800ff24:	2300      	movs	r3, #0
 800ff26:	e059      	b.n	800ffdc <nk_combo_begin+0x218>
    if (!nk_nonblock_begin(ctx, 0, body,
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d01d      	beq.n	800ff6a <nk_combo_begin+0x1a6>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800ff2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d01a      	beq.n	800ff6a <nk_combo_begin+0x1a6>
 800ff34:	eddf 1a30 	vldr	s3, [pc, #192]	; 800fff8 <nk_combo_begin+0x234>
 800ff38:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800fff8 <nk_combo_begin+0x234>
 800ff3c:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800fff8 <nk_combo_begin+0x234>
 800ff40:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800fff8 <nk_combo_begin+0x234>
 800ff44:	f006 fc7e 	bl	8016844 <nk_rect>
 800ff48:	eeb0 6a40 	vmov.f32	s12, s0
 800ff4c:	eef0 6a60 	vmov.f32	s13, s1
 800ff50:	eeb0 7a41 	vmov.f32	s14, s2
 800ff54:	eef0 7a61 	vmov.f32	s15, s3
 800ff58:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800ff5c:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 800ff60:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 800ff64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    if (!nk_nonblock_begin(ctx, 0, body,
 800ff68:	e005      	b.n	800ff76 <nk_combo_begin+0x1b2>
 800ff6a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800ff6e:	1d3b      	adds	r3, r7, #4
 800ff70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ff76:	ed97 4a0e 	vldr	s8, [r7, #56]	; 0x38
 800ff7a:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800ff7e:	ed97 5a10 	vldr	s10, [r7, #64]	; 0x40
 800ff82:	edd7 5a11 	vldr	s11, [r7, #68]	; 0x44
 800ff86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ff8a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ff8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ff92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ff96:	2220      	movs	r2, #32
 800ff98:	eeb0 2a44 	vmov.f32	s4, s8
 800ff9c:	eef0 2a64 	vmov.f32	s5, s9
 800ffa0:	eeb0 3a45 	vmov.f32	s6, s10
 800ffa4:	eef0 3a65 	vmov.f32	s7, s11
 800ffa8:	eeb0 0a46 	vmov.f32	s0, s12
 800ffac:	eef0 0a66 	vmov.f32	s1, s13
 800ffb0:	eeb0 1a47 	vmov.f32	s2, s14
 800ffb4:	eef0 1a67 	vmov.f32	s3, s15
 800ffb8:	2100      	movs	r1, #0
 800ffba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffbc:	f009 fc54 	bl	8019868 <nk_nonblock_begin>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <nk_combo_begin+0x206>
        (is_clicked && is_open)?nk_rect(0,0,0,0):header, NK_PANEL_COMBO)) return 0;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	e008      	b.n	800ffdc <nk_combo_begin+0x218>

    win->popup.type = NK_PANEL_COMBO;
 800ffca:	6a3b      	ldr	r3, [r7, #32]
 800ffcc:	2220      	movs	r2, #32
 800ffce:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    win->popup.name = hash;
 800ffd2:	6a3b      	ldr	r3, [r7, #32]
 800ffd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffd6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    return 1;
 800ffda:	2301      	movs	r3, #1
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	375c      	adds	r7, #92	; 0x5c
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd90      	pop	{r4, r7, pc}
 800ffe4:	080286f4 	.word	0x080286f4
 800ffe8:	0802a590 	.word	0x0802a590
 800ffec:	080286f8 	.word	0x080286f8
 800fff0:	08028714 	.word	0x08028714
 800fff4:	08028724 	.word	0x08028724
 800fff8:	00000000 	.word	0x00000000

0800fffc <nk_combo_begin_text>:
NK_API nk_bool
nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,
    struct nk_vec2 size)
{
 800fffc:	b5b0      	push	{r4, r5, r7, lr}
 800fffe:	b0a6      	sub	sp, #152	; 0x98
 8010000:	af04      	add	r7, sp, #16
 8010002:	6178      	str	r0, [r7, #20]
 8010004:	6139      	str	r1, [r7, #16]
 8010006:	60fa      	str	r2, [r7, #12]
 8010008:	eeb0 7a40 	vmov.f32	s14, s0
 801000c:	eef0 7a60 	vmov.f32	s15, s1
 8010010:	ed87 7a01 	vstr	s14, [r7, #4]
 8010014:	edc7 7a02 	vstr	s15, [r7, #8]
    const struct nk_input *in;
    struct nk_window *win;
    struct nk_style *style;

    enum nk_widget_layout_states s;
    int is_clicked = nk_false;
 8010018:	2300      	movs	r3, #0
 801001a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    struct nk_rect header;
    const struct nk_style_item *background;
    struct nk_text text;

    NK_ASSERT(ctx);
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d105      	bne.n	8010030 <nk_combo_begin_text+0x34>
 8010024:	4bc3      	ldr	r3, [pc, #780]	; (8010334 <nk_combo_begin_text+0x338>)
 8010026:	4ac4      	ldr	r2, [pc, #784]	; (8010338 <nk_combo_begin_text+0x33c>)
 8010028:	2139      	movs	r1, #57	; 0x39
 801002a:	48c4      	ldr	r0, [pc, #784]	; (801033c <nk_combo_begin_text+0x340>)
 801002c:	f014 fd60 	bl	8024af0 <__assert_func>
    NK_ASSERT(selected);
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d105      	bne.n	8010042 <nk_combo_begin_text+0x46>
 8010036:	4bc2      	ldr	r3, [pc, #776]	; (8010340 <nk_combo_begin_text+0x344>)
 8010038:	4abf      	ldr	r2, [pc, #764]	; (8010338 <nk_combo_begin_text+0x33c>)
 801003a:	213a      	movs	r1, #58	; 0x3a
 801003c:	48bf      	ldr	r0, [pc, #764]	; (801033c <nk_combo_begin_text+0x340>)
 801003e:	f014 fd57 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010048:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801004c:	2b00      	cmp	r3, #0
 801004e:	d105      	bne.n	801005c <nk_combo_begin_text+0x60>
 8010050:	4bbc      	ldr	r3, [pc, #752]	; (8010344 <nk_combo_begin_text+0x348>)
 8010052:	4ab9      	ldr	r2, [pc, #740]	; (8010338 <nk_combo_begin_text+0x33c>)
 8010054:	213b      	movs	r1, #59	; 0x3b
 8010056:	48b9      	ldr	r0, [pc, #740]	; (801033c <nk_combo_begin_text+0x340>)
 8010058:	f014 fd4a 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010062:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801006a:	2b00      	cmp	r3, #0
 801006c:	d105      	bne.n	801007a <nk_combo_begin_text+0x7e>
 801006e:	4bb6      	ldr	r3, [pc, #728]	; (8010348 <nk_combo_begin_text+0x34c>)
 8010070:	4ab1      	ldr	r2, [pc, #708]	; (8010338 <nk_combo_begin_text+0x33c>)
 8010072:	213c      	movs	r1, #60	; 0x3c
 8010074:	48b1      	ldr	r0, [pc, #708]	; (801033c <nk_combo_begin_text+0x340>)
 8010076:	f014 fd3b 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout || !selected)
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d012      	beq.n	80100a6 <nk_combo_begin_text+0xaa>
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010086:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00b      	beq.n	80100a6 <nk_combo_begin_text+0xaa>
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010094:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8010098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <nk_combo_begin_text+0xaa>
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <nk_combo_begin_text+0xae>
        return 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	e28f      	b.n	80105ca <nk_combo_begin_text+0x5ce>

    win = ctx->current;
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80100b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80100b4:	67bb      	str	r3, [r7, #120]	; 0x78
    style = &ctx->style;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80100bc:	677b      	str	r3, [r7, #116]	; 0x74
    s = nk_widget(&header, ctx);
 80100be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80100c2:	6979      	ldr	r1, [r7, #20]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f013 fa2d 	bl	8023524 <nk_widget>
 80100ca:	4603      	mov	r3, r0
 80100cc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if (s == NK_WIDGET_INVALID)
 80100d0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d101      	bne.n	80100dc <nk_combo_begin_text+0xe0>
        return 0;
 80100d8:	2300      	movs	r3, #0
 80100da:	e276      	b.n	80105ca <nk_combo_begin_text+0x5ce>

    in = (win->layout->flags & NK_WINDOW_ROM || s == NK_WIDGET_ROM)? 0: &ctx->input;
 80100dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80100de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d105      	bne.n	80100f8 <nk_combo_begin_text+0xfc>
 80100ec:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	d001      	beq.n	80100f8 <nk_combo_begin_text+0xfc>
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	e000      	b.n	80100fa <nk_combo_begin_text+0xfe>
 80100f8:	2300      	movs	r3, #0
 80100fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (nk_button_behavior(&ctx->last_widget_state, header, in, NK_BUTTON_DEFAULT))
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	f503 53d6 	add.w	r3, r3, #6848	; 0x1ac0
 8010102:	3314      	adds	r3, #20
 8010104:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010108:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801010c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010110:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010114:	2200      	movs	r2, #0
 8010116:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010118:	eeb0 0a46 	vmov.f32	s0, s12
 801011c:	eef0 0a66 	vmov.f32	s1, s13
 8010120:	eeb0 1a47 	vmov.f32	s2, s14
 8010124:	eef0 1a67 	vmov.f32	s3, s15
 8010128:	4618      	mov	r0, r3
 801012a:	f7fe ff9f 	bl	800f06c <nk_button_behavior>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d002      	beq.n	801013a <nk_combo_begin_text+0x13e>
        is_clicked = nk_true;
 8010134:	2301      	movs	r3, #1
 8010136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* draw combo box header background and border */
    if (ctx->last_widget_state & NK_WIDGET_STATE_ACTIVED) {
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010140:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8010144:	f003 0320 	and.w	r3, r3, #32
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00c      	beq.n	8010166 <nk_combo_begin_text+0x16a>
        background = &style->combo.active;
 801014c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801014e:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 8010152:	3318      	adds	r3, #24
 8010154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_active;
 8010158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801015a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801015e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8010162:	657b      	str	r3, [r7, #84]	; 0x54
 8010164:	e020      	b.n	80101a8 <nk_combo_begin_text+0x1ac>
    } else if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER) {
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801016c:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8010170:	f003 0310 	and.w	r3, r3, #16
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00c      	beq.n	8010192 <nk_combo_begin_text+0x196>
        background = &style->combo.hover;
 8010178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801017a:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 801017e:	331c      	adds	r3, #28
 8010180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_hover;
 8010184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801018a:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 801018e:	657b      	str	r3, [r7, #84]	; 0x54
 8010190:	e00a      	b.n	80101a8 <nk_combo_begin_text+0x1ac>
    } else {
        background = &style->combo.normal;
 8010192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010194:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 8010198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        text.text = style->combo.label_normal;
 801019c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801019e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101a2:	f8d3 35d8 	ldr.w	r3, [r3, #1496]	; 0x5d8
 80101a6:	657b      	str	r3, [r7, #84]	; 0x54
    }

    switch(background->type) {
 80101a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	d02b      	beq.n	801020a <nk_combo_begin_text+0x20e>
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	f300 80a1 	bgt.w	80102fa <nk_combo_begin_text+0x2fe>
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d04a      	beq.n	8010252 <nk_combo_begin_text+0x256>
 80101bc:	2b01      	cmp	r3, #1
 80101be:	f040 809c 	bne.w	80102fa <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 80101c2:	2300      	movs	r3, #0
 80101c4:	2200      	movs	r2, #0
 80101c6:	2100      	movs	r1, #0
 80101c8:	2000      	movs	r0, #0
 80101ca:	f7ff fd67 	bl	800fc9c <nk_rgba>
 80101ce:	4603      	mov	r3, r0
 80101d0:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 80101d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101d4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80101d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101dc:	3304      	adds	r3, #4
 80101de:	4a5b      	ldr	r2, [pc, #364]	; (801034c <nk_combo_begin_text+0x350>)
 80101e0:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80101e4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80101e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80101ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80101f0:	6812      	ldr	r2, [r2, #0]
 80101f2:	4619      	mov	r1, r3
 80101f4:	eeb0 0a46 	vmov.f32	s0, s12
 80101f8:	eef0 0a66 	vmov.f32	s1, s13
 80101fc:	eeb0 1a47 	vmov.f32	s2, s14
 8010200:	eef0 1a67 	vmov.f32	s3, s15
 8010204:	f001 ffb2 	bl	801216c <nk_draw_image>
            break;
 8010208:	e077      	b.n	80102fa <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 801020a:	2300      	movs	r3, #0
 801020c:	2200      	movs	r2, #0
 801020e:	2100      	movs	r1, #0
 8010210:	2000      	movs	r0, #0
 8010212:	f7ff fd43 	bl	800fc9c <nk_rgba>
 8010216:	4603      	mov	r3, r0
 8010218:	653b      	str	r3, [r7, #80]	; 0x50
            nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 801021a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801021c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8010220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010224:	3304      	adds	r3, #4
 8010226:	4a49      	ldr	r2, [pc, #292]	; (801034c <nk_combo_begin_text+0x350>)
 8010228:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 801022c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010230:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010234:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010238:	6812      	ldr	r2, [r2, #0]
 801023a:	4619      	mov	r1, r3
 801023c:	eeb0 0a46 	vmov.f32	s0, s12
 8010240:	eef0 0a66 	vmov.f32	s1, s13
 8010244:	eeb0 1a47 	vmov.f32	s2, s14
 8010248:	eef0 1a67 	vmov.f32	s3, s15
 801024c:	f002 f880 	bl	8012350 <nk_draw_nine_slice>
            break;
 8010250:	e053      	b.n	80102fa <nk_combo_begin_text+0x2fe>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 8010252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	653b      	str	r3, [r7, #80]	; 0x50
            nk_fill_rect(&win->buffer, header, style->combo.rounding, background->data.color);
 801025a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801025c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8010260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010266:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 801026a:	edd3 5a00 	vldr	s11, [r3]
 801026e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010272:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8010276:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801027a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801027e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010282:	6859      	ldr	r1, [r3, #4]
 8010284:	eeb0 2a65 	vmov.f32	s4, s11
 8010288:	eeb0 0a46 	vmov.f32	s0, s12
 801028c:	eef0 0a66 	vmov.f32	s1, s13
 8010290:	eeb0 1a47 	vmov.f32	s2, s14
 8010294:	eef0 1a67 	vmov.f32	s3, s15
 8010298:	4610      	mov	r0, r2
 801029a:	f001 fc0d 	bl	8011ab8 <nk_fill_rect>
            nk_stroke_rect(&win->buffer, header, style->combo.rounding, style->combo.border, style->combo.border_color);
 801029e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102a0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80102a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102aa:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80102ae:	edd3 5a00 	vldr	s11, [r3]
 80102b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102b8:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80102bc:	ed93 5a00 	vldr	s10, [r3]
 80102c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102c6:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80102ca:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80102ce:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80102d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80102d6:	f8d3 15d4 	ldr.w	r1, [r3, #1492]	; 0x5d4
 80102da:	eef0 2a45 	vmov.f32	s5, s10
 80102de:	eeb0 2a65 	vmov.f32	s4, s11
 80102e2:	eeb0 0a46 	vmov.f32	s0, s12
 80102e6:	eef0 0a66 	vmov.f32	s1, s13
 80102ea:	eeb0 1a47 	vmov.f32	s2, s14
 80102ee:	eef0 1a67 	vmov.f32	s3, s15
 80102f2:	4610      	mov	r0, r2
 80102f4:	f001 fad8 	bl	80118a8 <nk_stroke_rect>
            break;
 80102f8:	bf00      	nop
        struct nk_rect button;
        struct nk_rect content;
        int draw_button_symbol;

        enum nk_symbol_type sym;
        if (ctx->last_widget_state & NK_WIDGET_STATE_HOVER)
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010300:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8010304:	f003 0310 	and.w	r3, r3, #16
 8010308:	2b00      	cmp	r3, #0
 801030a:	d007      	beq.n	801031c <nk_combo_begin_text+0x320>
            sym = style->combo.sym_hover;
 801030c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801030e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010312:	f893 3689 	ldrb.w	r3, [r3, #1673]	; 0x689
 8010316:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801031a:	e022      	b.n	8010362 <nk_combo_begin_text+0x366>
        else if (is_clicked)
 801031c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010320:	2b00      	cmp	r3, #0
 8010322:	d017      	beq.n	8010354 <nk_combo_begin_text+0x358>
            sym = style->combo.sym_active;
 8010324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801032a:	f893 368a 	ldrb.w	r3, [r3, #1674]	; 0x68a
 801032e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010332:	e016      	b.n	8010362 <nk_combo_begin_text+0x366>
 8010334:	080286f4 	.word	0x080286f4
 8010338:	0802a5a0 	.word	0x0802a5a0
 801033c:	080286f8 	.word	0x080286f8
 8010340:	0802873c 	.word	0x0802873c
 8010344:	08028714 	.word	0x08028714
 8010348:	08028724 	.word	0x08028724
 801034c:	0802a58c 	.word	0x0802a58c
 8010350:	00000000 	.word	0x00000000
        else
            sym = style->combo.sym_normal;
 8010354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801035a:	f893 3688 	ldrb.w	r3, [r3, #1672]	; 0x688
 801035e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        /* represents whether or not the combo's button symbol should be drawn */
        draw_button_symbol = sym != NK_SYMBOL_NONE;
 8010362:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010366:	2b00      	cmp	r3, #0
 8010368:	bf14      	ite	ne
 801036a:	2301      	movne	r3, #1
 801036c:	2300      	moveq	r3, #0
 801036e:	b2db      	uxtb	r3, r3
 8010370:	66bb      	str	r3, [r7, #104]	; 0x68

        /* calculate button */
        button.w = header.h - 2 * style->combo.button_padding.y;
 8010372:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8010376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801037c:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8010380:	edd3 7a00 	vldr	s15, [r3]
 8010384:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010388:	ee77 7a67 	vsub.f32	s15, s14, s15
 801038c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        button.x = (header.x + header.w - header.h) - style->combo.button_padding.x;
 8010390:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010394:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010398:	ee37 7a27 	vadd.f32	s14, s14, s15
 801039c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80103a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103aa:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 80103ae:	edd3 7a00 	vldr	s15, [r3]
 80103b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        button.y = header.y + style->combo.button_padding.y;
 80103ba:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80103be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103c4:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80103c8:	edd3 7a00 	vldr	s15, [r3]
 80103cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        button.h = button.w;
 80103d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d6:	637b      	str	r3, [r7, #52]	; 0x34

        content.x = button.x + style->combo.button.padding.x;
 80103d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80103dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103e2:	f203 6364 	addw	r3, r3, #1636	; 0x664
 80103e6:	edd3 7a00 	vldr	s15, [r3]
 80103ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103ee:	edc7 7a06 	vstr	s15, [r7, #24]
        content.y = button.y + style->combo.button.padding.y;
 80103f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80103f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80103fc:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010400:	edd3 7a00 	vldr	s15, [r3]
 8010404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010408:	edc7 7a07 	vstr	s15, [r7, #28]
        content.w = button.w - 2 * style->combo.button.padding.x;
 801040c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010416:	f203 6364 	addw	r3, r3, #1636	; 0x664
 801041a:	edd3 7a00 	vldr	s15, [r3]
 801041e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010426:	edc7 7a08 	vstr	s15, [r7, #32]
        content.h = button.h - 2 * style->combo.button.padding.y;
 801042a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801042e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010434:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8010438:	edd3 7a00 	vldr	s15, [r3]
 801043c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010444:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        /* draw selected label */
        text.padding = nk_vec2(0,0);
 8010448:	ed5f 0a3f 	vldr	s1, [pc, #-252]	; 8010350 <nk_combo_begin_text+0x354>
 801044c:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 8010350 <nk_combo_begin_text+0x354>
 8010450:	f006 faaa 	bl	80169a8 <nk_vec2>
 8010454:	eeb0 7a40 	vmov.f32	s14, s0
 8010458:	eef0 7a60 	vmov.f32	s15, s1
 801045c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8010460:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        label.x = header.x + style->combo.content_padding.x;
 8010464:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8010468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801046a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801046e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8010472:	edd3 7a00 	vldr	s15, [r3]
 8010476:	ee77 7a27 	vadd.f32	s15, s14, s15
 801047a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.y = header.y + style->combo.content_padding.y;
 801047e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8010482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010488:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 801048c:	edd3 7a00 	vldr	s15, [r3]
 8010490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010494:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.h = header.h - 2 * style->combo.content_padding.y;
 8010498:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801049c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801049e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104a2:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 80104a6:	edd3 7a00 	vldr	s15, [r3]
 80104aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80104ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104b2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        if (draw_button_symbol)
 80104b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d01a      	beq.n	80104f2 <nk_combo_begin_text+0x4f6>
            label.w = button.x - (style->combo.content_padding.x + style->combo.spacing.x) - label.x;
 80104bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80104c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104c6:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80104ca:	edd3 6a00 	vldr	s13, [r3]
 80104ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104d4:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80104d8:	edd3 7a00 	vldr	s15, [r3]
 80104dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80104e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80104f0:	e00e      	b.n	8010510 <nk_combo_begin_text+0x514>
        else
            label.w = header.w - 2 * style->combo.content_padding.x;
 80104f2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80104f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104fc:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8010500:	edd3 7a00 	vldr	s15, [r3]
 8010504:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010508:	ee77 7a67 	vsub.f32	s15, s14, s15
 801050c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        nk_widget_text(&win->buffer, label, selected, len, &text,
 8010510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010512:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 801051c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010520:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8010524:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8010528:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801052c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8010530:	9301      	str	r3, [sp, #4]
 8010532:	2311      	movs	r3, #17
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	4613      	mov	r3, r2
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	6939      	ldr	r1, [r7, #16]
 801053c:	eeb0 0a46 	vmov.f32	s0, s12
 8010540:	eef0 0a66 	vmov.f32	s1, s13
 8010544:	eeb0 1a47 	vmov.f32	s2, s14
 8010548:	eef0 1a67 	vmov.f32	s3, s15
 801054c:	f00f f81a 	bl	801f584 <nk_widget_text>
            NK_TEXT_LEFT, ctx->style.font);

        /* draw open/close button */
        if (draw_button_symbol)
 8010550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010552:	2b00      	cmp	r3, #0
 8010554:	d01a      	beq.n	801058c <nk_combo_begin_text+0x590>
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 8010556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010558:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010562:	f8d3 5ad4 	ldr.w	r5, [r3, #2772]	; 0xad4
                &ctx->style.combo.button, sym, style->font);
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 801056c:	3318      	adds	r3, #24
            nk_draw_button_symbol(&win->buffer, &button, &content, ctx->last_widget_state,
 801056e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010570:	6812      	ldr	r2, [r2, #0]
 8010572:	f107 0418 	add.w	r4, r7, #24
 8010576:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801057a:	9202      	str	r2, [sp, #8]
 801057c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010580:	9201      	str	r2, [sp, #4]
 8010582:	9300      	str	r3, [sp, #0]
 8010584:	462b      	mov	r3, r5
 8010586:	4622      	mov	r2, r4
 8010588:	f7ff f8b4 	bl	800f6f4 <nk_draw_button_symbol>
    }
    return nk_combo_begin(ctx, win, size, is_clicked, header);
 801058c:	ed97 5a16 	vldr	s10, [r7, #88]	; 0x58
 8010590:	edd7 5a17 	vldr	s11, [r7, #92]	; 0x5c
 8010594:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8010598:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801059c:	ed97 7a01 	vldr	s14, [r7, #4]
 80105a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80105a4:	eeb0 1a45 	vmov.f32	s2, s10
 80105a8:	eef0 1a65 	vmov.f32	s3, s11
 80105ac:	eeb0 2a46 	vmov.f32	s4, s12
 80105b0:	eef0 2a66 	vmov.f32	s5, s13
 80105b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80105b8:	eeb0 0a47 	vmov.f32	s0, s14
 80105bc:	eef0 0a67 	vmov.f32	s1, s15
 80105c0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80105c2:	6978      	ldr	r0, [r7, #20]
 80105c4:	f7ff fbfe 	bl	800fdc4 <nk_combo_begin>
 80105c8:	4603      	mov	r3, r0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3788      	adds	r7, #136	; 0x88
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bdb0      	pop	{r4, r5, r7, pc}
 80105d2:	bf00      	nop

080105d4 <nk_combo_begin_label>:
NK_API nk_bool
nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	eeb0 7a40 	vmov.f32	s14, s0
 80105e2:	eef0 7a60 	vmov.f32	s15, s1
 80105e6:	ed87 7a00 	vstr	s14, [r7]
 80105ea:	edc7 7a01 	vstr	s15, [r7, #4]
    return nk_combo_begin_text(ctx, selected, nk_strlen(selected), size);
 80105ee:	68b8      	ldr	r0, [r7, #8]
 80105f0:	f012 f872 	bl	80226d8 <nk_strlen>
 80105f4:	4603      	mov	r3, r0
 80105f6:	ed97 7a00 	vldr	s14, [r7]
 80105fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80105fe:	eeb0 0a47 	vmov.f32	s0, s14
 8010602:	eef0 0a67 	vmov.f32	s1, s15
 8010606:	461a      	mov	r2, r3
 8010608:	68b9      	ldr	r1, [r7, #8]
 801060a:	68f8      	ldr	r0, [r7, #12]
 801060c:	f7ff fcf6 	bl	800fffc <nk_combo_begin_text>
 8010610:	4603      	mov	r3, r0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <nk_combo_item_label>:
{
    return nk_contextual_item_text(ctx, text, len, align);
}
NK_API nk_bool
nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 801061a:	b580      	push	{r7, lr}
 801061c:	b084      	sub	sp, #16
 801061e:	af00      	add	r7, sp, #0
 8010620:	60f8      	str	r0, [r7, #12]
 8010622:	60b9      	str	r1, [r7, #8]
 8010624:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_label(ctx, label, align);
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f000 feaa 	bl	8011384 <nk_contextual_item_label>
 8010630:	4603      	mov	r3, r0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <nk_combo_end>:
    const char *label, nk_flags alignment)
{
    return nk_contextual_item_symbol_label(ctx, sym, label, alignment);
}
NK_API void nk_combo_end(struct nk_context *ctx)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
    nk_contextual_end(ctx);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 ff00 	bl	8011448 <nk_contextual_end>
}
 8010648:	bf00      	nop
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <nk_combo>:
    nk_contextual_close(ctx);
}
NK_API int
nk_combo(struct nk_context *ctx, const char **items, int count,
    int selected, int item_height, struct nk_vec2 size)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b08c      	sub	sp, #48	; 0x30
 8010654:	af00      	add	r7, sp, #0
 8010656:	6178      	str	r0, [r7, #20]
 8010658:	6139      	str	r1, [r7, #16]
 801065a:	60fa      	str	r2, [r7, #12]
 801065c:	60bb      	str	r3, [r7, #8]
 801065e:	eeb0 7a40 	vmov.f32	s14, s0
 8010662:	eef0 7a60 	vmov.f32	s15, s1
 8010666:	ed87 7a00 	vstr	s14, [r7]
 801066a:	edc7 7a01 	vstr	s15, [r7, #4]
    int i = 0;
 801066e:	2300      	movs	r3, #0
 8010670:	62fb      	str	r3, [r7, #44]	; 0x2c
    int max_height;
    struct nk_vec2 item_spacing;
    struct nk_vec2 window_padding;

    NK_ASSERT(ctx);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d106      	bne.n	8010686 <nk_combo+0x36>
 8010678:	4b61      	ldr	r3, [pc, #388]	; (8010800 <nk_combo+0x1b0>)
 801067a:	4a62      	ldr	r2, [pc, #392]	; (8010804 <nk_combo+0x1b4>)
 801067c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8010680:	4861      	ldr	r0, [pc, #388]	; (8010808 <nk_combo+0x1b8>)
 8010682:	f014 fa35 	bl	8024af0 <__assert_func>
    NK_ASSERT(items);
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d106      	bne.n	801069a <nk_combo+0x4a>
 801068c:	4b5f      	ldr	r3, [pc, #380]	; (801080c <nk_combo+0x1bc>)
 801068e:	4a5d      	ldr	r2, [pc, #372]	; (8010804 <nk_combo+0x1b4>)
 8010690:	f240 21c1 	movw	r1, #705	; 0x2c1
 8010694:	485c      	ldr	r0, [pc, #368]	; (8010808 <nk_combo+0x1b8>)
 8010696:	f014 fa2b 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80106a0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d106      	bne.n	80106b6 <nk_combo+0x66>
 80106a8:	4b59      	ldr	r3, [pc, #356]	; (8010810 <nk_combo+0x1c0>)
 80106aa:	4a56      	ldr	r2, [pc, #344]	; (8010804 <nk_combo+0x1b4>)
 80106ac:	f240 21c2 	movw	r1, #706	; 0x2c2
 80106b0:	4855      	ldr	r0, [pc, #340]	; (8010808 <nk_combo+0x1b8>)
 80106b2:	f014 fa1d 	bl	8024af0 <__assert_func>
    if (!ctx || !items ||!count)
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d005      	beq.n	80106c8 <nk_combo+0x78>
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d002      	beq.n	80106c8 <nk_combo+0x78>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d101      	bne.n	80106cc <nk_combo+0x7c>
        return selected;
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	e094      	b.n	80107f6 <nk_combo+0x1a6>

    item_spacing = ctx->style.window.spacing;
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80106d2:	461a      	mov	r2, r3
 80106d4:	f107 0320 	add.w	r3, r7, #32
 80106d8:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 80106dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106e0:	e883 0003 	stmia.w	r3, {r0, r1}
    window_padding = nk_panel_get_padding(&ctx->style, ctx->current->layout->type);
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80106f0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80106f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	4619      	mov	r1, r3
 80106fc:	4610      	mov	r0, r2
 80106fe:	f006 fd0d 	bl	801711c <nk_panel_get_padding>
 8010702:	eeb0 7a40 	vmov.f32	s14, s0
 8010706:	eef0 7a60 	vmov.f32	s15, s1
 801070a:	ed87 7a06 	vstr	s14, [r7, #24]
 801070e:	edc7 7a07 	vstr	s15, [r7, #28]
    max_height = count * item_height + count * (int)item_spacing.y;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010716:	fb03 f202 	mul.w	r2, r3, r2
 801071a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801071e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010722:	ee17 1a90 	vmov	r1, s15
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	fb01 f303 	mul.w	r3, r1, r3
 801072c:	4413      	add	r3, r2
 801072e:	62bb      	str	r3, [r7, #40]	; 0x28
    max_height += (int)item_spacing.y * 2 + (int)window_padding.y * 2;
 8010730:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010738:	ee17 2a90 	vmov	r2, s15
 801073c:	edd7 7a07 	vldr	s15, [r7, #28]
 8010740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010744:	ee17 3a90 	vmov	r3, s15
 8010748:	4413      	add	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801074e:	4413      	add	r3, r2
 8010750:	62bb      	str	r3, [r7, #40]	; 0x28
    size.y = NK_MIN(size.y, (float)max_height);
 8010752:	ed97 7a01 	vldr	s14, [r7, #4]
 8010756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010758:	ee07 3a90 	vmov	s15, r3
 801075c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010768:	d502      	bpl.n	8010770 <nk_combo+0x120>
 801076a:	edd7 7a01 	vldr	s15, [r7, #4]
 801076e:	e004      	b.n	801077a <nk_combo+0x12a>
 8010770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010772:	ee07 3a90 	vmov	s15, r3
 8010776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801077a:	edc7 7a01 	vstr	s15, [r7, #4]
    if (nk_combo_begin_label(ctx, items[selected], size)) {
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	693a      	ldr	r2, [r7, #16]
 8010784:	4413      	add	r3, r2
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	ed97 7a00 	vldr	s14, [r7]
 801078c:	edd7 7a01 	vldr	s15, [r7, #4]
 8010790:	eeb0 0a47 	vmov.f32	s0, s14
 8010794:	eef0 0a67 	vmov.f32	s1, s15
 8010798:	4619      	mov	r1, r3
 801079a:	6978      	ldr	r0, [r7, #20]
 801079c:	f7ff ff1a 	bl	80105d4 <nk_combo_begin_label>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d026      	beq.n	80107f4 <nk_combo+0x1a4>
        nk_layout_row_dynamic(ctx, (float)item_height, 1);
 80107a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a8:	ee07 3a90 	vmov	s15, r3
 80107ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107b0:	2101      	movs	r1, #1
 80107b2:	eeb0 0a67 	vmov.f32	s0, s15
 80107b6:	6978      	ldr	r0, [r7, #20]
 80107b8:	f005 fa14 	bl	8015be4 <nk_layout_row_dynamic>
        for (i = 0; i < count; ++i) {
 80107bc:	2300      	movs	r3, #0
 80107be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107c0:	e011      	b.n	80107e6 <nk_combo+0x196>
            if (nk_combo_item_label(ctx, items[i], NK_TEXT_LEFT))
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	4413      	add	r3, r2
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2211      	movs	r2, #17
 80107ce:	4619      	mov	r1, r3
 80107d0:	6978      	ldr	r0, [r7, #20]
 80107d2:	f7ff ff22 	bl	801061a <nk_combo_item_label>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d001      	beq.n	80107e0 <nk_combo+0x190>
                selected = i;
 80107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107de:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < count; ++i) {
 80107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e2:	3301      	adds	r3, #1
 80107e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	dbe9      	blt.n	80107c2 <nk_combo+0x172>
        }
        nk_combo_end(ctx);
 80107ee:	6978      	ldr	r0, [r7, #20]
 80107f0:	f7ff ff23 	bl	801063a <nk_combo_end>
    }
    return selected;
 80107f4:	68bb      	ldr	r3, [r7, #8]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3730      	adds	r7, #48	; 0x30
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	080286f4 	.word	0x080286f4
 8010804:	0802a5b4 	.word	0x0802a5b4
 8010808:	080286f8 	.word	0x080286f8
 801080c:	08028748 	.word	0x08028748
 8010810:	08028714 	.word	0x08028714

08010814 <nk_setup>:
 *                          CONTEXT
 *
 * ===============================================================*/
NK_INTERN void
nk_setup(struct nk_context *ctx, const struct nk_user_font *font)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d105      	bne.n	8010830 <nk_setup+0x1c>
 8010824:	4b11      	ldr	r3, [pc, #68]	; (801086c <nk_setup+0x58>)
 8010826:	4a12      	ldr	r2, [pc, #72]	; (8010870 <nk_setup+0x5c>)
 8010828:	210c      	movs	r1, #12
 801082a:	4812      	ldr	r0, [pc, #72]	; (8010874 <nk_setup+0x60>)
 801082c:	f014 f960 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d016      	beq.n	8010864 <nk_setup+0x50>
    nk_zero_struct(*ctx);
 8010836:	f243 6168 	movw	r1, #13928	; 0x3668
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f011 ff2e 	bl	802269c <nk_zero>
    nk_style_default(ctx);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f00c fc75 	bl	801d130 <nk_style_default>
    ctx->seq = 1;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801084c:	461a      	mov	r2, r3
 801084e:	2301      	movs	r3, #1
 8010850:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
    if (font) ctx->style.font = font;
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d005      	beq.n	8010866 <nk_setup+0x52>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8010862:	e000      	b.n	8010866 <nk_setup+0x52>
    if (!ctx) return;
 8010864:	bf00      	nop
#ifdef NK_INCLUDE_VERTEX_BUFFER_OUTPUT
    nk_draw_list_init(&ctx->draw_list);
#endif
}
 8010866:	3708      	adds	r7, #8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	0802877c 	.word	0x0802877c
 8010870:	0802a5d4 	.word	0x0802a5d4
 8010874:	08028780 	.word	0x08028780

08010878 <nk_init_custom>:
    return 1;
}
NK_API nk_bool
nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,
    struct nk_buffer *pool, const struct nk_user_font *font)
{
 8010878:	b5b0      	push	{r4, r5, r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	603b      	str	r3, [r7, #0]
    NK_ASSERT(cmds);
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d105      	bne.n	8010898 <nk_init_custom+0x20>
 801088c:	4b2a      	ldr	r3, [pc, #168]	; (8010938 <nk_init_custom+0xc0>)
 801088e:	4a2b      	ldr	r2, [pc, #172]	; (801093c <nk_init_custom+0xc4>)
 8010890:	2130      	movs	r1, #48	; 0x30
 8010892:	482b      	ldr	r0, [pc, #172]	; (8010940 <nk_init_custom+0xc8>)
 8010894:	f014 f92c 	bl	8024af0 <__assert_func>
    NK_ASSERT(pool);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d105      	bne.n	80108aa <nk_init_custom+0x32>
 801089e:	4b29      	ldr	r3, [pc, #164]	; (8010944 <nk_init_custom+0xcc>)
 80108a0:	4a26      	ldr	r2, [pc, #152]	; (801093c <nk_init_custom+0xc4>)
 80108a2:	2131      	movs	r1, #49	; 0x31
 80108a4:	4826      	ldr	r0, [pc, #152]	; (8010940 <nk_init_custom+0xc8>)
 80108a6:	f014 f923 	bl	8024af0 <__assert_func>
    if (!cmds || !pool) return 0;
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <nk_init_custom+0x3e>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d101      	bne.n	80108ba <nk_init_custom+0x42>
 80108b6:	2300      	movs	r3, #0
 80108b8:	e039      	b.n	801092e <nk_init_custom+0xb6>

    nk_setup(ctx, font);
 80108ba:	6839      	ldr	r1, [r7, #0]
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff ffa9 	bl	8010814 <nk_setup>
    ctx->memory = *cmds;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108c8:	461a      	mov	r2, r3
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	f602 248c 	addw	r4, r2, #2700	; 0xa8c
 80108d0:	461d      	mov	r5, r3
 80108d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80108e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (pool->type == NK_BUFFER_FIXED) {
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	7f1b      	ldrb	r3, [r3, #28]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d10b      	bne.n	8010906 <nk_init_custom+0x8e>
        /* take memory from buffer and alloc fixed pool */
        nk_pool_init_fixed(&ctx->pool, pool->memory.ptr, pool->memory.size);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80108f4:	3324      	adds	r3, #36	; 0x24
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	6a11      	ldr	r1, [r2, #32]
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80108fe:	4618      	mov	r0, r3
 8010900:	f008 fd5e 	bl	80193c0 <nk_pool_init_fixed>
 8010904:	e00b      	b.n	801091e <nk_init_custom+0xa6>
    } else {
        /* create dynamic pool from buffer allocator */
        struct nk_allocator *alloc = &pool->pool;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	3310      	adds	r3, #16
 801090a:	617b      	str	r3, [r7, #20]
        nk_pool_init(&ctx->pool, alloc, NK_POOL_DEFAULT_CAPACITY);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8010912:	3324      	adds	r3, #36	; 0x24
 8010914:	2210      	movs	r2, #16
 8010916:	6979      	ldr	r1, [r7, #20]
 8010918:	4618      	mov	r0, r3
 801091a:	f008 fd25 	bl	8019368 <nk_pool_init>
    }
    ctx->use_pool = nk_true;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010924:	461a      	mov	r2, r3
 8010926:	2301      	movs	r3, #1
 8010928:	f8c2 3620 	str.w	r3, [r2, #1568]	; 0x620
    return 1;
 801092c:	2301      	movs	r3, #1
}
 801092e:	4618      	mov	r0, r3
 8010930:	3718      	adds	r7, #24
 8010932:	46bd      	mov	sp, r7
 8010934:	bdb0      	pop	{r4, r5, r7, pc}
 8010936:	bf00      	nop
 8010938:	080287a8 	.word	0x080287a8
 801093c:	0802a5e0 	.word	0x0802a5e0
 8010940:	08028780 	.word	0x08028780
 8010944:	080287b0 	.word	0x080287b0

08010948 <nk_clear>:
    ctx->freelist = 0;
    ctx->count = 0;
}
NK_API void
nk_clear(struct nk_context *ctx)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b086      	sub	sp, #24
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    struct nk_window *next;
    NK_ASSERT(ctx);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d105      	bne.n	8010962 <nk_clear+0x1a>
 8010956:	4b96      	ldr	r3, [pc, #600]	; (8010bb0 <nk_clear+0x268>)
 8010958:	4a96      	ldr	r2, [pc, #600]	; (8010bb4 <nk_clear+0x26c>)
 801095a:	2172      	movs	r1, #114	; 0x72
 801095c:	4896      	ldr	r0, [pc, #600]	; (8010bb8 <nk_clear+0x270>)
 801095e:	f014 f8c7 	bl	8024af0 <__assert_func>

    if (!ctx) return;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	f000 811e 	beq.w	8010ba6 <nk_clear+0x25e>
    if (ctx->use_pool)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010970:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8010974:	2b00      	cmp	r3, #0
 8010976:	d007      	beq.n	8010988 <nk_clear+0x40>
        nk_buffer_clear(&ctx->memory);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801097e:	330c      	adds	r3, #12
 8010980:	4618      	mov	r0, r3
 8010982:	f7fe f9bb 	bl	800ecfc <nk_buffer_clear>
 8010986:	e007      	b.n	8010998 <nk_clear+0x50>
    else nk_buffer_reset(&ctx->memory, NK_BUFFER_FRONT);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 801098e:	330c      	adds	r3, #12
 8010990:	2100      	movs	r1, #0
 8010992:	4618      	mov	r0, r3
 8010994:	f7fe f94a 	bl	800ec2c <nk_buffer_reset>

    ctx->build = 0;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801099e:	461a      	mov	r2, r3
 80109a0:	2300      	movs	r3, #0
 80109a2:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    ctx->memory.calls = 0;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ac:	461a      	mov	r2, r3
 80109ae:	2300      	movs	r3, #0
 80109b0:	f8c2 3ac0 	str.w	r3, [r2, #2752]	; 0xac0
    ctx->last_widget_state = 0;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ba:	461a      	mov	r2, r3
 80109bc:	2300      	movs	r3, #0
 80109be:	f8c2 3ad4 	str.w	r3, [r2, #2772]	; 0xad4
    ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NK_MEMSET(&ctx->overlay, 0, sizeof(ctx->overlay));
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80109d4:	3334      	adds	r3, #52	; 0x34
 80109d6:	2228      	movs	r2, #40	; 0x28
 80109d8:	2100      	movs	r1, #0
 80109da:	4618      	mov	r0, r3
 80109dc:	f011 fded 	bl	80225ba <nk_memset>

    /* garbage collector */
    iter = ctx->begin;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109e6:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 80109ea:	617b      	str	r3, [r7, #20]
    while (iter) {
 80109ec:	e0cb      	b.n	8010b86 <nk_clear+0x23e>
        /* make sure valid minimized windows do not get removed */
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d013      	beq.n	8010a22 <nk_clear+0xda>
            !(iter->flags & NK_WINDOW_CLOSED) &&
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if ((iter->flags & NK_WINDOW_MINIMIZED) &&
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d10d      	bne.n	8010a22 <nk_clear+0xda>
            iter->seq == ctx->seq) {
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a10:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
            !(iter->flags & NK_WINDOW_CLOSED) &&
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d104      	bne.n	8010a22 <nk_clear+0xda>
            iter = iter->next;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010a1e:	617b      	str	r3, [r7, #20]
            continue;
 8010a20:	e0b1      	b.n	8010b86 <nk_clear+0x23e>
        }
        /* remove hotness from hidden or closed windows*/
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d105      	bne.n	8010a3a <nk_clear+0xf2>
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
        if (((iter->flags & NK_WINDOW_HIDDEN) ||
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d03a      	beq.n	8010ab0 <nk_clear+0x168>
            iter == ctx->active) {
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a40:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
            (iter->flags & NK_WINDOW_CLOSED)) &&
 8010a44:	697a      	ldr	r2, [r7, #20]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d132      	bne.n	8010ab0 <nk_clear+0x168>
            ctx->active = iter->prev;
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010a56:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = iter->prev;
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010a66:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (!ctx->end)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a70:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d106      	bne.n	8010a86 <nk_clear+0x13e>
                ctx->begin = 0;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a7e:	461a      	mov	r2, r3
 8010a80:	2300      	movs	r3, #0
 8010a82:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (ctx->active)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a8c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00d      	beq.n	8010ab0 <nk_clear+0x168>
                ctx->active->flags &= ~(unsigned)NK_WINDOW_ROM;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010a9a:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010aa6:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8010aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010aae:	649a      	str	r2, [r3, #72]	; 0x48
        }
        /* free unused popup windows */
        if (iter->popup.win && iter->popup.win->seq != ctx->seq) {
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d015      	beq.n	8010ae6 <nk_clear+0x19e>
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010ac8:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d00a      	beq.n	8010ae6 <nk_clear+0x19e>
            nk_free_window(ctx, iter->popup.win);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f012 ff44 	bl	8023966 <nk_free_window>
            iter->popup.win = 0;
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        }
        /* remove unused window state tables */
        {struct nk_table *n, *it = iter->tables;
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010aec:	613b      	str	r3, [r7, #16]
        while (it) {
 8010aee:	e025      	b.n	8010b3c <nk_clear+0x1f4>
            n = it->next;
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8010af6:	60bb      	str	r3, [r7, #8]
            if (it->seq != ctx->seq) {
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b02:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d016      	beq.n	8010b38 <nk_clear+0x1f0>
                nk_remove_table(iter, it);
 8010b0a:	6939      	ldr	r1, [r7, #16]
 8010b0c:	6978      	ldr	r0, [r7, #20]
 8010b0e:	f00e fc4a 	bl	801f3a6 <nk_remove_table>
                nk_zero(it, sizeof(union nk_page_data));
 8010b12:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8010b16:	6938      	ldr	r0, [r7, #16]
 8010b18:	f011 fdc0 	bl	802269c <nk_zero>
                nk_free_table(ctx, it);
 8010b1c:	6939      	ldr	r1, [r7, #16]
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f00e fbef 	bl	801f302 <nk_free_table>
                if (it == iter->tables)
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8010b2a:	693a      	ldr	r2, [r7, #16]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d103      	bne.n	8010b38 <nk_clear+0x1f0>
                    iter->tables = n;
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	68ba      	ldr	r2, [r7, #8]
 8010b34:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
            } it = n;
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	613b      	str	r3, [r7, #16]
        while (it) {
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1d6      	bne.n	8010af0 <nk_clear+0x1a8>
        }}
        /* window itself is not used anymore so free */
        if (iter->seq != ctx->seq || iter->flags & NK_WINDOW_CLOSED) {
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b4c:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d105      	bne.n	8010b60 <nk_clear+0x218>
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00e      	beq.n	8010b7e <nk_clear+0x236>
            next = iter->next;
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010b66:	60fb      	str	r3, [r7, #12]
            nk_remove_window(ctx, iter);
 8010b68:	6979      	ldr	r1, [r7, #20]
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f013 f87c 	bl	8023c68 <nk_remove_window>
            nk_free_window(ctx, iter);
 8010b70:	6979      	ldr	r1, [r7, #20]
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f012 fef7 	bl	8023966 <nk_free_window>
            iter = next;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	617b      	str	r3, [r7, #20]
 8010b7c:	e003      	b.n	8010b86 <nk_clear+0x23e>
        } else iter = iter->next;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010b84:	617b      	str	r3, [r7, #20]
    while (iter) {
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f47f af30 	bne.w	80109ee <nk_clear+0xa6>
    }
    ctx->seq++;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010b94:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8010b98:	3301      	adds	r3, #1
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8010ba0:	f8c2 3664 	str.w	r3, [r2, #1636]	; 0x664
 8010ba4:	e000      	b.n	8010ba8 <nk_clear+0x260>
    if (!ctx) return;
 8010ba6:	bf00      	nop
}
 8010ba8:	3718      	adds	r7, #24
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	0802877c 	.word	0x0802877c
 8010bb4:	0802a5f0 	.word	0x0802a5f0
 8010bb8:	08028780 	.word	0x08028780

08010bbc <nk_start_buffer>:
NK_LIB void
nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 8010bbc:	b590      	push	{r4, r7, lr}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d105      	bne.n	8010bd8 <nk_start_buffer+0x1c>
 8010bcc:	4b17      	ldr	r3, [pc, #92]	; (8010c2c <nk_start_buffer+0x70>)
 8010bce:	4a18      	ldr	r2, [pc, #96]	; (8010c30 <nk_start_buffer+0x74>)
 8010bd0:	21b2      	movs	r1, #178	; 0xb2
 8010bd2:	4818      	ldr	r0, [pc, #96]	; (8010c34 <nk_start_buffer+0x78>)
 8010bd4:	f013 ff8c 	bl	8024af0 <__assert_func>
    NK_ASSERT(buffer);
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d105      	bne.n	8010bea <nk_start_buffer+0x2e>
 8010bde:	4b16      	ldr	r3, [pc, #88]	; (8010c38 <nk_start_buffer+0x7c>)
 8010be0:	4a13      	ldr	r2, [pc, #76]	; (8010c30 <nk_start_buffer+0x74>)
 8010be2:	21b3      	movs	r1, #179	; 0xb3
 8010be4:	4813      	ldr	r0, [pc, #76]	; (8010c34 <nk_start_buffer+0x78>)
 8010be6:	f013 ff83 	bl	8024af0 <__assert_func>
    if (!ctx || !buffer) return;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d019      	beq.n	8010c24 <nk_start_buffer+0x68>
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d016      	beq.n	8010c24 <nk_start_buffer+0x68>
    buffer->begin = ctx->memory.allocated;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bfc:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	61da      	str	r2, [r3, #28]
    buffer->end = buffer->begin;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	69da      	ldr	r2, [r3, #28]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	621a      	str	r2, [r3, #32]
    buffer->last = buffer->begin;
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	69da      	ldr	r2, [r3, #28]
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->clip = nk_null_rect;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	4a09      	ldr	r2, [pc, #36]	; (8010c3c <nk_start_buffer+0x80>)
 8010c18:	1d1c      	adds	r4, r3, #4
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010c22:	e000      	b.n	8010c26 <nk_start_buffer+0x6a>
    if (!ctx || !buffer) return;
 8010c24:	bf00      	nop
}
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd90      	pop	{r4, r7, pc}
 8010c2c:	0802877c 	.word	0x0802877c
 8010c30:	0802a5fc 	.word	0x0802a5fc
 8010c34:	08028780 	.word	0x08028780
 8010c38:	080287c0 	.word	0x080287c0
 8010c3c:	0802a5c0 	.word	0x0802a5c0

08010c40 <nk_start>:
NK_LIB void
nk_start(struct nk_context *ctx, struct nk_window *win)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d105      	bne.n	8010c5c <nk_start+0x1c>
 8010c50:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <nk_start+0x44>)
 8010c52:	4a0d      	ldr	r2, [pc, #52]	; (8010c88 <nk_start+0x48>)
 8010c54:	21bd      	movs	r1, #189	; 0xbd
 8010c56:	480d      	ldr	r0, [pc, #52]	; (8010c8c <nk_start+0x4c>)
 8010c58:	f013 ff4a 	bl	8024af0 <__assert_func>
    NK_ASSERT(win);
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d105      	bne.n	8010c6e <nk_start+0x2e>
 8010c62:	4b0b      	ldr	r3, [pc, #44]	; (8010c90 <nk_start+0x50>)
 8010c64:	4a08      	ldr	r2, [pc, #32]	; (8010c88 <nk_start+0x48>)
 8010c66:	21be      	movs	r1, #190	; 0xbe
 8010c68:	4808      	ldr	r0, [pc, #32]	; (8010c8c <nk_start+0x4c>)
 8010c6a:	f013 ff41 	bl	8024af0 <__assert_func>
    nk_start_buffer(ctx, &win->buffer);
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	3364      	adds	r3, #100	; 0x64
 8010c72:	4619      	mov	r1, r3
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f7ff ffa1 	bl	8010bbc <nk_start_buffer>
}
 8010c7a:	bf00      	nop
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	bf00      	nop
 8010c84:	0802877c 	.word	0x0802877c
 8010c88:	0802a60c 	.word	0x0802a60c
 8010c8c:	08028780 	.word	0x08028780
 8010c90:	080287c8 	.word	0x080287c8

08010c94 <nk_start_popup>:
NK_LIB void
nk_start_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d105      	bne.n	8010cb0 <nk_start_popup+0x1c>
 8010ca4:	4b19      	ldr	r3, [pc, #100]	; (8010d0c <nk_start_popup+0x78>)
 8010ca6:	4a1a      	ldr	r2, [pc, #104]	; (8010d10 <nk_start_popup+0x7c>)
 8010ca8:	21c5      	movs	r1, #197	; 0xc5
 8010caa:	481a      	ldr	r0, [pc, #104]	; (8010d14 <nk_start_popup+0x80>)
 8010cac:	f013 ff20 	bl	8024af0 <__assert_func>
    NK_ASSERT(win);
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d105      	bne.n	8010cc2 <nk_start_popup+0x2e>
 8010cb6:	4b18      	ldr	r3, [pc, #96]	; (8010d18 <nk_start_popup+0x84>)
 8010cb8:	4a15      	ldr	r2, [pc, #84]	; (8010d10 <nk_start_popup+0x7c>)
 8010cba:	21c6      	movs	r1, #198	; 0xc6
 8010cbc:	4815      	ldr	r0, [pc, #84]	; (8010d14 <nk_start_popup+0x80>)
 8010cbe:	f013 ff17 	bl	8024af0 <__assert_func>
    if (!ctx || !win) return;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d01d      	beq.n	8010d04 <nk_start_popup+0x70>
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d01a      	beq.n	8010d04 <nk_start_popup+0x70>

    /* save buffer fill state for popup */
    buf = &win->popup.buf;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010cd4:	60fb      	str	r3, [r7, #12]
    buf->begin = win->buffer.end;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	601a      	str	r2, [r3, #0]
    buf->end = win->buffer.end;
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	60da      	str	r2, [r3, #12]
    buf->parent = win->buffer.last;
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	605a      	str	r2, [r3, #4]
    buf->last = buf->begin;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	609a      	str	r2, [r3, #8]
    buf->active = nk_true;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	611a      	str	r2, [r3, #16]
 8010d02:	e000      	b.n	8010d06 <nk_start_popup+0x72>
    if (!ctx || !win) return;
 8010d04:	bf00      	nop
}
 8010d06:	3710      	adds	r7, #16
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	0802877c 	.word	0x0802877c
 8010d10:	0802a618 	.word	0x0802a618
 8010d14:	08028780 	.word	0x08028780
 8010d18:	080287c8 	.word	0x080287c8

08010d1c <nk_finish_popup>:
NK_LIB void
nk_finish_popup(struct nk_context *ctx, struct nk_window *win)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    NK_ASSERT(ctx);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d105      	bne.n	8010d38 <nk_finish_popup+0x1c>
 8010d2c:	4b13      	ldr	r3, [pc, #76]	; (8010d7c <nk_finish_popup+0x60>)
 8010d2e:	4a14      	ldr	r2, [pc, #80]	; (8010d80 <nk_finish_popup+0x64>)
 8010d30:	21d5      	movs	r1, #213	; 0xd5
 8010d32:	4814      	ldr	r0, [pc, #80]	; (8010d84 <nk_finish_popup+0x68>)
 8010d34:	f013 fedc 	bl	8024af0 <__assert_func>
    NK_ASSERT(win);
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d105      	bne.n	8010d4a <nk_finish_popup+0x2e>
 8010d3e:	4b12      	ldr	r3, [pc, #72]	; (8010d88 <nk_finish_popup+0x6c>)
 8010d40:	4a0f      	ldr	r2, [pc, #60]	; (8010d80 <nk_finish_popup+0x64>)
 8010d42:	21d6      	movs	r1, #214	; 0xd6
 8010d44:	480f      	ldr	r0, [pc, #60]	; (8010d84 <nk_finish_popup+0x68>)
 8010d46:	f013 fed3 	bl	8024af0 <__assert_func>
    if (!ctx || !win) return;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d011      	beq.n	8010d74 <nk_finish_popup+0x58>
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00e      	beq.n	8010d74 <nk_finish_popup+0x58>

    buf = &win->popup.buf;
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010d5c:	60fb      	str	r3, [r7, #12]
    buf->last = win->buffer.last;
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	609a      	str	r2, [r3, #8]
    buf->end = win->buffer.end;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	60da      	str	r2, [r3, #12]
 8010d72:	e000      	b.n	8010d76 <nk_finish_popup+0x5a>
    if (!ctx || !win) return;
 8010d74:	bf00      	nop
}
 8010d76:	3710      	adds	r7, #16
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	0802877c 	.word	0x0802877c
 8010d80:	0802a628 	.word	0x0802a628
 8010d84:	08028780 	.word	0x08028780
 8010d88:	080287c8 	.word	0x080287c8

08010d8c <nk_finish_buffer>:
NK_LIB void
nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ctx);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d105      	bne.n	8010da8 <nk_finish_buffer+0x1c>
 8010d9c:	4b10      	ldr	r3, [pc, #64]	; (8010de0 <nk_finish_buffer+0x54>)
 8010d9e:	4a11      	ldr	r2, [pc, #68]	; (8010de4 <nk_finish_buffer+0x58>)
 8010da0:	21e0      	movs	r1, #224	; 0xe0
 8010da2:	4811      	ldr	r0, [pc, #68]	; (8010de8 <nk_finish_buffer+0x5c>)
 8010da4:	f013 fea4 	bl	8024af0 <__assert_func>
    NK_ASSERT(buffer);
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d105      	bne.n	8010dba <nk_finish_buffer+0x2e>
 8010dae:	4b0f      	ldr	r3, [pc, #60]	; (8010dec <nk_finish_buffer+0x60>)
 8010db0:	4a0c      	ldr	r2, [pc, #48]	; (8010de4 <nk_finish_buffer+0x58>)
 8010db2:	21e1      	movs	r1, #225	; 0xe1
 8010db4:	480c      	ldr	r0, [pc, #48]	; (8010de8 <nk_finish_buffer+0x5c>)
 8010db6:	f013 fe9b 	bl	8024af0 <__assert_func>
    if (!ctx || !buffer) return;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00a      	beq.n	8010dd6 <nk_finish_buffer+0x4a>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d007      	beq.n	8010dd6 <nk_finish_buffer+0x4a>
    buffer->end = ctx->memory.allocated;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dcc:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	621a      	str	r2, [r3, #32]
 8010dd4:	e000      	b.n	8010dd8 <nk_finish_buffer+0x4c>
    if (!ctx || !buffer) return;
 8010dd6:	bf00      	nop
}
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	0802877c 	.word	0x0802877c
 8010de4:	0802a638 	.word	0x0802a638
 8010de8:	08028780 	.word	0x08028780
 8010dec:	080287c0 	.word	0x080287c0

08010df0 <nk_finish>:
NK_LIB void
nk_finish(struct nk_context *ctx, struct nk_window *win)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b086      	sub	sp, #24
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]
    struct nk_popup_buffer *buf;
    struct nk_command *parent_last;
    void *memory;

    NK_ASSERT(ctx);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d105      	bne.n	8010e0c <nk_finish+0x1c>
 8010e00:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <nk_finish+0x84>)
 8010e02:	4a1d      	ldr	r2, [pc, #116]	; (8010e78 <nk_finish+0x88>)
 8010e04:	21ec      	movs	r1, #236	; 0xec
 8010e06:	481d      	ldr	r0, [pc, #116]	; (8010e7c <nk_finish+0x8c>)
 8010e08:	f013 fe72 	bl	8024af0 <__assert_func>
    NK_ASSERT(win);
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d105      	bne.n	8010e1e <nk_finish+0x2e>
 8010e12:	4b1b      	ldr	r3, [pc, #108]	; (8010e80 <nk_finish+0x90>)
 8010e14:	4a18      	ldr	r2, [pc, #96]	; (8010e78 <nk_finish+0x88>)
 8010e16:	21ed      	movs	r1, #237	; 0xed
 8010e18:	4818      	ldr	r0, [pc, #96]	; (8010e7c <nk_finish+0x8c>)
 8010e1a:	f013 fe69 	bl	8024af0 <__assert_func>
    if (!ctx || !win) return;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d021      	beq.n	8010e68 <nk_finish+0x78>
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d01e      	beq.n	8010e68 <nk_finish+0x78>
    nk_finish_buffer(ctx, &win->buffer);
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	3364      	adds	r3, #100	; 0x64
 8010e2e:	4619      	mov	r1, r3
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7ff ffab 	bl	8010d8c <nk_finish_buffer>
    if (!win->popup.buf.active) return;
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d015      	beq.n	8010e6c <nk_finish+0x7c>

    buf = &win->popup.buf;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010e46:	617b      	str	r3, [r7, #20]
    memory = ctx->memory.memory.ptr;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e4e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010e52:	613b      	str	r3, [r7, #16]
    parent_last = nk_ptr_add(struct nk_command, memory, buf->parent);
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	693a      	ldr	r2, [r7, #16]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	60fb      	str	r3, [r7, #12]
    parent_last->next = buf->end;
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	68da      	ldr	r2, [r3, #12]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	605a      	str	r2, [r3, #4]
 8010e66:	e002      	b.n	8010e6e <nk_finish+0x7e>
    if (!ctx || !win) return;
 8010e68:	bf00      	nop
 8010e6a:	e000      	b.n	8010e6e <nk_finish+0x7e>
    if (!win->popup.buf.active) return;
 8010e6c:	bf00      	nop
}
 8010e6e:	3718      	adds	r7, #24
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	0802877c 	.word	0x0802877c
 8010e78:	0802a64c 	.word	0x0802a64c
 8010e7c:	08028780 	.word	0x08028780
 8010e80:	080287c8 	.word	0x080287c8

08010e84 <nk_build>:
NK_LIB void
nk_build(struct nk_context *ctx)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b08e      	sub	sp, #56	; 0x38
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
    struct nk_window *it = 0;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command *cmd = 0;
 8010e90:	2300      	movs	r3, #0
 8010e92:	633b      	str	r3, [r7, #48]	; 0x30
    nk_byte *buffer = 0;
 8010e94:	2300      	movs	r3, #0
 8010e96:	62bb      	str	r3, [r7, #40]	; 0x28

    /* draw cursor overlay */
    if (!ctx->style.cursor_active)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d105      	bne.n	8010eae <nk_build+0x2a>
        ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_ARROW];
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    if (ctx->style.cursor_active && !ctx->input.mouse.grabbed && ctx->style.cursor_visible) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d05d      	beq.n	8010f74 <nk_build+0xf0>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d158      	bne.n	8010f74 <nk_build+0xf0>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d053      	beq.n	8010f74 <nk_build+0xf0>
        struct nk_rect mouse_bounds;
        const struct nk_cursor *cursor = ctx->style.cursor_active;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010ed2:	627b      	str	r3, [r7, #36]	; 0x24
        nk_command_buffer_init(&ctx->overlay, &ctx->memory, NK_CLIPPING_OFF);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010eda:	3334      	adds	r3, #52	; 0x34
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	f502 51d4 	add.w	r1, r2, #6784	; 0x1a80
 8010ee2:	310c      	adds	r1, #12
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 fb94 	bl	8011614 <nk_command_buffer_init>
        nk_start_buffer(ctx, &ctx->overlay);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010ef2:	3334      	adds	r3, #52	; 0x34
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7ff fe60 	bl	8010bbc <nk_start_buffer>

        mouse_bounds.x = ctx->input.mouse.pos.x - cursor->offset.x;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	edd3 7a06 	vldr	s15, [r3, #24]
 8010f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f0c:	edc7 7a03 	vstr	s15, [r7, #12]
        mouse_bounds.y = ctx->input.mouse.pos.y - cursor->offset.y;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f20:	edc7 7a04 	vstr	s15, [r7, #16]
        mouse_bounds.w = cursor->size.x;
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	617b      	str	r3, [r7, #20]
        mouse_bounds.h = cursor->size.y;
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	695b      	ldr	r3, [r3, #20]
 8010f2e:	61bb      	str	r3, [r7, #24]

        nk_draw_image(&ctx->overlay, mouse_bounds, &cursor->img, nk_white);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f36:	3334      	adds	r3, #52	; 0x34
 8010f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f3a:	4a62      	ldr	r2, [pc, #392]	; (80110c4 <nk_build+0x240>)
 8010f3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f40:	edd7 6a04 	vldr	s13, [r7, #16]
 8010f44:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f4c:	6812      	ldr	r2, [r2, #0]
 8010f4e:	eeb0 0a46 	vmov.f32	s0, s12
 8010f52:	eef0 0a66 	vmov.f32	s1, s13
 8010f56:	eeb0 1a47 	vmov.f32	s2, s14
 8010f5a:	eef0 1a67 	vmov.f32	s3, s15
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f001 f904 	bl	801216c <nk_draw_image>
        nk_finish_buffer(ctx, &ctx->overlay);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8010f6a:	3334      	adds	r3, #52	; 0x34
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f7ff ff0c 	bl	8010d8c <nk_finish_buffer>
    }
    /* build one big draw command list out of all window buffers */
    it = ctx->begin;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010f7a:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8010f7e:	637b      	str	r3, [r7, #52]	; 0x34
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f86:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8010f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (it != 0) {
 8010f8c:	e04d      	b.n	801102a <nk_build+0x1a6>
        struct nk_window *next = it->next;
 8010f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f90:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 8010f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d03c      	beq.n	8011020 <nk_build+0x19c>
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d136      	bne.n	8011020 <nk_build+0x19c>
            it->seq != ctx->seq)
 8010fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010fbc:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
        if (it->buffer.last == it->buffer.begin || (it->flags & NK_WINDOW_HIDDEN)||
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d12d      	bne.n	8011020 <nk_build+0x19c>
            goto cont;

        cmd = nk_ptr_add(struct nk_command, buffer, it->buffer.last);
 8010fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fcc:	4413      	add	r3, r2
 8010fce:	633b      	str	r3, [r7, #48]	; 0x30
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010fd0:	e003      	b.n	8010fda <nk_build+0x156>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
            next = next->next; /* skip empty command buffers */
 8010fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d016      	beq.n	801100e <nk_build+0x18a>
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d0f0      	beq.n	8010fd2 <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8010ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        while (next && ((next->buffer.last == next->buffer.begin) ||
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d1ea      	bne.n	8010fd2 <nk_build+0x14e>
            (next->flags & NK_WINDOW_HIDDEN) || next->seq != ctx->seq))
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011006:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 801100a:	429a      	cmp	r2, r3
 801100c:	d1e1      	bne.n	8010fd2 <nk_build+0x14e>

        if (next) cmd->next = next->buffer.begin;
 801100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d007      	beq.n	8011024 <nk_build+0x1a0>
 8011014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011016:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101c:	605a      	str	r2, [r3, #4]
 801101e:	e002      	b.n	8011026 <nk_build+0x1a2>
            goto cont;
 8011020:	bf00      	nop
 8011022:	e000      	b.n	8011026 <nk_build+0x1a2>
        cont: it = next;
 8011024:	bf00      	nop
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 801102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1ae      	bne.n	8010f8e <nk_build+0x10a>
    }
    /* append all popup draw commands into lists */
    it = ctx->begin;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011036:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 801103a:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 801103c:	e01c      	b.n	8011078 <nk_build+0x1f4>
        struct nk_window *next = it->next;
 801103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011040:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8011044:	623b      	str	r3, [r7, #32]
        struct nk_popup_buffer *buf;
        if (!it->popup.buf.active)
 8011046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011048:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801104c:	2b00      	cmp	r3, #0
 801104e:	d010      	beq.n	8011072 <nk_build+0x1ee>
            goto skip;

        buf = &it->popup.buf;
 8011050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011052:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8011056:	61fb      	str	r3, [r7, #28]
        cmd->next = buf->begin;
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105e:	605a      	str	r2, [r3, #4]
        cmd = nk_ptr_add(struct nk_command, buffer, buf->last);
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	689b      	ldr	r3, [r3, #8]
 8011064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011066:	4413      	add	r3, r2
 8011068:	633b      	str	r3, [r7, #48]	; 0x30
        buf->active = nk_false;
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	2200      	movs	r2, #0
 801106e:	611a      	str	r2, [r3, #16]
 8011070:	e000      	b.n	8011074 <nk_build+0x1f0>
            goto skip;
 8011072:	bf00      	nop
        skip: it = next;
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	637b      	str	r3, [r7, #52]	; 0x34
    while (it != 0) {
 8011078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1df      	bne.n	801103e <nk_build+0x1ba>
    }
    if (cmd) {
 801107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011080:	2b00      	cmp	r3, #0
 8011082:	d01a      	beq.n	80110ba <nk_build+0x236>
        /* append overlay commands */
        if (ctx->overlay.end != ctx->overlay.begin)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801108a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011094:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8011098:	429a      	cmp	r2, r3
 801109a:	d007      	beq.n	80110ac <nk_build+0x228>
            cmd->next = ctx->overlay.begin;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110a2:	f8d3 2610 	ldr.w	r2, [r3, #1552]	; 0x610
 80110a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a8:	605a      	str	r2, [r3, #4]
        else cmd->next = ctx->memory.allocated;
    }
}
 80110aa:	e006      	b.n	80110ba <nk_build+0x236>
        else cmd->next = ctx->memory.allocated;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110b2:	f8d3 2ab8 	ldr.w	r2, [r3, #2744]	; 0xab8
 80110b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b8:	605a      	str	r2, [r3, #4]
}
 80110ba:	bf00      	nop
 80110bc:	3738      	adds	r7, #56	; 0x38
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	0802a5d0 	.word	0x0802a5d0

080110c8 <nk__begin>:
NK_API const struct nk_command*
nk__begin(struct nk_context *ctx)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
    struct nk_window *iter;
    nk_byte *buffer;
    NK_ASSERT(ctx);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d106      	bne.n	80110e4 <nk__begin+0x1c>
 80110d6:	4b2f      	ldr	r3, [pc, #188]	; (8011194 <nk__begin+0xcc>)
 80110d8:	4a2f      	ldr	r2, [pc, #188]	; (8011198 <nk__begin+0xd0>)
 80110da:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80110de:	482f      	ldr	r0, [pc, #188]	; (801119c <nk__begin+0xd4>)
 80110e0:	f013 fd06 	bl	8024af0 <__assert_func>
    if (!ctx) return 0;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d101      	bne.n	80110ee <nk__begin+0x26>
 80110ea:	2300      	movs	r3, #0
 80110ec:	e04e      	b.n	801118c <nk__begin+0xc4>
    if (!ctx->count) return 0;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80110f4:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d101      	bne.n	8011100 <nk__begin+0x38>
 80110fc:	2300      	movs	r3, #0
 80110fe:	e045      	b.n	801118c <nk__begin+0xc4>

    buffer = (nk_byte*)ctx->memory.memory.ptr;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011106:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 801110a:	60bb      	str	r3, [r7, #8]
    if (!ctx->build) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011112:	f8d3 361c 	ldr.w	r3, [r3, #1564]	; 0x61c
 8011116:	2b00      	cmp	r3, #0
 8011118:	d109      	bne.n	801112e <nk__begin+0x66>
        nk_build(ctx);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f7ff feb2 	bl	8010e84 <nk_build>
        ctx->build = nk_true;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011126:	461a      	mov	r2, r3
 8011128:	2301      	movs	r3, #1
 801112a:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    }
    iter = ctx->begin;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011134:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8011138:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 801113a:	e003      	b.n	8011144 <nk__begin+0x7c>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
        iter = iter->next;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8011142:	60fb      	str	r3, [r7, #12]
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d016      	beq.n	8011178 <nk__begin+0xb0>
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011156:	429a      	cmp	r2, r3
 8011158:	d0f0      	beq.n	801113c <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801115e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    while (iter && ((iter->buffer.begin == iter->buffer.end) ||
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1ea      	bne.n	801113c <nk__begin+0x74>
        (iter->flags & NK_WINDOW_HIDDEN) || iter->seq != ctx->seq))
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011170:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8011174:	429a      	cmp	r2, r3
 8011176:	d1e1      	bne.n	801113c <nk__begin+0x74>
    if (!iter) return 0;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d101      	bne.n	8011182 <nk__begin+0xba>
 801117e:	2300      	movs	r3, #0
 8011180:	e004      	b.n	801118c <nk__begin+0xc4>
    return nk_ptr_add_const(struct nk_command, buffer, iter->buffer.begin);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	4413      	add	r3, r2
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	0802877c 	.word	0x0802877c
 8011198:	0802a658 	.word	0x0802a658
 801119c:	08028780 	.word	0x08028780

080111a0 <nk__next>:

NK_API const struct nk_command*
nk__next(struct nk_context *ctx, const struct nk_command *cmd)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
    nk_byte *buffer;
    const struct nk_command *next;
    NK_ASSERT(ctx);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d106      	bne.n	80111be <nk__next+0x1e>
 80111b0:	4b18      	ldr	r3, [pc, #96]	; (8011214 <nk__next+0x74>)
 80111b2:	4a19      	ldr	r2, [pc, #100]	; (8011218 <nk__next+0x78>)
 80111b4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80111b8:	4818      	ldr	r0, [pc, #96]	; (801121c <nk__next+0x7c>)
 80111ba:	f013 fc99 	bl	8024af0 <__assert_func>
    if (!ctx || !cmd || !ctx->count) return 0;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d009      	beq.n	80111d8 <nk__next+0x38>
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d006      	beq.n	80111d8 <nk__next+0x38>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80111d0:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d101      	bne.n	80111dc <nk__next+0x3c>
 80111d8:	2300      	movs	r3, #0
 80111da:	e016      	b.n	801120a <nk__next+0x6a>
    if (cmd->next >= ctx->memory.allocated) return 0;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	685a      	ldr	r2, [r3, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111e6:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d301      	bcc.n	80111f2 <nk__next+0x52>
 80111ee:	2300      	movs	r3, #0
 80111f0:	e00b      	b.n	801120a <nk__next+0x6a>
    buffer = (nk_byte*)ctx->memory.memory.ptr;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111f8:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80111fc:	60fb      	str	r3, [r7, #12]
    next = nk_ptr_add_const(struct nk_command, buffer, cmd->next);
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	4413      	add	r3, r2
 8011206:	60bb      	str	r3, [r7, #8]
    return next;
 8011208:	68bb      	ldr	r3, [r7, #8]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	0802877c 	.word	0x0802877c
 8011218:	0802a664 	.word	0x0802a664
 801121c:	08028780 	.word	0x08028780

08011220 <nk_contextual_item_text>:
    return ret;
}
NK_API nk_bool
nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,
    nk_flags alignment)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b092      	sub	sp, #72	; 0x48
 8011224:	af06      	add	r7, sp, #24
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	603b      	str	r3, [r7, #0]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states state;

    NK_ASSERT(ctx);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d105      	bne.n	8011240 <nk_contextual_item_text+0x20>
 8011234:	4b4e      	ldr	r3, [pc, #312]	; (8011370 <nk_contextual_item_text+0x150>)
 8011236:	4a4f      	ldr	r2, [pc, #316]	; (8011374 <nk_contextual_item_text+0x154>)
 8011238:	214f      	movs	r1, #79	; 0x4f
 801123a:	484f      	ldr	r0, [pc, #316]	; (8011378 <nk_contextual_item_text+0x158>)
 801123c:	f013 fc58 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011246:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801124a:	2b00      	cmp	r3, #0
 801124c:	d105      	bne.n	801125a <nk_contextual_item_text+0x3a>
 801124e:	4b4b      	ldr	r3, [pc, #300]	; (801137c <nk_contextual_item_text+0x15c>)
 8011250:	4a48      	ldr	r2, [pc, #288]	; (8011374 <nk_contextual_item_text+0x154>)
 8011252:	2150      	movs	r1, #80	; 0x50
 8011254:	4848      	ldr	r0, [pc, #288]	; (8011378 <nk_contextual_item_text+0x158>)
 8011256:	f013 fc4b 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011260:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011268:	2b00      	cmp	r3, #0
 801126a:	d105      	bne.n	8011278 <nk_contextual_item_text+0x58>
 801126c:	4b44      	ldr	r3, [pc, #272]	; (8011380 <nk_contextual_item_text+0x160>)
 801126e:	4a41      	ldr	r2, [pc, #260]	; (8011374 <nk_contextual_item_text+0x154>)
 8011270:	2151      	movs	r1, #81	; 0x51
 8011272:	4841      	ldr	r0, [pc, #260]	; (8011378 <nk_contextual_item_text+0x158>)
 8011274:	f013 fc3c 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00f      	beq.n	801129e <nk_contextual_item_text+0x7e>
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011284:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011288:	2b00      	cmp	r3, #0
 801128a:	d008      	beq.n	801129e <nk_contextual_item_text+0x7e>
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011292:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8011296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801129a:	2b00      	cmp	r3, #0
 801129c:	d101      	bne.n	80112a2 <nk_contextual_item_text+0x82>
        return 0;
 801129e:	2300      	movs	r3, #0
 80112a0:	e061      	b.n	8011366 <nk_contextual_item_text+0x146>

    win = ctx->current;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80112a8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80112ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    style = &ctx->style;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80112b4:	62bb      	str	r3, [r7, #40]	; 0x28
    state = nk_widget_fitting(&bounds, ctx, style->contextual_button.padding);
 80112b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b8:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80112bc:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80112c0:	f107 0310 	add.w	r3, r7, #16
 80112c4:	eeb0 0a47 	vmov.f32	s0, s14
 80112c8:	eef0 0a67 	vmov.f32	s1, s15
 80112cc:	68f9      	ldr	r1, [r7, #12]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f012 fad4 	bl	802387c <nk_widget_fitting>
 80112d4:	4603      	mov	r3, r0
 80112d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (!state) return nk_false;
 80112da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d101      	bne.n	80112e6 <nk_contextual_item_text+0xc6>
 80112e2:	2300      	movs	r3, #0
 80112e4:	e03f      	b.n	8011366 <nk_contextual_item_text+0x146>

    in = (state == NK_WIDGET_ROM || win->layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 80112e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d009      	beq.n	8011302 <nk_contextual_item_text+0xe2>
 80112ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <nk_contextual_item_text+0xe2>
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	e000      	b.n	8011304 <nk_contextual_item_text+0xe4>
 8011302:	2300      	movs	r3, #0
 8011304:	623b      	str	r3, [r7, #32]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 801130c:	3014      	adds	r0, #20
 801130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011310:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8011314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011316:	33d0      	adds	r3, #208	; 0xd0
        text, len, alignment, NK_BUTTON_DEFAULT, &style->contextual_button, in, style->font)) {
 8011318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801131a:	6812      	ldr	r2, [r2, #0]
    if (nk_do_button_text(&ctx->last_widget_state, &win->buffer, bounds,
 801131c:	ed97 6a04 	vldr	s12, [r7, #16]
 8011320:	edd7 6a05 	vldr	s13, [r7, #20]
 8011324:	ed97 7a06 	vldr	s14, [r7, #24]
 8011328:	edd7 7a07 	vldr	s15, [r7, #28]
 801132c:	9204      	str	r2, [sp, #16]
 801132e:	6a3a      	ldr	r2, [r7, #32]
 8011330:	9203      	str	r2, [sp, #12]
 8011332:	9302      	str	r3, [sp, #8]
 8011334:	2300      	movs	r3, #0
 8011336:	9301      	str	r3, [sp, #4]
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	68ba      	ldr	r2, [r7, #8]
 8011340:	eeb0 0a46 	vmov.f32	s0, s12
 8011344:	eef0 0a66 	vmov.f32	s1, s13
 8011348:	eeb0 1a47 	vmov.f32	s2, s14
 801134c:	eef0 1a67 	vmov.f32	s3, s15
 8011350:	f7fe f91e 	bl	800f590 <nk_do_button_text>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d004      	beq.n	8011364 <nk_contextual_item_text+0x144>
        nk_contextual_close(ctx);
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f000 f826 	bl	80113ac <nk_contextual_close>
        return nk_true;
 8011360:	2301      	movs	r3, #1
 8011362:	e000      	b.n	8011366 <nk_contextual_item_text+0x146>
    }
    return nk_false;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	3730      	adds	r7, #48	; 0x30
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	080287cc 	.word	0x080287cc
 8011374:	0802a670 	.word	0x0802a670
 8011378:	080287d0 	.word	0x080287d0
 801137c:	080287f0 	.word	0x080287f0
 8011380:	08028800 	.word	0x08028800

08011384 <nk_contextual_item_label>:
NK_API nk_bool
nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]
    return nk_contextual_item_text(ctx, label, nk_strlen(label), align);
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	f011 f9a1 	bl	80226d8 <nk_strlen>
 8011396:	4602      	mov	r2, r0
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	68b9      	ldr	r1, [r7, #8]
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	f7ff ff3f 	bl	8011220 <nk_contextual_item_text>
 80113a2:	4603      	mov	r3, r0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3710      	adds	r7, #16
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <nk_contextual_close>:
{
    return nk_contextual_item_symbol_text(ctx, symbol, text, nk_strlen(text), align);
}
NK_API void
nk_contextual_close(struct nk_context *ctx)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d105      	bne.n	80113c6 <nk_contextual_close+0x1a>
 80113ba:	4b1e      	ldr	r3, [pc, #120]	; (8011434 <nk_contextual_close+0x88>)
 80113bc:	4a1e      	ldr	r2, [pc, #120]	; (8011438 <nk_contextual_close+0x8c>)
 80113be:	21b2      	movs	r1, #178	; 0xb2
 80113c0:	481e      	ldr	r0, [pc, #120]	; (801143c <nk_contextual_close+0x90>)
 80113c2:	f013 fb95 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80113cc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d105      	bne.n	80113e0 <nk_contextual_close+0x34>
 80113d4:	4b1a      	ldr	r3, [pc, #104]	; (8011440 <nk_contextual_close+0x94>)
 80113d6:	4a18      	ldr	r2, [pc, #96]	; (8011438 <nk_contextual_close+0x8c>)
 80113d8:	21b3      	movs	r1, #179	; 0xb3
 80113da:	4818      	ldr	r0, [pc, #96]	; (801143c <nk_contextual_close+0x90>)
 80113dc:	f013 fb88 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80113e6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80113ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d105      	bne.n	80113fe <nk_contextual_close+0x52>
 80113f2:	4b14      	ldr	r3, [pc, #80]	; (8011444 <nk_contextual_close+0x98>)
 80113f4:	4a10      	ldr	r2, [pc, #64]	; (8011438 <nk_contextual_close+0x8c>)
 80113f6:	21b4      	movs	r1, #180	; 0xb4
 80113f8:	4810      	ldr	r0, [pc, #64]	; (801143c <nk_contextual_close+0x90>)
 80113fa:	f013 fb79 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d013      	beq.n	801142c <nk_contextual_close+0x80>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801140a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00c      	beq.n	801142c <nk_contextual_close+0x80>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011418:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801141c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d003      	beq.n	801142c <nk_contextual_close+0x80>
    nk_popup_close(ctx);
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f008 fbcd 	bl	8019bc4 <nk_popup_close>
 801142a:	e000      	b.n	801142e <nk_contextual_close+0x82>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801142c:	bf00      	nop
}
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	080287cc 	.word	0x080287cc
 8011438:	0802a688 	.word	0x0802a688
 801143c:	080287d0 	.word	0x080287d0
 8011440:	080287f0 	.word	0x080287f0
 8011444:	08028800 	.word	0x08028800

08011448 <nk_contextual_end>:
NK_API void
nk_contextual_end(struct nk_context *ctx)
{
 8011448:	b590      	push	{r4, r7, lr}
 801144a:	b08d      	sub	sp, #52	; 0x34
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    struct nk_panel *panel;
    NK_ASSERT(ctx);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d105      	bne.n	8011462 <nk_contextual_end+0x1a>
 8011456:	4b69      	ldr	r3, [pc, #420]	; (80115fc <nk_contextual_end+0x1b4>)
 8011458:	4a69      	ldr	r2, [pc, #420]	; (8011600 <nk_contextual_end+0x1b8>)
 801145a:	21bd      	movs	r1, #189	; 0xbd
 801145c:	4869      	ldr	r0, [pc, #420]	; (8011604 <nk_contextual_end+0x1bc>)
 801145e:	f013 fb47 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8011468:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801146c:	2b00      	cmp	r3, #0
 801146e:	d105      	bne.n	801147c <nk_contextual_end+0x34>
 8011470:	4b65      	ldr	r3, [pc, #404]	; (8011608 <nk_contextual_end+0x1c0>)
 8011472:	4a63      	ldr	r2, [pc, #396]	; (8011600 <nk_contextual_end+0x1b8>)
 8011474:	21be      	movs	r1, #190	; 0xbe
 8011476:	4863      	ldr	r0, [pc, #396]	; (8011604 <nk_contextual_end+0x1bc>)
 8011478:	f013 fb3a 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current) return;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 80b8 	beq.w	80115f4 <nk_contextual_end+0x1ac>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801148a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801148e:	2b00      	cmp	r3, #0
 8011490:	f000 80b0 	beq.w	80115f4 <nk_contextual_end+0x1ac>

    popup = ctx->current;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801149a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    panel = popup->layout;
 80114a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114a6:	62bb      	str	r3, [r7, #40]	; 0x28
    NK_ASSERT(popup->parent);
 80114a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114aa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d105      	bne.n	80114be <nk_contextual_end+0x76>
 80114b2:	4b56      	ldr	r3, [pc, #344]	; (801160c <nk_contextual_end+0x1c4>)
 80114b4:	4a52      	ldr	r2, [pc, #328]	; (8011600 <nk_contextual_end+0x1b8>)
 80114b6:	21c3      	movs	r1, #195	; 0xc3
 80114b8:	4852      	ldr	r0, [pc, #328]	; (8011604 <nk_contextual_end+0x1bc>)
 80114ba:	f013 fb19 	bl	8024af0 <__assert_func>
    NK_ASSERT(panel->type & NK_PANEL_SET_POPUP);
 80114be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d105      	bne.n	80114d6 <nk_contextual_end+0x8e>
 80114ca:	4b51      	ldr	r3, [pc, #324]	; (8011610 <nk_contextual_end+0x1c8>)
 80114cc:	4a4c      	ldr	r2, [pc, #304]	; (8011600 <nk_contextual_end+0x1b8>)
 80114ce:	21c4      	movs	r1, #196	; 0xc4
 80114d0:	484c      	ldr	r0, [pc, #304]	; (8011604 <nk_contextual_end+0x1bc>)
 80114d2:	f013 fb0d 	bl	8024af0 <__assert_func>
    if (panel->flags & NK_WINDOW_DYNAMIC) {
 80114d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d07b      	beq.n	80115da <nk_contextual_end+0x192>
        /* Close behavior
        This is a bit of a hack solution since we do not know before we end our popup
        how big it will be. We therefore do not directly know when a
        click outside the non-blocking popup must close it at that direct frame.
        Instead it will be closed in the next frame.*/
        struct nk_rect body = {0,0,0,0};
 80114e2:	f107 0310 	add.w	r3, r7, #16
 80114e6:	2200      	movs	r2, #0
 80114e8:	601a      	str	r2, [r3, #0]
 80114ea:	605a      	str	r2, [r3, #4]
 80114ec:	609a      	str	r2, [r3, #8]
 80114ee:	60da      	str	r2, [r3, #12]
        if (panel->at_y < (panel->bounds.y + panel->bounds.h)) {
 80114f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80114f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8011502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150e:	d53d      	bpl.n	801158c <nk_contextual_end+0x144>
            struct nk_vec2 padding = nk_panel_get_padding(&ctx->style, panel->type);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8011516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	4619      	mov	r1, r3
 801151c:	4610      	mov	r0, r2
 801151e:	f005 fdfd 	bl	801711c <nk_panel_get_padding>
 8011522:	eeb0 7a40 	vmov.f32	s14, s0
 8011526:	eef0 7a60 	vmov.f32	s15, s1
 801152a:	ed87 7a02 	vstr	s14, [r7, #8]
 801152e:	edc7 7a03 	vstr	s15, [r7, #12]
            body = panel->bounds;
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	f107 0410 	add.w	r4, r7, #16
 8011538:	3308      	adds	r3, #8
 801153a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801153c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            body.y = (panel->at_y + panel->footer_height + panel->border + padding.y + panel->row.height);
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8011546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011548:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011556:	ee37 7a27 	vadd.f32	s14, s14, s15
 801155a:	edd7 7a03 	vldr	s15, [r7, #12]
 801155e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011564:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8011568:	ee77 7a27 	vadd.f32	s15, s14, s15
 801156c:	edc7 7a05 	vstr	s15, [r7, #20]
            body.h = (panel->bounds.y + panel->bounds.h) - body.y;
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	ed93 7a03 	vldr	s14, [r3, #12]
 8011576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011578:	edd3 7a05 	vldr	s15, [r3, #20]
 801157c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011580:	edd7 7a05 	vldr	s15, [r7, #20]
 8011584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011588:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        {int pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2100      	movs	r1, #0
 8011590:	4618      	mov	r0, r3
 8011592:	f004 f831 	bl	80155f8 <nk_input_is_mouse_pressed>
 8011596:	6278      	str	r0, [r7, #36]	; 0x24
        int in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	ed97 6a04 	vldr	s12, [r7, #16]
 801159e:	edd7 6a05 	vldr	s13, [r7, #20]
 80115a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80115a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80115aa:	eeb0 0a46 	vmov.f32	s0, s12
 80115ae:	eef0 0a66 	vmov.f32	s1, s13
 80115b2:	eeb0 1a47 	vmov.f32	s2, s14
 80115b6:	eef0 1a67 	vmov.f32	s3, s15
 80115ba:	4618      	mov	r0, r3
 80115bc:	f003 ff60 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 80115c0:	6238      	str	r0, [r7, #32]
        if (pressed && in_body)
 80115c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d008      	beq.n	80115da <nk_contextual_end+0x192>
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d005      	beq.n	80115da <nk_contextual_end+0x192>
            popup->flags |= NK_WINDOW_HIDDEN;
 80115ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80115d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d8:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    if (popup->flags & NK_WINDOW_HIDDEN)
 80115da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d002      	beq.n	80115ec <nk_contextual_end+0x1a4>
        popup->seq = 0;
 80115e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e8:	2200      	movs	r2, #0
 80115ea:	601a      	str	r2, [r3, #0]
    nk_popup_end(ctx);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f008 fb35 	bl	8019c5c <nk_popup_end>
    return;
 80115f2:	e000      	b.n	80115f6 <nk_contextual_end+0x1ae>
    if (!ctx || !ctx->current) return;
 80115f4:	bf00      	nop
}
 80115f6:	3734      	adds	r7, #52	; 0x34
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd90      	pop	{r4, r7, pc}
 80115fc:	080287cc 	.word	0x080287cc
 8011600:	0802a69c 	.word	0x0802a69c
 8011604:	080287d0 	.word	0x080287d0
 8011608:	080287f0 	.word	0x080287f0
 801160c:	08028818 	.word	0x08028818
 8011610:	08028828 	.word	0x08028828

08011614 <nk_command_buffer_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_command_buffer_init(struct nk_command_buffer *cb,
    struct nk_buffer *b, enum nk_command_clipping clip)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	4613      	mov	r3, r2
 8011620:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(cb);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d105      	bne.n	8011634 <nk_command_buffer_init+0x20>
 8011628:	4b15      	ldr	r3, [pc, #84]	; (8011680 <nk_command_buffer_init+0x6c>)
 801162a:	4a16      	ldr	r2, [pc, #88]	; (8011684 <nk_command_buffer_init+0x70>)
 801162c:	210d      	movs	r1, #13
 801162e:	4816      	ldr	r0, [pc, #88]	; (8011688 <nk_command_buffer_init+0x74>)
 8011630:	f013 fa5e 	bl	8024af0 <__assert_func>
    NK_ASSERT(b);
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d105      	bne.n	8011646 <nk_command_buffer_init+0x32>
 801163a:	4b14      	ldr	r3, [pc, #80]	; (801168c <nk_command_buffer_init+0x78>)
 801163c:	4a11      	ldr	r2, [pc, #68]	; (8011684 <nk_command_buffer_init+0x70>)
 801163e:	210e      	movs	r1, #14
 8011640:	4811      	ldr	r0, [pc, #68]	; (8011688 <nk_command_buffer_init+0x74>)
 8011642:	f013 fa55 	bl	8024af0 <__assert_func>
    if (!cb || !b) return;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d015      	beq.n	8011678 <nk_command_buffer_init+0x64>
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d012      	beq.n	8011678 <nk_command_buffer_init+0x64>
    cb->base = b;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	68ba      	ldr	r2, [r7, #8]
 8011656:	601a      	str	r2, [r3, #0]
    cb->use_clipping = (int)clip;
 8011658:	79fa      	ldrb	r2, [r7, #7]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	615a      	str	r2, [r3, #20]
    cb->begin = b->allocated;
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	61da      	str	r2, [r3, #28]
    cb->end = b->allocated;
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	621a      	str	r2, [r3, #32]
    cb->last = b->allocated;
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	625a      	str	r2, [r3, #36]	; 0x24
 8011676:	e000      	b.n	801167a <nk_command_buffer_init+0x66>
    if (!cb || !b) return;
 8011678:	bf00      	nop
}
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	0802884c 	.word	0x0802884c
 8011684:	0802a6c0 	.word	0x0802a6c0
 8011688:	08028850 	.word	0x08028850
 801168c:	0802886c 	.word	0x0802886c

08011690 <nk_command_buffer_reset>:
NK_LIB void
nk_command_buffer_reset(struct nk_command_buffer *b)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
    NK_ASSERT(b);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d105      	bne.n	80116aa <nk_command_buffer_reset+0x1a>
 801169e:	4b0f      	ldr	r3, [pc, #60]	; (80116dc <nk_command_buffer_reset+0x4c>)
 80116a0:	4a0f      	ldr	r2, [pc, #60]	; (80116e0 <nk_command_buffer_reset+0x50>)
 80116a2:	2119      	movs	r1, #25
 80116a4:	480f      	ldr	r0, [pc, #60]	; (80116e4 <nk_command_buffer_reset+0x54>)
 80116a6:	f013 fa23 	bl	8024af0 <__assert_func>
    if (!b) return;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d010      	beq.n	80116d2 <nk_command_buffer_reset+0x42>
    b->begin = 0;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	61da      	str	r2, [r3, #28]
    b->end = 0;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2200      	movs	r2, #0
 80116ba:	621a      	str	r2, [r3, #32]
    b->last = 0;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2200      	movs	r2, #0
 80116c0:	625a      	str	r2, [r3, #36]	; 0x24
    b->clip = nk_null_rect;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4a08      	ldr	r2, [pc, #32]	; (80116e8 <nk_command_buffer_reset+0x58>)
 80116c6:	1d1c      	adds	r4, r3, #4
 80116c8:	4613      	mov	r3, r2
 80116ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80116cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80116d0:	e000      	b.n	80116d4 <nk_command_buffer_reset+0x44>
    if (!b) return;
 80116d2:	bf00      	nop
#ifdef NK_INCLUDE_COMMAND_USERDATA
    b->userdata.ptr = 0;
#endif
}
 80116d4:	370c      	adds	r7, #12
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd90      	pop	{r4, r7, pc}
 80116da:	bf00      	nop
 80116dc:	0802886c 	.word	0x0802886c
 80116e0:	0802a6d8 	.word	0x0802a6d8
 80116e4:	08028850 	.word	0x08028850
 80116e8:	0802a6b0 	.word	0x0802a6b0

080116ec <nk_command_buffer_push>:
NK_LIB void*
nk_command_buffer_push(struct nk_command_buffer* b,
    enum nk_command_type t, nk_size size)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b088      	sub	sp, #32
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	460b      	mov	r3, r1
 80116f6:	607a      	str	r2, [r7, #4]
 80116f8:	72fb      	strb	r3, [r7, #11]
    struct nk_command *cmd;
    nk_size alignment;
    void *unaligned;
    void *memory;

    NK_ASSERT(b);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d105      	bne.n	801170c <nk_command_buffer_push+0x20>
 8011700:	4b28      	ldr	r3, [pc, #160]	; (80117a4 <nk_command_buffer_push+0xb8>)
 8011702:	4a29      	ldr	r2, [pc, #164]	; (80117a8 <nk_command_buffer_push+0xbc>)
 8011704:	212d      	movs	r1, #45	; 0x2d
 8011706:	4829      	ldr	r0, [pc, #164]	; (80117ac <nk_command_buffer_push+0xc0>)
 8011708:	f013 f9f2 	bl	8024af0 <__assert_func>
    NK_ASSERT(b->base);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d105      	bne.n	8011720 <nk_command_buffer_push+0x34>
 8011714:	4b26      	ldr	r3, [pc, #152]	; (80117b0 <nk_command_buffer_push+0xc4>)
 8011716:	4a24      	ldr	r2, [pc, #144]	; (80117a8 <nk_command_buffer_push+0xbc>)
 8011718:	212e      	movs	r1, #46	; 0x2e
 801171a:	4824      	ldr	r0, [pc, #144]	; (80117ac <nk_command_buffer_push+0xc0>)
 801171c:	f013 f9e8 	bl	8024af0 <__assert_func>
    if (!b) return 0;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d101      	bne.n	801172a <nk_command_buffer_push+0x3e>
 8011726:	2300      	movs	r3, #0
 8011728:	e037      	b.n	801179a <nk_command_buffer_push+0xae>
    cmd = (struct nk_command*)nk_buffer_alloc(b->base,NK_BUFFER_FRONT,size,align);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6818      	ldr	r0, [r3, #0]
 801172e:	4b21      	ldr	r3, [pc, #132]	; (80117b4 <nk_command_buffer_push+0xc8>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	2100      	movs	r1, #0
 8011736:	f7fd f96f 	bl	800ea18 <nk_buffer_alloc>
 801173a:	61f8      	str	r0, [r7, #28]
    if (!cmd) return 0;
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d101      	bne.n	8011746 <nk_command_buffer_push+0x5a>
 8011742:	2300      	movs	r3, #0
 8011744:	e029      	b.n	801179a <nk_command_buffer_push+0xae>

    /* make sure the offset to the next command is aligned */
    b->last = (nk_size)((nk_byte*)cmd - (nk_byte*)b->base->memory.ptr);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	6a1b      	ldr	r3, [r3, #32]
 801174c:	69fa      	ldr	r2, [r7, #28]
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	461a      	mov	r2, r3
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	625a      	str	r2, [r3, #36]	; 0x24
    unaligned = (nk_byte*)cmd + size;
 8011756:	69fa      	ldr	r2, [r7, #28]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4413      	add	r3, r2
 801175c:	61bb      	str	r3, [r7, #24]
    memory = NK_ALIGN_PTR(unaligned, align);
 801175e:	4b15      	ldr	r3, [pc, #84]	; (80117b4 <nk_command_buffer_push+0xc8>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	3b01      	subs	r3, #1
 8011764:	69ba      	ldr	r2, [r7, #24]
 8011766:	4413      	add	r3, r2
 8011768:	461a      	mov	r2, r3
 801176a:	4b12      	ldr	r3, [pc, #72]	; (80117b4 <nk_command_buffer_push+0xc8>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	425b      	negs	r3, r3
 8011770:	4013      	ands	r3, r2
 8011772:	617b      	str	r3, [r7, #20]
    alignment = (nk_size)((nk_byte*)memory - (nk_byte*)unaligned);
 8011774:	697a      	ldr	r2, [r7, #20]
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	613b      	str	r3, [r7, #16]
#ifdef NK_ZERO_COMMAND_MEMORY
    NK_MEMSET(cmd, 0, size + alignment);
#endif

    cmd->type = t;
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	7afa      	ldrb	r2, [r7, #11]
 8011780:	701a      	strb	r2, [r3, #0]
    cmd->next = b->base->allocated + alignment;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	441a      	add	r2, r3
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	605a      	str	r2, [r3, #4]
#ifdef NK_INCLUDE_COMMAND_USERDATA
    cmd->userdata = b->userdata;
#endif
    b->end = cmd->next;
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	621a      	str	r2, [r3, #32]
    return cmd;
 8011798:	69fb      	ldr	r3, [r7, #28]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3720      	adds	r7, #32
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	0802886c 	.word	0x0802886c
 80117a8:	0802a6f0 	.word	0x0802a6f0
 80117ac:	08028850 	.word	0x08028850
 80117b0:	08028870 	.word	0x08028870
 80117b4:	0802a708 	.word	0x0802a708

080117b8 <nk_push_scissor>:
NK_API void
nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b088      	sub	sp, #32
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6178      	str	r0, [r7, #20]
 80117c0:	eeb0 6a40 	vmov.f32	s12, s0
 80117c4:	eef0 6a60 	vmov.f32	s13, s1
 80117c8:	eeb0 7a41 	vmov.f32	s14, s2
 80117cc:	eef0 7a61 	vmov.f32	s15, s3
 80117d0:	ed87 6a01 	vstr	s12, [r7, #4]
 80117d4:	edc7 6a02 	vstr	s13, [r7, #8]
 80117d8:	ed87 7a03 	vstr	s14, [r7, #12]
 80117dc:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_scissor *cmd;
    NK_ASSERT(b);
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d105      	bne.n	80117f2 <nk_push_scissor+0x3a>
 80117e6:	4b2d      	ldr	r3, [pc, #180]	; (801189c <nk_push_scissor+0xe4>)
 80117e8:	4a2d      	ldr	r2, [pc, #180]	; (80118a0 <nk_push_scissor+0xe8>)
 80117ea:	2148      	movs	r1, #72	; 0x48
 80117ec:	482d      	ldr	r0, [pc, #180]	; (80118a4 <nk_push_scissor+0xec>)
 80117ee:	f013 f97f 	bl	8024af0 <__assert_func>
    if (!b) return;
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d04b      	beq.n	8011890 <nk_push_scissor+0xd8>

    b->clip.x = r.x;
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	605a      	str	r2, [r3, #4]
    b->clip.y = r.y;
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	609a      	str	r2, [r3, #8]
    b->clip.w = r.w;
 8011804:	68fa      	ldr	r2, [r7, #12]
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	60da      	str	r2, [r3, #12]
    b->clip.h = r.h;
 801180a:	693a      	ldr	r2, [r7, #16]
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	611a      	str	r2, [r3, #16]
    cmd = (struct nk_command_scissor*)
        nk_command_buffer_push(b, NK_COMMAND_SCISSOR, sizeof(*cmd));
 8011810:	2210      	movs	r2, #16
 8011812:	2101      	movs	r1, #1
 8011814:	6978      	ldr	r0, [r7, #20]
 8011816:	f7ff ff69 	bl	80116ec <nk_command_buffer_push>
 801181a:	61f8      	str	r0, [r7, #28]

    if (!cmd) return;
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d038      	beq.n	8011894 <nk_push_scissor+0xdc>
    cmd->x = (short)r.x;
 8011822:	edd7 7a01 	vldr	s15, [r7, #4]
 8011826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801182a:	ee17 3a90 	vmov	r3, s15
 801182e:	b21a      	sxth	r2, r3
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011834:	edd7 7a02 	vldr	s15, [r7, #8]
 8011838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801183c:	ee17 3a90 	vmov	r3, s15
 8011840:	b21a      	sxth	r2, r3
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 8011846:	edd7 7a03 	vldr	s15, [r7, #12]
 801184a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011852:	dd07      	ble.n	8011864 <nk_push_scissor+0xac>
 8011854:	edd7 7a03 	vldr	s15, [r7, #12]
 8011858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801185c:	ee17 3a90 	vmov	r3, s15
 8011860:	b29a      	uxth	r2, r3
 8011862:	e000      	b.n	8011866 <nk_push_scissor+0xae>
 8011864:	2200      	movs	r2, #0
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 801186a:	edd7 7a04 	vldr	s15, [r7, #16]
 801186e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011876:	dd07      	ble.n	8011888 <nk_push_scissor+0xd0>
 8011878:	edd7 7a04 	vldr	s15, [r7, #16]
 801187c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011880:	ee17 3a90 	vmov	r3, s15
 8011884:	b29a      	uxth	r2, r3
 8011886:	e000      	b.n	801188a <nk_push_scissor+0xd2>
 8011888:	2200      	movs	r2, #0
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	81da      	strh	r2, [r3, #14]
 801188e:	e002      	b.n	8011896 <nk_push_scissor+0xde>
    if (!b) return;
 8011890:	bf00      	nop
 8011892:	e000      	b.n	8011896 <nk_push_scissor+0xde>
    if (!cmd) return;
 8011894:	bf00      	nop
}
 8011896:	3720      	adds	r7, #32
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	0802886c 	.word	0x0802886c
 80118a0:	0802a70c 	.word	0x0802a70c
 80118a4:	08028850 	.word	0x08028850

080118a8 <nk_stroke_rect>:
    cmd->color = col;
}
NK_API void
nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, float line_thickness, struct nk_color c)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08a      	sub	sp, #40	; 0x28
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	61f8      	str	r0, [r7, #28]
 80118b0:	eeb0 6a40 	vmov.f32	s12, s0
 80118b4:	eef0 6a60 	vmov.f32	s13, s1
 80118b8:	eeb0 7a41 	vmov.f32	s14, s2
 80118bc:	eef0 7a61 	vmov.f32	s15, s3
 80118c0:	ed87 2a02 	vstr	s4, [r7, #8]
 80118c4:	edc7 2a01 	vstr	s5, [r7, #4]
 80118c8:	6039      	str	r1, [r7, #0]
 80118ca:	ed87 6a03 	vstr	s12, [r7, #12]
 80118ce:	edc7 6a04 	vstr	s13, [r7, #16]
 80118d2:	ed87 7a05 	vstr	s14, [r7, #20]
 80118d6:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect *cmd;
    NK_ASSERT(b);
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d105      	bne.n	80118ec <nk_stroke_rect+0x44>
 80118e0:	4b72      	ldr	r3, [pc, #456]	; (8011aac <nk_stroke_rect+0x204>)
 80118e2:	4a73      	ldr	r2, [pc, #460]	; (8011ab0 <nk_stroke_rect+0x208>)
 80118e4:	2185      	movs	r1, #133	; 0x85
 80118e6:	4873      	ldr	r0, [pc, #460]	; (8011ab4 <nk_stroke_rect+0x20c>)
 80118e8:	f013 f902 	bl	8024af0 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f000 80d4 	beq.w	8011a9c <nk_stroke_rect+0x1f4>
 80118f4:	78fb      	ldrb	r3, [r7, #3]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 80d0 	beq.w	8011a9c <nk_stroke_rect+0x1f4>
 80118fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8011900:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011908:	f000 80c8 	beq.w	8011a9c <nk_stroke_rect+0x1f4>
 801190c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011910:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	f000 80c0 	beq.w	8011a9c <nk_stroke_rect+0x1f4>
 801191c:	edd7 7a01 	vldr	s15, [r7, #4]
 8011920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011928:	f240 80b8 	bls.w	8011a9c <nk_stroke_rect+0x1f4>
    if (b->use_clipping) {
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d05e      	beq.n	80119f2 <nk_stroke_rect+0x14a>
        const struct nk_rect *clip = &b->clip;
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	3304      	adds	r3, #4
 8011938:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 801193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193c:	ed93 7a00 	vldr	s14, [r3]
 8011940:	edd7 6a03 	vldr	s13, [r7, #12]
 8011944:	edd7 7a05 	vldr	s15, [r7, #20]
 8011948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801194c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011954:	bf4c      	ite	mi
 8011956:	2301      	movmi	r3, #1
 8011958:	2300      	movpl	r3, #0
 801195a:	b2db      	uxtb	r3, r3
 801195c:	f083 0301 	eor.w	r3, r3, #1
 8011960:	b2db      	uxtb	r3, r3
 8011962:	2b00      	cmp	r3, #0
 8011964:	f040 809c 	bne.w	8011aa0 <nk_stroke_rect+0x1f8>
 8011968:	ed97 7a03 	vldr	s14, [r7, #12]
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801196e:	edd3 6a00 	vldr	s13, [r3]
 8011972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011974:	edd3 7a02 	vldr	s15, [r3, #8]
 8011978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801197c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011984:	bf4c      	ite	mi
 8011986:	2301      	movmi	r3, #1
 8011988:	2300      	movpl	r3, #0
 801198a:	b2db      	uxtb	r3, r3
 801198c:	f083 0301 	eor.w	r3, r3, #1
 8011990:	b2db      	uxtb	r3, r3
 8011992:	2b00      	cmp	r3, #0
 8011994:	f040 8084 	bne.w	8011aa0 <nk_stroke_rect+0x1f8>
 8011998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801199a:	ed93 7a01 	vldr	s14, [r3, #4]
 801199e:	edd7 6a04 	vldr	s13, [r7, #16]
 80119a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80119a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b2:	bf4c      	ite	mi
 80119b4:	2301      	movmi	r3, #1
 80119b6:	2300      	movpl	r3, #0
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	f083 0301 	eor.w	r3, r3, #1
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d16d      	bne.n	8011aa0 <nk_stroke_rect+0x1f8>
 80119c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80119c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80119ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80119d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e0:	bf4c      	ite	mi
 80119e2:	2301      	movmi	r3, #1
 80119e4:	2300      	movpl	r3, #0
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	f083 0301 	eor.w	r3, r3, #1
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d156      	bne.n	8011aa0 <nk_stroke_rect+0x1f8>
            clip->x, clip->y, clip->w, clip->h)) return;
    }
    cmd = (struct nk_command_rect*)
        nk_command_buffer_push(b, NK_COMMAND_RECT, sizeof(*cmd));
 80119f2:	2218      	movs	r2, #24
 80119f4:	2104      	movs	r1, #4
 80119f6:	69f8      	ldr	r0, [r7, #28]
 80119f8:	f7ff fe78 	bl	80116ec <nk_command_buffer_push>
 80119fc:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 80119fe:	6a3b      	ldr	r3, [r7, #32]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d04f      	beq.n	8011aa4 <nk_stroke_rect+0x1fc>
    cmd->rounding = (unsigned short)rounding;
 8011a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8011a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a0c:	ee17 3a90 	vmov	r3, s15
 8011a10:	b29a      	uxth	r2, r3
 8011a12:	6a3b      	ldr	r3, [r7, #32]
 8011a14:	811a      	strh	r2, [r3, #8]
    cmd->line_thickness = (unsigned short)line_thickness;
 8011a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8011a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a1e:	ee17 3a90 	vmov	r3, s15
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	815a      	strh	r2, [r3, #10]
    cmd->x = (short)rect.x;
 8011a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8011a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a30:	ee17 3a90 	vmov	r3, s15
 8011a34:	b21a      	sxth	r2, r3
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	819a      	strh	r2, [r3, #12]
    cmd->y = (short)rect.y;
 8011a3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8011a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a42:	ee17 3a90 	vmov	r3, s15
 8011a46:	b21a      	sxth	r2, r3
 8011a48:	6a3b      	ldr	r3, [r7, #32]
 8011a4a:	81da      	strh	r2, [r3, #14]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a58:	dd07      	ble.n	8011a6a <nk_stroke_rect+0x1c2>
 8011a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a62:	ee17 3a90 	vmov	r3, s15
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	e000      	b.n	8011a6c <nk_stroke_rect+0x1c4>
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	6a3b      	ldr	r3, [r7, #32]
 8011a6e:	821a      	strh	r2, [r3, #16]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011a70:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a7c:	dd07      	ble.n	8011a8e <nk_stroke_rect+0x1e6>
 8011a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a86:	ee17 3a90 	vmov	r3, s15
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	e000      	b.n	8011a90 <nk_stroke_rect+0x1e8>
 8011a8e:	2200      	movs	r2, #0
 8011a90:	6a3b      	ldr	r3, [r7, #32]
 8011a92:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 8011a94:	6a3b      	ldr	r3, [r7, #32]
 8011a96:	683a      	ldr	r2, [r7, #0]
 8011a98:	615a      	str	r2, [r3, #20]
 8011a9a:	e004      	b.n	8011aa6 <nk_stroke_rect+0x1fe>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0 || line_thickness <= 0) return;
 8011a9c:	bf00      	nop
 8011a9e:	e002      	b.n	8011aa6 <nk_stroke_rect+0x1fe>
            clip->x, clip->y, clip->w, clip->h)) return;
 8011aa0:	bf00      	nop
 8011aa2:	e000      	b.n	8011aa6 <nk_stroke_rect+0x1fe>
    if (!cmd) return;
 8011aa4:	bf00      	nop
}
 8011aa6:	3728      	adds	r7, #40	; 0x28
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	0802886c 	.word	0x0802886c
 8011ab0:	0802a71c 	.word	0x0802a71c
 8011ab4:	08028850 	.word	0x08028850

08011ab8 <nk_fill_rect>:
NK_API void
nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,
    float rounding, struct nk_color c)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b08a      	sub	sp, #40	; 0x28
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	61f8      	str	r0, [r7, #28]
 8011ac0:	eeb0 6a40 	vmov.f32	s12, s0
 8011ac4:	eef0 6a60 	vmov.f32	s13, s1
 8011ac8:	eeb0 7a41 	vmov.f32	s14, s2
 8011acc:	eef0 7a61 	vmov.f32	s15, s3
 8011ad0:	ed87 2a02 	vstr	s4, [r7, #8]
 8011ad4:	6079      	str	r1, [r7, #4]
 8011ad6:	ed87 6a03 	vstr	s12, [r7, #12]
 8011ada:	edc7 6a04 	vstr	s13, [r7, #16]
 8011ade:	ed87 7a05 	vstr	s14, [r7, #20]
 8011ae2:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_rect_filled *cmd;
    NK_ASSERT(b);
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d105      	bne.n	8011af8 <nk_fill_rect+0x40>
 8011aec:	4b6a      	ldr	r3, [pc, #424]	; (8011c98 <nk_fill_rect+0x1e0>)
 8011aee:	4a6b      	ldr	r2, [pc, #428]	; (8011c9c <nk_fill_rect+0x1e4>)
 8011af0:	219c      	movs	r1, #156	; 0x9c
 8011af2:	486b      	ldr	r0, [pc, #428]	; (8011ca0 <nk_fill_rect+0x1e8>)
 8011af4:	f012 fffc 	bl	8024af0 <__assert_func>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	f000 80c4 	beq.w	8011c88 <nk_fill_rect+0x1d0>
 8011b00:	79fb      	ldrb	r3, [r7, #7]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	f000 80c0 	beq.w	8011c88 <nk_fill_rect+0x1d0>
 8011b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b14:	f000 80b8 	beq.w	8011c88 <nk_fill_rect+0x1d0>
 8011b18:	edd7 7a06 	vldr	s15, [r7, #24]
 8011b1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b24:	f000 80b0 	beq.w	8011c88 <nk_fill_rect+0x1d0>
    if (b->use_clipping) {
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	695b      	ldr	r3, [r3, #20]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d05d      	beq.n	8011bec <nk_fill_rect+0x134>
        const struct nk_rect *clip = &b->clip;
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	3304      	adds	r3, #4
 8011b34:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INTERSECT(rect.x, rect.y, rect.w, rect.h,
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	ed93 7a00 	vldr	s14, [r3]
 8011b3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8011b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8011b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b50:	bf4c      	ite	mi
 8011b52:	2301      	movmi	r3, #1
 8011b54:	2300      	movpl	r3, #0
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	f083 0301 	eor.w	r3, r3, #1
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f040 8094 	bne.w	8011c8c <nk_fill_rect+0x1d4>
 8011b64:	ed97 7a03 	vldr	s14, [r7, #12]
 8011b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6a:	edd3 6a00 	vldr	s13, [r3]
 8011b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b70:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b80:	bf4c      	ite	mi
 8011b82:	2301      	movmi	r3, #1
 8011b84:	2300      	movpl	r3, #0
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	f083 0301 	eor.w	r3, r3, #1
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d17c      	bne.n	8011c8c <nk_fill_rect+0x1d4>
 8011b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b94:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b98:	edd7 6a04 	vldr	s13, [r7, #16]
 8011b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bac:	bf4c      	ite	mi
 8011bae:	2301      	movmi	r3, #1
 8011bb0:	2300      	movpl	r3, #0
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	f083 0301 	eor.w	r3, r3, #1
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d166      	bne.n	8011c8c <nk_fill_rect+0x1d4>
 8011bbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8011bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc4:	edd3 6a01 	vldr	s13, [r3, #4]
 8011bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bca:	edd3 7a03 	vldr	s15, [r3, #12]
 8011bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bda:	bf4c      	ite	mi
 8011bdc:	2301      	movmi	r3, #1
 8011bde:	2300      	movpl	r3, #0
 8011be0:	b2db      	uxtb	r3, r3
 8011be2:	f083 0301 	eor.w	r3, r3, #1
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d14f      	bne.n	8011c8c <nk_fill_rect+0x1d4>
            clip->x, clip->y, clip->w, clip->h)) return;
    }

    cmd = (struct nk_command_rect_filled*)
        nk_command_buffer_push(b, NK_COMMAND_RECT_FILLED, sizeof(*cmd));
 8011bec:	2218      	movs	r2, #24
 8011bee:	2105      	movs	r1, #5
 8011bf0:	69f8      	ldr	r0, [r7, #28]
 8011bf2:	f7ff fd7b 	bl	80116ec <nk_command_buffer_push>
 8011bf6:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d048      	beq.n	8011c90 <nk_fill_rect+0x1d8>
    cmd->rounding = (unsigned short)rounding;
 8011bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8011c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c06:	ee17 3a90 	vmov	r3, s15
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	6a3b      	ldr	r3, [r7, #32]
 8011c0e:	811a      	strh	r2, [r3, #8]
    cmd->x = (short)rect.x;
 8011c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8011c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c18:	ee17 3a90 	vmov	r3, s15
 8011c1c:	b21a      	sxth	r2, r3
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	815a      	strh	r2, [r3, #10]
    cmd->y = (short)rect.y;
 8011c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8011c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c2a:	ee17 3a90 	vmov	r3, s15
 8011c2e:	b21a      	sxth	r2, r3
 8011c30:	6a3b      	ldr	r3, [r7, #32]
 8011c32:	819a      	strh	r2, [r3, #12]
    cmd->w = (unsigned short)NK_MAX(0, rect.w);
 8011c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c40:	dd07      	ble.n	8011c52 <nk_fill_rect+0x19a>
 8011c42:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c4a:	ee17 3a90 	vmov	r3, s15
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	e000      	b.n	8011c54 <nk_fill_rect+0x19c>
 8011c52:	2200      	movs	r2, #0
 8011c54:	6a3b      	ldr	r3, [r7, #32]
 8011c56:	81da      	strh	r2, [r3, #14]
    cmd->h = (unsigned short)NK_MAX(0, rect.h);
 8011c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	dd07      	ble.n	8011c76 <nk_fill_rect+0x1be>
 8011c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c6e:	ee17 3a90 	vmov	r3, s15
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	e000      	b.n	8011c78 <nk_fill_rect+0x1c0>
 8011c76:	2200      	movs	r2, #0
 8011c78:	6a3b      	ldr	r3, [r7, #32]
 8011c7a:	821a      	strh	r2, [r3, #16]
    cmd->color = c;
 8011c7c:	6a3b      	ldr	r3, [r7, #32]
 8011c7e:	3312      	adds	r3, #18
 8011c80:	1d3a      	adds	r2, r7, #4
 8011c82:	6810      	ldr	r0, [r2, #0]
 8011c84:	6018      	str	r0, [r3, #0]
 8011c86:	e004      	b.n	8011c92 <nk_fill_rect+0x1da>
    if (!b || c.a == 0 || rect.w == 0 || rect.h == 0) return;
 8011c88:	bf00      	nop
 8011c8a:	e002      	b.n	8011c92 <nk_fill_rect+0x1da>
            clip->x, clip->y, clip->w, clip->h)) return;
 8011c8c:	bf00      	nop
 8011c8e:	e000      	b.n	8011c92 <nk_fill_rect+0x1da>
    if (!cmd) return;
 8011c90:	bf00      	nop
}
 8011c92:	3728      	adds	r7, #40	; 0x28
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	0802886c 	.word	0x0802886c
 8011c9c:	0802a72c 	.word	0x0802a72c
 8011ca0:	08028850 	.word	0x08028850

08011ca4 <nk_fill_circle>:
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
    cmd->color = c;
}
NK_API void
nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b088      	sub	sp, #32
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6178      	str	r0, [r7, #20]
 8011cac:	eeb0 6a40 	vmov.f32	s12, s0
 8011cb0:	eef0 6a60 	vmov.f32	s13, s1
 8011cb4:	eeb0 7a41 	vmov.f32	s14, s2
 8011cb8:	eef0 7a61 	vmov.f32	s15, s3
 8011cbc:	6039      	str	r1, [r7, #0]
 8011cbe:	ed87 6a01 	vstr	s12, [r7, #4]
 8011cc2:	edc7 6a02 	vstr	s13, [r7, #8]
 8011cc6:	ed87 7a03 	vstr	s14, [r7, #12]
 8011cca:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_command_circle_filled *cmd;
    NK_ASSERT(b);
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d105      	bne.n	8011ce0 <nk_fill_circle+0x3c>
 8011cd4:	4b65      	ldr	r3, [pc, #404]	; (8011e6c <nk_fill_circle+0x1c8>)
 8011cd6:	4a66      	ldr	r2, [pc, #408]	; (8011e70 <nk_fill_circle+0x1cc>)
 8011cd8:	21e2      	movs	r1, #226	; 0xe2
 8011cda:	4866      	ldr	r0, [pc, #408]	; (8011e74 <nk_fill_circle+0x1d0>)
 8011cdc:	f012 ff08 	bl	8024af0 <__assert_func>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f000 80b9 	beq.w	8011e5a <nk_fill_circle+0x1b6>
 8011ce8:	78fb      	ldrb	r3, [r7, #3]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f000 80b5 	beq.w	8011e5a <nk_fill_circle+0x1b6>
 8011cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8011cf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfc:	f000 80ad 	beq.w	8011e5a <nk_fill_circle+0x1b6>
 8011d00:	edd7 7a04 	vldr	s15, [r7, #16]
 8011d04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0c:	f000 80a5 	beq.w	8011e5a <nk_fill_circle+0x1b6>
    if (b->use_clipping) {
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d05d      	beq.n	8011dd4 <nk_fill_circle+0x130>
        const struct nk_rect *clip = &b->clip;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	3304      	adds	r3, #4
 8011d1c:	61fb      	str	r3, [r7, #28]
        if (!NK_INTERSECT(r.x, r.y, r.w, r.h, clip->x, clip->y, clip->w, clip->h))
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	ed93 7a00 	vldr	s14, [r3]
 8011d24:	edd7 6a01 	vldr	s13, [r7, #4]
 8011d28:	edd7 7a03 	vldr	s15, [r7, #12]
 8011d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d38:	bf4c      	ite	mi
 8011d3a:	2301      	movmi	r3, #1
 8011d3c:	2300      	movpl	r3, #0
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	f083 0301 	eor.w	r3, r3, #1
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f040 8089 	bne.w	8011e5e <nk_fill_circle+0x1ba>
 8011d4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	edd3 6a00 	vldr	s13, [r3]
 8011d56:	69fb      	ldr	r3, [r7, #28]
 8011d58:	edd3 7a02 	vldr	s15, [r3, #8]
 8011d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d68:	bf4c      	ite	mi
 8011d6a:	2301      	movmi	r3, #1
 8011d6c:	2300      	movpl	r3, #0
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	f083 0301 	eor.w	r3, r3, #1
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d171      	bne.n	8011e5e <nk_fill_circle+0x1ba>
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8011d80:	edd7 6a02 	vldr	s13, [r7, #8]
 8011d84:	edd7 7a04 	vldr	s15, [r7, #16]
 8011d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d94:	bf4c      	ite	mi
 8011d96:	2301      	movmi	r3, #1
 8011d98:	2300      	movpl	r3, #0
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	f083 0301 	eor.w	r3, r3, #1
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d15b      	bne.n	8011e5e <nk_fill_circle+0x1ba>
 8011da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	edd3 6a01 	vldr	s13, [r3, #4]
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	edd3 7a03 	vldr	s15, [r3, #12]
 8011db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc2:	bf4c      	ite	mi
 8011dc4:	2301      	movmi	r3, #1
 8011dc6:	2300      	movpl	r3, #0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	f083 0301 	eor.w	r3, r3, #1
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d144      	bne.n	8011e5e <nk_fill_circle+0x1ba>
            return;
    }

    cmd = (struct nk_command_circle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_CIRCLE_FILLED, sizeof(*cmd));
 8011dd4:	2214      	movs	r2, #20
 8011dd6:	2108      	movs	r1, #8
 8011dd8:	6978      	ldr	r0, [r7, #20]
 8011dda:	f7ff fc87 	bl	80116ec <nk_command_buffer_push>
 8011dde:	61b8      	str	r0, [r7, #24]
    if (!cmd) return;
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d03d      	beq.n	8011e62 <nk_fill_circle+0x1be>
    cmd->x = (short)r.x;
 8011de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8011dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dee:	ee17 3a90 	vmov	r3, s15
 8011df2:	b21a      	sxth	r2, r3
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 8011df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8011dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e00:	ee17 3a90 	vmov	r3, s15
 8011e04:	b21a      	sxth	r2, r3
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(r.w, 0);
 8011e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e16:	d501      	bpl.n	8011e1c <nk_fill_circle+0x178>
 8011e18:	2200      	movs	r2, #0
 8011e1a:	e006      	b.n	8011e2a <nk_fill_circle+0x186>
 8011e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e24:	ee17 3a90 	vmov	r3, s15
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(r.h, 0);
 8011e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3a:	d501      	bpl.n	8011e40 <nk_fill_circle+0x19c>
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	e006      	b.n	8011e4e <nk_fill_circle+0x1aa>
 8011e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e48:	ee17 3a90 	vmov	r3, s15
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	81da      	strh	r2, [r3, #14]
    cmd->color = c;
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	611a      	str	r2, [r3, #16]
 8011e58:	e004      	b.n	8011e64 <nk_fill_circle+0x1c0>
    if (!b || c.a == 0 || r.w == 0 || r.h == 0) return;
 8011e5a:	bf00      	nop
 8011e5c:	e002      	b.n	8011e64 <nk_fill_circle+0x1c0>
            return;
 8011e5e:	bf00      	nop
 8011e60:	e000      	b.n	8011e64 <nk_fill_circle+0x1c0>
    if (!cmd) return;
 8011e62:	bf00      	nop
}
 8011e64:	3720      	adds	r7, #32
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	0802886c 	.word	0x0802886c
 8011e70:	0802a73c 	.word	0x0802a73c
 8011e74:	08028850 	.word	0x08028850

08011e78 <nk_fill_triangle>:
    cmd->color = c;
}
NK_API void
nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,
    float y1, float x2, float y2, struct nk_color c)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b08a      	sub	sp, #40	; 0x28
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	61f8      	str	r0, [r7, #28]
 8011e80:	ed87 0a06 	vstr	s0, [r7, #24]
 8011e84:	edc7 0a05 	vstr	s1, [r7, #20]
 8011e88:	ed87 1a04 	vstr	s2, [r7, #16]
 8011e8c:	edc7 1a03 	vstr	s3, [r7, #12]
 8011e90:	ed87 2a02 	vstr	s4, [r7, #8]
 8011e94:	edc7 2a01 	vstr	s5, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
    struct nk_command_triangle_filled *cmd;
    NK_ASSERT(b);
 8011e9a:	69fb      	ldr	r3, [r7, #28]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d106      	bne.n	8011eae <nk_fill_triangle+0x36>
 8011ea0:	4baf      	ldr	r3, [pc, #700]	; (8012160 <nk_fill_triangle+0x2e8>)
 8011ea2:	4ab0      	ldr	r2, [pc, #704]	; (8012164 <nk_fill_triangle+0x2ec>)
 8011ea4:	f240 1135 	movw	r1, #309	; 0x135
 8011ea8:	48af      	ldr	r0, [pc, #700]	; (8012168 <nk_fill_triangle+0x2f0>)
 8011eaa:	f012 fe21 	bl	8024af0 <__assert_func>
    if (!b || c.a == 0) return;
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	f000 814b 	beq.w	801214c <nk_fill_triangle+0x2d4>
 8011eb6:	78fb      	ldrb	r3, [r7, #3]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 8147 	beq.w	801214c <nk_fill_triangle+0x2d4>
    if (!b) return;
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	f000 8145 	beq.w	8012150 <nk_fill_triangle+0x2d8>
    if (b->use_clipping) {
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	695b      	ldr	r3, [r3, #20]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	f000 80fb 	beq.w	80120c6 <nk_fill_triangle+0x24e>
        const struct nk_rect *clip = &b->clip;
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	3304      	adds	r3, #4
 8011ed4:	627b      	str	r3, [r7, #36]	; 0x24
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	edd3 7a00 	vldr	s15, [r3]
 8011edc:	ed97 7a06 	vldr	s14, [r7, #24]
 8011ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee8:	bfac      	ite	ge
 8011eea:	2301      	movge	r3, #1
 8011eec:	2300      	movlt	r3, #0
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	f083 0301 	eor.w	r3, r3, #1
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d140      	bne.n	8011f7c <nk_fill_triangle+0x104>
 8011efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efc:	ed93 7a00 	vldr	s14, [r3]
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8011f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f16:	bf4c      	ite	mi
 8011f18:	2301      	movmi	r3, #1
 8011f1a:	2300      	movpl	r3, #0
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	f083 0301 	eor.w	r3, r3, #1
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d129      	bne.n	8011f7c <nk_fill_triangle+0x104>
 8011f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f3a:	bfac      	ite	ge
 8011f3c:	2301      	movge	r3, #1
 8011f3e:	2300      	movlt	r3, #0
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	f083 0301 	eor.w	r3, r3, #1
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d117      	bne.n	8011f7c <nk_fill_triangle+0x104>
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	edd3 7a03 	vldr	s15, [r3, #12]
 8011f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8011f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f68:	bf4c      	ite	mi
 8011f6a:	2301      	movmi	r3, #1
 8011f6c:	2300      	movpl	r3, #0
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	f083 0301 	eor.w	r3, r3, #1
 8011f74:	b2db      	uxtb	r3, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f000 80a5 	beq.w	80120c6 <nk_fill_triangle+0x24e>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7e:	edd3 7a00 	vldr	s15, [r3]
 8011f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8011f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8e:	bfac      	ite	ge
 8011f90:	2301      	movge	r3, #1
 8011f92:	2300      	movlt	r3, #0
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	f083 0301 	eor.w	r3, r3, #1
 8011f9a:	b2db      	uxtb	r3, r3
        if (!NK_INBOX(x0, y0, clip->x, clip->y, clip->w, clip->h) &&
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d13f      	bne.n	8012020 <nk_fill_triangle+0x1a8>
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8011fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa2:	ed93 7a00 	vldr	s14, [r3]
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8011fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8011fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbc:	bf4c      	ite	mi
 8011fbe:	2301      	movmi	r3, #1
 8011fc0:	2300      	movpl	r3, #0
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	f083 0301 	eor.w	r3, r3, #1
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d128      	bne.n	8012020 <nk_fill_triangle+0x1a8>
 8011fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8011fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe0:	bfac      	ite	ge
 8011fe2:	2301      	movge	r3, #1
 8011fe4:	2300      	movlt	r3, #0
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	f083 0301 	eor.w	r3, r3, #1
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d116      	bne.n	8012020 <nk_fill_triangle+0x1a8>
 8011ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff4:	ed93 7a01 	vldr	s14, [r3, #4]
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8011ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012002:	ed97 7a03 	vldr	s14, [r7, #12]
 8012006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200e:	bf4c      	ite	mi
 8012010:	2301      	movmi	r3, #1
 8012012:	2300      	movpl	r3, #0
 8012014:	b2db      	uxtb	r3, r3
 8012016:	f083 0301 	eor.w	r3, r3, #1
 801201a:	b2db      	uxtb	r3, r3
 801201c:	2b00      	cmp	r3, #0
 801201e:	d052      	beq.n	80120c6 <nk_fill_triangle+0x24e>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 8012020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012022:	edd3 7a00 	vldr	s15, [r3]
 8012026:	ed97 7a02 	vldr	s14, [r7, #8]
 801202a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012032:	bfac      	ite	ge
 8012034:	2301      	movge	r3, #1
 8012036:	2300      	movlt	r3, #0
 8012038:	b2db      	uxtb	r3, r3
 801203a:	f083 0301 	eor.w	r3, r3, #1
 801203e:	b2db      	uxtb	r3, r3
            !NK_INBOX(x1, y1, clip->x, clip->y, clip->w, clip->h) &&
 8012040:	2b00      	cmp	r3, #0
 8012042:	f040 8087 	bne.w	8012154 <nk_fill_triangle+0x2dc>
            !NK_INBOX(x2, y2, clip->x, clip->y, clip->w, clip->h))
 8012046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012048:	ed93 7a00 	vldr	s14, [r3]
 801204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012056:	ed97 7a02 	vldr	s14, [r7, #8]
 801205a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012062:	bf4c      	ite	mi
 8012064:	2301      	movmi	r3, #1
 8012066:	2300      	movpl	r3, #0
 8012068:	b2db      	uxtb	r3, r3
 801206a:	f083 0301 	eor.w	r3, r3, #1
 801206e:	b2db      	uxtb	r3, r3
 8012070:	2b00      	cmp	r3, #0
 8012072:	d16f      	bne.n	8012154 <nk_fill_triangle+0x2dc>
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	edd3 7a01 	vldr	s15, [r3, #4]
 801207a:	ed97 7a01 	vldr	s14, [r7, #4]
 801207e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012086:	bfac      	ite	ge
 8012088:	2301      	movge	r3, #1
 801208a:	2300      	movlt	r3, #0
 801208c:	b2db      	uxtb	r3, r3
 801208e:	f083 0301 	eor.w	r3, r3, #1
 8012092:	b2db      	uxtb	r3, r3
 8012094:	2b00      	cmp	r3, #0
 8012096:	d15d      	bne.n	8012154 <nk_fill_triangle+0x2dc>
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	ed93 7a01 	vldr	s14, [r3, #4]
 801209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80120a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80120a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80120ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b4:	bf4c      	ite	mi
 80120b6:	2301      	movmi	r3, #1
 80120b8:	2300      	movpl	r3, #0
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	f083 0301 	eor.w	r3, r3, #1
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d146      	bne.n	8012154 <nk_fill_triangle+0x2dc>
            return;
    }

    cmd = (struct nk_command_triangle_filled*)
        nk_command_buffer_push(b, NK_COMMAND_TRIANGLE_FILLED, sizeof(*cmd));
 80120c6:	2218      	movs	r2, #24
 80120c8:	210c      	movs	r1, #12
 80120ca:	69f8      	ldr	r0, [r7, #28]
 80120cc:	f7ff fb0e 	bl	80116ec <nk_command_buffer_push>
 80120d0:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 80120d2:	6a3b      	ldr	r3, [r7, #32]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d03f      	beq.n	8012158 <nk_fill_triangle+0x2e0>
    cmd->a.x = (short)x0;
 80120d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80120dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120e0:	ee17 3a90 	vmov	r3, s15
 80120e4:	b21a      	sxth	r2, r3
 80120e6:	6a3b      	ldr	r3, [r7, #32]
 80120e8:	811a      	strh	r2, [r3, #8]
    cmd->a.y = (short)y0;
 80120ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80120ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120f2:	ee17 3a90 	vmov	r3, s15
 80120f6:	b21a      	sxth	r2, r3
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	815a      	strh	r2, [r3, #10]
    cmd->b.x = (short)x1;
 80120fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8012100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012104:	ee17 3a90 	vmov	r3, s15
 8012108:	b21a      	sxth	r2, r3
 801210a:	6a3b      	ldr	r3, [r7, #32]
 801210c:	819a      	strh	r2, [r3, #12]
    cmd->b.y = (short)y1;
 801210e:	edd7 7a03 	vldr	s15, [r7, #12]
 8012112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012116:	ee17 3a90 	vmov	r3, s15
 801211a:	b21a      	sxth	r2, r3
 801211c:	6a3b      	ldr	r3, [r7, #32]
 801211e:	81da      	strh	r2, [r3, #14]
    cmd->c.x = (short)x2;
 8012120:	edd7 7a02 	vldr	s15, [r7, #8]
 8012124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012128:	ee17 3a90 	vmov	r3, s15
 801212c:	b21a      	sxth	r2, r3
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	821a      	strh	r2, [r3, #16]
    cmd->c.y = (short)y2;
 8012132:	edd7 7a01 	vldr	s15, [r7, #4]
 8012136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801213a:	ee17 3a90 	vmov	r3, s15
 801213e:	b21a      	sxth	r2, r3
 8012140:	6a3b      	ldr	r3, [r7, #32]
 8012142:	825a      	strh	r2, [r3, #18]
    cmd->color = c;
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	683a      	ldr	r2, [r7, #0]
 8012148:	615a      	str	r2, [r3, #20]
 801214a:	e006      	b.n	801215a <nk_fill_triangle+0x2e2>
    if (!b || c.a == 0) return;
 801214c:	bf00      	nop
 801214e:	e004      	b.n	801215a <nk_fill_triangle+0x2e2>
    if (!b) return;
 8012150:	bf00      	nop
 8012152:	e002      	b.n	801215a <nk_fill_triangle+0x2e2>
            return;
 8012154:	bf00      	nop
 8012156:	e000      	b.n	801215a <nk_fill_triangle+0x2e2>
    if (!cmd) return;
 8012158:	bf00      	nop
}
 801215a:	3728      	adds	r7, #40	; 0x28
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	0802886c 	.word	0x0802886c
 8012164:	0802a74c 	.word	0x0802a74c
 8012168:	08028850 	.word	0x08028850

0801216c <nk_draw_image>:
    }
}
NK_API void
nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_image *img, struct nk_color col)
{
 801216c:	b590      	push	{r4, r7, lr}
 801216e:	b08b      	sub	sp, #44	; 0x2c
 8012170:	af00      	add	r7, sp, #0
 8012172:	61f8      	str	r0, [r7, #28]
 8012174:	eeb0 6a40 	vmov.f32	s12, s0
 8012178:	eef0 6a60 	vmov.f32	s13, s1
 801217c:	eeb0 7a41 	vmov.f32	s14, s2
 8012180:	eef0 7a61 	vmov.f32	s15, s3
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]
 8012188:	ed87 6a03 	vstr	s12, [r7, #12]
 801218c:	edc7 6a04 	vstr	s13, [r7, #16]
 8012190:	ed87 7a05 	vstr	s14, [r7, #20]
 8012194:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_command_image *cmd;
    NK_ASSERT(b);
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d106      	bne.n	80121ac <nk_draw_image+0x40>
 801219e:	4b69      	ldr	r3, [pc, #420]	; (8012344 <nk_draw_image+0x1d8>)
 80121a0:	4a69      	ldr	r2, [pc, #420]	; (8012348 <nk_draw_image+0x1dc>)
 80121a2:	f240 118f 	movw	r1, #399	; 0x18f
 80121a6:	4869      	ldr	r0, [pc, #420]	; (801234c <nk_draw_image+0x1e0>)
 80121a8:	f012 fca2 	bl	8024af0 <__assert_func>
    if (!b) return;
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	f000 80bf 	beq.w	8012332 <nk_draw_image+0x1c6>
    if (b->use_clipping) {
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	695b      	ldr	r3, [r3, #20]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d06f      	beq.n	801229c <nk_draw_image+0x130>
        const struct nk_rect *c = &b->clip;
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	3304      	adds	r3, #4
 80121c0:	627b      	str	r3, [r7, #36]	; 0x24
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 80121c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80121c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80121cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d0:	f000 80b1 	beq.w	8012336 <nk_draw_image+0x1ca>
 80121d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80121da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80121de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e2:	f000 80a8 	beq.w	8012336 <nk_draw_image+0x1ca>
 80121e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e8:	ed93 7a00 	vldr	s14, [r3]
 80121ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80121f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80121f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80121f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80121fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012200:	bf4c      	ite	mi
 8012202:	2301      	movmi	r3, #1
 8012204:	2300      	movpl	r3, #0
 8012206:	b2db      	uxtb	r3, r3
 8012208:	f083 0301 	eor.w	r3, r3, #1
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	f040 8091 	bne.w	8012336 <nk_draw_image+0x1ca>
 8012214:	ed97 7a03 	vldr	s14, [r7, #12]
 8012218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221a:	edd3 6a00 	vldr	s13, [r3]
 801221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012220:	edd3 7a02 	vldr	s15, [r3, #8]
 8012224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012230:	bf4c      	ite	mi
 8012232:	2301      	movmi	r3, #1
 8012234:	2300      	movpl	r3, #0
 8012236:	b2db      	uxtb	r3, r3
 8012238:	f083 0301 	eor.w	r3, r3, #1
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d179      	bne.n	8012336 <nk_draw_image+0x1ca>
 8012242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012244:	ed93 7a01 	vldr	s14, [r3, #4]
 8012248:	edd7 6a04 	vldr	s13, [r7, #16]
 801224c:	edd7 7a06 	vldr	s15, [r7, #24]
 8012250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225c:	bf4c      	ite	mi
 801225e:	2301      	movmi	r3, #1
 8012260:	2300      	movpl	r3, #0
 8012262:	b2db      	uxtb	r3, r3
 8012264:	f083 0301 	eor.w	r3, r3, #1
 8012268:	b2db      	uxtb	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	d163      	bne.n	8012336 <nk_draw_image+0x1ca>
 801226e:	ed97 7a04 	vldr	s14, [r7, #16]
 8012272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012274:	edd3 6a01 	vldr	s13, [r3, #4]
 8012278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227a:	edd3 7a03 	vldr	s15, [r3, #12]
 801227e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228a:	bf4c      	ite	mi
 801228c:	2301      	movmi	r3, #1
 801228e:	2300      	movpl	r3, #0
 8012290:	b2db      	uxtb	r3, r3
 8012292:	f083 0301 	eor.w	r3, r3, #1
 8012296:	b2db      	uxtb	r3, r3
 8012298:	2b00      	cmp	r3, #0
 801229a:	d14c      	bne.n	8012336 <nk_draw_image+0x1ca>
            return;
    }

    cmd = (struct nk_command_image*)
        nk_command_buffer_push(b, NK_COMMAND_IMAGE, sizeof(*cmd));
 801229c:	2224      	movs	r2, #36	; 0x24
 801229e:	2111      	movs	r1, #17
 80122a0:	69f8      	ldr	r0, [r7, #28]
 80122a2:	f7ff fa23 	bl	80116ec <nk_command_buffer_push>
 80122a6:	6238      	str	r0, [r7, #32]
    if (!cmd) return;
 80122a8:	6a3b      	ldr	r3, [r7, #32]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d045      	beq.n	801233a <nk_draw_image+0x1ce>
    cmd->x = (short)r.x;
 80122ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80122b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122b6:	ee17 3a90 	vmov	r3, s15
 80122ba:	b21a      	sxth	r2, r3
 80122bc:	6a3b      	ldr	r3, [r7, #32]
 80122be:	811a      	strh	r2, [r3, #8]
    cmd->y = (short)r.y;
 80122c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80122c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80122c8:	ee17 3a90 	vmov	r3, s15
 80122cc:	b21a      	sxth	r2, r3
 80122ce:	6a3b      	ldr	r3, [r7, #32]
 80122d0:	815a      	strh	r2, [r3, #10]
    cmd->w = (unsigned short)NK_MAX(0, r.w);
 80122d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80122d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122de:	dd07      	ble.n	80122f0 <nk_draw_image+0x184>
 80122e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80122e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122e8:	ee17 3a90 	vmov	r3, s15
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	e000      	b.n	80122f2 <nk_draw_image+0x186>
 80122f0:	2200      	movs	r2, #0
 80122f2:	6a3b      	ldr	r3, [r7, #32]
 80122f4:	819a      	strh	r2, [r3, #12]
    cmd->h = (unsigned short)NK_MAX(0, r.h);
 80122f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80122fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012302:	dd07      	ble.n	8012314 <nk_draw_image+0x1a8>
 8012304:	edd7 7a06 	vldr	s15, [r7, #24]
 8012308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801230c:	ee17 3a90 	vmov	r3, s15
 8012310:	b29a      	uxth	r2, r3
 8012312:	e000      	b.n	8012316 <nk_draw_image+0x1aa>
 8012314:	2200      	movs	r2, #0
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	81da      	strh	r2, [r3, #14]
    cmd->img = *img;
 801231a:	6a3b      	ldr	r3, [r7, #32]
 801231c:	68ba      	ldr	r2, [r7, #8]
 801231e:	f103 0410 	add.w	r4, r3, #16
 8012322:	4613      	mov	r3, r2
 8012324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cmd->col = col;
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	621a      	str	r2, [r3, #32]
 8012330:	e004      	b.n	801233c <nk_draw_image+0x1d0>
    if (!b) return;
 8012332:	bf00      	nop
 8012334:	e002      	b.n	801233c <nk_draw_image+0x1d0>
            return;
 8012336:	bf00      	nop
 8012338:	e000      	b.n	801233c <nk_draw_image+0x1d0>
    if (!cmd) return;
 801233a:	bf00      	nop
}
 801233c:	372c      	adds	r7, #44	; 0x2c
 801233e:	46bd      	mov	sp, r7
 8012340:	bd90      	pop	{r4, r7, pc}
 8012342:	bf00      	nop
 8012344:	0802886c 	.word	0x0802886c
 8012348:	0802a760 	.word	0x0802a760
 801234c:	08028850 	.word	0x08028850

08012350 <nk_draw_nine_slice>:
NK_API void
nk_draw_nine_slice(struct nk_command_buffer *b, struct nk_rect r,
    const struct nk_nine_slice *slc, struct nk_color col)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b0b4      	sub	sp, #208	; 0xd0
 8012354:	af00      	add	r7, sp, #0
 8012356:	61f8      	str	r0, [r7, #28]
 8012358:	eeb0 6a40 	vmov.f32	s12, s0
 801235c:	eef0 6a60 	vmov.f32	s13, s1
 8012360:	eeb0 7a41 	vmov.f32	s14, s2
 8012364:	eef0 7a61 	vmov.f32	s15, s3
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
 801236c:	ed87 6a03 	vstr	s12, [r7, #12]
 8012370:	edc7 6a04 	vstr	s13, [r7, #16]
 8012374:	ed87 7a05 	vstr	s14, [r7, #20]
 8012378:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_image img;
    const struct nk_image *slcimg = (const struct nk_image*)slc;
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    nk_ushort rgnX, rgnY, rgnW, rgnH;
    rgnX = slcimg->region[0];
 8012382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012386:	891b      	ldrh	r3, [r3, #8]
 8012388:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
    rgnY = slcimg->region[1];
 801238c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012390:	895b      	ldrh	r3, [r3, #10]
 8012392:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
    rgnW = slcimg->region[2];
 8012396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801239a:	899b      	ldrh	r3, [r3, #12]
 801239c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    rgnH = slcimg->region[3];
 80123a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123a4:	89db      	ldrh	r3, [r3, #14]
 80123a6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

    /* top-left */
    img.handle = slcimg->handle;
 80123aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	627b      	str	r3, [r7, #36]	; 0x24
    img.w = slcimg->w;
 80123b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123b6:	889b      	ldrh	r3, [r3, #4]
 80123b8:	853b      	strh	r3, [r7, #40]	; 0x28
    img.h = slcimg->h;
 80123ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123be:	88db      	ldrh	r3, [r3, #6]
 80123c0:	857b      	strh	r3, [r7, #42]	; 0x2a
    img.region[0] = rgnX;
 80123c2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80123c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    img.region[1] = rgnY;
 80123c8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80123cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    img.region[2] = slc->l;
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	8a1b      	ldrh	r3, [r3, #16]
 80123d2:	863b      	strh	r3, [r7, #48]	; 0x30
    img.region[3] = slc->t;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	8a5b      	ldrh	r3, [r3, #18]
 80123d8:	867b      	strh	r3, [r7, #50]	; 0x32

    nk_draw_image(b,
 80123da:	edd7 7a03 	vldr	s15, [r7, #12]
 80123de:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 80123e6:	ee06 3a90 	vmov	s13, r3
 80123ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x, r.y, (float)slc->l, (float)slc->t),
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80123f2:	ee06 3a10 	vmov	s12, r3
 80123f6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80123fa:	eef0 1a46 	vmov.f32	s3, s12
 80123fe:	eeb0 1a66 	vmov.f32	s2, s13
 8012402:	eef0 0a47 	vmov.f32	s1, s14
 8012406:	eeb0 0a67 	vmov.f32	s0, s15
 801240a:	f004 fa1b 	bl	8016844 <nk_rect>
 801240e:	eeb0 6a40 	vmov.f32	s12, s0
 8012412:	eef0 6a60 	vmov.f32	s13, s1
 8012416:	eeb0 7a41 	vmov.f32	s14, s2
 801241a:	eef0 7a61 	vmov.f32	s15, s3
 801241e:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 8012422:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8012426:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 801242a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 801242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012432:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8012436:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 801243a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801243e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	4619      	mov	r1, r3
 8012446:	eeb0 0a46 	vmov.f32	s0, s12
 801244a:	eef0 0a66 	vmov.f32	s1, s13
 801244e:	eeb0 1a47 	vmov.f32	s2, s14
 8012452:	eef0 1a67 	vmov.f32	s3, s15
 8012456:	69f8      	ldr	r0, [r7, #28]
 8012458:	f7ff fe88 	bl	801216c <nk_draw_image>
        &img, col);

#define IMG_RGN(x, y, w, h) img.region[0] = (nk_ushort)(x); img.region[1] = (nk_ushort)(y); img.region[2] = (nk_ushort)(w); img.region[3] = (nk_ushort)(h);

    /* top-center */
    IMG_RGN(rgnX + slc->l, rgnY, rgnW - slc->l - slc->r, slc->t);
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	8a1a      	ldrh	r2, [r3, #16]
 8012460:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8012464:	4413      	add	r3, r2
 8012466:	b29b      	uxth	r3, r3
 8012468:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801246a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 801246e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	8a1b      	ldrh	r3, [r3, #16]
 8012474:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	b29a      	uxth	r2, r3
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	8a9b      	ldrh	r3, [r3, #20]
 8012480:	1ad3      	subs	r3, r2, r3
 8012482:	b29b      	uxth	r3, r3
 8012484:	863b      	strh	r3, [r7, #48]	; 0x30
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	8a5b      	ldrh	r3, [r3, #18]
 801248a:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 801248c:	ed97 7a03 	vldr	s14, [r7, #12]
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	8a1b      	ldrh	r3, [r3, #16]
 8012494:	ee07 3a90 	vmov	s15, r3
 8012498:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801249c:	ee77 6a27 	vadd.f32	s13, s14, s15
 80124a0:	ed97 6a04 	vldr	s12, [r7, #16]
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 80124a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	8a1b      	ldrh	r3, [r3, #16]
 80124ac:	ee07 3a90 	vmov	s15, r3
 80124b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	8a9b      	ldrh	r3, [r3, #20]
 80124bc:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 80124c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124c4:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y, (float)(r.w - slc->l - slc->r), (float)slc->t),
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 80124cc:	ee07 3a10 	vmov	s14, r3
 80124d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80124d4:	eef0 1a47 	vmov.f32	s3, s14
 80124d8:	eeb0 1a67 	vmov.f32	s2, s15
 80124dc:	eef0 0a46 	vmov.f32	s1, s12
 80124e0:	eeb0 0a66 	vmov.f32	s0, s13
 80124e4:	f004 f9ae 	bl	8016844 <nk_rect>
 80124e8:	eeb0 6a40 	vmov.f32	s12, s0
 80124ec:	eef0 6a60 	vmov.f32	s13, s1
 80124f0:	eeb0 7a41 	vmov.f32	s14, s2
 80124f4:	eef0 7a61 	vmov.f32	s15, s3
 80124f8:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 80124fc:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8012500:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8012504:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8012508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801250c:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8012510:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8012514:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012518:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	4619      	mov	r1, r3
 8012520:	eeb0 0a46 	vmov.f32	s0, s12
 8012524:	eef0 0a66 	vmov.f32	s1, s13
 8012528:	eeb0 1a47 	vmov.f32	s2, s14
 801252c:	eef0 1a67 	vmov.f32	s3, s15
 8012530:	69f8      	ldr	r0, [r7, #28]
 8012532:	f7ff fe1b 	bl	801216c <nk_draw_image>
        &img, col);

    /* top-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY, slc->r, slc->t);
 8012536:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 801253a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 801253e:	4413      	add	r3, r2
 8012540:	b29a      	uxth	r2, r3
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	8a9b      	ldrh	r3, [r3, #20]
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	b29b      	uxth	r3, r3
 801254a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801254c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012550:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	8a9b      	ldrh	r3, [r3, #20]
 8012556:	863b      	strh	r3, [r7, #48]	; 0x30
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	8a5b      	ldrh	r3, [r3, #18]
 801255c:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 801255e:	ed97 7a03 	vldr	s14, [r7, #12]
 8012562:	edd7 7a05 	vldr	s15, [r7, #20]
 8012566:	ee37 7a27 	vadd.f32	s14, s14, s15
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	8a9b      	ldrh	r3, [r3, #20]
 801256e:	ee07 3a90 	vmov	s15, r3
 8012572:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012576:	ee77 7a67 	vsub.f32	s15, s14, s15
 801257a:	ed97 7a04 	vldr	s14, [r7, #16]
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012582:	ee06 3a90 	vmov	s13, r3
 8012586:	eef8 6a66 	vcvt.f32.u32	s13, s13
        nk_rect(r.x + r.w - (float)slc->r, r.y, (float)slc->r, (float)slc->t),
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	8a5b      	ldrh	r3, [r3, #18]
    nk_draw_image(b,
 801258e:	ee06 3a10 	vmov	s12, r3
 8012592:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012596:	eef0 1a46 	vmov.f32	s3, s12
 801259a:	eeb0 1a66 	vmov.f32	s2, s13
 801259e:	eef0 0a47 	vmov.f32	s1, s14
 80125a2:	eeb0 0a67 	vmov.f32	s0, s15
 80125a6:	f004 f94d 	bl	8016844 <nk_rect>
 80125aa:	eeb0 6a40 	vmov.f32	s12, s0
 80125ae:	eef0 6a60 	vmov.f32	s13, s1
 80125b2:	eeb0 7a41 	vmov.f32	s14, s2
 80125b6:	eef0 7a61 	vmov.f32	s15, s3
 80125ba:	ed87 6a15 	vstr	s12, [r7, #84]	; 0x54
 80125be:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80125c2:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80125c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80125ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125ce:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80125d2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80125d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80125da:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	4619      	mov	r1, r3
 80125e2:	eeb0 0a46 	vmov.f32	s0, s12
 80125e6:	eef0 0a66 	vmov.f32	s1, s13
 80125ea:	eeb0 1a47 	vmov.f32	s2, s14
 80125ee:	eef0 1a67 	vmov.f32	s3, s15
 80125f2:	69f8      	ldr	r0, [r7, #28]
 80125f4:	f7ff fdba 	bl	801216c <nk_draw_image>
        &img, col);

    /* center-left */
    IMG_RGN(rgnX, rgnY + slc->t, slc->l, rgnH - slc->t - slc->b);
 80125f8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80125fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	8a5a      	ldrh	r2, [r3, #18]
 8012602:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8012606:	4413      	add	r3, r2
 8012608:	b29b      	uxth	r3, r3
 801260a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	8a1b      	ldrh	r3, [r3, #16]
 8012610:	863b      	strh	r3, [r7, #48]	; 0x30
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	8a5b      	ldrh	r3, [r3, #18]
 8012616:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	b29a      	uxth	r2, r3
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	8adb      	ldrh	r3, [r3, #22]
 8012622:	1ad3      	subs	r3, r2, r3
 8012624:	b29b      	uxth	r3, r3
 8012626:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8012628:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 801262c:	ed97 7a04 	vldr	s14, [r7, #16]
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	8a5b      	ldrh	r3, [r3, #18]
 8012634:	ee07 3a90 	vmov	s15, r3
 8012638:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801263c:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 8012644:	ee07 3a90 	vmov	s15, r3
 8012648:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x, r.y + (float)slc->t, (float)slc->l, (float)(r.h - slc->t - slc->b)),
 801264c:	ed97 7a06 	vldr	s14, [r7, #24]
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	8a5b      	ldrh	r3, [r3, #18]
 8012654:	ee07 3a90 	vmov	s15, r3
 8012658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801265c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	8adb      	ldrh	r3, [r3, #22]
 8012664:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801266c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012670:	eef0 1a67 	vmov.f32	s3, s15
 8012674:	eeb0 1a65 	vmov.f32	s2, s11
 8012678:	eef0 0a46 	vmov.f32	s1, s12
 801267c:	eeb0 0a66 	vmov.f32	s0, s13
 8012680:	f004 f8e0 	bl	8016844 <nk_rect>
 8012684:	eeb0 6a40 	vmov.f32	s12, s0
 8012688:	eef0 6a60 	vmov.f32	s13, s1
 801268c:	eeb0 7a41 	vmov.f32	s14, s2
 8012690:	eef0 7a61 	vmov.f32	s15, s3
 8012694:	ed87 6a19 	vstr	s12, [r7, #100]	; 0x64
 8012698:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 801269c:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 80126a0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80126a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126a8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80126ac:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80126b0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80126b4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	4619      	mov	r1, r3
 80126bc:	eeb0 0a46 	vmov.f32	s0, s12
 80126c0:	eef0 0a66 	vmov.f32	s1, s13
 80126c4:	eeb0 1a47 	vmov.f32	s2, s14
 80126c8:	eef0 1a67 	vmov.f32	s3, s15
 80126cc:	69f8      	ldr	r0, [r7, #28]
 80126ce:	f7ff fd4d 	bl	801216c <nk_draw_image>
        &img, col);

    /* center */
    IMG_RGN(rgnX + slc->l, rgnY + slc->t, rgnW - slc->l - slc->r, rgnH - slc->t - slc->b);
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	8a1a      	ldrh	r2, [r3, #16]
 80126d6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80126da:	4413      	add	r3, r2
 80126dc:	b29b      	uxth	r3, r3
 80126de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	8a5a      	ldrh	r2, [r3, #18]
 80126e4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80126e8:	4413      	add	r3, r2
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	8a1b      	ldrh	r3, [r3, #16]
 80126f2:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	8a9b      	ldrh	r3, [r3, #20]
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	b29b      	uxth	r3, r3
 8012702:	863b      	strh	r3, [r7, #48]	; 0x30
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	8a5b      	ldrh	r3, [r3, #18]
 8012708:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801270c:	1ad3      	subs	r3, r2, r3
 801270e:	b29a      	uxth	r2, r3
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	8adb      	ldrh	r3, [r3, #22]
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	b29b      	uxth	r3, r3
 8012718:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801271a:	ed97 7a03 	vldr	s14, [r7, #12]
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	8a1b      	ldrh	r3, [r3, #16]
 8012722:	ee07 3a90 	vmov	s15, r3
 8012726:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801272a:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 801272e:	ed97 7a04 	vldr	s14, [r7, #16]
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	8a5b      	ldrh	r3, [r3, #18]
 8012736:	ee07 3a90 	vmov	s15, r3
 801273a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 801273e:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012742:	ed97 7a05 	vldr	s14, [r7, #20]
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	8a1b      	ldrh	r3, [r3, #16]
 801274a:	ee07 3a90 	vmov	s15, r3
 801274e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	8a9b      	ldrh	r3, [r3, #20]
 801275a:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 801275e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012762:	ee77 5a67 	vsub.f32	s11, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + (float)slc->t, (float)(r.w - slc->l - slc->r), (float)(r.h - slc->t - slc->b)),
 8012766:	ed97 7a06 	vldr	s14, [r7, #24]
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	8a5b      	ldrh	r3, [r3, #18]
 801276e:	ee07 3a90 	vmov	s15, r3
 8012772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012776:	ee37 7a67 	vsub.f32	s14, s14, s15
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	8adb      	ldrh	r3, [r3, #22]
 801277e:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012786:	ee77 7a67 	vsub.f32	s15, s14, s15
 801278a:	eef0 1a67 	vmov.f32	s3, s15
 801278e:	eeb0 1a65 	vmov.f32	s2, s11
 8012792:	eef0 0a46 	vmov.f32	s1, s12
 8012796:	eeb0 0a66 	vmov.f32	s0, s13
 801279a:	f004 f853 	bl	8016844 <nk_rect>
 801279e:	eeb0 6a40 	vmov.f32	s12, s0
 80127a2:	eef0 6a60 	vmov.f32	s13, s1
 80127a6:	eeb0 7a41 	vmov.f32	s14, s2
 80127aa:	eef0 7a61 	vmov.f32	s15, s3
 80127ae:	ed87 6a1d 	vstr	s12, [r7, #116]	; 0x74
 80127b2:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 80127b6:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 80127ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 80127be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127c2:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 80127c6:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80127ca:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80127ce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	4619      	mov	r1, r3
 80127d6:	eeb0 0a46 	vmov.f32	s0, s12
 80127da:	eef0 0a66 	vmov.f32	s1, s13
 80127de:	eeb0 1a47 	vmov.f32	s2, s14
 80127e2:	eef0 1a67 	vmov.f32	s3, s15
 80127e6:	69f8      	ldr	r0, [r7, #28]
 80127e8:	f7ff fcc0 	bl	801216c <nk_draw_image>
        &img, col);

    /* center-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + slc->t, slc->r, rgnH - slc->t - slc->b);
 80127ec:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80127f0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80127f4:	4413      	add	r3, r2
 80127f6:	b29a      	uxth	r2, r3
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	8a9b      	ldrh	r3, [r3, #20]
 80127fc:	1ad3      	subs	r3, r2, r3
 80127fe:	b29b      	uxth	r3, r3
 8012800:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	8a5a      	ldrh	r2, [r3, #18]
 8012806:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 801280a:	4413      	add	r3, r2
 801280c:	b29b      	uxth	r3, r3
 801280e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	8a9b      	ldrh	r3, [r3, #20]
 8012814:	863b      	strh	r3, [r7, #48]	; 0x30
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	8a5b      	ldrh	r3, [r3, #18]
 801281a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	b29a      	uxth	r2, r3
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	8adb      	ldrh	r3, [r3, #22]
 8012826:	1ad3      	subs	r3, r2, r3
 8012828:	b29b      	uxth	r3, r3
 801282a:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 801282c:	ed97 7a03 	vldr	s14, [r7, #12]
 8012830:	edd7 7a05 	vldr	s15, [r7, #20]
 8012834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	8a9b      	ldrh	r3, [r3, #20]
 801283c:	ee07 3a90 	vmov	s15, r3
 8012840:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012844:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012848:	ed97 7a04 	vldr	s14, [r7, #16]
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	8a5b      	ldrh	r3, [r3, #18]
 8012850:	ee07 3a90 	vmov	s15, r3
 8012854:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012858:	ee37 6a27 	vadd.f32	s12, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012860:	ee07 3a90 	vmov	s15, r3
 8012864:	eef8 5a67 	vcvt.f32.u32	s11, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + (float)slc->t, (float)slc->r, (float)(r.h - slc->t - slc->b)),
 8012868:	ed97 7a06 	vldr	s14, [r7, #24]
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	8a5b      	ldrh	r3, [r3, #18]
 8012870:	ee07 3a90 	vmov	s15, r3
 8012874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012878:	ee37 7a67 	vsub.f32	s14, s14, s15
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	8adb      	ldrh	r3, [r3, #22]
 8012880:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012888:	ee77 7a67 	vsub.f32	s15, s14, s15
 801288c:	eef0 1a67 	vmov.f32	s3, s15
 8012890:	eeb0 1a65 	vmov.f32	s2, s11
 8012894:	eef0 0a46 	vmov.f32	s1, s12
 8012898:	eeb0 0a66 	vmov.f32	s0, s13
 801289c:	f003 ffd2 	bl	8016844 <nk_rect>
 80128a0:	eeb0 6a40 	vmov.f32	s12, s0
 80128a4:	eef0 6a60 	vmov.f32	s13, s1
 80128a8:	eeb0 7a41 	vmov.f32	s14, s2
 80128ac:	eef0 7a61 	vmov.f32	s15, s3
 80128b0:	ed87 6a21 	vstr	s12, [r7, #132]	; 0x84
 80128b4:	edc7 6a22 	vstr	s13, [r7, #136]	; 0x88
 80128b8:	ed87 7a23 	vstr	s14, [r7, #140]	; 0x8c
 80128bc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
 80128c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128c4:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80128c8:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80128cc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80128d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	4619      	mov	r1, r3
 80128d8:	eeb0 0a46 	vmov.f32	s0, s12
 80128dc:	eef0 0a66 	vmov.f32	s1, s13
 80128e0:	eeb0 1a47 	vmov.f32	s2, s14
 80128e4:	eef0 1a67 	vmov.f32	s3, s15
 80128e8:	69f8      	ldr	r0, [r7, #28]
 80128ea:	f7ff fc3f 	bl	801216c <nk_draw_image>
        &img, col);

    /* bottom-left */
    IMG_RGN(rgnX, rgnY + rgnH - slc->b, slc->l, slc->b);
 80128ee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80128f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80128f4:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80128f8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80128fc:	4413      	add	r3, r2
 80128fe:	b29a      	uxth	r2, r3
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	8adb      	ldrh	r3, [r3, #22]
 8012904:	1ad3      	subs	r3, r2, r3
 8012906:	b29b      	uxth	r3, r3
 8012908:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	8a1b      	ldrh	r3, [r3, #16]
 801290e:	863b      	strh	r3, [r7, #48]	; 0x30
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	8adb      	ldrh	r3, [r3, #22]
 8012914:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
 8012916:	edd7 6a03 	vldr	s13, [r7, #12]
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 801291a:	ed97 7a04 	vldr	s14, [r7, #16]
 801291e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	8adb      	ldrh	r3, [r3, #22]
 801292a:	ee07 3a90 	vmov	s15, r3
 801292e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012932:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	8a1b      	ldrh	r3, [r3, #16]
    nk_draw_image(b,
 801293a:	ee07 3a10 	vmov	s14, r3
 801293e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x, r.y + r.h - (float)slc->b, (float)slc->l, (float)slc->b),
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012946:	ee06 3a10 	vmov	s12, r3
 801294a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801294e:	eef0 1a46 	vmov.f32	s3, s12
 8012952:	eeb0 1a47 	vmov.f32	s2, s14
 8012956:	eef0 0a67 	vmov.f32	s1, s15
 801295a:	eeb0 0a66 	vmov.f32	s0, s13
 801295e:	f003 ff71 	bl	8016844 <nk_rect>
 8012962:	eeb0 6a40 	vmov.f32	s12, s0
 8012966:	eef0 6a60 	vmov.f32	s13, s1
 801296a:	eeb0 7a41 	vmov.f32	s14, s2
 801296e:	eef0 7a61 	vmov.f32	s15, s3
 8012972:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 8012976:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 801297a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 801297e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8012982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012986:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 801298a:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 801298e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8012992:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8012996:	687a      	ldr	r2, [r7, #4]
 8012998:	4619      	mov	r1, r3
 801299a:	eeb0 0a46 	vmov.f32	s0, s12
 801299e:	eef0 0a66 	vmov.f32	s1, s13
 80129a2:	eeb0 1a47 	vmov.f32	s2, s14
 80129a6:	eef0 1a67 	vmov.f32	s3, s15
 80129aa:	69f8      	ldr	r0, [r7, #28]
 80129ac:	f7ff fbde 	bl	801216c <nk_draw_image>
        &img, col);

    /* bottom-center */
    IMG_RGN(rgnX + slc->l, rgnY + rgnH - slc->b, rgnW - slc->l - slc->r, slc->b);
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	8a1a      	ldrh	r2, [r3, #16]
 80129b4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80129b8:	4413      	add	r3, r2
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80129be:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80129c2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80129c6:	4413      	add	r3, r2
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	8adb      	ldrh	r3, [r3, #22]
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	8a1b      	ldrh	r3, [r3, #16]
 80129d8:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80129dc:	1ad3      	subs	r3, r2, r3
 80129de:	b29a      	uxth	r2, r3
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	8a9b      	ldrh	r3, [r3, #20]
 80129e4:	1ad3      	subs	r3, r2, r3
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	863b      	strh	r3, [r7, #48]	; 0x30
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	8adb      	ldrh	r3, [r3, #22]
 80129ee:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 80129f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	8a1b      	ldrh	r3, [r3, #16]
 80129f8:	ee07 3a90 	vmov	s15, r3
 80129fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012a00:	ee77 6a27 	vadd.f32	s13, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a04:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a08:	edd7 7a06 	vldr	s15, [r7, #24]
 8012a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	8adb      	ldrh	r3, [r3, #22]
 8012a14:	ee07 3a90 	vmov	s15, r3
 8012a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012a1c:	ee37 6a67 	vsub.f32	s12, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a20:	ed97 7a05 	vldr	s14, [r7, #20]
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	8a1b      	ldrh	r3, [r3, #16]
 8012a28:	ee07 3a90 	vmov	s15, r3
 8012a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	8a9b      	ldrh	r3, [r3, #20]
 8012a38:	ee07 3a90 	vmov	s15, r3
    nk_draw_image(b,
 8012a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a40:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + (float)slc->l, r.y + r.h - (float)slc->b, (float)(r.w - slc->l - slc->r), (float)slc->b),
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012a48:	ee07 3a10 	vmov	s14, r3
 8012a4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012a50:	eef0 1a47 	vmov.f32	s3, s14
 8012a54:	eeb0 1a67 	vmov.f32	s2, s15
 8012a58:	eef0 0a46 	vmov.f32	s1, s12
 8012a5c:	eeb0 0a66 	vmov.f32	s0, s13
 8012a60:	f003 fef0 	bl	8016844 <nk_rect>
 8012a64:	eeb0 6a40 	vmov.f32	s12, s0
 8012a68:	eef0 6a60 	vmov.f32	s13, s1
 8012a6c:	eeb0 7a41 	vmov.f32	s14, s2
 8012a70:	eef0 7a61 	vmov.f32	s15, s3
 8012a74:	ed87 6a29 	vstr	s12, [r7, #164]	; 0xa4
 8012a78:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 8012a7c:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 8012a80:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8012a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a88:	ed97 6a29 	vldr	s12, [r7, #164]	; 0xa4
 8012a8c:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8012a90:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8012a94:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	eeb0 0a46 	vmov.f32	s0, s12
 8012aa0:	eef0 0a66 	vmov.f32	s1, s13
 8012aa4:	eeb0 1a47 	vmov.f32	s2, s14
 8012aa8:	eef0 1a67 	vmov.f32	s3, s15
 8012aac:	69f8      	ldr	r0, [r7, #28]
 8012aae:	f7ff fb5d 	bl	801216c <nk_draw_image>
        &img, col);

    /* bottom-right */
    IMG_RGN(rgnX + rgnW - slc->r, rgnY + rgnH - slc->b, slc->r, slc->b);
 8012ab2:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8012ab6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8012aba:	4413      	add	r3, r2
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	8a9b      	ldrh	r3, [r3, #20]
 8012ac2:	1ad3      	subs	r3, r2, r3
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012ac8:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8012acc:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8012ad0:	4413      	add	r3, r2
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	8adb      	ldrh	r3, [r3, #22]
 8012ad8:	1ad3      	subs	r3, r2, r3
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	8a9b      	ldrh	r3, [r3, #20]
 8012ae2:	863b      	strh	r3, [r7, #48]	; 0x30
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	8adb      	ldrh	r3, [r3, #22]
 8012ae8:	867b      	strh	r3, [r7, #50]	; 0x32
    nk_draw_image(b,
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012aea:	ed97 7a03 	vldr	s14, [r7, #12]
 8012aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8012af2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	8a9b      	ldrh	r3, [r3, #20]
 8012afa:	ee07 3a90 	vmov	s15, r3
 8012afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012b02:	ee77 6a67 	vsub.f32	s13, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b06:	ed97 7a04 	vldr	s14, [r7, #16]
 8012b0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8012b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	8adb      	ldrh	r3, [r3, #22]
 8012b16:	ee07 3a90 	vmov	s15, r3
 8012b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    nk_draw_image(b,
 8012b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	8a9b      	ldrh	r3, [r3, #20]
    nk_draw_image(b,
 8012b26:	ee07 3a10 	vmov	s14, r3
 8012b2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        nk_rect(r.x + r.w - (float)slc->r, r.y + r.h - (float)slc->b, (float)slc->r, (float)slc->b),
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	8adb      	ldrh	r3, [r3, #22]
    nk_draw_image(b,
 8012b32:	ee06 3a10 	vmov	s12, r3
 8012b36:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8012b3a:	eef0 1a46 	vmov.f32	s3, s12
 8012b3e:	eeb0 1a47 	vmov.f32	s2, s14
 8012b42:	eef0 0a67 	vmov.f32	s1, s15
 8012b46:	eeb0 0a66 	vmov.f32	s0, s13
 8012b4a:	f003 fe7b 	bl	8016844 <nk_rect>
 8012b4e:	eeb0 6a40 	vmov.f32	s12, s0
 8012b52:	eef0 6a60 	vmov.f32	s13, s1
 8012b56:	eeb0 7a41 	vmov.f32	s14, s2
 8012b5a:	eef0 7a61 	vmov.f32	s15, s3
 8012b5e:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8012b62:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8012b66:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8012b6a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8012b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b72:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8012b76:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8012b7a:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8012b7e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	4619      	mov	r1, r3
 8012b86:	eeb0 0a46 	vmov.f32	s0, s12
 8012b8a:	eef0 0a66 	vmov.f32	s1, s13
 8012b8e:	eeb0 1a47 	vmov.f32	s2, s14
 8012b92:	eef0 1a67 	vmov.f32	s3, s15
 8012b96:	69f8      	ldr	r0, [r7, #28]
 8012b98:	f7ff fae8 	bl	801216c <nk_draw_image>
        &img, col);

#undef IMG_RGN
}
 8012b9c:	bf00      	nop
 8012b9e:	37d0      	adds	r7, #208	; 0xd0
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <nk_draw_text>:
}
NK_API void
nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,
    const char *string, int length, const struct nk_user_font *font,
    struct nk_color bg, struct nk_color fg)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b092      	sub	sp, #72	; 0x48
 8012ba8:	af04      	add	r7, sp, #16
 8012baa:	61f8      	str	r0, [r7, #28]
 8012bac:	eeb0 6a40 	vmov.f32	s12, s0
 8012bb0:	eef0 6a60 	vmov.f32	s13, s1
 8012bb4:	eeb0 7a41 	vmov.f32	s14, s2
 8012bb8:	eef0 7a61 	vmov.f32	s15, s3
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
 8012bc0:	603b      	str	r3, [r7, #0]
 8012bc2:	ed87 6a03 	vstr	s12, [r7, #12]
 8012bc6:	edc7 6a04 	vstr	s13, [r7, #16]
 8012bca:	ed87 7a05 	vstr	s14, [r7, #20]
 8012bce:	edc7 7a06 	vstr	s15, [r7, #24]
    float text_width = 0;
 8012bd2:	f04f 0300 	mov.w	r3, #0
 8012bd6:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_command_text *cmd;

    NK_ASSERT(b);
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d106      	bne.n	8012bec <nk_draw_text+0x48>
 8012bde:	4b93      	ldr	r3, [pc, #588]	; (8012e2c <nk_draw_text+0x288>)
 8012be0:	4a93      	ldr	r2, [pc, #588]	; (8012e30 <nk_draw_text+0x28c>)
 8012be2:	f240 210d 	movw	r1, #525	; 0x20d
 8012be6:	4893      	ldr	r0, [pc, #588]	; (8012e34 <nk_draw_text+0x290>)
 8012be8:	f011 ff82 	bl	8024af0 <__assert_func>
    NK_ASSERT(font);
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d106      	bne.n	8012c00 <nk_draw_text+0x5c>
 8012bf2:	4b91      	ldr	r3, [pc, #580]	; (8012e38 <nk_draw_text+0x294>)
 8012bf4:	4a8e      	ldr	r2, [pc, #568]	; (8012e30 <nk_draw_text+0x28c>)
 8012bf6:	f240 210e 	movw	r1, #526	; 0x20e
 8012bfa:	488e      	ldr	r0, [pc, #568]	; (8012e34 <nk_draw_text+0x290>)
 8012bfc:	f011 ff78 	bl	8024af0 <__assert_func>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f000 8107 	beq.w	8012e16 <nk_draw_text+0x272>
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f000 8103 	beq.w	8012e16 <nk_draw_text+0x272>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f000 80ff 	beq.w	8012e16 <nk_draw_text+0x272>
 8012c18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d104      	bne.n	8012c2a <nk_draw_text+0x86>
 8012c20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f000 80f6 	beq.w	8012e16 <nk_draw_text+0x272>
    if (b->use_clipping) {
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	695b      	ldr	r3, [r3, #20]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d072      	beq.n	8012d18 <nk_draw_text+0x174>
        const struct nk_rect *c = &b->clip;
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	3304      	adds	r3, #4
 8012c36:	633b      	str	r3, [r7, #48]	; 0x30
        if (c->w == 0 || c->h == 0 || !NK_INTERSECT(r.x, r.y, r.w, r.h, c->x, c->y, c->w, c->h))
 8012c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c46:	f000 80e8 	beq.w	8012e1a <nk_draw_text+0x276>
 8012c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012c50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c58:	f000 80df 	beq.w	8012e1a <nk_draw_text+0x276>
 8012c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c5e:	ed93 7a00 	vldr	s14, [r3]
 8012c62:	edd7 6a03 	vldr	s13, [r7, #12]
 8012c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c76:	bf4c      	ite	mi
 8012c78:	2301      	movmi	r3, #1
 8012c7a:	2300      	movpl	r3, #0
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	f083 0301 	eor.w	r3, r3, #1
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f040 80c8 	bne.w	8012e1a <nk_draw_text+0x276>
 8012c8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c90:	edd3 6a00 	vldr	s13, [r3]
 8012c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c96:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca6:	bf4c      	ite	mi
 8012ca8:	2301      	movmi	r3, #1
 8012caa:	2300      	movpl	r3, #0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f083 0301 	eor.w	r3, r3, #1
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f040 80b0 	bne.w	8012e1a <nk_draw_text+0x276>
 8012cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8012cc0:	edd7 6a04 	vldr	s13, [r7, #16]
 8012cc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8012cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd4:	bf4c      	ite	mi
 8012cd6:	2301      	movmi	r3, #1
 8012cd8:	2300      	movpl	r3, #0
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	f083 0301 	eor.w	r3, r3, #1
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f040 8099 	bne.w	8012e1a <nk_draw_text+0x276>
 8012ce8:	ed97 7a04 	vldr	s14, [r7, #16]
 8012cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cee:	edd3 6a01 	vldr	s13, [r3, #4]
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8012cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d04:	bf4c      	ite	mi
 8012d06:	2301      	movmi	r3, #1
 8012d08:	2300      	movpl	r3, #0
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	f083 0301 	eor.w	r3, r3, #1
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f040 8081 	bne.w	8012e1a <nk_draw_text+0x276>
            return;
    }

    /* make sure text fits inside bounds */
    text_width = font->width(font->userdata, font->height, string, length);
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	683a      	ldr	r2, [r7, #0]
 8012d1e:	edd2 7a01 	vldr	s15, [r2, #4]
 8012d22:	6838      	ldr	r0, [r7, #0]
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	68b9      	ldr	r1, [r7, #8]
 8012d28:	eeb0 0a67 	vmov.f32	s0, s15
 8012d2c:	6800      	ldr	r0, [r0, #0]
 8012d2e:	4798      	blx	r3
 8012d30:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    if (text_width > r.w){
 8012d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8012d38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d44:	dd17      	ble.n	8012d76 <nk_draw_text+0x1d2>
        int glyphs = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	62bb      	str	r3, [r7, #40]	; 0x28
        float txt_width = (float)text_width;
 8012d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d4c:	627b      	str	r3, [r7, #36]	; 0x24
        length = nk_text_clamp(font, string, length, r.w, &glyphs, &txt_width, 0,0);
 8012d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012d52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012d56:	2300      	movs	r3, #0
 8012d58:	9302      	str	r3, [sp, #8]
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	4613      	mov	r3, r2
 8012d66:	eeb0 0a67 	vmov.f32	s0, s15
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	6838      	ldr	r0, [r7, #0]
 8012d70:	f010 f9f8 	bl	8023164 <nk_text_clamp>
 8012d74:	6078      	str	r0, [r7, #4]
    }

    if (!length) return;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d050      	beq.n	8012e1e <nk_draw_text+0x27a>
    cmd = (struct nk_command_text*)
        nk_command_buffer_push(b, NK_COMMAND_TEXT, sizeof(*cmd) + (nk_size)(length + 1));
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	3329      	adds	r3, #41	; 0x29
 8012d80:	461a      	mov	r2, r3
 8012d82:	2110      	movs	r1, #16
 8012d84:	69f8      	ldr	r0, [r7, #28]
 8012d86:	f7fe fcb1 	bl	80116ec <nk_command_buffer_push>
 8012d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (!cmd) return;
 8012d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d047      	beq.n	8012e22 <nk_draw_text+0x27e>
    cmd->x = (short)r.x;
 8012d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8012d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d9a:	ee17 3a90 	vmov	r3, s15
 8012d9e:	b21a      	sxth	r2, r3
 8012da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da2:	829a      	strh	r2, [r3, #20]
    cmd->y = (short)r.y;
 8012da4:	edd7 7a04 	vldr	s15, [r7, #16]
 8012da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dac:	ee17 3a90 	vmov	r3, s15
 8012db0:	b21a      	sxth	r2, r3
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	82da      	strh	r2, [r3, #22]
    cmd->w = (unsigned short)r.w;
 8012db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8012dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dbe:	ee17 3a90 	vmov	r3, s15
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc6:	831a      	strh	r2, [r3, #24]
    cmd->h = (unsigned short)r.h;
 8012dc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8012dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dd0:	ee17 3a90 	vmov	r3, s15
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd8:	835a      	strh	r2, [r3, #26]
    cmd->background = bg;
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012dde:	60da      	str	r2, [r3, #12]
    cmd->foreground = fg;
 8012de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012de4:	611a      	str	r2, [r3, #16]
    cmd->font = font;
 8012de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de8:	683a      	ldr	r2, [r7, #0]
 8012dea:	609a      	str	r2, [r3, #8]
    cmd->length = length;
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	621a      	str	r2, [r3, #32]
    cmd->height = font->height;
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	685a      	ldr	r2, [r3, #4]
 8012df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df8:	61da      	str	r2, [r3, #28]
    NK_MEMCPY(cmd->string, string, (nk_size)length);
 8012dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfc:	3324      	adds	r3, #36	; 0x24
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	68b9      	ldr	r1, [r7, #8]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f00f fafa 	bl	80223fc <nk_memcopy>
    cmd->string[length] = '\0';
 8012e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4413      	add	r3, r2
 8012e0e:	3324      	adds	r3, #36	; 0x24
 8012e10:	2200      	movs	r2, #0
 8012e12:	701a      	strb	r2, [r3, #0]
 8012e14:	e006      	b.n	8012e24 <nk_draw_text+0x280>
    if (!b || !string || !length || (bg.a == 0 && fg.a == 0)) return;
 8012e16:	bf00      	nop
 8012e18:	e004      	b.n	8012e24 <nk_draw_text+0x280>
            return;
 8012e1a:	bf00      	nop
 8012e1c:	e002      	b.n	8012e24 <nk_draw_text+0x280>
    if (!length) return;
 8012e1e:	bf00      	nop
 8012e20:	e000      	b.n	8012e24 <nk_draw_text+0x280>
    if (!cmd) return;
 8012e22:	bf00      	nop
}
 8012e24:	3738      	adds	r7, #56	; 0x38
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	0802886c 	.word	0x0802886c
 8012e30:	0802a770 	.word	0x0802a770
 8012e34:	08028850 	.word	0x08028850
 8012e38:	08028878 	.word	0x08028878

08012e3c <nk_filter_float>:
    if (unicode > 128) return nk_false;
    else return nk_true;
}
NK_API nk_bool
nk_filter_float(const struct nk_text_edit *box, nk_rune unicode)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
    NK_UNUSED(box);
    if ((unicode < '0' || unicode > '9') && unicode != '.' && unicode != '-')
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b2f      	cmp	r3, #47	; 0x2f
 8012e4a:	d902      	bls.n	8012e52 <nk_filter_float+0x16>
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	2b39      	cmp	r3, #57	; 0x39
 8012e50:	d907      	bls.n	8012e62 <nk_filter_float+0x26>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b2e      	cmp	r3, #46	; 0x2e
 8012e56:	d004      	beq.n	8012e62 <nk_filter_float+0x26>
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	2b2d      	cmp	r3, #45	; 0x2d
 8012e5c:	d001      	beq.n	8012e62 <nk_filter_float+0x26>
        return nk_false;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	e000      	b.n	8012e64 <nk_filter_float+0x28>
    else return nk_true;
 8012e62:	2301      	movs	r3, #1
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	370c      	adds	r7, #12
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr

08012e70 <nk_filter_decimal>:
NK_API nk_bool
nk_filter_decimal(const struct nk_text_edit *box, nk_rune unicode)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
    NK_UNUSED(box);
    if ((unicode < '0' || unicode > '9') && unicode != '-')
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	2b2f      	cmp	r3, #47	; 0x2f
 8012e7e:	d902      	bls.n	8012e86 <nk_filter_decimal+0x16>
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	2b39      	cmp	r3, #57	; 0x39
 8012e84:	d904      	bls.n	8012e90 <nk_filter_decimal+0x20>
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	2b2d      	cmp	r3, #45	; 0x2d
 8012e8a:	d001      	beq.n	8012e90 <nk_filter_decimal+0x20>
        return nk_false;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	e000      	b.n	8012e92 <nk_filter_decimal+0x22>
    else return nk_true;
 8012e90:	2301      	movs	r3, #1
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
	...

08012ea0 <nk_edit_draw_text>:
nk_edit_draw_text(struct nk_command_buffer *out,
    const struct nk_style_edit *style, float pos_x, float pos_y,
    float x_offset, const char *text, int byte_len, float row_height,
    const struct nk_user_font *font, struct nk_color background,
    struct nk_color foreground, nk_bool is_selected)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b09e      	sub	sp, #120	; 0x78
 8012ea4:	af02      	add	r7, sp, #8
 8012ea6:	61f8      	str	r0, [r7, #28]
 8012ea8:	61b9      	str	r1, [r7, #24]
 8012eaa:	ed87 0a05 	vstr	s0, [r7, #20]
 8012eae:	edc7 0a04 	vstr	s1, [r7, #16]
 8012eb2:	ed87 1a03 	vstr	s2, [r7, #12]
 8012eb6:	60ba      	str	r2, [r7, #8]
 8012eb8:	607b      	str	r3, [r7, #4]
 8012eba:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(out);
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d105      	bne.n	8012ed0 <nk_edit_draw_text+0x30>
 8012ec4:	4b73      	ldr	r3, [pc, #460]	; (8013094 <nk_edit_draw_text+0x1f4>)
 8012ec6:	4a74      	ldr	r2, [pc, #464]	; (8013098 <nk_edit_draw_text+0x1f8>)
 8012ec8:	214e      	movs	r1, #78	; 0x4e
 8012eca:	4874      	ldr	r0, [pc, #464]	; (801309c <nk_edit_draw_text+0x1fc>)
 8012ecc:	f011 fe10 	bl	8024af0 <__assert_func>
    NK_ASSERT(font);
 8012ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d105      	bne.n	8012ee2 <nk_edit_draw_text+0x42>
 8012ed6:	4b72      	ldr	r3, [pc, #456]	; (80130a0 <nk_edit_draw_text+0x200>)
 8012ed8:	4a6f      	ldr	r2, [pc, #444]	; (8013098 <nk_edit_draw_text+0x1f8>)
 8012eda:	214f      	movs	r1, #79	; 0x4f
 8012edc:	486f      	ldr	r0, [pc, #444]	; (801309c <nk_edit_draw_text+0x1fc>)
 8012ede:	f011 fe07 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d105      	bne.n	8012ef4 <nk_edit_draw_text+0x54>
 8012ee8:	4b6e      	ldr	r3, [pc, #440]	; (80130a4 <nk_edit_draw_text+0x204>)
 8012eea:	4a6b      	ldr	r2, [pc, #428]	; (8013098 <nk_edit_draw_text+0x1f8>)
 8012eec:	2150      	movs	r1, #80	; 0x50
 8012eee:	486b      	ldr	r0, [pc, #428]	; (801309c <nk_edit_draw_text+0x1fc>)
 8012ef0:	f011 fdfe 	bl	8024af0 <__assert_func>
    if (!text || !byte_len || !out || !style) return;
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f000 8164 	beq.w	80131c4 <nk_edit_draw_text+0x324>
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	f000 8160 	beq.w	80131c4 <nk_edit_draw_text+0x324>
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	f000 815c 	beq.w	80131c4 <nk_edit_draw_text+0x324>
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 8158 	beq.w	80131c4 <nk_edit_draw_text+0x324>

    {int glyph_len = 0;
 8012f14:	2300      	movs	r3, #0
 8012f16:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_rune unicode = 0;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	653b      	str	r3, [r7, #80]	; 0x50
    int text_len = 0;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	66bb      	str	r3, [r7, #104]	; 0x68
    float line_width = 0;
 8012f20:	f04f 0300 	mov.w	r3, #0
 8012f24:	667b      	str	r3, [r7, #100]	; 0x64
    float glyph_width;
    const char *line = text;
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	663b      	str	r3, [r7, #96]	; 0x60
    float line_offset = 0;
 8012f2a:	f04f 0300 	mov.w	r3, #0
 8012f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    int line_count = 0;
 8012f30:	2300      	movs	r3, #0
 8012f32:	65bb      	str	r3, [r7, #88]	; 0x58

    struct nk_text txt;
    txt.padding = nk_vec2(0,0);
 8012f34:	eddf 0a5c 	vldr	s1, [pc, #368]	; 80130a8 <nk_edit_draw_text+0x208>
 8012f38:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80130a8 <nk_edit_draw_text+0x208>
 8012f3c:	f003 fd34 	bl	80169a8 <nk_vec2>
 8012f40:	eeb0 7a40 	vmov.f32	s14, s0
 8012f44:	eef0 7a60 	vmov.f32	s15, s1
 8012f48:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8012f4c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    txt.background = background;
 8012f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012f52:	64bb      	str	r3, [r7, #72]	; 0x48
    txt.text = foreground;
 8012f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f58:	64fb      	str	r3, [r7, #76]	; 0x4c

    glyph_len = nk_utf_decode(text+text_len, &unicode, byte_len-text_len);
 8012f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	18d0      	adds	r0, r2, r3
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f64:	1ad2      	subs	r2, r2, r3
 8012f66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	f00f f91c 	bl	80221a8 <nk_utf_decode>
 8012f70:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (!glyph_len) return;
 8012f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f000 8127 	beq.w	80131c8 <nk_edit_draw_text+0x328>
    while ((text_len < byte_len) && glyph_len)
 8012f7a:	e0c0      	b.n	80130fe <nk_edit_draw_text+0x25e>
    {
        if (unicode == '\n') {
 8012f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f7e:	2b0a      	cmp	r3, #10
 8012f80:	d175      	bne.n	801306e <nk_edit_draw_text+0x1ce>
            /* new line separator so draw previous line */
            struct nk_rect label;
            label.y = pos_y + line_offset;
 8012f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8012f86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8012f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            label.h = row_height;
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	63fb      	str	r3, [r7, #60]	; 0x3c
            label.w = line_width;
 8012f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f98:	63bb      	str	r3, [r7, #56]	; 0x38
            label.x = pos_x;
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	633b      	str	r3, [r7, #48]	; 0x30
            if (!line_count)
 8012f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d107      	bne.n	8012fb4 <nk_edit_draw_text+0x114>
                label.x += x_offset;
 8012fa4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8012fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8012fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fb0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            if (is_selected) /* selection needs to draw different background color */
 8012fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d015      	beq.n	8012fe8 <nk_edit_draw_text+0x148>
                nk_fill_rect(out, label, 0, background);
 8012fbc:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8012fc0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8012fc4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012fc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8012fcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012fce:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80130a8 <nk_edit_draw_text+0x208>
 8012fd2:	eeb0 0a46 	vmov.f32	s0, s12
 8012fd6:	eef0 0a66 	vmov.f32	s1, s13
 8012fda:	eeb0 1a47 	vmov.f32	s2, s14
 8012fde:	eef0 1a67 	vmov.f32	s3, s15
 8012fe2:	69f8      	ldr	r0, [r7, #28]
 8012fe4:	f7fe fd68 	bl	8011ab8 <nk_fill_rect>
            nk_widget_text(out, label, line, (int)((text + text_len) - line),
 8012fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fea:	68ba      	ldr	r2, [r7, #8]
 8012fec:	441a      	add	r2, r3
 8012fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ff0:	1ad2      	subs	r2, r2, r3
 8012ff2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012ff6:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8012ffa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8012ffe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013002:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	2312      	movs	r3, #18
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	460b      	mov	r3, r1
 8013010:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013012:	eeb0 0a46 	vmov.f32	s0, s12
 8013016:	eef0 0a66 	vmov.f32	s1, s13
 801301a:	eeb0 1a47 	vmov.f32	s2, s14
 801301e:	eef0 1a67 	vmov.f32	s3, s15
 8013022:	69f8      	ldr	r0, [r7, #28]
 8013024:	f00c faae 	bl	801f584 <nk_widget_text>
                &txt, NK_TEXT_CENTERED, font);

            text_len++;
 8013028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801302a:	3301      	adds	r3, #1
 801302c:	66bb      	str	r3, [r7, #104]	; 0x68
            line_count++;
 801302e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013030:	3301      	adds	r3, #1
 8013032:	65bb      	str	r3, [r7, #88]	; 0x58
            line_width = 0;
 8013034:	f04f 0300 	mov.w	r3, #0
 8013038:	667b      	str	r3, [r7, #100]	; 0x64
            line = text + text_len;
 801303a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	4413      	add	r3, r2
 8013040:	663b      	str	r3, [r7, #96]	; 0x60
            line_offset += row_height;
 8013042:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013046:	edd7 7a00 	vldr	s15, [r7]
 801304a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801304e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            glyph_len = nk_utf_decode(text + text_len, &unicode, (int)(byte_len-text_len));
 8013052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013054:	68ba      	ldr	r2, [r7, #8]
 8013056:	18d0      	adds	r0, r2, r3
 8013058:	687a      	ldr	r2, [r7, #4]
 801305a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801305c:	1ad2      	subs	r2, r2, r3
 801305e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013062:	4619      	mov	r1, r3
 8013064:	f00f f8a0 	bl	80221a8 <nk_utf_decode>
 8013068:	66f8      	str	r0, [r7, #108]	; 0x6c
            continue;
 801306a:	bf00      	nop
 801306c:	e047      	b.n	80130fe <nk_edit_draw_text+0x25e>
        }
        if (unicode == '\r') {
 801306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013070:	2b0d      	cmp	r3, #13
 8013072:	d11b      	bne.n	80130ac <nk_edit_draw_text+0x20c>
            text_len++;
 8013074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013076:	3301      	adds	r3, #1
 8013078:	66bb      	str	r3, [r7, #104]	; 0x68
            glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);
 801307a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801307c:	68ba      	ldr	r2, [r7, #8]
 801307e:	18d0      	adds	r0, r2, r3
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013084:	1ad2      	subs	r2, r2, r3
 8013086:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801308a:	4619      	mov	r1, r3
 801308c:	f00f f88c 	bl	80221a8 <nk_utf_decode>
 8013090:	66f8      	str	r0, [r7, #108]	; 0x6c
            continue;
 8013092:	e034      	b.n	80130fe <nk_edit_draw_text+0x25e>
 8013094:	08028880 	.word	0x08028880
 8013098:	0802a784 	.word	0x0802a784
 801309c:	08028884 	.word	0x08028884
 80130a0:	080288a0 	.word	0x080288a0
 80130a4:	080288a8 	.word	0x080288a8
 80130a8:	00000000 	.word	0x00000000
        }
        glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);
 80130ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80130b2:	edd2 7a01 	vldr	s15, [r2, #4]
 80130b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130b8:	68b9      	ldr	r1, [r7, #8]
 80130ba:	4411      	add	r1, r2
 80130bc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80130be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80130c0:	eeb0 0a67 	vmov.f32	s0, s15
 80130c4:	6800      	ldr	r0, [r0, #0]
 80130c6:	4798      	blx	r3
 80130c8:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        line_width += (float)glyph_width;
 80130cc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80130d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80130d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130d8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        text_len += glyph_len;
 80130dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130e0:	4413      	add	r3, r2
 80130e2:	66bb      	str	r3, [r7, #104]	; 0x68
        glyph_len = nk_utf_decode(text + text_len, &unicode, byte_len-text_len);
 80130e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130e6:	68ba      	ldr	r2, [r7, #8]
 80130e8:	18d0      	adds	r0, r2, r3
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130ee:	1ad2      	subs	r2, r2, r3
 80130f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80130f4:	4619      	mov	r1, r3
 80130f6:	f00f f857 	bl	80221a8 <nk_utf_decode>
 80130fa:	66f8      	str	r0, [r7, #108]	; 0x6c
        continue;
 80130fc:	bf00      	nop
    while ((text_len < byte_len) && glyph_len)
 80130fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	429a      	cmp	r2, r3
 8013104:	da03      	bge.n	801310e <nk_edit_draw_text+0x26e>
 8013106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013108:	2b00      	cmp	r3, #0
 801310a:	f47f af37 	bne.w	8012f7c <nk_edit_draw_text+0xdc>
    }
    if (line_width > 0) {
 801310e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8013112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311a:	dd56      	ble.n	80131ca <nk_edit_draw_text+0x32a>
        /* draw last line */
        struct nk_rect label;
        label.y = pos_y + line_offset;
 801311c:	ed97 7a04 	vldr	s14, [r7, #16]
 8013120:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8013124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013128:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.h = row_height;
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	62fb      	str	r3, [r7, #44]	; 0x2c
        label.w = line_width;
 8013130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013132:	62bb      	str	r3, [r7, #40]	; 0x28
        label.x = pos_x;
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	623b      	str	r3, [r7, #32]
        if (!line_count)
 8013138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801313a:	2b00      	cmp	r3, #0
 801313c:	d107      	bne.n	801314e <nk_edit_draw_text+0x2ae>
            label.x += x_offset;
 801313e:	ed97 7a08 	vldr	s14, [r7, #32]
 8013142:	edd7 7a03 	vldr	s15, [r7, #12]
 8013146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801314a:	edc7 7a08 	vstr	s15, [r7, #32]

        if (is_selected)
 801314e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013152:	2b00      	cmp	r3, #0
 8013154:	d015      	beq.n	8013182 <nk_edit_draw_text+0x2e2>
            nk_fill_rect(out, label, 0, background);
 8013156:	ed97 6a08 	vldr	s12, [r7, #32]
 801315a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801315e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8013162:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013166:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013168:	ed1f 2a31 	vldr	s4, [pc, #-196]	; 80130a8 <nk_edit_draw_text+0x208>
 801316c:	eeb0 0a46 	vmov.f32	s0, s12
 8013170:	eef0 0a66 	vmov.f32	s1, s13
 8013174:	eeb0 1a47 	vmov.f32	s2, s14
 8013178:	eef0 1a67 	vmov.f32	s3, s15
 801317c:	69f8      	ldr	r0, [r7, #28]
 801317e:	f7fe fc9b 	bl	8011ab8 <nk_fill_rect>
        nk_widget_text(out, label, line, (int)((text + text_len) - line),
 8013182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013184:	68ba      	ldr	r2, [r7, #8]
 8013186:	441a      	add	r2, r3
 8013188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801318a:	1ad2      	subs	r2, r2, r3
 801318c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013190:	ed97 6a08 	vldr	s12, [r7, #32]
 8013194:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8013198:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801319c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80131a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80131a2:	9301      	str	r3, [sp, #4]
 80131a4:	2311      	movs	r3, #17
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	460b      	mov	r3, r1
 80131aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80131ac:	eeb0 0a46 	vmov.f32	s0, s12
 80131b0:	eef0 0a66 	vmov.f32	s1, s13
 80131b4:	eeb0 1a47 	vmov.f32	s2, s14
 80131b8:	eef0 1a67 	vmov.f32	s3, s15
 80131bc:	69f8      	ldr	r0, [r7, #28]
 80131be:	f00c f9e1 	bl	801f584 <nk_widget_text>
 80131c2:	e002      	b.n	80131ca <nk_edit_draw_text+0x32a>
    if (!text || !byte_len || !out || !style) return;
 80131c4:	bf00      	nop
 80131c6:	e000      	b.n	80131ca <nk_edit_draw_text+0x32a>
    if (!glyph_len) return;
 80131c8:	bf00      	nop
            &txt, NK_TEXT_LEFT, font);
    }}
}
 80131ca:	3770      	adds	r7, #112	; 0x70
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <nk_do_edit>:
NK_LIB nk_flags
nk_do_edit(nk_flags *state, struct nk_command_buffer *out,
    struct nk_rect bounds, nk_flags flags, nk_plugin_filter filter,
    struct nk_text_edit *edit, const struct nk_style_edit *style,
    struct nk_input *in, const struct nk_user_font *font)
{
 80131d0:	b590      	push	{r4, r7, lr}
 80131d2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80131d6:	af04      	add	r7, sp, #16
 80131d8:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80131dc:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 80131e0:	6020      	str	r0, [r4, #0]
 80131e2:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80131e6:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 80131ea:	6001      	str	r1, [r0, #0]
 80131ec:	eeb0 6a40 	vmov.f32	s12, s0
 80131f0:	eef0 6a60 	vmov.f32	s13, s1
 80131f4:	eeb0 7a41 	vmov.f32	s14, s2
 80131f8:	eef0 7a61 	vmov.f32	s15, s3
 80131fc:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8013200:	f5a1 71fc 	sub.w	r1, r1, #504	; 0x1f8
 8013204:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8013208:	f5a0 70fe 	sub.w	r0, r0, #508	; 0x1fc
 801320c:	6002      	str	r2, [r0, #0]
 801320e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8013212:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8013216:	6013      	str	r3, [r2, #0]
 8013218:	ed81 6a00 	vstr	s12, [r1]
 801321c:	edc1 6a01 	vstr	s13, [r1, #4]
 8013220:	ed81 7a02 	vstr	s14, [r1, #8]
 8013224:	edc1 7a03 	vstr	s15, [r1, #12]
    struct nk_rect area;
    nk_flags ret = 0;
 8013228:	2300      	movs	r3, #0
 801322a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    float row_height;
    char prev_state = 0;
 801322e:	2300      	movs	r3, #0
 8013230:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    char is_hovered = 0;
 8013234:	2300      	movs	r3, #0
 8013236:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
    char select_all = 0;
 801323a:	2300      	movs	r3, #0
 801323c:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
    char cursor_follow = 0;
 8013240:	2300      	movs	r3, #0
 8013242:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
    struct nk_rect old_clip;
    struct nk_rect clip;

    NK_ASSERT(state);
 8013246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801324a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d105      	bne.n	8013260 <nk_do_edit+0x90>
 8013254:	4bb7      	ldr	r3, [pc, #732]	; (8013534 <nk_do_edit+0x364>)
 8013256:	4ab8      	ldr	r2, [pc, #736]	; (8013538 <nk_do_edit+0x368>)
 8013258:	21a7      	movs	r1, #167	; 0xa7
 801325a:	48b8      	ldr	r0, [pc, #736]	; (801353c <nk_do_edit+0x36c>)
 801325c:	f011 fc48 	bl	8024af0 <__assert_func>
    NK_ASSERT(out);
 8013260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013264:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d105      	bne.n	801327a <nk_do_edit+0xaa>
 801326e:	4bb4      	ldr	r3, [pc, #720]	; (8013540 <nk_do_edit+0x370>)
 8013270:	4ab1      	ldr	r2, [pc, #708]	; (8013538 <nk_do_edit+0x368>)
 8013272:	21a8      	movs	r1, #168	; 0xa8
 8013274:	48b1      	ldr	r0, [pc, #708]	; (801353c <nk_do_edit+0x36c>)
 8013276:	f011 fc3b 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 801327a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801327e:	2b00      	cmp	r3, #0
 8013280:	d105      	bne.n	801328e <nk_do_edit+0xbe>
 8013282:	4bb0      	ldr	r3, [pc, #704]	; (8013544 <nk_do_edit+0x374>)
 8013284:	4aac      	ldr	r2, [pc, #688]	; (8013538 <nk_do_edit+0x368>)
 8013286:	21a9      	movs	r1, #169	; 0xa9
 8013288:	48ac      	ldr	r0, [pc, #688]	; (801353c <nk_do_edit+0x36c>)
 801328a:	f011 fc31 	bl	8024af0 <__assert_func>
    if (!state || !out || !style)
 801328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013292:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00a      	beq.n	80132b2 <nk_do_edit+0xe2>
 801329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132a0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d003      	beq.n	80132b2 <nk_do_edit+0xe2>
 80132aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d103      	bne.n	80132ba <nk_do_edit+0xea>
        return ret;
 80132b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80132b6:	f001 be10 	b.w	8014eda <nk_do_edit+0x1d0a>

    /* visible text area calculation */
    area.x = bounds.x + style->padding.x + style->border;
 80132ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132be:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80132c2:	ed93 7a00 	vldr	s14, [r3]
 80132c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132ca:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 80132ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132d6:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80132da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132de:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    area.y = bounds.y + style->padding.y + style->border;
 80132e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80132ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80132ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132f2:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 80132f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132fe:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8013302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013306:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
    area.w = bounds.w - (2.0f * style->padding.x + 2 * style->border);
 801330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801330e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013312:	ed93 7a02 	vldr	s14, [r3, #8]
 8013316:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801331a:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 801331e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8013322:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013326:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 801332a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013336:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    area.h = bounds.h - (2.0f * style->padding.y + 2 * style->border);
 801333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801333e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013342:	ed93 7a03 	vldr	s14, [r3, #12]
 8013346:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801334a:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 801334e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8013352:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013356:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 801335a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801335e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013366:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    if (flags & NK_EDIT_MULTILINE)
 801336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801336e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013378:	2b00      	cmp	r3, #0
 801337a:	d019      	beq.n	80133b0 <nk_do_edit+0x1e0>
        area.w = NK_MAX(0, area.w - style->scrollbar_size.x);
 801337c:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013380:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013384:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8013388:	ee77 7a67 	vsub.f32	s15, s14, s15
 801338c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013394:	dd08      	ble.n	80133a8 <nk_do_edit+0x1d8>
 8013396:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 801339a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801339e:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80133a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133a6:	e001      	b.n	80133ac <nk_do_edit+0x1dc>
 80133a8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8013548 <nk_do_edit+0x378>
 80133ac:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    row_height = (flags & NK_EDIT_MULTILINE)? font->height + style->row_padding: area.h;
 80133b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d00a      	beq.n	80133d8 <nk_do_edit+0x208>
 80133c2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80133c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80133ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80133ce:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 80133d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133d6:	e001      	b.n	80133dc <nk_do_edit+0x20c>
 80133d8:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80133dc:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8

    /* calculate clipping rectangle */
    old_clip = out->clip;
 80133e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80133ee:	3304      	adds	r3, #4
 80133f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &old_clip, area.x, area.y, area.x + area.w, area.y + area.h);
 80133f6:	edd7 6a4a 	vldr	s13, [r7, #296]	; 0x128
 80133fa:	ed97 6a4b 	vldr	s12, [r7, #300]	; 0x12c
 80133fe:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8013402:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8013406:	ee77 5a27 	vadd.f32	s11, s14, s15
 801340a:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 801340e:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8013412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013416:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801341a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801341e:	eef0 1a67 	vmov.f32	s3, s15
 8013422:	eeb0 1a65 	vmov.f32	s2, s11
 8013426:	eef0 0a46 	vmov.f32	s1, s12
 801342a:	eeb0 0a66 	vmov.f32	s0, s13
 801342e:	4611      	mov	r1, r2
 8013430:	4618      	mov	r0, r3
 8013432:	f003 fadb 	bl	80169ec <nk_unify>

    /* update edit state */
    prev_state = (char)edit->active;
 8013436:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801343a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801343e:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    is_hovered = (char)nk_input_is_mouse_hovering_rect(in, bounds);
 8013442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013446:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801344a:	ed93 6a00 	vldr	s12, [r3]
 801344e:	edd3 6a01 	vldr	s13, [r3, #4]
 8013452:	ed93 7a02 	vldr	s14, [r3, #8]
 8013456:	edd3 7a03 	vldr	s15, [r3, #12]
 801345a:	eeb0 0a46 	vmov.f32	s0, s12
 801345e:	eef0 0a66 	vmov.f32	s1, s13
 8013462:	eeb0 1a47 	vmov.f32	s2, s14
 8013466:	eef0 1a67 	vmov.f32	s3, s15
 801346a:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 801346e:	f002 f807 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 8013472:	4603      	mov	r3, r0
 8013474:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
    if (in && in->mouse.buttons[NK_BUTTON_LEFT].clicked && in->mouse.buttons[NK_BUTTON_LEFT].down) {
 8013478:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801347c:	2b00      	cmp	r3, #0
 801347e:	d06b      	beq.n	8013558 <nk_do_edit+0x388>
 8013480:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013484:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013488:	2b00      	cmp	r3, #0
 801348a:	d065      	beq.n	8013558 <nk_do_edit+0x388>
 801348c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013490:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013494:	2b00      	cmp	r3, #0
 8013496:	d05f      	beq.n	8013558 <nk_do_edit+0x388>
        edit->active = NK_INBOX(in->mouse.pos.x, in->mouse.pos.y,
 8013498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801349c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134a0:	ed93 7a00 	vldr	s14, [r3]
 80134a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80134a8:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80134ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134b4:	d84a      	bhi.n	801354c <nk_do_edit+0x37c>
 80134b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80134ba:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80134be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134c6:	edd3 6a00 	vldr	s13, [r3]
 80134ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134ce:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80134d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80134da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e2:	d533      	bpl.n	801354c <nk_do_edit+0x37c>
 80134e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80134ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80134f0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80134f4:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80134f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013500:	d824      	bhi.n	801354c <nk_do_edit+0x37c>
 8013502:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013506:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 801350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801350e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013512:	edd3 6a01 	vldr	s13, [r3, #4]
 8013516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801351a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801351e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352e:	d50d      	bpl.n	801354c <nk_do_edit+0x37c>
 8013530:	2301      	movs	r3, #1
 8013532:	e00c      	b.n	801354e <nk_do_edit+0x37e>
 8013534:	080288b0 	.word	0x080288b0
 8013538:	0802a798 	.word	0x0802a798
 801353c:	08028884 	.word	0x08028884
 8013540:	08028880 	.word	0x08028880
 8013544:	080288a8 	.word	0x080288a8
 8013548:	00000000 	.word	0x00000000
 801354c:	2300      	movs	r3, #0
 801354e:	b2da      	uxtb	r2, r3
 8013550:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013554:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                bounds.x, bounds.y, bounds.w, bounds.h);
    }

    /* (de)activate text editor */
    if (!prev_state && edit->active) {
 8013558:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 801355c:	2b00      	cmp	r3, #0
 801355e:	d150      	bne.n	8013602 <nk_do_edit+0x432>
 8013560:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013564:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013568:	2b00      	cmp	r3, #0
 801356a:	d04a      	beq.n	8013602 <nk_do_edit+0x432>
        const enum nk_text_edit_type type = (flags & NK_EDIT_MULTILINE) ?
            NK_TEXT_EDIT_MULTI_LINE: NK_TEXT_EDIT_SINGLE_LINE;
 801356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	0a9b      	lsrs	r3, r3, #10
 8013578:	b2db      	uxtb	r3, r3
        const enum nk_text_edit_type type = (flags & NK_EDIT_MULTILINE) ?
 801357a:	f003 0301 	and.w	r3, r3, #1
 801357e:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
        /* keep scroll position when re-activating edit widget */
        struct nk_vec2 oldscrollbar = edit->scrollbar;
 8013582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013586:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 801358a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801358e:	3350      	adds	r3, #80	; 0x50
 8013590:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013594:	e882 0003 	stmia.w	r2, {r0, r1}
        nk_textedit_clear_state(edit, type, filter);
 8013598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801359c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80135a0:	f897 11b7 	ldrb.w	r1, [r7, #439]	; 0x1b7
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80135aa:	f00e f885 	bl	80216b8 <nk_textedit_clear_state>
        edit->scrollbar = oldscrollbar;
 80135ae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80135b6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80135ba:	3350      	adds	r3, #80	; 0x50
 80135bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135c0:	e883 0003 	stmia.w	r3, {r0, r1}
        if (flags & NK_EDIT_AUTO_SELECT)
 80135c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f003 0302 	and.w	r3, r3, #2
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d002      	beq.n	80135dc <nk_do_edit+0x40c>
            select_all = nk_true;
 80135d6:	2301      	movs	r3, #1
 80135d8:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
        if (flags & NK_EDIT_GOTO_END_ON_ACTIVATE) {
 80135dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d015      	beq.n	801361a <nk_do_edit+0x44a>
            edit->cursor = edit->string.len;
 80135ee:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80135f4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80135f8:	659a      	str	r2, [r3, #88]	; 0x58
            in = 0;
 80135fa:	2300      	movs	r3, #0
 80135fc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    if (!prev_state && edit->active) {
 8013600:	e00b      	b.n	801361a <nk_do_edit+0x44a>
        }
    } else if (!edit->active) edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 8013602:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013606:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801360a:	2b00      	cmp	r3, #0
 801360c:	d106      	bne.n	801361c <nk_do_edit+0x44c>
 801360e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013612:	2200      	movs	r2, #0
 8013614:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013618:	e000      	b.n	801361c <nk_do_edit+0x44c>
    if (!prev_state && edit->active) {
 801361a:	bf00      	nop
    if (flags & NK_EDIT_READ_ONLY)
 801361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f003 0301 	and.w	r3, r3, #1
 801362a:	2b00      	cmp	r3, #0
 801362c:	d005      	beq.n	801363a <nk_do_edit+0x46a>
        edit->mode = NK_TEXT_EDIT_MODE_VIEW;
 801362e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013632:	2200      	movs	r2, #0
 8013634:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013638:	e00d      	b.n	8013656 <nk_do_edit+0x486>
    else if (flags & NK_EDIT_ALWAYS_INSERT_MODE)
 801363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801363e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013648:	2b00      	cmp	r3, #0
 801364a:	d004      	beq.n	8013656 <nk_do_edit+0x486>
        edit->mode = NK_TEXT_EDIT_MODE_INSERT;
 801364c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013650:	2201      	movs	r2, #1
 8013652:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    ret = (edit->active) ? NK_EDIT_ACTIVE: NK_EDIT_INACTIVE;
 8013656:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801365a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801365e:	2b00      	cmp	r3, #0
 8013660:	d001      	beq.n	8013666 <nk_do_edit+0x496>
 8013662:	2301      	movs	r3, #1
 8013664:	e000      	b.n	8013668 <nk_do_edit+0x498>
 8013666:	2302      	movs	r3, #2
 8013668:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    if (prev_state != edit->active)
 801366c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013670:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013674:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
 8013678:	429a      	cmp	r2, r3
 801367a:	d00d      	beq.n	8013698 <nk_do_edit+0x4c8>
        ret |= (edit->active) ? NK_EDIT_ACTIVATED: NK_EDIT_DEACTIVATED;
 801367c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013680:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013684:	2b00      	cmp	r3, #0
 8013686:	d001      	beq.n	801368c <nk_do_edit+0x4bc>
 8013688:	2304      	movs	r3, #4
 801368a:	e000      	b.n	801368e <nk_do_edit+0x4be>
 801368c:	2308      	movs	r3, #8
 801368e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8013692:	4313      	orrs	r3, r2
 8013694:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    /* handle user input */
    if (edit->active && in)
 8013698:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801369c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f000 820a 	beq.w	8013aba <nk_do_edit+0x8ea>
 80136a6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f000 8205 	beq.w	8013aba <nk_do_edit+0x8ea>
    {
        int shift_mod = in->keyboard.keys[NK_KEY_SHIFT].down;
 80136b0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80136b4:	689b      	ldr	r3, [r3, #8]
 80136b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        const float mouse_x = (in->mouse.pos.x - area.x) + edit->scrollbar.x;
 80136ba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80136be:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80136c2:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80136c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80136ce:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80136d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136d6:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
        const float mouse_y = (in->mouse.pos.y - area.y) + edit->scrollbar.y;
 80136da:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80136de:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80136e2:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 80136e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80136ee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80136f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136f6:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8

        /* mouse click handler */
        is_hovered = (char)nk_input_is_mouse_hovering_rect(in, area);
 80136fa:	ed97 6a4a 	vldr	s12, [r7, #296]	; 0x128
 80136fe:	edd7 6a4b 	vldr	s13, [r7, #300]	; 0x12c
 8013702:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013706:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 801370a:	eeb0 0a46 	vmov.f32	s0, s12
 801370e:	eef0 0a66 	vmov.f32	s1, s13
 8013712:	eeb0 1a47 	vmov.f32	s2, s14
 8013716:	eef0 1a67 	vmov.f32	s3, s15
 801371a:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 801371e:	f001 feaf 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 8013722:	4603      	mov	r3, r0
 8013724:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
        if (select_all) {
 8013728:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 801372c:	2b00      	cmp	r3, #0
 801372e:	d004      	beq.n	801373a <nk_do_edit+0x56a>
            nk_textedit_select_all(edit);
 8013730:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013734:	f00e f820 	bl	8021778 <nk_textedit_select_all>
 8013738:	e06f      	b.n	801381a <nk_do_edit+0x64a>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 801373a:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 801373e:	2b00      	cmp	r3, #0
 8013740:	d018      	beq.n	8013774 <nk_do_edit+0x5a4>
 8013742:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013746:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801374a:	2b00      	cmp	r3, #0
 801374c:	d012      	beq.n	8013774 <nk_do_edit+0x5a4>
            in->mouse.buttons[NK_BUTTON_LEFT].clicked) {
 801374e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013752:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 8013756:	2b00      	cmp	r3, #0
 8013758:	d00c      	beq.n	8013774 <nk_do_edit+0x5a4>
            nk_textedit_click(edit, mouse_x, mouse_y, font, row_height);
 801375a:	ed97 1a6e 	vldr	s2, [r7, #440]	; 0x1b8
 801375e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8013762:	edd7 0a6a 	vldr	s1, [r7, #424]	; 0x1a8
 8013766:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 801376a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801376e:	f00c fb5a 	bl	801fe26 <nk_textedit_click>
 8013772:	e052      	b.n	801381a <nk_do_edit+0x64a>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 8013774:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8013778:	2b00      	cmp	r3, #0
 801377a:	d027      	beq.n	80137cc <nk_do_edit+0x5fc>
 801377c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013780:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013784:	2b00      	cmp	r3, #0
 8013786:	d021      	beq.n	80137cc <nk_do_edit+0x5fc>
            (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {
 8013788:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801378c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_LEFT].down &&
 8013790:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	d108      	bne.n	80137ac <nk_do_edit+0x5dc>
            (in->mouse.delta.x != 0.0f || in->mouse.delta.y != 0.0f)) {
 801379a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801379e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80137a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80137a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137aa:	d00f      	beq.n	80137cc <nk_do_edit+0x5fc>
            nk_textedit_drag(edit, mouse_x, mouse_y, font, row_height);
 80137ac:	ed97 1a6e 	vldr	s2, [r7, #440]	; 0x1b8
 80137b0:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80137b4:	edd7 0a6a 	vldr	s1, [r7, #424]	; 0x1a8
 80137b8:	ed97 0a6b 	vldr	s0, [r7, #428]	; 0x1ac
 80137bc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80137c0:	f00c fb59 	bl	801fe76 <nk_textedit_drag>
            cursor_follow = nk_true;
 80137c4:	2301      	movs	r3, #1
 80137c6:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 80137ca:	e026      	b.n	801381a <nk_do_edit+0x64a>
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_RIGHT].clicked &&
 80137cc:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d022      	beq.n	801381a <nk_do_edit+0x64a>
 80137d4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80137d8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d01c      	beq.n	801381a <nk_do_edit+0x64a>
            in->mouse.buttons[NK_BUTTON_RIGHT].down) {
 80137e0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80137e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
        } else if (is_hovered && in->mouse.buttons[NK_BUTTON_RIGHT].clicked &&
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d016      	beq.n	801381a <nk_do_edit+0x64a>
            nk_textedit_key(edit, NK_KEY_TEXT_WORD_LEFT, nk_false, font, row_height);
 80137ec:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 80137f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80137f4:	2200      	movs	r2, #0
 80137f6:	2118      	movs	r1, #24
 80137f8:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80137fc:	f00c fea0 	bl	8020540 <nk_textedit_key>
            nk_textedit_key(edit, NK_KEY_TEXT_WORD_RIGHT, nk_true, font, row_height);
 8013800:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8013804:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013808:	2201      	movs	r2, #1
 801380a:	2119      	movs	r1, #25
 801380c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013810:	f00c fe96 	bl	8020540 <nk_textedit_key>
            cursor_follow = nk_true;
 8013814:	2301      	movs	r3, #1
 8013816:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
        }

        {int i; /* keyboard input */
        int old_mode = edit->mode;
 801381a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801381e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8013822:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        for (i = 0; i < NK_KEY_MAX; ++i) {
 8013826:	2300      	movs	r3, #0
 8013828:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801382c:	e029      	b.n	8013882 <nk_do_edit+0x6b2>
            if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */
 801382e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013832:	2b04      	cmp	r3, #4
 8013834:	d01f      	beq.n	8013876 <nk_do_edit+0x6a6>
 8013836:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801383a:	2b05      	cmp	r3, #5
 801383c:	d01b      	beq.n	8013876 <nk_do_edit+0x6a6>
            if (nk_input_is_key_pressed(in, (enum nk_keys)i)) {
 801383e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013842:	b2db      	uxtb	r3, r3
 8013844:	4619      	mov	r1, r3
 8013846:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 801384a:	f001 fef8 	bl	801563e <nk_input_is_key_pressed>
 801384e:	4603      	mov	r3, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	d011      	beq.n	8013878 <nk_do_edit+0x6a8>
                nk_textedit_key(edit, (enum nk_keys)i, shift_mod, font, row_height);
 8013854:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013858:	b2d9      	uxtb	r1, r3
 801385a:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 801385e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013862:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8013866:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801386a:	f00c fe69 	bl	8020540 <nk_textedit_key>
                cursor_follow = nk_true;
 801386e:	2301      	movs	r3, #1
 8013870:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 8013874:	e000      	b.n	8013878 <nk_do_edit+0x6a8>
            if (i == NK_KEY_ENTER || i == NK_KEY_TAB) continue; /* special case */
 8013876:	bf00      	nop
        for (i = 0; i < NK_KEY_MAX; ++i) {
 8013878:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801387c:	3301      	adds	r3, #1
 801387e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8013882:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013886:	2b1d      	cmp	r3, #29
 8013888:	ddd1      	ble.n	801382e <nk_do_edit+0x65e>
            }
        }
        if (old_mode != edit->mode) {
 801388a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801388e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8013892:	461a      	mov	r2, r3
 8013894:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013898:	4293      	cmp	r3, r2
 801389a:	d004      	beq.n	80138a6 <nk_do_edit+0x6d6>
            in->keyboard.text_len = 0;
 801389c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138a0:	2200      	movs	r2, #0
 80138a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        }}

        /* text input */
        edit->filter = filter;
 80138a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80138aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80138ae:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80138b2:	6812      	ldr	r2, [r2, #0]
 80138b4:	64da      	str	r2, [r3, #76]	; 0x4c
        if (in->keyboard.text_len) {
 80138b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d014      	beq.n	80138ec <nk_do_edit+0x71c>
            nk_textedit_text(edit, in->keyboard.text, in->keyboard.text_len);
 80138c2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80138d2:	461a      	mov	r2, r3
 80138d4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80138d8:	f00c fd5a 	bl	8020390 <nk_textedit_text>
            cursor_follow = nk_true;
 80138dc:	2301      	movs	r3, #1
 80138de:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
            in->keyboard.text_len = 0;
 80138e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80138e6:	2200      	movs	r2, #0
 80138e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        }

        /* enter key handler */
        if (nk_input_is_key_pressed(in, NK_KEY_ENTER)) {
 80138ec:	2104      	movs	r1, #4
 80138ee:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80138f2:	f001 fea4 	bl	801563e <nk_input_is_key_pressed>
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d02c      	beq.n	8013956 <nk_do_edit+0x786>
            cursor_follow = nk_true;
 80138fc:	2301      	movs	r3, #1
 80138fe:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
            if (flags & NK_EDIT_CTRL_ENTER_NEWLINE && shift_mod)
 8013902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013910:	2b00      	cmp	r3, #0
 8013912:	d00a      	beq.n	801392a <nk_do_edit+0x75a>
 8013914:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d006      	beq.n	801392a <nk_do_edit+0x75a>
                nk_textedit_text(edit, "\n", 1);
 801391c:	2201      	movs	r2, #1
 801391e:	49c5      	ldr	r1, [pc, #788]	; (8013c34 <nk_do_edit+0xa64>)
 8013920:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013924:	f00c fd34 	bl	8020390 <nk_textedit_text>
 8013928:	e015      	b.n	8013956 <nk_do_edit+0x786>
            else if (flags & NK_EDIT_SIG_ENTER)
 801392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801392e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f003 0304 	and.w	r3, r3, #4
 8013938:	2b00      	cmp	r3, #0
 801393a:	d006      	beq.n	801394a <nk_do_edit+0x77a>
                ret |= NK_EDIT_COMMITED;
 801393c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013940:	f043 0310 	orr.w	r3, r3, #16
 8013944:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8013948:	e005      	b.n	8013956 <nk_do_edit+0x786>
            else nk_textedit_text(edit, "\n", 1);
 801394a:	2201      	movs	r2, #1
 801394c:	49b9      	ldr	r1, [pc, #740]	; (8013c34 <nk_do_edit+0xa64>)
 801394e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013952:	f00c fd1d 	bl	8020390 <nk_textedit_text>
        }

        /* cut & copy handler */
        {int copy= nk_input_is_key_pressed(in, NK_KEY_COPY);
 8013956:	2107      	movs	r1, #7
 8013958:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 801395c:	f001 fe6f 	bl	801563e <nk_input_is_key_pressed>
 8013960:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
        int cut = nk_input_is_key_pressed(in, NK_KEY_CUT);
 8013964:	2108      	movs	r1, #8
 8013966:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 801396a:	f001 fe68 	bl	801563e <nk_input_is_key_pressed>
 801396e:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
        if ((copy || cut) && (flags & NK_EDIT_CLIPBOARD))
 8013972:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8013976:	2b00      	cmp	r3, #0
 8013978:	d103      	bne.n	8013982 <nk_do_edit+0x7b2>
 801397a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801397e:	2b00      	cmp	r3, #0
 8013980:	d059      	beq.n	8013a36 <nk_do_edit+0x866>
 8013982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013990:	2b00      	cmp	r3, #0
 8013992:	d050      	beq.n	8013a36 <nk_do_edit+0x866>
        {
            int glyph_len;
            nk_rune unicode;
            const char *text;
            int b = edit->select_start;
 8013994:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801399a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
            int e = edit->select_end;
 801399e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139a4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

            int begin = NK_MIN(b, e);
 80139a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80139ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80139b0:	4293      	cmp	r3, r2
 80139b2:	bfa8      	it	ge
 80139b4:	4613      	movge	r3, r2
 80139b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            int end = NK_MAX(b, e);
 80139ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80139be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80139c2:	4293      	cmp	r3, r2
 80139c4:	bfb8      	it	lt
 80139c6:	4613      	movlt	r3, r2
 80139c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            text = nk_str_at_const(&edit->string, begin, &unicode, &glyph_len);
 80139cc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139d0:	f103 000c 	add.w	r0, r3, #12
 80139d4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80139d8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80139dc:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80139e0:	f009 fa98 	bl	801cf14 <nk_str_at_const>
 80139e4:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
            if (edit->clip.copy)
 80139e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139ec:	689b      	ldr	r3, [r3, #8]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d00d      	beq.n	8013a0e <nk_do_edit+0x83e>
                edit->clip.copy(edit->clip.userdata, text, end - begin);
 80139f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80139f6:	689b      	ldr	r3, [r3, #8]
 80139f8:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80139fc:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8013a00:	1a8a      	subs	r2, r1, r2
 8013a02:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013a06:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8013a0a:	6800      	ldr	r0, [r0, #0]
 8013a0c:	4798      	blx	r3
            if (cut && !(flags & NK_EDIT_READ_ONLY)){
 8013a0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00f      	beq.n	8013a36 <nk_do_edit+0x866>
 8013a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f003 0301 	and.w	r3, r3, #1
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d106      	bne.n	8013a36 <nk_do_edit+0x866>
                nk_textedit_cut(edit);
 8013a28:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013a2c:	f00c fc91 	bl	8020352 <nk_textedit_cut>
                cursor_follow = nk_true;
 8013a30:	2301      	movs	r3, #1
 8013a32:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
            }
        }}

        /* paste handler */
        {int paste = nk_input_is_key_pressed(in, NK_KEY_PASTE);
 8013a36:	2109      	movs	r1, #9
 8013a38:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013a3c:	f001 fdff 	bl	801563e <nk_input_is_key_pressed>
 8013a40:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
        if (paste && (flags & NK_EDIT_CLIPBOARD) && edit->clip.paste) {
 8013a44:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d019      	beq.n	8013a80 <nk_do_edit+0x8b0>
 8013a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013a50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d010      	beq.n	8013a80 <nk_do_edit+0x8b0>
 8013a5e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d00b      	beq.n	8013a80 <nk_do_edit+0x8b0>
            edit->clip.paste(edit->clip.userdata, edit);
 8013a68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8013a72:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8013a76:	6810      	ldr	r0, [r2, #0]
 8013a78:	4798      	blx	r3
            cursor_follow = nk_true;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
        }}

        /* tab handler */
        {int tab = nk_input_is_key_pressed(in, NK_KEY_TAB);
 8013a80:	2105      	movs	r1, #5
 8013a82:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8013a86:	f001 fdda 	bl	801563e <nk_input_is_key_pressed>
 8013a8a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
        if (tab && (flags & NK_EDIT_ALLOW_TAB)) {
 8013a8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d011      	beq.n	8013aba <nk_do_edit+0x8ea>
 8013a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	f003 0308 	and.w	r3, r3, #8
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d008      	beq.n	8013aba <nk_do_edit+0x8ea>
            nk_textedit_text(edit, "    ", 4);
 8013aa8:	2204      	movs	r2, #4
 8013aaa:	4963      	ldr	r1, [pc, #396]	; (8013c38 <nk_do_edit+0xa68>)
 8013aac:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8013ab0:	f00c fc6e 	bl	8020390 <nk_textedit_text>
            cursor_follow = nk_true;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
        }}
    }

    /* set widget state */
    if (edit->active)
 8013aba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013abe:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d007      	beq.n	8013ad6 <nk_do_edit+0x906>
        *state = NK_WIDGET_STATE_ACTIVE;
 8013ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013aca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2222      	movs	r2, #34	; 0x22
 8013ad2:	601a      	str	r2, [r3, #0]
 8013ad4:	e018      	b.n	8013b08 <nk_do_edit+0x938>
    else nk_widget_state_reset(state);
 8013ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ada:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f003 0302 	and.w	r3, r3, #2
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d007      	beq.n	8013afa <nk_do_edit+0x92a>
 8013aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013aee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	2206      	movs	r2, #6
 8013af6:	601a      	str	r2, [r3, #0]
 8013af8:	e006      	b.n	8013b08 <nk_do_edit+0x938>
 8013afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013afe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2204      	movs	r2, #4
 8013b06:	601a      	str	r2, [r3, #0]

    if (is_hovered)
 8013b08:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d00d      	beq.n	8013b2c <nk_do_edit+0x95c>
        *state |= NK_WIDGET_STATE_HOVERED;
 8013b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f043 0212 	orr.w	r2, r3, #18
 8013b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	601a      	str	r2, [r3, #0]

    /* DRAW EDIT */
    {const char *text = nk_str_get_const(&edit->string);
 8013b2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013b30:	330c      	adds	r3, #12
 8013b32:	4618      	mov	r0, r3
 8013b34:	f009 fa84 	bl	801d040 <nk_str_get_const>
 8013b38:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    int len = nk_str_len_char(&edit->string);
 8013b3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013b40:	330c      	adds	r3, #12
 8013b42:	4618      	mov	r0, r3
 8013b44:	f009 facc 	bl	801d0e0 <nk_str_len_char>
 8013b48:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    {/* select background colors/images  */
    const struct nk_style_item *background;
    if (*state & NK_WIDGET_STATE_ACTIVED)
 8013b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	f003 0320 	and.w	r3, r3, #32
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d005      	beq.n	8013b6c <nk_do_edit+0x99c>
        background = &style->active;
 8013b60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b64:	3338      	adds	r3, #56	; 0x38
 8013b66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8013b6a:	e013      	b.n	8013b94 <nk_do_edit+0x9c4>
    else if (*state & NK_WIDGET_STATE_HOVER)
 8013b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013b70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	f003 0310 	and.w	r3, r3, #16
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d005      	beq.n	8013b8c <nk_do_edit+0x9bc>
        background = &style->hover;
 8013b80:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b84:	331c      	adds	r3, #28
 8013b86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8013b8a:	e003      	b.n	8013b94 <nk_do_edit+0x9c4>
    else background = &style->normal;
 8013b8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013b90:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

    /* draw background frame */
    switch(background->type) {
 8013b94:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	2b02      	cmp	r3, #2
 8013b9c:	d028      	beq.n	8013bf0 <nk_do_edit+0xa20>
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	f300 809f 	bgt.w	8013ce2 <nk_do_edit+0xb12>
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d04d      	beq.n	8013c44 <nk_do_edit+0xa74>
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	f040 809a 	bne.w	8013ce2 <nk_do_edit+0xb12>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, bounds, &background->data.image, nk_white);
 8013bae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013bb2:	1d19      	adds	r1, r3, #4
 8013bb4:	4a21      	ldr	r2, [pc, #132]	; (8013c3c <nk_do_edit+0xa6c>)
 8013bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013bba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013bbe:	ed93 6a00 	vldr	s12, [r3]
 8013bc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8013bc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8013bca:	edd3 7a03 	vldr	s15, [r3, #12]
 8013bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013bd2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013bd6:	6812      	ldr	r2, [r2, #0]
 8013bd8:	eeb0 0a46 	vmov.f32	s0, s12
 8013bdc:	eef0 0a66 	vmov.f32	s1, s13
 8013be0:	eeb0 1a47 	vmov.f32	s2, s14
 8013be4:	eef0 1a67 	vmov.f32	s3, s15
 8013be8:	6818      	ldr	r0, [r3, #0]
 8013bea:	f7fe fabf 	bl	801216c <nk_draw_image>
            break;
 8013bee:	e078      	b.n	8013ce2 <nk_do_edit+0xb12>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, bounds, &background->data.slice, nk_white);
 8013bf0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013bf4:	1d19      	adds	r1, r3, #4
 8013bf6:	4a11      	ldr	r2, [pc, #68]	; (8013c3c <nk_do_edit+0xa6c>)
 8013bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013bfc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013c00:	ed93 6a00 	vldr	s12, [r3]
 8013c04:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c08:	ed93 7a02 	vldr	s14, [r3, #8]
 8013c0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013c14:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013c18:	6812      	ldr	r2, [r2, #0]
 8013c1a:	eeb0 0a46 	vmov.f32	s0, s12
 8013c1e:	eef0 0a66 	vmov.f32	s1, s13
 8013c22:	eeb0 1a47 	vmov.f32	s2, s14
 8013c26:	eef0 1a67 	vmov.f32	s3, s15
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	f7fe fb90 	bl	8012350 <nk_draw_nine_slice>
            break;
 8013c30:	e057      	b.n	8013ce2 <nk_do_edit+0xb12>
 8013c32:	bf00      	nop
 8013c34:	080288b8 	.word	0x080288b8
 8013c38:	080288bc 	.word	0x080288bc
 8013c3c:	0802a780 	.word	0x0802a780
 8013c40:	00000000 	.word	0x00000000
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, bounds, style->rounding, background->data.color);
 8013c44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c48:	edd3 5aa5 	vldr	s11, [r3, #660]	; 0x294
 8013c4c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8013c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013c54:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013c58:	ed93 6a00 	vldr	s12, [r3]
 8013c5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8013c60:	ed93 7a02 	vldr	s14, [r3, #8]
 8013c64:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013c6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013c70:	6851      	ldr	r1, [r2, #4]
 8013c72:	eeb0 2a65 	vmov.f32	s4, s11
 8013c76:	eeb0 0a46 	vmov.f32	s0, s12
 8013c7a:	eef0 0a66 	vmov.f32	s1, s13
 8013c7e:	eeb0 1a47 	vmov.f32	s2, s14
 8013c82:	eef0 1a67 	vmov.f32	s3, s15
 8013c86:	6818      	ldr	r0, [r3, #0]
 8013c88:	f7fd ff16 	bl	8011ab8 <nk_fill_rect>
            nk_stroke_rect(out, bounds, style->rounding, style->border, style->border_color);
 8013c8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c90:	edd3 5aa5 	vldr	s11, [r3, #660]	; 0x294
 8013c94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013c98:	ed93 5aa4 	vldr	s10, [r3, #656]	; 0x290
 8013c9c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8013ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ca4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013ca8:	ed93 6a00 	vldr	s12, [r3]
 8013cac:	edd3 6a01 	vldr	s13, [r3, #4]
 8013cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8013cb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8013cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013cbc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013cc0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8013cc2:	eef0 2a45 	vmov.f32	s5, s10
 8013cc6:	eeb0 2a65 	vmov.f32	s4, s11
 8013cca:	eeb0 0a46 	vmov.f32	s0, s12
 8013cce:	eef0 0a66 	vmov.f32	s1, s13
 8013cd2:	eeb0 1a47 	vmov.f32	s2, s14
 8013cd6:	eef0 1a67 	vmov.f32	s3, s15
 8013cda:	6818      	ldr	r0, [r3, #0]
 8013cdc:	f7fd fde4 	bl	80118a8 <nk_stroke_rect>
            break;
 8013ce0:	bf00      	nop
    }}


    area.w = NK_MAX(0, area.w - style->cursor_size);
 8013ce2:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013ce6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013cea:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8013cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfa:	dd08      	ble.n	8013d0e <nk_do_edit+0xb3e>
 8013cfc:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8013d00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013d04:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8013d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d0c:	e001      	b.n	8013d12 <nk_do_edit+0xb42>
 8013d0e:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 8013c40 <nk_do_edit+0xa70>
 8013d12:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    if (edit->active)
 8013d16:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013d1a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	f001 800c 	beq.w	8014d3c <nk_do_edit+0x1b6c>
    {
        int total_lines = 1;
 8013d24:	2301      	movs	r3, #1
 8013d26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        struct nk_vec2 text_size = nk_vec2(0,0);
 8013d2a:	ed5f 0a3b 	vldr	s1, [pc, #-236]	; 8013c40 <nk_do_edit+0xa70>
 8013d2e:	ed1f 0a3c 	vldr	s0, [pc, #-240]	; 8013c40 <nk_do_edit+0xa70>
 8013d32:	f002 fe39 	bl	80169a8 <nk_vec2>
 8013d36:	eeb0 7a40 	vmov.f32	s14, s0
 8013d3a:	eef0 7a60 	vmov.f32	s15, s1
 8013d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013d42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013d46:	ed83 7a00 	vstr	s14, [r3]
 8013d4a:	edc3 7a01 	vstr	s15, [r3, #4]

        /* text pointer positions */
        const char *cursor_ptr = 0;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
        const char *select_begin_ptr = 0;
 8013d54:	2300      	movs	r3, #0
 8013d56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        const char *select_end_ptr = 0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

        /* 2D pixel positions */
        struct nk_vec2 cursor_pos = nk_vec2(0,0);
 8013d60:	ed5f 0a49 	vldr	s1, [pc, #-292]	; 8013c40 <nk_do_edit+0xa70>
 8013d64:	ed1f 0a4a 	vldr	s0, [pc, #-296]	; 8013c40 <nk_do_edit+0xa70>
 8013d68:	f002 fe1e 	bl	80169a8 <nk_vec2>
 8013d6c:	eeb0 7a40 	vmov.f32	s14, s0
 8013d70:	eef0 7a60 	vmov.f32	s15, s1
 8013d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013d7c:	ed83 7a00 	vstr	s14, [r3]
 8013d80:	edc3 7a01 	vstr	s15, [r3, #4]
        struct nk_vec2 selection_offset_start = nk_vec2(0,0);
 8013d84:	ed5f 0a52 	vldr	s1, [pc, #-328]	; 8013c40 <nk_do_edit+0xa70>
 8013d88:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 8013c40 <nk_do_edit+0xa70>
 8013d8c:	f002 fe0c 	bl	80169a8 <nk_vec2>
 8013d90:	eeb0 7a40 	vmov.f32	s14, s0
 8013d94:	eef0 7a60 	vmov.f32	s15, s1
 8013d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013da0:	ed83 7a00 	vstr	s14, [r3]
 8013da4:	edc3 7a01 	vstr	s15, [r3, #4]
        struct nk_vec2 selection_offset_end = nk_vec2(0,0);
 8013da8:	ed5f 0a5b 	vldr	s1, [pc, #-364]	; 8013c40 <nk_do_edit+0xa70>
 8013dac:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 8013c40 <nk_do_edit+0xa70>
 8013db0:	f002 fdfa 	bl	80169a8 <nk_vec2>
 8013db4:	eeb0 7a40 	vmov.f32	s14, s0
 8013db8:	eef0 7a60 	vmov.f32	s15, s1
 8013dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013dc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013dc4:	ed83 7a00 	vstr	s14, [r3]
 8013dc8:	edc3 7a01 	vstr	s15, [r3, #4]

        int selection_begin = NK_MIN(edit->select_start, edit->select_end);
 8013dcc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013dd2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	bfa8      	it	ge
 8013ddc:	4613      	movge	r3, r2
 8013dde:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        int selection_end = NK_MAX(edit->select_start, edit->select_end);
 8013de2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013de8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013dee:	4293      	cmp	r3, r2
 8013df0:	bfb8      	it	lt
 8013df2:	4613      	movlt	r3, r2
 8013df4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

        /* calculate total line count + total space + cursor/selection position */
        float line_width = 0.0f;
 8013df8:	f04f 0300 	mov.w	r3, #0
 8013dfc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        if (text && len)
 8013e00:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f000 8225 	beq.w	8014254 <nk_do_edit+0x1084>
 8013e0a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	f000 8220 	beq.w	8014254 <nk_do_edit+0x1084>
        {
            /* utf8 encoding */
            float glyph_width;
            int glyph_len = 0;
 8013e14:	2300      	movs	r3, #0
 8013e16:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            nk_rune unicode = 0;
 8013e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013e22:	2200      	movs	r2, #0
 8013e24:	601a      	str	r2, [r3, #0]
            int text_len = 0;
 8013e26:	2300      	movs	r3, #0
 8013e28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            int glyphs = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
            int row_begin = 0;
 8013e32:	2300      	movs	r3, #0
 8013e34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

            glyph_len = nk_utf_decode(text, &unicode, len);
 8013e38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013e3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8013e40:	4619      	mov	r1, r3
 8013e42:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8013e46:	f00e f9af 	bl	80221a8 <nk_utf_decode>
 8013e4a:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
            glyph_width = font->width(font->userdata, font->height, text, glyph_len);
 8013e4e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8013e58:	edd2 7a01 	vldr	s15, [r2, #4]
 8013e5c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013e60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013e64:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8013e68:	eeb0 0a67 	vmov.f32	s0, s15
 8013e6c:	6800      	ldr	r0, [r0, #0]
 8013e6e:	4798      	blx	r3
 8013e70:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
            line_width = 0;
 8013e74:	f04f 0300 	mov.w	r3, #0
 8013e78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            /* iterate all lines */
            while ((text_len < len) && glyph_len)
 8013e7c:	e1ac      	b.n	80141d8 <nk_do_edit+0x1008>
            {
                /* set cursor 2D position and line */
                if (!cursor_ptr && glyphs == edit->cursor)
 8013e7e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d14f      	bne.n	8013f26 <nk_do_edit+0xd56>
 8013e86:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e8c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d148      	bne.n	8013f26 <nk_do_edit+0xd56>
                    struct nk_vec2 out_offset;
                    struct nk_vec2 row_size;
                    const char *remaining;

                    /* calculate 2d position */
                    cursor_pos.y = (float)(total_lines-1) * row_height;
 8013e94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013e98:	3b01      	subs	r3, #1
 8013e9a:	ee07 3a90 	vmov	s15, r3
 8013e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ea2:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8013ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013eae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013eb2:	edc3 7a01 	vstr	s15, [r3, #4]
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 8013eb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013eba:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013ebe:	18d1      	adds	r1, r2, r3
 8013ec0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013ec4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013ec8:	1ad2      	subs	r2, r2, r3
 8013eca:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8013ece:	2301      	movs	r3, #1
 8013ed0:	9302      	str	r3, [sp, #8]
 8013ed2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013ed6:	9301      	str	r3, [sp, #4]
 8013ed8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8013edc:	9300      	str	r3, [sp, #0]
 8013ede:	4603      	mov	r3, r0
 8013ee0:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8013ee4:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013ee8:	f00f f9e0 	bl	80232ac <nk_text_calculate_text_bounds>
 8013eec:	eeb0 7a40 	vmov.f32	s14, s0
 8013ef0:	eef0 7a60 	vmov.f32	s15, s1
 8013ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013ef8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013efc:	ed83 7a00 	vstr	s14, [r3]
 8013f00:	edc3 7a01 	vstr	s15, [r3, #4]
                                text_len-row_begin, row_height, &remaining,
                                &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);
                    cursor_pos.x = row_size.x;
 8013f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013f08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013f12:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013f16:	601a      	str	r2, [r3, #0]
                    cursor_ptr = text + text_len;
 8013f18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013f1c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013f20:	4413      	add	r3, r2
 8013f22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                }

                /* set start selection 2D position and line */
                if (!select_begin_ptr && edit->select_start != edit->select_end &&
 8013f26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d15d      	bne.n	8013fea <nk_do_edit+0xe1a>
 8013f2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013f34:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d055      	beq.n	8013fea <nk_do_edit+0xe1a>
 8013f3e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013f42:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d14f      	bne.n	8013fea <nk_do_edit+0xe1a>
                    struct nk_vec2 out_offset;
                    struct nk_vec2 row_size;
                    const char *remaining;

                    /* calculate 2d position */
                    selection_offset_start.y = (float)(NK_MAX(total_lines-1,0)) * row_height;
 8013f4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	dd07      	ble.n	8013f62 <nk_do_edit+0xd92>
 8013f52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f56:	3b01      	subs	r3, #1
 8013f58:	ee07 3a90 	vmov	s15, r3
 8013f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f60:	e001      	b.n	8013f66 <nk_do_edit+0xd96>
 8013f62:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 8013c40 <nk_do_edit+0xa70>
 8013f66:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 8013f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013f72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013f76:	edc3 7a01 	vstr	s15, [r3, #4]
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 8013f7a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013f7e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013f82:	18d1      	adds	r1, r2, r3
 8013f84:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013f88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013f8c:	1ad2      	subs	r2, r2, r3
 8013f8e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8013f92:	2301      	movs	r3, #1
 8013f94:	9302      	str	r3, [sp, #8]
 8013f96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013f9a:	9301      	str	r3, [sp, #4]
 8013f9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013fa0:	9300      	str	r3, [sp, #0]
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 8013fa8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8013fac:	f00f f97e 	bl	80232ac <nk_text_calculate_text_bounds>
 8013fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8013fb4:	eef0 7a60 	vmov.f32	s15, s1
 8013fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013fbc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013fc0:	ed83 7a00 	vstr	s14, [r3]
 8013fc4:	edc3 7a01 	vstr	s15, [r3, #4]
                                text_len-row_begin, row_height, &remaining,
                                &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);
                    selection_offset_start.x = row_size.x;
 8013fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013fcc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013fd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013fda:	601a      	str	r2, [r3, #0]
                    select_begin_ptr = text + text_len;
 8013fdc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013fe0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013fe4:	4413      	add	r3, r2
 8013fe6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                }

                /* set end selection 2D position and line */
                if (!select_end_ptr && edit->select_start != edit->select_end &&
 8013fea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d156      	bne.n	80140a0 <nk_do_edit+0xed0>
 8013ff2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013ff8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d04e      	beq.n	80140a0 <nk_do_edit+0xed0>
 8014002:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8014006:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801400a:	429a      	cmp	r2, r3
 801400c:	d148      	bne.n	80140a0 <nk_do_edit+0xed0>
                    struct nk_vec2 out_offset;
                    struct nk_vec2 row_size;
                    const char *remaining;

                    /* calculate 2d position */
                    selection_offset_end.y = (float)(total_lines-1) * row_height;
 801400e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014012:	3b01      	subs	r3, #1
 8014014:	ee07 3a90 	vmov	s15, r3
 8014018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801401c:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8014020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014028:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801402c:	edc3 7a01 	vstr	s15, [r3, #4]
                    row_size = nk_text_calculate_text_bounds(font, text+row_begin,
 8014030:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8014034:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014038:	18d1      	adds	r1, r2, r3
 801403a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801403e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8014042:	1ad2      	subs	r2, r2, r3
 8014044:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8014048:	2301      	movs	r3, #1
 801404a:	9302      	str	r3, [sp, #8]
 801404c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014050:	9301      	str	r3, [sp, #4]
 8014052:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014056:	9300      	str	r3, [sp, #0]
 8014058:	4603      	mov	r3, r0
 801405a:	ed97 0a6e 	vldr	s0, [r7, #440]	; 0x1b8
 801405e:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8014062:	f00f f923 	bl	80232ac <nk_text_calculate_text_bounds>
 8014066:	eeb0 7a40 	vmov.f32	s14, s0
 801406a:	eef0 7a60 	vmov.f32	s15, s1
 801406e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014072:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8014076:	ed83 7a00 	vstr	s14, [r3]
 801407a:	edc3 7a01 	vstr	s15, [r3, #4]
                                text_len-row_begin, row_height, &remaining,
                                &out_offset, &glyph_offset, NK_STOP_ON_NEW_LINE);
                    selection_offset_end.x = row_size.x;
 801407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014082:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801408c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014090:	601a      	str	r2, [r3, #0]
                    select_end_ptr = text + text_len;
 8014092:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014096:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801409a:	4413      	add	r3, r2
 801409c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                }
                if (unicode == '\n') {
 80140a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80140a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	2b0a      	cmp	r3, #10
 80140ac:	d158      	bne.n	8014160 <nk_do_edit+0xf90>
                    text_size.x = NK_MAX(text_size.x, line_width);
 80140ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80140b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80140b6:	edd3 7a00 	vldr	s15, [r3]
 80140ba:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 80140be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140c6:	dd02      	ble.n	80140ce <nk_do_edit+0xefe>
 80140c8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80140cc:	e004      	b.n	80140d8 <nk_do_edit+0xf08>
 80140ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80140d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80140dc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80140e0:	6013      	str	r3, [r2, #0]
                    total_lines++;
 80140e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80140e6:	3301      	adds	r3, #1
 80140e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    line_width = 0;
 80140ec:	f04f 0300 	mov.w	r3, #0
 80140f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
                    text_len++;
 80140f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80140f8:	3301      	adds	r3, #1
 80140fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                    glyphs++;
 80140fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8014102:	3301      	adds	r3, #1
 8014104:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
                    row_begin = text_len;
 8014108:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801410c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                    glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);
 8014110:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014114:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014118:	18d0      	adds	r0, r2, r3
 801411a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 801411e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014122:	1ad2      	subs	r2, r2, r3
 8014124:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014128:	4619      	mov	r1, r3
 801412a:	f00e f83d 	bl	80221a8 <nk_utf_decode>
 801412e:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
                    glyph_width = font->width(font->userdata, font->height, text+text_len, glyph_len);
 8014132:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801413c:	edd2 7a01 	vldr	s15, [r2, #4]
 8014140:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014144:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8014148:	4411      	add	r1, r2
 801414a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 801414e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8014152:	eeb0 0a67 	vmov.f32	s0, s15
 8014156:	6800      	ldr	r0, [r0, #0]
 8014158:	4798      	blx	r3
 801415a:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
                    continue;
 801415e:	e03b      	b.n	80141d8 <nk_do_edit+0x1008>
                }

                glyphs++;
 8014160:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8014164:	3301      	adds	r3, #1
 8014166:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
                text_len += glyph_len;
 801416a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801416e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8014172:	4413      	add	r3, r2
 8014174:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                line_width += (float)glyph_width;
 8014178:	ed97 7a77 	vldr	s14, [r7, #476]	; 0x1dc
 801417c:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8014180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014184:	edc7 7a77 	vstr	s15, [r7, #476]	; 0x1dc

                glyph_len = nk_utf_decode(text + text_len, &unicode, len-text_len);
 8014188:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801418c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8014190:	18d0      	adds	r0, r2, r3
 8014192:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8014196:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801419a:	1ad2      	subs	r2, r2, r3
 801419c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80141a0:	4619      	mov	r1, r3
 80141a2:	f00e f801 	bl	80221a8 <nk_utf_decode>
 80141a6:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
                glyph_width = font->width(font->userdata, font->height,
 80141aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80141ae:	689b      	ldr	r3, [r3, #8]
 80141b0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80141b4:	edd2 7a01 	vldr	s15, [r2, #4]
 80141b8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80141bc:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 80141c0:	4411      	add	r1, r2
 80141c2:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80141c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80141ca:	eeb0 0a67 	vmov.f32	s0, s15
 80141ce:	6800      	ldr	r0, [r0, #0]
 80141d0:	4798      	blx	r3
 80141d2:	ed87 0a76 	vstr	s0, [r7, #472]	; 0x1d8
                    text+text_len, glyph_len);
                continue;
 80141d6:	bf00      	nop
            while ((text_len < len) && glyph_len)
 80141d8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80141dc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80141e0:	429a      	cmp	r2, r3
 80141e2:	da04      	bge.n	80141ee <nk_do_edit+0x101e>
 80141e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	f47f ae48 	bne.w	8013e7e <nk_do_edit+0xcae>
            }
            text_size.y = (float)total_lines * row_height;
 80141ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80141f2:	ee07 3a90 	vmov	s15, r3
 80141f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80141fa:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80141fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014206:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801420a:	edc3 7a01 	vstr	s15, [r3, #4]

            /* handle case when cursor is at end of text buffer */
            if (!cursor_ptr && edit->cursor == edit->string.len) {
 801420e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014212:	2b00      	cmp	r3, #0
 8014214:	d11e      	bne.n	8014254 <nk_do_edit+0x1084>
 8014216:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801421a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801421c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014222:	429a      	cmp	r2, r3
 8014224:	d116      	bne.n	8014254 <nk_do_edit+0x1084>
                cursor_pos.x = line_width;
 8014226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801422a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801422e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8014232:	601a      	str	r2, [r3, #0]
                cursor_pos.y = text_size.y - row_height;
 8014234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014238:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801423c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014240:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8014244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801424c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014250:	edc3 7a01 	vstr	s15, [r3, #4]
            }
        }
        {
            /* scrollbar */
            if (cursor_follow)
 8014254:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 8014258:	2b00      	cmp	r3, #0
 801425a:	f000 80e6 	beq.w	801442a <nk_do_edit+0x125a>
            {
                /* update scrollbar to follow cursor */
                if (!(flags & NK_EDIT_NO_HORIZONTAL_SCROLL)) {
 801425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801426c:	2b00      	cmp	r3, #0
 801426e:	d17a      	bne.n	8014366 <nk_do_edit+0x1196>
                    /* horizontal scroll */
                    const float scroll_increment = area.w * 0.25f;
 8014270:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014274:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8014278:	ee67 7a87 	vmul.f32	s15, s15, s14
 801427c:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
                    if (cursor_pos.x < edit->scrollbar.x)
 8014280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014288:	ed93 7a00 	vldr	s14, [r3]
 801428c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014290:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801429c:	d523      	bpl.n	80142e6 <nk_do_edit+0x1116>
                        edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - scroll_increment);
 801429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80142a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80142a6:	ed93 7a00 	vldr	s14, [r3]
 80142aa:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80142ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ba:	dd0e      	ble.n	80142da <nk_do_edit+0x110a>
 80142bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80142c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80142c4:	ed93 7a00 	vldr	s14, [r3]
 80142c8:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80142cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142d8:	e001      	b.n	80142de <nk_do_edit+0x110e>
 80142da:	eddf 7acc 	vldr	s15, [pc, #816]	; 801460c <nk_do_edit+0x143c>
 80142de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80142e2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
                    if (cursor_pos.x >= edit->scrollbar.x + area.w)
 80142e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80142ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80142ee:	ed93 7a00 	vldr	s14, [r3]
 80142f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80142f6:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80142fa:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 80142fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430a:	db31      	blt.n	8014370 <nk_do_edit+0x11a0>
                        edit->scrollbar.x = (float)(int)NK_MAX(0.0f, cursor_pos.x - area.w + scroll_increment);
 801430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014310:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014314:	ed93 7a00 	vldr	s14, [r3]
 8014318:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 801431c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014320:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8014324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014330:	dd12      	ble.n	8014358 <nk_do_edit+0x1188>
 8014332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014336:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801433a:	ed93 7a00 	vldr	s14, [r3]
 801433e:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014342:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014346:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 801434a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801434e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014356:	e001      	b.n	801435c <nk_do_edit+0x118c>
 8014358:	eddf 7aac 	vldr	s15, [pc, #688]	; 801460c <nk_do_edit+0x143c>
 801435c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014360:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8014364:	e004      	b.n	8014370 <nk_do_edit+0x11a0>
                } else edit->scrollbar.x = 0;
 8014366:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801436a:	f04f 0200 	mov.w	r2, #0
 801436e:	651a      	str	r2, [r3, #80]	; 0x50

                if (flags & NK_EDIT_MULTILINE) {
 8014370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801437e:	2b00      	cmp	r3, #0
 8014380:	d04e      	beq.n	8014420 <nk_do_edit+0x1250>
                    /* vertical scroll */
                    if (cursor_pos.y < edit->scrollbar.y)
 8014382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014386:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801438a:	ed93 7a01 	vldr	s14, [r3, #4]
 801438e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014392:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8014396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439e:	d51f      	bpl.n	80143e0 <nk_do_edit+0x1210>
                        edit->scrollbar.y = NK_MAX(0.0f, cursor_pos.y - row_height);
 80143a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80143a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80143a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80143ac:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80143b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143bc:	dd0a      	ble.n	80143d4 <nk_do_edit+0x1204>
 80143be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80143c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80143c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80143ca:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80143ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143d2:	e001      	b.n	80143d8 <nk_do_edit+0x1208>
 80143d4:	eddf 7a8d 	vldr	s15, [pc, #564]	; 801460c <nk_do_edit+0x143c>
 80143d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80143dc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                    if (cursor_pos.y >= edit->scrollbar.y + row_height)
 80143e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80143e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80143e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80143ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80143f0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80143f4:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80143f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014404:	db11      	blt.n	801442a <nk_do_edit+0x125a>
                        edit->scrollbar.y = edit->scrollbar.y + row_height;
 8014406:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801440a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 801440e:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8014412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014416:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801441a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 801441e:	e004      	b.n	801442a <nk_do_edit+0x125a>
                } else edit->scrollbar.y = 0;
 8014420:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014424:	f04f 0200 	mov.w	r2, #0
 8014428:	655a      	str	r2, [r3, #84]	; 0x54
            }

            /* scrollbar widget */
            if (flags & NK_EDIT_MULTILINE)
 801442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801442e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014438:	2b00      	cmp	r3, #0
 801443a:	f000 808e 	beq.w	801455a <nk_do_edit+0x138a>
                float scroll_target;
                float scroll_offset;
                float scroll_step;
                float scroll_inc;

                scroll = area;
 801443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014442:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8014446:	461c      	mov	r4, r3
 8014448:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801444c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801444e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                scroll.x = (bounds.x + bounds.w - style->border) - style->scrollbar_size.x;
 8014452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014456:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 801445a:	ed93 7a00 	vldr	s14, [r3]
 801445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014462:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8014466:	edd3 7a02 	vldr	s15, [r3, #8]
 801446a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801446e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014472:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8014476:	ee37 7a67 	vsub.f32	s14, s14, s15
 801447a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801447e:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8014482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801448a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801448e:	edc3 7a00 	vstr	s15, [r3]
                scroll.w = style->scrollbar_size.x;
 8014492:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014496:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 801449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801449e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80144a2:	609a      	str	r2, [r3, #8]

                scroll_offset = edit->scrollbar.y;
 80144a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80144a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
                scroll_step = scroll.h * 0.10f;
 80144ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80144b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80144ba:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8014604 <nk_do_edit+0x1434>
 80144be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144c2:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
                scroll_inc = scroll.h * 0.01f;
 80144c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80144ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80144d2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014608 <nk_do_edit+0x1438>
 80144d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144da:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
                scroll_target = text_size.y;
 80144de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                edit->scrollbar.y = nk_do_scrollbarv(&ws, out, scroll, 0,
 80144ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80144f0:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80144f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80144f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80144fc:	ed93 6a00 	vldr	s12, [r3]
 8014500:	edd3 6a01 	vldr	s13, [r3, #4]
 8014504:	ed93 7a02 	vldr	s14, [r3, #8]
 8014508:	edd3 7a03 	vldr	s15, [r3, #12]
 801450c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014510:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8014514:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8014518:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801451c:	9301      	str	r3, [sp, #4]
 801451e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	4613      	mov	r3, r2
 8014526:	edd7 3a56 	vldr	s7, [r7, #344]	; 0x158
 801452a:	ed97 3a57 	vldr	s6, [r7, #348]	; 0x15c
 801452e:	edd7 2a55 	vldr	s5, [r7, #340]	; 0x154
 8014532:	ed97 2a58 	vldr	s4, [r7, #352]	; 0x160
 8014536:	2200      	movs	r2, #0
 8014538:	eeb0 0a46 	vmov.f32	s0, s12
 801453c:	eef0 0a66 	vmov.f32	s1, s13
 8014540:	eeb0 1a47 	vmov.f32	s2, s14
 8014544:	eef0 1a67 	vmov.f32	s3, s15
 8014548:	6809      	ldr	r1, [r1, #0]
 801454a:	f007 fc29 	bl	801bda0 <nk_do_scrollbarv>
 801454e:	eef0 7a40 	vmov.f32	s15, s0
 8014552:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014556:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
        struct nk_color sel_background_color;
        struct nk_color sel_text_color;
        struct nk_color cursor_color;
        struct nk_color cursor_text_color;
        const struct nk_style_item *background;
        nk_push_scissor(out, clip);
 801455a:	ed97 6a42 	vldr	s12, [r7, #264]	; 0x108
 801455e:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 8014562:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8014566:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 801456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801456e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014572:	eeb0 0a46 	vmov.f32	s0, s12
 8014576:	eef0 0a66 	vmov.f32	s1, s13
 801457a:	eeb0 1a47 	vmov.f32	s2, s14
 801457e:	eef0 1a67 	vmov.f32	s3, s15
 8014582:	6818      	ldr	r0, [r3, #0]
 8014584:	f7fd f918 	bl	80117b8 <nk_push_scissor>

        /* select correct colors to draw */
        if (*state & NK_WIDGET_STATE_ACTIVED) {
 8014588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801458c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f003 0320 	and.w	r3, r3, #32
 8014598:	2b00      	cmp	r3, #0
 801459a:	d039      	beq.n	8014610 <nk_do_edit+0x1440>
            background = &style->active;
 801459c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80145a0:	3338      	adds	r3, #56	; 0x38
 80145a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            text_color = style->text_active;
 80145a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80145ae:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145b2:	f8d2 227c 	ldr.w	r2, [r2, #636]	; 0x27c
 80145b6:	601a      	str	r2, [r3, #0]
            sel_text_color = style->selected_text_hover;
 80145b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80145c0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145c4:	f8d2 228c 	ldr.w	r2, [r2, #652]	; 0x28c
 80145c8:	601a      	str	r2, [r3, #0]
            sel_background_color = style->selected_hover;
 80145ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80145d2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145d6:	f8d2 2284 	ldr.w	r2, [r2, #644]	; 0x284
 80145da:	601a      	str	r2, [r3, #0]
            cursor_color = style->cursor_hover;
 80145dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80145e4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145e8:	f8d2 2268 	ldr.w	r2, [r2, #616]	; 0x268
 80145ec:	601a      	str	r2, [r3, #0]
            cursor_text_color = style->cursor_text_hover;
 80145ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80145f2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80145f6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145fa:	f8d2 2270 	ldr.w	r2, [r2, #624]	; 0x270
 80145fe:	601a      	str	r2, [r3, #0]
 8014600:	e074      	b.n	80146ec <nk_do_edit+0x151c>
 8014602:	bf00      	nop
 8014604:	3dcccccd 	.word	0x3dcccccd
 8014608:	3c23d70a 	.word	0x3c23d70a
 801460c:	00000000 	.word	0x00000000
        } else if (*state & NK_WIDGET_STATE_HOVER) {
 8014610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014614:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	f003 0310 	and.w	r3, r3, #16
 8014620:	2b00      	cmp	r3, #0
 8014622:	d032      	beq.n	801468a <nk_do_edit+0x14ba>
            background = &style->hover;
 8014624:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014628:	331c      	adds	r3, #28
 801462a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            text_color = style->text_hover;
 801462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014632:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014636:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801463a:	f8d2 2278 	ldr.w	r2, [r2, #632]	; 0x278
 801463e:	601a      	str	r2, [r3, #0]
            sel_text_color = style->selected_text_hover;
 8014640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014644:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8014648:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801464c:	f8d2 228c 	ldr.w	r2, [r2, #652]	; 0x28c
 8014650:	601a      	str	r2, [r3, #0]
            sel_background_color = style->selected_hover;
 8014652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014656:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801465a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801465e:	f8d2 2284 	ldr.w	r2, [r2, #644]	; 0x284
 8014662:	601a      	str	r2, [r3, #0]
            cursor_text_color = style->cursor_text_hover;
 8014664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014668:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 801466c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014670:	f8d2 2270 	ldr.w	r2, [r2, #624]	; 0x270
 8014674:	601a      	str	r2, [r3, #0]
            cursor_color = style->cursor_hover;
 8014676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801467a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801467e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014682:	f8d2 2268 	ldr.w	r2, [r2, #616]	; 0x268
 8014686:	601a      	str	r2, [r3, #0]
 8014688:	e030      	b.n	80146ec <nk_do_edit+0x151c>
        } else {
            background = &style->normal;
 801468a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801468e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
            text_color = style->text_normal;
 8014692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014696:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801469a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801469e:	f8d2 2274 	ldr.w	r2, [r2, #628]	; 0x274
 80146a2:	601a      	str	r2, [r3, #0]
            sel_text_color = style->selected_text_normal;
 80146a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80146ac:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146b0:	f8d2 2288 	ldr.w	r2, [r2, #648]	; 0x288
 80146b4:	601a      	str	r2, [r3, #0]
            sel_background_color = style->selected_normal;
 80146b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80146be:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146c2:	f8d2 2280 	ldr.w	r2, [r2, #640]	; 0x280
 80146c6:	601a      	str	r2, [r3, #0]
            cursor_color = style->cursor_normal;
 80146c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80146d0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146d4:	f8d2 2264 	ldr.w	r2, [r2, #612]	; 0x264
 80146d8:	601a      	str	r2, [r3, #0]
            cursor_text_color = style->cursor_text_normal;
 80146da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80146de:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80146e2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80146e6:	f8d2 226c 	ldr.w	r2, [r2, #620]	; 0x26c
 80146ea:	601a      	str	r2, [r3, #0]
        }
        if (background->type == NK_STYLE_ITEM_IMAGE)
 80146ec:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	2b01      	cmp	r3, #1
 80146f4:	d10c      	bne.n	8014710 <nk_do_edit+0x1540>
            background_color = nk_rgba(0,0,0,0);
 80146f6:	2300      	movs	r3, #0
 80146f8:	2200      	movs	r2, #0
 80146fa:	2100      	movs	r1, #0
 80146fc:	2000      	movs	r0, #0
 80146fe:	f7fb facd 	bl	800fc9c <nk_rgba>
 8014702:	4602      	mov	r2, r0
 8014704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014708:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	e007      	b.n	8014720 <nk_do_edit+0x1550>
        else
            background_color = background->data.color;
 8014710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014714:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014718:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801471c:	6852      	ldr	r2, [r2, #4]
 801471e:	601a      	str	r2, [r3, #0]


        if (edit->select_start == edit->select_end) {
 8014720:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014726:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801472a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801472c:	429a      	cmp	r2, r3
 801472e:	d146      	bne.n	80147be <nk_do_edit+0x15ee>
            /* no selection so just draw the complete text */
            const char *begin = nk_str_get_const(&edit->string);
 8014730:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014734:	330c      	adds	r3, #12
 8014736:	4618      	mov	r0, r3
 8014738:	f008 fc82 	bl	801d040 <nk_str_get_const>
 801473c:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
            int l = nk_str_len_char(&edit->string);
 8014740:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014744:	330c      	adds	r3, #12
 8014746:	4618      	mov	r0, r3
 8014748:	f008 fcca 	bl	801d0e0 <nk_str_len_char>
 801474c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
            nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014750:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014754:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014758:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801475c:	ee77 6a67 	vsub.f32	s13, s14, s15
                area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
 8014760:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014764:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014768:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
            nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 801476c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014774:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014778:	2300      	movs	r3, #0
 801477a:	9303      	str	r3, [sp, #12]
 801477c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014780:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	9302      	str	r3, [sp, #8]
 8014788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801478c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	9301      	str	r3, [sp, #4]
 8014794:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014798:	9300      	str	r3, [sp, #0]
 801479a:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 801479e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80147a2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80147a6:	ed1f 1a67 	vldr	s2, [pc, #-412]	; 801460c <nk_do_edit+0x143c>
 80147aa:	eef0 0a67 	vmov.f32	s1, s15
 80147ae:	eeb0 0a66 	vmov.f32	s0, s13
 80147b2:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80147b6:	6800      	ldr	r0, [r0, #0]
 80147b8:	f7fe fb72 	bl	8012ea0 <nk_edit_draw_text>
 80147bc:	e14e      	b.n	8014a5c <nk_do_edit+0x188c>
                background_color, text_color, nk_false);
        } else {
            /* edit has selection so draw 1-3 text chunks */
            if (edit->select_start != edit->select_end && selection_begin > 0){
 80147be:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80147c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d050      	beq.n	8014870 <nk_do_edit+0x16a0>
 80147ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	dd4c      	ble.n	8014870 <nk_do_edit+0x16a0>
                /* draw unselected text before selection */
                const char *begin = nk_str_get_const(&edit->string);
 80147d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80147da:	330c      	adds	r3, #12
 80147dc:	4618      	mov	r0, r3
 80147de:	f008 fc2f 	bl	801d040 <nk_str_get_const>
 80147e2:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
                NK_ASSERT(select_begin_ptr);
 80147e6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d106      	bne.n	80147fc <nk_do_edit+0x162c>
 80147ee:	4b72      	ldr	r3, [pc, #456]	; (80149b8 <nk_do_edit+0x17e8>)
 80147f0:	4a72      	ldr	r2, [pc, #456]	; (80149bc <nk_do_edit+0x17ec>)
 80147f2:	f240 2133 	movw	r1, #563	; 0x233
 80147f6:	4872      	ldr	r0, [pc, #456]	; (80149c0 <nk_do_edit+0x17f0>)
 80147f8:	f010 f97a 	bl	8024af0 <__assert_func>
                nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 80147fc:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014800:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014804:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014808:	ee77 6a67 	vsub.f32	s13, s14, s15
                    area.y - edit->scrollbar.y, 0, begin, (int)(select_begin_ptr - begin),
 801480c:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014810:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014814:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
                nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014818:	ee77 7a67 	vsub.f32	s15, s14, s15
 801481c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8014820:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8014824:	1ad2      	subs	r2, r2, r3
 8014826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801482a:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 801482e:	2300      	movs	r3, #0
 8014830:	9303      	str	r3, [sp, #12]
 8014832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014836:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	9302      	str	r3, [sp, #8]
 801483e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014842:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	9301      	str	r3, [sp, #4]
 801484a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014854:	4613      	mov	r3, r2
 8014856:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801485a:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 80149c8 <nk_do_edit+0x17f8>
 801485e:	eef0 0a67 	vmov.f32	s1, s15
 8014862:	eeb0 0a66 	vmov.f32	s0, s13
 8014866:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 801486a:	6800      	ldr	r0, [r0, #0]
 801486c:	f7fe fb18 	bl	8012ea0 <nk_edit_draw_text>
                    row_height, font, background_color, text_color, nk_false);
            }
            if (edit->select_start != edit->select_end) {
 8014870:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014876:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801487c:	429a      	cmp	r2, r3
 801487e:	d06b      	beq.n	8014958 <nk_do_edit+0x1788>
                /* draw selected text */
                NK_ASSERT(select_begin_ptr);
 8014880:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8014884:	2b00      	cmp	r3, #0
 8014886:	d106      	bne.n	8014896 <nk_do_edit+0x16c6>
 8014888:	4b4b      	ldr	r3, [pc, #300]	; (80149b8 <nk_do_edit+0x17e8>)
 801488a:	4a4c      	ldr	r2, [pc, #304]	; (80149bc <nk_do_edit+0x17ec>)
 801488c:	f240 213a 	movw	r1, #570	; 0x23a
 8014890:	484b      	ldr	r0, [pc, #300]	; (80149c0 <nk_do_edit+0x17f0>)
 8014892:	f010 f92d 	bl	8024af0 <__assert_func>
                if (!select_end_ptr) {
 8014896:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d114      	bne.n	80148c8 <nk_do_edit+0x16f8>
                    const char *begin = nk_str_get_const(&edit->string);
 801489e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80148a2:	330c      	adds	r3, #12
 80148a4:	4618      	mov	r0, r3
 80148a6:	f008 fbcb 	bl	801d040 <nk_str_get_const>
 80148aa:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
                    select_end_ptr = begin + nk_str_len_char(&edit->string);
 80148ae:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80148b2:	330c      	adds	r3, #12
 80148b4:	4618      	mov	r0, r3
 80148b6:	f008 fc13 	bl	801d0e0 <nk_str_len_char>
 80148ba:	4603      	mov	r3, r0
 80148bc:	461a      	mov	r2, r3
 80148be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80148c2:	4413      	add	r3, r2
 80148c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                }
                nk_edit_draw_text(out, style,
                    area.x - edit->scrollbar.x,
 80148c8:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80148cc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80148d0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
                nk_edit_draw_text(out, style,
 80148d4:	ee77 6a67 	vsub.f32	s13, s14, s15
                    area.y + selection_offset_start.y - edit->scrollbar.y,
 80148d8:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80148dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80148e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80148e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80148e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80148f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
                nk_edit_draw_text(out, style,
 80148f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80148fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014900:	ed93 7a00 	vldr	s14, [r3]
 8014904:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8014908:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801490c:	1ad2      	subs	r2, r2, r3
 801490e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014912:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014916:	2301      	movs	r3, #1
 8014918:	9303      	str	r3, [sp, #12]
 801491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801491e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	9302      	str	r3, [sp, #8]
 8014926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801492a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	9301      	str	r3, [sp, #4]
 8014932:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014936:	9300      	str	r3, [sp, #0]
 8014938:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 801493c:	4613      	mov	r3, r2
 801493e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8014942:	eeb0 1a47 	vmov.f32	s2, s14
 8014946:	eef0 0a67 	vmov.f32	s1, s15
 801494a:	eeb0 0a66 	vmov.f32	s0, s13
 801494e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8014952:	6800      	ldr	r0, [r0, #0]
 8014954:	f7fe faa4 	bl	8012ea0 <nk_edit_draw_text>
                    selection_offset_start.x,
                    select_begin_ptr, (int)(select_end_ptr - select_begin_ptr),
                    row_height, font, sel_background_color, sel_text_color, nk_true);
            }
            if ((edit->select_start != edit->select_end &&
 8014958:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801495c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801495e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014964:	429a      	cmp	r2, r3
 8014966:	d079      	beq.n	8014a5c <nk_do_edit+0x188c>
                selection_end < edit->string.len))
 8014968:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801496c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            if ((edit->select_start != edit->select_end &&
 801496e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8014972:	429a      	cmp	r2, r3
 8014974:	da72      	bge.n	8014a5c <nk_do_edit+0x188c>
            {
                /* draw unselected text after selected text */
                const char *begin = select_end_ptr;
 8014976:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801497a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                const char *end = nk_str_get_const(&edit->string) +
 801497e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014982:	330c      	adds	r3, #12
 8014984:	4618      	mov	r0, r3
 8014986:	f008 fb5b 	bl	801d040 <nk_str_get_const>
 801498a:	4604      	mov	r4, r0
                                    nk_str_len_char(&edit->string);
 801498c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014990:	330c      	adds	r3, #12
 8014992:	4618      	mov	r0, r3
 8014994:	f008 fba4 	bl	801d0e0 <nk_str_len_char>
 8014998:	4603      	mov	r3, r0
                const char *end = nk_str_get_const(&edit->string) +
 801499a:	4423      	add	r3, r4
 801499c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                NK_ASSERT(select_end_ptr);
 80149a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d111      	bne.n	80149cc <nk_do_edit+0x17fc>
 80149a8:	4b06      	ldr	r3, [pc, #24]	; (80149c4 <nk_do_edit+0x17f4>)
 80149aa:	4a04      	ldr	r2, [pc, #16]	; (80149bc <nk_do_edit+0x17ec>)
 80149ac:	f240 214d 	movw	r1, #589	; 0x24d
 80149b0:	4803      	ldr	r0, [pc, #12]	; (80149c0 <nk_do_edit+0x17f0>)
 80149b2:	f010 f89d 	bl	8024af0 <__assert_func>
 80149b6:	bf00      	nop
 80149b8:	080288c4 	.word	0x080288c4
 80149bc:	0802a798 	.word	0x0802a798
 80149c0:	08028884 	.word	0x08028884
 80149c4:	080288d8 	.word	0x080288d8
 80149c8:	00000000 	.word	0x00000000
                nk_edit_draw_text(out, style,
                    area.x - edit->scrollbar.x,
 80149cc:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80149d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80149d4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
                nk_edit_draw_text(out, style,
 80149d8:	ee77 6a67 	vsub.f32	s13, s14, s15
                    area.y + selection_offset_end.y - edit->scrollbar.y,
 80149dc:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 80149e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80149e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80149e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80149ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80149f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80149f4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
                nk_edit_draw_text(out, style,
 80149f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014a04:	ed93 7a00 	vldr	s14, [r3]
 8014a08:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8014a0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014a10:	1ad2      	subs	r2, r2, r3
 8014a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a16:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	9303      	str	r3, [sp, #12]
 8014a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	9302      	str	r3, [sp, #8]
 8014a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014a2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	9301      	str	r3, [sp, #4]
 8014a36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014a40:	4613      	mov	r3, r2
 8014a42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8014a46:	eeb0 1a47 	vmov.f32	s2, s14
 8014a4a:	eef0 0a67 	vmov.f32	s1, s15
 8014a4e:	eeb0 0a66 	vmov.f32	s0, s13
 8014a52:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8014a56:	6800      	ldr	r0, [r0, #0]
 8014a58:	f7fe fa22 	bl	8012ea0 <nk_edit_draw_text>
                    background_color, text_color, nk_true);
            }
        }

        /* cursor */
        if (edit->select_start == edit->select_end)
 8014a5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014a62:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	f040 821d 	bne.w	8014ea8 <nk_do_edit+0x1cd8>
        {
            if (edit->cursor >= nk_str_len(&edit->string) ||
 8014a6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a72:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8014a74:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014a78:	330c      	adds	r3, #12
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f008 fb08 	bl	801d090 <nk_str_len>
 8014a80:	4603      	mov	r3, r0
 8014a82:	429c      	cmp	r4, r3
 8014a84:	da09      	bge.n	8014a9a <nk_do_edit+0x18ca>
 8014a86:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	f000 8085 	beq.w	8014b9a <nk_do_edit+0x19ca>
                (cursor_ptr && *cursor_ptr == '\n')) {
 8014a90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	2b0a      	cmp	r3, #10
 8014a98:	d17f      	bne.n	8014b9a <nk_do_edit+0x19ca>
                /* draw cursor at end of line */
                struct nk_rect cursor;
                cursor.w = style->cursor_size;
 8014a9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014a9e:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 8014aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014aa6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014aaa:	609a      	str	r2, [r3, #8]
                cursor.h = font->height;
 8014aac:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014ab0:	685a      	ldr	r2, [r3, #4]
 8014ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ab6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014aba:	60da      	str	r2, [r3, #12]
                cursor.x = area.x + cursor_pos.x - edit->scrollbar.x;
 8014abc:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014ac8:	edd3 7a00 	vldr	s15, [r3]
 8014acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ad0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014ad4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ae0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014ae4:	edc3 7a00 	vstr	s15, [r3]
                cursor.y = area.y + cursor_pos.y + row_height/2.0f - cursor.h/2.0f;
 8014ae8:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014af0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014af4:	edd3 7a01 	vldr	s15, [r3, #4]
 8014af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014afc:	edd7 6a6e 	vldr	s13, [r7, #440]	; 0x1b8
 8014b00:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014b04:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8014b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b14:	edd3 6a03 	vldr	s13, [r3, #12]
 8014b18:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8014b1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8014b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b2c:	edc3 7a01 	vstr	s15, [r3, #4]
                cursor.y -= edit->scrollbar.y;
 8014b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b38:	ed93 7a01 	vldr	s14, [r3, #4]
 8014b3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014b40:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8014b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b4c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b50:	edc3 7a01 	vstr	s15, [r3, #4]
                nk_fill_rect(out, cursor, 0, cursor_color);
 8014b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b58:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8014b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8014b64:	ed93 6a00 	vldr	s12, [r3]
 8014b68:	edd3 6a01 	vldr	s13, [r3, #4]
 8014b6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8014b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8014b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014b78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014b7c:	6811      	ldr	r1, [r2, #0]
 8014b7e:	ed1f 2a6e 	vldr	s4, [pc, #-440]	; 80149c8 <nk_do_edit+0x17f8>
 8014b82:	eeb0 0a46 	vmov.f32	s0, s12
 8014b86:	eef0 0a66 	vmov.f32	s1, s13
 8014b8a:	eeb0 1a47 	vmov.f32	s2, s14
 8014b8e:	eef0 1a67 	vmov.f32	s3, s15
 8014b92:	6818      	ldr	r0, [r3, #0]
 8014b94:	f7fc ff90 	bl	8011ab8 <nk_fill_rect>
                (cursor_ptr && *cursor_ptr == '\n')) {
 8014b98:	e186      	b.n	8014ea8 <nk_do_edit+0x1cd8>
                int glyph_len;
                struct nk_rect label;
                struct nk_text txt;

                nk_rune unicode;
                NK_ASSERT(cursor_ptr);
 8014b9a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d106      	bne.n	8014bb0 <nk_do_edit+0x19e0>
 8014ba2:	4bd0      	ldr	r3, [pc, #832]	; (8014ee4 <nk_do_edit+0x1d14>)
 8014ba4:	4ad0      	ldr	r2, [pc, #832]	; (8014ee8 <nk_do_edit+0x1d18>)
 8014ba6:	f240 216b 	movw	r1, #619	; 0x26b
 8014baa:	48d0      	ldr	r0, [pc, #832]	; (8014eec <nk_do_edit+0x1d1c>)
 8014bac:	f00f ffa0 	bl	8024af0 <__assert_func>
                glyph_len = nk_utf_decode(cursor_ptr, &unicode, 4);
 8014bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014bb4:	2204      	movs	r2, #4
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8014bbc:	f00d faf4 	bl	80221a8 <nk_utf_decode>
 8014bc0:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138

                label.x = area.x + cursor_pos.x - edit->scrollbar.x;
 8014bc4:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014bcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014bd0:	edd3 7a00 	vldr	s15, [r3]
 8014bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014bdc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014be8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014bec:	edc3 7a00 	vstr	s15, [r3]
                label.y = area.y + cursor_pos.y - edit->scrollbar.y;
 8014bf0:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014bf8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8014bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8014c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014c04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014c08:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8014c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014c18:	edc3 7a01 	vstr	s15, [r3, #4]
                label.w = font->width(font->userdata, font->height, cursor_ptr, glyph_len);
 8014c1c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014c20:	689b      	ldr	r3, [r3, #8]
 8014c22:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8014c26:	edd2 7a01 	vldr	s15, [r2, #4]
 8014c2a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8014c2e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014c32:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8014c36:	eeb0 0a67 	vmov.f32	s0, s15
 8014c3a:	6800      	ldr	r0, [r0, #0]
 8014c3c:	4798      	blx	r3
 8014c3e:	eef0 7a40 	vmov.f32	s15, s0
 8014c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c46:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014c4a:	edc3 7a02 	vstr	s15, [r3, #8]
                label.h = row_height;
 8014c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c52:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014c56:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8014c5a:	60da      	str	r2, [r3, #12]

                txt.padding = nk_vec2(0,0);
 8014c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c60:	f5a3 74e8 	sub.w	r4, r3, #464	; 0x1d0
 8014c64:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8014ef0 <nk_do_edit+0x1d20>
 8014c68:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8014ef0 <nk_do_edit+0x1d20>
 8014c6c:	f001 fe9c 	bl	80169a8 <nk_vec2>
 8014c70:	eeb0 7a40 	vmov.f32	s14, s0
 8014c74:	eef0 7a60 	vmov.f32	s15, s1
 8014c78:	ed84 7a00 	vstr	s14, [r4]
 8014c7c:	edc4 7a01 	vstr	s15, [r4, #4]
                txt.background = cursor_color;;
 8014c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c84:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8014c88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8014c8c:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8014c90:	6812      	ldr	r2, [r2, #0]
 8014c92:	609a      	str	r2, [r3, #8]
                txt.text = cursor_text_color;
 8014c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014c98:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8014c9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8014ca0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8014ca4:	6812      	ldr	r2, [r2, #0]
 8014ca6:	60da      	str	r2, [r3, #12]
                nk_fill_rect(out, label, 0, cursor_color);
 8014ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014cac:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8014cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014cb4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014cb8:	ed93 6a00 	vldr	s12, [r3]
 8014cbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8014cc0:	ed93 7a02 	vldr	s14, [r3, #8]
 8014cc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8014cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ccc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014cd0:	6811      	ldr	r1, [r2, #0]
 8014cd2:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8014ef0 <nk_do_edit+0x1d20>
 8014cd6:	eeb0 0a46 	vmov.f32	s0, s12
 8014cda:	eef0 0a66 	vmov.f32	s1, s13
 8014cde:	eeb0 1a47 	vmov.f32	s2, s14
 8014ce2:	eef0 1a67 	vmov.f32	s3, s15
 8014ce6:	6818      	ldr	r0, [r3, #0]
 8014ce8:	f7fc fee6 	bl	8011ab8 <nk_fill_rect>
                nk_widget_text(out, label, cursor_ptr, glyph_len, &txt, NK_TEXT_LEFT, font);
 8014cec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014cf4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014cf8:	ed93 6a00 	vldr	s12, [r3]
 8014cfc:	edd3 6a01 	vldr	s13, [r3, #4]
 8014d00:	ed93 7a02 	vldr	s14, [r3, #8]
 8014d04:	edd3 7a03 	vldr	s15, [r3, #12]
 8014d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014d0c:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014d10:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014d14:	9301      	str	r3, [sp, #4]
 8014d16:	2311      	movs	r3, #17
 8014d18:	9300      	str	r3, [sp, #0]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8014d20:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8014d24:	eeb0 0a46 	vmov.f32	s0, s12
 8014d28:	eef0 0a66 	vmov.f32	s1, s13
 8014d2c:	eeb0 1a47 	vmov.f32	s2, s14
 8014d30:	eef0 1a67 	vmov.f32	s3, s15
 8014d34:	6800      	ldr	r0, [r0, #0]
 8014d36:	f00a fc25 	bl	801f584 <nk_widget_text>
 8014d3a:	e0b5      	b.n	8014ea8 <nk_do_edit+0x1cd8>
            }
        }}
    } else {
        /* not active so just draw text */
        int l = nk_str_len_char(&edit->string);
 8014d3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d40:	330c      	adds	r3, #12
 8014d42:	4618      	mov	r0, r3
 8014d44:	f008 f9cc 	bl	801d0e0 <nk_str_len_char>
 8014d48:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
        const char *begin = nk_str_get_const(&edit->string);
 8014d4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d50:	330c      	adds	r3, #12
 8014d52:	4618      	mov	r0, r3
 8014d54:	f008 f974 	bl	801d040 <nk_str_get_const>
 8014d58:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

        const struct nk_style_item *background;
        struct nk_color background_color;
        struct nk_color text_color;
        nk_push_scissor(out, clip);
 8014d5c:	ed97 6a42 	vldr	s12, [r7, #264]	; 0x108
 8014d60:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 8014d64:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8014d68:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8014d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014d70:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014d74:	eeb0 0a46 	vmov.f32	s0, s12
 8014d78:	eef0 0a66 	vmov.f32	s1, s13
 8014d7c:	eeb0 1a47 	vmov.f32	s2, s14
 8014d80:	eef0 1a67 	vmov.f32	s3, s15
 8014d84:	6818      	ldr	r0, [r3, #0]
 8014d86:	f7fc fd17 	bl	80117b8 <nk_push_scissor>
        if (*state & NK_WIDGET_STATE_ACTIVED) {
 8014d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014d8e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	f003 0320 	and.w	r3, r3, #32
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d00e      	beq.n	8014dbc <nk_do_edit+0x1bec>
            background = &style->active;
 8014d9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014da2:	3338      	adds	r3, #56	; 0x38
 8014da4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            text_color = style->text_active;
 8014da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014dac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014db0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014db4:	f8d2 227c 	ldr.w	r2, [r2, #636]	; 0x27c
 8014db8:	601a      	str	r2, [r3, #0]
 8014dba:	e025      	b.n	8014e08 <nk_do_edit+0x1c38>
        } else if (*state & NK_WIDGET_STATE_HOVER) {
 8014dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014dc0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	f003 0310 	and.w	r3, r3, #16
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d00e      	beq.n	8014dee <nk_do_edit+0x1c1e>
            background = &style->hover;
 8014dd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014dd4:	331c      	adds	r3, #28
 8014dd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            text_color = style->text_hover;
 8014dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014dde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014de2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014de6:	f8d2 2278 	ldr.w	r2, [r2, #632]	; 0x278
 8014dea:	601a      	str	r2, [r3, #0]
 8014dec:	e00c      	b.n	8014e08 <nk_do_edit+0x1c38>
        } else {
            background = &style->normal;
 8014dee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014df2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            text_color = style->text_normal;
 8014df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014dfa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014dfe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014e02:	f8d2 2274 	ldr.w	r2, [r2, #628]	; 0x274
 8014e06:	601a      	str	r2, [r3, #0]
        }
        if (background->type == NK_STYLE_ITEM_IMAGE)
 8014e08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d10c      	bne.n	8014e2c <nk_do_edit+0x1c5c>
            background_color = nk_rgba(0,0,0,0);
 8014e12:	2300      	movs	r3, #0
 8014e14:	2200      	movs	r2, #0
 8014e16:	2100      	movs	r1, #0
 8014e18:	2000      	movs	r0, #0
 8014e1a:	f7fa ff3f 	bl	800fc9c <nk_rgba>
 8014e1e:	4602      	mov	r2, r0
 8014e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014e28:	601a      	str	r2, [r3, #0]
 8014e2a:	e007      	b.n	8014e3c <nk_do_edit+0x1c6c>
        else
            background_color = background->data.color;
 8014e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014e34:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8014e38:	6852      	ldr	r2, [r2, #4]
 8014e3a:	601a      	str	r2, [r3, #0]
        nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014e3c:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014e40:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014e44:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014e48:	ee77 6a67 	vsub.f32	s13, s14, s15
            area.y - edit->scrollbar.y, 0, begin, l, row_height, font,
 8014e4c:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014e50:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014e54:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
        nk_edit_draw_text(out, style, area.x - edit->scrollbar.x,
 8014e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e60:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 8014e64:	2300      	movs	r3, #0
 8014e66:	9303      	str	r3, [sp, #12]
 8014e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e6c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	9302      	str	r3, [sp, #8]
 8014e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	9301      	str	r3, [sp, #4]
 8014e80:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8014e84:	9300      	str	r3, [sp, #0]
 8014e86:	edd7 1a6e 	vldr	s3, [r7, #440]	; 0x1b8
 8014e8a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014e8e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8014e92:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8014ef0 <nk_do_edit+0x1d20>
 8014e96:	eef0 0a67 	vmov.f32	s1, s15
 8014e9a:	eeb0 0a66 	vmov.f32	s0, s13
 8014e9e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8014ea2:	6800      	ldr	r0, [r0, #0]
 8014ea4:	f7fd fffc 	bl	8012ea0 <nk_edit_draw_text>
            background_color, text_color, nk_false);
    }
    nk_push_scissor(out, old_clip);}
 8014ea8:	ed97 6a46 	vldr	s12, [r7, #280]	; 0x118
 8014eac:	edd7 6a47 	vldr	s13, [r7, #284]	; 0x11c
 8014eb0:	ed97 7a48 	vldr	s14, [r7, #288]	; 0x120
 8014eb4:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8014eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014ebc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8014ec0:	eeb0 0a46 	vmov.f32	s0, s12
 8014ec4:	eef0 0a66 	vmov.f32	s1, s13
 8014ec8:	eeb0 1a47 	vmov.f32	s2, s14
 8014ecc:	eef0 1a67 	vmov.f32	s3, s15
 8014ed0:	6818      	ldr	r0, [r3, #0]
 8014ed2:	f7fc fc71 	bl	80117b8 <nk_push_scissor>
    return ret;
 8014ed6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd90      	pop	{r4, r7, pc}
 8014ee4:	080288e8 	.word	0x080288e8
 8014ee8:	0802a798 	.word	0x0802a798
 8014eec:	08028884 	.word	0x08028884
 8014ef0:	00000000 	.word	0x00000000

08014ef4 <nk_handle_ptr>:
 *                          IMAGE
 *
 * ===============================================================*/
NK_API nk_handle
nk_handle_ptr(void *ptr)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b085      	sub	sp, #20
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
    nk_handle handle = {0};
 8014efc:	2300      	movs	r3, #0
 8014efe:	60fb      	str	r3, [r7, #12]
    handle.ptr = ptr;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	60fb      	str	r3, [r7, #12]
    return handle;
 8014f04:	68fb      	ldr	r3, [r7, #12]
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3714      	adds	r7, #20
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr
	...

08014f14 <nk_input_begin>:
 *                          INPUT
 *
 * ===============================================================*/
NK_API void
nk_input_begin(struct nk_context *ctx)
{
 8014f14:	b590      	push	{r4, r7, lr}
 8014f16:	b085      	sub	sp, #20
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
    int i;
    struct nk_input *in;
    NK_ASSERT(ctx);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d105      	bne.n	8014f2e <nk_input_begin+0x1a>
 8014f22:	4b2c      	ldr	r3, [pc, #176]	; (8014fd4 <nk_input_begin+0xc0>)
 8014f24:	4a2c      	ldr	r2, [pc, #176]	; (8014fd8 <nk_input_begin+0xc4>)
 8014f26:	210e      	movs	r1, #14
 8014f28:	482c      	ldr	r0, [pc, #176]	; (8014fdc <nk_input_begin+0xc8>)
 8014f2a:	f00f fde1 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d04b      	beq.n	8014fcc <nk_input_begin+0xb8>
    in = &ctx->input;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
 8014f3c:	e00a      	b.n	8014f54 <nk_input_begin+0x40>
        in->mouse.buttons[i].clicked = 0;
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	3310      	adds	r3, #16
 8014f44:	011b      	lsls	r3, r3, #4
 8014f46:	4413      	add	r3, r2
 8014f48:	3308      	adds	r3, #8
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NK_BUTTON_MAX; ++i)
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3301      	adds	r3, #1
 8014f52:	60fb      	str	r3, [r7, #12]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2b03      	cmp	r3, #3
 8014f58:	ddf1      	ble.n	8014f3e <nk_input_begin+0x2a>

    in->keyboard.text_len = 0;
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    in->mouse.scroll_delta = nk_vec2(0,0);
 8014f62:	68bc      	ldr	r4, [r7, #8]
 8014f64:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8014fe0 <nk_input_begin+0xcc>
 8014f68:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8014fe0 <nk_input_begin+0xcc>
 8014f6c:	f001 fd1c 	bl	80169a8 <nk_vec2>
 8014f70:	eeb0 7a40 	vmov.f32	s14, s0
 8014f74:	eef0 7a60 	vmov.f32	s15, s1
 8014f78:	ed84 7a57 	vstr	s14, [r4, #348]	; 0x15c
 8014f7c:	edc4 7a58 	vstr	s15, [r4, #352]	; 0x160
    in->mouse.prev.x = in->mouse.pos.x;
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    in->mouse.prev.y = in->mouse.pos.y;
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    in->mouse.delta.x = 0;
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	f04f 0200 	mov.w	r2, #0
 8014f9e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    in->mouse.delta.y = 0;
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	f04f 0200 	mov.w	r2, #0
 8014fa8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    for (i = 0; i < NK_KEY_MAX; i++)
 8014fac:	2300      	movs	r3, #0
 8014fae:	60fb      	str	r3, [r7, #12]
 8014fb0:	e008      	b.n	8014fc4 <nk_input_begin+0xb0>
        in->keyboard.keys[i].clicked = 0;
 8014fb2:	68ba      	ldr	r2, [r7, #8]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	00db      	lsls	r3, r3, #3
 8014fb8:	4413      	add	r3, r2
 8014fba:	2200      	movs	r2, #0
 8014fbc:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NK_KEY_MAX; i++)
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	60fb      	str	r3, [r7, #12]
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2b1d      	cmp	r3, #29
 8014fc8:	ddf3      	ble.n	8014fb2 <nk_input_begin+0x9e>
 8014fca:	e000      	b.n	8014fce <nk_input_begin+0xba>
    if (!ctx) return;
 8014fcc:	bf00      	nop
}
 8014fce:	3714      	adds	r7, #20
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd90      	pop	{r4, r7, pc}
 8014fd4:	08028934 	.word	0x08028934
 8014fd8:	0802a7a4 	.word	0x0802a7a4
 8014fdc:	08028938 	.word	0x08028938
 8014fe0:	00000000 	.word	0x00000000

08014fe4 <nk_input_end>:
NK_API void
nk_input_end(struct nk_context *ctx)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d105      	bne.n	8014ffe <nk_input_end+0x1a>
 8014ff2:	4b15      	ldr	r3, [pc, #84]	; (8015048 <nk_input_end+0x64>)
 8014ff4:	4a15      	ldr	r2, [pc, #84]	; (801504c <nk_input_end+0x68>)
 8014ff6:	2121      	movs	r1, #33	; 0x21
 8014ff8:	4815      	ldr	r0, [pc, #84]	; (8015050 <nk_input_end+0x6c>)
 8014ffa:	f00f fd79 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d01c      	beq.n	801503e <nk_input_end+0x5a>
    in = &ctx->input;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	60fb      	str	r3, [r7, #12]
    if (in->mouse.grab)
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 801500e:	2b00      	cmp	r3, #0
 8015010:	d003      	beq.n	801501a <nk_input_end+0x36>
        in->mouse.grab = 0;
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	2200      	movs	r2, #0
 8015016:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
    if (in->mouse.ungrab) {
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8015020:	2b00      	cmp	r3, #0
 8015022:	d00d      	beq.n	8015040 <nk_input_end+0x5c>
        in->mouse.grabbed = 0;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2200      	movs	r2, #0
 8015028:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        in->mouse.ungrab = 0;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2200      	movs	r2, #0
 8015030:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        in->mouse.grab = 0;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2200      	movs	r2, #0
 8015038:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
 801503c:	e000      	b.n	8015040 <nk_input_end+0x5c>
    if (!ctx) return;
 801503e:	bf00      	nop
    }
}
 8015040:	3710      	adds	r7, #16
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	08028934 	.word	0x08028934
 801504c:	0802a7b4 	.word	0x0802a7b4
 8015050:	08028938 	.word	0x08028938

08015054 <nk_input_motion>:
NK_API void
nk_input_motion(struct nk_context *ctx, int x, int y)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b086      	sub	sp, #24
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
    struct nk_input *in;
    NK_ASSERT(ctx);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d105      	bne.n	8015072 <nk_input_motion+0x1e>
 8015066:	4b1b      	ldr	r3, [pc, #108]	; (80150d4 <nk_input_motion+0x80>)
 8015068:	4a1b      	ldr	r2, [pc, #108]	; (80150d8 <nk_input_motion+0x84>)
 801506a:	2130      	movs	r1, #48	; 0x30
 801506c:	481b      	ldr	r0, [pc, #108]	; (80150dc <nk_input_motion+0x88>)
 801506e:	f00f fd3f 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d028      	beq.n	80150ca <nk_input_motion+0x76>
    in = &ctx->input;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	617b      	str	r3, [r7, #20]
    in->mouse.pos.x = (float)x;
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	ee07 3a90 	vmov	s15, r3
 8015082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
    in->mouse.pos.y = (float)y;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	ee07 3a90 	vmov	s15, r3
 8015092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
    in->mouse.delta.x = in->mouse.pos.x - in->mouse.prev.x;
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80150a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
    in->mouse.delta.y = in->mouse.pos.y - in->mouse.prev.y;
 80150b2:	697b      	ldr	r3, [r7, #20]
 80150b4:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80150be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
 80150c8:	e000      	b.n	80150cc <nk_input_motion+0x78>
    if (!ctx) return;
 80150ca:	bf00      	nop
}
 80150cc:	3718      	adds	r7, #24
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd80      	pop	{r7, pc}
 80150d2:	bf00      	nop
 80150d4:	08028934 	.word	0x08028934
 80150d8:	0802a7c4 	.word	0x0802a7c4
 80150dc:	08028938 	.word	0x08028938

080150e0 <nk_input_button>:
#endif
    in->keyboard.keys[key].down = down;
}
NK_API void
nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, nk_bool down)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b086      	sub	sp, #24
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	607a      	str	r2, [r7, #4]
 80150ea:	603b      	str	r3, [r7, #0]
 80150ec:	460b      	mov	r3, r1
 80150ee:	72fb      	strb	r3, [r7, #11]
    struct nk_mouse_button *btn;
    struct nk_input *in;
    NK_ASSERT(ctx);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d105      	bne.n	8015102 <nk_input_button+0x22>
 80150f6:	4b1d      	ldr	r3, [pc, #116]	; (801516c <nk_input_button+0x8c>)
 80150f8:	4a1d      	ldr	r2, [pc, #116]	; (8015170 <nk_input_button+0x90>)
 80150fa:	214c      	movs	r1, #76	; 0x4c
 80150fc:	481d      	ldr	r0, [pc, #116]	; (8015174 <nk_input_button+0x94>)
 80150fe:	f00f fcf7 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d02b      	beq.n	8015160 <nk_input_button+0x80>
    in = &ctx->input;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	617b      	str	r3, [r7, #20]
    if (in->mouse.buttons[id].down == down) return;
 801510c:	7afb      	ldrb	r3, [r7, #11]
 801510e:	697a      	ldr	r2, [r7, #20]
 8015110:	3310      	adds	r3, #16
 8015112:	011b      	lsls	r3, r3, #4
 8015114:	4413      	add	r3, r2
 8015116:	3304      	adds	r3, #4
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	6a3a      	ldr	r2, [r7, #32]
 801511c:	429a      	cmp	r2, r3
 801511e:	d021      	beq.n	8015164 <nk_input_button+0x84>

    btn = &in->mouse.buttons[id];
 8015120:	7afb      	ldrb	r3, [r7, #11]
 8015122:	3310      	adds	r3, #16
 8015124:	011b      	lsls	r3, r3, #4
 8015126:	697a      	ldr	r2, [r7, #20]
 8015128:	4413      	add	r3, r2
 801512a:	3304      	adds	r3, #4
 801512c:	613b      	str	r3, [r7, #16]
    btn->clicked_pos.x = (float)x;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	ee07 3a90 	vmov	s15, r3
 8015134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	edc3 7a02 	vstr	s15, [r3, #8]
    btn->clicked_pos.y = (float)y;
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	ee07 3a90 	vmov	s15, r3
 8015144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	edc3 7a03 	vstr	s15, [r3, #12]
    btn->down = down;
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	6a3a      	ldr	r2, [r7, #32]
 8015152:	601a      	str	r2, [r3, #0]
    btn->clicked++;
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	1c5a      	adds	r2, r3, #1
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	605a      	str	r2, [r3, #4]
 801515e:	e002      	b.n	8015166 <nk_input_button+0x86>
    if (!ctx) return;
 8015160:	bf00      	nop
 8015162:	e000      	b.n	8015166 <nk_input_button+0x86>
    if (in->mouse.buttons[id].down == down) return;
 8015164:	bf00      	nop
    {
        in->mouse.down_pos.x = btn->clicked_pos.x;
        in->mouse.down_pos.y = btn->clicked_pos.y;
    }
#endif
}
 8015166:	3718      	adds	r7, #24
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	08028934 	.word	0x08028934
 8015170:	0802a7d4 	.word	0x0802a7d4
 8015174:	08028938 	.word	0x08028938

08015178 <nk_input_has_mouse_click_in_rect>:
    return (btn->clicked && btn->down == nk_false) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 8015178:	b480      	push	{r7}
 801517a:	b089      	sub	sp, #36	; 0x24
 801517c:	af00      	add	r7, sp, #0
 801517e:	6178      	str	r0, [r7, #20]
 8015180:	460b      	mov	r3, r1
 8015182:	eeb0 6a40 	vmov.f32	s12, s0
 8015186:	eef0 6a60 	vmov.f32	s13, s1
 801518a:	eeb0 7a41 	vmov.f32	s14, s2
 801518e:	eef0 7a61 	vmov.f32	s15, s3
 8015192:	74fb      	strb	r3, [r7, #19]
 8015194:	ed87 6a00 	vstr	s12, [r7]
 8015198:	edc7 6a01 	vstr	s13, [r7, #4]
 801519c:	ed87 7a02 	vstr	s14, [r7, #8]
 80151a0:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d101      	bne.n	80151ae <nk_input_has_mouse_click_in_rect+0x36>
 80151aa:	2300      	movs	r3, #0
 80151ac:	e059      	b.n	8015262 <nk_input_has_mouse_click_in_rect+0xea>
    btn = &i->mouse.buttons[id];
 80151ae:	7cfb      	ldrb	r3, [r7, #19]
 80151b0:	3310      	adds	r3, #16
 80151b2:	011b      	lsls	r3, r3, #4
 80151b4:	697a      	ldr	r2, [r7, #20]
 80151b6:	4413      	add	r3, r2
 80151b8:	3304      	adds	r3, #4
 80151ba:	61fb      	str	r3, [r7, #28]
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 80151bc:	ed97 7a00 	vldr	s14, [r7]
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80151c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ce:	bf94      	ite	ls
 80151d0:	2301      	movls	r3, #1
 80151d2:	2300      	movhi	r3, #0
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	f083 0301 	eor.w	r3, r3, #1
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d13d      	bne.n	801525c <nk_input_has_mouse_click_in_rect+0xe4>
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80151e6:	edd7 6a00 	vldr	s13, [r7]
 80151ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80151ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80151f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151fa:	bf4c      	ite	mi
 80151fc:	2301      	movmi	r3, #1
 80151fe:	2300      	movpl	r3, #0
 8015200:	b2db      	uxtb	r3, r3
 8015202:	f083 0301 	eor.w	r3, r3, #1
 8015206:	b2db      	uxtb	r3, r3
 8015208:	2b00      	cmp	r3, #0
 801520a:	d127      	bne.n	801525c <nk_input_has_mouse_click_in_rect+0xe4>
 801520c:	ed97 7a01 	vldr	s14, [r7, #4]
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	edd3 7a03 	vldr	s15, [r3, #12]
 8015216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521e:	bf94      	ite	ls
 8015220:	2301      	movls	r3, #1
 8015222:	2300      	movhi	r3, #0
 8015224:	b2db      	uxtb	r3, r3
 8015226:	f083 0301 	eor.w	r3, r3, #1
 801522a:	b2db      	uxtb	r3, r3
 801522c:	2b00      	cmp	r3, #0
 801522e:	d115      	bne.n	801525c <nk_input_has_mouse_click_in_rect+0xe4>
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	ed93 7a03 	vldr	s14, [r3, #12]
 8015236:	edd7 6a01 	vldr	s13, [r7, #4]
 801523a:	edd7 7a03 	vldr	s15, [r7, #12]
 801523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524a:	bf4c      	ite	mi
 801524c:	2301      	movmi	r3, #1
 801524e:	2300      	movpl	r3, #0
 8015250:	b2db      	uxtb	r3, r3
 8015252:	f083 0301 	eor.w	r3, r3, #1
 8015256:	b2db      	uxtb	r3, r3
 8015258:	2b00      	cmp	r3, #0
 801525a:	d001      	beq.n	8015260 <nk_input_has_mouse_click_in_rect+0xe8>
        return nk_false;
 801525c:	2300      	movs	r3, #0
 801525e:	e000      	b.n	8015262 <nk_input_has_mouse_click_in_rect+0xea>
    return nk_true;
 8015260:	2301      	movs	r3, #1
}
 8015262:	4618      	mov	r0, r3
 8015264:	3724      	adds	r7, #36	; 0x24
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <nk_input_has_mouse_click_in_button_rect>:
NK_API nk_bool
nk_input_has_mouse_click_in_button_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b)
{
 801526e:	b480      	push	{r7}
 8015270:	b089      	sub	sp, #36	; 0x24
 8015272:	af00      	add	r7, sp, #0
 8015274:	6178      	str	r0, [r7, #20]
 8015276:	460b      	mov	r3, r1
 8015278:	eeb0 6a40 	vmov.f32	s12, s0
 801527c:	eef0 6a60 	vmov.f32	s13, s1
 8015280:	eeb0 7a41 	vmov.f32	s14, s2
 8015284:	eef0 7a61 	vmov.f32	s15, s3
 8015288:	74fb      	strb	r3, [r7, #19]
 801528a:	ed87 6a00 	vstr	s12, [r7]
 801528e:	edc7 6a01 	vstr	s13, [r7, #4]
 8015292:	ed87 7a02 	vstr	s14, [r7, #8]
 8015296:	edc7 7a03 	vstr	s15, [r7, #12]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d101      	bne.n	80152a4 <nk_input_has_mouse_click_in_button_rect+0x36>
 80152a0:	2300      	movs	r3, #0
 80152a2:	e059      	b.n	8015358 <nk_input_has_mouse_click_in_button_rect+0xea>
    btn = &i->mouse.buttons[id];
 80152a4:	7cfb      	ldrb	r3, [r7, #19]
 80152a6:	3310      	adds	r3, #16
 80152a8:	011b      	lsls	r3, r3, #4
 80152aa:	697a      	ldr	r2, [r7, #20]
 80152ac:	4413      	add	r3, r2
 80152ae:	3304      	adds	r3, #4
 80152b0:	61fb      	str	r3, [r7, #28]
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h)
        || !NK_INBOX(i->mouse.down_pos.x,i->mouse.down_pos.y,b.x,b.y,b.w,b.h))
#else
    if (!NK_INBOX(btn->clicked_pos.x,btn->clicked_pos.y,b.x,b.y,b.w,b.h))
 80152b2:	ed97 7a00 	vldr	s14, [r7]
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80152bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c4:	bf94      	ite	ls
 80152c6:	2301      	movls	r3, #1
 80152c8:	2300      	movhi	r3, #0
 80152ca:	b2db      	uxtb	r3, r3
 80152cc:	f083 0301 	eor.w	r3, r3, #1
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d13d      	bne.n	8015352 <nk_input_has_mouse_click_in_button_rect+0xe4>
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80152dc:	edd7 6a00 	vldr	s13, [r7]
 80152e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80152e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80152e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f0:	bf4c      	ite	mi
 80152f2:	2301      	movmi	r3, #1
 80152f4:	2300      	movpl	r3, #0
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	f083 0301 	eor.w	r3, r3, #1
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d127      	bne.n	8015352 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8015302:	ed97 7a01 	vldr	s14, [r7, #4]
 8015306:	69fb      	ldr	r3, [r7, #28]
 8015308:	edd3 7a03 	vldr	s15, [r3, #12]
 801530c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015314:	bf94      	ite	ls
 8015316:	2301      	movls	r3, #1
 8015318:	2300      	movhi	r3, #0
 801531a:	b2db      	uxtb	r3, r3
 801531c:	f083 0301 	eor.w	r3, r3, #1
 8015320:	b2db      	uxtb	r3, r3
 8015322:	2b00      	cmp	r3, #0
 8015324:	d115      	bne.n	8015352 <nk_input_has_mouse_click_in_button_rect+0xe4>
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	ed93 7a03 	vldr	s14, [r3, #12]
 801532c:	edd7 6a01 	vldr	s13, [r7, #4]
 8015330:	edd7 7a03 	vldr	s15, [r7, #12]
 8015334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015340:	bf4c      	ite	mi
 8015342:	2301      	movmi	r3, #1
 8015344:	2300      	movpl	r3, #0
 8015346:	b2db      	uxtb	r3, r3
 8015348:	f083 0301 	eor.w	r3, r3, #1
 801534c:	b2db      	uxtb	r3, r3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d001      	beq.n	8015356 <nk_input_has_mouse_click_in_button_rect+0xe8>
#endif
        return nk_false;
 8015352:	2300      	movs	r3, #0
 8015354:	e000      	b.n	8015358 <nk_input_has_mouse_click_in_button_rect+0xea>
    return nk_true;
 8015356:	2301      	movs	r3, #1
}
 8015358:	4618      	mov	r0, r3
 801535a:	3724      	adds	r7, #36	; 0x24
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr

08015364 <nk_input_has_mouse_click_down_in_rect>:
NK_API nk_bool
nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b08a      	sub	sp, #40	; 0x28
 8015368:	af00      	add	r7, sp, #0
 801536a:	61f8      	str	r0, [r7, #28]
 801536c:	460b      	mov	r3, r1
 801536e:	eeb0 6a40 	vmov.f32	s12, s0
 8015372:	eef0 6a60 	vmov.f32	s13, s1
 8015376:	eeb0 7a41 	vmov.f32	s14, s2
 801537a:	eef0 7a61 	vmov.f32	s15, s3
 801537e:	607a      	str	r2, [r7, #4]
 8015380:	76fb      	strb	r3, [r7, #27]
 8015382:	ed87 6a02 	vstr	s12, [r7, #8]
 8015386:	edc7 6a03 	vstr	s13, [r7, #12]
 801538a:	ed87 7a04 	vstr	s14, [r7, #16]
 801538e:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d101      	bne.n	801539c <nk_input_has_mouse_click_down_in_rect+0x38>
 8015398:	2300      	movs	r3, #0
 801539a:	e026      	b.n	80153ea <nk_input_has_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 801539c:	7efb      	ldrb	r3, [r7, #27]
 801539e:	3310      	adds	r3, #16
 80153a0:	011b      	lsls	r3, r3, #4
 80153a2:	69fa      	ldr	r2, [r7, #28]
 80153a4:	4413      	add	r3, r2
 80153a6:	3304      	adds	r3, #4
 80153a8:	627b      	str	r3, [r7, #36]	; 0x24
    return nk_input_has_mouse_click_in_rect(i, id, b) && (btn->down == down);
 80153aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80153ae:	edd7 6a03 	vldr	s13, [r7, #12]
 80153b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80153b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80153ba:	7efb      	ldrb	r3, [r7, #27]
 80153bc:	eeb0 0a46 	vmov.f32	s0, s12
 80153c0:	eef0 0a66 	vmov.f32	s1, s13
 80153c4:	eeb0 1a47 	vmov.f32	s2, s14
 80153c8:	eef0 1a67 	vmov.f32	s3, s15
 80153cc:	4619      	mov	r1, r3
 80153ce:	69f8      	ldr	r0, [r7, #28]
 80153d0:	f7ff fed2 	bl	8015178 <nk_input_has_mouse_click_in_rect>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d006      	beq.n	80153e8 <nk_input_has_mouse_click_down_in_rect+0x84>
 80153da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d101      	bne.n	80153e8 <nk_input_has_mouse_click_down_in_rect+0x84>
 80153e4:	2301      	movs	r3, #1
 80153e6:	e000      	b.n	80153ea <nk_input_has_mouse_click_down_in_rect+0x86>
 80153e8:	2300      	movs	r3, #0
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	3728      	adds	r7, #40	; 0x28
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}

080153f2 <nk_input_is_mouse_click_down_in_rect>:
            btn->clicked) ? nk_true : nk_false;
}
NK_API nk_bool
nk_input_is_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,
    struct nk_rect b, nk_bool down)
{
 80153f2:	b580      	push	{r7, lr}
 80153f4:	b08a      	sub	sp, #40	; 0x28
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	61f8      	str	r0, [r7, #28]
 80153fa:	460b      	mov	r3, r1
 80153fc:	eeb0 6a40 	vmov.f32	s12, s0
 8015400:	eef0 6a60 	vmov.f32	s13, s1
 8015404:	eeb0 7a41 	vmov.f32	s14, s2
 8015408:	eef0 7a61 	vmov.f32	s15, s3
 801540c:	607a      	str	r2, [r7, #4]
 801540e:	76fb      	strb	r3, [r7, #27]
 8015410:	ed87 6a02 	vstr	s12, [r7, #8]
 8015414:	edc7 6a03 	vstr	s13, [r7, #12]
 8015418:	ed87 7a04 	vstr	s14, [r7, #16]
 801541c:	edc7 7a05 	vstr	s15, [r7, #20]
    const struct nk_mouse_button *btn;
    if (!i) return nk_false;
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d101      	bne.n	801542a <nk_input_is_mouse_click_down_in_rect+0x38>
 8015426:	2300      	movs	r3, #0
 8015428:	e026      	b.n	8015478 <nk_input_is_mouse_click_down_in_rect+0x86>
    btn = &i->mouse.buttons[id];
 801542a:	7efb      	ldrb	r3, [r7, #27]
 801542c:	3310      	adds	r3, #16
 801542e:	011b      	lsls	r3, r3, #4
 8015430:	69fa      	ldr	r2, [r7, #28]
 8015432:	4413      	add	r3, r2
 8015434:	3304      	adds	r3, #4
 8015436:	627b      	str	r3, [r7, #36]	; 0x24
    return (nk_input_has_mouse_click_down_in_rect(i, id, b, down) &&
 8015438:	ed97 6a02 	vldr	s12, [r7, #8]
 801543c:	edd7 6a03 	vldr	s13, [r7, #12]
 8015440:	ed97 7a04 	vldr	s14, [r7, #16]
 8015444:	edd7 7a05 	vldr	s15, [r7, #20]
 8015448:	7efb      	ldrb	r3, [r7, #27]
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	eeb0 0a46 	vmov.f32	s0, s12
 8015450:	eef0 0a66 	vmov.f32	s1, s13
 8015454:	eeb0 1a47 	vmov.f32	s2, s14
 8015458:	eef0 1a67 	vmov.f32	s3, s15
 801545c:	4619      	mov	r1, r3
 801545e:	69f8      	ldr	r0, [r7, #28]
 8015460:	f7ff ff80 	bl	8015364 <nk_input_has_mouse_click_down_in_rect>
 8015464:	4603      	mov	r3, r0
            btn->clicked) ? nk_true : nk_false;
 8015466:	2b00      	cmp	r3, #0
 8015468:	d005      	beq.n	8015476 <nk_input_is_mouse_click_down_in_rect+0x84>
 801546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d001      	beq.n	8015476 <nk_input_is_mouse_click_down_in_rect+0x84>
 8015472:	2301      	movs	r3, #1
 8015474:	e000      	b.n	8015478 <nk_input_is_mouse_click_down_in_rect+0x86>
 8015476:	2300      	movs	r3, #0
}
 8015478:	4618      	mov	r0, r3
 801547a:	3728      	adds	r7, #40	; 0x28
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <nk_input_is_mouse_hovering_rect>:
        down = down || nk_input_is_mouse_click_in_rect(in, (enum nk_buttons)i, b);
    return down;
}
NK_API nk_bool
nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8015480:	b480      	push	{r7}
 8015482:	b087      	sub	sp, #28
 8015484:	af00      	add	r7, sp, #0
 8015486:	6178      	str	r0, [r7, #20]
 8015488:	eeb0 6a40 	vmov.f32	s12, s0
 801548c:	eef0 6a60 	vmov.f32	s13, s1
 8015490:	eeb0 7a41 	vmov.f32	s14, s2
 8015494:	eef0 7a61 	vmov.f32	s15, s3
 8015498:	ed87 6a01 	vstr	s12, [r7, #4]
 801549c:	edc7 6a02 	vstr	s13, [r7, #8]
 80154a0:	ed87 7a03 	vstr	s14, [r7, #12]
 80154a4:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d101      	bne.n	80154b2 <nk_input_is_mouse_hovering_rect+0x32>
 80154ae:	2300      	movs	r3, #0
 80154b0:	e032      	b.n	8015518 <nk_input_is_mouse_hovering_rect+0x98>
    return NK_INBOX(i->mouse.pos.x, i->mouse.pos.y, rect.x, rect.y, rect.w, rect.h);
 80154b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80154bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c4:	d827      	bhi.n	8015516 <nk_input_is_mouse_hovering_rect+0x96>
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80154cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80154d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80154d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e0:	d519      	bpl.n	8015516 <nk_input_is_mouse_hovering_rect+0x96>
 80154e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80154ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80154f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f4:	d80f      	bhi.n	8015516 <nk_input_is_mouse_hovering_rect+0x96>
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80154fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8015500:	edd7 7a04 	vldr	s15, [r7, #16]
 8015504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015510:	d501      	bpl.n	8015516 <nk_input_is_mouse_hovering_rect+0x96>
 8015512:	2301      	movs	r3, #1
 8015514:	e000      	b.n	8015518 <nk_input_is_mouse_hovering_rect+0x98>
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	371c      	adds	r7, #28
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr

08015524 <nk_input_is_mouse_prev_hovering_rect>:
NK_API nk_bool
nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)
{
 8015524:	b480      	push	{r7}
 8015526:	b087      	sub	sp, #28
 8015528:	af00      	add	r7, sp, #0
 801552a:	6178      	str	r0, [r7, #20]
 801552c:	eeb0 6a40 	vmov.f32	s12, s0
 8015530:	eef0 6a60 	vmov.f32	s13, s1
 8015534:	eeb0 7a41 	vmov.f32	s14, s2
 8015538:	eef0 7a61 	vmov.f32	s15, s3
 801553c:	ed87 6a01 	vstr	s12, [r7, #4]
 8015540:	edc7 6a02 	vstr	s13, [r7, #8]
 8015544:	ed87 7a03 	vstr	s14, [r7, #12]
 8015548:	edc7 7a04 	vstr	s15, [r7, #16]
    if (!i) return nk_false;
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <nk_input_is_mouse_prev_hovering_rect+0x32>
 8015552:	2300      	movs	r3, #0
 8015554:	e032      	b.n	80155bc <nk_input_is_mouse_prev_hovering_rect+0x98>
    return NK_INBOX(i->mouse.prev.x, i->mouse.prev.y, rect.x, rect.y, rect.w, rect.h);
 8015556:	ed97 7a01 	vldr	s14, [r7, #4]
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8015560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015568:	d827      	bhi.n	80155ba <nk_input_is_mouse_prev_hovering_rect+0x96>
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8015570:	edd7 6a01 	vldr	s13, [r7, #4]
 8015574:	edd7 7a03 	vldr	s15, [r7, #12]
 8015578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801557c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015584:	d519      	bpl.n	80155ba <nk_input_is_mouse_prev_hovering_rect+0x96>
 8015586:	ed97 7a02 	vldr	s14, [r7, #8]
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8015590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015598:	d80f      	bhi.n	80155ba <nk_input_is_mouse_prev_hovering_rect+0x96>
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 80155a0:	edd7 6a02 	vldr	s13, [r7, #8]
 80155a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80155a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80155ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80155b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b4:	d501      	bpl.n	80155ba <nk_input_is_mouse_prev_hovering_rect+0x96>
 80155b6:	2301      	movs	r3, #1
 80155b8:	e000      	b.n	80155bc <nk_input_is_mouse_prev_hovering_rect+0x98>
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	4618      	mov	r0, r3
 80155be:	371c      	adds	r7, #28
 80155c0:	46bd      	mov	sp, r7
 80155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c6:	4770      	bx	lr

080155c8 <nk_input_is_mouse_down>:
    if (!nk_input_is_mouse_hovering_rect(i, rect)) return nk_false;
    return nk_input_is_mouse_click_in_rect(i, id, rect);
}
NK_API nk_bool
nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b083      	sub	sp, #12
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	460b      	mov	r3, r1
 80155d2:	70fb      	strb	r3, [r7, #3]
    if (!i) return nk_false;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d101      	bne.n	80155de <nk_input_is_mouse_down+0x16>
 80155da:	2300      	movs	r3, #0
 80155dc:	e006      	b.n	80155ec <nk_input_is_mouse_down+0x24>
    return i->mouse.buttons[id].down;
 80155de:	78fb      	ldrb	r3, [r7, #3]
 80155e0:	687a      	ldr	r2, [r7, #4]
 80155e2:	3310      	adds	r3, #16
 80155e4:	011b      	lsls	r3, r3, #4
 80155e6:	4413      	add	r3, r2
 80155e8:	3304      	adds	r3, #4
 80155ea:	681b      	ldr	r3, [r3, #0]
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <nk_input_is_mouse_pressed>:
NK_API nk_bool
nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b085      	sub	sp, #20
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	460b      	mov	r3, r1
 8015602:	70fb      	strb	r3, [r7, #3]
    const struct nk_mouse_button *b;
    if (!i) return nk_false;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d101      	bne.n	801560e <nk_input_is_mouse_pressed+0x16>
 801560a:	2300      	movs	r3, #0
 801560c:	e011      	b.n	8015632 <nk_input_is_mouse_pressed+0x3a>
    b = &i->mouse.buttons[id];
 801560e:	78fb      	ldrb	r3, [r7, #3]
 8015610:	3310      	adds	r3, #16
 8015612:	011b      	lsls	r3, r3, #4
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	4413      	add	r3, r2
 8015618:	3304      	adds	r3, #4
 801561a:	60fb      	str	r3, [r7, #12]
    if (b->down && b->clicked)
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d005      	beq.n	8015630 <nk_input_is_mouse_pressed+0x38>
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d001      	beq.n	8015630 <nk_input_is_mouse_pressed+0x38>
        return nk_true;
 801562c:	2301      	movs	r3, #1
 801562e:	e000      	b.n	8015632 <nk_input_is_mouse_pressed+0x3a>
    return nk_false;
 8015630:	2300      	movs	r3, #0
}
 8015632:	4618      	mov	r0, r3
 8015634:	3714      	adds	r7, #20
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <nk_input_is_key_pressed>:
    if (!i) return nk_false;
    return (!i->mouse.buttons[id].down && i->mouse.buttons[id].clicked);
}
NK_API nk_bool
nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)
{
 801563e:	b480      	push	{r7}
 8015640:	b085      	sub	sp, #20
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	460b      	mov	r3, r1
 8015648:	70fb      	strb	r3, [r7, #3]
    const struct nk_key *k;
    if (!i) return nk_false;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d101      	bne.n	8015654 <nk_input_is_key_pressed+0x16>
 8015650:	2300      	movs	r3, #0
 8015652:	e017      	b.n	8015684 <nk_input_is_key_pressed+0x46>
    k = &i->keyboard.keys[key];
 8015654:	78fb      	ldrb	r3, [r7, #3]
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	4413      	add	r3, r2
 801565c:	60fb      	str	r3, [r7, #12]
    if ((k->down && k->clicked) || (!k->down && k->clicked >= 2))
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d003      	beq.n	801566e <nk_input_is_key_pressed+0x30>
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	685b      	ldr	r3, [r3, #4]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d107      	bne.n	801567e <nk_input_is_key_pressed+0x40>
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d105      	bne.n	8015682 <nk_input_is_key_pressed+0x44>
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	2b01      	cmp	r3, #1
 801567c:	d901      	bls.n	8015682 <nk_input_is_key_pressed+0x44>
        return nk_true;
 801567e:	2301      	movs	r3, #1
 8015680:	e000      	b.n	8015684 <nk_input_is_key_pressed+0x46>
    return nk_false;
 8015682:	2300      	movs	r3, #0
}
 8015684:	4618      	mov	r0, r3
 8015686:	3714      	adds	r7, #20
 8015688:	46bd      	mov	sp, r7
 801568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568e:	4770      	bx	lr

08015690 <nk_layout_set_min_row_height>:
 *                          LAYOUT
 *
 * ===============================================================*/
NK_API void
nk_layout_set_min_row_height(struct nk_context *ctx, float height)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	ed87 0a00 	vstr	s0, [r7]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d105      	bne.n	80156ae <nk_layout_set_min_row_height+0x1e>
 80156a2:	4b23      	ldr	r3, [pc, #140]	; (8015730 <nk_layout_set_min_row_height+0xa0>)
 80156a4:	4a23      	ldr	r2, [pc, #140]	; (8015734 <nk_layout_set_min_row_height+0xa4>)
 80156a6:	210f      	movs	r1, #15
 80156a8:	4823      	ldr	r0, [pc, #140]	; (8015738 <nk_layout_set_min_row_height+0xa8>)
 80156aa:	f00f fa21 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156b4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d105      	bne.n	80156c8 <nk_layout_set_min_row_height+0x38>
 80156bc:	4b1f      	ldr	r3, [pc, #124]	; (801573c <nk_layout_set_min_row_height+0xac>)
 80156be:	4a1d      	ldr	r2, [pc, #116]	; (8015734 <nk_layout_set_min_row_height+0xa4>)
 80156c0:	2110      	movs	r1, #16
 80156c2:	481d      	ldr	r0, [pc, #116]	; (8015738 <nk_layout_set_min_row_height+0xa8>)
 80156c4:	f00f fa14 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156ce:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d105      	bne.n	80156e6 <nk_layout_set_min_row_height+0x56>
 80156da:	4b19      	ldr	r3, [pc, #100]	; (8015740 <nk_layout_set_min_row_height+0xb0>)
 80156dc:	4a15      	ldr	r2, [pc, #84]	; (8015734 <nk_layout_set_min_row_height+0xa4>)
 80156de:	2111      	movs	r1, #17
 80156e0:	4815      	ldr	r0, [pc, #84]	; (8015738 <nk_layout_set_min_row_height+0xa8>)
 80156e2:	f00f fa05 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d01d      	beq.n	8015728 <nk_layout_set_min_row_height+0x98>
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d016      	beq.n	8015728 <nk_layout_set_min_row_height+0x98>
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015700:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015708:	2b00      	cmp	r3, #0
 801570a:	d00d      	beq.n	8015728 <nk_layout_set_min_row_height+0x98>
        return;

    win = ctx->current;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015712:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015716:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801571e:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = height;
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	683a      	ldr	r2, [r7, #0]
 8015724:	671a      	str	r2, [r3, #112]	; 0x70
 8015726:	e000      	b.n	801572a <nk_layout_set_min_row_height+0x9a>
        return;
 8015728:	bf00      	nop
}
 801572a:	3710      	adds	r7, #16
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	08028954 	.word	0x08028954
 8015734:	0802a7e4 	.word	0x0802a7e4
 8015738:	08028958 	.word	0x08028958
 801573c:	08028974 	.word	0x08028974
 8015740:	08028984 	.word	0x08028984

08015744 <nk_layout_reset_min_row_height>:
NK_API void
nk_layout_reset_min_row_height(struct nk_context *ctx)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b084      	sub	sp, #16
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d105      	bne.n	801575e <nk_layout_reset_min_row_height+0x1a>
 8015752:	4b34      	ldr	r3, [pc, #208]	; (8015824 <nk_layout_reset_min_row_height+0xe0>)
 8015754:	4a34      	ldr	r2, [pc, #208]	; (8015828 <nk_layout_reset_min_row_height+0xe4>)
 8015756:	211f      	movs	r1, #31
 8015758:	4834      	ldr	r0, [pc, #208]	; (801582c <nk_layout_reset_min_row_height+0xe8>)
 801575a:	f00f f9c9 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015764:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015768:	2b00      	cmp	r3, #0
 801576a:	d105      	bne.n	8015778 <nk_layout_reset_min_row_height+0x34>
 801576c:	4b30      	ldr	r3, [pc, #192]	; (8015830 <nk_layout_reset_min_row_height+0xec>)
 801576e:	4a2e      	ldr	r2, [pc, #184]	; (8015828 <nk_layout_reset_min_row_height+0xe4>)
 8015770:	2120      	movs	r1, #32
 8015772:	482e      	ldr	r0, [pc, #184]	; (801582c <nk_layout_reset_min_row_height+0xe8>)
 8015774:	f00f f9bc 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801577e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015786:	2b00      	cmp	r3, #0
 8015788:	d105      	bne.n	8015796 <nk_layout_reset_min_row_height+0x52>
 801578a:	4b2a      	ldr	r3, [pc, #168]	; (8015834 <nk_layout_reset_min_row_height+0xf0>)
 801578c:	4a26      	ldr	r2, [pc, #152]	; (8015828 <nk_layout_reset_min_row_height+0xe4>)
 801578e:	2121      	movs	r1, #33	; 0x21
 8015790:	4826      	ldr	r0, [pc, #152]	; (801582c <nk_layout_reset_min_row_height+0xe8>)
 8015792:	f00f f9ad 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d03e      	beq.n	801581a <nk_layout_reset_min_row_height+0xd6>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80157a2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d037      	beq.n	801581a <nk_layout_reset_min_row_height+0xd6>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80157b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80157b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d02e      	beq.n	801581a <nk_layout_reset_min_row_height+0xd6>
        return;

    win = ctx->current;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80157c2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80157c6:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157ce:	60bb      	str	r3, [r7, #8]
    layout->row.min_height = ctx->style.font->height;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80157d6:	685a      	ldr	r2, [r3, #4]
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	671a      	str	r2, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.text.padding.y*2;
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 80157e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80157ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    layout->row.min_height += ctx->style.window.min_row_height_padding*2;
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015802:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 8015806:	edd3 7a00 	vldr	s15, [r3]
 801580a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801580e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8015818:	e000      	b.n	801581c <nk_layout_reset_min_row_height+0xd8>
        return;
 801581a:	bf00      	nop
}
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	08028954 	.word	0x08028954
 8015828:	0802a804 	.word	0x0802a804
 801582c:	08028958 	.word	0x08028958
 8015830:	08028974 	.word	0x08028974
 8015834:	08028984 	.word	0x08028984

08015838 <nk_layout_row_calculate_usable_space>:
NK_LIB float
nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,
    float total_space, int columns)
{
 8015838:	b480      	push	{r7}
 801583a:	b089      	sub	sp, #36	; 0x24
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	460b      	mov	r3, r1
 8015842:	ed87 0a01 	vstr	s0, [r7, #4]
 8015846:	603a      	str	r2, [r7, #0]
 8015848:	72fb      	strb	r3, [r7, #11]

    struct nk_vec2 spacing;

    NK_UNUSED(type);

    spacing = style->window.spacing;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015850:	461a      	mov	r2, r3
 8015852:	f107 0310 	add.w	r3, r7, #16
 8015856:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 801585a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801585e:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate the usable panel space */
    panel_spacing = (float)NK_MAX(columns - 1, 0) * spacing.x;
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	dd06      	ble.n	8015876 <nk_layout_row_calculate_usable_space+0x3e>
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	3b01      	subs	r3, #1
 801586c:	ee07 3a90 	vmov	s15, r3
 8015870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015874:	e001      	b.n	801587a <nk_layout_row_calculate_usable_space+0x42>
 8015876:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80158ac <nk_layout_row_calculate_usable_space+0x74>
 801587a:	ed97 7a04 	vldr	s14, [r7, #16]
 801587e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015882:	edc7 7a07 	vstr	s15, [r7, #28]
    panel_space  = total_space - panel_spacing;
 8015886:	ed97 7a01 	vldr	s14, [r7, #4]
 801588a:	edd7 7a07 	vldr	s15, [r7, #28]
 801588e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015892:	edc7 7a06 	vstr	s15, [r7, #24]
    return panel_space;
 8015896:	69bb      	ldr	r3, [r7, #24]
 8015898:	ee07 3a90 	vmov	s15, r3
}
 801589c:	eeb0 0a67 	vmov.f32	s0, s15
 80158a0:	3724      	adds	r7, #36	; 0x24
 80158a2:	46bd      	mov	sp, r7
 80158a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a8:	4770      	bx	lr
 80158aa:	bf00      	nop
 80158ac:	00000000 	.word	0x00000000

080158b0 <nk_panel_layout>:
NK_LIB void
nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,
    float height, int cols)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b08e      	sub	sp, #56	; 0x38
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80158be:	603a      	str	r2, [r7, #0]
    struct nk_command_buffer *out;

    struct nk_vec2 item_spacing;
    struct nk_color color;

    NK_ASSERT(ctx);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d105      	bne.n	80158d2 <nk_panel_layout+0x22>
 80158c6:	4b78      	ldr	r3, [pc, #480]	; (8015aa8 <nk_panel_layout+0x1f8>)
 80158c8:	4a78      	ldr	r2, [pc, #480]	; (8015aac <nk_panel_layout+0x1fc>)
 80158ca:	2148      	movs	r1, #72	; 0x48
 80158cc:	4878      	ldr	r0, [pc, #480]	; (8015ab0 <nk_panel_layout+0x200>)
 80158ce:	f00f f90f 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158d8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d105      	bne.n	80158ec <nk_panel_layout+0x3c>
 80158e0:	4b74      	ldr	r3, [pc, #464]	; (8015ab4 <nk_panel_layout+0x204>)
 80158e2:	4a72      	ldr	r2, [pc, #456]	; (8015aac <nk_panel_layout+0x1fc>)
 80158e4:	2149      	movs	r1, #73	; 0x49
 80158e6:	4872      	ldr	r0, [pc, #456]	; (8015ab0 <nk_panel_layout+0x200>)
 80158e8:	f00f f902 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80158f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d105      	bne.n	801590a <nk_panel_layout+0x5a>
 80158fe:	4b6e      	ldr	r3, [pc, #440]	; (8015ab8 <nk_panel_layout+0x208>)
 8015900:	4a6a      	ldr	r2, [pc, #424]	; (8015aac <nk_panel_layout+0x1fc>)
 8015902:	214a      	movs	r1, #74	; 0x4a
 8015904:	486a      	ldr	r0, [pc, #424]	; (8015ab0 <nk_panel_layout+0x200>)
 8015906:	f00f f8f3 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	f000 80c6 	beq.w	8015a9e <nk_panel_layout+0x1ee>
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015918:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 80be 	beq.w	8015a9e <nk_panel_layout+0x1ee>
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015928:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801592c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015930:	2b00      	cmp	r3, #0
 8015932:	f000 80b4 	beq.w	8015a9e <nk_panel_layout+0x1ee>
        return;

    /* prefetch some configuration data */
    layout = win->layout;
 8015936:	68bb      	ldr	r3, [r7, #8]
 8015938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801593c:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8015944:	633b      	str	r3, [r7, #48]	; 0x30
    out = &win->buffer;
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	3364      	adds	r3, #100	; 0x64
 801594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    color = style->window.background;
 801594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015952:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 8015956:	623b      	str	r3, [r7, #32]
    item_spacing = style->window.spacing;
 8015958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801595e:	461a      	mov	r2, r3
 8015960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015964:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8015968:	e892 0003 	ldmia.w	r2, {r0, r1}
 801596c:	e883 0003 	stmia.w	r3, {r0, r1}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 8015970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015978:	2b00      	cmp	r3, #0
 801597a:	d005      	beq.n	8015988 <nk_panel_layout+0xd8>
 801597c:	4b4f      	ldr	r3, [pc, #316]	; (8015abc <nk_panel_layout+0x20c>)
 801597e:	4a4b      	ldr	r2, [pc, #300]	; (8015aac <nk_panel_layout+0x1fc>)
 8015980:	215a      	movs	r1, #90	; 0x5a
 8015982:	484b      	ldr	r0, [pc, #300]	; (8015ab0 <nk_panel_layout+0x200>)
 8015984:	f00f f8b4 	bl	8024af0 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 8015988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015990:	2b00      	cmp	r3, #0
 8015992:	d005      	beq.n	80159a0 <nk_panel_layout+0xf0>
 8015994:	4b4a      	ldr	r3, [pc, #296]	; (8015ac0 <nk_panel_layout+0x210>)
 8015996:	4a45      	ldr	r2, [pc, #276]	; (8015aac <nk_panel_layout+0x1fc>)
 8015998:	215b      	movs	r1, #91	; 0x5b
 801599a:	4845      	ldr	r0, [pc, #276]	; (8015ab0 <nk_panel_layout+0x200>)
 801599c:	f00f f8a8 	bl	8024af0 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 80159a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d005      	beq.n	80159b8 <nk_panel_layout+0x108>
 80159ac:	4b45      	ldr	r3, [pc, #276]	; (8015ac4 <nk_panel_layout+0x214>)
 80159ae:	4a3f      	ldr	r2, [pc, #252]	; (8015aac <nk_panel_layout+0x1fc>)
 80159b0:	215c      	movs	r1, #92	; 0x5c
 80159b2:	483f      	ldr	r0, [pc, #252]	; (8015ab0 <nk_panel_layout+0x200>)
 80159b4:	f00f f89c 	bl	8024af0 <__assert_func>

    /* update the current row and set the current row layout */
    layout->row.index = 0;
 80159b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ba:	2200      	movs	r2, #0
 80159bc:	669a      	str	r2, [r3, #104]	; 0x68
    layout->at_y += layout->row.height;
 80159be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80159c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159c6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80159ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    layout->row.columns = cols;
 80159d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159d6:	683a      	ldr	r2, [r7, #0]
 80159d8:	675a      	str	r2, [r3, #116]	; 0x74
    if (height == 0.0f)
 80159da:	edd7 7a01 	vldr	s15, [r7, #4]
 80159de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80159e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e6:	d117      	bne.n	8015a18 <nk_panel_layout+0x168>
        layout->row.height = NK_MAX(height, layout->row.min_height) + item_spacing.y;
 80159e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ea:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80159ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80159f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fa:	d503      	bpl.n	8015a04 <nk_panel_layout+0x154>
 80159fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159fe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8015a02:	e001      	b.n	8015a08 <nk_panel_layout+0x158>
 8015a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8015a08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a12:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8015a16:	e008      	b.n	8015a2a <nk_panel_layout+0x17a>
    else layout->row.height = height + item_spacing.y;
 8015a18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8015a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a26:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    layout->row.item_offset = 0;
 8015a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a2c:	f04f 0200 	mov.w	r2, #0
 8015a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (layout->flags & NK_WINDOW_DYNAMIC) {
 8015a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d02f      	beq.n	8015aa0 <nk_panel_layout+0x1f0>
        /* draw background for dynamic panels */
        struct nk_rect background;
        background.x = win->bounds.x;
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a44:	613b      	str	r3, [r7, #16]
        background.w = win->bounds.w;
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a4a:	61bb      	str	r3, [r7, #24]
        background.y = layout->at_y - 1.0f;
 8015a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a4e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8015a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a5a:	edc7 7a05 	vstr	s15, [r7, #20]
        background.h = layout->row.height + 1.0f;
 8015a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a60:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8015a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a6c:	edc7 7a07 	vstr	s15, [r7, #28]
        nk_fill_rect(out, background, 0, color);
 8015a70:	ed97 6a04 	vldr	s12, [r7, #16]
 8015a74:	edd7 6a05 	vldr	s13, [r7, #20]
 8015a78:	ed97 7a06 	vldr	s14, [r7, #24]
 8015a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015a80:	6a39      	ldr	r1, [r7, #32]
 8015a82:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8015ac8 <nk_panel_layout+0x218>
 8015a86:	eeb0 0a46 	vmov.f32	s0, s12
 8015a8a:	eef0 0a66 	vmov.f32	s1, s13
 8015a8e:	eeb0 1a47 	vmov.f32	s2, s14
 8015a92:	eef0 1a67 	vmov.f32	s3, s15
 8015a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a98:	f7fc f80e 	bl	8011ab8 <nk_fill_rect>
 8015a9c:	e000      	b.n	8015aa0 <nk_panel_layout+0x1f0>
        return;
 8015a9e:	bf00      	nop
    }
}
 8015aa0:	3738      	adds	r7, #56	; 0x38
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	08028954 	.word	0x08028954
 8015aac:	0802a824 	.word	0x0802a824
 8015ab0:	08028958 	.word	0x08028958
 8015ab4:	08028974 	.word	0x08028974
 8015ab8:	08028984 	.word	0x08028984
 8015abc:	0802899c 	.word	0x0802899c
 8015ac0:	080289c4 	.word	0x080289c4
 8015ac4:	080289e8 	.word	0x080289e8
 8015ac8:	00000000 	.word	0x00000000

08015acc <nk_row_layout>:
NK_LIB void
nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, int width)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b088      	sub	sp, #32
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6178      	str	r0, [r7, #20]
 8015ad4:	ed87 0a03 	vstr	s0, [r7, #12]
 8015ad8:	60ba      	str	r2, [r7, #8]
 8015ada:	607b      	str	r3, [r7, #4]
 8015adc:	460b      	mov	r3, r1
 8015ade:	74fb      	strb	r3, [r7, #19]
    /* update the current row and set the current row layout */
    struct nk_window *win;
    NK_ASSERT(ctx);
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d105      	bne.n	8015af2 <nk_row_layout+0x26>
 8015ae6:	4b3a      	ldr	r3, [pc, #232]	; (8015bd0 <nk_row_layout+0x104>)
 8015ae8:	4a3a      	ldr	r2, [pc, #232]	; (8015bd4 <nk_row_layout+0x108>)
 8015aea:	2177      	movs	r1, #119	; 0x77
 8015aec:	483a      	ldr	r0, [pc, #232]	; (8015bd8 <nk_row_layout+0x10c>)
 8015aee:	f00e ffff 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015af8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d105      	bne.n	8015b0c <nk_row_layout+0x40>
 8015b00:	4b36      	ldr	r3, [pc, #216]	; (8015bdc <nk_row_layout+0x110>)
 8015b02:	4a34      	ldr	r2, [pc, #208]	; (8015bd4 <nk_row_layout+0x108>)
 8015b04:	2178      	movs	r1, #120	; 0x78
 8015b06:	4834      	ldr	r0, [pc, #208]	; (8015bd8 <nk_row_layout+0x10c>)
 8015b08:	f00e fff2 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b12:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d105      	bne.n	8015b2a <nk_row_layout+0x5e>
 8015b1e:	4b30      	ldr	r3, [pc, #192]	; (8015be0 <nk_row_layout+0x114>)
 8015b20:	4a2c      	ldr	r2, [pc, #176]	; (8015bd4 <nk_row_layout+0x108>)
 8015b22:	2179      	movs	r1, #121	; 0x79
 8015b24:	482c      	ldr	r0, [pc, #176]	; (8015bd8 <nk_row_layout+0x10c>)
 8015b26:	f00e ffe3 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d04a      	beq.n	8015bc6 <nk_row_layout+0xfa>
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b36:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d043      	beq.n	8015bc6 <nk_row_layout+0xfa>
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b44:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d03a      	beq.n	8015bc6 <nk_row_layout+0xfa>
        return;

    win = ctx->current;
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b56:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015b5a:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8015b5c:	68ba      	ldr	r2, [r7, #8]
 8015b5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8015b62:	69f9      	ldr	r1, [r7, #28]
 8015b64:	6978      	ldr	r0, [r7, #20]
 8015b66:	f7ff fea3 	bl	80158b0 <nk_panel_layout>
    if (fmt == NK_DYNAMIC)
 8015b6a:	7cfb      	ldrb	r3, [r7, #19]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d106      	bne.n	8015b7e <nk_row_layout+0xb2>
        win->layout->row.type = NK_LAYOUT_DYNAMIC_FIXED;
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b76:	2200      	movs	r2, #0
 8015b78:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015b7c:	e005      	b.n	8015b8a <nk_row_layout+0xbe>
    else win->layout->row.type = NK_LAYOUT_STATIC_FIXED;
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b84:	2204      	movs	r2, #4
 8015b86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

    win->layout->row.ratio = 0;
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b90:	2200      	movs	r2, #0
 8015b92:	679a      	str	r2, [r3, #120]	; 0x78
    win->layout->row.filled = 0;
 8015b94:	69fb      	ldr	r3, [r7, #28]
 8015b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b9a:	f04f 0200 	mov.w	r2, #0
 8015b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    win->layout->row.item_offset = 0;
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ba8:	f04f 0200 	mov.w	r2, #0
 8015bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    win->layout->row.item_width = (float)width;
 8015bb0:	69fb      	ldr	r3, [r7, #28]
 8015bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	ee07 2a90 	vmov	s15, r2
 8015bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bc0:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8015bc4:	e000      	b.n	8015bc8 <nk_row_layout+0xfc>
        return;
 8015bc6:	bf00      	nop
}
 8015bc8:	3720      	adds	r7, #32
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	08028954 	.word	0x08028954
 8015bd4:	0802a834 	.word	0x0802a834
 8015bd8:	08028958 	.word	0x08028958
 8015bdc:	08028974 	.word	0x08028974
 8015be0:	08028984 	.word	0x08028984

08015be4 <nk_layout_row_dynamic>:
    win = ctx->current;
    return NK_CLAMP(0.0f, pixel_width/win->bounds.x, 1.0f);
}
NK_API void
nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b084      	sub	sp, #16
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	ed87 0a02 	vstr	s0, [r7, #8]
 8015bf0:	6079      	str	r1, [r7, #4]
    nk_row_layout(ctx, NK_DYNAMIC, height, cols, 0);
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	687a      	ldr	r2, [r7, #4]
 8015bf6:	ed97 0a02 	vldr	s0, [r7, #8]
 8015bfa:	2100      	movs	r1, #0
 8015bfc:	68f8      	ldr	r0, [r7, #12]
 8015bfe:	f7ff ff65 	bl	8015acc <nk_row_layout>
}
 8015c02:	bf00      	nop
 8015c04:	3710      	adds	r7, #16
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
	...

08015c0c <nk_layout_row>:
    layout->row.item_offset = 0;
}
NK_API void
nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,
    float height, int cols, const float *ratio)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b08c      	sub	sp, #48	; 0x30
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6178      	str	r0, [r7, #20]
 8015c14:	ed87 0a03 	vstr	s0, [r7, #12]
 8015c18:	60ba      	str	r2, [r7, #8]
 8015c1a:	607b      	str	r3, [r7, #4]
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	74fb      	strb	r3, [r7, #19]
    int i;
    int n_undef = 0;
 8015c20:	2300      	movs	r3, #0
 8015c22:	62bb      	str	r3, [r7, #40]	; 0x28
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d105      	bne.n	8015c36 <nk_layout_row+0x2a>
 8015c2a:	4b73      	ldr	r3, [pc, #460]	; (8015df8 <nk_layout_row+0x1ec>)
 8015c2c:	4a73      	ldr	r2, [pc, #460]	; (8015dfc <nk_layout_row+0x1f0>)
 8015c2e:	21ed      	movs	r1, #237	; 0xed
 8015c30:	4873      	ldr	r0, [pc, #460]	; (8015e00 <nk_layout_row+0x1f4>)
 8015c32:	f00e ff5d 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8015c36:	697b      	ldr	r3, [r7, #20]
 8015c38:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c3c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d105      	bne.n	8015c50 <nk_layout_row+0x44>
 8015c44:	4b6f      	ldr	r3, [pc, #444]	; (8015e04 <nk_layout_row+0x1f8>)
 8015c46:	4a6d      	ldr	r2, [pc, #436]	; (8015dfc <nk_layout_row+0x1f0>)
 8015c48:	21ee      	movs	r1, #238	; 0xee
 8015c4a:	486d      	ldr	r0, [pc, #436]	; (8015e00 <nk_layout_row+0x1f4>)
 8015c4c:	f00e ff50 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c56:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d105      	bne.n	8015c6e <nk_layout_row+0x62>
 8015c62:	4b69      	ldr	r3, [pc, #420]	; (8015e08 <nk_layout_row+0x1fc>)
 8015c64:	4a65      	ldr	r2, [pc, #404]	; (8015dfc <nk_layout_row+0x1f0>)
 8015c66:	21ef      	movs	r1, #239	; 0xef
 8015c68:	4865      	ldr	r0, [pc, #404]	; (8015e00 <nk_layout_row+0x1f4>)
 8015c6a:	f00e ff41 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f000 80bd 	beq.w	8015df0 <nk_layout_row+0x1e4>
 8015c76:	697b      	ldr	r3, [r7, #20]
 8015c78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c7c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	f000 80b5 	beq.w	8015df0 <nk_layout_row+0x1e4>
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c8c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 80ab 	beq.w	8015df0 <nk_layout_row+0x1e4>
        return;

    win = ctx->current;
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ca0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015ca4:	623b      	str	r3, [r7, #32]
    layout = win->layout;
 8015ca6:	6a3b      	ldr	r3, [r7, #32]
 8015ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015cac:	61fb      	str	r3, [r7, #28]
    nk_panel_layout(ctx, win, height, cols);
 8015cae:	68ba      	ldr	r2, [r7, #8]
 8015cb0:	ed97 0a03 	vldr	s0, [r7, #12]
 8015cb4:	6a39      	ldr	r1, [r7, #32]
 8015cb6:	6978      	ldr	r0, [r7, #20]
 8015cb8:	f7ff fdfa 	bl	80158b0 <nk_panel_layout>
    if (fmt == NK_DYNAMIC) {
 8015cbc:	7cfb      	ldrb	r3, [r7, #19]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d17b      	bne.n	8015dba <nk_layout_row+0x1ae>
        /* calculate width of undefined widget ratios */
        float r = 0;
 8015cc2:	f04f 0300 	mov.w	r3, #0
 8015cc6:	627b      	str	r3, [r7, #36]	; 0x24
        layout->row.ratio = ratio;
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	679a      	str	r2, [r3, #120]	; 0x78
        for (i = 0; i < cols; ++i) {
 8015cce:	2300      	movs	r3, #0
 8015cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cd2:	e01d      	b.n	8015d10 <nk_layout_row+0x104>
            if (ratio[i] < 0.0f)
 8015cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cd6:	009b      	lsls	r3, r3, #2
 8015cd8:	687a      	ldr	r2, [r7, #4]
 8015cda:	4413      	add	r3, r2
 8015cdc:	edd3 7a00 	vldr	s15, [r3]
 8015ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce8:	d503      	bpl.n	8015cf2 <nk_layout_row+0xe6>
                n_undef++;
 8015cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cec:	3301      	adds	r3, #1
 8015cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cf0:	e00b      	b.n	8015d0a <nk_layout_row+0xfe>
            else r += ratio[i];
 8015cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf4:	009b      	lsls	r3, r3, #2
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	edd3 7a00 	vldr	s15, [r3]
 8015cfe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        for (i = 0; i < cols; ++i) {
 8015d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	dbdd      	blt.n	8015cd4 <nk_layout_row+0xc8>
        }
        r = NK_SATURATE(1.0f - r);
 8015d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d30:	dc0a      	bgt.n	8015d48 <nk_layout_row+0x13c>
 8015d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d46:	dd16      	ble.n	8015d76 <nk_layout_row+0x16a>
 8015d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d60:	dd02      	ble.n	8015d68 <nk_layout_row+0x15c>
 8015d62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d66:	e008      	b.n	8015d7a <nk_layout_row+0x16e>
 8015d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d74:	e001      	b.n	8015d7a <nk_layout_row+0x16e>
 8015d76:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015e0c <nk_layout_row+0x200>
 8015d7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        layout->row.type = NK_LAYOUT_DYNAMIC;
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	2203      	movs	r2, #3
 8015d82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = (r > 0 && n_undef > 0) ? (r / (float)n_undef):0;
 8015d86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d92:	dd0c      	ble.n	8015dae <nk_layout_row+0x1a2>
 8015d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	dd09      	ble.n	8015dae <nk_layout_row+0x1a2>
 8015d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9c:	ee07 3a90 	vmov	s15, r3
 8015da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015da4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8015da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015dac:	e001      	b.n	8015db2 <nk_layout_row+0x1a6>
 8015dae:	eddf 7a17 	vldr	s15, [pc, #92]	; 8015e0c <nk_layout_row+0x200>
 8015db2:	69fb      	ldr	r3, [r7, #28]
 8015db4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 8015db8:	e00f      	b.n	8015dda <nk_layout_row+0x1ce>
    } else {
        layout->row.ratio = ratio;
 8015dba:	69fb      	ldr	r3, [r7, #28]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	679a      	str	r2, [r3, #120]	; 0x78
        layout->row.type = NK_LAYOUT_STATIC;
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	2207      	movs	r2, #7
 8015dc4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        layout->row.item_width = 0;
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	f04f 0200 	mov.w	r2, #0
 8015dce:	67da      	str	r2, [r3, #124]	; 0x7c
        layout->row.item_offset = 0;
 8015dd0:	69fb      	ldr	r3, [r7, #28]
 8015dd2:	f04f 0200 	mov.w	r2, #0
 8015dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }
    layout->row.item_offset = 0;
 8015dda:	69fb      	ldr	r3, [r7, #28]
 8015ddc:	f04f 0200 	mov.w	r2, #0
 8015de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    layout->row.filled = 0;
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	f04f 0200 	mov.w	r2, #0
 8015dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8015dee:	e000      	b.n	8015df2 <nk_layout_row+0x1e6>
        return;
 8015df0:	bf00      	nop
}
 8015df2:	3730      	adds	r7, #48	; 0x30
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	08028954 	.word	0x08028954
 8015dfc:	0802a844 	.word	0x0802a844
 8015e00:	08028958 	.word	0x08028958
 8015e04:	08028974 	.word	0x08028974
 8015e08:	08028984 	.word	0x08028984
 8015e0c:	00000000 	.word	0x00000000

08015e10 <nk_panel_alloc_row>:
    ret.y += -layout->at_y + (float)*layout->offset_y;
    return ret;
}
NK_LIB void
nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b086      	sub	sp, #24
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
    struct nk_panel *layout = win->layout;
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e20:	617b      	str	r3, [r7, #20]
    struct nk_vec2 spacing = ctx->style.window.spacing;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e28:	461a      	mov	r2, r3
 8015e2a:	f107 0308 	add.w	r3, r7, #8
 8015e2e:	f602 223c 	addw	r2, r2, #2620	; 0xa3c
 8015e32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e36:	e883 0003 	stmia.w	r3, {r0, r1}
    const float row_height = layout->row.height - spacing.y;
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8015e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8015e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e48:	edc7 7a04 	vstr	s15, [r7, #16]
    nk_panel_layout(ctx, win, row_height, layout->row.columns);
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e50:	461a      	mov	r2, r3
 8015e52:	ed97 0a04 	vldr	s0, [r7, #16]
 8015e56:	6839      	ldr	r1, [r7, #0]
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f7ff fd29 	bl	80158b0 <nk_panel_layout>
}
 8015e5e:	bf00      	nop
 8015e60:	3718      	adds	r7, #24
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}
	...

08015e68 <nk_layout_widget_space>:
NK_LIB void
nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,
    struct nk_window *win, int modify)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b092      	sub	sp, #72	; 0x48
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
 8015e74:	603b      	str	r3, [r7, #0]
    struct nk_panel *layout;
    const struct nk_style *style;

    struct nk_vec2 spacing;

    float item_offset = 0;
 8015e76:	f04f 0300 	mov.w	r3, #0
 8015e7a:	647b      	str	r3, [r7, #68]	; 0x44
    float item_width = 0;
 8015e7c:	f04f 0300 	mov.w	r3, #0
 8015e80:	643b      	str	r3, [r7, #64]	; 0x40
    float item_spacing = 0;
 8015e82:	f04f 0300 	mov.w	r3, #0
 8015e86:	63fb      	str	r3, [r7, #60]	; 0x3c
    float panel_space = 0;
 8015e88:	f04f 0300 	mov.w	r3, #0
 8015e8c:	63bb      	str	r3, [r7, #56]	; 0x38

    NK_ASSERT(ctx);
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d106      	bne.n	8015ea2 <nk_layout_widget_space+0x3a>
 8015e94:	4bc4      	ldr	r3, [pc, #784]	; (80161a8 <nk_layout_widget_space+0x340>)
 8015e96:	4ac5      	ldr	r2, [pc, #788]	; (80161ac <nk_layout_widget_space+0x344>)
 8015e98:	f240 214d 	movw	r1, #589	; 0x24d
 8015e9c:	48c4      	ldr	r0, [pc, #784]	; (80161b0 <nk_layout_widget_space+0x348>)
 8015e9e:	f00e fe27 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ea8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d106      	bne.n	8015ebe <nk_layout_widget_space+0x56>
 8015eb0:	4bc0      	ldr	r3, [pc, #768]	; (80161b4 <nk_layout_widget_space+0x34c>)
 8015eb2:	4abe      	ldr	r2, [pc, #760]	; (80161ac <nk_layout_widget_space+0x344>)
 8015eb4:	f240 214e 	movw	r1, #590	; 0x24e
 8015eb8:	48bd      	ldr	r0, [pc, #756]	; (80161b0 <nk_layout_widget_space+0x348>)
 8015eba:	f00e fe19 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015ec4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d106      	bne.n	8015ede <nk_layout_widget_space+0x76>
 8015ed0:	4bb9      	ldr	r3, [pc, #740]	; (80161b8 <nk_layout_widget_space+0x350>)
 8015ed2:	4ab6      	ldr	r2, [pc, #728]	; (80161ac <nk_layout_widget_space+0x344>)
 8015ed4:	f240 214f 	movw	r1, #591	; 0x24f
 8015ed8:	48b5      	ldr	r0, [pc, #724]	; (80161b0 <nk_layout_widget_space+0x348>)
 8015eda:	f00e fe09 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	f000 8340 	beq.w	8016566 <nk_layout_widget_space+0x6fe>
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015eec:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	f000 8338 	beq.w	8016566 <nk_layout_widget_space+0x6fe>
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015efc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f000 832e 	beq.w	8016566 <nk_layout_widget_space+0x6fe>
        return;

    win = ctx->current;
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015f10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8015f14:	607b      	str	r3, [r7, #4]
    layout = win->layout;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f1c:	637b      	str	r3, [r7, #52]	; 0x34
    style = &ctx->style;
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8015f24:	633b      	str	r3, [r7, #48]	; 0x30
    NK_ASSERT(bounds);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d106      	bne.n	8015f3a <nk_layout_widget_space+0xd2>
 8015f2c:	4ba3      	ldr	r3, [pc, #652]	; (80161bc <nk_layout_widget_space+0x354>)
 8015f2e:	4a9f      	ldr	r2, [pc, #636]	; (80161ac <nk_layout_widget_space+0x344>)
 8015f30:	f240 2156 	movw	r1, #598	; 0x256
 8015f34:	489e      	ldr	r0, [pc, #632]	; (80161b0 <nk_layout_widget_space+0x348>)
 8015f36:	f00e fddb 	bl	8024af0 <__assert_func>

    spacing = style->window.spacing;
 8015f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f40:	461a      	mov	r2, r3
 8015f42:	f107 0314 	add.w	r3, r7, #20
 8015f46:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 8015f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f4e:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_space = nk_layout_row_calculate_usable_space(&ctx->style, layout->type,
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8015f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f5a:	7819      	ldrb	r1, [r3, #0]
 8015f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8015f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f66:	461a      	mov	r2, r3
 8015f68:	eeb0 0a67 	vmov.f32	s0, s15
 8015f6c:	f7ff fc64 	bl	8015838 <nk_layout_row_calculate_usable_space>
 8015f70:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
                                            layout->bounds.w, layout->row.columns);

    #define NK_FRAC(x) (x - (float)(int)x) /* will be used to remove fookin gaps */
    /* calculate the width of one item inside the current layout space */
    switch (layout->row.type) {
 8015f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f76:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8015f7a:	2b08      	cmp	r3, #8
 8015f7c:	f200 828b 	bhi.w	8016496 <nk_layout_widget_space+0x62e>
 8015f80:	a201      	add	r2, pc, #4	; (adr r2, 8015f88 <nk_layout_widget_space+0x120>)
 8015f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f86:	bf00      	nop
 8015f88:	08015fad 	.word	0x08015fad
 8015f8c:	0801602f 	.word	0x0801602f
 8015f90:	080160b1 	.word	0x080160b1
 8015f94:	08016193 	.word	0x08016193
 8015f98:	08016277 	.word	0x08016277
 8015f9c:	080162af 	.word	0x080162af
 8015fa0:	080162f3 	.word	0x080162f3
 8015fa4:	080163ad 	.word	0x080163ad
 8015fa8:	080163f9 	.word	0x080163f9
    case NK_LAYOUT_DYNAMIC_FIXED: {
        /* scaling fixed size widgets item width */
        float w = NK_MAX(1.0f,panel_space) / (float)layout->row.columns;
 8015fac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fbc:	dd02      	ble.n	8015fc4 <nk_layout_widget_space+0x15c>
 8015fbe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015fc2:	e001      	b.n	8015fc8 <nk_layout_widget_space+0x160>
 8015fc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fcc:	ee07 3a10 	vmov	s14, r3
 8015fd0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015fd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015fd8:	ed87 7a07 	vstr	s14, [r7, #28]
        item_offset = (float)layout->row.index * w;
 8015fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fe0:	ee07 3a90 	vmov	s15, r3
 8015fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fe8:	ed97 7a07 	vldr	s14, [r7, #28]
 8015fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ff0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8015ff4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016000:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016008:	ed97 7a07 	vldr	s14, [r7, #28]
 801600c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016010:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8016014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016018:	ee07 3a90 	vmov	s15, r3
 801601c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016020:	edd7 7a05 	vldr	s15, [r7, #20]
 8016024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016028:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 801602c:	e243      	b.n	80164b6 <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_DYNAMIC_ROW: {
        /* scaling single ratio widget width */
        float w = layout->row.item_width * panel_space;
 801602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016030:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8016034:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8016038:	ee67 7a27 	vmul.f32	s15, s14, s15
 801603c:	edc7 7a08 	vstr	s15, [r7, #32]
        item_offset = layout->row.item_offset;
 8016040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016046:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8016048:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801604c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016054:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801605c:	ed97 7a08 	vldr	s14, [r7, #32]
 8016060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016064:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = 0;
 8016068:	f04f 0300 	mov.w	r3, #0
 801606c:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (modify) {
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 8217 	beq.w	80164a4 <nk_layout_widget_space+0x63c>
            layout->row.item_offset += w + spacing.x;
 8016076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016078:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 801607c:	edd7 6a05 	vldr	s13, [r7, #20]
 8016080:	edd7 7a08 	vldr	s15, [r7, #32]
 8016084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016088:	ee77 7a27 	vadd.f32	s15, s14, s15
 801608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801608e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += layout->row.item_width;
 8016092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016094:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8016098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801609a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 801609e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160a4:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            layout->row.index = 0;
 80160a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160aa:	2200      	movs	r2, #0
 80160ac:	669a      	str	r2, [r3, #104]	; 0x68
        }
    } break;
 80160ae:	e1f9      	b.n	80164a4 <nk_layout_widget_space+0x63c>
    case NK_LAYOUT_DYNAMIC_FREE: {
        /* panel width depended free widget placing */
        bounds->x = layout->at_x + (layout->bounds.w * layout->row.item.x);
 80160b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160b2:	ed93 7a08 	vldr	s14, [r3, #32]
 80160b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160b8:	edd3 6a04 	vldr	s13, [r3, #16]
 80160bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160be:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80160c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	edc3 7a00 	vstr	s15, [r3]
        bounds->x -= (float)*layout->offset_x;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	ed93 7a00 	vldr	s14, [r3]
 80160d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d8:	699b      	ldr	r3, [r3, #24]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	ee07 3a90 	vmov	s15, r3
 80160e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80160e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + (layout->row.height * layout->row.item.y);
 80160ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80160f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160f6:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80160fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160fc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8016100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	ed93 7a01 	vldr	s14, [r3, #4]
 8016114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016116:	69db      	ldr	r3, [r3, #28]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	ee07 3a90 	vmov	s15, r3
 801611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->w = layout->bounds.w  * layout->row.item.w + NK_FRAC(bounds->x);
 801612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801612e:	ed93 7a04 	vldr	s14, [r3, #16]
 8016132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016134:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8016138:	ee27 7a27 	vmul.f32	s14, s14, s15
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	edd3 6a00 	vldr	s13, [r3]
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	edd3 7a00 	vldr	s15, [r3]
 8016148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801614c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016150:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	edc3 7a02 	vstr	s15, [r3, #8]
        bounds->h = layout->row.height * layout->row.item.h + NK_FRAC(bounds->y);
 801615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016160:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8016164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016166:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 801616a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	edd3 6a01 	vldr	s13, [r3, #4]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	edd3 7a01 	vldr	s15, [r3, #4]
 801617a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801617e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016182:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8016186:	ee77 7a27 	vadd.f32	s15, s14, s15
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 8016190:	e1ea      	b.n	8016568 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_DYNAMIC: {
        /* scaling arrays of panel width ratios for every widget */
        float ratio, w;
        NK_ASSERT(layout->row.ratio);
 8016192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016196:	2b00      	cmp	r3, #0
 8016198:	d114      	bne.n	80161c4 <nk_layout_widget_space+0x35c>
 801619a:	4b09      	ldr	r3, [pc, #36]	; (80161c0 <nk_layout_widget_space+0x358>)
 801619c:	4a03      	ldr	r2, [pc, #12]	; (80161ac <nk_layout_widget_space+0x344>)
 801619e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80161a2:	4803      	ldr	r0, [pc, #12]	; (80161b0 <nk_layout_widget_space+0x348>)
 80161a4:	f00e fca4 	bl	8024af0 <__assert_func>
 80161a8:	08028954 	.word	0x08028954
 80161ac:	0802a854 	.word	0x0802a854
 80161b0:	08028958 	.word	0x08028958
 80161b4:	08028974 	.word	0x08028974
 80161b8:	08028984 	.word	0x08028984
 80161bc:	08028ab4 	.word	0x08028ab4
 80161c0:	08028abc 	.word	0x08028abc
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80161c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80161c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	4413      	add	r3, r2
 80161d0:	edd3 7a00 	vldr	s15, [r3]
            layout->row.item_width : layout->row.ratio[layout->row.index];
 80161d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80161d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161dc:	d502      	bpl.n	80161e4 <nk_layout_widget_space+0x37c>
 80161de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80161e2:	e006      	b.n	80161f2 <nk_layout_widget_space+0x38a>
 80161e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80161e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80161ec:	009b      	lsls	r3, r3, #2
 80161ee:	4413      	add	r3, r2
 80161f0:	681b      	ldr	r3, [r3, #0]
        ratio = (layout->row.ratio[layout->row.index] < 0) ?
 80161f2:	62bb      	str	r3, [r7, #40]	; 0x28

        w = (ratio * panel_space);
 80161f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80161f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80161fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016200:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        item_spacing = (float)layout->row.index * spacing.x;
 8016204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016208:	ee07 3a90 	vmov	s15, r3
 801620c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016210:	edd7 7a05 	vldr	s15, [r7, #20]
 8016214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016218:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_offset = layout->row.item_offset;
 801621c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016222:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8016224:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801622c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016230:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016238:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801623c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016240:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

        if (modify) {
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	f000 812e 	beq.w	80164a8 <nk_layout_widget_space+0x640>
            layout->row.item_offset += w;
 801624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801624e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8016252:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016256:	ee77 7a27 	vadd.f32	s15, s14, s15
 801625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801625c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            layout->row.filled += ratio;
 8016260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016262:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8016266:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801626a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016270:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
        }
    } break;
 8016274:	e118      	b.n	80164a8 <nk_layout_widget_space+0x640>
    case NK_LAYOUT_STATIC_FIXED: {
        /* non-scaling fixed widgets item width */
        item_width = layout->row.item_width;
 8016276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801627a:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = (float)layout->row.index * item_width;
 801627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016280:	ee07 3a90 	vmov	s15, r3
 8016284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016288:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016290:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 8016294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016298:	ee07 3a90 	vmov	s15, r3
 801629c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80162a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    } break;
 80162ac:	e103      	b.n	80164b6 <nk_layout_widget_space+0x64e>
    case NK_LAYOUT_STATIC_ROW: {
        /* scaling single ratio widget width */
        item_width = layout->row.item_width;
 80162ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162b2:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80162b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80162ba:	647b      	str	r3, [r7, #68]	; 0x44
        item_spacing = (float)layout->row.index * spacing.x;
 80162bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80162c0:	ee07 3a90 	vmov	s15, r3
 80162c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80162cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += item_width;
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	f000 80e8 	beq.w	80164ac <nk_layout_widget_space+0x644>
 80162dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162de:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80162e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80162e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ec:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 80162f0:	e0dc      	b.n	80164ac <nk_layout_widget_space+0x644>
    case NK_LAYOUT_STATIC_FREE: {
        /* free widget placing */
        bounds->x = layout->at_x + layout->row.item.x;
 80162f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80162f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162fa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80162fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	edc3 7a00 	vstr	s15, [r3]
        bounds->w = layout->row.item.w;
 8016308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801630a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	609a      	str	r2, [r3, #8]
        if (((bounds->x + bounds->w) > layout->max_x) && modify)
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	ed93 7a00 	vldr	s14, [r3]
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	edd3 7a02 	vldr	s15, [r3, #8]
 801631e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016324:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8016328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016330:	dd0d      	ble.n	801634e <nk_layout_widget_space+0x4e6>
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d00a      	beq.n	801634e <nk_layout_widget_space+0x4e6>
            layout->max_x = (bounds->x + bounds->w);
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	ed93 7a00 	vldr	s14, [r3]
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	edd3 7a02 	vldr	s15, [r3, #8]
 8016344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801634a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        bounds->x -= (float)*layout->offset_x;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	ed93 7a00 	vldr	s14, [r3]
 8016354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016356:	699b      	ldr	r3, [r3, #24]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	ee07 3a90 	vmov	s15, r3
 801635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	edc3 7a00 	vstr	s15, [r3]
        bounds->y = layout->at_y + layout->row.item.y;
 801636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801636e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8016372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016374:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8016378:	ee77 7a27 	vadd.f32	s15, s14, s15
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->y -= (float)*layout->offset_y;
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	ed93 7a01 	vldr	s14, [r3, #4]
 8016388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801638a:	69db      	ldr	r3, [r3, #28]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	ee07 3a90 	vmov	s15, r3
 8016392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016396:	ee77 7a67 	vsub.f32	s15, s14, s15
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	edc3 7a01 	vstr	s15, [r3, #4]
        bounds->h = layout->row.item.h;
 80163a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	60da      	str	r2, [r3, #12]
        return;
 80163aa:	e0dd      	b.n	8016568 <nk_layout_widget_space+0x700>
    }
    case NK_LAYOUT_STATIC: {
        /* non-scaling array of panel pixel width for every widget */
        item_spacing = (float)layout->row.index * spacing.x;
 80163ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163b0:	ee07 3a90 	vmov	s15, r3
 80163b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80163b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80163bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        item_width = layout->row.ratio[layout->row.index];
 80163c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80163c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163cc:	009b      	lsls	r3, r3, #2
 80163ce:	4413      	add	r3, r2
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	643b      	str	r3, [r7, #64]	; 0x40
        item_offset = layout->row.item_offset;
 80163d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80163da:	647b      	str	r3, [r7, #68]	; 0x44
        if (modify) layout->row.item_offset += item_width;
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d066      	beq.n	80164b0 <nk_layout_widget_space+0x648>
 80163e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e4:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80163e8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80163ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163f2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 80163f6:	e05b      	b.n	80164b0 <nk_layout_widget_space+0x648>
    case NK_LAYOUT_TEMPLATE: {
        /* stretchy row layout with combined dynamic/static widget width*/
        float w;
        NK_ASSERT(layout->row.index < layout->row.columns);
 80163f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80163fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016400:	429a      	cmp	r2, r3
 8016402:	db06      	blt.n	8016412 <nk_layout_widget_space+0x5aa>
 8016404:	4b5a      	ldr	r3, [pc, #360]	; (8016570 <nk_layout_widget_space+0x708>)
 8016406:	4a5b      	ldr	r2, [pc, #364]	; (8016574 <nk_layout_widget_space+0x70c>)
 8016408:	f240 21b1 	movw	r1, #689	; 0x2b1
 801640c:	485a      	ldr	r0, [pc, #360]	; (8016578 <nk_layout_widget_space+0x710>)
 801640e:	f00e fb6f 	bl	8024af0 <__assert_func>
        NK_ASSERT(layout->row.index < NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS);
 8016412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016416:	2b0f      	cmp	r3, #15
 8016418:	dd06      	ble.n	8016428 <nk_layout_widget_space+0x5c0>
 801641a:	4b58      	ldr	r3, [pc, #352]	; (801657c <nk_layout_widget_space+0x714>)
 801641c:	4a55      	ldr	r2, [pc, #340]	; (8016574 <nk_layout_widget_space+0x70c>)
 801641e:	f240 21b2 	movw	r1, #690	; 0x2b2
 8016422:	4855      	ldr	r0, [pc, #340]	; (8016578 <nk_layout_widget_space+0x710>)
 8016424:	f00e fb64 	bl	8024af0 <__assert_func>
        w = layout->row.templates[layout->row.index];
 8016428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801642a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801642c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801642e:	3326      	adds	r3, #38	; 0x26
 8016430:	009b      	lsls	r3, r3, #2
 8016432:	4413      	add	r3, r2
 8016434:	3308      	adds	r3, #8
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	62fb      	str	r3, [r7, #44]	; 0x2c
        item_offset = layout->row.item_offset;
 801643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016440:	647b      	str	r3, [r7, #68]	; 0x44
        item_width = w + NK_FRAC(item_offset);
 8016442:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801644a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801644e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8016452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016456:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801645a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801645e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        item_spacing = (float)layout->row.index * spacing.x;
 8016462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016466:	ee07 3a90 	vmov	s15, r3
 801646a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801646e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016476:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        if (modify) layout->row.item_offset += w;
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d019      	beq.n	80164b4 <nk_layout_widget_space+0x64c>
 8016480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016482:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8016486:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801648a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016490:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    } break;
 8016494:	e00e      	b.n	80164b4 <nk_layout_widget_space+0x64c>
    #undef NK_FRAC
    default: NK_ASSERT(0); break;
 8016496:	4b3a      	ldr	r3, [pc, #232]	; (8016580 <nk_layout_widget_space+0x718>)
 8016498:	4a36      	ldr	r2, [pc, #216]	; (8016574 <nk_layout_widget_space+0x70c>)
 801649a:	f240 21ba 	movw	r1, #698	; 0x2ba
 801649e:	4836      	ldr	r0, [pc, #216]	; (8016578 <nk_layout_widget_space+0x710>)
 80164a0:	f00e fb26 	bl	8024af0 <__assert_func>
    } break;
 80164a4:	bf00      	nop
 80164a6:	e006      	b.n	80164b6 <nk_layout_widget_space+0x64e>
    } break;
 80164a8:	bf00      	nop
 80164aa:	e004      	b.n	80164b6 <nk_layout_widget_space+0x64e>
    } break;
 80164ac:	bf00      	nop
 80164ae:	e002      	b.n	80164b6 <nk_layout_widget_space+0x64e>
    } break;
 80164b0:	bf00      	nop
 80164b2:	e000      	b.n	80164b6 <nk_layout_widget_space+0x64e>
    } break;
 80164b4:	bf00      	nop
    };

    /* set the bounds of the newly allocated widget */
    bounds->w = item_width;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164ba:	609a      	str	r2, [r3, #8]
    bounds->h = layout->row.height - spacing.y;
 80164bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164be:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80164c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80164c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	edc3 7a03 	vstr	s15, [r3, #12]
    bounds->y = layout->at_y - (float)*layout->offset_y;
 80164d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80164d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164d8:	69db      	ldr	r3, [r3, #28]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	ee07 3a90 	vmov	s15, r3
 80164e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80164e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->x = layout->at_x + item_offset + item_spacing;
 80164ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80164f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80164f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80164fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	edc3 7a00 	vstr	s15, [r3]
    if (((bounds->x + bounds->w) > layout->max_x) && modify)
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	ed93 7a00 	vldr	s14, [r3]
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	edd3 7a02 	vldr	s15, [r3, #8]
 8016516:	ee37 7a27 	vadd.f32	s14, s14, s15
 801651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801651c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8016520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016528:	dd0d      	ble.n	8016546 <nk_layout_widget_space+0x6de>
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d00a      	beq.n	8016546 <nk_layout_widget_space+0x6de>
        layout->max_x = bounds->x + bounds->w;
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	ed93 7a00 	vldr	s14, [r3]
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	edd3 7a02 	vldr	s15, [r3, #8]
 801653c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016542:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    bounds->x -= (float)*layout->offset_x;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	ed93 7a00 	vldr	s14, [r3]
 801654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801654e:	699b      	ldr	r3, [r3, #24]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	ee07 3a90 	vmov	s15, r3
 8016556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801655a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	edc3 7a00 	vstr	s15, [r3]
 8016564:	e000      	b.n	8016568 <nk_layout_widget_space+0x700>
        return;
 8016566:	bf00      	nop
}
 8016568:	3748      	adds	r7, #72	; 0x48
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	08028ad0 	.word	0x08028ad0
 8016574:	0802a854 	.word	0x0802a854
 8016578:	08028958 	.word	0x08028958
 801657c:	08028af8 	.word	0x08028af8
 8016580:	08028b10 	.word	0x08028b10

08016584 <nk_panel_alloc_space>:
NK_LIB void
nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b084      	sub	sp, #16
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	6039      	str	r1, [r7, #0]
    struct nk_window *win;
    struct nk_panel *layout;

    NK_ASSERT(ctx);
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d106      	bne.n	80165a2 <nk_panel_alloc_space+0x1e>
 8016594:	4b2d      	ldr	r3, [pc, #180]	; (801664c <nk_panel_alloc_space+0xc8>)
 8016596:	4a2e      	ldr	r2, [pc, #184]	; (8016650 <nk_panel_alloc_space+0xcc>)
 8016598:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801659c:	482d      	ldr	r0, [pc, #180]	; (8016654 <nk_panel_alloc_space+0xd0>)
 801659e:	f00e faa7 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80165a2:	683b      	ldr	r3, [r7, #0]
 80165a4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165a8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d106      	bne.n	80165be <nk_panel_alloc_space+0x3a>
 80165b0:	4b29      	ldr	r3, [pc, #164]	; (8016658 <nk_panel_alloc_space+0xd4>)
 80165b2:	4a27      	ldr	r2, [pc, #156]	; (8016650 <nk_panel_alloc_space+0xcc>)
 80165b4:	f240 21cd 	movw	r1, #717	; 0x2cd
 80165b8:	4826      	ldr	r0, [pc, #152]	; (8016654 <nk_panel_alloc_space+0xd0>)
 80165ba:	f00e fa99 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165c4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d106      	bne.n	80165de <nk_panel_alloc_space+0x5a>
 80165d0:	4b22      	ldr	r3, [pc, #136]	; (801665c <nk_panel_alloc_space+0xd8>)
 80165d2:	4a1f      	ldr	r2, [pc, #124]	; (8016650 <nk_panel_alloc_space+0xcc>)
 80165d4:	f240 21ce 	movw	r1, #718	; 0x2ce
 80165d8:	481e      	ldr	r0, [pc, #120]	; (8016654 <nk_panel_alloc_space+0xd0>)
 80165da:	f00e fa89 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d02f      	beq.n	8016644 <nk_panel_alloc_space+0xc0>
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165ea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d028      	beq.n	8016644 <nk_panel_alloc_space+0xc0>
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80165f8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80165fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016600:	2b00      	cmp	r3, #0
 8016602:	d01f      	beq.n	8016644 <nk_panel_alloc_space+0xc0>
        return;

    /* check if the end of the row has been hit and begin new row if so */
    win = ctx->current;
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801660a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801660e:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016616:	60bb      	str	r3, [r7, #8]
    if (layout->row.index >= layout->row.columns)
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016620:	429a      	cmp	r2, r3
 8016622:	db03      	blt.n	801662c <nk_panel_alloc_space+0xa8>
        nk_panel_alloc_row(ctx, win);
 8016624:	68f9      	ldr	r1, [r7, #12]
 8016626:	6838      	ldr	r0, [r7, #0]
 8016628:	f7ff fbf2 	bl	8015e10 <nk_panel_alloc_row>

    /* calculate widget position and size */
    nk_layout_widget_space(bounds, ctx, win, nk_true);
 801662c:	2301      	movs	r3, #1
 801662e:	68fa      	ldr	r2, [r7, #12]
 8016630:	6839      	ldr	r1, [r7, #0]
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f7ff fc18 	bl	8015e68 <nk_layout_widget_space>
    layout->row.index++;
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801663c:	1c5a      	adds	r2, r3, #1
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	669a      	str	r2, [r3, #104]	; 0x68
 8016642:	e000      	b.n	8016646 <nk_panel_alloc_space+0xc2>
        return;
 8016644:	bf00      	nop
}
 8016646:	3710      	adds	r7, #16
 8016648:	46bd      	mov	sp, r7
 801664a:	bd80      	pop	{r7, pc}
 801664c:	08028954 	.word	0x08028954
 8016650:	0802a86c 	.word	0x0802a86c
 8016654:	08028958 	.word	0x08028958
 8016658:	08028974 	.word	0x08028974
 801665c:	08028984 	.word	0x08028984

08016660 <nk_round_up_pow2>:
    return a0 + x*(a1 + x*(a2 + x*(a3 + x*(a4 + x*(a5 + x*(a6 + x*(a7 + x*a8)))))));
}
#endif
NK_LIB nk_uint
nk_round_up_pow2(nk_uint v)
{
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
    v--;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	3b01      	subs	r3, #1
 801666c:	607b      	str	r3, [r7, #4]
    v |= v >> 1;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	085b      	lsrs	r3, r3, #1
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	4313      	orrs	r3, r2
 8016676:	607b      	str	r3, [r7, #4]
    v |= v >> 2;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	089b      	lsrs	r3, r3, #2
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	4313      	orrs	r3, r2
 8016680:	607b      	str	r3, [r7, #4]
    v |= v >> 4;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	091b      	lsrs	r3, r3, #4
 8016686:	687a      	ldr	r2, [r7, #4]
 8016688:	4313      	orrs	r3, r2
 801668a:	607b      	str	r3, [r7, #4]
    v |= v >> 8;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	0a1b      	lsrs	r3, r3, #8
 8016690:	687a      	ldr	r2, [r7, #4]
 8016692:	4313      	orrs	r3, r2
 8016694:	607b      	str	r3, [r7, #4]
    v |= v >> 16;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	0c1b      	lsrs	r3, r3, #16
 801669a:	687a      	ldr	r2, [r7, #4]
 801669c:	4313      	orrs	r3, r2
 801669e:	607b      	str	r3, [r7, #4]
    v++;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	3301      	adds	r3, #1
 80166a4:	607b      	str	r3, [r7, #4]
    return v;
 80166a6:	687b      	ldr	r3, [r7, #4]
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	370c      	adds	r7, #12
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr

080166b4 <nk_pow>:
NK_LIB double
nk_pow(double x, int n)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b088      	sub	sp, #32
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	ed87 0b02 	vstr	d0, [r7, #8]
 80166be:	6078      	str	r0, [r7, #4]
    /*  check the sign of n */
    double r = 1;
 80166c0:	f04f 0200 	mov.w	r2, #0
 80166c4:	4b24      	ldr	r3, [pc, #144]	; (8016758 <nk_pow+0xa4>)
 80166c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int plus = n >= 0;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	43db      	mvns	r3, r3
 80166ce:	0fdb      	lsrs	r3, r3, #31
 80166d0:	b2db      	uxtb	r3, r3
 80166d2:	617b      	str	r3, [r7, #20]
    n = (plus) ? n : -n;
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d102      	bne.n	80166e0 <nk_pow+0x2c>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	425b      	negs	r3, r3
 80166de:	e000      	b.n	80166e2 <nk_pow+0x2e>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	607b      	str	r3, [r7, #4]
    while (n > 0) {
 80166e4:	e01d      	b.n	8016722 <nk_pow+0x6e>
        if ((n & 1) == 1)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f003 0301 	and.w	r3, r3, #1
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d009      	beq.n	8016704 <nk_pow+0x50>
            r *= x;
 80166f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80166f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80166f8:	f7e9 ffa6 	bl	8000648 <__aeabi_dmul>
 80166fc:	4602      	mov	r2, r0
 80166fe:	460b      	mov	r3, r1
 8016700:	e9c7 2306 	strd	r2, r3, [r7, #24]
        n /= 2;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	0fda      	lsrs	r2, r3, #31
 8016708:	4413      	add	r3, r2
 801670a:	105b      	asrs	r3, r3, #1
 801670c:	607b      	str	r3, [r7, #4]
        x *= x;
 801670e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016716:	f7e9 ff97 	bl	8000648 <__aeabi_dmul>
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while (n > 0) {
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2b00      	cmp	r3, #0
 8016726:	dcde      	bgt.n	80166e6 <nk_pow+0x32>
    }
    return plus ? r : 1.0 / r;
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d109      	bne.n	8016742 <nk_pow+0x8e>
 801672e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016732:	f04f 0000 	mov.w	r0, #0
 8016736:	4908      	ldr	r1, [pc, #32]	; (8016758 <nk_pow+0xa4>)
 8016738:	f7ea f8b0 	bl	800089c <__aeabi_ddiv>
 801673c:	4602      	mov	r2, r0
 801673e:	460b      	mov	r3, r1
 8016740:	e001      	b.n	8016746 <nk_pow+0x92>
 8016742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016746:	ec43 2b17 	vmov	d7, r2, r3
}
 801674a:	eeb0 0a47 	vmov.f32	s0, s14
 801674e:	eef0 0a67 	vmov.f32	s1, s15
 8016752:	3720      	adds	r7, #32
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}
 8016758:	3ff00000 	.word	0x3ff00000

0801675c <nk_ifloord>:
NK_LIB int
nk_ifloord(double x)
{
 801675c:	b5b0      	push	{r4, r5, r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	ed87 0b00 	vstr	d0, [r7]
    x = (double)((int)x - ((x < 0.0) ? 1 : 0));
 8016766:	e9d7 0100 	ldrd	r0, r1, [r7]
 801676a:	f7ea fa1d 	bl	8000ba8 <__aeabi_d2iz>
 801676e:	4604      	mov	r4, r0
 8016770:	2301      	movs	r3, #1
 8016772:	461d      	mov	r5, r3
 8016774:	f04f 0200 	mov.w	r2, #0
 8016778:	f04f 0300 	mov.w	r3, #0
 801677c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016780:	f7ea f9d4 	bl	8000b2c <__aeabi_dcmplt>
 8016784:	4603      	mov	r3, r0
 8016786:	2b00      	cmp	r3, #0
 8016788:	d101      	bne.n	801678e <nk_ifloord+0x32>
 801678a:	2300      	movs	r3, #0
 801678c:	461d      	mov	r5, r3
 801678e:	b2eb      	uxtb	r3, r5
 8016790:	1ae3      	subs	r3, r4, r3
 8016792:	4618      	mov	r0, r3
 8016794:	f7e9 feee 	bl	8000574 <__aeabi_i2d>
 8016798:	4602      	mov	r2, r0
 801679a:	460b      	mov	r3, r1
 801679c:	e9c7 2300 	strd	r2, r3, [r7]
    return (int)x;
 80167a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167a4:	f7ea fa00 	bl	8000ba8 <__aeabi_d2iz>
 80167a8:	4603      	mov	r3, r0
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3708      	adds	r7, #8
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080167b4 <nk_log10>:
        return (r > 0.0f) ? t+1: t;
    }
}
NK_LIB int
nk_log10(double n)
{
 80167b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167b6:	b087      	sub	sp, #28
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	ed87 0b00 	vstr	d0, [r7]
    int neg;
    int ret;
    int exp = 0;
 80167be:	2300      	movs	r3, #0
 80167c0:	613b      	str	r3, [r7, #16]

    neg = (n < 0) ? 1 : 0;
 80167c2:	2301      	movs	r3, #1
 80167c4:	461e      	mov	r6, r3
 80167c6:	f04f 0200 	mov.w	r2, #0
 80167ca:	f04f 0300 	mov.w	r3, #0
 80167ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167d2:	f7ea f9ab 	bl	8000b2c <__aeabi_dcmplt>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d101      	bne.n	80167e0 <nk_log10+0x2c>
 80167dc:	2300      	movs	r3, #0
 80167de:	461e      	mov	r6, r3
 80167e0:	b2f3      	uxtb	r3, r6
 80167e2:	60fb      	str	r3, [r7, #12]
    ret = (neg) ? (int)-n : (int)n;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d009      	beq.n	80167fe <nk_log10+0x4a>
 80167ea:	683c      	ldr	r4, [r7, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80167f2:	4620      	mov	r0, r4
 80167f4:	4629      	mov	r1, r5
 80167f6:	f7ea f9d7 	bl	8000ba8 <__aeabi_d2iz>
 80167fa:	4603      	mov	r3, r0
 80167fc:	e004      	b.n	8016808 <nk_log10+0x54>
 80167fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016802:	f7ea f9d1 	bl	8000ba8 <__aeabi_d2iz>
 8016806:	4603      	mov	r3, r0
 8016808:	617b      	str	r3, [r7, #20]
    while ((ret / 10) > 0) {
 801680a:	e00a      	b.n	8016822 <nk_log10+0x6e>
        ret /= 10;
 801680c:	697b      	ldr	r3, [r7, #20]
 801680e:	4a0c      	ldr	r2, [pc, #48]	; (8016840 <nk_log10+0x8c>)
 8016810:	fb82 1203 	smull	r1, r2, r2, r3
 8016814:	1092      	asrs	r2, r2, #2
 8016816:	17db      	asrs	r3, r3, #31
 8016818:	1ad3      	subs	r3, r2, r3
 801681a:	617b      	str	r3, [r7, #20]
        exp++;
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	3301      	adds	r3, #1
 8016820:	613b      	str	r3, [r7, #16]
    while ((ret / 10) > 0) {
 8016822:	697b      	ldr	r3, [r7, #20]
 8016824:	2b09      	cmp	r3, #9
 8016826:	dcf1      	bgt.n	801680c <nk_log10+0x58>
    }
    if (neg) exp = -exp;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d002      	beq.n	8016834 <nk_log10+0x80>
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	425b      	negs	r3, r3
 8016832:	613b      	str	r3, [r7, #16]
    return exp;
 8016834:	693b      	ldr	r3, [r7, #16]
}
 8016836:	4618      	mov	r0, r3
 8016838:	371c      	adds	r7, #28
 801683a:	46bd      	mov	sp, r7
 801683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801683e:	bf00      	nop
 8016840:	66666667 	.word	0x66666667

08016844 <nk_rect>:
{
    return nk_null_rect;
}
NK_API struct nk_rect
nk_rect(float x, float y, float w, float h)
{
 8016844:	b490      	push	{r4, r7}
 8016846:	b090      	sub	sp, #64	; 0x40
 8016848:	af00      	add	r7, sp, #0
 801684a:	ed87 0a07 	vstr	s0, [r7, #28]
 801684e:	edc7 0a06 	vstr	s1, [r7, #24]
 8016852:	ed87 1a05 	vstr	s2, [r7, #20]
 8016856:	edc7 1a04 	vstr	s3, [r7, #16]
    struct nk_rect r;
    r.x = x; r.y = y;
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	623b      	str	r3, [r7, #32]
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	627b      	str	r3, [r7, #36]	; 0x24
    r.w = w; r.h = h;
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	62bb      	str	r3, [r7, #40]	; 0x28
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	62fb      	str	r3, [r7, #44]	; 0x2c
    return r;
 801686a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801686e:	f107 0320 	add.w	r3, r7, #32
 8016872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801687a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016880:	ee06 0a10 	vmov	s12, r0
 8016884:	ee06 1a90 	vmov	s13, r1
 8016888:	ee07 2a10 	vmov	s14, r2
 801688c:	ee07 3a90 	vmov	s15, r3
}
 8016890:	eeb0 0a46 	vmov.f32	s0, s12
 8016894:	eef0 0a66 	vmov.f32	s1, s13
 8016898:	eeb0 1a47 	vmov.f32	s2, s14
 801689c:	eef0 1a67 	vmov.f32	s3, s15
 80168a0:	3740      	adds	r7, #64	; 0x40
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bc90      	pop	{r4, r7}
 80168a6:	4770      	bx	lr

080168a8 <nk_shrink_rect>:
    ret.x = r.w; ret.y = r.h;
    return ret;
}
NK_LIB struct nk_rect
nk_shrink_rect(struct nk_rect r, float amount)
{
 80168a8:	b490      	push	{r4, r7}
 80168aa:	b092      	sub	sp, #72	; 0x48
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	eeb0 6a40 	vmov.f32	s12, s0
 80168b2:	eef0 6a60 	vmov.f32	s13, s1
 80168b6:	eeb0 7a41 	vmov.f32	s14, s2
 80168ba:	eef0 7a61 	vmov.f32	s15, s3
 80168be:	ed87 2a05 	vstr	s4, [r7, #20]
 80168c2:	ed87 6a06 	vstr	s12, [r7, #24]
 80168c6:	edc7 6a07 	vstr	s13, [r7, #28]
 80168ca:	ed87 7a08 	vstr	s14, [r7, #32]
 80168ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    struct nk_rect res;
    r.w = NK_MAX(r.w, 2 * amount);
 80168d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80168d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80168da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168e6:	d504      	bpl.n	80168f2 <nk_shrink_rect+0x4a>
 80168e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80168ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80168f0:	e001      	b.n	80168f6 <nk_shrink_rect+0x4e>
 80168f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80168f6:	edc7 7a08 	vstr	s15, [r7, #32]
    r.h = NK_MAX(r.h, 2 * amount);
 80168fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80168fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8016902:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801690a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690e:	d504      	bpl.n	801691a <nk_shrink_rect+0x72>
 8016910:	edd7 7a05 	vldr	s15, [r7, #20]
 8016914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016918:	e001      	b.n	801691e <nk_shrink_rect+0x76>
 801691a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801691e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    res.x = r.x + amount;
 8016922:	ed97 7a06 	vldr	s14, [r7, #24]
 8016926:	edd7 7a05 	vldr	s15, [r7, #20]
 801692a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801692e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    res.y = r.y + amount;
 8016932:	ed97 7a07 	vldr	s14, [r7, #28]
 8016936:	edd7 7a05 	vldr	s15, [r7, #20]
 801693a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801693e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    res.w = r.w - 2 * amount;
 8016942:	ed97 7a08 	vldr	s14, [r7, #32]
 8016946:	edd7 7a05 	vldr	s15, [r7, #20]
 801694a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801694e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016952:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    res.h = r.h - 2 * amount;
 8016956:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801695a:	edd7 7a05 	vldr	s15, [r7, #20]
 801695e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016966:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return res;
 801696a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801696e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801697a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801697c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801697e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016980:	ee06 0a10 	vmov	s12, r0
 8016984:	ee06 1a90 	vmov	s13, r1
 8016988:	ee07 2a10 	vmov	s14, r2
 801698c:	ee07 3a90 	vmov	s15, r3
}
 8016990:	eeb0 0a46 	vmov.f32	s0, s12
 8016994:	eef0 0a66 	vmov.f32	s1, s13
 8016998:	eeb0 1a47 	vmov.f32	s2, s14
 801699c:	eef0 1a67 	vmov.f32	s3, s15
 80169a0:	3748      	adds	r7, #72	; 0x48
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bc90      	pop	{r4, r7}
 80169a6:	4770      	bx	lr

080169a8 <nk_vec2>:
    r.h -= 2 * pad.y;
    return r;
}
NK_API struct nk_vec2
nk_vec2(float x, float y)
{
 80169a8:	b480      	push	{r7}
 80169aa:	b089      	sub	sp, #36	; 0x24
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80169b2:	edc7 0a02 	vstr	s1, [r7, #8]
    struct nk_vec2 ret;
    ret.x = x; ret.y = y;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	613b      	str	r3, [r7, #16]
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	617b      	str	r3, [r7, #20]
    return ret;
 80169be:	f107 0318 	add.w	r3, r7, #24
 80169c2:	f107 0210 	add.w	r2, r7, #16
 80169c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80169ce:	69ba      	ldr	r2, [r7, #24]
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	ee07 2a10 	vmov	s14, r2
 80169d6:	ee07 3a90 	vmov	s15, r3
}
 80169da:	eeb0 0a47 	vmov.f32	s0, s14
 80169de:	eef0 0a67 	vmov.f32	s1, s15
 80169e2:	3724      	adds	r7, #36	; 0x24
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr

080169ec <nk_unify>:
    return nk_vec2i(v[0], v[1]);
}
NK_LIB void
nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,
    float x1, float y1)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b086      	sub	sp, #24
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6178      	str	r0, [r7, #20]
 80169f4:	6139      	str	r1, [r7, #16]
 80169f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80169fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80169fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8016a02:	edc7 1a00 	vstr	s3, [r7]
    NK_ASSERT(a);
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d106      	bne.n	8016a1a <nk_unify+0x2e>
 8016a0c:	4b4b      	ldr	r3, [pc, #300]	; (8016b3c <nk_unify+0x150>)
 8016a0e:	4a4c      	ldr	r2, [pc, #304]	; (8016b40 <nk_unify+0x154>)
 8016a10:	f240 1101 	movw	r1, #257	; 0x101
 8016a14:	484b      	ldr	r0, [pc, #300]	; (8016b44 <nk_unify+0x158>)
 8016a16:	f00e f86b 	bl	8024af0 <__assert_func>
    NK_ASSERT(clip);
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d106      	bne.n	8016a2e <nk_unify+0x42>
 8016a20:	4b49      	ldr	r3, [pc, #292]	; (8016b48 <nk_unify+0x15c>)
 8016a22:	4a47      	ldr	r2, [pc, #284]	; (8016b40 <nk_unify+0x154>)
 8016a24:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016a28:	4846      	ldr	r0, [pc, #280]	; (8016b44 <nk_unify+0x158>)
 8016a2a:	f00e f861 	bl	8024af0 <__assert_func>
    clip->x = NK_MAX(a->x, x0);
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	edd3 7a00 	vldr	s15, [r3]
 8016a34:	ed97 7a03 	vldr	s14, [r7, #12]
 8016a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a40:	dd01      	ble.n	8016a46 <nk_unify+0x5a>
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	e001      	b.n	8016a4a <nk_unify+0x5e>
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	697a      	ldr	r2, [r7, #20]
 8016a4c:	6013      	str	r3, [r2, #0]
    clip->y = NK_MAX(a->y, y0);
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8016a54:	ed97 7a02 	vldr	s14, [r7, #8]
 8016a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a60:	dd01      	ble.n	8016a66 <nk_unify+0x7a>
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	e001      	b.n	8016a6a <nk_unify+0x7e>
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	697a      	ldr	r2, [r7, #20]
 8016a6c:	6053      	str	r3, [r2, #4]
    clip->w = NK_MIN(a->x + a->w, x1) - clip->x;
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	ed93 7a00 	vldr	s14, [r3]
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	edd3 7a02 	vldr	s15, [r3, #8]
 8016a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8016a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a8a:	dd08      	ble.n	8016a9e <nk_unify+0xb2>
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	ed93 7a00 	vldr	s14, [r3]
 8016a92:	693b      	ldr	r3, [r7, #16]
 8016a94:	edd3 7a02 	vldr	s15, [r3, #8]
 8016a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a9c:	e001      	b.n	8016aa2 <nk_unify+0xb6>
 8016a9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	ed93 7a00 	vldr	s14, [r3]
 8016aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	edc3 7a02 	vstr	s15, [r3, #8]
    clip->h = NK_MIN(a->y + a->h, y1) - clip->y;
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	ed93 7a01 	vldr	s14, [r3, #4]
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	edd3 7a03 	vldr	s15, [r3, #12]
 8016abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ac2:	ed97 7a00 	vldr	s14, [r7]
 8016ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ace:	dd08      	ble.n	8016ae2 <nk_unify+0xf6>
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	ed93 7a01 	vldr	s14, [r3, #4]
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	edd3 7a03 	vldr	s15, [r3, #12]
 8016adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ae0:	e001      	b.n	8016ae6 <nk_unify+0xfa>
 8016ae2:	edd7 7a00 	vldr	s15, [r7]
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	ed93 7a01 	vldr	s14, [r3, #4]
 8016aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	edc3 7a03 	vstr	s15, [r3, #12]
    clip->w = NK_MAX(0, clip->w);
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	edd3 7a02 	vldr	s15, [r3, #8]
 8016afc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b04:	dd02      	ble.n	8016b0c <nk_unify+0x120>
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	689b      	ldr	r3, [r3, #8]
 8016b0a:	e001      	b.n	8016b10 <nk_unify+0x124>
 8016b0c:	f04f 0300 	mov.w	r3, #0
 8016b10:	697a      	ldr	r2, [r7, #20]
 8016b12:	6093      	str	r3, [r2, #8]
    clip->h = NK_MAX(0, clip->h);
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8016b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b22:	dd02      	ble.n	8016b2a <nk_unify+0x13e>
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	68db      	ldr	r3, [r3, #12]
 8016b28:	e001      	b.n	8016b2e <nk_unify+0x142>
 8016b2a:	f04f 0300 	mov.w	r3, #0
 8016b2e:	697a      	ldr	r2, [r7, #20]
 8016b30:	60d3      	str	r3, [r2, #12]
}
 8016b32:	bf00      	nop
 8016b34:	3718      	adds	r7, #24
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	08028b14 	.word	0x08028b14
 8016b40:	0802a884 	.word	0x0802a884
 8016b44:	08028b18 	.word	0x08028b18
 8016b48:	08028b34 	.word	0x08028b34

08016b4c <nk_triangle_from_direction>:

NK_API void
nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,
    float pad_x, float pad_y, enum nk_heading direction)
{
 8016b4c:	b590      	push	{r4, r7, lr}
 8016b4e:	b08b      	sub	sp, #44	; 0x2c
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	61f8      	str	r0, [r7, #28]
 8016b54:	eeb0 6a40 	vmov.f32	s12, s0
 8016b58:	eef0 6a60 	vmov.f32	s13, s1
 8016b5c:	eeb0 7a41 	vmov.f32	s14, s2
 8016b60:	eef0 7a61 	vmov.f32	s15, s3
 8016b64:	ed87 2a02 	vstr	s4, [r7, #8]
 8016b68:	edc7 2a01 	vstr	s5, [r7, #4]
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	ed87 6a03 	vstr	s12, [r7, #12]
 8016b72:	edc7 6a04 	vstr	s13, [r7, #16]
 8016b76:	ed87 7a05 	vstr	s14, [r7, #20]
 8016b7a:	edc7 7a06 	vstr	s15, [r7, #24]
 8016b7e:	70fb      	strb	r3, [r7, #3]
    float w_half, h_half;
    NK_ASSERT(result);
 8016b80:	69fb      	ldr	r3, [r7, #28]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d106      	bne.n	8016b94 <nk_triangle_from_direction+0x48>
 8016b86:	4bcf      	ldr	r3, [pc, #828]	; (8016ec4 <nk_triangle_from_direction+0x378>)
 8016b88:	4acf      	ldr	r2, [pc, #828]	; (8016ec8 <nk_triangle_from_direction+0x37c>)
 8016b8a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8016b8e:	48cf      	ldr	r0, [pc, #828]	; (8016ecc <nk_triangle_from_direction+0x380>)
 8016b90:	f00d ffae 	bl	8024af0 <__assert_func>

    r.w = NK_MAX(2 * pad_x, r.w);
 8016b94:	edd7 7a02 	vldr	s15, [r7, #8]
 8016b98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8016b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8016ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba8:	d502      	bpl.n	8016bb0 <nk_triangle_from_direction+0x64>
 8016baa:	edd7 7a05 	vldr	s15, [r7, #20]
 8016bae:	e003      	b.n	8016bb8 <nk_triangle_from_direction+0x6c>
 8016bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8016bb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016bb8:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = NK_MAX(2 * pad_y, r.h);
 8016bbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8016bc0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8016bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8016bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd0:	d502      	bpl.n	8016bd8 <nk_triangle_from_direction+0x8c>
 8016bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8016bd6:	e003      	b.n	8016be0 <nk_triangle_from_direction+0x94>
 8016bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8016bdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016be0:	edc7 7a06 	vstr	s15, [r7, #24]
    r.w = r.w - 2 * pad_x;
 8016be4:	ed97 7a05 	vldr	s14, [r7, #20]
 8016be8:	edd7 7a02 	vldr	s15, [r7, #8]
 8016bec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016bf4:	edc7 7a05 	vstr	s15, [r7, #20]
    r.h = r.h - 2 * pad_y;
 8016bf8:	ed97 7a06 	vldr	s14, [r7, #24]
 8016bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8016c00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c08:	edc7 7a06 	vstr	s15, [r7, #24]

    r.x = r.x + pad_x;
 8016c0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8016c10:	edd7 7a02 	vldr	s15, [r7, #8]
 8016c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c18:	edc7 7a03 	vstr	s15, [r7, #12]
    r.y = r.y + pad_y;
 8016c1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8016c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8016c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c28:	edc7 7a04 	vstr	s15, [r7, #16]

    w_half = r.w / 2.0f;
 8016c2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8016c30:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016c38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    h_half = r.h / 2.0f;
 8016c3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8016c40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016c48:	edc7 7a08 	vstr	s15, [r7, #32]

    if (direction == NK_UP) {
 8016c4c:	78fb      	ldrb	r3, [r7, #3]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d14d      	bne.n	8016cee <nk_triangle_from_direction+0x1a2>
        result[0] = nk_vec2(r.x + w_half, r.y);
 8016c52:	ed97 7a03 	vldr	s14, [r7, #12]
 8016c56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8016c62:	eef0 0a47 	vmov.f32	s1, s14
 8016c66:	eeb0 0a67 	vmov.f32	s0, s15
 8016c6a:	f7ff fe9d 	bl	80169a8 <nk_vec2>
 8016c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8016c72:	eef0 7a60 	vmov.f32	s15, s1
 8016c76:	69fb      	ldr	r3, [r7, #28]
 8016c78:	ed83 7a00 	vstr	s14, [r3]
 8016c7c:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + r.h);
 8016c80:	ed97 7a03 	vldr	s14, [r7, #12]
 8016c84:	edd7 7a05 	vldr	s15, [r7, #20]
 8016c88:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016c8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8016c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8016c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c98:	69fb      	ldr	r3, [r7, #28]
 8016c9a:	f103 0408 	add.w	r4, r3, #8
 8016c9e:	eef0 0a67 	vmov.f32	s1, s15
 8016ca2:	eeb0 0a66 	vmov.f32	s0, s13
 8016ca6:	f7ff fe7f 	bl	80169a8 <nk_vec2>
 8016caa:	eeb0 7a40 	vmov.f32	s14, s0
 8016cae:	eef0 7a60 	vmov.f32	s15, s1
 8016cb2:	ed84 7a00 	vstr	s14, [r4]
 8016cb6:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8016cba:	edd7 6a03 	vldr	s13, [r7, #12]
 8016cbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8016cc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8016cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016cca:	69fb      	ldr	r3, [r7, #28]
 8016ccc:	f103 0410 	add.w	r4, r3, #16
 8016cd0:	eef0 0a67 	vmov.f32	s1, s15
 8016cd4:	eeb0 0a66 	vmov.f32	s0, s13
 8016cd8:	f7ff fe66 	bl	80169a8 <nk_vec2>
 8016cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8016ce0:	eef0 7a60 	vmov.f32	s15, s1
 8016ce4:	ed84 7a00 	vstr	s14, [r4]
 8016ce8:	edc4 7a01 	vstr	s15, [r4, #4]
    } else {
        result[0] = nk_vec2(r.x, r.y + h_half);
        result[1] = nk_vec2(r.x + r.w, r.y);
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
    }
}
 8016cec:	e0e6      	b.n	8016ebc <nk_triangle_from_direction+0x370>
    } else if (direction == NK_RIGHT) {
 8016cee:	78fb      	ldrb	r3, [r7, #3]
 8016cf0:	2b01      	cmp	r3, #1
 8016cf2:	d149      	bne.n	8016d88 <nk_triangle_from_direction+0x23c>
        result[0] = nk_vec2(r.x, r.y);
 8016cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8016cf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8016cfc:	eef0 0a47 	vmov.f32	s1, s14
 8016d00:	eeb0 0a67 	vmov.f32	s0, s15
 8016d04:	f7ff fe50 	bl	80169a8 <nk_vec2>
 8016d08:	eeb0 7a40 	vmov.f32	s14, s0
 8016d0c:	eef0 7a60 	vmov.f32	s15, s1
 8016d10:	69fb      	ldr	r3, [r7, #28]
 8016d12:	ed83 7a00 	vstr	s14, [r3]
 8016d16:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y + h_half);
 8016d1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8016d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8016d22:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016d26:	ed97 7a04 	vldr	s14, [r7, #16]
 8016d2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8016d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d32:	69fb      	ldr	r3, [r7, #28]
 8016d34:	f103 0408 	add.w	r4, r3, #8
 8016d38:	eef0 0a67 	vmov.f32	s1, s15
 8016d3c:	eeb0 0a66 	vmov.f32	s0, s13
 8016d40:	f7ff fe32 	bl	80169a8 <nk_vec2>
 8016d44:	eeb0 7a40 	vmov.f32	s14, s0
 8016d48:	eef0 7a60 	vmov.f32	s15, s1
 8016d4c:	ed84 7a00 	vstr	s14, [r4]
 8016d50:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x, r.y + r.h);
 8016d54:	edd7 6a03 	vldr	s13, [r7, #12]
 8016d58:	ed97 7a04 	vldr	s14, [r7, #16]
 8016d5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8016d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	f103 0410 	add.w	r4, r3, #16
 8016d6a:	eef0 0a67 	vmov.f32	s1, s15
 8016d6e:	eeb0 0a66 	vmov.f32	s0, s13
 8016d72:	f7ff fe19 	bl	80169a8 <nk_vec2>
 8016d76:	eeb0 7a40 	vmov.f32	s14, s0
 8016d7a:	eef0 7a60 	vmov.f32	s15, s1
 8016d7e:	ed84 7a00 	vstr	s14, [r4]
 8016d82:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8016d86:	e099      	b.n	8016ebc <nk_triangle_from_direction+0x370>
    } else if (direction == NK_DOWN) {
 8016d88:	78fb      	ldrb	r3, [r7, #3]
 8016d8a:	2b02      	cmp	r3, #2
 8016d8c:	d149      	bne.n	8016e22 <nk_triangle_from_direction+0x2d6>
        result[0] = nk_vec2(r.x, r.y);
 8016d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d92:	ed97 7a04 	vldr	s14, [r7, #16]
 8016d96:	eef0 0a47 	vmov.f32	s1, s14
 8016d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8016d9e:	f7ff fe03 	bl	80169a8 <nk_vec2>
 8016da2:	eeb0 7a40 	vmov.f32	s14, s0
 8016da6:	eef0 7a60 	vmov.f32	s15, s1
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	ed83 7a00 	vstr	s14, [r3]
 8016db0:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8016db4:	ed97 7a03 	vldr	s14, [r7, #12]
 8016db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8016dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8016dc4:	69fb      	ldr	r3, [r7, #28]
 8016dc6:	f103 0408 	add.w	r4, r3, #8
 8016dca:	eef0 0a47 	vmov.f32	s1, s14
 8016dce:	eeb0 0a67 	vmov.f32	s0, s15
 8016dd2:	f7ff fde9 	bl	80169a8 <nk_vec2>
 8016dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8016dda:	eef0 7a60 	vmov.f32	s15, s1
 8016dde:	ed84 7a00 	vstr	s14, [r4]
 8016de2:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + w_half, r.y + r.h);
 8016de6:	ed97 7a03 	vldr	s14, [r7, #12]
 8016dea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016dee:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016df2:	ed97 7a04 	vldr	s14, [r7, #16]
 8016df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8016dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dfe:	69fb      	ldr	r3, [r7, #28]
 8016e00:	f103 0410 	add.w	r4, r3, #16
 8016e04:	eef0 0a67 	vmov.f32	s1, s15
 8016e08:	eeb0 0a66 	vmov.f32	s0, s13
 8016e0c:	f7ff fdcc 	bl	80169a8 <nk_vec2>
 8016e10:	eeb0 7a40 	vmov.f32	s14, s0
 8016e14:	eef0 7a60 	vmov.f32	s15, s1
 8016e18:	ed84 7a00 	vstr	s14, [r4]
 8016e1c:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8016e20:	e04c      	b.n	8016ebc <nk_triangle_from_direction+0x370>
        result[0] = nk_vec2(r.x, r.y + h_half);
 8016e22:	edd7 6a03 	vldr	s13, [r7, #12]
 8016e26:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8016e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e32:	eef0 0a67 	vmov.f32	s1, s15
 8016e36:	eeb0 0a66 	vmov.f32	s0, s13
 8016e3a:	f7ff fdb5 	bl	80169a8 <nk_vec2>
 8016e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8016e42:	eef0 7a60 	vmov.f32	s15, s1
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	ed83 7a00 	vstr	s14, [r3]
 8016e4c:	edc3 7a01 	vstr	s15, [r3, #4]
        result[1] = nk_vec2(r.x + r.w, r.y);
 8016e50:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e54:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	f103 0408 	add.w	r4, r3, #8
 8016e66:	eef0 0a47 	vmov.f32	s1, s14
 8016e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8016e6e:	f7ff fd9b 	bl	80169a8 <nk_vec2>
 8016e72:	eeb0 7a40 	vmov.f32	s14, s0
 8016e76:	eef0 7a60 	vmov.f32	s15, s1
 8016e7a:	ed84 7a00 	vstr	s14, [r4]
 8016e7e:	edc4 7a01 	vstr	s15, [r4, #4]
        result[2] = nk_vec2(r.x + r.w, r.y + r.h);
 8016e82:	ed97 7a03 	vldr	s14, [r7, #12]
 8016e86:	edd7 7a05 	vldr	s15, [r7, #20]
 8016e8a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8016e8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8016e92:	edd7 7a06 	vldr	s15, [r7, #24]
 8016e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e9a:	69fb      	ldr	r3, [r7, #28]
 8016e9c:	f103 0410 	add.w	r4, r3, #16
 8016ea0:	eef0 0a67 	vmov.f32	s1, s15
 8016ea4:	eeb0 0a66 	vmov.f32	s0, s13
 8016ea8:	f7ff fd7e 	bl	80169a8 <nk_vec2>
 8016eac:	eeb0 7a40 	vmov.f32	s14, s0
 8016eb0:	eef0 7a60 	vmov.f32	s15, s1
 8016eb4:	ed84 7a00 	vstr	s14, [r4]
 8016eb8:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8016ebc:	bf00      	nop
 8016ebe:	372c      	adds	r7, #44	; 0x2c
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd90      	pop	{r4, r7, pc}
 8016ec4:	08028b3c 	.word	0x08028b3c
 8016ec8:	0802a890 	.word	0x0802a890
 8016ecc:	08028b18 	.word	0x08028b18

08016ed0 <nk_create_page_element>:
 *                          PAGE ELEMENT
 *
 * ===============================================================*/
NK_LIB struct nk_page_element*
nk_create_page_element(struct nk_context *ctx)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b084      	sub	sp, #16
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    if (ctx->freelist) {
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016ede:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d00e      	beq.n	8016f04 <nk_create_page_element+0x34>
        /* unlink page element from free list */
        elem = ctx->freelist;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016eec:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8016ef0:	60fb      	str	r3, [r7, #12]
        ctx->freelist = elem->next;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8016ef8:	687a      	ldr	r2, [r7, #4]
 8016efa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8016efe:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
 8016f02:	e036      	b.n	8016f72 <nk_create_page_element+0xa2>
    } else if (ctx->use_pool) {
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016f0a:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d015      	beq.n	8016f3e <nk_create_page_element+0x6e>
        /* allocate page element from memory pool */
        elem = nk_pool_alloc(&ctx->pool);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8016f18:	3324      	adds	r3, #36	; 0x24
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f002 fa88 	bl	8019430 <nk_pool_alloc>
 8016f20:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d105      	bne.n	8016f34 <nk_create_page_element+0x64>
 8016f28:	4b1b      	ldr	r3, [pc, #108]	; (8016f98 <nk_create_page_element+0xc8>)
 8016f2a:	4a1c      	ldr	r2, [pc, #112]	; (8016f9c <nk_create_page_element+0xcc>)
 8016f2c:	2114      	movs	r1, #20
 8016f2e:	481c      	ldr	r0, [pc, #112]	; (8016fa0 <nk_create_page_element+0xd0>)
 8016f30:	f00d fdde 	bl	8024af0 <__assert_func>
        if (!elem) return 0;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d11b      	bne.n	8016f72 <nk_create_page_element+0xa2>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	e027      	b.n	8016f8e <nk_create_page_element+0xbe>
    } else {
        /* allocate new page element from back of fixed size memory buffer */
        NK_STORAGE const nk_size size = sizeof(struct nk_page_element);
        NK_STORAGE const nk_size align = NK_ALIGNOF(struct nk_page_element);
        elem = (struct nk_page_element*)nk_buffer_alloc(&ctx->memory, NK_BUFFER_BACK, size, align);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	f503 50d4 	add.w	r0, r3, #6784	; 0x1a80
 8016f44:	300c      	adds	r0, #12
 8016f46:	4b17      	ldr	r3, [pc, #92]	; (8016fa4 <nk_create_page_element+0xd4>)
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	4b17      	ldr	r3, [pc, #92]	; (8016fa8 <nk_create_page_element+0xd8>)
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	2101      	movs	r1, #1
 8016f50:	f7f7 fd62 	bl	800ea18 <nk_buffer_alloc>
 8016f54:	60f8      	str	r0, [r7, #12]
        NK_ASSERT(elem);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d105      	bne.n	8016f68 <nk_create_page_element+0x98>
 8016f5c:	4b0e      	ldr	r3, [pc, #56]	; (8016f98 <nk_create_page_element+0xc8>)
 8016f5e:	4a0f      	ldr	r2, [pc, #60]	; (8016f9c <nk_create_page_element+0xcc>)
 8016f60:	211b      	movs	r1, #27
 8016f62:	480f      	ldr	r0, [pc, #60]	; (8016fa0 <nk_create_page_element+0xd0>)
 8016f64:	f00d fdc4 	bl	8024af0 <__assert_func>
        if (!elem) return 0;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d101      	bne.n	8016f72 <nk_create_page_element+0xa2>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	e00d      	b.n	8016f8e <nk_create_page_element+0xbe>
    }
    nk_zero_struct(*elem);
 8016f72:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8016f76:	68f8      	ldr	r0, [r7, #12]
 8016f78:	f00b fb90 	bl	802269c <nk_zero>
    elem->next = 0;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    elem->prev = 0;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	2200      	movs	r2, #0
 8016f88:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    return elem;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3710      	adds	r7, #16
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	08028b44 	.word	0x08028b44
 8016f9c:	0802a8ac 	.word	0x0802a8ac
 8016fa0:	08028b4c 	.word	0x08028b4c
 8016fa4:	0802a8c4 	.word	0x0802a8c4
 8016fa8:	0802a8c8 	.word	0x0802a8c8

08016fac <nk_link_page_element_into_freelist>:
NK_LIB void
nk_link_page_element_into_freelist(struct nk_context *ctx,
    struct nk_page_element *elem)
{
 8016fac:	b480      	push	{r7}
 8016fae:	b083      	sub	sp, #12
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
 8016fb4:	6039      	str	r1, [r7, #0]
    /* link table into freelist */
    if (!ctx->freelist) {
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fbc:	f8d3 365c 	ldr.w	r3, [r3, #1628]	; 0x65c
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d107      	bne.n	8016fd4 <nk_link_page_element_into_freelist+0x28>
        ctx->freelist = elem;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fca:	461a      	mov	r2, r3
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
    } else {
        elem->next = ctx->freelist;
        ctx->freelist = elem;
    }
}
 8016fd2:	e00e      	b.n	8016ff2 <nk_link_page_element_into_freelist+0x46>
        elem->next = ctx->freelist;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fda:	f8d3 265c 	ldr.w	r2, [r3, #1628]	; 0x65c
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        ctx->freelist = elem;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016fea:	461a      	mov	r2, r3
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	f8c2 365c 	str.w	r3, [r2, #1628]	; 0x65c
}
 8016ff2:	bf00      	nop
 8016ff4:	370c      	adds	r7, #12
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr

08016ffe <nk_free_page_element>:
NK_LIB void
nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)
{
 8016ffe:	b580      	push	{r7, lr}
 8017000:	b084      	sub	sp, #16
 8017002:	af00      	add	r7, sp, #0
 8017004:	6078      	str	r0, [r7, #4]
 8017006:	6039      	str	r1, [r7, #0]
    /* we have a pool so just add to free list */
    if (ctx->use_pool) {
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801700e:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8017012:	2b00      	cmp	r3, #0
 8017014:	d004      	beq.n	8017020 <nk_free_page_element+0x22>
        nk_link_page_element_into_freelist(ctx, elem);
 8017016:	6839      	ldr	r1, [r7, #0]
 8017018:	6878      	ldr	r0, [r7, #4]
 801701a:	f7ff ffc7 	bl	8016fac <nk_link_page_element_into_freelist>
        return;
 801701e:	e024      	b.n	801706a <nk_free_page_element+0x6c>
    }
    /* if possible remove last element from back of fixed memory buffer */
    {void *elem_end = (void*)(elem + 1);
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8017026:	60fb      	str	r3, [r7, #12]
    void *buffer_end = (nk_byte*)ctx->memory.memory.ptr + ctx->memory.size;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801702e:	f8d3 2aac 	ldr.w	r2, [r3, #2732]	; 0xaac
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017038:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 801703c:	4413      	add	r3, r2
 801703e:	60bb      	str	r3, [r7, #8]
    if (elem_end == buffer_end)
 8017040:	68fa      	ldr	r2, [r7, #12]
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	429a      	cmp	r2, r3
 8017046:	d10c      	bne.n	8017062 <nk_free_page_element+0x64>
        ctx->memory.size -= sizeof(struct nk_page_element);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801704e:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	; 0xac4
 8017052:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017056:	687a      	ldr	r2, [r7, #4]
 8017058:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801705c:	f8c2 3ac4 	str.w	r3, [r2, #2756]	; 0xac4
 8017060:	e003      	b.n	801706a <nk_free_page_element+0x6c>
    else nk_link_page_element_into_freelist(ctx, elem);}
 8017062:	6839      	ldr	r1, [r7, #0]
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f7ff ffa1 	bl	8016fac <nk_link_page_element_into_freelist>
}
 801706a:	3710      	adds	r7, #16
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}

08017070 <nk_create_panel>:
 *                              PANEL
 *
 * ===============================================================*/
NK_LIB void*
nk_create_panel(struct nk_context *ctx)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b084      	sub	sp, #16
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 8017078:	6878      	ldr	r0, [r7, #4]
 801707a:	f7ff ff29 	bl	8016ed0 <nk_create_page_element>
 801707e:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d101      	bne.n	801708a <nk_create_panel+0x1a>
 8017086:	2300      	movs	r3, #0
 8017088:	e005      	b.n	8017096 <nk_create_panel+0x26>
    nk_zero_struct(*elem);
 801708a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801708e:	68f8      	ldr	r0, [r7, #12]
 8017090:	f00b fb04 	bl	802269c <nk_zero>
    return &elem->data.pan;
 8017094:	68fb      	ldr	r3, [r7, #12]
}
 8017096:	4618      	mov	r0, r3
 8017098:	3710      	adds	r7, #16
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}

0801709e <nk_free_panel>:
NK_LIB void
nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)
{
 801709e:	b580      	push	{r7, lr}
 80170a0:	b084      	sub	sp, #16
 80170a2:	af00      	add	r7, sp, #0
 80170a4:	6078      	str	r0, [r7, #4]
 80170a6:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(pan, union nk_page_data, pan);
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 80170b0:	68b9      	ldr	r1, [r7, #8]
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f7ff ffa3 	bl	8016ffe <nk_free_page_element>
}
 80170b8:	bf00      	nop
 80170ba:	3710      	adds	r7, #16
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}

080170c0 <nk_panel_has_header>:
NK_LIB nk_bool
nk_panel_has_header(nk_flags flags, const char *title)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b085      	sub	sp, #20
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
 80170c8:	6039      	str	r1, [r7, #0]
    nk_bool active = 0;
 80170ca:	2300      	movs	r3, #0
 80170cc:	60fb      	str	r3, [r7, #12]
    active = (flags & (NK_WINDOW_CLOSABLE|NK_WINDOW_MINIMIZABLE));
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f003 0318 	and.w	r3, r3, #24
 80170d4:	60fb      	str	r3, [r7, #12]
    active = active || (flags & NK_WINDOW_TITLE);
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d104      	bne.n	80170e6 <nk_panel_has_header+0x26>
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d001      	beq.n	80170ea <nk_panel_has_header+0x2a>
 80170e6:	2301      	movs	r3, #1
 80170e8:	e000      	b.n	80170ec <nk_panel_has_header+0x2c>
 80170ea:	2300      	movs	r3, #0
 80170ec:	60fb      	str	r3, [r7, #12]
    active = active && !(flags & NK_WINDOW_HIDDEN) && title;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d009      	beq.n	8017108 <nk_panel_has_header+0x48>
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d104      	bne.n	8017108 <nk_panel_has_header+0x48>
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d001      	beq.n	8017108 <nk_panel_has_header+0x48>
 8017104:	2301      	movs	r3, #1
 8017106:	e000      	b.n	801710a <nk_panel_has_header+0x4a>
 8017108:	2300      	movs	r3, #0
 801710a:	60fb      	str	r3, [r7, #12]
    return active;
 801710c:	68fb      	ldr	r3, [r7, #12]
}
 801710e:	4618      	mov	r0, r3
 8017110:	3714      	adds	r7, #20
 8017112:	46bd      	mov	sp, r7
 8017114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017118:	4770      	bx	lr
	...

0801711c <nk_panel_get_padding>:
NK_LIB struct nk_vec2
nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)
{
 801711c:	b480      	push	{r7}
 801711e:	b087      	sub	sp, #28
 8017120:	af00      	add	r7, sp, #0
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	460b      	mov	r3, r1
 8017126:	72fb      	strb	r3, [r7, #11]
    switch (type) {
 8017128:	7afb      	ldrb	r3, [r7, #11]
 801712a:	2b80      	cmp	r3, #128	; 0x80
 801712c:	f000 809a 	beq.w	8017264 <nk_panel_get_padding+0x148>
 8017130:	2b80      	cmp	r3, #128	; 0x80
 8017132:	dc49      	bgt.n	80171c8 <nk_panel_get_padding+0xac>
 8017134:	2b20      	cmp	r3, #32
 8017136:	dc45      	bgt.n	80171c4 <nk_panel_get_padding+0xa8>
 8017138:	2b02      	cmp	r3, #2
 801713a:	db45      	blt.n	80171c8 <nk_panel_get_padding+0xac>
 801713c:	3b02      	subs	r3, #2
 801713e:	2b1e      	cmp	r3, #30
 8017140:	d842      	bhi.n	80171c8 <nk_panel_get_padding+0xac>
 8017142:	a201      	add	r2, pc, #4	; (adr r2, 8017148 <nk_panel_get_padding+0x2c>)
 8017144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017148:	080171e3 	.word	0x080171e3
 801714c:	080171c9 	.word	0x080171c9
 8017150:	080171fd 	.word	0x080171fd
 8017154:	080171c9 	.word	0x080171c9
 8017158:	080171c9 	.word	0x080171c9
 801715c:	080171c9 	.word	0x080171c9
 8017160:	080171c9 	.word	0x080171c9
 8017164:	080171c9 	.word	0x080171c9
 8017168:	080171c9 	.word	0x080171c9
 801716c:	080171c9 	.word	0x080171c9
 8017170:	080171c9 	.word	0x080171c9
 8017174:	080171c9 	.word	0x080171c9
 8017178:	080171c9 	.word	0x080171c9
 801717c:	080171c9 	.word	0x080171c9
 8017180:	08017217 	.word	0x08017217
 8017184:	080171c9 	.word	0x080171c9
 8017188:	080171c9 	.word	0x080171c9
 801718c:	080171c9 	.word	0x080171c9
 8017190:	080171c9 	.word	0x080171c9
 8017194:	080171c9 	.word	0x080171c9
 8017198:	080171c9 	.word	0x080171c9
 801719c:	080171c9 	.word	0x080171c9
 80171a0:	080171c9 	.word	0x080171c9
 80171a4:	080171c9 	.word	0x080171c9
 80171a8:	080171c9 	.word	0x080171c9
 80171ac:	080171c9 	.word	0x080171c9
 80171b0:	080171c9 	.word	0x080171c9
 80171b4:	080171c9 	.word	0x080171c9
 80171b8:	080171c9 	.word	0x080171c9
 80171bc:	080171c9 	.word	0x080171c9
 80171c0:	08017231 	.word	0x08017231
 80171c4:	2b40      	cmp	r3, #64	; 0x40
 80171c6:	d040      	beq.n	801724a <nk_panel_get_padding+0x12e>
    default:
    case NK_PANEL_WINDOW: return style->window.padding;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171ce:	461a      	mov	r2, r3
 80171d0:	f107 0310 	add.w	r3, r7, #16
 80171d4:	f602 02ec 	addw	r2, r2, #2284	; 0x8ec
 80171d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80171e0:	e04c      	b.n	801727c <nk_panel_get_padding+0x160>
    case NK_PANEL_GROUP: return style->window.group_padding;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171e8:	461a      	mov	r2, r3
 80171ea:	f107 0310 	add.w	r3, r7, #16
 80171ee:	f602 02f4 	addw	r2, r2, #2292	; 0x8f4
 80171f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80171fa:	e03f      	b.n	801727c <nk_panel_get_padding+0x160>
    case NK_PANEL_POPUP: return style->window.popup_padding;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017202:	461a      	mov	r2, r3
 8017204:	f107 0310 	add.w	r3, r7, #16
 8017208:	f602 02fc 	addw	r2, r2, #2300	; 0x8fc
 801720c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017210:	e883 0003 	stmia.w	r3, {r0, r1}
 8017214:	e032      	b.n	801727c <nk_panel_get_padding+0x160>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_padding;
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801721c:	461a      	mov	r2, r3
 801721e:	f107 0310 	add.w	r3, r7, #16
 8017222:	f602 120c 	addw	r2, r2, #2316	; 0x90c
 8017226:	e892 0003 	ldmia.w	r2, {r0, r1}
 801722a:	e883 0003 	stmia.w	r3, {r0, r1}
 801722e:	e025      	b.n	801727c <nk_panel_get_padding+0x160>
    case NK_PANEL_COMBO: return style->window.combo_padding;
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017236:	461a      	mov	r2, r3
 8017238:	f107 0310 	add.w	r3, r7, #16
 801723c:	f602 1204 	addw	r2, r2, #2308	; 0x904
 8017240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017244:	e883 0003 	stmia.w	r3, {r0, r1}
 8017248:	e018      	b.n	801727c <nk_panel_get_padding+0x160>
    case NK_PANEL_MENU: return style->window.menu_padding;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017250:	461a      	mov	r2, r3
 8017252:	f107 0310 	add.w	r3, r7, #16
 8017256:	f602 1214 	addw	r2, r2, #2324	; 0x914
 801725a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801725e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017262:	e00b      	b.n	801727c <nk_panel_get_padding+0x160>
    case NK_PANEL_TOOLTIP: return style->window.menu_padding;}
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801726a:	461a      	mov	r2, r3
 801726c:	f107 0310 	add.w	r3, r7, #16
 8017270:	f602 1214 	addw	r2, r2, #2324	; 0x914
 8017274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017278:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801727c:	693a      	ldr	r2, [r7, #16]
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	ee07 2a10 	vmov	s14, r2
 8017284:	ee07 3a90 	vmov	s15, r3
 8017288:	eeb0 0a47 	vmov.f32	s0, s14
 801728c:	eef0 0a67 	vmov.f32	s1, s15
 8017290:	371c      	adds	r7, #28
 8017292:	46bd      	mov	sp, r7
 8017294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop

0801729c <nk_panel_get_border>:
NK_LIB float
nk_panel_get_border(const struct nk_style *style, nk_flags flags,
    enum nk_panel_type type)
{
 801729c:	b480      	push	{r7}
 801729e:	b085      	sub	sp, #20
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	4613      	mov	r3, r2
 80172a8:	71fb      	strb	r3, [r7, #7]
    if (flags & NK_WINDOW_BORDER) {
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	f003 0301 	and.w	r3, r3, #1
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f000 8080 	beq.w	80173b6 <nk_panel_get_border+0x11a>
        switch (type) {
 80172b6:	79fb      	ldrb	r3, [r7, #7]
 80172b8:	2b80      	cmp	r3, #128	; 0x80
 80172ba:	d075      	beq.n	80173a8 <nk_panel_get_border+0x10c>
 80172bc:	2b80      	cmp	r3, #128	; 0x80
 80172be:	dc49      	bgt.n	8017354 <nk_panel_get_border+0xb8>
 80172c0:	2b20      	cmp	r3, #32
 80172c2:	dc45      	bgt.n	8017350 <nk_panel_get_border+0xb4>
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	db45      	blt.n	8017354 <nk_panel_get_border+0xb8>
 80172c8:	3b02      	subs	r3, #2
 80172ca:	2b1e      	cmp	r3, #30
 80172cc:	d842      	bhi.n	8017354 <nk_panel_get_border+0xb8>
 80172ce:	a201      	add	r2, pc, #4	; (adr r2, 80172d4 <nk_panel_get_border+0x38>)
 80172d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172d4:	08017363 	.word	0x08017363
 80172d8:	08017355 	.word	0x08017355
 80172dc:	08017371 	.word	0x08017371
 80172e0:	08017355 	.word	0x08017355
 80172e4:	08017355 	.word	0x08017355
 80172e8:	08017355 	.word	0x08017355
 80172ec:	08017355 	.word	0x08017355
 80172f0:	08017355 	.word	0x08017355
 80172f4:	08017355 	.word	0x08017355
 80172f8:	08017355 	.word	0x08017355
 80172fc:	08017355 	.word	0x08017355
 8017300:	08017355 	.word	0x08017355
 8017304:	08017355 	.word	0x08017355
 8017308:	08017355 	.word	0x08017355
 801730c:	0801737f 	.word	0x0801737f
 8017310:	08017355 	.word	0x08017355
 8017314:	08017355 	.word	0x08017355
 8017318:	08017355 	.word	0x08017355
 801731c:	08017355 	.word	0x08017355
 8017320:	08017355 	.word	0x08017355
 8017324:	08017355 	.word	0x08017355
 8017328:	08017355 	.word	0x08017355
 801732c:	08017355 	.word	0x08017355
 8017330:	08017355 	.word	0x08017355
 8017334:	08017355 	.word	0x08017355
 8017338:	08017355 	.word	0x08017355
 801733c:	08017355 	.word	0x08017355
 8017340:	08017355 	.word	0x08017355
 8017344:	08017355 	.word	0x08017355
 8017348:	08017355 	.word	0x08017355
 801734c:	0801738d 	.word	0x0801738d
 8017350:	2b40      	cmp	r3, #64	; 0x40
 8017352:	d022      	beq.n	801739a <nk_panel_get_border+0xfe>
        default:
        case NK_PANEL_WINDOW: return style->window.border;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801735a:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	e02b      	b.n	80173ba <nk_panel_get_border+0x11e>
        case NK_PANEL_GROUP: return style->window.group_border;
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017368:	f503 630c 	add.w	r3, r3, #2240	; 0x8c0
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	e024      	b.n	80173ba <nk_panel_get_border+0x11e>
        case NK_PANEL_POPUP: return style->window.popup_border;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017376:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	e01d      	b.n	80173ba <nk_panel_get_border+0x11e>
        case NK_PANEL_CONTEXTUAL: return style->window.contextual_border;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017384:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	e016      	b.n	80173ba <nk_panel_get_border+0x11e>
        case NK_PANEL_COMBO: return style->window.combo_border;
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017392:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	e00f      	b.n	80173ba <nk_panel_get_border+0x11e>
        case NK_PANEL_MENU: return style->window.menu_border;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173a0:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	e008      	b.n	80173ba <nk_panel_get_border+0x11e>
        case NK_PANEL_TOOLTIP: return style->window.menu_border;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173ae:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	e001      	b.n	80173ba <nk_panel_get_border+0x11e>
    }} else return 0;
 80173b6:	f04f 0300 	mov.w	r3, #0
}
 80173ba:	ee07 3a90 	vmov	s15, r3
 80173be:	eeb0 0a67 	vmov.f32	s0, s15
 80173c2:	3714      	adds	r7, #20
 80173c4:	46bd      	mov	sp, r7
 80173c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ca:	4770      	bx	lr

080173cc <nk_panel_get_border_color>:
NK_LIB struct nk_color
nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b085      	sub	sp, #20
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	460b      	mov	r3, r1
 80173d6:	70fb      	strb	r3, [r7, #3]
    switch (type) {
 80173d8:	78fb      	ldrb	r3, [r7, #3]
 80173da:	2b80      	cmp	r3, #128	; 0x80
 80173dc:	d076      	beq.n	80174cc <nk_panel_get_border_color+0x100>
 80173de:	2b80      	cmp	r3, #128	; 0x80
 80173e0:	dc4a      	bgt.n	8017478 <nk_panel_get_border_color+0xac>
 80173e2:	2b20      	cmp	r3, #32
 80173e4:	dc46      	bgt.n	8017474 <nk_panel_get_border_color+0xa8>
 80173e6:	2b02      	cmp	r3, #2
 80173e8:	db46      	blt.n	8017478 <nk_panel_get_border_color+0xac>
 80173ea:	3b02      	subs	r3, #2
 80173ec:	2b1e      	cmp	r3, #30
 80173ee:	d843      	bhi.n	8017478 <nk_panel_get_border_color+0xac>
 80173f0:	a201      	add	r2, pc, #4	; (adr r2, 80173f8 <nk_panel_get_border_color+0x2c>)
 80173f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173f6:	bf00      	nop
 80173f8:	08017487 	.word	0x08017487
 80173fc:	08017479 	.word	0x08017479
 8017400:	08017495 	.word	0x08017495
 8017404:	08017479 	.word	0x08017479
 8017408:	08017479 	.word	0x08017479
 801740c:	08017479 	.word	0x08017479
 8017410:	08017479 	.word	0x08017479
 8017414:	08017479 	.word	0x08017479
 8017418:	08017479 	.word	0x08017479
 801741c:	08017479 	.word	0x08017479
 8017420:	08017479 	.word	0x08017479
 8017424:	08017479 	.word	0x08017479
 8017428:	08017479 	.word	0x08017479
 801742c:	08017479 	.word	0x08017479
 8017430:	080174a3 	.word	0x080174a3
 8017434:	08017479 	.word	0x08017479
 8017438:	08017479 	.word	0x08017479
 801743c:	08017479 	.word	0x08017479
 8017440:	08017479 	.word	0x08017479
 8017444:	08017479 	.word	0x08017479
 8017448:	08017479 	.word	0x08017479
 801744c:	08017479 	.word	0x08017479
 8017450:	08017479 	.word	0x08017479
 8017454:	08017479 	.word	0x08017479
 8017458:	08017479 	.word	0x08017479
 801745c:	08017479 	.word	0x08017479
 8017460:	08017479 	.word	0x08017479
 8017464:	08017479 	.word	0x08017479
 8017468:	08017479 	.word	0x08017479
 801746c:	08017479 	.word	0x08017479
 8017470:	080174b1 	.word	0x080174b1
 8017474:	2b40      	cmp	r3, #64	; 0x40
 8017476:	d022      	beq.n	80174be <nk_panel_get_border_color+0xf2>
    default:
    case NK_PANEL_WINDOW: return style->window.border_color;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801747e:	f8d3 3878 	ldr.w	r3, [r3, #2168]	; 0x878
 8017482:	60fb      	str	r3, [r7, #12]
 8017484:	e028      	b.n	80174d8 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_GROUP: return style->window.group_border_color;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801748c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
 8017490:	60fb      	str	r3, [r7, #12]
 8017492:	e021      	b.n	80174d8 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_POPUP: return style->window.popup_border_color;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801749a:	f8d3 387c 	ldr.w	r3, [r3, #2172]	; 0x87c
 801749e:	60fb      	str	r3, [r7, #12]
 80174a0:	e01a      	b.n	80174d8 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_CONTEXTUAL: return style->window.contextual_border_color;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174a8:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 80174ac:	60fb      	str	r3, [r7, #12]
 80174ae:	e013      	b.n	80174d8 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_COMBO: return style->window.combo_border_color;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 80174ba:	60fb      	str	r3, [r7, #12]
 80174bc:	e00c      	b.n	80174d8 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_MENU: return style->window.menu_border_color;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174c4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 80174c8:	60fb      	str	r3, [r7, #12]
 80174ca:	e005      	b.n	80174d8 <nk_panel_get_border_color+0x10c>
    case NK_PANEL_TOOLTIP: return style->window.menu_border_color;}
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174d2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
 80174d6:	60fb      	str	r3, [r7, #12]
}
 80174d8:	2300      	movs	r3, #0
 80174da:	7b3a      	ldrb	r2, [r7, #12]
 80174dc:	f362 0307 	bfi	r3, r2, #0, #8
 80174e0:	7b7a      	ldrb	r2, [r7, #13]
 80174e2:	f362 230f 	bfi	r3, r2, #8, #8
 80174e6:	7bba      	ldrb	r2, [r7, #14]
 80174e8:	f362 4317 	bfi	r3, r2, #16, #8
 80174ec:	7bfa      	ldrb	r2, [r7, #15]
 80174ee:	f362 631f 	bfi	r3, r2, #24, #8
 80174f2:	4618      	mov	r0, r3
 80174f4:	3714      	adds	r7, #20
 80174f6:	46bd      	mov	sp, r7
 80174f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop

08017500 <nk_panel_is_sub>:
NK_LIB nk_bool
nk_panel_is_sub(enum nk_panel_type type)
{
 8017500:	b480      	push	{r7}
 8017502:	b083      	sub	sp, #12
 8017504:	af00      	add	r7, sp, #0
 8017506:	4603      	mov	r3, r0
 8017508:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_SUB)?1:0;
 801750a:	79fb      	ldrb	r3, [r7, #7]
 801750c:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
 8017510:	2b00      	cmp	r3, #0
 8017512:	bf14      	ite	ne
 8017514:	2301      	movne	r3, #1
 8017516:	2300      	moveq	r3, #0
 8017518:	b2db      	uxtb	r3, r3
}
 801751a:	4618      	mov	r0, r3
 801751c:	370c      	adds	r7, #12
 801751e:	46bd      	mov	sp, r7
 8017520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017524:	4770      	bx	lr

08017526 <nk_panel_is_nonblock>:
NK_LIB nk_bool
nk_panel_is_nonblock(enum nk_panel_type type)
{
 8017526:	b480      	push	{r7}
 8017528:	b083      	sub	sp, #12
 801752a:	af00      	add	r7, sp, #0
 801752c:	4603      	mov	r3, r0
 801752e:	71fb      	strb	r3, [r7, #7]
    return (type & NK_PANEL_SET_NONBLOCK)?1:0;
 8017530:	79fb      	ldrb	r3, [r7, #7]
 8017532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017536:	2b00      	cmp	r3, #0
 8017538:	bf14      	ite	ne
 801753a:	2301      	movne	r3, #1
 801753c:	2300      	moveq	r3, #0
 801753e:	b2db      	uxtb	r3, r3
}
 8017540:	4618      	mov	r0, r3
 8017542:	370c      	adds	r7, #12
 8017544:	46bd      	mov	sp, r7
 8017546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754a:	4770      	bx	lr

0801754c <nk_panel_begin>:
NK_LIB nk_bool
nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)
{
 801754c:	b590      	push	{r4, r7, lr}
 801754e:	b0b7      	sub	sp, #220	; 0xdc
 8017550:	af04      	add	r7, sp, #16
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	4613      	mov	r3, r2
 8017558:	71fb      	strb	r3, [r7, #7]
    const struct nk_user_font *font;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d105      	bne.n	801756c <nk_panel_begin+0x20>
 8017560:	4b7e      	ldr	r3, [pc, #504]	; (801775c <nk_panel_begin+0x210>)
 8017562:	4a7f      	ldr	r2, [pc, #508]	; (8017760 <nk_panel_begin+0x214>)
 8017564:	2163      	movs	r1, #99	; 0x63
 8017566:	487f      	ldr	r0, [pc, #508]	; (8017764 <nk_panel_begin+0x218>)
 8017568:	f00d fac2 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017572:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017576:	2b00      	cmp	r3, #0
 8017578:	d105      	bne.n	8017586 <nk_panel_begin+0x3a>
 801757a:	4b7b      	ldr	r3, [pc, #492]	; (8017768 <nk_panel_begin+0x21c>)
 801757c:	4a78      	ldr	r2, [pc, #480]	; (8017760 <nk_panel_begin+0x214>)
 801757e:	2164      	movs	r1, #100	; 0x64
 8017580:	4878      	ldr	r0, [pc, #480]	; (8017764 <nk_panel_begin+0x218>)
 8017582:	f00d fab5 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801758c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017594:	2b00      	cmp	r3, #0
 8017596:	d105      	bne.n	80175a4 <nk_panel_begin+0x58>
 8017598:	4b74      	ldr	r3, [pc, #464]	; (801776c <nk_panel_begin+0x220>)
 801759a:	4a71      	ldr	r2, [pc, #452]	; (8017760 <nk_panel_begin+0x214>)
 801759c:	2165      	movs	r1, #101	; 0x65
 801759e:	4871      	ldr	r0, [pc, #452]	; (8017764 <nk_panel_begin+0x218>)
 80175a0:	f00d faa6 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return 0;
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d00f      	beq.n	80175ca <nk_panel_begin+0x7e>
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d008      	beq.n	80175ca <nk_panel_begin+0x7e>
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175be:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d102      	bne.n	80175d0 <nk_panel_begin+0x84>
 80175ca:	2300      	movs	r3, #0
 80175cc:	f000 bef7 	b.w	80183be <nk_panel_begin+0xe72>
    nk_zero(ctx->current->layout, sizeof(*ctx->current->layout));
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175d6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175de:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80175e2:	4618      	mov	r0, r3
 80175e4:	f00b f85a 	bl	802269c <nk_zero>
    if ((ctx->current->flags & NK_WINDOW_HIDDEN) || (ctx->current->flags & NK_WINDOW_CLOSED)) {
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80175ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80175f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80175f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d109      	bne.n	8017610 <nk_panel_begin+0xc4>
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017602:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801760c:	2b00      	cmp	r3, #0
 801760e:	d017      	beq.n	8017640 <nk_panel_begin+0xf4>
        nk_zero(ctx->current->layout, sizeof(struct nk_panel));
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017616:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801761a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801761e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8017622:	4618      	mov	r0, r3
 8017624:	f00b f83a 	bl	802269c <nk_zero>
        ctx->current->layout->type = panel_type;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801762e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8017632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017636:	79fa      	ldrb	r2, [r7, #7]
 8017638:	701a      	strb	r2, [r3, #0]
        return 0;
 801763a:	2300      	movs	r3, #0
 801763c:	f000 bebf 	b.w	80183be <nk_panel_begin+0xe72>
    }
    /* pull state into local stack */
    style = &ctx->style;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    font = style->font;
 801764a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    win = ctx->current;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801765a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801765e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    layout = win->layout;
 8017662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801766a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    out = &win->buffer;
 801766e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017672:	3364      	adds	r3, #100	; 0x64
 8017674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    in = (win->flags & NK_WINDOW_NO_INPUT) ? 0: &ctx->input;
 8017678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801767c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801767e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017682:	2b00      	cmp	r3, #0
 8017684:	d101      	bne.n	801768a <nk_panel_begin+0x13e>
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	e000      	b.n	801768c <nk_panel_begin+0x140>
 801768a:	2300      	movs	r3, #0
 801768c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
#ifdef NK_INCLUDE_COMMAND_USERDATA
    win->buffer.userdata = ctx->userdata;
#endif
    /* pull style configuration into local stack */
    scrollbar_size = style->window.scrollbar_size;
 8017690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017698:	461a      	mov	r2, r3
 801769a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801769e:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 80176a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176a6:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, panel_type);
 80176aa:	79fb      	ldrb	r3, [r7, #7]
 80176ac:	4619      	mov	r1, r3
 80176ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80176b2:	f7ff fd33 	bl	801711c <nk_panel_get_padding>
 80176b6:	eeb0 7a40 	vmov.f32	s14, s0
 80176ba:	eef0 7a60 	vmov.f32	s15, s1
 80176be:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 80176c2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

    /* window movement */
    if ((win->flags & NK_WINDOW_MOVABLE) && !(win->flags & NK_WINDOW_ROM)) {
 80176c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176cc:	f003 0302 	and.w	r3, r3, #2
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	f000 80bf 	beq.w	8017854 <nk_panel_begin+0x308>
 80176d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	f040 80b7 	bne.w	8017854 <nk_panel_begin+0x308>
        unsigned int left_mouse_clicked;
        int left_mouse_click_in_cursor;

        /* calculate draggable window space */
        struct nk_rect header;
        header.x = win->bounds.x;
 80176e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176ec:	67bb      	str	r3, [r7, #120]	; 0x78
        header.y = win->bounds.y;
 80176ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176f4:	67fb      	str	r3, [r7, #124]	; 0x7c
        header.w = win->bounds.w;
 80176f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80176fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if (nk_panel_has_header(win->flags, title)) {
 8017700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017706:	68b9      	ldr	r1, [r7, #8]
 8017708:	4618      	mov	r0, r3
 801770a:	f7ff fcd9 	bl	80170c0 <nk_panel_has_header>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d02d      	beq.n	8017770 <nk_panel_begin+0x224>
            header.h = font->height + 2.0f * style->window.header.padding.y;
 8017714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017718:	ed93 7a01 	vldr	s14, [r3, #4]
 801771c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017724:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017728:	edd3 7a00 	vldr	s15, [r3]
 801772c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017734:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            header.h += 2.0f * style->window.header.label_padding.y;
 8017738:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 801773c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017744:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8017748:	edd3 7a00 	vldr	s15, [r3]
 801774c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017754:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8017758:	e00e      	b.n	8017778 <nk_panel_begin+0x22c>
 801775a:	bf00      	nop
 801775c:	08028b70 	.word	0x08028b70
 8017760:	0802a8e0 	.word	0x0802a8e0
 8017764:	08028b74 	.word	0x08028b74
 8017768:	08028b90 	.word	0x08028b90
 801776c:	08028ba0 	.word	0x08028ba0
        } else header.h = panel_padding.y;
 8017770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* window movement by dragging */
        left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8017778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801777c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8017780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 8017784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017788:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801778c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 8017790:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8017794:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8017798:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801779c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80177a0:	2201      	movs	r2, #1
 80177a2:	eeb0 0a46 	vmov.f32	s0, s12
 80177a6:	eef0 0a66 	vmov.f32	s1, s13
 80177aa:	eeb0 1a47 	vmov.f32	s2, s14
 80177ae:	eef0 1a67 	vmov.f32	s3, s15
 80177b2:	2100      	movs	r1, #0
 80177b4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80177b8:	f7fd fdd4 	bl	8015364 <nk_input_has_mouse_click_down_in_rect>
 80177bc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
            NK_BUTTON_LEFT, header, nk_true);
        if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 80177c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d045      	beq.n	8017854 <nk_panel_begin+0x308>
 80177c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d041      	beq.n	8017854 <nk_panel_begin+0x308>
 80177d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d13d      	bne.n	8017854 <nk_panel_begin+0x308>
            win->bounds.x = win->bounds.x + in->mouse.delta.x;
 80177d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177dc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80177e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177e4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80177e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80177ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177f0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            win->bounds.y = win->bounds.y + in->mouse.delta.y;
 80177f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80177f8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80177fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017800:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8017804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801780c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x += in->mouse.delta.x;
 8017810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017814:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
 8017818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801781c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8017820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017828:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y += in->mouse.delta.y;
 801782c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017830:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8017834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017838:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801783c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017844:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_MOVE];
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
        }
    }

    /* setup panel */
    layout->type = panel_type;
 8017854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017858:	79fa      	ldrb	r2, [r7, #7]
 801785a:	701a      	strb	r2, [r3, #0]
    layout->flags = win->flags;
 801785c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017866:	605a      	str	r2, [r3, #4]
    layout->bounds = win->bounds;
 8017868:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801786c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017870:	f102 0408 	add.w	r4, r2, #8
 8017874:	334c      	adds	r3, #76	; 0x4c
 8017876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    layout->bounds.x += panel_padding.x;
 801787c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017880:	ed93 7a02 	vldr	s14, [r3, #8]
 8017884:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8017888:	ee77 7a27 	vadd.f32	s15, s14, s15
 801788c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017890:	edc3 7a02 	vstr	s15, [r3, #8]
    layout->bounds.w -= 2*panel_padding.x;
 8017894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017898:	ed93 7a04 	vldr	s14, [r3, #16]
 801789c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80178a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80178a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80178a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178ac:	edc3 7a04 	vstr	s15, [r3, #16]
    if (win->flags & NK_WINDOW_BORDER) {
 80178b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80178b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80178b6:	f003 0301 	and.w	r3, r3, #1
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d03b      	beq.n	8017936 <nk_panel_begin+0x3ea>
        layout->border = nk_panel_get_border(style, win->flags, panel_type);
 80178be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80178c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80178c4:	79fa      	ldrb	r2, [r7, #7]
 80178c6:	4619      	mov	r1, r3
 80178c8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80178cc:	f7ff fce6 	bl	801729c <nk_panel_get_border>
 80178d0:	eef0 7a40 	vmov.f32	s15, s0
 80178d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178d8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        layout->bounds = nk_shrink_rect(layout->bounds, layout->border);
 80178dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178e0:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 80178e4:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80178e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80178ec:	ed93 6a02 	vldr	s12, [r3, #8]
 80178f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80178f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80178f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80178fc:	eeb0 2a65 	vmov.f32	s4, s11
 8017900:	eeb0 0a46 	vmov.f32	s0, s12
 8017904:	eef0 0a66 	vmov.f32	s1, s13
 8017908:	eeb0 1a47 	vmov.f32	s2, s14
 801790c:	eef0 1a67 	vmov.f32	s3, s15
 8017910:	f7fe ffca 	bl	80168a8 <nk_shrink_rect>
 8017914:	eeb0 6a40 	vmov.f32	s12, s0
 8017918:	eef0 6a60 	vmov.f32	s13, s1
 801791c:	eeb0 7a41 	vmov.f32	s14, s2
 8017920:	eef0 7a61 	vmov.f32	s15, s3
 8017924:	ed84 6a02 	vstr	s12, [r4, #8]
 8017928:	edc4 6a03 	vstr	s13, [r4, #12]
 801792c:	ed84 7a04 	vstr	s14, [r4, #16]
 8017930:	edc4 7a05 	vstr	s15, [r4, #20]
 8017934:	e004      	b.n	8017940 <nk_panel_begin+0x3f4>
    } else layout->border = 0;
 8017936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801793a:	f04f 0200 	mov.w	r2, #0
 801793e:	635a      	str	r2, [r3, #52]	; 0x34
    layout->at_y = layout->bounds.y;
 8017940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017944:	68da      	ldr	r2, [r3, #12]
 8017946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801794a:	625a      	str	r2, [r3, #36]	; 0x24
    layout->at_x = layout->bounds.x;
 801794c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017950:	689a      	ldr	r2, [r3, #8]
 8017952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017956:	621a      	str	r2, [r3, #32]
    layout->max_x = 0;
 8017958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801795c:	f04f 0200 	mov.w	r2, #0
 8017960:	629a      	str	r2, [r3, #40]	; 0x28
    layout->header_height = 0;
 8017962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017966:	f04f 0200 	mov.w	r2, #0
 801796a:	631a      	str	r2, [r3, #48]	; 0x30
    layout->footer_height = 0;
 801796c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017970:	f04f 0200 	mov.w	r2, #0
 8017974:	62da      	str	r2, [r3, #44]	; 0x2c
    nk_layout_reset_min_row_height(ctx);
 8017976:	68f8      	ldr	r0, [r7, #12]
 8017978:	f7fd fee4 	bl	8015744 <nk_layout_reset_min_row_height>
    layout->row.index = 0;
 801797c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017980:	2200      	movs	r2, #0
 8017982:	669a      	str	r2, [r3, #104]	; 0x68
    layout->row.columns = 0;
 8017984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017988:	2200      	movs	r2, #0
 801798a:	675a      	str	r2, [r3, #116]	; 0x74
    layout->row.ratio = 0;
 801798c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017990:	2200      	movs	r2, #0
 8017992:	679a      	str	r2, [r3, #120]	; 0x78
    layout->row.item_width = 0;
 8017994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017998:	f04f 0200 	mov.w	r2, #0
 801799c:	67da      	str	r2, [r3, #124]	; 0x7c
    layout->row.tree_depth = 0;
 801799e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179a2:	2200      	movs	r2, #0
 80179a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    layout->row.height = panel_padding.y;
 80179a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80179ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179b0:	66da      	str	r2, [r3, #108]	; 0x6c
    layout->has_scrolling = nk_true;
 80179b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179b6:	2201      	movs	r2, #1
 80179b8:	639a      	str	r2, [r3, #56]	; 0x38
    if (!(win->flags & NK_WINDOW_NO_SCROLLBAR))
 80179ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80179be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179c0:	f003 0320 	and.w	r3, r3, #32
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d10b      	bne.n	80179e0 <nk_panel_begin+0x494>
        layout->bounds.w -= scrollbar_size.x;
 80179c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179cc:	ed93 7a04 	vldr	s14, [r3, #16]
 80179d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80179d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80179d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179dc:	edc3 7a04 	vstr	s15, [r3, #16]
    if (!nk_panel_is_nonblock(panel_type)) {
 80179e0:	79fb      	ldrb	r3, [r7, #7]
 80179e2:	4618      	mov	r0, r3
 80179e4:	f7ff fd9f 	bl	8017526 <nk_panel_is_nonblock>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d125      	bne.n	8017a3a <nk_panel_begin+0x4ee>
        layout->footer_height = 0;
 80179ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80179f2:	f04f 0200 	mov.w	r2, #0
 80179f6:	62da      	str	r2, [r3, #44]	; 0x2c
        if (!(win->flags & NK_WINDOW_NO_SCROLLBAR) || win->flags & NK_WINDOW_SCALABLE)
 80179f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80179fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80179fe:	f003 0320 	and.w	r3, r3, #32
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d006      	beq.n	8017a14 <nk_panel_begin+0x4c8>
 8017a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a0c:	f003 0304 	and.w	r3, r3, #4
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d004      	beq.n	8017a1e <nk_panel_begin+0x4d2>
            layout->footer_height = scrollbar_size.y;
 8017a14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017a18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a1c:	62da      	str	r2, [r3, #44]	; 0x2c
        layout->bounds.h -= layout->footer_height;
 8017a1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a22:	ed93 7a05 	vldr	s14, [r3, #20]
 8017a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a2a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8017a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017a36:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    /* panel header */
    if (nk_panel_has_header(win->flags, title))
 8017a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a40:	68b9      	ldr	r1, [r7, #8]
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7ff fb3c 	bl	80170c0 <nk_panel_has_header>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	f000 83bc 	beq.w	80181c8 <nk_panel_begin+0xc7c>
    {
        struct nk_text text;
        struct nk_rect header;
        const struct nk_style_item *background = 0;
 8017a50:	2300      	movs	r3, #0
 8017a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /* calculate header bounds */
        header.x = win->bounds.x;
 8017a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a5c:	65bb      	str	r3, [r7, #88]	; 0x58
        header.y = win->bounds.y;
 8017a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a64:	65fb      	str	r3, [r7, #92]	; 0x5c
        header.w = win->bounds.w;
 8017a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a6c:	663b      	str	r3, [r7, #96]	; 0x60
        header.h = font->height + 2.0f * style->window.header.padding.y;
 8017a6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8017a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8017a76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a7e:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017a82:	edd3 7a00 	vldr	s15, [r3]
 8017a86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a8e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        header.h += (2.0f * style->window.header.label_padding.y);
 8017a92:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8017a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a9e:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8017aa2:	edd3 7a00 	vldr	s15, [r3]
 8017aa6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017aae:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        /* shrink panel by header */
        layout->header_height = header.h;
 8017ab2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ab8:	631a      	str	r2, [r3, #48]	; 0x30
        layout->bounds.y += header.h;
 8017aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017abe:	ed93 7a03 	vldr	s14, [r3, #12]
 8017ac2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017aca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ace:	edc3 7a03 	vstr	s15, [r3, #12]
        layout->bounds.h -= header.h;
 8017ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ad6:	ed93 7a05 	vldr	s14, [r3, #20]
 8017ada:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017ae6:	edc3 7a05 	vstr	s15, [r3, #20]
        layout->at_y += header.h;
 8017aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017aee:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8017af2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017afe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        /* select correct header background and text color */
        if (ctx->active == win) {
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017b08:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8017b0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d112      	bne.n	8017b3a <nk_panel_begin+0x5ee>
            background = &style->window.header.active;
 8017b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b18:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8017b1c:	3304      	adds	r3, #4
 8017b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_active;
 8017b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b2a:	461a      	mov	r2, r3
 8017b2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017b30:	f602 023b 	addw	r2, r2, #2107	; 0x83b
 8017b34:	6810      	ldr	r0, [r2, #0]
 8017b36:	6018      	str	r0, [r3, #0]
 8017b38:	e03b      	b.n	8017bb2 <nk_panel_begin+0x666>
        } else if (nk_input_is_mouse_hovering_rect(&ctx->input, header)) {
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017b40:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017b44:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017b48:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017b4c:	eeb0 0a46 	vmov.f32	s0, s12
 8017b50:	eef0 0a66 	vmov.f32	s1, s13
 8017b54:	eeb0 1a47 	vmov.f32	s2, s14
 8017b58:	eef0 1a67 	vmov.f32	s3, s15
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7fd fc8f 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 8017b62:	4603      	mov	r3, r0
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d012      	beq.n	8017b8e <nk_panel_begin+0x642>
            background = &style->window.header.hover;
 8017b68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b6c:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8017b70:	3308      	adds	r3, #8
 8017b72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_hover;
 8017b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b7e:	461a      	mov	r2, r3
 8017b80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017b84:	f602 0237 	addw	r2, r2, #2103	; 0x837
 8017b88:	6810      	ldr	r0, [r2, #0]
 8017b8a:	6018      	str	r0, [r3, #0]
 8017b8c:	e011      	b.n	8017bb2 <nk_panel_begin+0x666>
        } else {
            background = &style->window.header.normal;
 8017b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017b92:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 8017b96:	330c      	adds	r3, #12
 8017b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            text.text = style->window.header.label_normal;
 8017b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017baa:	f602 0233 	addw	r2, r2, #2099	; 0x833
 8017bae:	6810      	ldr	r0, [r2, #0]
 8017bb0:	6018      	str	r0, [r3, #0]
        }

        /* draw header background */
        header.h += 1.0f;
 8017bb2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017bbe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        switch(background->type) {
 8017bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017bc6:	781b      	ldrb	r3, [r3, #0]
 8017bc8:	2b02      	cmp	r3, #2
 8017bca:	d02a      	beq.n	8017c22 <nk_panel_begin+0x6d6>
 8017bcc:	2b02      	cmp	r3, #2
 8017bce:	dc6b      	bgt.n	8017ca8 <nk_panel_begin+0x75c>
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d04b      	beq.n	8017c6c <nk_panel_begin+0x720>
 8017bd4:	2b01      	cmp	r3, #1
 8017bd6:	d167      	bne.n	8017ca8 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_IMAGE:
                text.background = nk_rgba(0,0,0,0);
 8017bd8:	2300      	movs	r3, #0
 8017bda:	2200      	movs	r2, #0
 8017bdc:	2100      	movs	r1, #0
 8017bde:	2000      	movs	r0, #0
 8017be0:	f7f8 f85c 	bl	800fc9c <nk_rgba>
 8017be4:	4603      	mov	r3, r0
 8017be6:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_image(&win->buffer, header, &background->data.image, nk_white);
 8017be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017bec:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017bf4:	3304      	adds	r3, #4
 8017bf6:	4ad9      	ldr	r2, [pc, #868]	; (8017f5c <nk_panel_begin+0xa10>)
 8017bf8:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017bfc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017c00:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017c04:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017c08:	6812      	ldr	r2, [r2, #0]
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	eeb0 0a46 	vmov.f32	s0, s12
 8017c10:	eef0 0a66 	vmov.f32	s1, s13
 8017c14:	eeb0 1a47 	vmov.f32	s2, s14
 8017c18:	eef0 1a67 	vmov.f32	s3, s15
 8017c1c:	f7fa faa6 	bl	801216c <nk_draw_image>
                break;
 8017c20:	e042      	b.n	8017ca8 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_NINE_SLICE:
                text.background = nk_rgba(0, 0, 0, 0);
 8017c22:	2300      	movs	r3, #0
 8017c24:	2200      	movs	r2, #0
 8017c26:	2100      	movs	r1, #0
 8017c28:	2000      	movs	r0, #0
 8017c2a:	f7f8 f837 	bl	800fc9c <nk_rgba>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	673b      	str	r3, [r7, #112]	; 0x70
                nk_draw_nine_slice(&win->buffer, header, &background->data.slice, nk_white);
 8017c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017c36:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017c3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017c3e:	3304      	adds	r3, #4
 8017c40:	4ac6      	ldr	r2, [pc, #792]	; (8017f5c <nk_panel_begin+0xa10>)
 8017c42:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017c46:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017c4a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017c4e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017c52:	6812      	ldr	r2, [r2, #0]
 8017c54:	4619      	mov	r1, r3
 8017c56:	eeb0 0a46 	vmov.f32	s0, s12
 8017c5a:	eef0 0a66 	vmov.f32	s1, s13
 8017c5e:	eeb0 1a47 	vmov.f32	s2, s14
 8017c62:	eef0 1a67 	vmov.f32	s3, s15
 8017c66:	f7fa fb73 	bl	8012350 <nk_draw_nine_slice>
                break;
 8017c6a:	e01d      	b.n	8017ca8 <nk_panel_begin+0x75c>
            case NK_STYLE_ITEM_COLOR:
                text.background = background->data.color;
 8017c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017c70:	685b      	ldr	r3, [r3, #4]
 8017c72:	673b      	str	r3, [r7, #112]	; 0x70
                nk_fill_rect(out, header, 0, background->data.color);
 8017c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8017c78:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8017c7c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8017c80:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017c84:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8017c88:	6859      	ldr	r1, [r3, #4]
 8017c8a:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8017f60 <nk_panel_begin+0xa14>
 8017c8e:	eeb0 0a46 	vmov.f32	s0, s12
 8017c92:	eef0 0a66 	vmov.f32	s1, s13
 8017c96:	eeb0 1a47 	vmov.f32	s2, s14
 8017c9a:	eef0 1a67 	vmov.f32	s3, s15
 8017c9e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8017ca2:	f7f9 ff09 	bl	8011ab8 <nk_fill_rect>
                break;
 8017ca6:	bf00      	nop
        }

        /* window close button */
        {struct nk_rect button;
        button.y = header.y + style->window.header.padding.y;
 8017ca8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8017cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017cb4:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017cb8:	edd3 7a00 	vldr	s15, [r3]
 8017cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cc0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        button.h = header.h - 2 * style->window.header.padding.y;
 8017cc4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8017cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017cd0:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8017cd4:	edd3 7a00 	vldr	s15, [r3]
 8017cd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ce0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        button.w = button.h;
 8017ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ce6:	653b      	str	r3, [r7, #80]	; 0x50
        if (win->flags & NK_WINDOW_CLOSABLE) {
 8017ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cee:	f003 0308 	and.w	r3, r3, #8
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	f000 80ad 	beq.w	8017e52 <nk_panel_begin+0x906>
            nk_flags ws = 0;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	647b      	str	r3, [r7, #68]	; 0x44
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8017cfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d04:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d132      	bne.n	8017d72 <nk_panel_begin+0x826>
                button.x = (header.w + header.x) - (button.w + style->window.header.padding.x);
 8017d0c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017d10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8017d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d18:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d24:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d28:	edd3 7a00 	vldr	s15, [r3]
 8017d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d34:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.w -= button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8017d38:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017d3c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d48:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017d4c:	edd3 7a00 	vldr	s15, [r3]
 8017d50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017d54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d5c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d60:	edd3 7a00 	vldr	s15, [r3]
 8017d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d6c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8017d70:	e029      	b.n	8017dc6 <nk_panel_begin+0x87a>
            } else {
                button.x = header.x + style->window.header.padding.x;
 8017d72:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8017d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d7e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017d82:	edd3 7a00 	vldr	s15, [r3]
 8017d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d8a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8017d8e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8017d92:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d9e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017da2:	edd3 7a00 	vldr	s15, [r3]
 8017da6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017db2:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017db6:	edd3 7a00 	vldr	s15, [r3]
 8017dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017dc2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }

            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8017dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017dca:	f103 0164 	add.w	r1, r3, #100	; 0x64
                style->window.header.close_symbol, NK_BUTTON_DEFAULT,
 8017dce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017dd6:	f893 4830 	ldrb.w	r4, [r3, #2096]	; 0x830
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8017dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017dde:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017de2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017de6:	6812      	ldr	r2, [r2, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button,
 8017de8:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8017dec:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8017df0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8017df4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8017df8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8017dfc:	9202      	str	r2, [sp, #8]
 8017dfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017e02:	9201      	str	r2, [sp, #4]
 8017e04:	9300      	str	r3, [sp, #0]
 8017e06:	2300      	movs	r3, #0
 8017e08:	4622      	mov	r2, r4
 8017e0a:	eeb0 0a46 	vmov.f32	s0, s12
 8017e0e:	eef0 0a66 	vmov.f32	s1, s13
 8017e12:	eeb0 1a47 	vmov.f32	s2, s14
 8017e16:	eef0 1a67 	vmov.f32	s3, s15
 8017e1a:	f7f7 fcb9 	bl	800f790 <nk_do_button_symbol>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d016      	beq.n	8017e52 <nk_panel_begin+0x906>
                &style->window.header.close_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d10f      	bne.n	8017e52 <nk_panel_begin+0x906>
            {
                layout->flags |= NK_WINDOW_HIDDEN;
 8017e32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8017e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e40:	605a      	str	r2, [r3, #4]
                layout->flags &= (nk_flags)~NK_WINDOW_MINIMIZED;
 8017e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8017e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017e50:	605a      	str	r2, [r3, #4]
            }
        }

        /* window minimize button */
        if (win->flags & NK_WINDOW_MINIMIZABLE) {
 8017e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e58:	f003 0310 	and.w	r3, r3, #16
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	f000 80c9 	beq.w	8017ff4 <nk_panel_begin+0xaa8>
            nk_flags ws = 0;
 8017e62:	2300      	movs	r3, #0
 8017e64:	643b      	str	r3, [r7, #64]	; 0x40
            if (style->window.header.align == NK_HEADER_RIGHT) {
 8017e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017e6e:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 8017e72:	2b01      	cmp	r3, #1
 8017e74:	d141      	bne.n	8017efa <nk_panel_begin+0x9ae>
                button.x = (header.w + header.x) - button.w;
 8017e76:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017e7a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8017e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e82:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8017e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017e8a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                if (!(win->flags & NK_WINDOW_CLOSABLE)) {
 8017e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e94:	f003 0308 	and.w	r3, r3, #8
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d11b      	bne.n	8017ed4 <nk_panel_begin+0x988>
                    button.x -= style->window.header.padding.x;
 8017e9c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ea8:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017eac:	edd3 7a00 	vldr	s15, [r3]
 8017eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017eb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    header.w -= style->window.header.padding.x;
 8017eb8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017ebc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ec4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017ec8:	edd3 7a00 	vldr	s15, [r3]
 8017ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ed0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
                }
                header.w -= button.w + style->window.header.spacing.x;
 8017ed4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8017ed8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ee4:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017ee8:	edd3 7a00 	vldr	s15, [r3]
 8017eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ef4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8017ef8:	e01d      	b.n	8017f36 <nk_panel_begin+0x9ea>
            } else {
                button.x = header.x;
 8017efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017efc:	64bb      	str	r3, [r7, #72]	; 0x48
                header.x += button.w + style->window.header.spacing.x + style->window.header.padding.x;
 8017efe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8017f02:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8017f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f0e:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8017f12:	edd3 7a00 	vldr	s15, [r3]
 8017f16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f22:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8017f26:	edd3 7a00 	vldr	s15, [r3]
 8017f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f32:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            }
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8017f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017f3a:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8017f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d00b      	beq.n	8017f64 <nk_panel_begin+0xa18>
 8017f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f54:	f893 2832 	ldrb.w	r2, [r3, #2098]	; 0x832
 8017f58:	e00a      	b.n	8017f70 <nk_panel_begin+0xa24>
 8017f5a:	bf00      	nop
 8017f5c:	0802a8dc 	.word	0x0802a8dc
 8017f60:	00000000 	.word	0x00000000
 8017f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f6c:	f893 2831 	ldrb.w	r2, [r3, #2097]	; 0x831
 8017f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017f74:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8017f78:	3318      	adds	r3, #24
                style->window.header.maximize_symbol: style->window.header.minimize_symbol,
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017f7a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8017f7e:	6809      	ldr	r1, [r1, #0]
            if (nk_do_button_symbol(&ws, &win->buffer, button, (layout->flags & NK_WINDOW_MINIMIZED)?
 8017f80:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8017f84:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8017f88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8017f8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8017f90:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017f94:	9102      	str	r1, [sp, #8]
 8017f96:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8017f9a:	9101      	str	r1, [sp, #4]
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	eeb0 0a46 	vmov.f32	s0, s12
 8017fa4:	eef0 0a66 	vmov.f32	s1, s13
 8017fa8:	eeb0 1a47 	vmov.f32	s2, s14
 8017fac:	eef0 1a67 	vmov.f32	s3, s15
 8017fb0:	4621      	mov	r1, r4
 8017fb2:	f7f7 fbed 	bl	800f790 <nk_do_button_symbol>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d01b      	beq.n	8017ff4 <nk_panel_begin+0xaa8>
                NK_BUTTON_DEFAULT, &style->window.header.minimize_button, in, style->font) && !(win->flags & NK_WINDOW_ROM))
 8017fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d114      	bne.n	8017ff4 <nk_panel_begin+0xaa8>
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8017fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d005      	beq.n	8017fe4 <nk_panel_begin+0xa98>
 8017fd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8017fe2:	e004      	b.n	8017fee <nk_panel_begin+0xaa2>
                    layout->flags | NK_WINDOW_MINIMIZED;
 8017fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fe8:	685b      	ldr	r3, [r3, #4]
                    layout->flags & (nk_flags)~NK_WINDOW_MINIMIZED:
 8017fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
                layout->flags = (layout->flags & NK_WINDOW_MINIMIZED) ?
 8017fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017ff2:	6053      	str	r3, [r2, #4]
        }}

        {/* window header title */
        int text_len = nk_strlen(title);
 8017ff4:	68b8      	ldr	r0, [r7, #8]
 8017ff6:	f00a fb6f 	bl	80226d8 <nk_strlen>
 8017ffa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        struct nk_rect label = {0,0,0,0};
 8017ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018002:	2200      	movs	r2, #0
 8018004:	601a      	str	r2, [r3, #0]
 8018006:	605a      	str	r2, [r3, #4]
 8018008:	609a      	str	r2, [r3, #8]
 801800a:	60da      	str	r2, [r3, #12]
        float t = font->width(font->userdata, font->height, title, text_len);
 801800c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018010:	689b      	ldr	r3, [r3, #8]
 8018012:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018016:	edd2 7a01 	vldr	s15, [r2, #4]
 801801a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801801e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018022:	68b9      	ldr	r1, [r7, #8]
 8018024:	eeb0 0a67 	vmov.f32	s0, s15
 8018028:	6800      	ldr	r0, [r0, #0]
 801802a:	4798      	blx	r3
 801802c:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        text.padding = nk_vec2(0,0);
 8018030:	ed5f 0a35 	vldr	s1, [pc, #-212]	; 8017f60 <nk_panel_begin+0xa14>
 8018034:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 8017f60 <nk_panel_begin+0xa14>
 8018038:	f7fe fcb6 	bl	80169a8 <nk_vec2>
 801803c:	eeb0 7a40 	vmov.f32	s14, s0
 8018040:	eef0 7a60 	vmov.f32	s15, s1
 8018044:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8018048:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        label.x = header.x + style->window.header.padding.x;
 801804c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018058:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801805c:	edd3 7a00 	vldr	s15, [r3]
 8018060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018064:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.x += style->window.header.label_padding.x;
 8018068:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801806c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018074:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8018078:	edd3 7a00 	vldr	s15, [r3]
 801807c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018080:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        label.y = header.y + style->window.header.label_padding.y;
 8018084:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8018088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801808c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018090:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8018094:	edd3 7a00 	vldr	s15, [r3]
 8018098:	ee77 7a27 	vadd.f32	s15, s14, s15
 801809c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        label.h = font->height + 2 * style->window.header.label_padding.y;
 80180a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80180a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80180a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80180ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80180b0:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 80180b4:	edd3 7a00 	vldr	s15, [r3]
 80180b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80180bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        label.w = t + 2 * style->window.header.spacing.x;
 80180c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80180c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80180cc:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80180d0:	edd3 7a00 	vldr	s15, [r3]
 80180d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80180d8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80180dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        label.w = NK_CLAMP(0, label.w, header.x + header.w - label.x);
 80180e4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80180e8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80180ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80180f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80180f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80180f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80180fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018104:	d50a      	bpl.n	801811c <nk_panel_begin+0xbd0>
 8018106:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801810a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801810e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018112:	bf4c      	ite	mi
 8018114:	2301      	movmi	r3, #1
 8018116:	2300      	movpl	r3, #0
 8018118:	b2db      	uxtb	r3, r3
 801811a:	e011      	b.n	8018140 <nk_panel_begin+0xbf4>
 801811c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018120:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018128:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801812c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018138:	bf4c      	ite	mi
 801813a:	2301      	movmi	r3, #1
 801813c:	2300      	movpl	r3, #0
 801813e:	b2db      	uxtb	r3, r3
 8018140:	2b00      	cmp	r3, #0
 8018142:	d002      	beq.n	801814a <nk_panel_begin+0xbfe>
 8018144:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8017f60 <nk_panel_begin+0xa14>
 8018148:	e01d      	b.n	8018186 <nk_panel_begin+0xc3a>
 801814a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801814e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8018152:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018156:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801815a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801815e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801816a:	d502      	bpl.n	8018172 <nk_panel_begin+0xc26>
 801816c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8018170:	e009      	b.n	8018186 <nk_panel_begin+0xc3a>
 8018172:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018176:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801817a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801817e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018186:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_widget_text(out, label, (const char*)title, text_len, &text, NK_TEXT_LEFT, font);}
 801818a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801818e:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8018192:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8018196:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801819a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801819e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80181a2:	9301      	str	r3, [sp, #4]
 80181a4:	2311      	movs	r3, #17
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	4613      	mov	r3, r2
 80181aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80181ae:	68b9      	ldr	r1, [r7, #8]
 80181b0:	eeb0 0a46 	vmov.f32	s0, s12
 80181b4:	eef0 0a66 	vmov.f32	s1, s13
 80181b8:	eeb0 1a47 	vmov.f32	s2, s14
 80181bc:	eef0 1a67 	vmov.f32	s3, s15
 80181c0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80181c4:	f007 f9de 	bl	801f584 <nk_widget_text>
    }

    /* draw window background */
    if (!(layout->flags & NK_WINDOW_MINIMIZED) && !(layout->flags & NK_WINDOW_DYNAMIC)) {
 80181c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	f040 808d 	bne.w	80182f2 <nk_panel_begin+0xda6>
 80181d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	f040 8085 	bne.w	80182f2 <nk_panel_begin+0xda6>
        struct nk_rect body;
        body.x = win->bounds.x;
 80181e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181ee:	623b      	str	r3, [r7, #32]
        body.w = win->bounds.w;
 80181f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181f6:	62bb      	str	r3, [r7, #40]	; 0x28
        body.y = (win->bounds.y + layout->header_height);
 80181f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80181fc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8018200:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018204:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8018208:	ee77 7a27 	vadd.f32	s15, s14, s15
 801820c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        body.h = (win->bounds.h - layout->header_height);
 8018210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018214:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8018218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801821c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8018220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018224:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        switch(style->window.fixed_background.type) {
 8018228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801822c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018230:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8018234:	2b02      	cmp	r3, #2
 8018236:	d022      	beq.n	801827e <nk_panel_begin+0xd32>
 8018238:	2b02      	cmp	r3, #2
 801823a:	dc5a      	bgt.n	80182f2 <nk_panel_begin+0xda6>
 801823c:	2b00      	cmp	r3, #0
 801823e:	d03b      	beq.n	80182b8 <nk_panel_begin+0xd6c>
 8018240:	2b01      	cmp	r3, #1
 8018242:	d156      	bne.n	80182f2 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, body, &style->window.fixed_background.data.image, nk_white);
 8018244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018248:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 801824c:	331c      	adds	r3, #28
 801824e:	4a5e      	ldr	r2, [pc, #376]	; (80183c8 <nk_panel_begin+0xe7c>)
 8018250:	ed97 6a08 	vldr	s12, [r7, #32]
 8018254:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8018258:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801825c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018260:	6812      	ldr	r2, [r2, #0]
 8018262:	4619      	mov	r1, r3
 8018264:	eeb0 0a46 	vmov.f32	s0, s12
 8018268:	eef0 0a66 	vmov.f32	s1, s13
 801826c:	eeb0 1a47 	vmov.f32	s2, s14
 8018270:	eef0 1a67 	vmov.f32	s3, s15
 8018274:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8018278:	f7f9 ff78 	bl	801216c <nk_draw_image>
                break;
 801827c:	e039      	b.n	80182f2 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, body, &style->window.fixed_background.data.slice, nk_white);
 801827e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018282:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8018286:	331c      	adds	r3, #28
 8018288:	4a4f      	ldr	r2, [pc, #316]	; (80183c8 <nk_panel_begin+0xe7c>)
 801828a:	ed97 6a08 	vldr	s12, [r7, #32]
 801828e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8018292:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8018296:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801829a:	6812      	ldr	r2, [r2, #0]
 801829c:	4619      	mov	r1, r3
 801829e:	eeb0 0a46 	vmov.f32	s0, s12
 80182a2:	eef0 0a66 	vmov.f32	s1, s13
 80182a6:	eeb0 1a47 	vmov.f32	s2, s14
 80182aa:	eef0 1a67 	vmov.f32	s3, s15
 80182ae:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80182b2:	f7fa f84d 	bl	8012350 <nk_draw_nine_slice>
                break;
 80182b6:	e01c      	b.n	80182f2 <nk_panel_begin+0xda6>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, body, 0, style->window.fixed_background.data.color);
 80182b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80182bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80182c0:	ed97 6a08 	vldr	s12, [r7, #32]
 80182c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80182c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80182cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80182d0:	f8d3 185c 	ldr.w	r1, [r3, #2140]	; 0x85c
 80182d4:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80183cc <nk_panel_begin+0xe80>
 80182d8:	eeb0 0a46 	vmov.f32	s0, s12
 80182dc:	eef0 0a66 	vmov.f32	s1, s13
 80182e0:	eeb0 1a47 	vmov.f32	s2, s14
 80182e4:	eef0 1a67 	vmov.f32	s3, s15
 80182e8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80182ec:	f7f9 fbe4 	bl	8011ab8 <nk_fill_rect>
                break;
 80182f0:	bf00      	nop
        }
    }

    /* set clipping rectangle */
    {struct nk_rect clip;
    layout->clip = layout->bounds;
 80182f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80182f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80182fa:	f102 043c 	add.w	r4, r2, #60	; 0x3c
 80182fe:	3308      	adds	r3, #8
 8018300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 8018306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801830a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801830e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018312:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8018316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801831a:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 801831e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018322:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8018326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801832a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 801832e:	ee77 5a27 	vadd.f32	s11, s14, s15
        layout->clip.x + layout->clip.w, layout->clip.y + layout->clip.h);
 8018332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018336:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801833a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801833e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    nk_unify(&clip, &win->buffer.clip, layout->clip.x, layout->clip.y,
 8018342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018346:	f107 0310 	add.w	r3, r7, #16
 801834a:	eef0 1a67 	vmov.f32	s3, s15
 801834e:	eeb0 1a65 	vmov.f32	s2, s11
 8018352:	eef0 0a46 	vmov.f32	s1, s12
 8018356:	eeb0 0a66 	vmov.f32	s0, s13
 801835a:	4611      	mov	r1, r2
 801835c:	4618      	mov	r0, r3
 801835e:	f7fe fb45 	bl	80169ec <nk_unify>
    nk_push_scissor(out, clip);
 8018362:	ed97 6a04 	vldr	s12, [r7, #16]
 8018366:	edd7 6a05 	vldr	s13, [r7, #20]
 801836a:	ed97 7a06 	vldr	s14, [r7, #24]
 801836e:	edd7 7a07 	vldr	s15, [r7, #28]
 8018372:	eeb0 0a46 	vmov.f32	s0, s12
 8018376:	eef0 0a66 	vmov.f32	s1, s13
 801837a:	eeb0 1a47 	vmov.f32	s2, s14
 801837e:	eef0 1a67 	vmov.f32	s3, s15
 8018382:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8018386:	f7f9 fa17 	bl	80117b8 <nk_push_scissor>
    layout->clip = clip;}
 801838a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801838e:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018392:	f107 0310 	add.w	r3, r7, #16
 8018396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return !(layout->flags & NK_WINDOW_HIDDEN) && !(layout->flags & NK_WINDOW_MINIMIZED);
 801839c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80183a0:	685b      	ldr	r3, [r3, #4]
 80183a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d108      	bne.n	80183bc <nk_panel_begin+0xe70>
 80183aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80183ae:	685b      	ldr	r3, [r3, #4]
 80183b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d101      	bne.n	80183bc <nk_panel_begin+0xe70>
 80183b8:	2301      	movs	r3, #1
 80183ba:	e000      	b.n	80183be <nk_panel_begin+0xe72>
 80183bc:	2300      	movs	r3, #0
}
 80183be:	4618      	mov	r0, r3
 80183c0:	37cc      	adds	r7, #204	; 0xcc
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd90      	pop	{r4, r7, pc}
 80183c6:	bf00      	nop
 80183c8:	0802a8dc 	.word	0x0802a8dc
 80183cc:	00000000 	.word	0x00000000

080183d0 <nk_panel_end>:
NK_LIB void
nk_panel_end(struct nk_context *ctx)
{
 80183d0:	b590      	push	{r4, r7, lr}
 80183d2:	b0b3      	sub	sp, #204	; 0xcc
 80183d4:	af02      	add	r7, sp, #8
 80183d6:	6078      	str	r0, [r7, #4]
    struct nk_command_buffer *out;

    struct nk_vec2 scrollbar_size;
    struct nk_vec2 panel_padding;

    NK_ASSERT(ctx);
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d106      	bne.n	80183ec <nk_panel_end+0x1c>
 80183de:	4b31      	ldr	r3, [pc, #196]	; (80184a4 <nk_panel_end+0xd4>)
 80183e0:	4a31      	ldr	r2, [pc, #196]	; (80184a8 <nk_panel_end+0xd8>)
 80183e2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80183e6:	4831      	ldr	r0, [pc, #196]	; (80184ac <nk_panel_end+0xdc>)
 80183e8:	f00c fb82 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80183f2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d106      	bne.n	8018408 <nk_panel_end+0x38>
 80183fa:	4b2d      	ldr	r3, [pc, #180]	; (80184b0 <nk_panel_end+0xe0>)
 80183fc:	4a2a      	ldr	r2, [pc, #168]	; (80184a8 <nk_panel_end+0xd8>)
 80183fe:	f240 1153 	movw	r1, #339	; 0x153
 8018402:	482a      	ldr	r0, [pc, #168]	; (80184ac <nk_panel_end+0xdc>)
 8018404:	f00c fb74 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801840e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8018412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018416:	2b00      	cmp	r3, #0
 8018418:	d106      	bne.n	8018428 <nk_panel_end+0x58>
 801841a:	4b26      	ldr	r3, [pc, #152]	; (80184b4 <nk_panel_end+0xe4>)
 801841c:	4a22      	ldr	r2, [pc, #136]	; (80184a8 <nk_panel_end+0xd8>)
 801841e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8018422:	4822      	ldr	r0, [pc, #136]	; (80184ac <nk_panel_end+0xdc>)
 8018424:	f00c fb64 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2b00      	cmp	r3, #0
 801842c:	f000 8792 	beq.w	8019354 <nk_panel_end+0xf84>
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018436:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801843a:	2b00      	cmp	r3, #0
 801843c:	f000 878a 	beq.w	8019354 <nk_panel_end+0xf84>
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018446:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801844a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801844e:	2b00      	cmp	r3, #0
 8018450:	f000 8780 	beq.w	8019354 <nk_panel_end+0xf84>
        return;

    window = ctx->current;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801845a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801845e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    layout = window->layout;
 8018462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801846a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    style = &ctx->style;
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8018474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    out = &window->buffer;
 8018478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801847c:	3364      	adds	r3, #100	; 0x64
 801847e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    in = (layout->flags & NK_WINDOW_ROM || layout->flags & NK_WINDOW_NO_INPUT) ? 0 :&ctx->input;
 8018482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018486:	685b      	ldr	r3, [r3, #4]
 8018488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801848c:	2b00      	cmp	r3, #0
 801848e:	d113      	bne.n	80184b8 <nk_panel_end+0xe8>
 8018490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018494:	685b      	ldr	r3, [r3, #4]
 8018496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801849a:	2b00      	cmp	r3, #0
 801849c:	d10c      	bne.n	80184b8 <nk_panel_end+0xe8>
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	e00b      	b.n	80184ba <nk_panel_end+0xea>
 80184a2:	bf00      	nop
 80184a4:	08028b70 	.word	0x08028b70
 80184a8:	0802a8f0 	.word	0x0802a8f0
 80184ac:	08028b74 	.word	0x08028b74
 80184b0:	08028b90 	.word	0x08028b90
 80184b4:	08028ba0 	.word	0x08028ba0
 80184b8:	2300      	movs	r3, #0
 80184ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (!nk_panel_is_sub(layout->type))
 80184be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7ff f81b 	bl	8017500 <nk_panel_is_sub>
 80184ca:	4603      	mov	r3, r0
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d114      	bne.n	80184fa <nk_panel_end+0x12a>
        nk_push_scissor(out, nk_null_rect);
 80184d0:	4bcb      	ldr	r3, [pc, #812]	; (8018800 <nk_panel_end+0x430>)
 80184d2:	ed93 6a00 	vldr	s12, [r3]
 80184d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80184da:	ed93 7a02 	vldr	s14, [r3, #8]
 80184de:	edd3 7a03 	vldr	s15, [r3, #12]
 80184e2:	eeb0 0a46 	vmov.f32	s0, s12
 80184e6:	eef0 0a66 	vmov.f32	s1, s13
 80184ea:	eeb0 1a47 	vmov.f32	s2, s14
 80184ee:	eef0 1a67 	vmov.f32	s3, s15
 80184f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80184f6:	f7f9 f95f 	bl	80117b8 <nk_push_scissor>

    /* cache configuration data */
    scrollbar_size = style->window.scrollbar_size;
 80184fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80184fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018502:	461a      	mov	r2, r3
 8018504:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018508:	f602 02dc 	addw	r2, r2, #2268	; 0x8dc
 801850c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018510:	e883 0003 	stmia.w	r3, {r0, r1}
    panel_padding = nk_panel_get_padding(style, layout->type);
 8018514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	4619      	mov	r1, r3
 801851c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8018520:	f7fe fdfc 	bl	801711c <nk_panel_get_padding>
 8018524:	eeb0 7a40 	vmov.f32	s14, s0
 8018528:	eef0 7a60 	vmov.f32	s15, s1
 801852c:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8018530:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* update the current cursor Y-position to point over the last added widget */
    layout->at_y += layout->row.height;
 8018534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018538:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801853c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018540:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8018544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801854c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    /* dynamic panels */
    if (layout->flags & NK_WINDOW_DYNAMIC && !(layout->flags & NK_WINDOW_MINIMIZED))
 8018550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801855a:	2b00      	cmp	r3, #0
 801855c:	f000 8111 	beq.w	8018782 <nk_panel_end+0x3b2>
 8018560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018564:	685b      	ldr	r3, [r3, #4]
 8018566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801856a:	2b00      	cmp	r3, #0
 801856c:	f040 8109 	bne.w	8018782 <nk_panel_end+0x3b2>
    {
        /* update panel height to fit dynamic growth */
        struct nk_rect empty_space;
        if (layout->at_y < (layout->bounds.y + layout->bounds.h))
 8018570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018574:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8018578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801857c:	edd3 6a03 	vldr	s13, [r3, #12]
 8018580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018584:	edd3 7a05 	vldr	s15, [r3, #20]
 8018588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801858c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018594:	d50d      	bpl.n	80185b2 <nk_panel_end+0x1e2>
            layout->bounds.h = layout->at_y - layout->bounds.y;
 8018596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801859a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801859e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80185a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80185a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80185aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80185ae:	edc3 7a05 	vstr	s15, [r3, #20]

        /* fill top empty space */
        empty_space.x = window->bounds.x;
 80185b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80185b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185b8:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 80185ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.h = panel_padding.y;
 80185c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80185c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        empty_space.w = window->bounds.w;
 80185c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80185ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185cc:	65bb      	str	r3, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80185ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80185d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80185d6:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80185da:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80185de:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80185e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80185e6:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80185ea:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8018804 <nk_panel_end+0x434>
 80185ee:	eeb0 0a46 	vmov.f32	s0, s12
 80185f2:	eef0 0a66 	vmov.f32	s1, s13
 80185f6:	eeb0 1a47 	vmov.f32	s2, s14
 80185fa:	eef0 1a67 	vmov.f32	s3, s15
 80185fe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018602:	f7f9 fa59 	bl	8011ab8 <nk_fill_rect>

        /* fill left empty space */
        empty_space.x = window->bounds.x;
 8018606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801860a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801860c:	653b      	str	r3, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 801860e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018612:	68db      	ldr	r3, [r3, #12]
 8018614:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 8018616:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801861a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801861e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8018622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018626:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 801862a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801862e:	695b      	ldr	r3, [r3, #20]
 8018630:	65fb      	str	r3, [r7, #92]	; 0x5c
        nk_fill_rect(out, empty_space, 0, style->window.background);
 8018632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801863a:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 801863e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8018642:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8018646:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801864a:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 801864e:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8018804 <nk_panel_end+0x434>
 8018652:	eeb0 0a46 	vmov.f32	s0, s12
 8018656:	eef0 0a66 	vmov.f32	s1, s13
 801865a:	eeb0 1a47 	vmov.f32	s2, s14
 801865e:	eef0 1a67 	vmov.f32	s3, s15
 8018662:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018666:	f7f9 fa27 	bl	8011ab8 <nk_fill_rect>

        /* fill right empty space */
        empty_space.x = layout->bounds.x + layout->bounds.w;
 801866a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801866e:	ed93 7a02 	vldr	s14, [r3, #8]
 8018672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018676:	edd3 7a04 	vldr	s15, [r3, #16]
 801867a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801867e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        empty_space.y = layout->bounds.y;
 8018682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018686:	68db      	ldr	r3, [r3, #12]
 8018688:	657b      	str	r3, [r7, #84]	; 0x54
        empty_space.w = panel_padding.x + layout->border;
 801868a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801868e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018692:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8018696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801869a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        empty_space.h = layout->bounds.h;
 801869e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80186a2:	695b      	ldr	r3, [r3, #20]
 80186a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (*layout->offset_y == 0 && !(layout->flags & NK_WINDOW_NO_SCROLLBAR))
 80186a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80186aa:	69db      	ldr	r3, [r3, #28]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d10e      	bne.n	80186d0 <nk_panel_end+0x300>
 80186b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80186b6:	685b      	ldr	r3, [r3, #4]
 80186b8:	f003 0320 	and.w	r3, r3, #32
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d107      	bne.n	80186d0 <nk_panel_end+0x300>
            empty_space.w += scrollbar_size.x;
 80186c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80186c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80186c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        nk_fill_rect(out, empty_space, 0, style->window.background);
 80186d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80186d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80186d8:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80186dc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80186e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80186e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80186e8:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 80186ec:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8018804 <nk_panel_end+0x434>
 80186f0:	eeb0 0a46 	vmov.f32	s0, s12
 80186f4:	eef0 0a66 	vmov.f32	s1, s13
 80186f8:	eeb0 1a47 	vmov.f32	s2, s14
 80186fc:	eef0 1a67 	vmov.f32	s3, s15
 8018700:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018704:	f7f9 f9d8 	bl	8011ab8 <nk_fill_rect>

        /* fill bottom empty space */
        if (layout->footer_height > 0) {
 8018708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801870c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8018710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018718:	dd33      	ble.n	8018782 <nk_panel_end+0x3b2>
            empty_space.x = window->bounds.x;
 801871a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801871e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018720:	653b      	str	r3, [r7, #80]	; 0x50
            empty_space.y = layout->bounds.y + layout->bounds.h;
 8018722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018726:	ed93 7a03 	vldr	s14, [r3, #12]
 801872a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801872e:	edd3 7a05 	vldr	s15, [r3, #20]
 8018732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018736:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            empty_space.w = window->bounds.w;
 801873a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018740:	65bb      	str	r3, [r7, #88]	; 0x58
            empty_space.h = layout->footer_height;
 8018742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018748:	65fb      	str	r3, [r7, #92]	; 0x5c
            nk_fill_rect(out, empty_space, 0, style->window.background);
 801874a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801874e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018752:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8018756:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801875a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801875e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8018762:	f8d3 1874 	ldr.w	r1, [r3, #2164]	; 0x874
 8018766:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8018804 <nk_panel_end+0x434>
 801876a:	eeb0 0a46 	vmov.f32	s0, s12
 801876e:	eef0 0a66 	vmov.f32	s1, s13
 8018772:	eeb0 1a47 	vmov.f32	s2, s14
 8018776:	eef0 1a67 	vmov.f32	s3, s15
 801877a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801877e:	f7f9 f99b 	bl	8011ab8 <nk_fill_rect>
        }
    }

    /* scrollbars */
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 8018782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018786:	685b      	ldr	r3, [r3, #4]
 8018788:	f003 0320 	and.w	r3, r3, #32
 801878c:	2b00      	cmp	r3, #0
 801878e:	f040 8232 	bne.w	8018bf6 <nk_panel_end+0x826>
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 8018792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018796:	685b      	ldr	r3, [r3, #4]
 8018798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if (!(layout->flags & NK_WINDOW_NO_SCROLLBAR) &&
 801879c:	2b00      	cmp	r3, #0
 801879e:	f040 822a 	bne.w	8018bf6 <nk_panel_end+0x826>
        window->scrollbar_hiding_timer < NK_SCROLLBAR_HIDING_TIMEOUT)
 80187a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80187a6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
        !(layout->flags & NK_WINDOW_MINIMIZED) &&
 80187aa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80187ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80187b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b6:	f140 821e 	bpl.w	8018bf6 <nk_panel_end+0x826>
        float scroll_offset;
        float scroll_step;
        float scroll_inc;

        /* mouse wheel scrolling */
        if (nk_panel_is_sub(layout->type))
 80187ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80187be:	781b      	ldrb	r3, [r3, #0]
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7fe fe9d 	bl	8017500 <nk_panel_is_sub>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	f000 80cb 	beq.w	8018964 <nk_panel_end+0x594>
        {
            /* sub-window mouse wheel scrolling */
            struct nk_window *root_window = window;
 80187ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80187d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            struct nk_panel *root_panel = window->layout;
 80187d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80187da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80187de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 80187e2:	e005      	b.n	80187f0 <nk_panel_end+0x420>
                root_panel = root_panel->parent;
 80187e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80187e8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80187ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            while (root_panel->parent)
 80187f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80187f4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d1f3      	bne.n	80187e4 <nk_panel_end+0x414>
            while (root_window->parent)
 80187fc:	e012      	b.n	8018824 <nk_panel_end+0x454>
 80187fe:	bf00      	nop
 8018800:	0802a8cc 	.word	0x0802a8cc
 8018804:	00000000 	.word	0x00000000
 8018808:	3dcccccd 	.word	0x3dcccccd
 801880c:	3c23d70a 	.word	0x3c23d70a
 8018810:	3d4ccccd 	.word	0x3d4ccccd
 8018814:	3ba3d70a 	.word	0x3ba3d70a
                root_window = root_window->parent;
 8018818:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801881c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8018820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            while (root_window->parent)
 8018824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018828:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801882c:	2b00      	cmp	r3, #0
 801882e:	d1f3      	bne.n	8018818 <nk_panel_end+0x448>

            /* only allow scrolling if parent window is active */
            scroll_has_scrolling = 0;
 8018830:	2300      	movs	r3, #0
 8018832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if ((root_window == ctx->active) && layout->has_scrolling) {
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801883c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8018840:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018844:	429a      	cmp	r2, r3
 8018846:	f040 80d2 	bne.w	80189ee <nk_panel_end+0x61e>
 801884a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018850:	2b00      	cmp	r3, #0
 8018852:	f000 80cc 	beq.w	80189ee <nk_panel_end+0x61e>
                /* and panel is being hovered and inside clip rect*/
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 8018856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801885a:	ed93 6a02 	vldr	s12, [r3, #8]
 801885e:	edd3 6a03 	vldr	s13, [r3, #12]
 8018862:	ed93 7a04 	vldr	s14, [r3, #16]
 8018866:	edd3 7a05 	vldr	s15, [r3, #20]
 801886a:	eeb0 0a46 	vmov.f32	s0, s12
 801886e:	eef0 0a66 	vmov.f32	s1, s13
 8018872:	eeb0 1a47 	vmov.f32	s2, s14
 8018876:	eef0 1a67 	vmov.f32	s3, s15
 801887a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801887e:	f7fc fdff 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 8018882:	4603      	mov	r3, r0
 8018884:	2b00      	cmp	r3, #0
 8018886:	f000 80b2 	beq.w	80189ee <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 801888a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801888e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8018892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018896:	edd3 6a02 	vldr	s13, [r3, #8]
 801889a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801889e:	edd3 7a04 	vldr	s15, [r3, #16]
 80188a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (nk_input_is_mouse_hovering_rect(in, layout->bounds) &&
 80188a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ae:	f140 809e 	bpl.w	80189ee <nk_panel_end+0x61e>
                    NK_INTERSECT(layout->bounds.x, layout->bounds.y, layout->bounds.w, layout->bounds.h,
 80188b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80188ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188be:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80188c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80188ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d6:	f140 808a 	bpl.w	80189ee <nk_panel_end+0x61e>
 80188da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188de:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80188e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80188ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80188f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80188f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188fe:	d576      	bpl.n	80189ee <nk_panel_end+0x61e>
 8018900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018904:	ed93 7a03 	vldr	s14, [r3, #12]
 8018908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801890c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8018910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018914:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8018918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801891c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018924:	d563      	bpl.n	80189ee <nk_panel_end+0x61e>
                        root_panel->clip.x, root_panel->clip.y, root_panel->clip.w, root_panel->clip.h))
                {
                    /* deactivate all parent scrolling */
                    root_panel = window->layout;
 8018926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801892a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801892e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 8018932:	e009      	b.n	8018948 <nk_panel_end+0x578>
                        root_panel->has_scrolling = nk_false;
 8018934:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018938:	2200      	movs	r2, #0
 801893a:	639a      	str	r2, [r3, #56]	; 0x38
                        root_panel = root_panel->parent;
 801893c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018940:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8018944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    while (root_panel->parent) {
 8018948:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801894c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8018950:	2b00      	cmp	r3, #0
 8018952:	d1ef      	bne.n	8018934 <nk_panel_end+0x564>
                    }
                    root_panel->has_scrolling = nk_false;
 8018954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018958:	2200      	movs	r2, #0
 801895a:	639a      	str	r2, [r3, #56]	; 0x38
                    scroll_has_scrolling = nk_true;
 801895c:	2301      	movs	r3, #1
 801895e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8018962:	e044      	b.n	80189ee <nk_panel_end+0x61e>
                }
            }
        } else if (!nk_panel_is_sub(layout->type)) {
 8018964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018968:	781b      	ldrb	r3, [r3, #0]
 801896a:	4618      	mov	r0, r3
 801896c:	f7fe fdc8 	bl	8017500 <nk_panel_is_sub>
 8018970:	4603      	mov	r3, r0
 8018972:	2b00      	cmp	r3, #0
 8018974:	d138      	bne.n	80189e8 <nk_panel_end+0x618>
            /* window mouse wheel scrolling */
            scroll_has_scrolling = (window == ctx->active) && layout->has_scrolling;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801897c:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8018980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018984:	429a      	cmp	r2, r3
 8018986:	d106      	bne.n	8018996 <nk_panel_end+0x5c6>
 8018988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801898e:	2b00      	cmp	r3, #0
 8018990:	d001      	beq.n	8018996 <nk_panel_end+0x5c6>
 8018992:	2301      	movs	r3, #1
 8018994:	e000      	b.n	8018998 <nk_panel_end+0x5c8>
 8018996:	2300      	movs	r3, #0
 8018998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (in && (in->mouse.scroll_delta.y > 0 || in->mouse.scroll_delta.x > 0) && scroll_has_scrolling)
 801899c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d01b      	beq.n	80189dc <nk_panel_end+0x60c>
 80189a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80189a8:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 80189ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80189b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189b4:	dc08      	bgt.n	80189c8 <nk_panel_end+0x5f8>
 80189b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80189ba:	edd3 7a57 	vldr	s15, [r3, #348]	; 0x15c
 80189be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80189c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189c6:	dd09      	ble.n	80189dc <nk_panel_end+0x60c>
 80189c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d005      	beq.n	80189dc <nk_panel_end+0x60c>
                window->scrolled = nk_true;
 80189d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80189d4:	2201      	movs	r2, #1
 80189d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80189da:	e008      	b.n	80189ee <nk_panel_end+0x61e>
            else window->scrolled = nk_false;
 80189dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80189e0:	2200      	movs	r2, #0
 80189e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80189e6:	e002      	b.n	80189ee <nk_panel_end+0x61e>
        } else scroll_has_scrolling = nk_false;
 80189e8:	2300      	movs	r3, #0
 80189ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        {
            /* vertical scrollbar */
            nk_flags state = 0;
 80189ee:	2300      	movs	r3, #0
 80189f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            scroll.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 80189f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80189f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80189fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80189fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8018a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a06:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a0e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y;
 8018a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a16:	68db      	ldr	r3, [r3, #12]
 8018a18:	647b      	str	r3, [r7, #68]	; 0x44
            scroll.w = scrollbar_size.x;
 8018a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018a1c:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = layout->bounds.h;
 8018a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a22:	695b      	ldr	r3, [r3, #20]
 8018a24:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_y;
 8018a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a2a:	69db      	ldr	r3, [r3, #28]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	ee07 3a90 	vmov	s15, r3
 8018a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018a36:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_step = scroll.h * 0.10f;
 8018a3a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018a3e:	ed1f 7a8e 	vldr	s14, [pc, #-568]	; 8018808 <nk_panel_end+0x438>
 8018a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a46:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = scroll.h * 0.01f;
 8018a4a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018a4e:	ed1f 7a91 	vldr	s14, [pc, #-580]	; 801880c <nk_panel_end+0x43c>
 8018a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a56:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_target = (float)(int)(layout->at_y - scroll.y);
 8018a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018a5e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8018a62:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8018a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a72:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollv, in, style->font);
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8018a7c:	3318      	adds	r3, #24
 8018a7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018a82:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarv(&state, out, scroll, scroll_has_scrolling,
 8018a84:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8018a88:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8018a8c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018a90:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018a94:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8018a98:	9201      	str	r2, [sp, #4]
 8018a9a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018a9e:	9200      	str	r2, [sp, #0]
 8018aa0:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8018aa4:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8018aa8:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8018aac:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8018ab0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018ab4:	eeb0 0a46 	vmov.f32	s0, s12
 8018ab8:	eef0 0a66 	vmov.f32	s1, s13
 8018abc:	eeb0 1a47 	vmov.f32	s2, s14
 8018ac0:	eef0 1a67 	vmov.f32	s3, s15
 8018ac4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8018ac8:	f003 f96a 	bl	801bda0 <nk_do_scrollbarv>
 8018acc:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_y = (nk_uint)scroll_offset;
 8018ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018ad4:	69db      	ldr	r3, [r3, #28]
 8018ad6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8018ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018ade:	ee17 2a90 	vmov	r2, s15
 8018ae2:	601a      	str	r2, [r3, #0]
            if (in && scroll_has_scrolling)
 8018ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d009      	beq.n	8018b00 <nk_panel_end+0x730>
 8018aec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d005      	beq.n	8018b00 <nk_panel_end+0x730>
                in->mouse.scroll_delta.y = 0;
 8018af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018af8:	f04f 0200 	mov.w	r2, #0
 8018afc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        }
        {
            /* horizontal scrollbar */
            nk_flags state = 0;
 8018b00:	2300      	movs	r3, #0
 8018b02:	63bb      	str	r3, [r7, #56]	; 0x38
            scroll.x = layout->bounds.x;
 8018b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b08:	689b      	ldr	r3, [r3, #8]
 8018b0a:	643b      	str	r3, [r7, #64]	; 0x40
            scroll.y = layout->bounds.y + layout->bounds.h;
 8018b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b10:	ed93 7a03 	vldr	s14, [r3, #12]
 8018b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b18:	edd3 7a05 	vldr	s15, [r3, #20]
 8018b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            scroll.w = layout->bounds.w;
 8018b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b28:	691b      	ldr	r3, [r3, #16]
 8018b2a:	64bb      	str	r3, [r7, #72]	; 0x48
            scroll.h = scrollbar_size.y;
 8018b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018b2e:	64fb      	str	r3, [r7, #76]	; 0x4c

            scroll_offset = (float)*layout->offset_x;
 8018b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b34:	699b      	ldr	r3, [r3, #24]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	ee07 3a90 	vmov	s15, r3
 8018b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018b40:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            scroll_target = (float)(int)(layout->max_x - scroll.x);
 8018b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b48:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8018b4c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8018b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b5c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            scroll_step = layout->max_x * 0.05f;
 8018b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b64:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8018b68:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 8018810 <nk_panel_end+0x440>
 8018b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b70:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            scroll_inc = layout->max_x * 0.005f;
 8018b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8018b7c:	ed1f 7adb 	vldr	s14, [pc, #-876]	; 8018814 <nk_panel_end+0x444>
 8018b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b84:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
                scroll_offset, scroll_target, scroll_step, scroll_inc,
                &ctx->style.scrollh, in, style->font);
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8018b8e:	330c      	adds	r3, #12
 8018b90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018b94:	6812      	ldr	r2, [r2, #0]
            scroll_offset = nk_do_scrollbarh(&state, out, scroll, scroll_has_scrolling,
 8018b96:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8018b9a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8018b9e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018ba2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8018ba6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8018baa:	9201      	str	r2, [sp, #4]
 8018bac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018bb0:	9200      	str	r2, [sp, #0]
 8018bb2:	edd7 3a24 	vldr	s7, [r7, #144]	; 0x90
 8018bb6:	ed97 3a25 	vldr	s6, [r7, #148]	; 0x94
 8018bba:	edd7 2a23 	vldr	s5, [r7, #140]	; 0x8c
 8018bbe:	ed97 2a26 	vldr	s4, [r7, #152]	; 0x98
 8018bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018bc6:	eeb0 0a46 	vmov.f32	s0, s12
 8018bca:	eef0 0a66 	vmov.f32	s1, s13
 8018bce:	eeb0 1a47 	vmov.f32	s2, s14
 8018bd2:	eef0 1a67 	vmov.f32	s3, s15
 8018bd6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8018bda:	f003 fb7f 	bl	801c2dc <nk_do_scrollbarh>
 8018bde:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
            *layout->offset_x = (nk_uint)scroll_offset;
 8018be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018be6:	699b      	ldr	r3, [r3, #24]
 8018be8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8018bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018bf0:	ee17 2a90 	vmov	r2, s15
 8018bf4:	601a      	str	r2, [r3, #0]
        }
    }

    /* hide scroll if no user input */
    if (window->flags & NK_WINDOW_SCROLL_AUTO_HIDE) {
 8018bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d051      	beq.n	8018ca8 <nk_panel_end+0x8d8>
        int has_input = ctx->input.mouse.delta.x != 0 || ctx->input.mouse.delta.y != 0 || ctx->input.mouse.scroll_delta.y != 0;
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8018c0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c12:	d10f      	bne.n	8018c34 <nk_panel_end+0x864>
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8018c1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c22:	d107      	bne.n	8018c34 <nk_panel_end+0x864>
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8018c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c32:	d001      	beq.n	8018c38 <nk_panel_end+0x868>
 8018c34:	2301      	movs	r3, #1
 8018c36:	e000      	b.n	8018c3a <nk_panel_end+0x86a>
 8018c38:	2300      	movs	r3, #0
 8018c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        int is_window_hovered = nk_window_is_hovered(ctx);
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f00b fd9c 	bl	802477c <nk_window_is_hovered>
 8018c44:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        int any_item_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018c4e:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	; 0xad4
 8018c52:	f003 0302 	and.w	r3, r3, #2
 8018c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((!has_input && is_window_hovered) || (!is_window_hovered && !any_item_active))
 8018c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d103      	bne.n	8018c6a <nk_panel_end+0x89a>
 8018c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d107      	bne.n	8018c7a <nk_panel_end+0x8aa>
 8018c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d113      	bne.n	8018c9a <nk_panel_end+0x8ca>
 8018c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d10f      	bne.n	8018c9a <nk_panel_end+0x8ca>
            window->scrollbar_hiding_timer += ctx->delta_time_seconds;
 8018c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c7e:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018c88:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8018c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c94:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 8018c98:	e00c      	b.n	8018cb4 <nk_panel_end+0x8e4>
        else window->scrollbar_hiding_timer = 0;
 8018c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018c9e:	f04f 0200 	mov.w	r2, #0
 8018ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8018ca6:	e005      	b.n	8018cb4 <nk_panel_end+0x8e4>
    } else window->scrollbar_hiding_timer = 0;
 8018ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018cac:	f04f 0200 	mov.w	r2, #0
 8018cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* window border */
    if (layout->flags & NK_WINDOW_BORDER)
 8018cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cb8:	685b      	ldr	r3, [r3, #4]
 8018cba:	f003 0301 	and.w	r3, r3, #1
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d078      	beq.n	8018db4 <nk_panel_end+0x9e4>
    {
        struct nk_color border_color = nk_panel_get_border_color(style, layout->type);
 8018cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cc6:	781b      	ldrb	r3, [r3, #0]
 8018cc8:	4619      	mov	r1, r3
 8018cca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8018cce:	f7fe fb7d 	bl	80173cc <nk_panel_get_border_color>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	637b      	str	r3, [r7, #52]	; 0x34
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8018cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018cda:	685b      	ldr	r3, [r3, #4]
 8018cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
            ? (style->window.border + window->bounds.y + layout->header_height)
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d014      	beq.n	8018d0e <nk_panel_end+0x93e>
            ? (style->window.border + window->bounds.y + layout->header_height)
 8018ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018cec:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8018cf0:	ed93 7a00 	vldr	s14, [r3]
 8018cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018cf8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8018cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d04:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
            : ((layout->flags & NK_WINDOW_DYNAMIC)
 8018d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d0c:	e021      	b.n	8018d52 <nk_panel_end+0x982>
 8018d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d12:	685b      	ldr	r3, [r3, #4]
 8018d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
                : (window->bounds.y + window->bounds.h));
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d010      	beq.n	8018d3e <nk_panel_end+0x96e>
                ? (layout->bounds.y + layout->bounds.h + layout->footer_height)
 8018d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d20:	ed93 7a03 	vldr	s14, [r3, #12]
 8018d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d28:	edd3 7a05 	vldr	s15, [r3, #20]
 8018d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                : (window->bounds.y + window->bounds.h));
 8018d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d3c:	e009      	b.n	8018d52 <nk_panel_end+0x982>
 8018d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d42:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8018d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d4a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8018d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
        const float padding_y = (layout->flags & NK_WINDOW_MINIMIZED)
 8018d52:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        struct nk_rect b = window->bounds;
 8018d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d5a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8018d5e:	334c      	adds	r3, #76	; 0x4c
 8018d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        b.h = padding_y - window->bounds.y;
 8018d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d6a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8018d6e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8018d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018d76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        nk_stroke_rect(out, b, 0, layout->border, border_color);
 8018d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018d7e:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 8018d82:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8018d86:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8018d8a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018d8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018d92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018d94:	eef0 2a65 	vmov.f32	s5, s11
 8018d98:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8018f14 <nk_panel_end+0xb44>
 8018d9c:	eeb0 0a46 	vmov.f32	s0, s12
 8018da0:	eef0 0a66 	vmov.f32	s1, s13
 8018da4:	eeb0 1a47 	vmov.f32	s2, s14
 8018da8:	eef0 1a67 	vmov.f32	s3, s15
 8018dac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018db0:	f7f8 fd7a 	bl	80118a8 <nk_stroke_rect>
    }

    /* scaler */
    if ((layout->flags & NK_WINDOW_SCALABLE) && in && !(layout->flags & NK_WINDOW_MINIMIZED))
 8018db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018db8:	685b      	ldr	r3, [r3, #4]
 8018dba:	f003 0304 	and.w	r3, r3, #4
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	f000 81e1 	beq.w	8019186 <nk_panel_end+0xdb6>
 8018dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	f000 81dc 	beq.w	8019186 <nk_panel_end+0xdb6>
 8018dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dd2:	685b      	ldr	r3, [r3, #4]
 8018dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	f040 81d4 	bne.w	8019186 <nk_panel_end+0xdb6>
    {
        /* calculate scaler bounds */
        struct nk_rect scaler;
        scaler.w = scrollbar_size.x;
 8018dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018de0:	61fb      	str	r3, [r7, #28]
        scaler.h = scrollbar_size.y;
 8018de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018de4:	623b      	str	r3, [r7, #32]
        scaler.y = layout->bounds.y + layout->bounds.h;
 8018de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dea:	ed93 7a03 	vldr	s14, [r3, #12]
 8018dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018df2:	edd3 7a05 	vldr	s15, [r3, #20]
 8018df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018dfa:	edc7 7a06 	vstr	s15, [r7, #24]
        if (layout->flags & NK_WINDOW_SCALE_LEFT)
 8018dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e02:	685b      	ldr	r3, [r3, #4]
 8018e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d00e      	beq.n	8018e2a <nk_panel_end+0xa5a>
            scaler.x = layout->bounds.x - panel_padding.x * 0.5f;
 8018e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e10:	ed93 7a02 	vldr	s14, [r3, #8]
 8018e14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018e18:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018e1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e24:	edc7 7a05 	vstr	s15, [r7, #20]
 8018e28:	e00f      	b.n	8018e4a <nk_panel_end+0xa7a>
        else scaler.x = layout->bounds.x + layout->bounds.w + panel_padding.x;
 8018e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8018e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e36:	edd3 7a04 	vldr	s15, [r3, #16]
 8018e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e3e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8018e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e46:	edc7 7a05 	vstr	s15, [r7, #20]
        if (layout->flags & NK_WINDOW_NO_SCROLLBAR)
 8018e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	f003 0320 	and.w	r3, r3, #32
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d007      	beq.n	8018e68 <nk_panel_end+0xa98>
            scaler.x -= scaler.w;
 8018e58:	ed97 7a05 	vldr	s14, [r7, #20]
 8018e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8018e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e64:	edc7 7a05 	vstr	s15, [r7, #20]

        /* draw scaler */
        {const struct nk_style_item *item = &style->window.scaler;
 8018e68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e6c:	f503 53c4 	add.w	r3, r3, #6272	; 0x1880
 8018e70:	3314      	adds	r3, #20
 8018e72:	67bb      	str	r3, [r7, #120]	; 0x78
        if (item->type == NK_STYLE_ITEM_IMAGE)
 8018e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018e76:	781b      	ldrb	r3, [r3, #0]
 8018e78:	2b01      	cmp	r3, #1
 8018e7a:	d119      	bne.n	8018eb0 <nk_panel_end+0xae0>
            nk_draw_image(out, scaler, &item->data.image, nk_white);
 8018e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018e7e:	3304      	adds	r3, #4
 8018e80:	4a25      	ldr	r2, [pc, #148]	; (8018f18 <nk_panel_end+0xb48>)
 8018e82:	ed97 6a05 	vldr	s12, [r7, #20]
 8018e86:	edd7 6a06 	vldr	s13, [r7, #24]
 8018e8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8018e8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8018e92:	6812      	ldr	r2, [r2, #0]
 8018e94:	4619      	mov	r1, r3
 8018e96:	eeb0 0a46 	vmov.f32	s0, s12
 8018e9a:	eef0 0a66 	vmov.f32	s1, s13
 8018e9e:	eeb0 1a47 	vmov.f32	s2, s14
 8018ea2:	eef0 1a67 	vmov.f32	s3, s15
 8018ea6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018eaa:	f7f9 f95f 	bl	801216c <nk_draw_image>
 8018eae:	e063      	b.n	8018f78 <nk_panel_end+0xba8>
        else {
            if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8018eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d02e      	beq.n	8018f1c <nk_panel_end+0xb4c>
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018ebe:	edd7 6a05 	vldr	s13, [r7, #20]
 8018ec2:	ed97 6a06 	vldr	s12, [r7, #24]
 8018ec6:	edd7 5a05 	vldr	s11, [r7, #20]
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8018eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8018ece:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018ed2:	ee37 5a27 	vadd.f32	s10, s14, s15
                    scaler.y + scaler.h, scaler.x + scaler.w,
 8018ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8018eda:	edd7 7a07 	vldr	s15, [r7, #28]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018ede:	ee77 4a27 	vadd.f32	s9, s14, s15
                    scaler.y + scaler.h, item->data.color);
 8018ee2:	ed97 7a06 	vldr	s14, [r7, #24]
 8018ee6:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x, scaler.y, scaler.x,
 8018eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018ef0:	6859      	ldr	r1, [r3, #4]
 8018ef2:	eef0 2a67 	vmov.f32	s5, s15
 8018ef6:	eeb0 2a64 	vmov.f32	s4, s9
 8018efa:	eef0 1a45 	vmov.f32	s3, s10
 8018efe:	eeb0 1a65 	vmov.f32	s2, s11
 8018f02:	eef0 0a46 	vmov.f32	s1, s12
 8018f06:	eeb0 0a66 	vmov.f32	s0, s13
 8018f0a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018f0e:	f7f8 ffb3 	bl	8011e78 <nk_fill_triangle>
 8018f12:	e031      	b.n	8018f78 <nk_panel_end+0xba8>
 8018f14:	00000000 	.word	0x00000000
 8018f18:	0802a8dc 	.word	0x0802a8dc
            } else {
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8018f1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8018f20:	edd7 7a07 	vldr	s15, [r7, #28]
 8018f24:	ee77 6a27 	vadd.f32	s13, s14, s15
 8018f28:	ed97 6a06 	vldr	s12, [r7, #24]
 8018f2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8018f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8018f34:	ee77 5a27 	vadd.f32	s11, s14, s15
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8018f38:	ed97 7a06 	vldr	s14, [r7, #24]
 8018f3c:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8018f40:	ee37 5a27 	vadd.f32	s10, s14, s15
 8018f44:	edd7 4a05 	vldr	s9, [r7, #20]
                    scaler.y + scaler.h, scaler.x, scaler.y + scaler.h, item->data.color);
 8018f48:	ed97 7a06 	vldr	s14, [r7, #24]
 8018f4c:	edd7 7a08 	vldr	s15, [r7, #32]
                nk_fill_triangle(out, scaler.x + scaler.w, scaler.y, scaler.x + scaler.w,
 8018f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018f56:	6859      	ldr	r1, [r3, #4]
 8018f58:	eef0 2a67 	vmov.f32	s5, s15
 8018f5c:	eeb0 2a64 	vmov.f32	s4, s9
 8018f60:	eef0 1a45 	vmov.f32	s3, s10
 8018f64:	eeb0 1a65 	vmov.f32	s2, s11
 8018f68:	eef0 0a46 	vmov.f32	s1, s12
 8018f6c:	eeb0 0a66 	vmov.f32	s0, s13
 8018f70:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8018f74:	f7f8 ff80 	bl	8011e78 <nk_fill_triangle>
            }
        }}

        /* do window scaling */
        if (!(window->flags & NK_WINDOW_ROM)) {
 8018f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	f040 80ff 	bne.w	8019186 <nk_panel_end+0xdb6>
            struct nk_vec2 window_size = style->window.min_size;
 8018f88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018f90:	461a      	mov	r2, r3
 8018f92:	f107 030c 	add.w	r3, r7, #12
 8018f96:	f602 02e4 	addw	r2, r2, #2276	; 0x8e4
 8018f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f9e:	e883 0003 	stmia.w	r3, {r0, r1}
            int left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 8018fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018fa6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8018faa:	677b      	str	r3, [r7, #116]	; 0x74
            int left_mouse_click_in_scaler = nk_input_has_mouse_click_down_in_rect(in,
 8018fac:	ed97 6a05 	vldr	s12, [r7, #20]
 8018fb0:	edd7 6a06 	vldr	s13, [r7, #24]
 8018fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8018fb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8018fbc:	2201      	movs	r2, #1
 8018fbe:	eeb0 0a46 	vmov.f32	s0, s12
 8018fc2:	eef0 0a66 	vmov.f32	s1, s13
 8018fc6:	eeb0 1a47 	vmov.f32	s2, s14
 8018fca:	eef0 1a67 	vmov.f32	s3, s15
 8018fce:	2100      	movs	r1, #0
 8018fd0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8018fd4:	f7fc f9c6 	bl	8015364 <nk_input_has_mouse_click_down_in_rect>
 8018fd8:	6738      	str	r0, [r7, #112]	; 0x70
                    NK_BUTTON_LEFT, scaler, nk_true);

            if (left_mouse_down && left_mouse_click_in_scaler) {
 8018fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	f000 80d2 	beq.w	8019186 <nk_panel_end+0xdb6>
 8018fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	f000 80ce 	beq.w	8019186 <nk_panel_end+0xdb6>
                float delta_x = in->mouse.delta.x;
 8018fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018fee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8018ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (layout->flags & NK_WINDOW_SCALE_LEFT) {
 8018ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018ffa:	685b      	ldr	r3, [r3, #4]
 8018ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019000:	2b00      	cmp	r3, #0
 8019002:	d013      	beq.n	801902c <nk_panel_end+0xc5c>
                    delta_x = -delta_x;
 8019004:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019008:	eef1 7a67 	vneg.f32	s15, s15
 801900c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                    window->bounds.x += in->mouse.delta.x;
 8019010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019014:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8019018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801901c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8019020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019028:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
                }
                /* dragging in x-direction  */
                if (window->bounds.w + delta_x >= window_size.x) {
 801902c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019030:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8019034:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019038:	ee37 7a27 	vadd.f32	s14, s14, s15
 801903c:	edd7 7a03 	vldr	s15, [r7, #12]
 8019040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019048:	db2e      	blt.n	80190a8 <nk_panel_end+0xcd8>
                    if ((delta_x < 0) || (delta_x > 0 && in->mouse.pos.x >= scaler.x)) {
 801904a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801904e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019056:	d411      	bmi.n	801907c <nk_panel_end+0xcac>
 8019058:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801905c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019064:	dd20      	ble.n	80190a8 <nk_panel_end+0xcd8>
 8019066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801906a:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 801906e:	edd7 7a05 	vldr	s15, [r7, #20]
 8019072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801907a:	db15      	blt.n	80190a8 <nk_panel_end+0xcd8>
                        window->bounds.w = window->bounds.w + delta_x;
 801907c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019080:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8019084:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8019088:	ee77 7a27 	vadd.f32	s15, s14, s15
 801908c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019090:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                        scaler.x += in->mouse.delta.x;
 8019094:	ed97 7a05 	vldr	s14, [r7, #20]
 8019098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801909c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80190a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190a4:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                /* dragging in y-direction (only possible if static window) */
                if (!(layout->flags & NK_WINDOW_DYNAMIC)) {
 80190a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80190ac:	685b      	ldr	r3, [r3, #4]
 80190ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d145      	bne.n	8019142 <nk_panel_end+0xd72>
                    if (window_size.y < window->bounds.h + in->mouse.delta.y) {
 80190b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80190ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80190be:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80190c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190c6:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80190ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80190ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80190d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190d6:	d534      	bpl.n	8019142 <nk_panel_end+0xd72>
                        if ((in->mouse.delta.y < 0) || (in->mouse.delta.y > 0 && in->mouse.pos.y >= scaler.y)) {
 80190d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190dc:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80190e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80190e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190e8:	d413      	bmi.n	8019112 <nk_panel_end+0xd42>
 80190ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80190ee:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80190f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80190f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190fa:	dd22      	ble.n	8019142 <nk_panel_end+0xd72>
 80190fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019100:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8019104:	edd7 7a06 	vldr	s15, [r7, #24]
 8019108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801910c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019110:	db17      	blt.n	8019142 <nk_panel_end+0xd72>
                            window->bounds.h = window->bounds.h + in->mouse.delta.y;
 8019112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019116:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801911a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801911e:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8019122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801912a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                            scaler.y += in->mouse.delta.y;
 801912e:	ed97 7a06 	vldr	s14, [r7, #24]
 8019132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019136:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801913a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801913e:	edc7 7a06 	vstr	s15, [r7, #24]
                        }
                    }
                }
                ctx->style.cursor_active = ctx->style.cursors[NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT];
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = scaler.x + scaler.w/2.0f;
 801914e:	ed97 7a05 	vldr	s14, [r7, #20]
 8019152:	edd7 6a07 	vldr	s13, [r7, #28]
 8019156:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801915a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801915e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019166:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
                in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = scaler.y + scaler.h/2.0f;
 801916a:	ed97 7a06 	vldr	s14, [r7, #24]
 801916e:	edd7 6a08 	vldr	s13, [r7, #32]
 8019172:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019176:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801917a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801917e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019182:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
            }
        }
    }
    if (!nk_panel_is_sub(layout->type)) {
 8019186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801918a:	781b      	ldrb	r3, [r3, #0]
 801918c:	4618      	mov	r0, r3
 801918e:	f7fe f9b7 	bl	8017500 <nk_panel_is_sub>
 8019192:	4603      	mov	r3, r0
 8019194:	2b00      	cmp	r3, #0
 8019196:	d112      	bne.n	80191be <nk_panel_end+0xdee>
        /* window is hidden so clear command buffer  */
        if (layout->flags & NK_WINDOW_HIDDEN)
 8019198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d006      	beq.n	80191b4 <nk_panel_end+0xde4>
            nk_command_buffer_reset(&window->buffer);
 80191a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191aa:	3364      	adds	r3, #100	; 0x64
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7f8 fa6f 	bl	8011690 <nk_command_buffer_reset>
 80191b2:	e004      	b.n	80191be <nk_panel_end+0xdee>
        /* window is visible and not tab */
        else nk_finish(ctx, window);
 80191b4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80191b8:	6878      	ldr	r0, [r7, #4]
 80191ba:	f7f7 fe19 	bl	8010df0 <nk_finish>
    }

    /* NK_WINDOW_REMOVE_ROM flag was set so remove NK_WINDOW_ROM */
    if (layout->flags & NK_WINDOW_REMOVE_ROM) {
 80191be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191c2:	685b      	ldr	r3, [r3, #4]
 80191c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d00f      	beq.n	80191ec <nk_panel_end+0xe1c>
        layout->flags &= ~(nk_flags)NK_WINDOW_ROM;
 80191cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191d0:	685b      	ldr	r3, [r3, #4]
 80191d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80191d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191da:	605a      	str	r2, [r3, #4]
        layout->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 80191dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191e0:	685b      	ldr	r3, [r3, #4]
 80191e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80191e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191ea:	605a      	str	r2, [r3, #4]
    }
    window->flags = layout->flags;
 80191ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80191f0:	685a      	ldr	r2, [r3, #4]
 80191f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191f6:	649a      	str	r2, [r3, #72]	; 0x48

    /* property garbage collector */
    if (window->property.active && window->property.old != window->property.seq &&
 80191f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80191fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019200:	2b00      	cmp	r3, #0
 8019202:	d01b      	beq.n	801923c <nk_panel_end+0xe6c>
 8019204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019208:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 801920c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8019214:	429a      	cmp	r2, r3
 8019216:	d011      	beq.n	801923c <nk_panel_end+0xe6c>
        window->property.active == window->property.prev) {
 8019218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801921c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8019220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    if (window->property.active && window->property.old != window->property.seq &&
 8019228:	429a      	cmp	r2, r3
 801922a:	d107      	bne.n	801923c <nk_panel_end+0xe6c>
        nk_zero(&window->property, sizeof(window->property));
 801922c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019230:	3394      	adds	r3, #148	; 0x94
 8019232:	2168      	movs	r1, #104	; 0x68
 8019234:	4618      	mov	r0, r3
 8019236:	f009 fa31 	bl	802269c <nk_zero>
 801923a:	e014      	b.n	8019266 <nk_panel_end+0xe96>
    } else {
        window->property.old = window->property.seq;
 801923c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019240:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8019244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019248:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        window->property.prev = window->property.active;
 801924c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019250:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8019254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019258:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        window->property.seq = 0;
 801925c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019260:	2200      	movs	r2, #0
 8019262:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
    /* edit garbage collector */
    if (window->edit.active && window->edit.old != window->edit.seq &&
 8019266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801926a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801926e:	2b00      	cmp	r3, #0
 8019270:	d01c      	beq.n	80192ac <nk_panel_end+0xedc>
 8019272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019276:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 801927a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801927e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8019282:	429a      	cmp	r2, r3
 8019284:	d012      	beq.n	80192ac <nk_panel_end+0xedc>
       window->edit.active == window->edit.prev) {
 8019286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801928a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 801928e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019292:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    if (window->edit.active && window->edit.old != window->edit.seq &&
 8019296:	429a      	cmp	r2, r3
 8019298:	d108      	bne.n	80192ac <nk_panel_end+0xedc>
        nk_zero(&window->edit, sizeof(window->edit));
 801929a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801929e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80192a2:	212c      	movs	r1, #44	; 0x2c
 80192a4:	4618      	mov	r0, r3
 80192a6:	f009 f9f9 	bl	802269c <nk_zero>
 80192aa:	e014      	b.n	80192d6 <nk_panel_end+0xf06>
    } else {
        window->edit.old = window->edit.seq;
 80192ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192b0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80192b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192b8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        window->edit.prev = window->edit.active;
 80192bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192c0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80192c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192c8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
        window->edit.seq = 0;
 80192cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192d0:	2200      	movs	r2, #0
 80192d2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    }
    /* contextual garbage collector */
    if (window->popup.active_con && window->popup.con_old != window->popup.con_count) {
 80192d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192da:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d019      	beq.n	8019316 <nk_panel_end+0xf46>
 80192e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192e6:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80192ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192ee:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d00f      	beq.n	8019316 <nk_panel_end+0xf46>
        window->popup.con_count = 0;
 80192f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80192fa:	2200      	movs	r2, #0
 80192fc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
        window->popup.con_old = 0;
 8019300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019304:	2200      	movs	r2, #0
 8019306:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.active_con = 0;
 801930a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801930e:	2200      	movs	r2, #0
 8019310:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8019314:	e00c      	b.n	8019330 <nk_panel_end+0xf60>
    } else {
        window->popup.con_old = window->popup.con_count;
 8019316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801931a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 801931e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019322:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        window->popup.con_count = 0;
 8019326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801932a:	2200      	movs	r2, #0
 801932c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    }
    window->popup.combo_count = 0;
 8019330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019334:	2200      	movs	r2, #0
 8019336:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    /* helper to make sure you have a 'nk_tree_push' for every 'nk_tree_pop' */
    NK_ASSERT(!layout->row.tree_depth);
 801933a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801933e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019342:	2b00      	cmp	r3, #0
 8019344:	d007      	beq.n	8019356 <nk_panel_end+0xf86>
 8019346:	4b05      	ldr	r3, [pc, #20]	; (801935c <nk_panel_end+0xf8c>)
 8019348:	4a05      	ldr	r2, [pc, #20]	; (8019360 <nk_panel_end+0xf90>)
 801934a:	f240 216b 	movw	r1, #619	; 0x26b
 801934e:	4805      	ldr	r0, [pc, #20]	; (8019364 <nk_panel_end+0xf94>)
 8019350:	f00b fbce 	bl	8024af0 <__assert_func>
        return;
 8019354:	bf00      	nop
}
 8019356:	37c4      	adds	r7, #196	; 0xc4
 8019358:	46bd      	mov	sp, r7
 801935a:	bd90      	pop	{r4, r7, pc}
 801935c:	08028bb8 	.word	0x08028bb8
 8019360:	0802a8f0 	.word	0x0802a8f0
 8019364:	08028b74 	.word	0x08028b74

08019368 <nk_pool_init>:
 *
 * ===============================================================*/
NK_LIB void
nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,
    unsigned int capacity)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b084      	sub	sp, #16
 801936c:	af00      	add	r7, sp, #0
 801936e:	60f8      	str	r0, [r7, #12]
 8019370:	60b9      	str	r1, [r7, #8]
 8019372:	607a      	str	r2, [r7, #4]
    NK_ASSERT(capacity >= 1);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d105      	bne.n	8019386 <nk_pool_init+0x1e>
 801937a:	4b0e      	ldr	r3, [pc, #56]	; (80193b4 <nk_pool_init+0x4c>)
 801937c:	4a0e      	ldr	r2, [pc, #56]	; (80193b8 <nk_pool_init+0x50>)
 801937e:	210d      	movs	r1, #13
 8019380:	480e      	ldr	r0, [pc, #56]	; (80193bc <nk_pool_init+0x54>)
 8019382:	f00b fbb5 	bl	8024af0 <__assert_func>
    nk_zero(pool, sizeof(*pool));
 8019386:	2128      	movs	r1, #40	; 0x28
 8019388:	68f8      	ldr	r0, [r7, #12]
 801938a:	f009 f987 	bl	802269c <nk_zero>
    pool->alloc = *alloc;
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	68ba      	ldr	r2, [r7, #8]
 8019392:	ca07      	ldmia	r2, {r0, r1, r2}
 8019394:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pool->capacity = capacity;
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	61da      	str	r2, [r3, #28]
    pool->type = NK_BUFFER_DYNAMIC;
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	2201      	movs	r2, #1
 80193a2:	731a      	strb	r2, [r3, #12]
    pool->pages = 0;
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	2200      	movs	r2, #0
 80193a8:	615a      	str	r2, [r3, #20]
}
 80193aa:	bf00      	nop
 80193ac:	3710      	adds	r7, #16
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	08028bd0 	.word	0x08028bd0
 80193b8:	0802a900 	.word	0x0802a900
 80193bc:	08028be0 	.word	0x08028be0

080193c0 <nk_pool_init_fixed>:
        iter = next;
    }
}
NK_LIB void
nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b084      	sub	sp, #16
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	60f8      	str	r0, [r7, #12]
 80193c8:	60b9      	str	r1, [r7, #8]
 80193ca:	607a      	str	r2, [r7, #4]
    nk_zero(pool, sizeof(*pool));
 80193cc:	2128      	movs	r1, #40	; 0x28
 80193ce:	68f8      	ldr	r0, [r7, #12]
 80193d0:	f009 f964 	bl	802269c <nk_zero>
    NK_ASSERT(size >= sizeof(struct nk_page));
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80193da:	d205      	bcs.n	80193e8 <nk_pool_init_fixed+0x28>
 80193dc:	4b10      	ldr	r3, [pc, #64]	; (8019420 <nk_pool_init_fixed+0x60>)
 80193de:	4a11      	ldr	r2, [pc, #68]	; (8019424 <nk_pool_init_fixed+0x64>)
 80193e0:	2125      	movs	r1, #37	; 0x25
 80193e2:	4811      	ldr	r0, [pc, #68]	; (8019428 <nk_pool_init_fixed+0x68>)
 80193e4:	f00b fb84 	bl	8024af0 <__assert_func>
    if (size < sizeof(struct nk_page)) return;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80193ee:	d313      	bcc.n	8019418 <nk_pool_init_fixed+0x58>
    /* first nk_page_element is embedded in nk_page, additional elements follow in adjacent space */
    pool->capacity = (unsigned)(1 + (size - sizeof(struct nk_page)) / sizeof(struct nk_page_element));
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80193f6:	091b      	lsrs	r3, r3, #4
 80193f8:	4a0c      	ldr	r2, [pc, #48]	; (801942c <nk_pool_init_fixed+0x6c>)
 80193fa:	fba2 2303 	umull	r2, r3, r2, r3
 80193fe:	1c5a      	adds	r2, r3, #1
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	61da      	str	r2, [r3, #28]
    pool->pages = (struct nk_page*)memory;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	68ba      	ldr	r2, [r7, #8]
 8019408:	615a      	str	r2, [r3, #20]
    pool->type = NK_BUFFER_FIXED;
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	2200      	movs	r2, #0
 801940e:	731a      	strb	r2, [r3, #12]
    pool->size = size;
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	687a      	ldr	r2, [r7, #4]
 8019414:	621a      	str	r2, [r3, #32]
 8019416:	e000      	b.n	801941a <nk_pool_init_fixed+0x5a>
    if (size < sizeof(struct nk_page)) return;
 8019418:	bf00      	nop
}
 801941a:	3710      	adds	r7, #16
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}
 8019420:	08028bfc 	.word	0x08028bfc
 8019424:	0802a910 	.word	0x0802a910
 8019428:	08028be0 	.word	0x08028be0
 801942c:	097b425f 	.word	0x097b425f

08019430 <nk_pool_alloc>:
NK_LIB struct nk_page_element*
nk_pool_alloc(struct nk_pool *pool)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b084      	sub	sp, #16
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
    if (!pool->pages || pool->pages->size >= pool->capacity) {
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	695b      	ldr	r3, [r3, #20]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d006      	beq.n	801944e <nk_pool_alloc+0x1e>
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	695b      	ldr	r3, [r3, #20]
 8019444:	681a      	ldr	r2, [r3, #0]
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	69db      	ldr	r3, [r3, #28]
 801944a:	429a      	cmp	r2, r3
 801944c:	d342      	bcc.n	80194d4 <nk_pool_alloc+0xa4>
        /* allocate new page */
        struct nk_page *page;
        if (pool->type == NK_BUFFER_FIXED) {
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	7b1b      	ldrb	r3, [r3, #12]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d11e      	bne.n	8019494 <nk_pool_alloc+0x64>
            NK_ASSERT(pool->pages);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	695b      	ldr	r3, [r3, #20]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d105      	bne.n	801946a <nk_pool_alloc+0x3a>
 801945e:	4b26      	ldr	r3, [pc, #152]	; (80194f8 <nk_pool_alloc+0xc8>)
 8019460:	4a26      	ldr	r2, [pc, #152]	; (80194fc <nk_pool_alloc+0xcc>)
 8019462:	2134      	movs	r1, #52	; 0x34
 8019464:	4826      	ldr	r0, [pc, #152]	; (8019500 <nk_pool_alloc+0xd0>)
 8019466:	f00b fb43 	bl	8024af0 <__assert_func>
            if (!pool->pages) return 0;
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	695b      	ldr	r3, [r3, #20]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d101      	bne.n	8019476 <nk_pool_alloc+0x46>
 8019472:	2300      	movs	r3, #0
 8019474:	e03b      	b.n	80194ee <nk_pool_alloc+0xbe>
            NK_ASSERT(pool->pages->size < pool->capacity);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	695b      	ldr	r3, [r3, #20]
 801947a:	681a      	ldr	r2, [r3, #0]
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	69db      	ldr	r3, [r3, #28]
 8019480:	429a      	cmp	r2, r3
 8019482:	d305      	bcc.n	8019490 <nk_pool_alloc+0x60>
 8019484:	4b1f      	ldr	r3, [pc, #124]	; (8019504 <nk_pool_alloc+0xd4>)
 8019486:	4a1d      	ldr	r2, [pc, #116]	; (80194fc <nk_pool_alloc+0xcc>)
 8019488:	2136      	movs	r1, #54	; 0x36
 801948a:	481d      	ldr	r0, [pc, #116]	; (8019500 <nk_pool_alloc+0xd0>)
 801948c:	f00b fb30 	bl	8024af0 <__assert_func>
            return 0;
 8019490:	2300      	movs	r3, #0
 8019492:	e02c      	b.n	80194ee <nk_pool_alloc+0xbe>
        } else {
            nk_size size = sizeof(struct nk_page);
 8019494:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8019498:	60fb      	str	r3, [r7, #12]
            size += (pool->capacity - 1) * sizeof(struct nk_page_element);
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	69db      	ldr	r3, [r3, #28]
 801949e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80194a2:	fb03 f202 	mul.w	r2, r3, r2
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	4413      	add	r3, r2
 80194aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80194ae:	60fb      	str	r3, [r7, #12]
            page = (struct nk_page*)pool->alloc.alloc(pool->alloc.userdata,0, size);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	685b      	ldr	r3, [r3, #4]
 80194b4:	6878      	ldr	r0, [r7, #4]
 80194b6:	68fa      	ldr	r2, [r7, #12]
 80194b8:	2100      	movs	r1, #0
 80194ba:	6800      	ldr	r0, [r0, #0]
 80194bc:	4798      	blx	r3
 80194be:	60b8      	str	r0, [r7, #8]
            page->next = pool->pages;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	695a      	ldr	r2, [r3, #20]
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	605a      	str	r2, [r3, #4]
            pool->pages = page;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	68ba      	ldr	r2, [r7, #8]
 80194cc:	615a      	str	r2, [r3, #20]
            page->size = 0;
 80194ce:	68bb      	ldr	r3, [r7, #8]
 80194d0:	2200      	movs	r2, #0
 80194d2:	601a      	str	r2, [r3, #0]
        }
    } return &pool->pages->win[pool->pages->size++];
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6959      	ldr	r1, [r3, #20]
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	695a      	ldr	r2, [r3, #20]
 80194dc:	6813      	ldr	r3, [r2, #0]
 80194de:	1c58      	adds	r0, r3, #1
 80194e0:	6010      	str	r0, [r2, #0]
 80194e2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80194e6:	fb02 f303 	mul.w	r3, r2, r3
 80194ea:	3308      	adds	r3, #8
 80194ec:	440b      	add	r3, r1
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3710      	adds	r7, #16
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}
 80194f6:	bf00      	nop
 80194f8:	08028c1c 	.word	0x08028c1c
 80194fc:	0802a924 	.word	0x0802a924
 8019500:	08028be0 	.word	0x08028be0
 8019504:	08028c28 	.word	0x08028c28

08019508 <nk_popup_begin>:
 *
 * ===============================================================*/
NK_API nk_bool
nk_popup_begin(struct nk_context *ctx, enum nk_popup_type type,
    const char *title, nk_flags flags, struct nk_rect rect)
{
 8019508:	b5b0      	push	{r4, r5, r7, lr}
 801950a:	b090      	sub	sp, #64	; 0x40
 801950c:	af00      	add	r7, sp, #0
 801950e:	61f8      	str	r0, [r7, #28]
 8019510:	617a      	str	r2, [r7, #20]
 8019512:	613b      	str	r3, [r7, #16]
 8019514:	eeb0 6a40 	vmov.f32	s12, s0
 8019518:	eef0 6a60 	vmov.f32	s13, s1
 801951c:	eeb0 7a41 	vmov.f32	s14, s2
 8019520:	eef0 7a61 	vmov.f32	s15, s3
 8019524:	460b      	mov	r3, r1
 8019526:	76fb      	strb	r3, [r7, #27]
 8019528:	ed87 6a00 	vstr	s12, [r7]
 801952c:	edc7 6a01 	vstr	s13, [r7, #4]
 8019530:	ed87 7a02 	vstr	s14, [r7, #8]
 8019534:	edc7 7a03 	vstr	s15, [r7, #12]

    int title_len;
    nk_hash title_hash;
    nk_size allocated;

    NK_ASSERT(ctx);
 8019538:	69fb      	ldr	r3, [r7, #28]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d105      	bne.n	801954a <nk_popup_begin+0x42>
 801953e:	4ba8      	ldr	r3, [pc, #672]	; (80197e0 <nk_popup_begin+0x2d8>)
 8019540:	4aa8      	ldr	r2, [pc, #672]	; (80197e4 <nk_popup_begin+0x2dc>)
 8019542:	2115      	movs	r1, #21
 8019544:	48a8      	ldr	r0, [pc, #672]	; (80197e8 <nk_popup_begin+0x2e0>)
 8019546:	f00b fad3 	bl	8024af0 <__assert_func>
    NK_ASSERT(title);
 801954a:	697b      	ldr	r3, [r7, #20]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d105      	bne.n	801955c <nk_popup_begin+0x54>
 8019550:	4ba6      	ldr	r3, [pc, #664]	; (80197ec <nk_popup_begin+0x2e4>)
 8019552:	4aa4      	ldr	r2, [pc, #656]	; (80197e4 <nk_popup_begin+0x2dc>)
 8019554:	2116      	movs	r1, #22
 8019556:	48a4      	ldr	r0, [pc, #656]	; (80197e8 <nk_popup_begin+0x2e0>)
 8019558:	f00b faca 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 801955c:	69fb      	ldr	r3, [r7, #28]
 801955e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019562:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019566:	2b00      	cmp	r3, #0
 8019568:	d105      	bne.n	8019576 <nk_popup_begin+0x6e>
 801956a:	4ba1      	ldr	r3, [pc, #644]	; (80197f0 <nk_popup_begin+0x2e8>)
 801956c:	4a9d      	ldr	r2, [pc, #628]	; (80197e4 <nk_popup_begin+0x2dc>)
 801956e:	2117      	movs	r1, #23
 8019570:	489d      	ldr	r0, [pc, #628]	; (80197e8 <nk_popup_begin+0x2e0>)
 8019572:	f00b fabd 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8019576:	69fb      	ldr	r3, [r7, #28]
 8019578:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801957c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019584:	2b00      	cmp	r3, #0
 8019586:	d105      	bne.n	8019594 <nk_popup_begin+0x8c>
 8019588:	4b9a      	ldr	r3, [pc, #616]	; (80197f4 <nk_popup_begin+0x2ec>)
 801958a:	4a96      	ldr	r2, [pc, #600]	; (80197e4 <nk_popup_begin+0x2dc>)
 801958c:	2118      	movs	r1, #24
 801958e:	4896      	ldr	r0, [pc, #600]	; (80197e8 <nk_popup_begin+0x2e0>)
 8019590:	f00b faae 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8019594:	69fb      	ldr	r3, [r7, #28]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d00f      	beq.n	80195ba <nk_popup_begin+0xb2>
 801959a:	69fb      	ldr	r3, [r7, #28]
 801959c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80195a0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d008      	beq.n	80195ba <nk_popup_begin+0xb2>
 80195a8:	69fb      	ldr	r3, [r7, #28]
 80195aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80195ae:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80195b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d101      	bne.n	80195be <nk_popup_begin+0xb6>
        return 0;
 80195ba:	2300      	movs	r3, #0
 80195bc:	e14f      	b.n	801985e <nk_popup_begin+0x356>

    win = ctx->current;
 80195be:	69fb      	ldr	r3, [r7, #28]
 80195c0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80195c4:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80195c8:	633b      	str	r3, [r7, #48]	; 0x30
    panel = win->layout;
 80195ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80195d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP) && "popups are not allowed to have popups");
 80195d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195d4:	781b      	ldrb	r3, [r3, #0]
 80195d6:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d005      	beq.n	80195ea <nk_popup_begin+0xe2>
 80195de:	4b86      	ldr	r3, [pc, #536]	; (80197f8 <nk_popup_begin+0x2f0>)
 80195e0:	4a80      	ldr	r2, [pc, #512]	; (80197e4 <nk_popup_begin+0x2dc>)
 80195e2:	211e      	movs	r1, #30
 80195e4:	4880      	ldr	r0, [pc, #512]	; (80197e8 <nk_popup_begin+0x2e0>)
 80195e6:	f00b fa83 	bl	8024af0 <__assert_func>
    (void)panel;
    title_len = (int)nk_strlen(title);
 80195ea:	6978      	ldr	r0, [r7, #20]
 80195ec:	f009 f874 	bl	80226d8 <nk_strlen>
 80195f0:	62b8      	str	r0, [r7, #40]	; 0x28
    title_hash = nk_murmur_hash(title, (int)title_len, NK_PANEL_POPUP);
 80195f2:	2204      	movs	r2, #4
 80195f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80195f6:	6978      	ldr	r0, [r7, #20]
 80195f8:	f009 fce6 	bl	8022fc8 <nk_murmur_hash>
 80195fc:	6278      	str	r0, [r7, #36]	; 0x24

    popup = win->popup.win;
 80195fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019600:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8019604:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!popup) {
 8019606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019608:	2b00      	cmp	r3, #0
 801960a:	d113      	bne.n	8019634 <nk_popup_begin+0x12c>
        popup = (struct nk_window*)nk_create_window(ctx);
 801960c:	69f8      	ldr	r0, [r7, #28]
 801960e:	f00a f991 	bl	8023934 <nk_create_window>
 8019612:	63f8      	str	r0, [r7, #60]	; 0x3c
        popup->parent = win;
 8019614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019618:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 801961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801961e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019620:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.active = 0;
 8019624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019626:	2200      	movs	r2, #0
 8019628:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        win->popup.type = NK_PANEL_POPUP;
 801962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801962e:	2204      	movs	r2, #4
 8019630:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    /* make sure we have correct popup */
    if (win->popup.name != title_hash) {
 8019634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019636:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801963a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801963c:	429a      	cmp	r2, r3
 801963e:	d018      	beq.n	8019672 <nk_popup_begin+0x16a>
        if (!win->popup.active) {
 8019640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019642:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8019646:	2b00      	cmp	r3, #0
 8019648:	d111      	bne.n	801966e <nk_popup_begin+0x166>
            nk_zero(popup, sizeof(*popup));
 801964a:	f44f 71c2 	mov.w	r1, #388	; 0x184
 801964e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019650:	f009 f824 	bl	802269c <nk_zero>
            win->popup.name = title_hash;
 8019654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019658:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            win->popup.active = 1;
 801965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801965e:	2201      	movs	r2, #1
 8019660:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
            win->popup.type = NK_PANEL_POPUP;
 8019664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019666:	2204      	movs	r2, #4
 8019668:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 801966c:	e001      	b.n	8019672 <nk_popup_begin+0x16a>
        } else return 0;
 801966e:	2300      	movs	r3, #0
 8019670:	e0f5      	b.n	801985e <nk_popup_begin+0x356>
    }

    /* popup position is local to window */
    ctx->current = popup;
 8019672:	69fb      	ldr	r3, [r7, #28]
 8019674:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019678:	461a      	mov	r2, r3
 801967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801967c:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    rect.x += win->layout->clip.x;
 8019680:	ed97 7a00 	vldr	s14, [r7]
 8019684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801968a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801968e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019692:	edc7 7a00 	vstr	s15, [r7]
    rect.y += win->layout->clip.y;
 8019696:	ed97 7a01 	vldr	s14, [r7, #4]
 801969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801969c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80196a0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80196a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196a8:	edc7 7a01 	vstr	s15, [r7, #4]

    /* setup popup data */
    popup->parent = win;
 80196ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->bounds = rect;
 80196b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196b6:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80196ba:	463b      	mov	r3, r7
 80196bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80196be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->seq = ctx->seq;
 80196c2:	69fb      	ldr	r3, [r7, #28]
 80196c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80196c8:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 80196cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ce:	601a      	str	r2, [r3, #0]
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 80196d0:	69f8      	ldr	r0, [r7, #28]
 80196d2:	f7fd fccd 	bl	8017070 <nk_create_panel>
 80196d6:	4602      	mov	r2, r0
 80196d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 80196de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196e0:	693a      	ldr	r2, [r7, #16]
 80196e2:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 80196e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80196e8:	f043 0201 	orr.w	r2, r3, #1
 80196ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ee:	649a      	str	r2, [r3, #72]	; 0x48
    if (type == NK_POPUP_DYNAMIC)
 80196f0:	7efb      	ldrb	r3, [r7, #27]
 80196f2:	2b01      	cmp	r3, #1
 80196f4:	d105      	bne.n	8019702 <nk_popup_begin+0x1fa>
        popup->flags |= NK_WINDOW_DYNAMIC;
 80196f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80196fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80196fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019700:	649a      	str	r2, [r3, #72]	; 0x48

    popup->buffer = win->buffer;
 8019702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019706:	f102 0464 	add.w	r4, r2, #100	; 0x64
 801970a:	f103 0564 	add.w	r5, r3, #100	; 0x64
 801970e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019716:	e895 0003 	ldmia.w	r5, {r0, r1}
 801971a:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_start_popup(ctx, win);
 801971e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019720:	69f8      	ldr	r0, [r7, #28]
 8019722:	f7f7 fab7 	bl	8010c94 <nk_start_popup>
    allocated = ctx->memory.allocated;
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801972c:	f8d3 3ab8 	ldr.w	r3, [r3, #2744]	; 0xab8
 8019730:	623b      	str	r3, [r7, #32]
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8019732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019734:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019738:	4b30      	ldr	r3, [pc, #192]	; (80197fc <nk_popup_begin+0x2f4>)
 801973a:	ed93 6a00 	vldr	s12, [r3]
 801973e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019742:	ed93 7a02 	vldr	s14, [r3, #8]
 8019746:	edd3 7a03 	vldr	s15, [r3, #12]
 801974a:	eeb0 0a46 	vmov.f32	s0, s12
 801974e:	eef0 0a66 	vmov.f32	s1, s13
 8019752:	eeb0 1a47 	vmov.f32	s2, s14
 8019756:	eef0 1a67 	vmov.f32	s3, s15
 801975a:	4610      	mov	r0, r2
 801975c:	f7f8 f82c 	bl	80117b8 <nk_push_scissor>

    if (nk_panel_begin(ctx, title, NK_PANEL_POPUP)) {
 8019760:	2204      	movs	r2, #4
 8019762:	6979      	ldr	r1, [r7, #20]
 8019764:	69f8      	ldr	r0, [r7, #28]
 8019766:	f7fd fef1 	bl	801754c <nk_panel_begin>
 801976a:	4603      	mov	r3, r0
 801976c:	2b00      	cmp	r3, #0
 801976e:	d031      	beq.n	80197d4 <nk_popup_begin+0x2cc>
        /* popup is running therefore invalidate parent panels */
        struct nk_panel *root;
        root = win->layout;
 8019770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019776:	63bb      	str	r3, [r7, #56]	; 0x38
        while (root) {
 8019778:	e00f      	b.n	801979a <nk_popup_begin+0x292>
            root->flags |= NK_WINDOW_ROM;
 801977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801977c:	685b      	ldr	r3, [r3, #4]
 801977e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019784:	605a      	str	r2, [r3, #4]
            root->flags &= ~(nk_flags)NK_WINDOW_REMOVE_ROM;
 8019786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019788:	685b      	ldr	r3, [r3, #4]
 801978a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019790:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8019792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019794:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019798:	63bb      	str	r3, [r7, #56]	; 0x38
        while (root) {
 801979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801979c:	2b00      	cmp	r3, #0
 801979e:	d1ec      	bne.n	801977a <nk_popup_begin+0x272>
        }
        win->popup.active = 1;
 80197a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a2:	2201      	movs	r2, #1
 80197a4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        popup->layout->offset_x = &popup->scrollbar.x;
 80197a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197b0:	325c      	adds	r2, #92	; 0x5c
 80197b2:	619a      	str	r2, [r3, #24]
        popup->layout->offset_y = &popup->scrollbar.y;
 80197b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197bc:	3260      	adds	r2, #96	; 0x60
 80197be:	61da      	str	r2, [r3, #28]
        popup->layout->parent = win->layout;
 80197c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80197cc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        return 1;
 80197d0:	2301      	movs	r3, #1
 80197d2:	e044      	b.n	801985e <nk_popup_begin+0x356>
    } else {
        /* popup was closed/is invalid so cleanup */
        struct nk_panel *root;
        root = win->layout;
 80197d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197da:	637b      	str	r3, [r7, #52]	; 0x34
        while (root) {
 80197dc:	e01a      	b.n	8019814 <nk_popup_begin+0x30c>
 80197de:	bf00      	nop
 80197e0:	08028c4c 	.word	0x08028c4c
 80197e4:	0802a944 	.word	0x0802a944
 80197e8:	08028c50 	.word	0x08028c50
 80197ec:	08028c6c 	.word	0x08028c6c
 80197f0:	08028c74 	.word	0x08028c74
 80197f4:	08028c84 	.word	0x08028c84
 80197f8:	08028c9c 	.word	0x08028c9c
 80197fc:	0802a934 	.word	0x0802a934
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8019800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019802:	685b      	ldr	r3, [r3, #4]
 8019804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801980a:	605a      	str	r2, [r3, #4]
            root = root->parent;
 801980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801980e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019812:	637b      	str	r3, [r7, #52]	; 0x34
        while (root) {
 8019814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019816:	2b00      	cmp	r3, #0
 8019818:	d1f2      	bne.n	8019800 <nk_popup_begin+0x2f8>
        }
        win->popup.buf.active = 0;
 801981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801981c:	2200      	movs	r2, #0
 801981e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        win->popup.active = 0;
 8019822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019824:	2200      	movs	r2, #0
 8019826:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        ctx->memory.allocated = allocated;
 801982a:	69fb      	ldr	r3, [r7, #28]
 801982c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019830:	461a      	mov	r2, r3
 8019832:	6a3b      	ldr	r3, [r7, #32]
 8019834:	f8c2 3ab8 	str.w	r3, [r2, #2744]	; 0xab8
        ctx->current = win;
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801983e:	461a      	mov	r2, r3
 8019840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019842:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        nk_free_panel(ctx, popup->layout);
 8019846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801984c:	4619      	mov	r1, r3
 801984e:	69f8      	ldr	r0, [r7, #28]
 8019850:	f7fd fc25 	bl	801709e <nk_free_panel>
        popup->layout = 0;
 8019854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019856:	2200      	movs	r2, #0
 8019858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 801985c:	2300      	movs	r3, #0
    }
}
 801985e:	4618      	mov	r0, r3
 8019860:	3740      	adds	r7, #64	; 0x40
 8019862:	46bd      	mov	sp, r7
 8019864:	bdb0      	pop	{r4, r5, r7, pc}
 8019866:	bf00      	nop

08019868 <nk_nonblock_begin>:
NK_LIB nk_bool
nk_nonblock_begin(struct nk_context *ctx,
    nk_flags flags, struct nk_rect body, struct nk_rect header,
    enum nk_panel_type panel_type)
{
 8019868:	b5b0      	push	{r4, r5, r7, lr}
 801986a:	b096      	sub	sp, #88	; 0x58
 801986c:	af00      	add	r7, sp, #0
 801986e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019870:	62b9      	str	r1, [r7, #40]	; 0x28
 8019872:	eeb0 4a40 	vmov.f32	s8, s0
 8019876:	eef0 4a60 	vmov.f32	s9, s1
 801987a:	eeb0 5a41 	vmov.f32	s10, s2
 801987e:	eef0 5a61 	vmov.f32	s11, s3
 8019882:	eeb0 6a42 	vmov.f32	s12, s4
 8019886:	eef0 6a62 	vmov.f32	s13, s5
 801988a:	eeb0 7a43 	vmov.f32	s14, s6
 801988e:	eef0 7a63 	vmov.f32	s15, s7
 8019892:	4613      	mov	r3, r2
 8019894:	ed87 4a06 	vstr	s8, [r7, #24]
 8019898:	edc7 4a07 	vstr	s9, [r7, #28]
 801989c:	ed87 5a08 	vstr	s10, [r7, #32]
 80198a0:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 80198a4:	ed87 6a02 	vstr	s12, [r7, #8]
 80198a8:	edc7 6a03 	vstr	s13, [r7, #12]
 80198ac:	ed87 7a04 	vstr	s14, [r7, #16]
 80198b0:	edc7 7a05 	vstr	s15, [r7, #20]
 80198b4:	71fb      	strb	r3, [r7, #7]
    struct nk_window *popup;
    struct nk_window *win;
    struct nk_panel *panel;
    int is_active = nk_true;
 80198b6:	2301      	movs	r3, #1
 80198b8:	653b      	str	r3, [r7, #80]	; 0x50

    NK_ASSERT(ctx);
 80198ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d105      	bne.n	80198cc <nk_nonblock_begin+0x64>
 80198c0:	4baf      	ldr	r3, [pc, #700]	; (8019b80 <nk_nonblock_begin+0x318>)
 80198c2:	4ab0      	ldr	r2, [pc, #704]	; (8019b84 <nk_nonblock_begin+0x31c>)
 80198c4:	2173      	movs	r1, #115	; 0x73
 80198c6:	48b0      	ldr	r0, [pc, #704]	; (8019b88 <nk_nonblock_begin+0x320>)
 80198c8:	f00b f912 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80198cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80198d2:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d105      	bne.n	80198e6 <nk_nonblock_begin+0x7e>
 80198da:	4bac      	ldr	r3, [pc, #688]	; (8019b8c <nk_nonblock_begin+0x324>)
 80198dc:	4aa9      	ldr	r2, [pc, #676]	; (8019b84 <nk_nonblock_begin+0x31c>)
 80198de:	2174      	movs	r1, #116	; 0x74
 80198e0:	48a9      	ldr	r0, [pc, #676]	; (8019b88 <nk_nonblock_begin+0x320>)
 80198e2:	f00b f905 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80198e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80198ec:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80198f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d105      	bne.n	8019904 <nk_nonblock_begin+0x9c>
 80198f8:	4ba5      	ldr	r3, [pc, #660]	; (8019b90 <nk_nonblock_begin+0x328>)
 80198fa:	4aa2      	ldr	r2, [pc, #648]	; (8019b84 <nk_nonblock_begin+0x31c>)
 80198fc:	2175      	movs	r1, #117	; 0x75
 80198fe:	48a2      	ldr	r0, [pc, #648]	; (8019b88 <nk_nonblock_begin+0x320>)
 8019900:	f00b f8f6 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8019904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019906:	2b00      	cmp	r3, #0
 8019908:	d00f      	beq.n	801992a <nk_nonblock_begin+0xc2>
 801990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801990c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019910:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019914:	2b00      	cmp	r3, #0
 8019916:	d008      	beq.n	801992a <nk_nonblock_begin+0xc2>
 8019918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801991a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801991e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019926:	2b00      	cmp	r3, #0
 8019928:	d101      	bne.n	801992e <nk_nonblock_begin+0xc6>
        return 0;
 801992a:	2300      	movs	r3, #0
 801992c:	e146      	b.n	8019bbc <nk_nonblock_begin+0x354>

    /* popups cannot have popups */
    win = ctx->current;
 801992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019930:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019934:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019938:	647b      	str	r3, [r7, #68]	; 0x44
    panel = win->layout;
 801993a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801993c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019940:	643b      	str	r3, [r7, #64]	; 0x40
    NK_ASSERT(!(panel->type & NK_PANEL_SET_POPUP));
 8019942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 801994a:	2b00      	cmp	r3, #0
 801994c:	d005      	beq.n	801995a <nk_nonblock_begin+0xf2>
 801994e:	4b91      	ldr	r3, [pc, #580]	; (8019b94 <nk_nonblock_begin+0x32c>)
 8019950:	4a8c      	ldr	r2, [pc, #560]	; (8019b84 <nk_nonblock_begin+0x31c>)
 8019952:	217c      	movs	r1, #124	; 0x7c
 8019954:	488c      	ldr	r0, [pc, #560]	; (8019b88 <nk_nonblock_begin+0x320>)
 8019956:	f00b f8cb 	bl	8024af0 <__assert_func>
    (void)panel;
    popup = win->popup.win;
 801995a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801995c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8019960:	657b      	str	r3, [r7, #84]	; 0x54
    if (!popup) {
 8019962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019964:	2b00      	cmp	r3, #0
 8019966:	d11b      	bne.n	80199a0 <nk_nonblock_begin+0x138>
        /* create window for nonblocking popup */
        popup = (struct nk_window*)nk_create_window(ctx);
 8019968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801996a:	f009 ffe3 	bl	8023934 <nk_create_window>
 801996e:	6578      	str	r0, [r7, #84]	; 0x54
        popup->parent = win;
 8019970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019974:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        win->popup.win = popup;
 8019978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801997a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801997c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        win->popup.type = panel_type;
 8019980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019982:	79fa      	ldrb	r2, [r7, #7]
 8019984:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        nk_command_buffer_init(&popup->buffer, &ctx->memory, NK_CLIPPING_ON);
 8019988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801998a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019990:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8019994:	330c      	adds	r3, #12
 8019996:	2201      	movs	r2, #1
 8019998:	4619      	mov	r1, r3
 801999a:	f7f7 fe3b 	bl	8011614 <nk_command_buffer_init>
 801999e:	e03a      	b.n	8019a16 <nk_nonblock_begin+0x1ae>
        /* close the popup if user pressed outside or in the header */
        int pressed, in_body, in_header;
#ifdef NK_BUTTON_TRIGGER_ON_RELEASE
        pressed = nk_input_is_mouse_released(&ctx->input, NK_BUTTON_LEFT);
#else
        pressed = nk_input_is_mouse_pressed(&ctx->input, NK_BUTTON_LEFT);
 80199a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a2:	2100      	movs	r1, #0
 80199a4:	4618      	mov	r0, r3
 80199a6:	f7fb fe27 	bl	80155f8 <nk_input_is_mouse_pressed>
 80199aa:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif
        in_body = nk_input_is_mouse_hovering_rect(&ctx->input, body);
 80199ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ae:	ed97 6a06 	vldr	s12, [r7, #24]
 80199b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80199b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80199ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80199be:	eeb0 0a46 	vmov.f32	s0, s12
 80199c2:	eef0 0a66 	vmov.f32	s1, s13
 80199c6:	eeb0 1a47 	vmov.f32	s2, s14
 80199ca:	eef0 1a67 	vmov.f32	s3, s15
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7fb fd56 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 80199d4:	63b8      	str	r0, [r7, #56]	; 0x38
        in_header = nk_input_is_mouse_hovering_rect(&ctx->input, header);
 80199d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80199dc:	edd7 6a03 	vldr	s13, [r7, #12]
 80199e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80199e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80199e8:	eeb0 0a46 	vmov.f32	s0, s12
 80199ec:	eef0 0a66 	vmov.f32	s1, s13
 80199f0:	eeb0 1a47 	vmov.f32	s2, s14
 80199f4:	eef0 1a67 	vmov.f32	s3, s15
 80199f8:	4618      	mov	r0, r3
 80199fa:	f7fb fd41 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 80199fe:	6378      	str	r0, [r7, #52]	; 0x34
        if (pressed && (!in_body || in_header))
 8019a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d007      	beq.n	8019a16 <nk_nonblock_begin+0x1ae>
 8019a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d002      	beq.n	8019a12 <nk_nonblock_begin+0x1aa>
 8019a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d001      	beq.n	8019a16 <nk_nonblock_begin+0x1ae>
            is_active = nk_false;
 8019a12:	2300      	movs	r3, #0
 8019a14:	653b      	str	r3, [r7, #80]	; 0x50
    }
    win->popup.header = header;
 8019a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a18:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8019a1c:	f107 0308 	add.w	r3, r7, #8
 8019a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (!is_active) {
 8019a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d113      	bne.n	8019a54 <nk_nonblock_begin+0x1ec>
        /* remove read only mode from all parent panels */
        struct nk_panel *root = win->layout;
 8019a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a32:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8019a34:	e009      	b.n	8019a4a <nk_nonblock_begin+0x1e2>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8019a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a38:	685b      	ldr	r3, [r3, #4]
 8019a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a40:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8019a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a44:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019a48:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (root) {
 8019a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d1f2      	bne.n	8019a36 <nk_nonblock_begin+0x1ce>
        }
        return is_active;
 8019a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a52:	e0b3      	b.n	8019bbc <nk_nonblock_begin+0x354>
    }
    popup->bounds = body;
 8019a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a56:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8019a5a:	f107 0318 	add.w	r3, r7, #24
 8019a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    popup->parent = win;
 8019a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    popup->layout = (struct nk_panel*)nk_create_panel(ctx);
 8019a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a6e:	f7fd faff 	bl	8017070 <nk_create_panel>
 8019a72:	4602      	mov	r2, r0
 8019a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    popup->flags = flags;
 8019a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a7e:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_BORDER;
 8019a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a84:	f043 0201 	orr.w	r2, r3, #1
 8019a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a8a:	649a      	str	r2, [r3, #72]	; 0x48
    popup->flags |= NK_WINDOW_DYNAMIC;
 8019a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a96:	649a      	str	r2, [r3, #72]	; 0x48
    popup->seq = ctx->seq;
 8019a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a9a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019a9e:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8019aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019aa4:	601a      	str	r2, [r3, #0]
    win->popup.active = 1;
 8019aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019aa8:	2201      	movs	r2, #1
 8019aaa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NK_ASSERT(popup->layout);
 8019aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d105      	bne.n	8019ac4 <nk_nonblock_begin+0x25c>
 8019ab8:	4b37      	ldr	r3, [pc, #220]	; (8019b98 <nk_nonblock_begin+0x330>)
 8019aba:	4a32      	ldr	r2, [pc, #200]	; (8019b84 <nk_nonblock_begin+0x31c>)
 8019abc:	21a6      	movs	r1, #166	; 0xa6
 8019abe:	4832      	ldr	r0, [pc, #200]	; (8019b88 <nk_nonblock_begin+0x320>)
 8019ac0:	f00b f816 	bl	8024af0 <__assert_func>

    nk_start_popup(ctx, win);
 8019ac4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ac8:	f7f7 f8e4 	bl	8010c94 <nk_start_popup>
    popup->buffer = win->buffer;
 8019acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ad0:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8019ad4:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8019ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019ae0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019ae4:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8019ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019aea:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019aee:	4b2b      	ldr	r3, [pc, #172]	; (8019b9c <nk_nonblock_begin+0x334>)
 8019af0:	ed93 6a00 	vldr	s12, [r3]
 8019af4:	edd3 6a01 	vldr	s13, [r3, #4]
 8019af8:	ed93 7a02 	vldr	s14, [r3, #8]
 8019afc:	edd3 7a03 	vldr	s15, [r3, #12]
 8019b00:	eeb0 0a46 	vmov.f32	s0, s12
 8019b04:	eef0 0a66 	vmov.f32	s1, s13
 8019b08:	eeb0 1a47 	vmov.f32	s2, s14
 8019b0c:	eef0 1a67 	vmov.f32	s3, s15
 8019b10:	4610      	mov	r0, r2
 8019b12:	f7f7 fe51 	bl	80117b8 <nk_push_scissor>
    ctx->current = popup;
 8019b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b18:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b20:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658

    nk_panel_begin(ctx, 0, panel_type);
 8019b24:	79fb      	ldrb	r3, [r7, #7]
 8019b26:	461a      	mov	r2, r3
 8019b28:	2100      	movs	r1, #0
 8019b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019b2c:	f7fd fd0e 	bl	801754c <nk_panel_begin>
    win->buffer = popup->buffer;
 8019b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b34:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8019b38:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8019b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019b48:	e884 0003 	stmia.w	r4, {r0, r1}
    popup->layout->parent = win->layout;
 8019b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019b54:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8019b58:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    popup->layout->offset_x = &popup->scrollbar.x;
 8019b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019b64:	325c      	adds	r2, #92	; 0x5c
 8019b66:	619a      	str	r2, [r3, #24]
    popup->layout->offset_y = &popup->scrollbar.y;
 8019b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019b70:	3260      	adds	r2, #96	; 0x60
 8019b72:	61da      	str	r2, [r3, #28]

    /* set read only mode to all parent panels */
    {struct nk_panel *root;
    root = win->layout;
 8019b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b7a:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8019b7c:	e01a      	b.n	8019bb4 <nk_nonblock_begin+0x34c>
 8019b7e:	bf00      	nop
 8019b80:	08028c4c 	.word	0x08028c4c
 8019b84:	0802a954 	.word	0x0802a954
 8019b88:	08028c50 	.word	0x08028c50
 8019b8c:	08028c74 	.word	0x08028c74
 8019b90:	08028c84 	.word	0x08028c84
 8019b94:	08028cec 	.word	0x08028cec
 8019b98:	08028d10 	.word	0x08028d10
 8019b9c:	0802a934 	.word	0x0802a934
        root->flags |= NK_WINDOW_ROM;
 8019ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ba2:	685b      	ldr	r3, [r3, #4]
 8019ba4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019baa:	605a      	str	r2, [r3, #4]
        root = root->parent;
 8019bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bae:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019bb2:	64bb      	str	r3, [r7, #72]	; 0x48
    while (root) {
 8019bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d1f2      	bne.n	8019ba0 <nk_nonblock_begin+0x338>
    }}
    return is_active;
 8019bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	3758      	adds	r7, #88	; 0x58
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bdb0      	pop	{r4, r5, r7, pc}

08019bc4 <nk_popup_close>:
NK_API void
nk_popup_close(struct nk_context *ctx)
{
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b084      	sub	sp, #16
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	6078      	str	r0, [r7, #4]
    struct nk_window *popup;
    NK_ASSERT(ctx);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d105      	bne.n	8019bde <nk_popup_close+0x1a>
 8019bd2:	4b1d      	ldr	r3, [pc, #116]	; (8019c48 <nk_popup_close+0x84>)
 8019bd4:	4a1d      	ldr	r2, [pc, #116]	; (8019c4c <nk_popup_close+0x88>)
 8019bd6:	21c0      	movs	r1, #192	; 0xc0
 8019bd8:	481d      	ldr	r0, [pc, #116]	; (8019c50 <nk_popup_close+0x8c>)
 8019bda:	f00a ff89 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current) return;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d02c      	beq.n	8019c3e <nk_popup_close+0x7a>
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019bea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d025      	beq.n	8019c3e <nk_popup_close+0x7a>

    popup = ctx->current;
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019bf8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019bfc:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(popup->parent);
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d105      	bne.n	8019c14 <nk_popup_close+0x50>
 8019c08:	4b12      	ldr	r3, [pc, #72]	; (8019c54 <nk_popup_close+0x90>)
 8019c0a:	4a10      	ldr	r2, [pc, #64]	; (8019c4c <nk_popup_close+0x88>)
 8019c0c:	21c4      	movs	r1, #196	; 0xc4
 8019c0e:	4810      	ldr	r0, [pc, #64]	; (8019c50 <nk_popup_close+0x8c>)
 8019c10:	f00a ff6e 	bl	8024af0 <__assert_func>
    NK_ASSERT(popup->layout->type & NK_PANEL_SET_POPUP);
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d105      	bne.n	8019c30 <nk_popup_close+0x6c>
 8019c24:	4b0c      	ldr	r3, [pc, #48]	; (8019c58 <nk_popup_close+0x94>)
 8019c26:	4a09      	ldr	r2, [pc, #36]	; (8019c4c <nk_popup_close+0x88>)
 8019c28:	21c5      	movs	r1, #197	; 0xc5
 8019c2a:	4809      	ldr	r0, [pc, #36]	; (8019c50 <nk_popup_close+0x8c>)
 8019c2c:	f00a ff60 	bl	8024af0 <__assert_func>
    popup->flags |= NK_WINDOW_HIDDEN;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	649a      	str	r2, [r3, #72]	; 0x48
 8019c3c:	e000      	b.n	8019c40 <nk_popup_close+0x7c>
    if (!ctx || !ctx->current) return;
 8019c3e:	bf00      	nop
}
 8019c40:	3710      	adds	r7, #16
 8019c42:	46bd      	mov	sp, r7
 8019c44:	bd80      	pop	{r7, pc}
 8019c46:	bf00      	nop
 8019c48:	08028c4c 	.word	0x08028c4c
 8019c4c:	0802a968 	.word	0x0802a968
 8019c50:	08028c50 	.word	0x08028c50
 8019c54:	08028d20 	.word	0x08028d20
 8019c58:	08028d30 	.word	0x08028d30

08019c5c <nk_popup_end>:
NK_API void
nk_popup_end(struct nk_context *ctx)
{
 8019c5c:	b5b0      	push	{r4, r5, r7, lr}
 8019c5e:	b086      	sub	sp, #24
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
    struct nk_window *win;
    struct nk_window *popup;

    NK_ASSERT(ctx);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d105      	bne.n	8019c76 <nk_popup_end+0x1a>
 8019c6a:	4b5a      	ldr	r3, [pc, #360]	; (8019dd4 <nk_popup_end+0x178>)
 8019c6c:	4a5a      	ldr	r2, [pc, #360]	; (8019dd8 <nk_popup_end+0x17c>)
 8019c6e:	21ce      	movs	r1, #206	; 0xce
 8019c70:	485a      	ldr	r0, [pc, #360]	; (8019ddc <nk_popup_end+0x180>)
 8019c72:	f00a ff3d 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019c7c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d105      	bne.n	8019c90 <nk_popup_end+0x34>
 8019c84:	4b56      	ldr	r3, [pc, #344]	; (8019de0 <nk_popup_end+0x184>)
 8019c86:	4a54      	ldr	r2, [pc, #336]	; (8019dd8 <nk_popup_end+0x17c>)
 8019c88:	21cf      	movs	r1, #207	; 0xcf
 8019c8a:	4854      	ldr	r0, [pc, #336]	; (8019ddc <nk_popup_end+0x180>)
 8019c8c:	f00a ff30 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019c96:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d105      	bne.n	8019cae <nk_popup_end+0x52>
 8019ca2:	4b50      	ldr	r3, [pc, #320]	; (8019de4 <nk_popup_end+0x188>)
 8019ca4:	4a4c      	ldr	r2, [pc, #304]	; (8019dd8 <nk_popup_end+0x17c>)
 8019ca6:	21d0      	movs	r1, #208	; 0xd0
 8019ca8:	484c      	ldr	r0, [pc, #304]	; (8019ddc <nk_popup_end+0x180>)
 8019caa:	f00a ff21 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	f000 8089 	beq.w	8019dc8 <nk_popup_end+0x16c>
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019cbc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	f000 8081 	beq.w	8019dc8 <nk_popup_end+0x16c>
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019ccc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d077      	beq.n	8019dc8 <nk_popup_end+0x16c>
        return;

    popup = ctx->current;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019cde:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8019ce2:	613b      	str	r3, [r7, #16]
    if (!popup->parent) return;
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d06e      	beq.n	8019dcc <nk_popup_end+0x170>
    win = popup->parent;
 8019cee:	693b      	ldr	r3, [r7, #16]
 8019cf0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019cf4:	60fb      	str	r3, [r7, #12]
    if (popup->flags & NK_WINDOW_HIDDEN) {
 8019cf6:	693b      	ldr	r3, [r7, #16]
 8019cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d015      	beq.n	8019d2e <nk_popup_end+0xd2>
        struct nk_panel *root;
        root = win->layout;
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d08:	617b      	str	r3, [r7, #20]
        while (root) {
 8019d0a:	e009      	b.n	8019d20 <nk_popup_end+0xc4>
            root->flags |= NK_WINDOW_REMOVE_ROM;
 8019d0c:	697b      	ldr	r3, [r7, #20]
 8019d0e:	685b      	ldr	r3, [r3, #4]
 8019d10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	605a      	str	r2, [r3, #4]
            root = root->parent;
 8019d18:	697b      	ldr	r3, [r7, #20]
 8019d1a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8019d1e:	617b      	str	r3, [r7, #20]
        while (root) {
 8019d20:	697b      	ldr	r3, [r7, #20]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d1f2      	bne.n	8019d0c <nk_popup_end+0xb0>
        }
        win->popup.active = 0;
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	2200      	movs	r2, #0
 8019d2a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
    nk_push_scissor(&popup->buffer, nk_null_rect);
 8019d2e:	693b      	ldr	r3, [r7, #16]
 8019d30:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019d34:	4b2c      	ldr	r3, [pc, #176]	; (8019de8 <nk_popup_end+0x18c>)
 8019d36:	ed93 6a00 	vldr	s12, [r3]
 8019d3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8019d3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8019d42:	edd3 7a03 	vldr	s15, [r3, #12]
 8019d46:	eeb0 0a46 	vmov.f32	s0, s12
 8019d4a:	eef0 0a66 	vmov.f32	s1, s13
 8019d4e:	eeb0 1a47 	vmov.f32	s2, s14
 8019d52:	eef0 1a67 	vmov.f32	s3, s15
 8019d56:	4610      	mov	r0, r2
 8019d58:	f7f7 fd2e 	bl	80117b8 <nk_push_scissor>
    nk_end(ctx);
 8019d5c:	6878      	ldr	r0, [r7, #4]
 8019d5e:	f00a fca3 	bl	80246a8 <nk_end>

    win->buffer = popup->buffer;
 8019d62:	68fa      	ldr	r2, [r7, #12]
 8019d64:	693b      	ldr	r3, [r7, #16]
 8019d66:	f102 0464 	add.w	r4, r2, #100	; 0x64
 8019d6a:	f103 0564 	add.w	r5, r3, #100	; 0x64
 8019d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019d7a:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_finish_popup(ctx, win);
 8019d7e:	68f9      	ldr	r1, [r7, #12]
 8019d80:	6878      	ldr	r0, [r7, #4]
 8019d82:	f7f6 ffcb 	bl	8010d1c <nk_finish_popup>
    ctx->current = win;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019d8c:	461a      	mov	r2, r3
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    nk_push_scissor(&win->buffer, win->layout->clip);
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019da0:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8019da4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8019da8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8019dac:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8019db0:	eeb0 0a46 	vmov.f32	s0, s12
 8019db4:	eef0 0a66 	vmov.f32	s1, s13
 8019db8:	eeb0 1a47 	vmov.f32	s2, s14
 8019dbc:	eef0 1a67 	vmov.f32	s3, s15
 8019dc0:	4610      	mov	r0, r2
 8019dc2:	f7f7 fcf9 	bl	80117b8 <nk_push_scissor>
 8019dc6:	e002      	b.n	8019dce <nk_popup_end+0x172>
        return;
 8019dc8:	bf00      	nop
 8019dca:	e000      	b.n	8019dce <nk_popup_end+0x172>
    if (!popup->parent) return;
 8019dcc:	bf00      	nop
}
 8019dce:	3718      	adds	r7, #24
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8019dd4:	08028c4c 	.word	0x08028c4c
 8019dd8:	0802a978 	.word	0x0802a978
 8019ddc:	08028c50 	.word	0x08028c50
 8019de0:	08028c74 	.word	0x08028c74
 8019de4:	08028c84 	.word	0x08028c84
 8019de8:	0802a934 	.word	0x0802a934

08019dec <nk_drag_behavior>:
 * ===============================================================*/
NK_LIB void
nk_drag_behavior(nk_flags *state, const struct nk_input *in,
    struct nk_rect drag, struct nk_property_variant *variant,
    float inc_per_pixel)
{
 8019dec:	b5b0      	push	{r4, r5, r7, lr}
 8019dee:	b08c      	sub	sp, #48	; 0x30
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	61f8      	str	r0, [r7, #28]
 8019df4:	61b9      	str	r1, [r7, #24]
 8019df6:	eeb0 6a40 	vmov.f32	s12, s0
 8019dfa:	eef0 6a60 	vmov.f32	s13, s1
 8019dfe:	eeb0 7a41 	vmov.f32	s14, s2
 8019e02:	eef0 7a61 	vmov.f32	s15, s3
 8019e06:	607a      	str	r2, [r7, #4]
 8019e08:	ed87 2a00 	vstr	s4, [r7]
 8019e0c:	ed87 6a02 	vstr	s12, [r7, #8]
 8019e10:	edc7 6a03 	vstr	s13, [r7, #12]
 8019e14:	ed87 7a04 	vstr	s14, [r7, #16]
 8019e18:	edc7 7a05 	vstr	s15, [r7, #20]
    int left_mouse_down = in && in->mouse.buttons[NK_BUTTON_LEFT].down;
 8019e1c:	69bb      	ldr	r3, [r7, #24]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d006      	beq.n	8019e30 <nk_drag_behavior+0x44>
 8019e22:	69bb      	ldr	r3, [r7, #24]
 8019e24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d001      	beq.n	8019e30 <nk_drag_behavior+0x44>
 8019e2c:	2301      	movs	r3, #1
 8019e2e:	e000      	b.n	8019e32 <nk_drag_behavior+0x46>
 8019e30:	2300      	movs	r3, #0
 8019e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    int left_mouse_click_in_cursor = in &&
 8019e34:	69bb      	ldr	r3, [r7, #24]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d019      	beq.n	8019e6e <nk_drag_behavior+0x82>
        nk_input_has_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, drag, nk_true);
 8019e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8019e3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8019e42:	ed97 7a04 	vldr	s14, [r7, #16]
 8019e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e4a:	2201      	movs	r2, #1
 8019e4c:	eeb0 0a46 	vmov.f32	s0, s12
 8019e50:	eef0 0a66 	vmov.f32	s1, s13
 8019e54:	eeb0 1a47 	vmov.f32	s2, s14
 8019e58:	eef0 1a67 	vmov.f32	s3, s15
 8019e5c:	2100      	movs	r1, #0
 8019e5e:	69b8      	ldr	r0, [r7, #24]
 8019e60:	f7fb fa80 	bl	8015364 <nk_input_has_mouse_click_down_in_rect>
 8019e64:	4603      	mov	r3, r0
    int left_mouse_click_in_cursor = in &&
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d001      	beq.n	8019e6e <nk_drag_behavior+0x82>
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	e000      	b.n	8019e70 <nk_drag_behavior+0x84>
 8019e6e:	2300      	movs	r3, #0
 8019e70:	62bb      	str	r3, [r7, #40]	; 0x28

    nk_widget_state_reset(state);
 8019e72:	69fb      	ldr	r3, [r7, #28]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	f003 0302 	and.w	r3, r3, #2
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d003      	beq.n	8019e86 <nk_drag_behavior+0x9a>
 8019e7e:	69fb      	ldr	r3, [r7, #28]
 8019e80:	2206      	movs	r2, #6
 8019e82:	601a      	str	r2, [r3, #0]
 8019e84:	e002      	b.n	8019e8c <nk_drag_behavior+0xa0>
 8019e86:	69fb      	ldr	r3, [r7, #28]
 8019e88:	2204      	movs	r2, #4
 8019e8a:	601a      	str	r2, [r3, #0]
    if (nk_input_is_mouse_hovering_rect(in, drag))
 8019e8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8019e90:	edd7 6a03 	vldr	s13, [r7, #12]
 8019e94:	ed97 7a04 	vldr	s14, [r7, #16]
 8019e98:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e9c:	eeb0 0a46 	vmov.f32	s0, s12
 8019ea0:	eef0 0a66 	vmov.f32	s1, s13
 8019ea4:	eeb0 1a47 	vmov.f32	s2, s14
 8019ea8:	eef0 1a67 	vmov.f32	s3, s15
 8019eac:	69b8      	ldr	r0, [r7, #24]
 8019eae:	f7fb fae7 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d002      	beq.n	8019ebe <nk_drag_behavior+0xd2>
        *state = NK_WIDGET_STATE_HOVERED;
 8019eb8:	69fb      	ldr	r3, [r7, #28]
 8019eba:	2212      	movs	r2, #18
 8019ebc:	601a      	str	r2, [r3, #0]

    if (left_mouse_down && left_mouse_click_in_cursor) {
 8019ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	f000 80b9 	beq.w	801a038 <nk_drag_behavior+0x24c>
 8019ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	f000 80b5 	beq.w	801a038 <nk_drag_behavior+0x24c>
        float delta, pixels;
        pixels = in->mouse.delta.x;
 8019ece:	69bb      	ldr	r3, [r7, #24]
 8019ed0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8019ed4:	627b      	str	r3, [r7, #36]	; 0x24
        delta = pixels * inc_per_pixel;
 8019ed6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019eda:	edd7 7a00 	vldr	s15, [r7]
 8019ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ee2:	edc7 7a08 	vstr	s15, [r7, #32]
        switch (variant->kind) {
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	2b02      	cmp	r3, #2
 8019eec:	d05b      	beq.n	8019fa6 <nk_drag_behavior+0x1ba>
 8019eee:	2b02      	cmp	r3, #2
 8019ef0:	f300 809e 	bgt.w	801a030 <nk_drag_behavior+0x244>
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d002      	beq.n	8019efe <nk_drag_behavior+0x112>
 8019ef8:	2b01      	cmp	r3, #1
 8019efa:	d01a      	beq.n	8019f32 <nk_drag_behavior+0x146>
        default: break;
 8019efc:	e098      	b.n	801a030 <nk_drag_behavior+0x244>
        case NK_PROPERTY_INT:
            variant->value.i = variant->value.i + (int)delta;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	689b      	ldr	r3, [r3, #8]
 8019f02:	edd7 7a08 	vldr	s15, [r7, #32]
 8019f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f0a:	ee17 2a90 	vmov	r2, s15
 8019f0e:	441a      	add	r2, r3
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	609a      	str	r2, [r3, #8]
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	699a      	ldr	r2, [r3, #24]
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	689b      	ldr	r3, [r3, #8]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	bfa8      	it	ge
 8019f20:	461a      	movge	r2, r3
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	691b      	ldr	r3, [r3, #16]
 8019f26:	429a      	cmp	r2, r3
 8019f28:	bfb8      	it	lt
 8019f2a:	461a      	movlt	r2, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	609a      	str	r2, [r3, #8]
            break;
 8019f30:	e07f      	b.n	801a032 <nk_drag_behavior+0x246>
        case NK_PROPERTY_FLOAT:
            variant->value.f = variant->value.f + (float)delta;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	ed93 7a02 	vldr	s14, [r3, #8]
 8019f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8019f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	edc3 7a02 	vstr	s15, [r3, #8]
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8019f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f5a:	d503      	bpl.n	8019f64 <nk_drag_behavior+0x178>
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8019f62:	e002      	b.n	8019f6a <nk_drag_behavior+0x17e>
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	edd3 7a06 	vldr	s15, [r3, #24]
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	ed93 7a04 	vldr	s14, [r3, #16]
 8019f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f78:	d502      	bpl.n	8019f80 <nk_drag_behavior+0x194>
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	691b      	ldr	r3, [r3, #16]
 8019f7e:	e00f      	b.n	8019fa0 <nk_drag_behavior+0x1b4>
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	ed93 7a02 	vldr	s14, [r3, #8]
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	edd3 7a06 	vldr	s15, [r3, #24]
 8019f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f94:	d502      	bpl.n	8019f9c <nk_drag_behavior+0x1b0>
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	689b      	ldr	r3, [r3, #8]
 8019f9a:	e001      	b.n	8019fa0 <nk_drag_behavior+0x1b4>
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	699b      	ldr	r3, [r3, #24]
 8019fa0:	687a      	ldr	r2, [r7, #4]
 8019fa2:	6093      	str	r3, [r2, #8]
            break;
 8019fa4:	e045      	b.n	801a032 <nk_drag_behavior+0x246>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = variant->value.d + (double)delta;
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8019fac:	6a38      	ldr	r0, [r7, #32]
 8019fae:	f7e6 faf3 	bl	8000598 <__aeabi_f2d>
 8019fb2:	4602      	mov	r2, r0
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	4629      	mov	r1, r5
 8019fba:	f7e6 f98f 	bl	80002dc <__adddf3>
 8019fbe:	4602      	mov	r2, r0
 8019fc0:	460b      	mov	r3, r1
 8019fc2:	6879      	ldr	r1, [r7, #4]
 8019fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8019fd4:	f7e6 fdaa 	bl	8000b2c <__aeabi_dcmplt>
 8019fd8:	4603      	mov	r3, r0
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d003      	beq.n	8019fe6 <nk_drag_behavior+0x1fa>
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8019fe4:	e002      	b.n	8019fec <nk_drag_behavior+0x200>
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019ff2:	f7e6 fd9b 	bl	8000b2c <__aeabi_dcmplt>
 8019ff6:	4603      	mov	r3, r0
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d003      	beq.n	801a004 <nk_drag_behavior+0x218>
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a002:	e011      	b.n	801a028 <nk_drag_behavior+0x23c>
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a010:	f7e6 fd8c 	bl	8000b2c <__aeabi_dcmplt>
 801a014:	4603      	mov	r3, r0
 801a016:	2b00      	cmp	r3, #0
 801a018:	d003      	beq.n	801a022 <nk_drag_behavior+0x236>
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a020:	e002      	b.n	801a028 <nk_drag_behavior+0x23c>
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a028:	6879      	ldr	r1, [r7, #4]
 801a02a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            break;
 801a02e:	e000      	b.n	801a032 <nk_drag_behavior+0x246>
        default: break;
 801a030:	bf00      	nop
        }
        *state = NK_WIDGET_STATE_ACTIVE;
 801a032:	69fb      	ldr	r3, [r7, #28]
 801a034:	2222      	movs	r2, #34	; 0x22
 801a036:	601a      	str	r2, [r3, #0]
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, drag))
 801a038:	69fb      	ldr	r3, [r7, #28]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	f003 0310 	and.w	r3, r3, #16
 801a040:	2b00      	cmp	r3, #0
 801a042:	d01c      	beq.n	801a07e <nk_drag_behavior+0x292>
 801a044:	ed97 6a02 	vldr	s12, [r7, #8]
 801a048:	edd7 6a03 	vldr	s13, [r7, #12]
 801a04c:	ed97 7a04 	vldr	s14, [r7, #16]
 801a050:	edd7 7a05 	vldr	s15, [r7, #20]
 801a054:	eeb0 0a46 	vmov.f32	s0, s12
 801a058:	eef0 0a66 	vmov.f32	s1, s13
 801a05c:	eeb0 1a47 	vmov.f32	s2, s14
 801a060:	eef0 1a67 	vmov.f32	s3, s15
 801a064:	69b8      	ldr	r0, [r7, #24]
 801a066:	f7fb fa5d 	bl	8015524 <nk_input_is_mouse_prev_hovering_rect>
 801a06a:	4603      	mov	r3, r0
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d106      	bne.n	801a07e <nk_drag_behavior+0x292>
        *state |= NK_WIDGET_STATE_ENTERED;
 801a070:	69fb      	ldr	r3, [r7, #28]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	f043 0208 	orr.w	r2, r3, #8
 801a078:	69fb      	ldr	r3, [r7, #28]
 801a07a:	601a      	str	r2, [r3, #0]
    else if (nk_input_is_mouse_prev_hovering_rect(in, drag))
        *state |= NK_WIDGET_STATE_LEFT;
}
 801a07c:	e01b      	b.n	801a0b6 <nk_drag_behavior+0x2ca>
    else if (nk_input_is_mouse_prev_hovering_rect(in, drag))
 801a07e:	ed97 6a02 	vldr	s12, [r7, #8]
 801a082:	edd7 6a03 	vldr	s13, [r7, #12]
 801a086:	ed97 7a04 	vldr	s14, [r7, #16]
 801a08a:	edd7 7a05 	vldr	s15, [r7, #20]
 801a08e:	eeb0 0a46 	vmov.f32	s0, s12
 801a092:	eef0 0a66 	vmov.f32	s1, s13
 801a096:	eeb0 1a47 	vmov.f32	s2, s14
 801a09a:	eef0 1a67 	vmov.f32	s3, s15
 801a09e:	69b8      	ldr	r0, [r7, #24]
 801a0a0:	f7fb fa40 	bl	8015524 <nk_input_is_mouse_prev_hovering_rect>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d005      	beq.n	801a0b6 <nk_drag_behavior+0x2ca>
        *state |= NK_WIDGET_STATE_LEFT;
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a0b2:	69fb      	ldr	r3, [r7, #28]
 801a0b4:	601a      	str	r2, [r3, #0]
}
 801a0b6:	bf00      	nop
 801a0b8:	3730      	adds	r7, #48	; 0x30
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bdb0      	pop	{r4, r5, r7, pc}

0801a0be <nk_property_behavior>:
NK_LIB void
nk_property_behavior(nk_flags *ws, const struct nk_input *in,
    struct nk_rect property,  struct nk_rect label, struct nk_rect edit,
    struct nk_rect empty, int *state, struct nk_property_variant *variant,
    float inc_per_pixel)
{
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b094      	sub	sp, #80	; 0x50
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a0c6:	64b9      	str	r1, [r7, #72]	; 0x48
 801a0c8:	607a      	str	r2, [r7, #4]
 801a0ca:	603b      	str	r3, [r7, #0]
 801a0cc:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 801a0d0:	edc7 0a0f 	vstr	s1, [r7, #60]	; 0x3c
 801a0d4:	ed87 1a10 	vstr	s2, [r7, #64]	; 0x40
 801a0d8:	edc7 1a11 	vstr	s3, [r7, #68]	; 0x44
 801a0dc:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 801a0e0:	edc7 2a0b 	vstr	s5, [r7, #44]	; 0x2c
 801a0e4:	ed87 3a0c 	vstr	s6, [r7, #48]	; 0x30
 801a0e8:	edc7 3a0d 	vstr	s7, [r7, #52]	; 0x34
 801a0ec:	ed87 4a06 	vstr	s8, [r7, #24]
 801a0f0:	edc7 4a07 	vstr	s9, [r7, #28]
 801a0f4:	ed87 5a08 	vstr	s10, [r7, #32]
 801a0f8:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 801a0fc:	ed87 6a02 	vstr	s12, [r7, #8]
 801a100:	edc7 6a03 	vstr	s13, [r7, #12]
 801a104:	ed87 7a04 	vstr	s14, [r7, #16]
 801a108:	edc7 7a05 	vstr	s15, [r7, #20]
    nk_widget_state_reset(ws);
 801a10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	f003 0302 	and.w	r3, r3, #2
 801a114:	2b00      	cmp	r3, #0
 801a116:	d003      	beq.n	801a120 <nk_property_behavior+0x62>
 801a118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a11a:	2206      	movs	r2, #6
 801a11c:	601a      	str	r2, [r3, #0]
 801a11e:	e002      	b.n	801a126 <nk_property_behavior+0x68>
 801a120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a122:	2204      	movs	r2, #4
 801a124:	601a      	str	r2, [r3, #0]
    if (in && *state == NK_PROPERTY_DEFAULT) {
 801a126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d056      	beq.n	801a1da <nk_property_behavior+0x11c>
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d152      	bne.n	801a1da <nk_property_behavior+0x11c>
        if (nk_button_behavior(ws, edit, in, NK_BUTTON_DEFAULT))
 801a134:	ed97 6a06 	vldr	s12, [r7, #24]
 801a138:	edd7 6a07 	vldr	s13, [r7, #28]
 801a13c:	ed97 7a08 	vldr	s14, [r7, #32]
 801a140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801a144:	2200      	movs	r2, #0
 801a146:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a148:	eeb0 0a46 	vmov.f32	s0, s12
 801a14c:	eef0 0a66 	vmov.f32	s1, s13
 801a150:	eeb0 1a47 	vmov.f32	s2, s14
 801a154:	eef0 1a67 	vmov.f32	s3, s15
 801a158:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a15a:	f7f4 ff87 	bl	800f06c <nk_button_behavior>
 801a15e:	4603      	mov	r3, r0
 801a160:	2b00      	cmp	r3, #0
 801a162:	d003      	beq.n	801a16c <nk_property_behavior+0xae>
            *state = NK_PROPERTY_EDIT;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	2201      	movs	r2, #1
 801a168:	601a      	str	r2, [r3, #0]
 801a16a:	e036      	b.n	801a1da <nk_property_behavior+0x11c>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, label, nk_true))
 801a16c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 801a170:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 801a174:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a178:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801a17c:	2201      	movs	r2, #1
 801a17e:	eeb0 0a46 	vmov.f32	s0, s12
 801a182:	eef0 0a66 	vmov.f32	s1, s13
 801a186:	eeb0 1a47 	vmov.f32	s2, s14
 801a18a:	eef0 1a67 	vmov.f32	s3, s15
 801a18e:	2100      	movs	r1, #0
 801a190:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a192:	f7fb f92e 	bl	80153f2 <nk_input_is_mouse_click_down_in_rect>
 801a196:	4603      	mov	r3, r0
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d003      	beq.n	801a1a4 <nk_property_behavior+0xe6>
            *state = NK_PROPERTY_DRAG;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2202      	movs	r2, #2
 801a1a0:	601a      	str	r2, [r3, #0]
 801a1a2:	e01a      	b.n	801a1da <nk_property_behavior+0x11c>
        else if (nk_input_is_mouse_click_down_in_rect(in, NK_BUTTON_LEFT, empty, nk_true))
 801a1a4:	ed97 6a02 	vldr	s12, [r7, #8]
 801a1a8:	edd7 6a03 	vldr	s13, [r7, #12]
 801a1ac:	ed97 7a04 	vldr	s14, [r7, #16]
 801a1b0:	edd7 7a05 	vldr	s15, [r7, #20]
 801a1b4:	2201      	movs	r2, #1
 801a1b6:	eeb0 0a46 	vmov.f32	s0, s12
 801a1ba:	eef0 0a66 	vmov.f32	s1, s13
 801a1be:	eeb0 1a47 	vmov.f32	s2, s14
 801a1c2:	eef0 1a67 	vmov.f32	s3, s15
 801a1c6:	2100      	movs	r1, #0
 801a1c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801a1ca:	f7fb f912 	bl	80153f2 <nk_input_is_mouse_click_down_in_rect>
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d002      	beq.n	801a1da <nk_property_behavior+0x11c>
            *state = NK_PROPERTY_DRAG;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	2202      	movs	r2, #2
 801a1d8:	601a      	str	r2, [r3, #0]
    }
    if (*state == NK_PROPERTY_DRAG) {
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	2b02      	cmp	r3, #2
 801a1e0:	d11f      	bne.n	801a222 <nk_property_behavior+0x164>
        nk_drag_behavior(ws, in, property, variant, inc_per_pixel);
 801a1e2:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 801a1e6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 801a1ea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801a1ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a1f2:	ed97 2a16 	vldr	s4, [r7, #88]	; 0x58
 801a1f6:	683a      	ldr	r2, [r7, #0]
 801a1f8:	eeb0 0a46 	vmov.f32	s0, s12
 801a1fc:	eef0 0a66 	vmov.f32	s1, s13
 801a200:	eeb0 1a47 	vmov.f32	s2, s14
 801a204:	eef0 1a67 	vmov.f32	s3, s15
 801a208:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a20a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a20c:	f7ff fdee 	bl	8019dec <nk_drag_behavior>
        if (!(*ws & NK_WIDGET_STATE_ACTIVED)) *state = NK_PROPERTY_DEFAULT;
 801a210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	f003 0320 	and.w	r3, r3, #32
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d102      	bne.n	801a222 <nk_property_behavior+0x164>
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2200      	movs	r2, #0
 801a220:	601a      	str	r2, [r3, #0]
    }
}
 801a222:	bf00      	nop
 801a224:	3750      	adds	r7, #80	; 0x50
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
	...

0801a22c <nk_draw_property>:
NK_LIB void
nk_draw_property(struct nk_command_buffer *out, const struct nk_style_property *style,
    const struct nk_rect *bounds, const struct nk_rect *label, nk_flags state,
    const char *name, int len, const struct nk_user_font *font)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b08c      	sub	sp, #48	; 0x30
 801a230:	af02      	add	r7, sp, #8
 801a232:	60f8      	str	r0, [r7, #12]
 801a234:	60b9      	str	r1, [r7, #8]
 801a236:	607a      	str	r2, [r7, #4]
 801a238:	603b      	str	r3, [r7, #0]
    struct nk_text text;
    const struct nk_style_item *background;

    /* select correct background and text color */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 801a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23c:	f003 0320 	and.w	r3, r3, #32
 801a240:	2b00      	cmp	r3, #0
 801a242:	d006      	beq.n	801a252 <nk_draw_property+0x26>
        background = &style->active;
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	3338      	adds	r3, #56	; 0x38
 801a248:	627b      	str	r3, [r7, #36]	; 0x24
        text.text = style->label_active;
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a24e:	623b      	str	r3, [r7, #32]
 801a250:	e010      	b.n	801a274 <nk_draw_property+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 801a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a254:	f003 0310 	and.w	r3, r3, #16
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d006      	beq.n	801a26a <nk_draw_property+0x3e>
        background = &style->hover;
 801a25c:	68bb      	ldr	r3, [r7, #8]
 801a25e:	331c      	adds	r3, #28
 801a260:	627b      	str	r3, [r7, #36]	; 0x24
        text.text = style->label_hover;
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a266:	623b      	str	r3, [r7, #32]
 801a268:	e004      	b.n	801a274 <nk_draw_property+0x48>
    } else {
        background = &style->normal;
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	627b      	str	r3, [r7, #36]	; 0x24
        text.text = style->label_normal;
 801a26e:	68bb      	ldr	r3, [r7, #8]
 801a270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a272:	623b      	str	r3, [r7, #32]
    }

    /* draw background */
    switch(background->type) {
 801a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a276:	781b      	ldrb	r3, [r3, #0]
 801a278:	2b02      	cmp	r3, #2
 801a27a:	d028      	beq.n	801a2ce <nk_draw_property+0xa2>
 801a27c:	2b02      	cmp	r3, #2
 801a27e:	f300 8086 	bgt.w	801a38e <nk_draw_property+0x162>
 801a282:	2b00      	cmp	r3, #0
 801a284:	d044      	beq.n	801a310 <nk_draw_property+0xe4>
 801a286:	2b01      	cmp	r3, #1
 801a288:	f040 8081 	bne.w	801a38e <nk_draw_property+0x162>
        case NK_STYLE_ITEM_IMAGE:
            text.background = nk_rgba(0, 0, 0, 0);
 801a28c:	2300      	movs	r3, #0
 801a28e:	2200      	movs	r2, #0
 801a290:	2100      	movs	r1, #0
 801a292:	2000      	movs	r0, #0
 801a294:	f7f5 fd02 	bl	800fc9c <nk_rgba>
 801a298:	4603      	mov	r3, r0
 801a29a:	61fb      	str	r3, [r7, #28]
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a29e:	1d19      	adds	r1, r3, #4
 801a2a0:	4a52      	ldr	r2, [pc, #328]	; (801a3ec <nk_draw_property+0x1c0>)
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	ed93 6a00 	vldr	s12, [r3]
 801a2a8:	edd3 6a01 	vldr	s13, [r3, #4]
 801a2ac:	ed93 7a02 	vldr	s14, [r3, #8]
 801a2b0:	edd3 7a03 	vldr	s15, [r3, #12]
 801a2b4:	6812      	ldr	r2, [r2, #0]
 801a2b6:	eeb0 0a46 	vmov.f32	s0, s12
 801a2ba:	eef0 0a66 	vmov.f32	s1, s13
 801a2be:	eeb0 1a47 	vmov.f32	s2, s14
 801a2c2:	eef0 1a67 	vmov.f32	s3, s15
 801a2c6:	68f8      	ldr	r0, [r7, #12]
 801a2c8:	f7f7 ff50 	bl	801216c <nk_draw_image>
            break;
 801a2cc:	e05f      	b.n	801a38e <nk_draw_property+0x162>
        case NK_STYLE_ITEM_NINE_SLICE:
            text.background = nk_rgba(0, 0, 0, 0);
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	2100      	movs	r1, #0
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	f7f5 fce1 	bl	800fc9c <nk_rgba>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	61fb      	str	r3, [r7, #28]
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2e0:	1d19      	adds	r1, r3, #4
 801a2e2:	4a42      	ldr	r2, [pc, #264]	; (801a3ec <nk_draw_property+0x1c0>)
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	ed93 6a00 	vldr	s12, [r3]
 801a2ea:	edd3 6a01 	vldr	s13, [r3, #4]
 801a2ee:	ed93 7a02 	vldr	s14, [r3, #8]
 801a2f2:	edd3 7a03 	vldr	s15, [r3, #12]
 801a2f6:	6812      	ldr	r2, [r2, #0]
 801a2f8:	eeb0 0a46 	vmov.f32	s0, s12
 801a2fc:	eef0 0a66 	vmov.f32	s1, s13
 801a300:	eeb0 1a47 	vmov.f32	s2, s14
 801a304:	eef0 1a67 	vmov.f32	s3, s15
 801a308:	68f8      	ldr	r0, [r7, #12]
 801a30a:	f7f8 f821 	bl	8012350 <nk_draw_nine_slice>
            break;
 801a30e:	e03e      	b.n	801a38e <nk_draw_property+0x162>
        case NK_STYLE_ITEM_COLOR:
            text.background = background->data.color;
 801a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a312:	685b      	ldr	r3, [r3, #4]
 801a314:	61fb      	str	r3, [r7, #28]
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 801a316:	68bb      	ldr	r3, [r7, #8]
 801a318:	edd3 5a1b 	vldr	s11, [r3, #108]	; 0x6c
 801a31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	ed93 6a00 	vldr	s12, [r3]
 801a324:	edd3 6a01 	vldr	s13, [r3, #4]
 801a328:	ed93 7a02 	vldr	s14, [r3, #8]
 801a32c:	edd3 7a03 	vldr	s15, [r3, #12]
 801a330:	6851      	ldr	r1, [r2, #4]
 801a332:	eeb0 2a65 	vmov.f32	s4, s11
 801a336:	eeb0 0a46 	vmov.f32	s0, s12
 801a33a:	eef0 0a66 	vmov.f32	s1, s13
 801a33e:	eeb0 1a47 	vmov.f32	s2, s14
 801a342:	eef0 1a67 	vmov.f32	s3, s15
 801a346:	68f8      	ldr	r0, [r7, #12]
 801a348:	f7f7 fbb6 	bl	8011ab8 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, background->data.color);
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	edd3 5a1b 	vldr	s11, [r3, #108]	; 0x6c
 801a352:	68bb      	ldr	r3, [r7, #8]
 801a354:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 801a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	ed93 6a00 	vldr	s12, [r3]
 801a360:	edd3 6a01 	vldr	s13, [r3, #4]
 801a364:	ed93 7a02 	vldr	s14, [r3, #8]
 801a368:	edd3 7a03 	vldr	s15, [r3, #12]
 801a36c:	6851      	ldr	r1, [r2, #4]
 801a36e:	eef0 2a45 	vmov.f32	s5, s10
 801a372:	eeb0 2a65 	vmov.f32	s4, s11
 801a376:	eeb0 0a46 	vmov.f32	s0, s12
 801a37a:	eef0 0a66 	vmov.f32	s1, s13
 801a37e:	eeb0 1a47 	vmov.f32	s2, s14
 801a382:	eef0 1a67 	vmov.f32	s3, s15
 801a386:	68f8      	ldr	r0, [r7, #12]
 801a388:	f7f7 fa8e 	bl	80118a8 <nk_stroke_rect>
            break;
 801a38c:	bf00      	nop
    }

    /* draw label */
    text.padding = nk_vec2(0,0);
 801a38e:	eddf 0a18 	vldr	s1, [pc, #96]	; 801a3f0 <nk_draw_property+0x1c4>
 801a392:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801a3f0 <nk_draw_property+0x1c4>
 801a396:	f7fc fb07 	bl	80169a8 <nk_vec2>
 801a39a:	eeb0 7a40 	vmov.f32	s14, s0
 801a39e:	eef0 7a60 	vmov.f32	s15, s1
 801a3a2:	ed87 7a05 	vstr	s14, [r7, #20]
 801a3a6:	edc7 7a06 	vstr	s15, [r7, #24]
    nk_widget_text(out, *label, name, len, &text, NK_TEXT_CENTERED, font);
 801a3aa:	f107 0214 	add.w	r2, r7, #20
 801a3ae:	683b      	ldr	r3, [r7, #0]
 801a3b0:	ed93 6a00 	vldr	s12, [r3]
 801a3b4:	edd3 6a01 	vldr	s13, [r3, #4]
 801a3b8:	ed93 7a02 	vldr	s14, [r3, #8]
 801a3bc:	edd3 7a03 	vldr	s15, [r3, #12]
 801a3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3c2:	9301      	str	r3, [sp, #4]
 801a3c4:	2312      	movs	r3, #18
 801a3c6:	9300      	str	r3, [sp, #0]
 801a3c8:	4613      	mov	r3, r2
 801a3ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a3cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a3ce:	eeb0 0a46 	vmov.f32	s0, s12
 801a3d2:	eef0 0a66 	vmov.f32	s1, s13
 801a3d6:	eeb0 1a47 	vmov.f32	s2, s14
 801a3da:	eef0 1a67 	vmov.f32	s3, s15
 801a3de:	68f8      	ldr	r0, [r7, #12]
 801a3e0:	f005 f8d0 	bl	801f584 <nk_widget_text>
}
 801a3e4:	bf00      	nop
 801a3e6:	3728      	adds	r7, #40	; 0x28
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}
 801a3ec:	0802a988 	.word	0x0802a988
 801a3f0:	00000000 	.word	0x00000000

0801a3f4 <nk_do_property>:
    int *state, int *cursor, int *select_begin, int *select_end,
    const struct nk_style_property *style,
    enum nk_property_filter filter, struct nk_input *in,
    const struct nk_user_font *font, struct nk_text_edit *text_edit,
    enum nk_button_behavior behavior)
{
 801a3f4:	b580      	push	{r7, lr}
 801a3f6:	b0bc      	sub	sp, #240	; 0xf0
 801a3f8:	af04      	add	r7, sp, #16
 801a3fa:	6278      	str	r0, [r7, #36]	; 0x24
 801a3fc:	6239      	str	r1, [r7, #32]
 801a3fe:	eeb0 6a40 	vmov.f32	s12, s0
 801a402:	eef0 6a60 	vmov.f32	s13, s1
 801a406:	eeb0 7a41 	vmov.f32	s14, s2
 801a40a:	eef0 7a61 	vmov.f32	s15, s3
 801a40e:	60fa      	str	r2, [r7, #12]
 801a410:	60bb      	str	r3, [r7, #8]
 801a412:	ed87 2a01 	vstr	s4, [r7, #4]
 801a416:	ed87 6a04 	vstr	s12, [r7, #16]
 801a41a:	edc7 6a05 	vstr	s13, [r7, #20]
 801a41e:	ed87 7a06 	vstr	s14, [r7, #24]
 801a422:	edc7 7a07 	vstr	s15, [r7, #28]
    const nk_plugin_filter filters[] = {
 801a426:	4ab0      	ldr	r2, [pc, #704]	; (801a6e8 <nk_do_property+0x2f4>)
 801a428:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801a42c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a430:	e883 0003 	stmia.w	r3, {r0, r1}
        nk_filter_decimal,
        nk_filter_float
    };
    nk_bool active, old;
    int num_len = 0, name_len;
 801a434:	2300      	movs	r3, #0
 801a436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    char string[NK_MAX_NUMBER_BUFFER];
    float size;

    char *dst = 0;
 801a43a:	2300      	movs	r3, #0
 801a43c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    struct nk_rect label;
    struct nk_rect edit;
    struct nk_rect empty;

    /* left decrement button */
    left.h = font->height/2;
 801a440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a444:	ed93 7a01 	vldr	s14, [r3, #4]
 801a448:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a44c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a450:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    left.w = left.h;
 801a454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a456:	677b      	str	r3, [r7, #116]	; 0x74
    left.x = property.x + style->border + style->padding.x;
 801a458:	ed97 7a04 	vldr	s14, [r7, #16]
 801a45c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a460:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a464:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a46c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a470:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a474:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    left.y = property.y + style->border + property.h/2.0f - left.h/2;
 801a478:	ed97 7a05 	vldr	s14, [r7, #20]
 801a47c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a480:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a484:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a488:	edd7 6a07 	vldr	s13, [r7, #28]
 801a48c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801a490:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a494:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a498:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 801a49c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801a4a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a4a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a4a8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    /* text label */
    name_len = nk_strlen(name);
 801a4ac:	68f8      	ldr	r0, [r7, #12]
 801a4ae:	f008 f913 	bl	80226d8 <nk_strlen>
 801a4b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    size = font->width(font->userdata, font->height, name, name_len);
 801a4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a4ba:	689b      	ldr	r3, [r3, #8]
 801a4bc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a4c0:	edd2 7a01 	vldr	s15, [r2, #4]
 801a4c4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801a4c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801a4cc:	68f9      	ldr	r1, [r7, #12]
 801a4ce:	eeb0 0a67 	vmov.f32	s0, s15
 801a4d2:	6800      	ldr	r0, [r0, #0]
 801a4d4:	4798      	blx	r3
 801a4d6:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
    label.x = left.x + left.w + style->padding.x;
 801a4da:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801a4de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801a4e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a4ea:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a4f2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    label.w = (float)size + 2 * style->padding.x;
 801a4f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a4fa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a4fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801a502:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 801a506:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a50a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    label.y = property.y + style->border + style->padding.y;
 801a50e:	ed97 7a05 	vldr	s14, [r7, #20]
 801a512:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a516:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a51a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a51e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a522:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 801a526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a52a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.h = property.h - (2 * style->border + 2 * style->padding.y);
 801a52e:	ed97 7a07 	vldr	s14, [r7, #28]
 801a532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a536:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a53a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801a53e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a542:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 801a546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a552:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    /* right increment button */
    right.y = left.y;
 801a556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a558:	663b      	str	r3, [r7, #96]	; 0x60
    right.w = left.w;
 801a55a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a55c:	667b      	str	r3, [r7, #100]	; 0x64
    right.h = left.h;
 801a55e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a560:	66bb      	str	r3, [r7, #104]	; 0x68
    right.x = property.x + property.w - (right.w + style->padding.x);
 801a562:	ed97 7a04 	vldr	s14, [r7, #16]
 801a566:	edd7 7a06 	vldr	s15, [r7, #24]
 801a56a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a56e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801a572:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a576:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a57a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a57e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a582:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    /* edit */
    if (*state == NK_PROPERTY_EDIT) {
 801a586:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	2b01      	cmp	r3, #1
 801a58e:	d126      	bne.n	801a5de <nk_do_property+0x1ea>
        size = font->width(font->userdata, font->height, buffer, *len);
 801a590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a594:	689b      	ldr	r3, [r3, #8]
 801a596:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a59a:	edd2 7a01 	vldr	s15, [r2, #4]
 801a59e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a5a2:	6812      	ldr	r2, [r2, #0]
 801a5a4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801a5a8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801a5ac:	eeb0 0a67 	vmov.f32	s0, s15
 801a5b0:	6800      	ldr	r0, [r0, #0]
 801a5b2:	4798      	blx	r3
 801a5b4:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
        size += style->edit.cursor_size;
 801a5b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a5bc:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 801a5c0:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 801a5c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5c8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
        length = len;
 801a5cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a5d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        dst = buffer;
 801a5d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801a5d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801a5dc:	e063      	b.n	801a6a6 <nk_do_property+0x2b2>
    } else {
        switch (variant->kind) {
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	781b      	ldrb	r3, [r3, #0]
 801a5e2:	2b02      	cmp	r3, #2
 801a5e4:	d02d      	beq.n	801a642 <nk_do_property+0x24e>
 801a5e6:	2b02      	cmp	r3, #2
 801a5e8:	dc41      	bgt.n	801a66e <nk_do_property+0x27a>
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d002      	beq.n	801a5f4 <nk_do_property+0x200>
 801a5ee:	2b01      	cmp	r3, #1
 801a5f0:	d011      	beq.n	801a616 <nk_do_property+0x222>
        default: break;
 801a5f2:	e03c      	b.n	801a66e <nk_do_property+0x27a>
        case NK_PROPERTY_INT:
            nk_itoa(string, variant->value.i);
 801a5f4:	68bb      	ldr	r3, [r7, #8]
 801a5f6:	689a      	ldr	r2, [r3, #8]
 801a5f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a5fc:	4611      	mov	r1, r2
 801a5fe:	4618      	mov	r0, r3
 801a600:	f008 faf8 	bl	8022bf4 <nk_itoa>
            num_len = nk_strlen(string);
 801a604:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a608:	4618      	mov	r0, r3
 801a60a:	f008 f865 	bl	80226d8 <nk_strlen>
 801a60e:	4603      	mov	r3, r0
 801a610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            break;
 801a614:	e02c      	b.n	801a670 <nk_do_property+0x27c>
        case NK_PROPERTY_FLOAT:
            NK_DTOA(string, (double)variant->value.f);
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	689b      	ldr	r3, [r3, #8]
 801a61a:	4618      	mov	r0, r3
 801a61c:	f7e5 ffbc 	bl	8000598 <__aeabi_f2d>
 801a620:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a624:	ec41 0b10 	vmov	d0, r0, r1
 801a628:	4618      	mov	r0, r3
 801a62a:	f008 fb45 	bl	8022cb8 <nk_dtoa>
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
 801a62e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a632:	2102      	movs	r1, #2
 801a634:	4618      	mov	r0, r3
 801a636:	f008 fa73 	bl	8022b20 <nk_string_float_limit>
 801a63a:	4603      	mov	r3, r0
 801a63c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            break;
 801a640:	e016      	b.n	801a670 <nk_do_property+0x27c>
        case NK_PROPERTY_DOUBLE:
            NK_DTOA(string, variant->value.d);
 801a642:	68bb      	ldr	r3, [r7, #8]
 801a644:	ed93 7b02 	vldr	d7, [r3, #8]
 801a648:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a64c:	eeb0 0a47 	vmov.f32	s0, s14
 801a650:	eef0 0a67 	vmov.f32	s1, s15
 801a654:	4618      	mov	r0, r3
 801a656:	f008 fb2f 	bl	8022cb8 <nk_dtoa>
            num_len = nk_string_float_limit(string, NK_MAX_FLOAT_PRECISION);
 801a65a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a65e:	2102      	movs	r1, #2
 801a660:	4618      	mov	r0, r3
 801a662:	f008 fa5d 	bl	8022b20 <nk_string_float_limit>
 801a666:	4603      	mov	r3, r0
 801a668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            break;
 801a66c:	e000      	b.n	801a670 <nk_do_property+0x27c>
        default: break;
 801a66e:	bf00      	nop
        }
        size = font->width(font->userdata, font->height, string, num_len);
 801a670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801a674:	689b      	ldr	r3, [r3, #8]
 801a676:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a67a:	edd2 7a01 	vldr	s15, [r2, #4]
 801a67e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801a682:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801a686:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801a68a:	eeb0 0a67 	vmov.f32	s0, s15
 801a68e:	6800      	ldr	r0, [r0, #0]
 801a690:	4798      	blx	r3
 801a692:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
        dst = string;
 801a696:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801a69a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        length = &num_len;
 801a69e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a6a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    }

    edit.w =  (float)size + 2 * style->padding.x;
 801a6a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a6aa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a6ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801a6b2:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 801a6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a6ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    edit.w = NK_MIN(edit.w, right.x - (label.x + label.w));
 801a6be:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801a6c2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801a6c6:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 801a6ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a6ce:	ee76 7a27 	vadd.f32	s15, s12, s15
 801a6d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801a6d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6de:	d505      	bpl.n	801a6ec <nk_do_property+0x2f8>
 801a6e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801a6e4:	e00c      	b.n	801a700 <nk_do_property+0x30c>
 801a6e6:	bf00      	nop
 801a6e8:	08028d5c 	.word	0x08028d5c
 801a6ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801a6f0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a6f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a6fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a700:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    edit.x = right.x - (edit.w + style->padding.x);
 801a704:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801a708:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801a70c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a710:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801a714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a718:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a71c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    edit.y = property.y + style->border;
 801a720:	ed97 7a05 	vldr	s14, [r7, #20]
 801a724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a728:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a72c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a730:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    edit.h = property.h - (2 * style->border);
 801a734:	ed97 7a07 	vldr	s14, [r7, #28]
 801a738:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a73c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801a740:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a744:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a748:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* empty left space activator */
    empty.w = edit.x - (label.x + label.w);
 801a74c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801a750:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801a754:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801a75c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a760:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    empty.x = label.x + label.w;
 801a764:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801a768:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801a76c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a770:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    empty.y = property.y;
 801a774:	697b      	ldr	r3, [r7, #20]
 801a776:	633b      	str	r3, [r7, #48]	; 0x30
    empty.h = property.h;
 801a778:	69fb      	ldr	r3, [r7, #28]
 801a77a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* update property */
    old = (*state == NK_PROPERTY_EDIT);
 801a77c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	2b01      	cmp	r3, #1
 801a784:	bf0c      	ite	eq
 801a786:	2301      	moveq	r3, #1
 801a788:	2300      	movne	r3, #0
 801a78a:	b2db      	uxtb	r3, r3
 801a78c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    nk_property_behavior(ws, in, property, label, edit, empty, state, variant, inc_per_pixel);
 801a790:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 801a794:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 801a798:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801a79c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801a7a0:	ed97 4a0f 	vldr	s8, [r7, #60]	; 0x3c
 801a7a4:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 801a7a8:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 801a7ac:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 801a7b0:	ed97 2a13 	vldr	s4, [r7, #76]	; 0x4c
 801a7b4:	edd7 2a14 	vldr	s5, [r7, #80]	; 0x50
 801a7b8:	ed97 3a15 	vldr	s6, [r7, #84]	; 0x54
 801a7bc:	edd7 3a16 	vldr	s7, [r7, #88]	; 0x58
 801a7c0:	ed97 0a04 	vldr	s0, [r7, #16]
 801a7c4:	edd7 0a05 	vldr	s1, [r7, #20]
 801a7c8:	ed97 1a06 	vldr	s2, [r7, #24]
 801a7cc:	edd7 1a07 	vldr	s3, [r7, #28]
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	9300      	str	r3, [sp, #0]
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801a7da:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801a7de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a7e0:	f7ff fc6d 	bl	801a0be <nk_property_behavior>

    /* draw property */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801a7e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a7e8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d009      	beq.n	801a804 <nk_do_property+0x410>
 801a7f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a7f4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 801a7f8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a7fc:	f8d2 1458 	ldr.w	r1, [r2, #1112]	; 0x458
 801a800:	6a38      	ldr	r0, [r7, #32]
 801a802:	4798      	blx	r3
    nk_draw_property(out, style, &property, &label, *ws, name, name_len, font);
 801a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801a80c:	f107 0110 	add.w	r1, r7, #16
 801a810:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a814:	9203      	str	r2, [sp, #12]
 801a816:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801a81a:	9202      	str	r2, [sp, #8]
 801a81c:	68fa      	ldr	r2, [r7, #12]
 801a81e:	9201      	str	r2, [sp, #4]
 801a820:	9300      	str	r3, [sp, #0]
 801a822:	4603      	mov	r3, r0
 801a824:	460a      	mov	r2, r1
 801a826:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801a82a:	6a38      	ldr	r0, [r7, #32]
 801a82c:	f7ff fcfe 	bl	801a22c <nk_draw_property>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801a830:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a834:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d009      	beq.n	801a850 <nk_do_property+0x45c>
 801a83c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a840:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 801a844:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801a848:	f8d2 1458 	ldr.w	r1, [r2, #1112]	; 0x458
 801a84c:	6a38      	ldr	r0, [r7, #32]
 801a84e:	4798      	blx	r3

    /* execute right button  */
    if (nk_do_button_symbol(ws, out, left, style->sym_left, behavior, &style->dec_button, in, font)) {
 801a850:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a854:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 801a858:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801a85c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801a860:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 801a864:	ed97 6a1b 	vldr	s12, [r7, #108]	; 0x6c
 801a868:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 801a86c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801a870:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801a874:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a878:	9202      	str	r2, [sp, #8]
 801a87a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801a87e:	9201      	str	r2, [sp, #4]
 801a880:	9300      	str	r3, [sp, #0]
 801a882:	4603      	mov	r3, r0
 801a884:	460a      	mov	r2, r1
 801a886:	eeb0 0a46 	vmov.f32	s0, s12
 801a88a:	eef0 0a66 	vmov.f32	s1, s13
 801a88e:	eeb0 1a47 	vmov.f32	s2, s14
 801a892:	eef0 1a67 	vmov.f32	s3, s15
 801a896:	6a39      	ldr	r1, [r7, #32]
 801a898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a89a:	f7f4 ff79 	bl	800f790 <nk_do_button_symbol>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	f000 80bd 	beq.w	801aa20 <nk_do_property+0x62c>
        switch (variant->kind) {
 801a8a6:	68bb      	ldr	r3, [r7, #8]
 801a8a8:	781b      	ldrb	r3, [r3, #0]
 801a8aa:	2b02      	cmp	r3, #2
 801a8ac:	d061      	beq.n	801a972 <nk_do_property+0x57e>
 801a8ae:	2b02      	cmp	r3, #2
 801a8b0:	f300 80b5 	bgt.w	801aa1e <nk_do_property+0x62a>
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d002      	beq.n	801a8be <nk_do_property+0x4ca>
 801a8b8:	2b01      	cmp	r3, #1
 801a8ba:	d012      	beq.n	801a8e2 <nk_do_property+0x4ee>
        default: break;
 801a8bc:	e0af      	b.n	801aa1e <nk_do_property+0x62a>
        case NK_PROPERTY_INT:
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i - variant->step.i, variant->max_value.i); break;
 801a8be:	68bb      	ldr	r3, [r7, #8]
 801a8c0:	699a      	ldr	r2, [r3, #24]
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	6899      	ldr	r1, [r3, #8]
 801a8c6:	68bb      	ldr	r3, [r7, #8]
 801a8c8:	6a1b      	ldr	r3, [r3, #32]
 801a8ca:	1acb      	subs	r3, r1, r3
 801a8cc:	429a      	cmp	r2, r3
 801a8ce:	bfa8      	it	ge
 801a8d0:	461a      	movge	r2, r3
 801a8d2:	68bb      	ldr	r3, [r7, #8]
 801a8d4:	691b      	ldr	r3, [r3, #16]
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	bfb8      	it	lt
 801a8da:	461a      	movlt	r2, r3
 801a8dc:	68bb      	ldr	r3, [r7, #8]
 801a8de:	609a      	str	r2, [r3, #8]
 801a8e0:	e09e      	b.n	801aa20 <nk_do_property+0x62c>
        case NK_PROPERTY_FLOAT:
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f - variant->step.f, variant->max_value.f); break;
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	ed93 7a02 	vldr	s14, [r3, #8]
 801a8e8:	68bb      	ldr	r3, [r7, #8]
 801a8ea:	edd3 7a08 	vldr	s15, [r3, #32]
 801a8ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a8f2:	68bb      	ldr	r3, [r7, #8]
 801a8f4:	edd3 7a06 	vldr	s15, [r3, #24]
 801a8f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a900:	d508      	bpl.n	801a914 <nk_do_property+0x520>
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	ed93 7a02 	vldr	s14, [r3, #8]
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	edd3 7a08 	vldr	s15, [r3, #32]
 801a90e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a912:	e002      	b.n	801a91a <nk_do_property+0x526>
 801a914:	68bb      	ldr	r3, [r7, #8]
 801a916:	edd3 7a06 	vldr	s15, [r3, #24]
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	ed93 7a04 	vldr	s14, [r3, #16]
 801a920:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a928:	d503      	bpl.n	801a932 <nk_do_property+0x53e>
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	edd3 7a04 	vldr	s15, [r3, #16]
 801a930:	e01b      	b.n	801a96a <nk_do_property+0x576>
 801a932:	68bb      	ldr	r3, [r7, #8]
 801a934:	ed93 7a02 	vldr	s14, [r3, #8]
 801a938:	68bb      	ldr	r3, [r7, #8]
 801a93a:	edd3 7a08 	vldr	s15, [r3, #32]
 801a93e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	edd3 7a06 	vldr	s15, [r3, #24]
 801a948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a950:	d508      	bpl.n	801a964 <nk_do_property+0x570>
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	ed93 7a02 	vldr	s14, [r3, #8]
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	edd3 7a08 	vldr	s15, [r3, #32]
 801a95e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a962:	e002      	b.n	801a96a <nk_do_property+0x576>
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	edd3 7a06 	vldr	s15, [r3, #24]
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	edc3 7a02 	vstr	s15, [r3, #8]
 801a970:	e056      	b.n	801aa20 <nk_do_property+0x62c>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d - variant->step.d, variant->max_value.d); break;
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a978:	68bb      	ldr	r3, [r7, #8]
 801a97a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a97e:	f7e5 fcab 	bl	80002d8 <__aeabi_dsub>
 801a982:	4602      	mov	r2, r0
 801a984:	460b      	mov	r3, r1
 801a986:	4610      	mov	r0, r2
 801a988:	4619      	mov	r1, r3
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a990:	f7e6 f8cc 	bl	8000b2c <__aeabi_dcmplt>
 801a994:	4603      	mov	r3, r0
 801a996:	2b00      	cmp	r3, #0
 801a998:	d00c      	beq.n	801a9b4 <nk_do_property+0x5c0>
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a9a6:	f7e5 fc97 	bl	80002d8 <__aeabi_dsub>
 801a9aa:	4602      	mov	r2, r0
 801a9ac:	460b      	mov	r3, r1
 801a9ae:	4610      	mov	r0, r2
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	e002      	b.n	801a9ba <nk_do_property+0x5c6>
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a9c0:	f7e6 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d003      	beq.n	801a9d2 <nk_do_property+0x5de>
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a9d0:	e021      	b.n	801aa16 <nk_do_property+0x622>
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a9de:	f7e5 fc7b 	bl	80002d8 <__aeabi_dsub>
 801a9e2:	4602      	mov	r2, r0
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	4610      	mov	r0, r2
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	68bb      	ldr	r3, [r7, #8]
 801a9ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801a9f0:	f7e6 f89c 	bl	8000b2c <__aeabi_dcmplt>
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d00a      	beq.n	801aa10 <nk_do_property+0x61c>
 801a9fa:	68bb      	ldr	r3, [r7, #8]
 801a9fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801aa06:	f7e5 fc67 	bl	80002d8 <__aeabi_dsub>
 801aa0a:	4602      	mov	r2, r0
 801aa0c:	460b      	mov	r3, r1
 801aa0e:	e002      	b.n	801aa16 <nk_do_property+0x622>
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801aa16:	68b9      	ldr	r1, [r7, #8]
 801aa18:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801aa1c:	e000      	b.n	801aa20 <nk_do_property+0x62c>
        default: break;
 801aa1e:	bf00      	nop
        }
    }
    /* execute left button  */
    if (nk_do_button_symbol(ws, out, right, style->sym_right, behavior, &style->inc_button, in, font)) {
 801aa20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801aa24:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 801aa28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801aa2c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801aa30:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 801aa34:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 801aa38:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801aa3c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801aa40:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801aa44:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801aa48:	9202      	str	r2, [sp, #8]
 801aa4a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801aa4e:	9201      	str	r2, [sp, #4]
 801aa50:	9300      	str	r3, [sp, #0]
 801aa52:	4603      	mov	r3, r0
 801aa54:	460a      	mov	r2, r1
 801aa56:	eeb0 0a46 	vmov.f32	s0, s12
 801aa5a:	eef0 0a66 	vmov.f32	s1, s13
 801aa5e:	eeb0 1a47 	vmov.f32	s2, s14
 801aa62:	eef0 1a67 	vmov.f32	s3, s15
 801aa66:	6a39      	ldr	r1, [r7, #32]
 801aa68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aa6a:	f7f4 fe91 	bl	800f790 <nk_do_button_symbol>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	f000 80bd 	beq.w	801abf0 <nk_do_property+0x7fc>
        switch (variant->kind) {
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	781b      	ldrb	r3, [r3, #0]
 801aa7a:	2b02      	cmp	r3, #2
 801aa7c:	d061      	beq.n	801ab42 <nk_do_property+0x74e>
 801aa7e:	2b02      	cmp	r3, #2
 801aa80:	f300 80b5 	bgt.w	801abee <nk_do_property+0x7fa>
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d002      	beq.n	801aa8e <nk_do_property+0x69a>
 801aa88:	2b01      	cmp	r3, #1
 801aa8a:	d012      	beq.n	801aab2 <nk_do_property+0x6be>
        default: break;
 801aa8c:	e0af      	b.n	801abee <nk_do_property+0x7fa>
        case NK_PROPERTY_INT:
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i + variant->step.i, variant->max_value.i); break;
 801aa8e:	68bb      	ldr	r3, [r7, #8]
 801aa90:	699a      	ldr	r2, [r3, #24]
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	6899      	ldr	r1, [r3, #8]
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	6a1b      	ldr	r3, [r3, #32]
 801aa9a:	440b      	add	r3, r1
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	bfa8      	it	ge
 801aaa0:	461a      	movge	r2, r3
 801aaa2:	68bb      	ldr	r3, [r7, #8]
 801aaa4:	691b      	ldr	r3, [r3, #16]
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	bfb8      	it	lt
 801aaaa:	461a      	movlt	r2, r3
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	609a      	str	r2, [r3, #8]
 801aab0:	e09e      	b.n	801abf0 <nk_do_property+0x7fc>
        case NK_PROPERTY_FLOAT:
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f + variant->step.f, variant->max_value.f); break;
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	ed93 7a02 	vldr	s14, [r3, #8]
 801aab8:	68bb      	ldr	r3, [r7, #8]
 801aaba:	edd3 7a08 	vldr	s15, [r3, #32]
 801aabe:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	edd3 7a06 	vldr	s15, [r3, #24]
 801aac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad0:	d508      	bpl.n	801aae4 <nk_do_property+0x6f0>
 801aad2:	68bb      	ldr	r3, [r7, #8]
 801aad4:	ed93 7a02 	vldr	s14, [r3, #8]
 801aad8:	68bb      	ldr	r3, [r7, #8]
 801aada:	edd3 7a08 	vldr	s15, [r3, #32]
 801aade:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aae2:	e002      	b.n	801aaea <nk_do_property+0x6f6>
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	edd3 7a06 	vldr	s15, [r3, #24]
 801aaea:	68bb      	ldr	r3, [r7, #8]
 801aaec:	ed93 7a04 	vldr	s14, [r3, #16]
 801aaf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaf8:	d503      	bpl.n	801ab02 <nk_do_property+0x70e>
 801aafa:	68bb      	ldr	r3, [r7, #8]
 801aafc:	edd3 7a04 	vldr	s15, [r3, #16]
 801ab00:	e01b      	b.n	801ab3a <nk_do_property+0x746>
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	ed93 7a02 	vldr	s14, [r3, #8]
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	edd3 7a08 	vldr	s15, [r3, #32]
 801ab0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab12:	68bb      	ldr	r3, [r7, #8]
 801ab14:	edd3 7a06 	vldr	s15, [r3, #24]
 801ab18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ab1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab20:	d508      	bpl.n	801ab34 <nk_do_property+0x740>
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	ed93 7a02 	vldr	s14, [r3, #8]
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	edd3 7a08 	vldr	s15, [r3, #32]
 801ab2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab32:	e002      	b.n	801ab3a <nk_do_property+0x746>
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	edd3 7a06 	vldr	s15, [r3, #24]
 801ab3a:	68bb      	ldr	r3, [r7, #8]
 801ab3c:	edc3 7a02 	vstr	s15, [r3, #8]
 801ab40:	e056      	b.n	801abf0 <nk_do_property+0x7fc>
        case NK_PROPERTY_DOUBLE:
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d + variant->step.d, variant->max_value.d); break;
 801ab42:	68bb      	ldr	r3, [r7, #8]
 801ab44:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801ab48:	68bb      	ldr	r3, [r7, #8]
 801ab4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab4e:	f7e5 fbc5 	bl	80002dc <__adddf3>
 801ab52:	4602      	mov	r2, r0
 801ab54:	460b      	mov	r3, r1
 801ab56:	4610      	mov	r0, r2
 801ab58:	4619      	mov	r1, r3
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801ab60:	f7e5 ffe4 	bl	8000b2c <__aeabi_dcmplt>
 801ab64:	4603      	mov	r3, r0
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d00c      	beq.n	801ab84 <nk_do_property+0x790>
 801ab6a:	68bb      	ldr	r3, [r7, #8]
 801ab6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801ab70:	68bb      	ldr	r3, [r7, #8]
 801ab72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab76:	f7e5 fbb1 	bl	80002dc <__adddf3>
 801ab7a:	4602      	mov	r2, r0
 801ab7c:	460b      	mov	r3, r1
 801ab7e:	4610      	mov	r0, r2
 801ab80:	4619      	mov	r1, r3
 801ab82:	e002      	b.n	801ab8a <nk_do_property+0x796>
 801ab84:	68bb      	ldr	r3, [r7, #8]
 801ab86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ab90:	f7e5 ffcc 	bl	8000b2c <__aeabi_dcmplt>
 801ab94:	4603      	mov	r3, r0
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d003      	beq.n	801aba2 <nk_do_property+0x7ae>
 801ab9a:	68bb      	ldr	r3, [r7, #8]
 801ab9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801aba0:	e021      	b.n	801abe6 <nk_do_property+0x7f2>
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801abae:	f7e5 fb95 	bl	80002dc <__adddf3>
 801abb2:	4602      	mov	r2, r0
 801abb4:	460b      	mov	r3, r1
 801abb6:	4610      	mov	r0, r2
 801abb8:	4619      	mov	r1, r3
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801abc0:	f7e5 ffb4 	bl	8000b2c <__aeabi_dcmplt>
 801abc4:	4603      	mov	r3, r0
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d00a      	beq.n	801abe0 <nk_do_property+0x7ec>
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801abd0:	68bb      	ldr	r3, [r7, #8]
 801abd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801abd6:	f7e5 fb81 	bl	80002dc <__adddf3>
 801abda:	4602      	mov	r2, r0
 801abdc:	460b      	mov	r3, r1
 801abde:	e002      	b.n	801abe6 <nk_do_property+0x7f2>
 801abe0:	68bb      	ldr	r3, [r7, #8]
 801abe2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801abe6:	68b9      	ldr	r1, [r7, #8]
 801abe8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 801abec:	e000      	b.n	801abf0 <nk_do_property+0x7fc>
        default: break;
 801abee:	bf00      	nop
        }
    }
    if (old != NK_PROPERTY_EDIT && (*state == NK_PROPERTY_EDIT)) {
 801abf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801abf4:	2b01      	cmp	r3, #1
 801abf6:	d02c      	beq.n	801ac52 <nk_do_property+0x85e>
 801abf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	2b01      	cmp	r3, #1
 801ac00:	d127      	bne.n	801ac52 <nk_do_property+0x85e>
        /* property has been activated so setup buffer */
        NK_MEMCPY(buffer, dst, (nk_size)*length);
 801ac02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	461a      	mov	r2, r3
 801ac0a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801ac0e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ac12:	f007 fbf3 	bl	80223fc <nk_memcopy>
        *cursor = nk_utf_len(buffer, *length);
 801ac16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ac22:	f007 fb9f 	bl	8022364 <nk_utf_len>
 801ac26:	4602      	mov	r2, r0
 801ac28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ac2c:	601a      	str	r2, [r3, #0]
        *len = *length;
 801ac2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac32:	681a      	ldr	r2, [r3, #0]
 801ac34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ac38:	601a      	str	r2, [r3, #0]
        length = len;
 801ac3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ac3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        dst = buffer;
 801ac42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801ac46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        active = 0;
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801ac50:	e009      	b.n	801ac66 <nk_do_property+0x872>
    } else active = (*state == NK_PROPERTY_EDIT);
 801ac52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	2b01      	cmp	r3, #1
 801ac5a:	bf0c      	ite	eq
 801ac5c:	2301      	moveq	r3, #1
 801ac5e:	2300      	movne	r3, #0
 801ac60:	b2db      	uxtb	r3, r3
 801ac62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /* execute and run text edit field */
    nk_textedit_clear_state(text_edit, NK_TEXT_EDIT_SINGLE_LINE, filters[filter]);
 801ac66:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 801ac6a:	009b      	lsls	r3, r3, #2
 801ac6c:	33e0      	adds	r3, #224	; 0xe0
 801ac6e:	443b      	add	r3, r7
 801ac70:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801ac74:	461a      	mov	r2, r3
 801ac76:	2100      	movs	r1, #0
 801ac78:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801ac7c:	f006 fd1c 	bl	80216b8 <nk_textedit_clear_state>
    text_edit->active = (unsigned char)active;
 801ac80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ac84:	b2da      	uxtb	r2, r3
 801ac86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac8a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    text_edit->string.len = *length;
 801ac8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac92:	681a      	ldr	r2, [r3, #0]
 801ac94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ac98:	649a      	str	r2, [r3, #72]	; 0x48
    text_edit->cursor = NK_CLAMP(0, *cursor, *length);
 801ac9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ac9e:	681a      	ldr	r2, [r3, #0]
 801aca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	4293      	cmp	r3, r2
 801aca8:	bfa8      	it	ge
 801acaa:	4613      	movge	r3, r2
 801acac:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801acb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acb4:	659a      	str	r2, [r3, #88]	; 0x58
    text_edit->select_start = NK_CLAMP(0,*select_begin, *length);
 801acb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801acba:	681a      	ldr	r2, [r3, #0]
 801acbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	4293      	cmp	r3, r2
 801acc4:	bfa8      	it	ge
 801acc6:	4613      	movge	r3, r2
 801acc8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801accc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acd0:	65da      	str	r2, [r3, #92]	; 0x5c
    text_edit->select_end = NK_CLAMP(0,*select_end, *length);
 801acd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801acd6:	681a      	ldr	r2, [r3, #0]
 801acd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	4293      	cmp	r3, r2
 801ace0:	bfa8      	it	ge
 801ace2:	4613      	movge	r3, r2
 801ace4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801ace8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acec:	661a      	str	r2, [r3, #96]	; 0x60
    text_edit->string.buffer.allocated = (nk_size)*length;
 801acee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	461a      	mov	r2, r3
 801acf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801acfa:	639a      	str	r2, [r3, #56]	; 0x38
    text_edit->string.buffer.memory.size = NK_MAX_NUMBER_BUFFER;
 801acfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad00:	2240      	movs	r2, #64	; 0x40
 801ad02:	631a      	str	r2, [r3, #48]	; 0x30
    text_edit->string.buffer.memory.ptr = dst;
 801ad04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801ad0c:	62da      	str	r2, [r3, #44]	; 0x2c
    text_edit->string.buffer.size = NK_MAX_NUMBER_BUFFER;
 801ad0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad12:	2240      	movs	r2, #64	; 0x40
 801ad14:	645a      	str	r2, [r3, #68]	; 0x44
    text_edit->mode = NK_TEXT_EDIT_MODE_INSERT;
 801ad16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad1a:	2201      	movs	r2, #1
 801ad1c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 801ad20:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
        filters[filter], text_edit, &style->edit, (*state == NK_PROPERTY_EDIT) ? in: 0, font);
 801ad24:	009b      	lsls	r3, r3, #2
 801ad26:	33e0      	adds	r3, #224	; 0xe0
 801ad28:	443b      	add	r3, r7
 801ad2a:	f853 0c20 	ldr.w	r0, [r3, #-32]
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 801ad2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801ad32:	f103 0278 	add.w	r2, r3, #120	; 0x78
        filters[filter], text_edit, &style->edit, (*state == NK_PROPERTY_EDIT) ? in: 0, font);
 801ad36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ad3a:	681b      	ldr	r3, [r3, #0]
    nk_do_edit(ws, out, edit, NK_EDIT_FIELD|NK_EDIT_AUTO_SELECT,
 801ad3c:	2b01      	cmp	r3, #1
 801ad3e:	d102      	bne.n	801ad46 <nk_do_property+0x952>
 801ad40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ad44:	e000      	b.n	801ad48 <nk_do_property+0x954>
 801ad46:	2300      	movs	r3, #0
 801ad48:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 801ad4c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801ad50:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801ad54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801ad58:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801ad5c:	9103      	str	r1, [sp, #12]
 801ad5e:	9302      	str	r3, [sp, #8]
 801ad60:	9201      	str	r2, [sp, #4]
 801ad62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	4603      	mov	r3, r0
 801ad6a:	f240 2262 	movw	r2, #610	; 0x262
 801ad6e:	eeb0 0a46 	vmov.f32	s0, s12
 801ad72:	eef0 0a66 	vmov.f32	s1, s13
 801ad76:	eeb0 1a47 	vmov.f32	s2, s14
 801ad7a:	eef0 1a67 	vmov.f32	s3, s15
 801ad7e:	6a39      	ldr	r1, [r7, #32]
 801ad80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad82:	f7f8 fa25 	bl	80131d0 <nk_do_edit>

    *length = text_edit->string.len;
 801ad86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ad8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ad90:	601a      	str	r2, [r3, #0]
    *cursor = text_edit->cursor;
 801ad92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ad96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ad9c:	601a      	str	r2, [r3, #0]
    *select_begin = text_edit->select_start;
 801ad9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801ada2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801ada4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ada8:	601a      	str	r2, [r3, #0]
    *select_end = text_edit->select_end;
 801adaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801adae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801adb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801adb4:	601a      	str	r2, [r3, #0]
    if (text_edit->active && nk_input_is_key_pressed(in, NK_KEY_ENTER))
 801adb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801adba:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d00c      	beq.n	801addc <nk_do_property+0x9e8>
 801adc2:	2104      	movs	r1, #4
 801adc4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801adc8:	f7fa fc39 	bl	801563e <nk_input_is_key_pressed>
 801adcc:	4603      	mov	r3, r0
 801adce:	2b00      	cmp	r3, #0
 801add0:	d004      	beq.n	801addc <nk_do_property+0x9e8>
        text_edit->active = nk_false;
 801add2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801add6:	2200      	movs	r2, #0
 801add8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    if (active && !text_edit->active) {
 801addc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	f000 80bc 	beq.w	801af5e <nk_do_property+0xb6a>
 801ade6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801adea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801adee:	2b00      	cmp	r3, #0
 801adf0:	f040 80b5 	bne.w	801af5e <nk_do_property+0xb6a>
        /* property is now not active so convert edit text to value*/
        *state = NK_PROPERTY_DEFAULT;
 801adf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801adf8:	2200      	movs	r2, #0
 801adfa:	601a      	str	r2, [r3, #0]
        buffer[*len] = '\0';
 801adfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	461a      	mov	r2, r3
 801ae04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801ae08:	4413      	add	r3, r2
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	701a      	strb	r2, [r3, #0]
        switch (variant->kind) {
 801ae0e:	68bb      	ldr	r3, [r7, #8]
 801ae10:	781b      	ldrb	r3, [r3, #0]
 801ae12:	2b02      	cmp	r3, #2
 801ae14:	d05d      	beq.n	801aed2 <nk_do_property+0xade>
 801ae16:	2b02      	cmp	r3, #2
 801ae18:	f300 80a0 	bgt.w	801af5c <nk_do_property+0xb68>
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d002      	beq.n	801ae26 <nk_do_property+0xa32>
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d017      	beq.n	801ae54 <nk_do_property+0xa60>
        default: break;
 801ae24:	e09a      	b.n	801af5c <nk_do_property+0xb68>
        case NK_PROPERTY_INT:
            variant->value.i = nk_strtoi(buffer, 0);
 801ae26:	2100      	movs	r1, #0
 801ae28:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ae2c:	f007 fc7a 	bl	8022724 <nk_strtoi>
 801ae30:	4602      	mov	r2, r0
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	609a      	str	r2, [r3, #8]
            variant->value.i = NK_CLAMP(variant->min_value.i, variant->value.i, variant->max_value.i);
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	699a      	ldr	r2, [r3, #24]
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	689b      	ldr	r3, [r3, #8]
 801ae3e:	429a      	cmp	r2, r3
 801ae40:	bfa8      	it	ge
 801ae42:	461a      	movge	r2, r3
 801ae44:	68bb      	ldr	r3, [r7, #8]
 801ae46:	691b      	ldr	r3, [r3, #16]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	bfb8      	it	lt
 801ae4c:	461a      	movlt	r2, r3
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	609a      	str	r2, [r3, #8]
            break;
 801ae52:	e084      	b.n	801af5e <nk_do_property+0xb6a>
        case NK_PROPERTY_FLOAT:
            nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);
 801ae54:	2102      	movs	r1, #2
 801ae56:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ae5a:	f007 fe61 	bl	8022b20 <nk_string_float_limit>
            variant->value.f = nk_strtof(buffer, 0);
 801ae5e:	2100      	movs	r1, #0
 801ae60:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801ae64:	f007 fde8 	bl	8022a38 <nk_strtof>
 801ae68:	eef0 7a40 	vmov.f32	s15, s0
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	edc3 7a02 	vstr	s15, [r3, #8]
            variant->value.f = NK_CLAMP(variant->min_value.f, variant->value.f, variant->max_value.f);
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	ed93 7a02 	vldr	s14, [r3, #8]
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	edd3 7a06 	vldr	s15, [r3, #24]
 801ae7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae86:	d503      	bpl.n	801ae90 <nk_do_property+0xa9c>
 801ae88:	68bb      	ldr	r3, [r7, #8]
 801ae8a:	edd3 7a02 	vldr	s15, [r3, #8]
 801ae8e:	e002      	b.n	801ae96 <nk_do_property+0xaa2>
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	edd3 7a06 	vldr	s15, [r3, #24]
 801ae96:	68bb      	ldr	r3, [r7, #8]
 801ae98:	ed93 7a04 	vldr	s14, [r3, #16]
 801ae9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea4:	d502      	bpl.n	801aeac <nk_do_property+0xab8>
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	691b      	ldr	r3, [r3, #16]
 801aeaa:	e00f      	b.n	801aecc <nk_do_property+0xad8>
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	ed93 7a02 	vldr	s14, [r3, #8]
 801aeb2:	68bb      	ldr	r3, [r7, #8]
 801aeb4:	edd3 7a06 	vldr	s15, [r3, #24]
 801aeb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aec0:	d502      	bpl.n	801aec8 <nk_do_property+0xad4>
 801aec2:	68bb      	ldr	r3, [r7, #8]
 801aec4:	689b      	ldr	r3, [r3, #8]
 801aec6:	e001      	b.n	801aecc <nk_do_property+0xad8>
 801aec8:	68bb      	ldr	r3, [r7, #8]
 801aeca:	699b      	ldr	r3, [r3, #24]
 801aecc:	68ba      	ldr	r2, [r7, #8]
 801aece:	6093      	str	r3, [r2, #8]
            break;
 801aed0:	e045      	b.n	801af5e <nk_do_property+0xb6a>
        case NK_PROPERTY_DOUBLE:
            nk_string_float_limit(buffer, NK_MAX_FLOAT_PRECISION);
 801aed2:	2102      	movs	r1, #2
 801aed4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801aed8:	f007 fe22 	bl	8022b20 <nk_string_float_limit>
            variant->value.d = nk_strtod(buffer, 0);
 801aedc:	2100      	movs	r1, #0
 801aede:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801aee2:	f007 fc79 	bl	80227d8 <nk_strtod>
 801aee6:	eeb0 7a40 	vmov.f32	s14, s0
 801aeea:	eef0 7a60 	vmov.f32	s15, s1
 801aeee:	68bb      	ldr	r3, [r7, #8]
 801aef0:	ed83 7b02 	vstr	d7, [r3, #8]
            variant->value.d = NK_CLAMP(variant->min_value.d, variant->value.d, variant->max_value.d);
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801aefa:	68bb      	ldr	r3, [r7, #8]
 801aefc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801af00:	f7e5 fe14 	bl	8000b2c <__aeabi_dcmplt>
 801af04:	4603      	mov	r3, r0
 801af06:	2b00      	cmp	r3, #0
 801af08:	d003      	beq.n	801af12 <nk_do_property+0xb1e>
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801af10:	e002      	b.n	801af18 <nk_do_property+0xb24>
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801af18:	68bb      	ldr	r3, [r7, #8]
 801af1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af1e:	f7e5 fe05 	bl	8000b2c <__aeabi_dcmplt>
 801af22:	4603      	mov	r3, r0
 801af24:	2b00      	cmp	r3, #0
 801af26:	d003      	beq.n	801af30 <nk_do_property+0xb3c>
 801af28:	68bb      	ldr	r3, [r7, #8]
 801af2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801af2e:	e011      	b.n	801af54 <nk_do_property+0xb60>
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801af3c:	f7e5 fdf6 	bl	8000b2c <__aeabi_dcmplt>
 801af40:	4603      	mov	r3, r0
 801af42:	2b00      	cmp	r3, #0
 801af44:	d003      	beq.n	801af4e <nk_do_property+0xb5a>
 801af46:	68bb      	ldr	r3, [r7, #8]
 801af48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801af4c:	e002      	b.n	801af54 <nk_do_property+0xb60>
 801af4e:	68bb      	ldr	r3, [r7, #8]
 801af50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801af54:	68b9      	ldr	r1, [r7, #8]
 801af56:	e9c1 2302 	strd	r2, r3, [r1, #8]
            break;
 801af5a:	e000      	b.n	801af5e <nk_do_property+0xb6a>
        default: break;
 801af5c:	bf00      	nop
        }
    }
}
 801af5e:	bf00      	nop
 801af60:	37e0      	adds	r7, #224	; 0xe0
 801af62:	46bd      	mov	sp, r7
 801af64:	bd80      	pop	{r7, pc}
 801af66:	bf00      	nop

0801af68 <nk_property_variant_int>:
NK_LIB struct nk_property_variant
nk_property_variant_int(int value, int min_value, int max_value, int step)
{
 801af68:	b4b0      	push	{r4, r5, r7}
 801af6a:	b08f      	sub	sp, #60	; 0x3c
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	60f8      	str	r0, [r7, #12]
 801af70:	60b9      	str	r1, [r7, #8]
 801af72:	607a      	str	r2, [r7, #4]
 801af74:	603b      	str	r3, [r7, #0]
    struct nk_property_variant result;
    result.kind = NK_PROPERTY_INT;
 801af76:	2300      	movs	r3, #0
 801af78:	743b      	strb	r3, [r7, #16]
    result.value.i = value;
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	61bb      	str	r3, [r7, #24]
    result.min_value.i = min_value;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	623b      	str	r3, [r7, #32]
    result.max_value.i = max_value;
 801af82:	683b      	ldr	r3, [r7, #0]
 801af84:	62bb      	str	r3, [r7, #40]	; 0x28
    result.step.i = step;
 801af86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af88:	633b      	str	r3, [r7, #48]	; 0x30
    return result;
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	461d      	mov	r5, r3
 801af8e:	f107 0410 	add.w	r4, r7, #16
 801af92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801af9e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 801afa2:	68f8      	ldr	r0, [r7, #12]
 801afa4:	373c      	adds	r7, #60	; 0x3c
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bcb0      	pop	{r4, r5, r7}
 801afaa:	4770      	bx	lr

0801afac <nk_property>:
    return result;
}
NK_LIB void
nk_property(struct nk_context *ctx, const char *name, struct nk_property_variant *variant,
    float inc_per_pixel, const enum nk_property_filter filter)
{
 801afac:	b5b0      	push	{r4, r5, r7, lr}
 801afae:	b0b8      	sub	sp, #224	; 0xe0
 801afb0:	af0c      	add	r7, sp, #48	; 0x30
 801afb2:	6178      	str	r0, [r7, #20]
 801afb4:	6139      	str	r1, [r7, #16]
 801afb6:	60fa      	str	r2, [r7, #12]
 801afb8:	ed87 0a02 	vstr	s0, [r7, #8]
 801afbc:	71fb      	strb	r3, [r7, #7]
    const struct nk_style *style;

    struct nk_rect bounds;
    enum nk_widget_layout_states s;

    int *state = 0;
 801afbe:	2300      	movs	r3, #0
 801afc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    nk_hash hash = 0;
 801afc4:	2300      	movs	r3, #0
 801afc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    char *buffer = 0;
 801afca:	2300      	movs	r3, #0
 801afcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    int *len = 0;
 801afd0:	2300      	movs	r3, #0
 801afd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int *cursor = 0;
 801afd6:	2300      	movs	r3, #0
 801afd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int *select_begin = 0;
 801afdc:	2300      	movs	r3, #0
 801afde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int *select_end = 0;
 801afe2:	2300      	movs	r3, #0
 801afe4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int old_state;

    char dummy_buffer[NK_MAX_NUMBER_BUFFER];
    int dummy_state = NK_PROPERTY_DEFAULT;
 801afe8:	2300      	movs	r3, #0
 801afea:	62bb      	str	r3, [r7, #40]	; 0x28
    int dummy_length = 0;
 801afec:	2300      	movs	r3, #0
 801afee:	627b      	str	r3, [r7, #36]	; 0x24
    int dummy_cursor = 0;
 801aff0:	2300      	movs	r3, #0
 801aff2:	623b      	str	r3, [r7, #32]
    int dummy_select_begin = 0;
 801aff4:	2300      	movs	r3, #0
 801aff6:	61fb      	str	r3, [r7, #28]
    int dummy_select_end = 0;
 801aff8:	2300      	movs	r3, #0
 801affa:	61bb      	str	r3, [r7, #24]

    NK_ASSERT(ctx);
 801affc:	697b      	ldr	r3, [r7, #20]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d106      	bne.n	801b010 <nk_property+0x64>
 801b002:	4b76      	ldr	r3, [pc, #472]	; (801b1dc <nk_property+0x230>)
 801b004:	4a76      	ldr	r2, [pc, #472]	; (801b1e0 <nk_property+0x234>)
 801b006:	f240 115b 	movw	r1, #347	; 0x15b
 801b00a:	4876      	ldr	r0, [pc, #472]	; (801b1e4 <nk_property+0x238>)
 801b00c:	f009 fd70 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 801b010:	697b      	ldr	r3, [r7, #20]
 801b012:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b016:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d106      	bne.n	801b02c <nk_property+0x80>
 801b01e:	4b72      	ldr	r3, [pc, #456]	; (801b1e8 <nk_property+0x23c>)
 801b020:	4a6f      	ldr	r2, [pc, #444]	; (801b1e0 <nk_property+0x234>)
 801b022:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801b026:	486f      	ldr	r0, [pc, #444]	; (801b1e4 <nk_property+0x238>)
 801b028:	f009 fd62 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801b02c:	697b      	ldr	r3, [r7, #20]
 801b02e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b032:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d106      	bne.n	801b04c <nk_property+0xa0>
 801b03e:	4b6b      	ldr	r3, [pc, #428]	; (801b1ec <nk_property+0x240>)
 801b040:	4a67      	ldr	r2, [pc, #412]	; (801b1e0 <nk_property+0x234>)
 801b042:	f240 115d 	movw	r1, #349	; 0x15d
 801b046:	4867      	ldr	r0, [pc, #412]	; (801b1e4 <nk_property+0x238>)
 801b048:	f009 fd52 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	f000 8197 	beq.w	801b382 <nk_property+0x3d6>
 801b054:	697b      	ldr	r3, [r7, #20]
 801b056:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b05a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b05e:	2b00      	cmp	r3, #0
 801b060:	f000 818f 	beq.w	801b382 <nk_property+0x3d6>
 801b064:	697b      	ldr	r3, [r7, #20]
 801b066:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b06a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b072:	2b00      	cmp	r3, #0
 801b074:	f000 8185 	beq.w	801b382 <nk_property+0x3d6>
        return;

    win = ctx->current;
 801b078:	697b      	ldr	r3, [r7, #20]
 801b07a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b07e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    layout = win->layout;
 801b086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b08e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    style = &ctx->style;
 801b092:	697b      	ldr	r3, [r7, #20]
 801b094:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801b098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    s = nk_widget(&bounds, ctx);
 801b09c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b0a0:	6979      	ldr	r1, [r7, #20]
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	f008 fa3e 	bl	8023524 <nk_widget>
 801b0a8:	4603      	mov	r3, r0
 801b0aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (!s) return;
 801b0ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	f000 8167 	beq.w	801b386 <nk_property+0x3da>

    /* calculate hash from name */
    if (name[0] == '#') {
 801b0b8:	693b      	ldr	r3, [r7, #16]
 801b0ba:	781b      	ldrb	r3, [r3, #0]
 801b0bc:	2b23      	cmp	r3, #35	; 0x23
 801b0be:	d116      	bne.n	801b0ee <nk_property+0x142>
        hash = nk_murmur_hash(name, (int)nk_strlen(name), win->property.seq++);
 801b0c0:	6938      	ldr	r0, [r7, #16]
 801b0c2:	f007 fb09 	bl	80226d8 <nk_strlen>
 801b0c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b0ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801b0ce:	1c59      	adds	r1, r3, #1
 801b0d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b0d4:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 801b0d8:	461a      	mov	r2, r3
 801b0da:	4601      	mov	r1, r0
 801b0dc:	6938      	ldr	r0, [r7, #16]
 801b0de:	f007 ff73 	bl	8022fc8 <nk_murmur_hash>
 801b0e2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        name++; /* special number hash */
 801b0e6:	693b      	ldr	r3, [r7, #16]
 801b0e8:	3301      	adds	r3, #1
 801b0ea:	613b      	str	r3, [r7, #16]
 801b0ec:	e00a      	b.n	801b104 <nk_property+0x158>
    } else hash = nk_murmur_hash(name, (int)nk_strlen(name), 42);
 801b0ee:	6938      	ldr	r0, [r7, #16]
 801b0f0:	f007 faf2 	bl	80226d8 <nk_strlen>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	222a      	movs	r2, #42	; 0x2a
 801b0f8:	4619      	mov	r1, r3
 801b0fa:	6938      	ldr	r0, [r7, #16]
 801b0fc:	f007 ff64 	bl	8022fc8 <nk_murmur_hash>
 801b100:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

    /* check if property is currently hot item */
    if (win->property.active && hash == win->property.name) {
 801b104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d026      	beq.n	801b15e <nk_property+0x1b2>
 801b110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b114:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801b118:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b11c:	429a      	cmp	r2, r3
 801b11e:	d11e      	bne.n	801b15e <nk_property+0x1b2>
        buffer = win->property.buffer;
 801b120:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b124:	339c      	adds	r3, #156	; 0x9c
 801b126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        len = &win->property.length;
 801b12a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b12e:	33dc      	adds	r3, #220	; 0xdc
 801b130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        cursor = &win->property.cursor;
 801b134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b138:	33e0      	adds	r3, #224	; 0xe0
 801b13a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        state = &win->property.state;
 801b13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b142:	33f8      	adds	r3, #248	; 0xf8
 801b144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        select_begin = &win->property.select_start;
 801b148:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b14c:	33e4      	adds	r3, #228	; 0xe4
 801b14e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        select_end = &win->property.select_end;
 801b152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b156:	33e8      	adds	r3, #232	; 0xe8
 801b158:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b15c:	e017      	b.n	801b18e <nk_property+0x1e2>
    } else {
        buffer = dummy_buffer;
 801b15e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        len = &dummy_length;
 801b166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b16a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        cursor = &dummy_cursor;
 801b16e:	f107 0320 	add.w	r3, r7, #32
 801b172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        state = &dummy_state;
 801b176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b17a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        select_begin =  &dummy_select_begin;
 801b17e:	f107 031c 	add.w	r3, r7, #28
 801b182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        select_end = &dummy_select_end;
 801b186:	f107 0318 	add.w	r3, r7, #24
 801b18a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    /* execute property widget */
    old_state = *state;
 801b18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    ctx->text_edit.clip = ctx->clip;
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801b19e:	4619      	mov	r1, r3
 801b1a0:	697b      	ldr	r3, [r7, #20]
 801b1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b1a6:	461a      	mov	r2, r3
 801b1a8:	f501 739e 	add.w	r3, r1, #316	; 0x13c
 801b1ac:	f602 22c8 	addw	r2, r2, #2760	; 0xac8
 801b1b0:	ca07      	ldmia	r2, {r0, r1, r2}
 801b1b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801b1b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801b1ba:	2b02      	cmp	r3, #2
 801b1bc:	d105      	bne.n	801b1ca <nk_property+0x21e>
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 801b1be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b1c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d012      	beq.n	801b1f0 <nk_property+0x244>
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801b1ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b1ce:	685b      	ldr	r3, [r3, #4]
 801b1d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d10b      	bne.n	801b1f0 <nk_property+0x244>
        layout->flags & NK_WINDOW_ROM) ? 0 : &ctx->input;
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	e00a      	b.n	801b1f2 <nk_property+0x246>
 801b1dc:	08028d64 	.word	0x08028d64
 801b1e0:	0802a98c 	.word	0x0802a98c
 801b1e4:	08028d68 	.word	0x08028d68
 801b1e8:	08028d88 	.word	0x08028d88
 801b1ec:	08028d98 	.word	0x08028d98
 801b1f0:	2300      	movs	r3, #0
    in = ((s == NK_WIDGET_ROM && !win->property.active) ||
 801b1f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
 801b1f4:	697b      	ldr	r3, [r7, #20]
 801b1f6:	f503 50d6 	add.w	r0, r3, #6848	; 0x1ac0
 801b1fa:	3014      	adds	r0, #20
 801b1fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b200:	f103 0564 	add.w	r5, r3, #100	; 0x64
 801b204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b208:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
        variant, inc_per_pixel, buffer, len, state, cursor, select_begin,
        select_end, &style->property, filter, in, style->font, &ctx->text_edit,
 801b20c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b210:	6819      	ldr	r1, [r3, #0]
    nk_do_property(&ctx->last_widget_state, &win->buffer, bounds, name,
 801b212:	697b      	ldr	r3, [r7, #20]
 801b214:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 801b218:	333c      	adds	r3, #60	; 0x3c
 801b21a:	697c      	ldr	r4, [r7, #20]
 801b21c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801b220:	f894 4ad8 	ldrb.w	r4, [r4, #2776]	; 0xad8
 801b224:	ed97 6a1b 	vldr	s12, [r7, #108]	; 0x6c
 801b228:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 801b22c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801b230:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801b234:	940b      	str	r4, [sp, #44]	; 0x2c
 801b236:	930a      	str	r3, [sp, #40]	; 0x28
 801b238:	9109      	str	r1, [sp, #36]	; 0x24
 801b23a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b23c:	9308      	str	r3, [sp, #32]
 801b23e:	79fb      	ldrb	r3, [r7, #7]
 801b240:	9307      	str	r3, [sp, #28]
 801b242:	9206      	str	r2, [sp, #24]
 801b244:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b248:	9305      	str	r3, [sp, #20]
 801b24a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b24e:	9304      	str	r3, [sp, #16]
 801b250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b254:	9303      	str	r3, [sp, #12]
 801b256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b25a:	9302      	str	r3, [sp, #8]
 801b25c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b260:	9301      	str	r3, [sp, #4]
 801b262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b266:	9300      	str	r3, [sp, #0]
 801b268:	ed97 2a02 	vldr	s4, [r7, #8]
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	693a      	ldr	r2, [r7, #16]
 801b270:	eeb0 0a46 	vmov.f32	s0, s12
 801b274:	eef0 0a66 	vmov.f32	s1, s13
 801b278:	eeb0 1a47 	vmov.f32	s2, s14
 801b27c:	eef0 1a67 	vmov.f32	s3, s15
 801b280:	4629      	mov	r1, r5
 801b282:	f7ff f8b7 	bl	801a3f4 <nk_do_property>
        ctx->button_behavior);

    if (in && *state != NK_PROPERTY_DEFAULT && !win->property.active) {
 801b286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d051      	beq.n	801b330 <nk_property+0x384>
 801b28c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d04c      	beq.n	801b330 <nk_property+0x384>
 801b296:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b29a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d146      	bne.n	801b330 <nk_property+0x384>
        /* current property is now hot */
        win->property.active = 1;
 801b2a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2a6:	2201      	movs	r2, #1
 801b2a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        NK_MEMCPY(win->property.buffer, buffer, (nk_size)*len);
 801b2ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2b0:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 801b2b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	461a      	mov	r2, r3
 801b2bc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b2c0:	f007 f89c 	bl	80223fc <nk_memcopy>
        win->property.length = *len;
 801b2c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b2c8:	681a      	ldr	r2, [r3, #0]
 801b2ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        win->property.cursor = *cursor;
 801b2d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b2d6:	681a      	ldr	r2, [r3, #0]
 801b2d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        win->property.state = *state;
 801b2e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b2e4:	681a      	ldr	r2, [r3, #0]
 801b2e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2ea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        win->property.name = hash;
 801b2ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b2f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b2f6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        win->property.select_start = *select_begin;
 801b2fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b2fe:	681a      	ldr	r2, [r3, #0]
 801b300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b304:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        win->property.select_end = *select_end;
 801b308:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b30c:	681a      	ldr	r2, [r3, #0]
 801b30e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b312:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        if (*state == NK_PROPERTY_DRAG) {
 801b316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	2b02      	cmp	r3, #2
 801b31e:	d107      	bne.n	801b330 <nk_property+0x384>
            ctx->input.mouse.grab = nk_true;
 801b320:	697b      	ldr	r3, [r7, #20]
 801b322:	2201      	movs	r2, #1
 801b324:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
            ctx->input.mouse.grabbed = nk_true;
 801b328:	697b      	ldr	r3, [r7, #20]
 801b32a:	2201      	movs	r2, #1
 801b32c:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
        }
    }
    /* check if previously active property is now inactive */
    if (*state == NK_PROPERTY_DEFAULT && old_state != NK_PROPERTY_DEFAULT) {
 801b330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d126      	bne.n	801b388 <nk_property+0x3dc>
 801b33a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d022      	beq.n	801b388 <nk_property+0x3dc>
        if (old_state == NK_PROPERTY_DRAG) {
 801b342:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b346:	2b02      	cmp	r3, #2
 801b348:	d10b      	bne.n	801b362 <nk_property+0x3b6>
            ctx->input.mouse.grab = nk_false;
 801b34a:	697b      	ldr	r3, [r7, #20]
 801b34c:	2200      	movs	r2, #0
 801b34e:	f883 2164 	strb.w	r2, [r3, #356]	; 0x164
            ctx->input.mouse.grabbed = nk_false;
 801b352:	697b      	ldr	r3, [r7, #20]
 801b354:	2200      	movs	r2, #0
 801b356:	f883 2165 	strb.w	r2, [r3, #357]	; 0x165
            ctx->input.mouse.ungrab = nk_true;
 801b35a:	697b      	ldr	r3, [r7, #20]
 801b35c:	2201      	movs	r2, #1
 801b35e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
        }
        win->property.select_start = 0;
 801b362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b366:	2200      	movs	r2, #0
 801b368:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        win->property.select_end = 0;
 801b36c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b370:	2200      	movs	r2, #0
 801b372:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        win->property.active = 0;
 801b376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b37a:	2200      	movs	r2, #0
 801b37c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 801b380:	e002      	b.n	801b388 <nk_property+0x3dc>
        return;
 801b382:	bf00      	nop
 801b384:	e000      	b.n	801b388 <nk_property+0x3dc>
    if (!s) return;
 801b386:	bf00      	nop
    }
}
 801b388:	37b0      	adds	r7, #176	; 0xb0
 801b38a:	46bd      	mov	sp, r7
 801b38c:	bdb0      	pop	{r4, r5, r7, pc}
 801b38e:	bf00      	nop

0801b390 <nk_property_int>:
NK_API void
nk_property_int(struct nk_context *ctx, const char *name,
    int min, int *val, int max, int step, float inc_per_pixel)
{
 801b390:	b5b0      	push	{r4, r5, r7, lr}
 801b392:	b09c      	sub	sp, #112	; 0x70
 801b394:	af02      	add	r7, sp, #8
 801b396:	63f8      	str	r0, [r7, #60]	; 0x3c
 801b398:	63b9      	str	r1, [r7, #56]	; 0x38
 801b39a:	637a      	str	r2, [r7, #52]	; 0x34
 801b39c:	633b      	str	r3, [r7, #48]	; 0x30
 801b39e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    struct nk_property_variant variant;
    NK_ASSERT(ctx);
 801b3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d106      	bne.n	801b3b6 <nk_property_int+0x26>
 801b3a8:	4b27      	ldr	r3, [pc, #156]	; (801b448 <nk_property_int+0xb8>)
 801b3aa:	4a28      	ldr	r2, [pc, #160]	; (801b44c <nk_property_int+0xbc>)
 801b3ac:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 801b3b0:	4827      	ldr	r0, [pc, #156]	; (801b450 <nk_property_int+0xc0>)
 801b3b2:	f009 fb9d 	bl	8024af0 <__assert_func>
    NK_ASSERT(name);
 801b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d106      	bne.n	801b3ca <nk_property_int+0x3a>
 801b3bc:	4b25      	ldr	r3, [pc, #148]	; (801b454 <nk_property_int+0xc4>)
 801b3be:	4a23      	ldr	r2, [pc, #140]	; (801b44c <nk_property_int+0xbc>)
 801b3c0:	f240 11a9 	movw	r1, #425	; 0x1a9
 801b3c4:	4822      	ldr	r0, [pc, #136]	; (801b450 <nk_property_int+0xc0>)
 801b3c6:	f009 fb93 	bl	8024af0 <__assert_func>
    NK_ASSERT(val);
 801b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d106      	bne.n	801b3de <nk_property_int+0x4e>
 801b3d0:	4b21      	ldr	r3, [pc, #132]	; (801b458 <nk_property_int+0xc8>)
 801b3d2:	4a1e      	ldr	r2, [pc, #120]	; (801b44c <nk_property_int+0xbc>)
 801b3d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b3d8:	481d      	ldr	r0, [pc, #116]	; (801b450 <nk_property_int+0xc0>)
 801b3da:	f009 fb89 	bl	8024af0 <__assert_func>

    if (!ctx || !ctx->current || !name || !val) return;
 801b3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d02d      	beq.n	801b440 <nk_property_int+0xb0>
 801b3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b3ea:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d026      	beq.n	801b440 <nk_property_int+0xb0>
 801b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d023      	beq.n	801b440 <nk_property_int+0xb0>
 801b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d020      	beq.n	801b440 <nk_property_int+0xb0>
    variant = nk_property_variant_int(*val, min, max, step);
 801b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b400:	6819      	ldr	r1, [r3, #0]
 801b402:	4638      	mov	r0, r7
 801b404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b406:	9300      	str	r3, [sp, #0]
 801b408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b40a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b40c:	f7ff fdac 	bl	801af68 <nk_property_variant_int>
 801b410:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801b414:	463d      	mov	r5, r7
 801b416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b41a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b41c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b41e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b422:	e884 0003 	stmia.w	r4, {r0, r1}
    nk_property(ctx, name, &variant, inc_per_pixel, NK_FILTER_INT);
 801b426:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b42a:	2300      	movs	r3, #0
 801b42c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 801b430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b432:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b434:	f7ff fdba 	bl	801afac <nk_property>
    *val = variant.value.i;
 801b438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b43c:	601a      	str	r2, [r3, #0]
 801b43e:	e000      	b.n	801b442 <nk_property_int+0xb2>
    if (!ctx || !ctx->current || !name || !val) return;
 801b440:	bf00      	nop
}
 801b442:	3768      	adds	r7, #104	; 0x68
 801b444:	46bd      	mov	sp, r7
 801b446:	bdb0      	pop	{r4, r5, r7, pc}
 801b448:	08028d64 	.word	0x08028d64
 801b44c:	0802a998 	.word	0x0802a998
 801b450:	08028d68 	.word	0x08028d68
 801b454:	08028db0 	.word	0x08028db0
 801b458:	08028db8 	.word	0x08028db8

0801b45c <nk_scrollbar_behavior>:
nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,
    int has_scrolling, const struct nk_rect *scroll,
    const struct nk_rect *cursor, const struct nk_rect *empty0,
    const struct nk_rect *empty1, float scroll_offset,
    float target, float scroll_step, enum nk_orientation o)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b092      	sub	sp, #72	; 0x48
 801b460:	af00      	add	r7, sp, #0
 801b462:	61f8      	str	r0, [r7, #28]
 801b464:	61b9      	str	r1, [r7, #24]
 801b466:	617a      	str	r2, [r7, #20]
 801b468:	613b      	str	r3, [r7, #16]
 801b46a:	ed87 0a03 	vstr	s0, [r7, #12]
 801b46e:	edc7 0a02 	vstr	s1, [r7, #8]
 801b472:	ed87 1a01 	vstr	s2, [r7, #4]
    nk_flags ws = 0;
 801b476:	2300      	movs	r3, #0
 801b478:	627b      	str	r3, [r7, #36]	; 0x24
    int left_mouse_down;
    unsigned int left_mouse_clicked;
    int left_mouse_click_in_cursor;
    float scroll_delta;

    nk_widget_state_reset(state);
 801b47a:	69fb      	ldr	r3, [r7, #28]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	f003 0302 	and.w	r3, r3, #2
 801b482:	2b00      	cmp	r3, #0
 801b484:	d003      	beq.n	801b48e <nk_scrollbar_behavior+0x32>
 801b486:	69fb      	ldr	r3, [r7, #28]
 801b488:	2206      	movs	r2, #6
 801b48a:	601a      	str	r2, [r3, #0]
 801b48c:	e002      	b.n	801b494 <nk_scrollbar_behavior+0x38>
 801b48e:	69fb      	ldr	r3, [r7, #28]
 801b490:	2204      	movs	r2, #4
 801b492:	601a      	str	r2, [r3, #0]
    if (!in) return scroll_offset;
 801b494:	69bb      	ldr	r3, [r7, #24]
 801b496:	2b00      	cmp	r3, #0
 801b498:	d101      	bne.n	801b49e <nk_scrollbar_behavior+0x42>
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	e35c      	b.n	801bb58 <nk_scrollbar_behavior+0x6fc>

    left_mouse_down = in->mouse.buttons[NK_BUTTON_LEFT].down;
 801b49e:	69bb      	ldr	r3, [r7, #24]
 801b4a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801b4a4:	647b      	str	r3, [r7, #68]	; 0x44
    left_mouse_clicked = in->mouse.buttons[NK_BUTTON_LEFT].clicked;
 801b4a6:	69bb      	ldr	r3, [r7, #24]
 801b4a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801b4ac:	643b      	str	r3, [r7, #64]	; 0x40
    left_mouse_click_in_cursor = nk_input_has_mouse_click_down_in_rect(in,
 801b4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b4b0:	ed93 6a00 	vldr	s12, [r3]
 801b4b4:	edd3 6a01 	vldr	s13, [r3, #4]
 801b4b8:	ed93 7a02 	vldr	s14, [r3, #8]
 801b4bc:	edd3 7a03 	vldr	s15, [r3, #12]
 801b4c0:	2201      	movs	r2, #1
 801b4c2:	eeb0 0a46 	vmov.f32	s0, s12
 801b4c6:	eef0 0a66 	vmov.f32	s1, s13
 801b4ca:	eeb0 1a47 	vmov.f32	s2, s14
 801b4ce:	eef0 1a67 	vmov.f32	s3, s15
 801b4d2:	2100      	movs	r1, #0
 801b4d4:	69b8      	ldr	r0, [r7, #24]
 801b4d6:	f7f9 ff45 	bl	8015364 <nk_input_has_mouse_click_down_in_rect>
 801b4da:	63f8      	str	r0, [r7, #60]	; 0x3c
        NK_BUTTON_LEFT, *cursor, nk_true);
    if (nk_input_is_mouse_hovering_rect(in, *scroll))
 801b4dc:	693b      	ldr	r3, [r7, #16]
 801b4de:	ed93 6a00 	vldr	s12, [r3]
 801b4e2:	edd3 6a01 	vldr	s13, [r3, #4]
 801b4e6:	ed93 7a02 	vldr	s14, [r3, #8]
 801b4ea:	edd3 7a03 	vldr	s15, [r3, #12]
 801b4ee:	eeb0 0a46 	vmov.f32	s0, s12
 801b4f2:	eef0 0a66 	vmov.f32	s1, s13
 801b4f6:	eeb0 1a47 	vmov.f32	s2, s14
 801b4fa:	eef0 1a67 	vmov.f32	s3, s15
 801b4fe:	69b8      	ldr	r0, [r7, #24]
 801b500:	f7f9 ffbe 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 801b504:	4603      	mov	r3, r0
 801b506:	2b00      	cmp	r3, #0
 801b508:	d002      	beq.n	801b510 <nk_scrollbar_behavior+0xb4>
        *state = NK_WIDGET_STATE_HOVERED;
 801b50a:	69fb      	ldr	r3, [r7, #28]
 801b50c:	2212      	movs	r2, #18
 801b50e:	601a      	str	r2, [r3, #0]

    scroll_delta = (o == NK_VERTICAL) ? in->mouse.scroll_delta.y: in->mouse.scroll_delta.x;
 801b510:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b514:	2b00      	cmp	r3, #0
 801b516:	d103      	bne.n	801b520 <nk_scrollbar_behavior+0xc4>
 801b518:	69bb      	ldr	r3, [r7, #24]
 801b51a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801b51e:	e002      	b.n	801b526 <nk_scrollbar_behavior+0xca>
 801b520:	69bb      	ldr	r3, [r7, #24]
 801b522:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801b526:	63bb      	str	r3, [r7, #56]	; 0x38
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801b528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	f000 8122 	beq.w	801b774 <nk_scrollbar_behavior+0x318>
 801b530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b532:	2b00      	cmp	r3, #0
 801b534:	f000 811e 	beq.w	801b774 <nk_scrollbar_behavior+0x318>
 801b538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	f040 811a 	bne.w	801b774 <nk_scrollbar_behavior+0x318>
        /* update cursor by mouse dragging */
        float pixel, delta;
        *state = NK_WIDGET_STATE_ACTIVE;
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	2222      	movs	r2, #34	; 0x22
 801b544:	601a      	str	r2, [r3, #0]
        if (o == NK_VERTICAL) {
 801b546:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	f040 8089 	bne.w	801b662 <nk_scrollbar_behavior+0x206>
            float cursor_y;
            pixel = in->mouse.delta.y;
 801b550:	69bb      	ldr	r3, [r7, #24]
 801b552:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 801b556:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->h) * target;
 801b558:	693b      	ldr	r3, [r7, #16]
 801b55a:	ed93 7a03 	vldr	s14, [r3, #12]
 801b55e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801b562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b566:	ed97 7a02 	vldr	s14, [r7, #8]
 801b56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b56e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->h);
 801b572:	ed97 7a03 	vldr	s14, [r7, #12]
 801b576:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b57a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b57e:	693b      	ldr	r3, [r7, #16]
 801b580:	edd3 7a03 	vldr	s15, [r3, #12]
 801b584:	edd7 6a02 	vldr	s13, [r7, #8]
 801b588:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b58c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b594:	d50e      	bpl.n	801b5b4 <nk_scrollbar_behavior+0x158>
 801b596:	ed97 7a03 	vldr	s14, [r7, #12]
 801b59a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b59e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b5a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5aa:	bf4c      	ite	mi
 801b5ac:	2301      	movmi	r3, #1
 801b5ae:	2300      	movpl	r3, #0
 801b5b0:	b2db      	uxtb	r3, r3
 801b5b2:	e00e      	b.n	801b5d2 <nk_scrollbar_behavior+0x176>
 801b5b4:	693b      	ldr	r3, [r7, #16]
 801b5b6:	edd3 7a03 	vldr	s15, [r3, #12]
 801b5ba:	ed97 7a02 	vldr	s14, [r7, #8]
 801b5be:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b5c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ca:	bf4c      	ite	mi
 801b5cc:	2301      	movmi	r3, #1
 801b5ce:	2300      	movpl	r3, #0
 801b5d0:	b2db      	uxtb	r3, r3
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d002      	beq.n	801b5dc <nk_scrollbar_behavior+0x180>
 801b5d6:	eddf 7acd 	vldr	s15, [pc, #820]	; 801b90c <nk_scrollbar_behavior+0x4b0>
 801b5da:	e01f      	b.n	801b61c <nk_scrollbar_behavior+0x1c0>
 801b5dc:	ed97 7a03 	vldr	s14, [r7, #12]
 801b5e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b5e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	edd3 7a03 	vldr	s15, [r3, #12]
 801b5ee:	edd7 6a02 	vldr	s13, [r7, #8]
 801b5f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b5f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5fe:	d506      	bpl.n	801b60e <nk_scrollbar_behavior+0x1b2>
 801b600:	ed97 7a03 	vldr	s14, [r7, #12]
 801b604:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b608:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b60c:	e006      	b.n	801b61c <nk_scrollbar_behavior+0x1c0>
 801b60e:	693b      	ldr	r3, [r7, #16]
 801b610:	edd3 7a03 	vldr	s15, [r3, #12]
 801b614:	ed97 7a02 	vldr	s14, [r7, #8]
 801b618:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b61c:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_y = scroll->y + ((scroll_offset/target) * scroll->h);
 801b620:	693b      	ldr	r3, [r7, #16]
 801b622:	ed93 7a01 	vldr	s14, [r3, #4]
 801b626:	ed97 6a03 	vldr	s12, [r7, #12]
 801b62a:	edd7 7a02 	vldr	s15, [r7, #8]
 801b62e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	edd3 7a03 	vldr	s15, [r3, #12]
 801b638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b63c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b640:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.y = cursor_y + cursor->h/2.0f;
 801b644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b646:	edd3 7a03 	vldr	s15, [r3, #12]
 801b64a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b64e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b652:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801b656:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b65a:	69bb      	ldr	r3, [r7, #24]
 801b65c:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801b660:	e238      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
        } else {
            float cursor_x;
            pixel = in->mouse.delta.x;
 801b662:	69bb      	ldr	r3, [r7, #24]
 801b664:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801b668:	637b      	str	r3, [r7, #52]	; 0x34
            delta = (pixel / scroll->w) * target;
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	ed93 7a02 	vldr	s14, [r3, #8]
 801b670:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801b674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b678:	ed97 7a02 	vldr	s14, [r7, #8]
 801b67c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b680:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            scroll_offset = NK_CLAMP(0, scroll_offset + delta, target - scroll->w);
 801b684:	ed97 7a03 	vldr	s14, [r7, #12]
 801b688:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b68c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b690:	693b      	ldr	r3, [r7, #16]
 801b692:	edd3 7a02 	vldr	s15, [r3, #8]
 801b696:	edd7 6a02 	vldr	s13, [r7, #8]
 801b69a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b69e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a6:	d50e      	bpl.n	801b6c6 <nk_scrollbar_behavior+0x26a>
 801b6a8:	ed97 7a03 	vldr	s14, [r7, #12]
 801b6ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b6b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b6b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6bc:	bf4c      	ite	mi
 801b6be:	2301      	movmi	r3, #1
 801b6c0:	2300      	movpl	r3, #0
 801b6c2:	b2db      	uxtb	r3, r3
 801b6c4:	e00e      	b.n	801b6e4 <nk_scrollbar_behavior+0x288>
 801b6c6:	693b      	ldr	r3, [r7, #16]
 801b6c8:	edd3 7a02 	vldr	s15, [r3, #8]
 801b6cc:	ed97 7a02 	vldr	s14, [r7, #8]
 801b6d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b6d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6dc:	bf4c      	ite	mi
 801b6de:	2301      	movmi	r3, #1
 801b6e0:	2300      	movpl	r3, #0
 801b6e2:	b2db      	uxtb	r3, r3
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d002      	beq.n	801b6ee <nk_scrollbar_behavior+0x292>
 801b6e8:	eddf 7a88 	vldr	s15, [pc, #544]	; 801b90c <nk_scrollbar_behavior+0x4b0>
 801b6ec:	e01f      	b.n	801b72e <nk_scrollbar_behavior+0x2d2>
 801b6ee:	ed97 7a03 	vldr	s14, [r7, #12]
 801b6f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b6f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b6fa:	693b      	ldr	r3, [r7, #16]
 801b6fc:	edd3 7a02 	vldr	s15, [r3, #8]
 801b700:	edd7 6a02 	vldr	s13, [r7, #8]
 801b704:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b710:	d506      	bpl.n	801b720 <nk_scrollbar_behavior+0x2c4>
 801b712:	ed97 7a03 	vldr	s14, [r7, #12]
 801b716:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b71a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b71e:	e006      	b.n	801b72e <nk_scrollbar_behavior+0x2d2>
 801b720:	693b      	ldr	r3, [r7, #16]
 801b722:	edd3 7a02 	vldr	s15, [r3, #8]
 801b726:	ed97 7a02 	vldr	s14, [r7, #8]
 801b72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b72e:	edc7 7a03 	vstr	s15, [r7, #12]
            cursor_x = scroll->x + ((scroll_offset/target) * scroll->w);
 801b732:	693b      	ldr	r3, [r7, #16]
 801b734:	ed93 7a00 	vldr	s14, [r3]
 801b738:	ed97 6a03 	vldr	s12, [r7, #12]
 801b73c:	edd7 7a02 	vldr	s15, [r7, #8]
 801b740:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801b744:	693b      	ldr	r3, [r7, #16]
 801b746:	edd3 7a02 	vldr	s15, [r3, #8]
 801b74a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b74e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b752:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            in->mouse.buttons[NK_BUTTON_LEFT].clicked_pos.x = cursor_x + cursor->w/2.0f;
 801b756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b758:	edd3 7a02 	vldr	s15, [r3, #8]
 801b75c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b760:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b764:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b768:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b76c:	69bb      	ldr	r3, [r7, #24]
 801b76e:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
    if (left_mouse_down && left_mouse_click_in_cursor && !left_mouse_clicked) {
 801b772:	e1af      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
        }
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 801b774:	211d      	movs	r1, #29
 801b776:	69b8      	ldr	r0, [r7, #24]
 801b778:	f7f9 ff61 	bl	801563e <nk_input_is_key_pressed>
 801b77c:	4603      	mov	r3, r0
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d006      	beq.n	801b790 <nk_scrollbar_behavior+0x334>
 801b782:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b786:	2b00      	cmp	r3, #0
 801b788:	d102      	bne.n	801b790 <nk_scrollbar_behavior+0x334>
 801b78a:	697b      	ldr	r3, [r7, #20]
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d11a      	bne.n	801b7c6 <nk_scrollbar_behavior+0x36a>
            nk_button_behavior(&ws, *empty0, in, NK_BUTTON_DEFAULT)) {
 801b790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b792:	ed93 6a00 	vldr	s12, [r3]
 801b796:	edd3 6a01 	vldr	s13, [r3, #4]
 801b79a:	ed93 7a02 	vldr	s14, [r3, #8]
 801b79e:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b7a6:	2200      	movs	r2, #0
 801b7a8:	69b9      	ldr	r1, [r7, #24]
 801b7aa:	eeb0 0a46 	vmov.f32	s0, s12
 801b7ae:	eef0 0a66 	vmov.f32	s1, s13
 801b7b2:	eeb0 1a47 	vmov.f32	s2, s14
 801b7b6:	eef0 1a67 	vmov.f32	s3, s15
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7f3 fc56 	bl	800f06c <nk_button_behavior>
 801b7c0:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_UP) && o == NK_VERTICAL && has_scrolling)||
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d035      	beq.n	801b832 <nk_scrollbar_behavior+0x3d6>
        /* scroll page up by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 801b7c6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d118      	bne.n	801b800 <nk_scrollbar_behavior+0x3a4>
            scroll_offset = NK_MAX(0, scroll_offset - scroll->h);
 801b7ce:	693b      	ldr	r3, [r7, #16]
 801b7d0:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7d4:	ed97 7a03 	vldr	s14, [r7, #12]
 801b7d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b7dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e4:	dd07      	ble.n	801b7f6 <nk_scrollbar_behavior+0x39a>
 801b7e6:	693b      	ldr	r3, [r7, #16]
 801b7e8:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7ec:	ed97 7a03 	vldr	s14, [r7, #12]
 801b7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b7f4:	e001      	b.n	801b7fa <nk_scrollbar_behavior+0x39e>
 801b7f6:	eddf 7a45 	vldr	s15, [pc, #276]	; 801b90c <nk_scrollbar_behavior+0x4b0>
 801b7fa:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b7fe:	e169      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MAX(0, scroll_offset - scroll->w);
 801b800:	693b      	ldr	r3, [r7, #16]
 801b802:	edd3 7a02 	vldr	s15, [r3, #8]
 801b806:	ed97 7a03 	vldr	s14, [r7, #12]
 801b80a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b80e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b816:	dd07      	ble.n	801b828 <nk_scrollbar_behavior+0x3cc>
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	edd3 7a02 	vldr	s15, [r3, #8]
 801b81e:	ed97 7a03 	vldr	s14, [r7, #12]
 801b822:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b826:	e001      	b.n	801b82c <nk_scrollbar_behavior+0x3d0>
 801b828:	eddf 7a38 	vldr	s15, [pc, #224]	; 801b90c <nk_scrollbar_behavior+0x4b0>
 801b82c:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b830:	e150      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 801b832:	211c      	movs	r1, #28
 801b834:	69b8      	ldr	r0, [r7, #24]
 801b836:	f7f9 ff02 	bl	801563e <nk_input_is_key_pressed>
 801b83a:	4603      	mov	r3, r0
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d006      	beq.n	801b84e <nk_scrollbar_behavior+0x3f2>
 801b840:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b844:	2b00      	cmp	r3, #0
 801b846:	d102      	bne.n	801b84e <nk_scrollbar_behavior+0x3f2>
 801b848:	697b      	ldr	r3, [r7, #20]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d11a      	bne.n	801b884 <nk_scrollbar_behavior+0x428>
        nk_button_behavior(&ws, *empty1, in, NK_BUTTON_DEFAULT)) {
 801b84e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b850:	ed93 6a00 	vldr	s12, [r3]
 801b854:	edd3 6a01 	vldr	s13, [r3, #4]
 801b858:	ed93 7a02 	vldr	s14, [r3, #8]
 801b85c:	edd3 7a03 	vldr	s15, [r3, #12]
 801b860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b864:	2200      	movs	r2, #0
 801b866:	69b9      	ldr	r1, [r7, #24]
 801b868:	eeb0 0a46 	vmov.f32	s0, s12
 801b86c:	eef0 0a66 	vmov.f32	s1, s13
 801b870:	eeb0 1a47 	vmov.f32	s2, s14
 801b874:	eef0 1a67 	vmov.f32	s3, s15
 801b878:	4618      	mov	r0, r3
 801b87a:	f7f3 fbf7 	bl	800f06c <nk_button_behavior>
 801b87e:	4603      	mov	r3, r0
    } else if ((nk_input_is_key_pressed(in, NK_KEY_SCROLL_DOWN) && o == NK_VERTICAL && has_scrolling) ||
 801b880:	2b00      	cmp	r3, #0
 801b882:	d04f      	beq.n	801b924 <nk_scrollbar_behavior+0x4c8>
        /* scroll page down by click on empty space or shortcut */
        if (o == NK_VERTICAL)
 801b884:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d124      	bne.n	801b8d6 <nk_scrollbar_behavior+0x47a>
            scroll_offset = NK_MIN(scroll_offset + scroll->h, target - scroll->h);
 801b88c:	693b      	ldr	r3, [r7, #16]
 801b88e:	ed93 7a03 	vldr	s14, [r3, #12]
 801b892:	edd7 7a03 	vldr	s15, [r7, #12]
 801b896:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	edd3 7a03 	vldr	s15, [r3, #12]
 801b8a0:	edd7 6a02 	vldr	s13, [r7, #8]
 801b8a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b8a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8b0:	d507      	bpl.n	801b8c2 <nk_scrollbar_behavior+0x466>
 801b8b2:	693b      	ldr	r3, [r7, #16]
 801b8b4:	ed93 7a03 	vldr	s14, [r3, #12]
 801b8b8:	edd7 7a03 	vldr	s15, [r7, #12]
 801b8bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b8c0:	e006      	b.n	801b8d0 <nk_scrollbar_behavior+0x474>
 801b8c2:	693b      	ldr	r3, [r7, #16]
 801b8c4:	edd3 7a03 	vldr	s15, [r3, #12]
 801b8c8:	ed97 7a02 	vldr	s14, [r7, #8]
 801b8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b8d0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b8d4:	e0fe      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
        else scroll_offset = NK_MIN(scroll_offset + scroll->w, target - scroll->w);
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	ed93 7a02 	vldr	s14, [r3, #8]
 801b8dc:	edd7 7a03 	vldr	s15, [r7, #12]
 801b8e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b8e4:	693b      	ldr	r3, [r7, #16]
 801b8e6:	edd3 7a02 	vldr	s15, [r3, #8]
 801b8ea:	edd7 6a02 	vldr	s13, [r7, #8]
 801b8ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801b8f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8fa:	d509      	bpl.n	801b910 <nk_scrollbar_behavior+0x4b4>
 801b8fc:	693b      	ldr	r3, [r7, #16]
 801b8fe:	ed93 7a02 	vldr	s14, [r3, #8]
 801b902:	edd7 7a03 	vldr	s15, [r7, #12]
 801b906:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b90a:	e008      	b.n	801b91e <nk_scrollbar_behavior+0x4c2>
 801b90c:	00000000 	.word	0x00000000
 801b910:	693b      	ldr	r3, [r7, #16]
 801b912:	edd3 7a02 	vldr	s15, [r3, #8]
 801b916:	ed97 7a02 	vldr	s14, [r7, #8]
 801b91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b91e:	edc7 7a03 	vstr	s15, [r7, #12]
        if (o == NK_VERTICAL)
 801b922:	e0d7      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
    } else if (has_scrolling) {
 801b924:	697b      	ldr	r3, [r7, #20]
 801b926:	2b00      	cmp	r3, #0
 801b928:	f000 80d4 	beq.w	801bad4 <nk_scrollbar_behavior+0x678>
        if ((scroll_delta < 0 || (scroll_delta > 0))) {
 801b92c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b938:	d407      	bmi.n	801b94a <nk_scrollbar_behavior+0x4ee>
 801b93a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b93e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b946:	f340 80a2 	ble.w	801ba8e <nk_scrollbar_behavior+0x632>
            /* update cursor by mouse scrolling */
            scroll_offset = scroll_offset + scroll_step * (-scroll_delta);
 801b94a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b94e:	eeb1 7a67 	vneg.f32	s14, s15
 801b952:	edd7 7a01 	vldr	s15, [r7, #4]
 801b956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b95a:	ed97 7a03 	vldr	s14, [r7, #12]
 801b95e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b962:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801b966:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d147      	bne.n	801b9fe <nk_scrollbar_behavior+0x5a2>
                scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->h);
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	edd3 7a03 	vldr	s15, [r3, #12]
 801b974:	ed97 7a02 	vldr	s14, [r7, #8]
 801b978:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b97c:	ed97 7a03 	vldr	s14, [r7, #12]
 801b980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b988:	d50a      	bpl.n	801b9a0 <nk_scrollbar_behavior+0x544>
 801b98a:	edd7 7a03 	vldr	s15, [r7, #12]
 801b98e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b996:	bf4c      	ite	mi
 801b998:	2301      	movmi	r3, #1
 801b99a:	2300      	movpl	r3, #0
 801b99c:	b2db      	uxtb	r3, r3
 801b99e:	e00e      	b.n	801b9be <nk_scrollbar_behavior+0x562>
 801b9a0:	693b      	ldr	r3, [r7, #16]
 801b9a2:	edd3 7a03 	vldr	s15, [r3, #12]
 801b9a6:	ed97 7a02 	vldr	s14, [r7, #8]
 801b9aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b9ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9b6:	bf4c      	ite	mi
 801b9b8:	2301      	movmi	r3, #1
 801b9ba:	2300      	movpl	r3, #0
 801b9bc:	b2db      	uxtb	r3, r3
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d002      	beq.n	801b9c8 <nk_scrollbar_behavior+0x56c>
 801b9c2:	ed5f 7a2e 	vldr	s15, [pc, #-184]	; 801b90c <nk_scrollbar_behavior+0x4b0>
 801b9c6:	e017      	b.n	801b9f8 <nk_scrollbar_behavior+0x59c>
 801b9c8:	693b      	ldr	r3, [r7, #16]
 801b9ca:	edd3 7a03 	vldr	s15, [r3, #12]
 801b9ce:	ed97 7a02 	vldr	s14, [r7, #8]
 801b9d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b9d6:	ed97 7a03 	vldr	s14, [r7, #12]
 801b9da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9e2:	d502      	bpl.n	801b9ea <nk_scrollbar_behavior+0x58e>
 801b9e4:	edd7 7a03 	vldr	s15, [r7, #12]
 801b9e8:	e006      	b.n	801b9f8 <nk_scrollbar_behavior+0x59c>
 801b9ea:	693b      	ldr	r3, [r7, #16]
 801b9ec:	edd3 7a03 	vldr	s15, [r3, #12]
 801b9f0:	ed97 7a02 	vldr	s14, [r7, #8]
 801b9f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b9f8:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801b9fc:	e06a      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
            else scroll_offset = NK_CLAMP(0, scroll_offset, target - scroll->w);
 801b9fe:	693b      	ldr	r3, [r7, #16]
 801ba00:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba04:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba08:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba0c:	ed97 7a03 	vldr	s14, [r7, #12]
 801ba10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba18:	d50a      	bpl.n	801ba30 <nk_scrollbar_behavior+0x5d4>
 801ba1a:	edd7 7a03 	vldr	s15, [r7, #12]
 801ba1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba26:	bf4c      	ite	mi
 801ba28:	2301      	movmi	r3, #1
 801ba2a:	2300      	movpl	r3, #0
 801ba2c:	b2db      	uxtb	r3, r3
 801ba2e:	e00e      	b.n	801ba4e <nk_scrollbar_behavior+0x5f2>
 801ba30:	693b      	ldr	r3, [r7, #16]
 801ba32:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba36:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ba42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba46:	bf4c      	ite	mi
 801ba48:	2301      	movmi	r3, #1
 801ba4a:	2300      	movpl	r3, #0
 801ba4c:	b2db      	uxtb	r3, r3
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d002      	beq.n	801ba58 <nk_scrollbar_behavior+0x5fc>
 801ba52:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 801b90c <nk_scrollbar_behavior+0x4b0>
 801ba56:	e017      	b.n	801ba88 <nk_scrollbar_behavior+0x62c>
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba5e:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba62:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba66:	ed97 7a03 	vldr	s14, [r7, #12]
 801ba6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ba6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba72:	d502      	bpl.n	801ba7a <nk_scrollbar_behavior+0x61e>
 801ba74:	edd7 7a03 	vldr	s15, [r7, #12]
 801ba78:	e006      	b.n	801ba88 <nk_scrollbar_behavior+0x62c>
 801ba7a:	693b      	ldr	r3, [r7, #16]
 801ba7c:	edd3 7a02 	vldr	s15, [r3, #8]
 801ba80:	ed97 7a02 	vldr	s14, [r7, #8]
 801ba84:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ba88:	edc7 7a03 	vstr	s15, [r7, #12]
            if (o == NK_VERTICAL)
 801ba8c:	e022      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_START)) {
 801ba8e:	211a      	movs	r1, #26
 801ba90:	69b8      	ldr	r0, [r7, #24]
 801ba92:	f7f9 fdd4 	bl	801563e <nk_input_is_key_pressed>
 801ba96:	4603      	mov	r3, r0
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d007      	beq.n	801baac <nk_scrollbar_behavior+0x650>
            /* update cursor to the beginning  */
            if (o == NK_VERTICAL) scroll_offset = 0;
 801ba9c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d117      	bne.n	801bad4 <nk_scrollbar_behavior+0x678>
 801baa4:	f04f 0300 	mov.w	r3, #0
 801baa8:	60fb      	str	r3, [r7, #12]
 801baaa:	e013      	b.n	801bad4 <nk_scrollbar_behavior+0x678>
        } else if (nk_input_is_key_pressed(in, NK_KEY_SCROLL_END)) {
 801baac:	211b      	movs	r1, #27
 801baae:	69b8      	ldr	r0, [r7, #24]
 801bab0:	f7f9 fdc5 	bl	801563e <nk_input_is_key_pressed>
 801bab4:	4603      	mov	r3, r0
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d00c      	beq.n	801bad4 <nk_scrollbar_behavior+0x678>
            /* update cursor to the end */
            if (o == NK_VERTICAL) scroll_offset = target - scroll->h;
 801baba:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d108      	bne.n	801bad4 <nk_scrollbar_behavior+0x678>
 801bac2:	693b      	ldr	r3, [r7, #16]
 801bac4:	edd3 7a03 	vldr	s15, [r3, #12]
 801bac8:	ed97 7a02 	vldr	s14, [r7, #8]
 801bacc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bad0:	edc7 7a03 	vstr	s15, [r7, #12]
        }
    }
    if (*state & NK_WIDGET_STATE_HOVER && !nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 801bad4:	69fb      	ldr	r3, [r7, #28]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	f003 0310 	and.w	r3, r3, #16
 801badc:	2b00      	cmp	r3, #0
 801bade:	d01d      	beq.n	801bb1c <nk_scrollbar_behavior+0x6c0>
 801bae0:	693b      	ldr	r3, [r7, #16]
 801bae2:	ed93 6a00 	vldr	s12, [r3]
 801bae6:	edd3 6a01 	vldr	s13, [r3, #4]
 801baea:	ed93 7a02 	vldr	s14, [r3, #8]
 801baee:	edd3 7a03 	vldr	s15, [r3, #12]
 801baf2:	eeb0 0a46 	vmov.f32	s0, s12
 801baf6:	eef0 0a66 	vmov.f32	s1, s13
 801bafa:	eeb0 1a47 	vmov.f32	s2, s14
 801bafe:	eef0 1a67 	vmov.f32	s3, s15
 801bb02:	69b8      	ldr	r0, [r7, #24]
 801bb04:	f7f9 fd0e 	bl	8015524 <nk_input_is_mouse_prev_hovering_rect>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d106      	bne.n	801bb1c <nk_scrollbar_behavior+0x6c0>
        *state |= NK_WIDGET_STATE_ENTERED;
 801bb0e:	69fb      	ldr	r3, [r7, #28]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	f043 0208 	orr.w	r2, r3, #8
 801bb16:	69fb      	ldr	r3, [r7, #28]
 801bb18:	601a      	str	r2, [r3, #0]
 801bb1a:	e01c      	b.n	801bb56 <nk_scrollbar_behavior+0x6fa>
    else if (nk_input_is_mouse_prev_hovering_rect(in, *scroll))
 801bb1c:	693b      	ldr	r3, [r7, #16]
 801bb1e:	ed93 6a00 	vldr	s12, [r3]
 801bb22:	edd3 6a01 	vldr	s13, [r3, #4]
 801bb26:	ed93 7a02 	vldr	s14, [r3, #8]
 801bb2a:	edd3 7a03 	vldr	s15, [r3, #12]
 801bb2e:	eeb0 0a46 	vmov.f32	s0, s12
 801bb32:	eef0 0a66 	vmov.f32	s1, s13
 801bb36:	eeb0 1a47 	vmov.f32	s2, s14
 801bb3a:	eef0 1a67 	vmov.f32	s3, s15
 801bb3e:	69b8      	ldr	r0, [r7, #24]
 801bb40:	f7f9 fcf0 	bl	8015524 <nk_input_is_mouse_prev_hovering_rect>
 801bb44:	4603      	mov	r3, r0
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d005      	beq.n	801bb56 <nk_scrollbar_behavior+0x6fa>
        *state |= NK_WIDGET_STATE_LEFT;
 801bb4a:	69fb      	ldr	r3, [r7, #28]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801bb52:	69fb      	ldr	r3, [r7, #28]
 801bb54:	601a      	str	r2, [r3, #0]
    return scroll_offset;
 801bb56:	68fb      	ldr	r3, [r7, #12]
}
 801bb58:	ee07 3a90 	vmov	s15, r3
 801bb5c:	eeb0 0a67 	vmov.f32	s0, s15
 801bb60:	3748      	adds	r7, #72	; 0x48
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop

0801bb68 <nk_draw_scrollbar>:
NK_LIB void
nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,
    const struct nk_style_scrollbar *style, const struct nk_rect *bounds,
    const struct nk_rect *scroll)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b086      	sub	sp, #24
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	60f8      	str	r0, [r7, #12]
 801bb70:	60b9      	str	r1, [r7, #8]
 801bb72:	607a      	str	r2, [r7, #4]
 801bb74:	603b      	str	r3, [r7, #0]
    const struct nk_style_item *background;
    const struct nk_style_item *cursor;

    /* select correct colors/images to draw */
    if (state & NK_WIDGET_STATE_ACTIVED) {
 801bb76:	68bb      	ldr	r3, [r7, #8]
 801bb78:	f003 0320 	and.w	r3, r3, #32
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d006      	beq.n	801bb8e <nk_draw_scrollbar+0x26>
        background = &style->active;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	3338      	adds	r3, #56	; 0x38
 801bb84:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_active;
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	3390      	adds	r3, #144	; 0x90
 801bb8a:	613b      	str	r3, [r7, #16]
 801bb8c:	e010      	b.n	801bbb0 <nk_draw_scrollbar+0x48>
    } else if (state & NK_WIDGET_STATE_HOVER) {
 801bb8e:	68bb      	ldr	r3, [r7, #8]
 801bb90:	f003 0310 	and.w	r3, r3, #16
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d006      	beq.n	801bba6 <nk_draw_scrollbar+0x3e>
        background = &style->hover;
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	331c      	adds	r3, #28
 801bb9c:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_hover;
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	3374      	adds	r3, #116	; 0x74
 801bba2:	613b      	str	r3, [r7, #16]
 801bba4:	e004      	b.n	801bbb0 <nk_draw_scrollbar+0x48>
    } else {
        background = &style->normal;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	617b      	str	r3, [r7, #20]
        cursor = &style->cursor_normal;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	3358      	adds	r3, #88	; 0x58
 801bbae:	613b      	str	r3, [r7, #16]
    }

    /* draw background */
    switch (background->type) {
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	781b      	ldrb	r3, [r3, #0]
 801bbb4:	2b02      	cmp	r3, #2
 801bbb6:	d01e      	beq.n	801bbf6 <nk_draw_scrollbar+0x8e>
 801bbb8:	2b02      	cmp	r3, #2
 801bbba:	dc71      	bgt.n	801bca0 <nk_draw_scrollbar+0x138>
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d033      	beq.n	801bc28 <nk_draw_scrollbar+0xc0>
 801bbc0:	2b01      	cmp	r3, #1
 801bbc2:	d16d      	bne.n	801bca0 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *bounds, &background->data.image, nk_white);
 801bbc4:	697b      	ldr	r3, [r7, #20]
 801bbc6:	1d19      	adds	r1, r3, #4
 801bbc8:	4a74      	ldr	r2, [pc, #464]	; (801bd9c <nk_draw_scrollbar+0x234>)
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	ed93 6a00 	vldr	s12, [r3]
 801bbd0:	edd3 6a01 	vldr	s13, [r3, #4]
 801bbd4:	ed93 7a02 	vldr	s14, [r3, #8]
 801bbd8:	edd3 7a03 	vldr	s15, [r3, #12]
 801bbdc:	6812      	ldr	r2, [r2, #0]
 801bbde:	eeb0 0a46 	vmov.f32	s0, s12
 801bbe2:	eef0 0a66 	vmov.f32	s1, s13
 801bbe6:	eeb0 1a47 	vmov.f32	s2, s14
 801bbea:	eef0 1a67 	vmov.f32	s3, s15
 801bbee:	68f8      	ldr	r0, [r7, #12]
 801bbf0:	f7f6 fabc 	bl	801216c <nk_draw_image>
            break;
 801bbf4:	e054      	b.n	801bca0 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *bounds, &background->data.slice, nk_white);
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	1d19      	adds	r1, r3, #4
 801bbfa:	4a68      	ldr	r2, [pc, #416]	; (801bd9c <nk_draw_scrollbar+0x234>)
 801bbfc:	683b      	ldr	r3, [r7, #0]
 801bbfe:	ed93 6a00 	vldr	s12, [r3]
 801bc02:	edd3 6a01 	vldr	s13, [r3, #4]
 801bc06:	ed93 7a02 	vldr	s14, [r3, #8]
 801bc0a:	edd3 7a03 	vldr	s15, [r3, #12]
 801bc0e:	6812      	ldr	r2, [r2, #0]
 801bc10:	eeb0 0a46 	vmov.f32	s0, s12
 801bc14:	eef0 0a66 	vmov.f32	s1, s13
 801bc18:	eeb0 1a47 	vmov.f32	s2, s14
 801bc1c:	eef0 1a67 	vmov.f32	s3, s15
 801bc20:	68f8      	ldr	r0, [r7, #12]
 801bc22:	f7f6 fb95 	bl	8012350 <nk_draw_nine_slice>
            break;
 801bc26:	e03b      	b.n	801bca0 <nk_draw_scrollbar+0x138>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *bounds, style->rounding, background->data.color);
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 801bc2e:	697a      	ldr	r2, [r7, #20]
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	ed93 6a00 	vldr	s12, [r3]
 801bc36:	edd3 6a01 	vldr	s13, [r3, #4]
 801bc3a:	ed93 7a02 	vldr	s14, [r3, #8]
 801bc3e:	edd3 7a03 	vldr	s15, [r3, #12]
 801bc42:	6851      	ldr	r1, [r2, #4]
 801bc44:	eeb0 2a65 	vmov.f32	s4, s11
 801bc48:	eeb0 0a46 	vmov.f32	s0, s12
 801bc4c:	eef0 0a66 	vmov.f32	s1, s13
 801bc50:	eeb0 1a47 	vmov.f32	s2, s14
 801bc54:	eef0 1a67 	vmov.f32	s3, s15
 801bc58:	68f8      	ldr	r0, [r7, #12]
 801bc5a:	f7f5 ff2d 	bl	8011ab8 <nk_fill_rect>
            nk_stroke_rect(out, *bounds, style->rounding, style->border, style->border_color);
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	edd3 5a2d 	vldr	s11, [r3, #180]	; 0xb4
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
 801bc6a:	687a      	ldr	r2, [r7, #4]
 801bc6c:	683b      	ldr	r3, [r7, #0]
 801bc6e:	ed93 6a00 	vldr	s12, [r3]
 801bc72:	edd3 6a01 	vldr	s13, [r3, #4]
 801bc76:	ed93 7a02 	vldr	s14, [r3, #8]
 801bc7a:	edd3 7a03 	vldr	s15, [r3, #12]
 801bc7e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801bc80:	eef0 2a45 	vmov.f32	s5, s10
 801bc84:	eeb0 2a65 	vmov.f32	s4, s11
 801bc88:	eeb0 0a46 	vmov.f32	s0, s12
 801bc8c:	eef0 0a66 	vmov.f32	s1, s13
 801bc90:	eeb0 1a47 	vmov.f32	s2, s14
 801bc94:	eef0 1a67 	vmov.f32	s3, s15
 801bc98:	68f8      	ldr	r0, [r7, #12]
 801bc9a:	f7f5 fe05 	bl	80118a8 <nk_stroke_rect>
            break;
 801bc9e:	bf00      	nop
    }

    /* draw cursor */
    switch (cursor->type) {
 801bca0:	693b      	ldr	r3, [r7, #16]
 801bca2:	781b      	ldrb	r3, [r3, #0]
 801bca4:	2b02      	cmp	r3, #2
 801bca6:	d01e      	beq.n	801bce6 <nk_draw_scrollbar+0x17e>
 801bca8:	2b02      	cmp	r3, #2
 801bcaa:	dc72      	bgt.n	801bd92 <nk_draw_scrollbar+0x22a>
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d033      	beq.n	801bd18 <nk_draw_scrollbar+0x1b0>
 801bcb0:	2b01      	cmp	r3, #1
 801bcb2:	d16e      	bne.n	801bd92 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_IMAGE:
            nk_draw_image(out, *scroll, &cursor->data.image, nk_white);
 801bcb4:	693b      	ldr	r3, [r7, #16]
 801bcb6:	1d19      	adds	r1, r3, #4
 801bcb8:	4a38      	ldr	r2, [pc, #224]	; (801bd9c <nk_draw_scrollbar+0x234>)
 801bcba:	6a3b      	ldr	r3, [r7, #32]
 801bcbc:	ed93 6a00 	vldr	s12, [r3]
 801bcc0:	edd3 6a01 	vldr	s13, [r3, #4]
 801bcc4:	ed93 7a02 	vldr	s14, [r3, #8]
 801bcc8:	edd3 7a03 	vldr	s15, [r3, #12]
 801bccc:	6812      	ldr	r2, [r2, #0]
 801bcce:	eeb0 0a46 	vmov.f32	s0, s12
 801bcd2:	eef0 0a66 	vmov.f32	s1, s13
 801bcd6:	eeb0 1a47 	vmov.f32	s2, s14
 801bcda:	eef0 1a67 	vmov.f32	s3, s15
 801bcde:	68f8      	ldr	r0, [r7, #12]
 801bce0:	f7f6 fa44 	bl	801216c <nk_draw_image>
            break;
 801bce4:	e055      	b.n	801bd92 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_NINE_SLICE:
            nk_draw_nine_slice(out, *scroll, &cursor->data.slice, nk_white);
 801bce6:	693b      	ldr	r3, [r7, #16]
 801bce8:	1d19      	adds	r1, r3, #4
 801bcea:	4a2c      	ldr	r2, [pc, #176]	; (801bd9c <nk_draw_scrollbar+0x234>)
 801bcec:	6a3b      	ldr	r3, [r7, #32]
 801bcee:	ed93 6a00 	vldr	s12, [r3]
 801bcf2:	edd3 6a01 	vldr	s13, [r3, #4]
 801bcf6:	ed93 7a02 	vldr	s14, [r3, #8]
 801bcfa:	edd3 7a03 	vldr	s15, [r3, #12]
 801bcfe:	6812      	ldr	r2, [r2, #0]
 801bd00:	eeb0 0a46 	vmov.f32	s0, s12
 801bd04:	eef0 0a66 	vmov.f32	s1, s13
 801bd08:	eeb0 1a47 	vmov.f32	s2, s14
 801bd0c:	eef0 1a67 	vmov.f32	s3, s15
 801bd10:	68f8      	ldr	r0, [r7, #12]
 801bd12:	f7f6 fb1d 	bl	8012350 <nk_draw_nine_slice>
            break;
 801bd16:	e03c      	b.n	801bd92 <nk_draw_scrollbar+0x22a>
        case NK_STYLE_ITEM_COLOR:
            nk_fill_rect(out, *scroll, style->rounding_cursor, cursor->data.color);
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 801bd1e:	693a      	ldr	r2, [r7, #16]
 801bd20:	6a3b      	ldr	r3, [r7, #32]
 801bd22:	ed93 6a00 	vldr	s12, [r3]
 801bd26:	edd3 6a01 	vldr	s13, [r3, #4]
 801bd2a:	ed93 7a02 	vldr	s14, [r3, #8]
 801bd2e:	edd3 7a03 	vldr	s15, [r3, #12]
 801bd32:	6851      	ldr	r1, [r2, #4]
 801bd34:	eeb0 2a65 	vmov.f32	s4, s11
 801bd38:	eeb0 0a46 	vmov.f32	s0, s12
 801bd3c:	eef0 0a66 	vmov.f32	s1, s13
 801bd40:	eeb0 1a47 	vmov.f32	s2, s14
 801bd44:	eef0 1a67 	vmov.f32	s3, s15
 801bd48:	68f8      	ldr	r0, [r7, #12]
 801bd4a:	f7f5 feb5 	bl	8011ab8 <nk_fill_rect>
            nk_stroke_rect(out, *scroll, style->rounding_cursor, style->border_cursor, style->cursor_border_color);
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	ed93 5a2e 	vldr	s10, [r3, #184]	; 0xb8
 801bd5a:	687a      	ldr	r2, [r7, #4]
 801bd5c:	6a3b      	ldr	r3, [r7, #32]
 801bd5e:	ed93 6a00 	vldr	s12, [r3]
 801bd62:	edd3 6a01 	vldr	s13, [r3, #4]
 801bd66:	ed93 7a02 	vldr	s14, [r3, #8]
 801bd6a:	edd3 7a03 	vldr	s15, [r3, #12]
 801bd6e:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 801bd72:	eef0 2a45 	vmov.f32	s5, s10
 801bd76:	eeb0 2a65 	vmov.f32	s4, s11
 801bd7a:	eeb0 0a46 	vmov.f32	s0, s12
 801bd7e:	eef0 0a66 	vmov.f32	s1, s13
 801bd82:	eeb0 1a47 	vmov.f32	s2, s14
 801bd86:	eef0 1a67 	vmov.f32	s3, s15
 801bd8a:	68f8      	ldr	r0, [r7, #12]
 801bd8c:	f7f5 fd8c 	bl	80118a8 <nk_stroke_rect>
            break;
 801bd90:	bf00      	nop
    }
}
 801bd92:	bf00      	nop
 801bd94:	3718      	adds	r7, #24
 801bd96:	46bd      	mov	sp, r7
 801bd98:	bd80      	pop	{r7, pc}
 801bd9a:	bf00      	nop
 801bd9c:	0802a9a8 	.word	0x0802a9a8

0801bda0 <nk_do_scrollbarv>:
nk_do_scrollbarv(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	b0a6      	sub	sp, #152	; 0x98
 801bda4:	af04      	add	r7, sp, #16
 801bda6:	62f8      	str	r0, [r7, #44]	; 0x2c
 801bda8:	62b9      	str	r1, [r7, #40]	; 0x28
 801bdaa:	eeb0 6a40 	vmov.f32	s12, s0
 801bdae:	eef0 6a60 	vmov.f32	s13, s1
 801bdb2:	eeb0 7a41 	vmov.f32	s14, s2
 801bdb6:	eef0 7a61 	vmov.f32	s15, s3
 801bdba:	617a      	str	r2, [r7, #20]
 801bdbc:	ed87 2a04 	vstr	s4, [r7, #16]
 801bdc0:	edc7 2a03 	vstr	s5, [r7, #12]
 801bdc4:	ed87 3a02 	vstr	s6, [r7, #8]
 801bdc8:	edc7 3a01 	vstr	s7, [r7, #4]
 801bdcc:	603b      	str	r3, [r7, #0]
 801bdce:	ed87 6a06 	vstr	s12, [r7, #24]
 801bdd2:	edc7 6a07 	vstr	s13, [r7, #28]
 801bdd6:	ed87 7a08 	vstr	s14, [r7, #32]
 801bdda:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 801bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d105      	bne.n	801bdf0 <nk_do_scrollbarv+0x50>
 801bde4:	4bb6      	ldr	r3, [pc, #728]	; (801c0c0 <nk_do_scrollbarv+0x320>)
 801bde6:	4ab7      	ldr	r2, [pc, #732]	; (801c0c4 <nk_do_scrollbarv+0x324>)
 801bde8:	2195      	movs	r1, #149	; 0x95
 801bdea:	48b7      	ldr	r0, [pc, #732]	; (801c0c8 <nk_do_scrollbarv+0x328>)
 801bdec:	f008 fe80 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 801bdf0:	683b      	ldr	r3, [r7, #0]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d105      	bne.n	801be02 <nk_do_scrollbarv+0x62>
 801bdf6:	4bb5      	ldr	r3, [pc, #724]	; (801c0cc <nk_do_scrollbarv+0x32c>)
 801bdf8:	4ab2      	ldr	r2, [pc, #712]	; (801c0c4 <nk_do_scrollbarv+0x324>)
 801bdfa:	2196      	movs	r1, #150	; 0x96
 801bdfc:	48b2      	ldr	r0, [pc, #712]	; (801c0c8 <nk_do_scrollbarv+0x328>)
 801bdfe:	f008 fe77 	bl	8024af0 <__assert_func>
    NK_ASSERT(state);
 801be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be04:	2b00      	cmp	r3, #0
 801be06:	d105      	bne.n	801be14 <nk_do_scrollbarv+0x74>
 801be08:	4bb1      	ldr	r3, [pc, #708]	; (801c0d0 <nk_do_scrollbarv+0x330>)
 801be0a:	4aae      	ldr	r2, [pc, #696]	; (801c0c4 <nk_do_scrollbarv+0x324>)
 801be0c:	2197      	movs	r1, #151	; 0x97
 801be0e:	48ae      	ldr	r0, [pc, #696]	; (801c0c8 <nk_do_scrollbarv+0x328>)
 801be10:	f008 fe6e 	bl	8024af0 <__assert_func>
    if (!out || !style) return 0;
 801be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be16:	2b00      	cmp	r3, #0
 801be18:	d002      	beq.n	801be20 <nk_do_scrollbarv+0x80>
 801be1a:	683b      	ldr	r3, [r7, #0]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d102      	bne.n	801be26 <nk_do_scrollbarv+0x86>
 801be20:	f04f 0300 	mov.w	r3, #0
 801be24:	e253      	b.n	801c2ce <nk_do_scrollbarv+0x52e>

    scroll.w = NK_MAX(scroll.w, 1);
 801be26:	edd7 7a08 	vldr	s15, [r7, #32]
 801be2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801be32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be36:	d502      	bpl.n	801be3e <nk_do_scrollbarv+0x9e>
 801be38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801be3c:	e000      	b.n	801be40 <nk_do_scrollbarv+0xa0>
 801be3e:	6a3b      	ldr	r3, [r7, #32]
 801be40:	623b      	str	r3, [r7, #32]
    scroll.h = NK_MAX(scroll.h, 0);
 801be42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801be46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be4e:	d502      	bpl.n	801be56 <nk_do_scrollbarv+0xb6>
 801be50:	f04f 0300 	mov.w	r3, #0
 801be54:	e000      	b.n	801be58 <nk_do_scrollbarv+0xb8>
 801be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be58:	627b      	str	r3, [r7, #36]	; 0x24
    if (target <= scroll.h) return 0;
 801be5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801be5e:	ed97 7a03 	vldr	s14, [r7, #12]
 801be62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be6a:	d802      	bhi.n	801be72 <nk_do_scrollbarv+0xd2>
 801be6c:	f04f 0300 	mov.w	r3, #0
 801be70:	e22d      	b.n	801c2ce <nk_do_scrollbarv+0x52e>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801be78:	2b00      	cmp	r3, #0
 801be7a:	f000 80a4 	beq.w	801bfc6 <nk_do_scrollbarv+0x226>
        nk_flags ws;
        float scroll_h;
        struct nk_rect button;

        button.x = scroll.x;
 801be7e:	69bb      	ldr	r3, [r7, #24]
 801be80:	633b      	str	r3, [r7, #48]	; 0x30
        button.w = scroll.w;
 801be82:	6a3b      	ldr	r3, [r7, #32]
 801be84:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.w;
 801be86:	6a3b      	ldr	r3, [r7, #32]
 801be88:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_h = NK_MAX(scroll.h - 2 * button.h,0);
 801be8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801be8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801be92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801be96:	ee77 7a67 	vsub.f32	s15, s14, s15
 801be9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801be9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bea2:	d502      	bpl.n	801beaa <nk_do_scrollbarv+0x10a>
 801bea4:	eddf 7a8b 	vldr	s15, [pc, #556]	; 801c0d4 <nk_do_scrollbarv+0x334>
 801bea8:	e007      	b.n	801beba <nk_do_scrollbarv+0x11a>
 801beaa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801beae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801beb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801beb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801beba:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 801bebe:	ed97 7a02 	vldr	s14, [r7, #8]
 801bec2:	edd7 7a01 	vldr	s15, [r7, #4]
 801bec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bece:	d501      	bpl.n	801bed4 <nk_do_scrollbarv+0x134>
 801bed0:	68bb      	ldr	r3, [r7, #8]
 801bed2:	e000      	b.n	801bed6 <nk_do_scrollbarv+0x136>
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.y = scroll.y;
 801beda:	69fb      	ldr	r3, [r7, #28]
 801bedc:	637b      	str	r3, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 801bede:	683b      	ldr	r3, [r7, #0]
 801bee0:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801beea:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801beee:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801bef2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bef6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801befa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801befe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bf02:	9202      	str	r2, [sp, #8]
 801bf04:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801bf08:	9201      	str	r2, [sp, #4]
 801bf0a:	9300      	str	r3, [sp, #0]
 801bf0c:	2301      	movs	r3, #1
 801bf0e:	460a      	mov	r2, r1
 801bf10:	eeb0 0a46 	vmov.f32	s0, s12
 801bf14:	eef0 0a66 	vmov.f32	s1, s13
 801bf18:	eeb0 1a47 	vmov.f32	s2, s14
 801bf1c:	eef0 1a67 	vmov.f32	s3, s15
 801bf20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf22:	f7f3 fc35 	bl	800f790 <nk_do_button_symbol>
 801bf26:	4603      	mov	r3, r0
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d007      	beq.n	801bf3c <nk_do_scrollbarv+0x19c>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 801bf2c:	ed97 7a04 	vldr	s14, [r7, #16]
 801bf30:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801bf34:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bf38:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.y = scroll.y + scroll.h - button.h;
 801bf3c:	ed97 7a07 	vldr	s14, [r7, #28]
 801bf40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bf44:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bf48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bf4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bf50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 801bf54:	683b      	ldr	r3, [r7, #0]
 801bf56:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	33cc      	adds	r3, #204	; 0xcc
 801bf5e:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801bf62:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801bf66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801bf6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bf6e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801bf72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bf76:	9202      	str	r2, [sp, #8]
 801bf78:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801bf7c:	9201      	str	r2, [sp, #4]
 801bf7e:	9300      	str	r3, [sp, #0]
 801bf80:	2301      	movs	r3, #1
 801bf82:	460a      	mov	r2, r1
 801bf84:	eeb0 0a46 	vmov.f32	s0, s12
 801bf88:	eef0 0a66 	vmov.f32	s1, s13
 801bf8c:	eeb0 1a47 	vmov.f32	s2, s14
 801bf90:	eef0 1a67 	vmov.f32	s3, s15
 801bf94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf96:	f7f3 fbfb 	bl	800f790 <nk_do_button_symbol>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d007      	beq.n	801bfb0 <nk_do_scrollbarv+0x210>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 801bfa0:	ed97 7a04 	vldr	s14, [r7, #16]
 801bfa4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801bfa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bfac:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.y = scroll.y + button.h;
 801bfb0:	ed97 7a07 	vldr	s14, [r7, #28]
 801bfb4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801bfb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        scroll.h = scroll_h;
 801bfc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bfc4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.h);
 801bfc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bfca:	ed97 7a02 	vldr	s14, [r7, #8]
 801bfce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfd6:	d501      	bpl.n	801bfdc <nk_do_scrollbarv+0x23c>
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	e000      	b.n	801bfde <nk_do_scrollbarv+0x23e>
 801bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.h);
 801bfe2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801bfe6:	ed97 7a03 	vldr	s14, [r7, #12]
 801bfea:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bfee:	ed97 7a04 	vldr	s14, [r7, #16]
 801bff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bffa:	d50a      	bpl.n	801c012 <nk_do_scrollbarv+0x272>
 801bffc:	edd7 7a04 	vldr	s15, [r7, #16]
 801c000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c008:	bf4c      	ite	mi
 801c00a:	2301      	movmi	r3, #1
 801c00c:	2300      	movpl	r3, #0
 801c00e:	b2db      	uxtb	r3, r3
 801c010:	e00d      	b.n	801c02e <nk_do_scrollbarv+0x28e>
 801c012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c016:	ed97 7a03 	vldr	s14, [r7, #12]
 801c01a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c01e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c026:	bf4c      	ite	mi
 801c028:	2301      	movmi	r3, #1
 801c02a:	2300      	movpl	r3, #0
 801c02c:	b2db      	uxtb	r3, r3
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d002      	beq.n	801c038 <nk_do_scrollbarv+0x298>
 801c032:	eddf 7a28 	vldr	s15, [pc, #160]	; 801c0d4 <nk_do_scrollbarv+0x334>
 801c036:	e015      	b.n	801c064 <nk_do_scrollbarv+0x2c4>
 801c038:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c03c:	ed97 7a03 	vldr	s14, [r7, #12]
 801c040:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c044:	ed97 7a04 	vldr	s14, [r7, #16]
 801c048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c050:	d502      	bpl.n	801c058 <nk_do_scrollbarv+0x2b8>
 801c052:	edd7 7a04 	vldr	s15, [r7, #16]
 801c056:	e005      	b.n	801c064 <nk_do_scrollbarv+0x2c4>
 801c058:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c05c:	ed97 7a03 	vldr	s14, [r7, #12]
 801c060:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c064:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.h / target;
 801c068:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c06c:	ed97 7a03 	vldr	s14, [r7, #12]
 801c070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c074:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 801c078:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c07c:	ed97 7a03 	vldr	s14, [r7, #12]
 801c080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c084:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate scrollbar cursor bounds */
    cursor.h = NK_MAX((scroll_ratio * scroll.h) - (2*style->border + 2*style->padding.y), 0);
 801c088:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c08c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801c090:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c094:	683b      	ldr	r3, [r7, #0]
 801c096:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c09a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c09e:	683b      	ldr	r3, [r7, #0]
 801c0a0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c0a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c0b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0b8:	d50e      	bpl.n	801c0d8 <nk_do_scrollbarv+0x338>
 801c0ba:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c0d4 <nk_do_scrollbarv+0x334>
 801c0be:	e01f      	b.n	801c100 <nk_do_scrollbarv+0x360>
 801c0c0:	08028dbc 	.word	0x08028dbc
 801c0c4:	0802a9ac 	.word	0x0802a9ac
 801c0c8:	08028dc0 	.word	0x08028dc0
 801c0cc:	08028de0 	.word	0x08028de0
 801c0d0:	08028de8 	.word	0x08028de8
 801c0d4:	00000000 	.word	0x00000000
 801c0d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c0dc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801c0e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c0e4:	683b      	ldr	r3, [r7, #0]
 801c0e6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c0ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c0f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c0f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c100:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border + style->padding.y;
 801c104:	ed97 7a07 	vldr	s14, [r7, #28]
 801c108:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c10c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c114:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c118:	683b      	ldr	r3, [r7, #0]
 801c11a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c11e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c128:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c12c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    cursor.w = scroll.w - (2 * style->border + 2 * style->padding.x);
 801c130:	ed97 7a08 	vldr	s14, [r7, #32]
 801c134:	683b      	ldr	r3, [r7, #0]
 801c136:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c13a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c144:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c14c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c150:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    cursor.x = scroll.x + style->border + style->padding.x;
 801c154:	ed97 7a06 	vldr	s14, [r7, #24]
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c15e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c168:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c16c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    /* calculate empty space around cursor */
    empty_north.x = scroll.x;
 801c170:	69bb      	ldr	r3, [r7, #24]
 801c172:	667b      	str	r3, [r7, #100]	; 0x64
    empty_north.y = scroll.y;
 801c174:	69fb      	ldr	r3, [r7, #28]
 801c176:	66bb      	str	r3, [r7, #104]	; 0x68
    empty_north.w = scroll.w;
 801c178:	6a3b      	ldr	r3, [r7, #32]
 801c17a:	66fb      	str	r3, [r7, #108]	; 0x6c
    empty_north.h = NK_MAX(cursor.y - scroll.y, 0);
 801c17c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801c180:	edd7 7a07 	vldr	s15, [r7, #28]
 801c184:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c190:	d502      	bpl.n	801c198 <nk_do_scrollbarv+0x3f8>
 801c192:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 801c0d4 <nk_do_scrollbarv+0x334>
 801c196:	e005      	b.n	801c1a4 <nk_do_scrollbarv+0x404>
 801c198:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801c19c:	edd7 7a07 	vldr	s15, [r7, #28]
 801c1a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c1a4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    empty_south.x = scroll.x;
 801c1a8:	69bb      	ldr	r3, [r7, #24]
 801c1aa:	657b      	str	r3, [r7, #84]	; 0x54
    empty_south.y = cursor.y + cursor.h;
 801c1ac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801c1b0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801c1b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c1b8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    empty_south.w = scroll.w;
 801c1bc:	6a3b      	ldr	r3, [r7, #32]
 801c1be:	65fb      	str	r3, [r7, #92]	; 0x5c
    empty_south.h = NK_MAX((scroll.y + scroll.h) - (cursor.y + cursor.h), 0);
 801c1c0:	ed97 7a07 	vldr	s14, [r7, #28]
 801c1c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c1c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c1cc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801c1d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801c1d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c1dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1e4:	d502      	bpl.n	801c1ec <nk_do_scrollbarv+0x44c>
 801c1e6:	ed5f 7a45 	vldr	s15, [pc, #-276]	; 801c0d4 <nk_do_scrollbarv+0x334>
 801c1ea:	e00d      	b.n	801c208 <nk_do_scrollbarv+0x468>
 801c1ec:	ed97 7a07 	vldr	s14, [r7, #28]
 801c1f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c1f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c1f8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801c1fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801c200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c204:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c208:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 801c20c:	f107 0218 	add.w	r2, r7, #24
 801c210:	2300      	movs	r3, #0
 801c212:	9303      	str	r3, [sp, #12]
 801c214:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c218:	9302      	str	r3, [sp, #8]
 801c21a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c21e:	9301      	str	r3, [sp, #4]
 801c220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c224:	9300      	str	r3, [sp, #0]
 801c226:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801c22a:	edd7 0a03 	vldr	s1, [r7, #12]
 801c22e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801c232:	4613      	mov	r3, r2
 801c234:	697a      	ldr	r2, [r7, #20]
 801c236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c23c:	f7ff f90e 	bl	801b45c <nk_scrollbar_behavior>
 801c240:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_north, &empty_south, scroll_offset, target, scroll_step, NK_VERTICAL);
    scroll_off = scroll_offset / target;
 801c244:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c248:	ed97 7a03 	vldr	s14, [r7, #12]
 801c24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c250:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.y = scroll.y + (scroll_off * scroll.h) + style->border_cursor + style->padding.y;
 801c254:	ed97 7a07 	vldr	s14, [r7, #28]
 801c258:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801c25c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c264:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c268:	683b      	ldr	r3, [r7, #0]
 801c26a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 801c26e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c278:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c27c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801c280:	683b      	ldr	r3, [r7, #0]
 801c282:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c286:	2b00      	cmp	r3, #0
 801c288:	d007      	beq.n	801c29a <nk_do_scrollbarv+0x4fa>
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c290:	683a      	ldr	r2, [r7, #0]
 801c292:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c298:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 801c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c29c:	6819      	ldr	r1, [r3, #0]
 801c29e:	f107 0218 	add.w	r2, r7, #24
 801c2a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c2a6:	9300      	str	r3, [sp, #0]
 801c2a8:	4613      	mov	r3, r2
 801c2aa:	683a      	ldr	r2, [r7, #0]
 801c2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c2ae:	f7ff fc5b 	bl	801bb68 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801c2b2:	683b      	ldr	r3, [r7, #0]
 801c2b4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d007      	beq.n	801c2cc <nk_do_scrollbarv+0x52c>
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c2c2:	683a      	ldr	r2, [r7, #0]
 801c2c4:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c2ca:	4798      	blx	r3
    return scroll_offset;
 801c2cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801c2ce:	ee07 3a90 	vmov	s15, r3
 801c2d2:	eeb0 0a67 	vmov.f32	s0, s15
 801c2d6:	3788      	adds	r7, #136	; 0x88
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}

0801c2dc <nk_do_scrollbarh>:
nk_do_scrollbarh(nk_flags *state,
    struct nk_command_buffer *out, struct nk_rect scroll, int has_scrolling,
    float offset, float target, float step, float button_pixel_inc,
    const struct nk_style_scrollbar *style, struct nk_input *in,
    const struct nk_user_font *font)
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b0a6      	sub	sp, #152	; 0x98
 801c2e0:	af04      	add	r7, sp, #16
 801c2e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 801c2e4:	62b9      	str	r1, [r7, #40]	; 0x28
 801c2e6:	eeb0 6a40 	vmov.f32	s12, s0
 801c2ea:	eef0 6a60 	vmov.f32	s13, s1
 801c2ee:	eeb0 7a41 	vmov.f32	s14, s2
 801c2f2:	eef0 7a61 	vmov.f32	s15, s3
 801c2f6:	617a      	str	r2, [r7, #20]
 801c2f8:	ed87 2a04 	vstr	s4, [r7, #16]
 801c2fc:	edc7 2a03 	vstr	s5, [r7, #12]
 801c300:	ed87 3a02 	vstr	s6, [r7, #8]
 801c304:	edc7 3a01 	vstr	s7, [r7, #4]
 801c308:	603b      	str	r3, [r7, #0]
 801c30a:	ed87 6a06 	vstr	s12, [r7, #24]
 801c30e:	edc7 6a07 	vstr	s13, [r7, #28]
 801c312:	ed87 7a08 	vstr	s14, [r7, #32]
 801c316:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float scroll_step;
    float scroll_offset;
    float scroll_off;
    float scroll_ratio;

    NK_ASSERT(out);
 801c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d105      	bne.n	801c32c <nk_do_scrollbarh+0x50>
 801c320:	4b94      	ldr	r3, [pc, #592]	; (801c574 <nk_do_scrollbarh+0x298>)
 801c322:	4a95      	ldr	r2, [pc, #596]	; (801c578 <nk_do_scrollbarh+0x29c>)
 801c324:	21ee      	movs	r1, #238	; 0xee
 801c326:	4895      	ldr	r0, [pc, #596]	; (801c57c <nk_do_scrollbarh+0x2a0>)
 801c328:	f008 fbe2 	bl	8024af0 <__assert_func>
    NK_ASSERT(style);
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d105      	bne.n	801c33e <nk_do_scrollbarh+0x62>
 801c332:	4b93      	ldr	r3, [pc, #588]	; (801c580 <nk_do_scrollbarh+0x2a4>)
 801c334:	4a90      	ldr	r2, [pc, #576]	; (801c578 <nk_do_scrollbarh+0x29c>)
 801c336:	21ef      	movs	r1, #239	; 0xef
 801c338:	4890      	ldr	r0, [pc, #576]	; (801c57c <nk_do_scrollbarh+0x2a0>)
 801c33a:	f008 fbd9 	bl	8024af0 <__assert_func>
    if (!out || !style) return 0;
 801c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c340:	2b00      	cmp	r3, #0
 801c342:	d002      	beq.n	801c34a <nk_do_scrollbarh+0x6e>
 801c344:	683b      	ldr	r3, [r7, #0]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d102      	bne.n	801c350 <nk_do_scrollbarh+0x74>
 801c34a:	f04f 0300 	mov.w	r3, #0
 801c34e:	e200      	b.n	801c752 <nk_do_scrollbarh+0x476>

    /* scrollbar background */
    scroll.h = NK_MAX(scroll.h, 1);
 801c350:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c358:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c360:	d502      	bpl.n	801c368 <nk_do_scrollbarh+0x8c>
 801c362:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c366:	e000      	b.n	801c36a <nk_do_scrollbarh+0x8e>
 801c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c36a:	627b      	str	r3, [r7, #36]	; 0x24
    scroll.w = NK_MAX(scroll.w, 2 * scroll.h);
 801c36c:	ed97 7a08 	vldr	s14, [r7, #32]
 801c370:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c374:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c380:	d504      	bpl.n	801c38c <nk_do_scrollbarh+0xb0>
 801c382:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801c386:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c38a:	e001      	b.n	801c390 <nk_do_scrollbarh+0xb4>
 801c38c:	edd7 7a08 	vldr	s15, [r7, #32]
 801c390:	edc7 7a08 	vstr	s15, [r7, #32]
    if (target <= scroll.w) return 0;
 801c394:	edd7 7a08 	vldr	s15, [r7, #32]
 801c398:	ed97 7a03 	vldr	s14, [r7, #12]
 801c39c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3a4:	d802      	bhi.n	801c3ac <nk_do_scrollbarh+0xd0>
 801c3a6:	f04f 0300 	mov.w	r3, #0
 801c3aa:	e1d2      	b.n	801c752 <nk_do_scrollbarh+0x476>

    /* optional scrollbar buttons */
    if (style->show_buttons) {
 801c3ac:	683b      	ldr	r3, [r7, #0]
 801c3ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	f000 8094 	beq.w	801c4e0 <nk_do_scrollbarh+0x204>
        nk_flags ws;
        float scroll_w;
        struct nk_rect button;
        button.y = scroll.y;
 801c3b8:	69fb      	ldr	r3, [r7, #28]
 801c3ba:	637b      	str	r3, [r7, #52]	; 0x34
        button.w = scroll.h;
 801c3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3be:	63bb      	str	r3, [r7, #56]	; 0x38
        button.h = scroll.h;
 801c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c

        scroll_w = scroll.w - 2 * button.w;
 801c3c4:	ed97 7a08 	vldr	s14, [r7, #32]
 801c3c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c3cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c3d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c3d4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        scroll_step = NK_MIN(step, button_pixel_inc);
 801c3d8:	ed97 7a02 	vldr	s14, [r7, #8]
 801c3dc:	edd7 7a01 	vldr	s15, [r7, #4]
 801c3e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3e8:	d501      	bpl.n	801c3ee <nk_do_scrollbarh+0x112>
 801c3ea:	68bb      	ldr	r3, [r7, #8]
 801c3ec:	e000      	b.n	801c3f0 <nk_do_scrollbarh+0x114>
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* decrement button */
        button.x = scroll.x;
 801c3f4:	69bb      	ldr	r3, [r7, #24]
 801c3f6:	633b      	str	r3, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->dec_symbol,
 801c3f8:	683b      	ldr	r3, [r7, #0]
 801c3fa:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801c3fe:	683b      	ldr	r3, [r7, #0]
 801c400:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801c404:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801c408:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c40c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801c410:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801c414:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c418:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c41c:	9202      	str	r2, [sp, #8]
 801c41e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c422:	9201      	str	r2, [sp, #4]
 801c424:	9300      	str	r3, [sp, #0]
 801c426:	2301      	movs	r3, #1
 801c428:	460a      	mov	r2, r1
 801c42a:	eeb0 0a46 	vmov.f32	s0, s12
 801c42e:	eef0 0a66 	vmov.f32	s1, s13
 801c432:	eeb0 1a47 	vmov.f32	s2, s14
 801c436:	eef0 1a67 	vmov.f32	s3, s15
 801c43a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c43c:	f7f3 f9a8 	bl	800f790 <nk_do_button_symbol>
 801c440:	4603      	mov	r3, r0
 801c442:	2b00      	cmp	r3, #0
 801c444:	d007      	beq.n	801c456 <nk_do_scrollbarh+0x17a>
            NK_BUTTON_REPEATER, &style->dec_button, in, font))
            offset = offset - scroll_step;
 801c446:	ed97 7a04 	vldr	s14, [r7, #16]
 801c44a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801c44e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c452:	edc7 7a04 	vstr	s15, [r7, #16]

        /* increment button */
        button.x = scroll.x + scroll.w - button.w;
 801c456:	ed97 7a06 	vldr	s14, [r7, #24]
 801c45a:	edd7 7a08 	vldr	s15, [r7, #32]
 801c45e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c462:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c466:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c46a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if (nk_do_button_symbol(&ws, out, button, style->inc_symbol,
 801c46e:	683b      	ldr	r3, [r7, #0]
 801c470:	f893 11fc 	ldrb.w	r1, [r3, #508]	; 0x1fc
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	33cc      	adds	r3, #204	; 0xcc
 801c478:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 801c47c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801c480:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801c484:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801c488:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801c48c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c490:	9202      	str	r2, [sp, #8]
 801c492:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801c496:	9201      	str	r2, [sp, #4]
 801c498:	9300      	str	r3, [sp, #0]
 801c49a:	2301      	movs	r3, #1
 801c49c:	460a      	mov	r2, r1
 801c49e:	eeb0 0a46 	vmov.f32	s0, s12
 801c4a2:	eef0 0a66 	vmov.f32	s1, s13
 801c4a6:	eeb0 1a47 	vmov.f32	s2, s14
 801c4aa:	eef0 1a67 	vmov.f32	s3, s15
 801c4ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c4b0:	f7f3 f96e 	bl	800f790 <nk_do_button_symbol>
 801c4b4:	4603      	mov	r3, r0
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d007      	beq.n	801c4ca <nk_do_scrollbarh+0x1ee>
            NK_BUTTON_REPEATER, &style->inc_button, in, font))
            offset = offset + scroll_step;
 801c4ba:	ed97 7a04 	vldr	s14, [r7, #16]
 801c4be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801c4c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c4c6:	edc7 7a04 	vstr	s15, [r7, #16]

        scroll.x = scroll.x + button.w;
 801c4ca:	ed97 7a06 	vldr	s14, [r7, #24]
 801c4ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801c4d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c4d6:	edc7 7a06 	vstr	s15, [r7, #24]
        scroll.w = scroll_w;
 801c4da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c4de:	623b      	str	r3, [r7, #32]
    }

    /* calculate scrollbar constants */
    scroll_step = NK_MIN(step, scroll.w);
 801c4e0:	edd7 7a08 	vldr	s15, [r7, #32]
 801c4e4:	ed97 7a02 	vldr	s14, [r7, #8]
 801c4e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4f0:	d501      	bpl.n	801c4f6 <nk_do_scrollbarh+0x21a>
 801c4f2:	68bb      	ldr	r3, [r7, #8]
 801c4f4:	e000      	b.n	801c4f8 <nk_do_scrollbarh+0x21c>
 801c4f6:	6a3b      	ldr	r3, [r7, #32]
 801c4f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    scroll_offset = NK_CLAMP(0, offset, target - scroll.w);
 801c4fc:	edd7 7a08 	vldr	s15, [r7, #32]
 801c500:	ed97 7a03 	vldr	s14, [r7, #12]
 801c504:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c508:	ed97 7a04 	vldr	s14, [r7, #16]
 801c50c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c514:	d50a      	bpl.n	801c52c <nk_do_scrollbarh+0x250>
 801c516:	edd7 7a04 	vldr	s15, [r7, #16]
 801c51a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c522:	bf4c      	ite	mi
 801c524:	2301      	movmi	r3, #1
 801c526:	2300      	movpl	r3, #0
 801c528:	b2db      	uxtb	r3, r3
 801c52a:	e00d      	b.n	801c548 <nk_do_scrollbarh+0x26c>
 801c52c:	edd7 7a08 	vldr	s15, [r7, #32]
 801c530:	ed97 7a03 	vldr	s14, [r7, #12]
 801c534:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c540:	bf4c      	ite	mi
 801c542:	2301      	movmi	r3, #1
 801c544:	2300      	movpl	r3, #0
 801c546:	b2db      	uxtb	r3, r3
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d002      	beq.n	801c552 <nk_do_scrollbarh+0x276>
 801c54c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c584 <nk_do_scrollbarh+0x2a8>
 801c550:	e020      	b.n	801c594 <nk_do_scrollbarh+0x2b8>
 801c552:	edd7 7a08 	vldr	s15, [r7, #32]
 801c556:	ed97 7a03 	vldr	s14, [r7, #12]
 801c55a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c55e:	ed97 7a04 	vldr	s14, [r7, #16]
 801c562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c56a:	d50d      	bpl.n	801c588 <nk_do_scrollbarh+0x2ac>
 801c56c:	edd7 7a04 	vldr	s15, [r7, #16]
 801c570:	e010      	b.n	801c594 <nk_do_scrollbarh+0x2b8>
 801c572:	bf00      	nop
 801c574:	08028dbc 	.word	0x08028dbc
 801c578:	0802a9c0 	.word	0x0802a9c0
 801c57c:	08028dc0 	.word	0x08028dc0
 801c580:	08028de0 	.word	0x08028de0
 801c584:	00000000 	.word	0x00000000
 801c588:	edd7 7a08 	vldr	s15, [r7, #32]
 801c58c:	ed97 7a03 	vldr	s14, [r7, #12]
 801c590:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c594:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    scroll_ratio = scroll.w / target;
 801c598:	edd7 6a08 	vldr	s13, [r7, #32]
 801c59c:	ed97 7a03 	vldr	s14, [r7, #12]
 801c5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c5a4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    scroll_off = scroll_offset / target;
 801c5a8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c5ac:	ed97 7a03 	vldr	s14, [r7, #12]
 801c5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c5b4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

    /* calculate cursor bounds */
    cursor.w = (scroll_ratio * scroll.w) - (2*style->border + 2*style->padding.x);
 801c5b8:	ed97 7a08 	vldr	s14, [r7, #32]
 801c5bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801c5c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c5c4:	683b      	ldr	r3, [r7, #0]
 801c5c6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c5ca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c5ce:	683b      	ldr	r3, [r7, #0]
 801c5d0:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c5d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c5d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c5dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c5e0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    cursor.x = scroll.x + (scroll_off * scroll.w) + style->border + style->padding.x;
 801c5e4:	ed97 7a06 	vldr	s14, [r7, #24]
 801c5e8:	edd7 6a08 	vldr	s13, [r7, #32]
 801c5ec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c5f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c5f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c5fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c602:	683b      	ldr	r3, [r7, #0]
 801c604:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 801c608:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c60c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    cursor.h = scroll.h - (2 * style->border + 2 * style->padding.y);
 801c610:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c61a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801c61e:	683b      	ldr	r3, [r7, #0]
 801c620:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c624:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c62c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c630:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    cursor.y = scroll.y + style->border + style->padding.y;
 801c634:	ed97 7a07 	vldr	s14, [r7, #28]
 801c638:	683b      	ldr	r3, [r7, #0]
 801c63a:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 801c63e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c642:	683b      	ldr	r3, [r7, #0]
 801c644:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 801c648:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c64c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* calculate empty space around cursor */
    empty_west.x = scroll.x;
 801c650:	69bb      	ldr	r3, [r7, #24]
 801c652:	657b      	str	r3, [r7, #84]	; 0x54
    empty_west.y = scroll.y;
 801c654:	69fb      	ldr	r3, [r7, #28]
 801c656:	65bb      	str	r3, [r7, #88]	; 0x58
    empty_west.w = cursor.x - scroll.x;
 801c658:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801c65c:	edd7 7a06 	vldr	s15, [r7, #24]
 801c660:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c664:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    empty_west.h = scroll.h;
 801c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c66a:	663b      	str	r3, [r7, #96]	; 0x60

    empty_east.x = cursor.x + cursor.w;
 801c66c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801c670:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801c674:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c678:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    empty_east.y = scroll.y;
 801c67c:	69fb      	ldr	r3, [r7, #28]
 801c67e:	64bb      	str	r3, [r7, #72]	; 0x48
    empty_east.w = (scroll.x + scroll.w) - (cursor.x + cursor.w);
 801c680:	ed97 7a06 	vldr	s14, [r7, #24]
 801c684:	edd7 7a08 	vldr	s15, [r7, #32]
 801c688:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c68c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801c690:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801c694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c698:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c69c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    empty_east.h = scroll.h;
 801c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6a2:	653b      	str	r3, [r7, #80]	; 0x50

    /* update scrollbar */
    scroll_offset = nk_scrollbar_behavior(state, in, has_scrolling, &scroll, &cursor,
 801c6a4:	f107 0218 	add.w	r2, r7, #24
 801c6a8:	2301      	movs	r3, #1
 801c6aa:	9303      	str	r3, [sp, #12]
 801c6ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c6b0:	9302      	str	r3, [sp, #8]
 801c6b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c6b6:	9301      	str	r3, [sp, #4]
 801c6b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c6bc:	9300      	str	r3, [sp, #0]
 801c6be:	ed97 1a20 	vldr	s2, [r7, #128]	; 0x80
 801c6c2:	edd7 0a03 	vldr	s1, [r7, #12]
 801c6c6:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 801c6ca:	4613      	mov	r3, r2
 801c6cc:	697a      	ldr	r2, [r7, #20]
 801c6ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c6d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c6d4:	f7fe fec2 	bl	801b45c <nk_scrollbar_behavior>
 801c6d8:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
        &empty_west, &empty_east, scroll_offset, target, scroll_step, NK_HORIZONTAL);
    scroll_off = scroll_offset / target;
 801c6dc:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 801c6e0:	ed97 7a03 	vldr	s14, [r7, #12]
 801c6e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c6e8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    cursor.x = scroll.x + (scroll_off * scroll.w);
 801c6ec:	ed97 7a06 	vldr	s14, [r7, #24]
 801c6f0:	edd7 6a08 	vldr	s13, [r7, #32]
 801c6f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801c6f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c6fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c700:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

    /* draw scrollbar */
    if (style->draw_begin) style->draw_begin(out, style->userdata);
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d007      	beq.n	801c71e <nk_do_scrollbarh+0x442>
 801c70e:	683b      	ldr	r3, [r7, #0]
 801c710:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801c714:	683a      	ldr	r2, [r7, #0]
 801c716:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c71c:	4798      	blx	r3
    nk_draw_scrollbar(out, *state, style, &scroll, &cursor);
 801c71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c720:	6819      	ldr	r1, [r3, #0]
 801c722:	f107 0218 	add.w	r2, r7, #24
 801c726:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c72a:	9300      	str	r3, [sp, #0]
 801c72c:	4613      	mov	r3, r2
 801c72e:	683a      	ldr	r2, [r7, #0]
 801c730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c732:	f7ff fa19 	bl	801bb68 <nk_draw_scrollbar>
    if (style->draw_end) style->draw_end(out, style->userdata);
 801c736:	683b      	ldr	r3, [r7, #0]
 801c738:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d007      	beq.n	801c750 <nk_do_scrollbarh+0x474>
 801c740:	683b      	ldr	r3, [r7, #0]
 801c742:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801c746:	683a      	ldr	r2, [r7, #0]
 801c748:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 801c74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c74e:	4798      	blx	r3
    return scroll_offset;
 801c750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801c752:	ee07 3a90 	vmov	s15, r3
 801c756:	eeb0 0a67 	vmov.f32	s0, s15
 801c75a:	3788      	adds	r7, #136	; 0x88
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd80      	pop	{r7, pc}

0801c760 <nk_str_append_text_char>:
    nk_buffer_init_fixed(&str->buffer, memory, size);
    str->len = 0;
}
NK_API int
nk_str_append_text_char(struct nk_str *s, const char *str, int len)
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b086      	sub	sp, #24
 801c764:	af00      	add	r7, sp, #0
 801c766:	60f8      	str	r0, [r7, #12]
 801c768:	60b9      	str	r1, [r7, #8]
 801c76a:	607a      	str	r2, [r7, #4]
    char *mem;
    NK_ASSERT(s);
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d105      	bne.n	801c77e <nk_str_append_text_char+0x1e>
 801c772:	4b1d      	ldr	r3, [pc, #116]	; (801c7e8 <nk_str_append_text_char+0x88>)
 801c774:	4a1d      	ldr	r2, [pc, #116]	; (801c7ec <nk_str_append_text_char+0x8c>)
 801c776:	2126      	movs	r1, #38	; 0x26
 801c778:	481d      	ldr	r0, [pc, #116]	; (801c7f0 <nk_str_append_text_char+0x90>)
 801c77a:	f008 f9b9 	bl	8024af0 <__assert_func>
    NK_ASSERT(str);
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d105      	bne.n	801c790 <nk_str_append_text_char+0x30>
 801c784:	4b1b      	ldr	r3, [pc, #108]	; (801c7f4 <nk_str_append_text_char+0x94>)
 801c786:	4a19      	ldr	r2, [pc, #100]	; (801c7ec <nk_str_append_text_char+0x8c>)
 801c788:	2127      	movs	r1, #39	; 0x27
 801c78a:	4819      	ldr	r0, [pc, #100]	; (801c7f0 <nk_str_append_text_char+0x90>)
 801c78c:	f008 f9b0 	bl	8024af0 <__assert_func>
    if (!s || !str || !len) return 0;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d005      	beq.n	801c7a2 <nk_str_append_text_char+0x42>
 801c796:	68bb      	ldr	r3, [r7, #8]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d002      	beq.n	801c7a2 <nk_str_append_text_char+0x42>
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d101      	bne.n	801c7a6 <nk_str_append_text_char+0x46>
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	e01c      	b.n	801c7e0 <nk_str_append_text_char+0x80>
    mem = (char*)nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
 801c7a6:	68f8      	ldr	r0, [r7, #12]
 801c7a8:	687a      	ldr	r2, [r7, #4]
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	2100      	movs	r1, #0
 801c7ae:	f7f2 f933 	bl	800ea18 <nk_buffer_alloc>
 801c7b2:	6178      	str	r0, [r7, #20]
    if (!mem) return 0;
 801c7b4:	697b      	ldr	r3, [r7, #20]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d101      	bne.n	801c7be <nk_str_append_text_char+0x5e>
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	e010      	b.n	801c7e0 <nk_str_append_text_char+0x80>
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	68b9      	ldr	r1, [r7, #8]
 801c7c4:	6978      	ldr	r0, [r7, #20]
 801c7c6:	f005 fe19 	bl	80223fc <nk_memcopy>
    s->len += nk_utf_len(str, len);
 801c7ca:	6879      	ldr	r1, [r7, #4]
 801c7cc:	68b8      	ldr	r0, [r7, #8]
 801c7ce:	f005 fdc9 	bl	8022364 <nk_utf_len>
 801c7d2:	4602      	mov	r2, r0
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7d8:	441a      	add	r2, r3
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	63da      	str	r2, [r3, #60]	; 0x3c
    return len;
 801c7de:	687b      	ldr	r3, [r7, #4]
}
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	3718      	adds	r7, #24
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	08028df0 	.word	0x08028df0
 801c7ec:	0802a9d4 	.word	0x0802a9d4
 801c7f0:	08028df4 	.word	0x08028df4
 801c7f4:	08028e10 	.word	0x08028e10

0801c7f8 <nk_str_insert_at_char>:
    }
    return i;
}
NK_API int
nk_str_insert_at_char(struct nk_str *s, int pos, const char *str, int len)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b08a      	sub	sp, #40	; 0x28
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	60f8      	str	r0, [r7, #12]
 801c800:	60b9      	str	r1, [r7, #8]
 801c802:	607a      	str	r2, [r7, #4]
 801c804:	603b      	str	r3, [r7, #0]
    void *mem;
    char *src;
    char *dst;

    int copylen;
    NK_ASSERT(s);
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d105      	bne.n	801c818 <nk_str_insert_at_char+0x20>
 801c80c:	4b55      	ldr	r3, [pc, #340]	; (801c964 <nk_str_insert_at_char+0x16c>)
 801c80e:	4a56      	ldr	r2, [pc, #344]	; (801c968 <nk_str_insert_at_char+0x170>)
 801c810:	217a      	movs	r1, #122	; 0x7a
 801c812:	4856      	ldr	r0, [pc, #344]	; (801c96c <nk_str_insert_at_char+0x174>)
 801c814:	f008 f96c 	bl	8024af0 <__assert_func>
    NK_ASSERT(str);
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d105      	bne.n	801c82a <nk_str_insert_at_char+0x32>
 801c81e:	4b54      	ldr	r3, [pc, #336]	; (801c970 <nk_str_insert_at_char+0x178>)
 801c820:	4a51      	ldr	r2, [pc, #324]	; (801c968 <nk_str_insert_at_char+0x170>)
 801c822:	217b      	movs	r1, #123	; 0x7b
 801c824:	4851      	ldr	r0, [pc, #324]	; (801c96c <nk_str_insert_at_char+0x174>)
 801c826:	f008 f963 	bl	8024af0 <__assert_func>
    NK_ASSERT(len >= 0);
 801c82a:	683b      	ldr	r3, [r7, #0]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	da05      	bge.n	801c83c <nk_str_insert_at_char+0x44>
 801c830:	4b50      	ldr	r3, [pc, #320]	; (801c974 <nk_str_insert_at_char+0x17c>)
 801c832:	4a4d      	ldr	r2, [pc, #308]	; (801c968 <nk_str_insert_at_char+0x170>)
 801c834:	217c      	movs	r1, #124	; 0x7c
 801c836:	484d      	ldr	r0, [pc, #308]	; (801c96c <nk_str_insert_at_char+0x174>)
 801c838:	f008 f95a 	bl	8024af0 <__assert_func>
    if (!s || !str || !len || (nk_size)pos > s->buffer.allocated) return 0;
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d00a      	beq.n	801c858 <nk_str_insert_at_char+0x60>
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d007      	beq.n	801c858 <nk_str_insert_at_char+0x60>
 801c848:	683b      	ldr	r3, [r7, #0]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d004      	beq.n	801c858 <nk_str_insert_at_char+0x60>
 801c84e:	68fb      	ldr	r3, [r7, #12]
 801c850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c852:	68bb      	ldr	r3, [r7, #8]
 801c854:	429a      	cmp	r2, r3
 801c856:	d201      	bcs.n	801c85c <nk_str_insert_at_char+0x64>
 801c858:	2300      	movs	r3, #0
 801c85a:	e07e      	b.n	801c95a <nk_str_insert_at_char+0x162>
    if ((s->buffer.allocated + (nk_size)len >= s->buffer.memory.size) &&
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c860:	683b      	ldr	r3, [r7, #0]
 801c862:	441a      	add	r2, r3
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c868:	429a      	cmp	r2, r3
 801c86a:	d305      	bcc.n	801c878 <nk_str_insert_at_char+0x80>
        (s->buffer.type == NK_BUFFER_FIXED)) return 0;
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	7f1b      	ldrb	r3, [r3, #28]
    if ((s->buffer.allocated + (nk_size)len >= s->buffer.memory.size) &&
 801c870:	2b00      	cmp	r3, #0
 801c872:	d101      	bne.n	801c878 <nk_str_insert_at_char+0x80>
        (s->buffer.type == NK_BUFFER_FIXED)) return 0;
 801c874:	2300      	movs	r3, #0
 801c876:	e070      	b.n	801c95a <nk_str_insert_at_char+0x162>

    copylen = (int)s->buffer.allocated - pos;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c87c:	461a      	mov	r2, r3
 801c87e:	68bb      	ldr	r3, [r7, #8]
 801c880:	1ad3      	subs	r3, r2, r3
 801c882:	61bb      	str	r3, [r7, #24]
    if (!copylen) {
 801c884:	69bb      	ldr	r3, [r7, #24]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d106      	bne.n	801c898 <nk_str_insert_at_char+0xa0>
        nk_str_append_text_char(s, str, len);
 801c88a:	683a      	ldr	r2, [r7, #0]
 801c88c:	6879      	ldr	r1, [r7, #4]
 801c88e:	68f8      	ldr	r0, [r7, #12]
 801c890:	f7ff ff66 	bl	801c760 <nk_str_append_text_char>
        return 1;
 801c894:	2301      	movs	r3, #1
 801c896:	e060      	b.n	801c95a <nk_str_insert_at_char+0x162>
    }
    mem = nk_buffer_alloc(&s->buffer, NK_BUFFER_FRONT, (nk_size)len * sizeof(char), 0);
 801c898:	68f8      	ldr	r0, [r7, #12]
 801c89a:	683a      	ldr	r2, [r7, #0]
 801c89c:	2300      	movs	r3, #0
 801c89e:	2100      	movs	r1, #0
 801c8a0:	f7f2 f8ba 	bl	800ea18 <nk_buffer_alloc>
 801c8a4:	6178      	str	r0, [r7, #20]
    if (!mem) return 0;
 801c8a6:	697b      	ldr	r3, [r7, #20]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d101      	bne.n	801c8b0 <nk_str_insert_at_char+0xb8>
 801c8ac:	2300      	movs	r3, #0
 801c8ae:	e054      	b.n	801c95a <nk_str_insert_at_char+0x162>

    /* memmove */
    NK_ASSERT(((int)pos + (int)len + ((int)copylen - 1)) >= 0);
 801c8b0:	68ba      	ldr	r2, [r7, #8]
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	441a      	add	r2, r3
 801c8b6:	69bb      	ldr	r3, [r7, #24]
 801c8b8:	3b01      	subs	r3, #1
 801c8ba:	4413      	add	r3, r2
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	da05      	bge.n	801c8cc <nk_str_insert_at_char+0xd4>
 801c8c0:	4b2d      	ldr	r3, [pc, #180]	; (801c978 <nk_str_insert_at_char+0x180>)
 801c8c2:	4a29      	ldr	r2, [pc, #164]	; (801c968 <nk_str_insert_at_char+0x170>)
 801c8c4:	218a      	movs	r1, #138	; 0x8a
 801c8c6:	4829      	ldr	r0, [pc, #164]	; (801c96c <nk_str_insert_at_char+0x174>)
 801c8c8:	f008 f912 	bl	8024af0 <__assert_func>
    NK_ASSERT(((int)pos + ((int)copylen - 1)) >= 0);
 801c8cc:	69bb      	ldr	r3, [r7, #24]
 801c8ce:	1e5a      	subs	r2, r3, #1
 801c8d0:	68bb      	ldr	r3, [r7, #8]
 801c8d2:	4413      	add	r3, r2
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	da05      	bge.n	801c8e4 <nk_str_insert_at_char+0xec>
 801c8d8:	4b28      	ldr	r3, [pc, #160]	; (801c97c <nk_str_insert_at_char+0x184>)
 801c8da:	4a23      	ldr	r2, [pc, #140]	; (801c968 <nk_str_insert_at_char+0x170>)
 801c8dc:	218b      	movs	r1, #139	; 0x8b
 801c8de:	4823      	ldr	r0, [pc, #140]	; (801c96c <nk_str_insert_at_char+0x174>)
 801c8e0:	f008 f906 	bl	8024af0 <__assert_func>
    dst = nk_ptr_add(char, s->buffer.memory.ptr, pos + len + (copylen - 1));
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	6a1b      	ldr	r3, [r3, #32]
 801c8e8:	68b9      	ldr	r1, [r7, #8]
 801c8ea:	683a      	ldr	r2, [r7, #0]
 801c8ec:	4411      	add	r1, r2
 801c8ee:	69ba      	ldr	r2, [r7, #24]
 801c8f0:	3a01      	subs	r2, #1
 801c8f2:	440a      	add	r2, r1
 801c8f4:	4413      	add	r3, r2
 801c8f6:	61fb      	str	r3, [r7, #28]
    src = nk_ptr_add(char, s->buffer.memory.ptr, pos + (copylen-1));
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	6a1b      	ldr	r3, [r3, #32]
 801c8fc:	69ba      	ldr	r2, [r7, #24]
 801c8fe:	1e51      	subs	r1, r2, #1
 801c900:	68ba      	ldr	r2, [r7, #8]
 801c902:	440a      	add	r2, r1
 801c904:	4413      	add	r3, r2
 801c906:	623b      	str	r3, [r7, #32]
    for (i = 0; i < copylen; ++i) *dst-- = *src--;
 801c908:	2300      	movs	r3, #0
 801c90a:	627b      	str	r3, [r7, #36]	; 0x24
 801c90c:	e00a      	b.n	801c924 <nk_str_insert_at_char+0x12c>
 801c90e:	6a3a      	ldr	r2, [r7, #32]
 801c910:	1e53      	subs	r3, r2, #1
 801c912:	623b      	str	r3, [r7, #32]
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	1e59      	subs	r1, r3, #1
 801c918:	61f9      	str	r1, [r7, #28]
 801c91a:	7812      	ldrb	r2, [r2, #0]
 801c91c:	701a      	strb	r2, [r3, #0]
 801c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c920:	3301      	adds	r3, #1
 801c922:	627b      	str	r3, [r7, #36]	; 0x24
 801c924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c926:	69bb      	ldr	r3, [r7, #24]
 801c928:	429a      	cmp	r2, r3
 801c92a:	dbf0      	blt.n	801c90e <nk_str_insert_at_char+0x116>
    mem = nk_ptr_add(void, s->buffer.memory.ptr, pos);
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	6a1a      	ldr	r2, [r3, #32]
 801c930:	68bb      	ldr	r3, [r7, #8]
 801c932:	4413      	add	r3, r2
 801c934:	617b      	str	r3, [r7, #20]
    NK_MEMCPY(mem, str, (nk_size)len * sizeof(char));
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	461a      	mov	r2, r3
 801c93a:	6879      	ldr	r1, [r7, #4]
 801c93c:	6978      	ldr	r0, [r7, #20]
 801c93e:	f005 fd5d 	bl	80223fc <nk_memcopy>
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	6a1a      	ldr	r2, [r3, #32]
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c94a:	4619      	mov	r1, r3
 801c94c:	4610      	mov	r0, r2
 801c94e:	f005 fd09 	bl	8022364 <nk_utf_len>
 801c952:	4602      	mov	r2, r0
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	63da      	str	r2, [r3, #60]	; 0x3c
    return 1;
 801c958:	2301      	movs	r3, #1
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3728      	adds	r7, #40	; 0x28
 801c95e:	46bd      	mov	sp, r7
 801c960:	bd80      	pop	{r7, pc}
 801c962:	bf00      	nop
 801c964:	08028df0 	.word	0x08028df0
 801c968:	0802a9ec 	.word	0x0802a9ec
 801c96c:	08028df4 	.word	0x08028df4
 801c970:	08028e10 	.word	0x08028e10
 801c974:	08028e14 	.word	0x08028e14
 801c978:	08028e20 	.word	0x08028e20
 801c97c:	08028e50 	.word	0x08028e50

0801c980 <nk_str_insert_at_rune>:
NK_API int
nk_str_insert_at_rune(struct nk_str *str, int pos, const char *cstr, int len)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b088      	sub	sp, #32
 801c984:	af00      	add	r7, sp, #0
 801c986:	60f8      	str	r0, [r7, #12]
 801c988:	60b9      	str	r1, [r7, #8]
 801c98a:	607a      	str	r2, [r7, #4]
 801c98c:	603b      	str	r3, [r7, #0]
    int glyph_len;
    nk_rune unicode;
    const char *begin;
    const char *buffer;

    NK_ASSERT(str);
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d105      	bne.n	801c9a0 <nk_str_insert_at_rune+0x20>
 801c994:	4b26      	ldr	r3, [pc, #152]	; (801ca30 <nk_str_insert_at_rune+0xb0>)
 801c996:	4a27      	ldr	r2, [pc, #156]	; (801ca34 <nk_str_insert_at_rune+0xb4>)
 801c998:	219c      	movs	r1, #156	; 0x9c
 801c99a:	4827      	ldr	r0, [pc, #156]	; (801ca38 <nk_str_insert_at_rune+0xb8>)
 801c99c:	f008 f8a8 	bl	8024af0 <__assert_func>
    NK_ASSERT(cstr);
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d105      	bne.n	801c9b2 <nk_str_insert_at_rune+0x32>
 801c9a6:	4b25      	ldr	r3, [pc, #148]	; (801ca3c <nk_str_insert_at_rune+0xbc>)
 801c9a8:	4a22      	ldr	r2, [pc, #136]	; (801ca34 <nk_str_insert_at_rune+0xb4>)
 801c9aa:	219d      	movs	r1, #157	; 0x9d
 801c9ac:	4822      	ldr	r0, [pc, #136]	; (801ca38 <nk_str_insert_at_rune+0xb8>)
 801c9ae:	f008 f89f 	bl	8024af0 <__assert_func>
    NK_ASSERT(len);
 801c9b2:	683b      	ldr	r3, [r7, #0]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d105      	bne.n	801c9c4 <nk_str_insert_at_rune+0x44>
 801c9b8:	4b21      	ldr	r3, [pc, #132]	; (801ca40 <nk_str_insert_at_rune+0xc0>)
 801c9ba:	4a1e      	ldr	r2, [pc, #120]	; (801ca34 <nk_str_insert_at_rune+0xb4>)
 801c9bc:	219e      	movs	r1, #158	; 0x9e
 801c9be:	481e      	ldr	r0, [pc, #120]	; (801ca38 <nk_str_insert_at_rune+0xb8>)
 801c9c0:	f008 f896 	bl	8024af0 <__assert_func>
    if (!str || !cstr || !len) return 0;
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d005      	beq.n	801c9d6 <nk_str_insert_at_rune+0x56>
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d002      	beq.n	801c9d6 <nk_str_insert_at_rune+0x56>
 801c9d0:	683b      	ldr	r3, [r7, #0]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d101      	bne.n	801c9da <nk_str_insert_at_rune+0x5a>
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	e025      	b.n	801ca26 <nk_str_insert_at_rune+0xa6>
    begin = nk_str_at_rune(str, pos, &unicode, &glyph_len);
 801c9da:	f107 0314 	add.w	r3, r7, #20
 801c9de:	f107 0210 	add.w	r2, r7, #16
 801c9e2:	68b9      	ldr	r1, [r7, #8]
 801c9e4:	68f8      	ldr	r0, [r7, #12]
 801c9e6:	f000 fa13 	bl	801ce10 <nk_str_at_rune>
 801c9ea:	61f8      	str	r0, [r7, #28]
    if (!str->len)
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d106      	bne.n	801ca02 <nk_str_insert_at_rune+0x82>
        return nk_str_append_text_char(str, cstr, len);
 801c9f4:	683a      	ldr	r2, [r7, #0]
 801c9f6:	6879      	ldr	r1, [r7, #4]
 801c9f8:	68f8      	ldr	r0, [r7, #12]
 801c9fa:	f7ff feb1 	bl	801c760 <nk_str_append_text_char>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	e011      	b.n	801ca26 <nk_str_insert_at_rune+0xa6>
    buffer = nk_str_get_const(str);
 801ca02:	68f8      	ldr	r0, [r7, #12]
 801ca04:	f000 fb1c 	bl	801d040 <nk_str_get_const>
 801ca08:	61b8      	str	r0, [r7, #24]
    if (!begin) return 0;
 801ca0a:	69fb      	ldr	r3, [r7, #28]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d101      	bne.n	801ca14 <nk_str_insert_at_rune+0x94>
 801ca10:	2300      	movs	r3, #0
 801ca12:	e008      	b.n	801ca26 <nk_str_insert_at_rune+0xa6>
    return nk_str_insert_at_char(str, (int)(begin - buffer), cstr, len);
 801ca14:	69fa      	ldr	r2, [r7, #28]
 801ca16:	69bb      	ldr	r3, [r7, #24]
 801ca18:	1ad1      	subs	r1, r2, r3
 801ca1a:	683b      	ldr	r3, [r7, #0]
 801ca1c:	687a      	ldr	r2, [r7, #4]
 801ca1e:	68f8      	ldr	r0, [r7, #12]
 801ca20:	f7ff feea 	bl	801c7f8 <nk_str_insert_at_char>
 801ca24:	4603      	mov	r3, r0
}
 801ca26:	4618      	mov	r0, r3
 801ca28:	3720      	adds	r7, #32
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}
 801ca2e:	bf00      	nop
 801ca30:	08028e10 	.word	0x08028e10
 801ca34:	0802aa04 	.word	0x0802aa04
 801ca38:	08028df4 	.word	0x08028df4
 801ca3c:	08028e78 	.word	0x08028e78
 801ca40:	08028e80 	.word	0x08028e80

0801ca44 <nk_str_insert_text_utf8>:
{
    return nk_str_insert_text_utf8(str, pos, text, nk_strlen(text));
}
NK_API int
nk_str_insert_text_utf8(struct nk_str *str, int pos, const char *text, int len)
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b088      	sub	sp, #32
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	60f8      	str	r0, [r7, #12]
 801ca4c:	60b9      	str	r1, [r7, #8]
 801ca4e:	607a      	str	r2, [r7, #4]
 801ca50:	603b      	str	r3, [r7, #0]
    int i = 0;
 801ca52:	2300      	movs	r3, #0
 801ca54:	61fb      	str	r3, [r7, #28]
    int byte_len = 0;
 801ca56:	2300      	movs	r3, #0
 801ca58:	61bb      	str	r3, [r7, #24]
    nk_rune unicode;

    NK_ASSERT(str);
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d105      	bne.n	801ca6c <nk_str_insert_text_utf8+0x28>
 801ca60:	4b1d      	ldr	r3, [pc, #116]	; (801cad8 <nk_str_insert_text_utf8+0x94>)
 801ca62:	4a1e      	ldr	r2, [pc, #120]	; (801cadc <nk_str_insert_text_utf8+0x98>)
 801ca64:	21b8      	movs	r1, #184	; 0xb8
 801ca66:	481e      	ldr	r0, [pc, #120]	; (801cae0 <nk_str_insert_text_utf8+0x9c>)
 801ca68:	f008 f842 	bl	8024af0 <__assert_func>
    NK_ASSERT(text);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d105      	bne.n	801ca7e <nk_str_insert_text_utf8+0x3a>
 801ca72:	4b1c      	ldr	r3, [pc, #112]	; (801cae4 <nk_str_insert_text_utf8+0xa0>)
 801ca74:	4a19      	ldr	r2, [pc, #100]	; (801cadc <nk_str_insert_text_utf8+0x98>)
 801ca76:	21b9      	movs	r1, #185	; 0xb9
 801ca78:	4819      	ldr	r0, [pc, #100]	; (801cae0 <nk_str_insert_text_utf8+0x9c>)
 801ca7a:	f008 f839 	bl	8024af0 <__assert_func>
    if (!str || !text || !len) return 0;
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d005      	beq.n	801ca90 <nk_str_insert_text_utf8+0x4c>
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d002      	beq.n	801ca90 <nk_str_insert_text_utf8+0x4c>
 801ca8a:	683b      	ldr	r3, [r7, #0]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d101      	bne.n	801ca94 <nk_str_insert_text_utf8+0x50>
 801ca90:	2300      	movs	r3, #0
 801ca92:	e01d      	b.n	801cad0 <nk_str_insert_text_utf8+0x8c>
    for (i = 0; i < len; ++i)
 801ca94:	2300      	movs	r3, #0
 801ca96:	61fb      	str	r3, [r7, #28]
 801ca98:	e00f      	b.n	801caba <nk_str_insert_text_utf8+0x76>
        byte_len += nk_utf_decode(text+byte_len, &unicode, 4);
 801ca9a:	69bb      	ldr	r3, [r7, #24]
 801ca9c:	687a      	ldr	r2, [r7, #4]
 801ca9e:	4413      	add	r3, r2
 801caa0:	f107 0114 	add.w	r1, r7, #20
 801caa4:	2204      	movs	r2, #4
 801caa6:	4618      	mov	r0, r3
 801caa8:	f005 fb7e 	bl	80221a8 <nk_utf_decode>
 801caac:	4602      	mov	r2, r0
 801caae:	69bb      	ldr	r3, [r7, #24]
 801cab0:	4413      	add	r3, r2
 801cab2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; ++i)
 801cab4:	69fb      	ldr	r3, [r7, #28]
 801cab6:	3301      	adds	r3, #1
 801cab8:	61fb      	str	r3, [r7, #28]
 801caba:	69fa      	ldr	r2, [r7, #28]
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	429a      	cmp	r2, r3
 801cac0:	dbeb      	blt.n	801ca9a <nk_str_insert_text_utf8+0x56>
    nk_str_insert_at_rune(str, pos, text, byte_len);
 801cac2:	69bb      	ldr	r3, [r7, #24]
 801cac4:	687a      	ldr	r2, [r7, #4]
 801cac6:	68b9      	ldr	r1, [r7, #8]
 801cac8:	68f8      	ldr	r0, [r7, #12]
 801caca:	f7ff ff59 	bl	801c980 <nk_str_insert_at_rune>
    return len;
 801cace:	683b      	ldr	r3, [r7, #0]
}
 801cad0:	4618      	mov	r0, r3
 801cad2:	3720      	adds	r7, #32
 801cad4:	46bd      	mov	sp, r7
 801cad6:	bd80      	pop	{r7, pc}
 801cad8:	08028e10 	.word	0x08028e10
 801cadc:	0802aa1c 	.word	0x0802aa1c
 801cae0:	08028df4 	.word	0x08028df4
 801cae4:	08028e84 	.word	0x08028e84

0801cae8 <nk_str_insert_text_runes>:
    nk_str_insert_at_rune(str, pos, text, byte_len);
    return num_runes;
}
NK_API int
nk_str_insert_text_runes(struct nk_str *str, int pos, const nk_rune *runes, int len)
{
 801cae8:	b580      	push	{r7, lr}
 801caea:	b088      	sub	sp, #32
 801caec:	af00      	add	r7, sp, #0
 801caee:	60f8      	str	r0, [r7, #12]
 801caf0:	60b9      	str	r1, [r7, #8]
 801caf2:	607a      	str	r2, [r7, #4]
 801caf4:	603b      	str	r3, [r7, #0]
    int i = 0;
 801caf6:	2300      	movs	r3, #0
 801caf8:	61fb      	str	r3, [r7, #28]
    int byte_len = 0;
 801cafa:	2300      	movs	r3, #0
 801cafc:	61bb      	str	r3, [r7, #24]
    nk_glyph glyph;

    NK_ASSERT(str);
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d105      	bne.n	801cb10 <nk_str_insert_text_runes+0x28>
 801cb04:	4b1c      	ldr	r3, [pc, #112]	; (801cb78 <nk_str_insert_text_runes+0x90>)
 801cb06:	4a1d      	ldr	r2, [pc, #116]	; (801cb7c <nk_str_insert_text_runes+0x94>)
 801cb08:	21d9      	movs	r1, #217	; 0xd9
 801cb0a:	481d      	ldr	r0, [pc, #116]	; (801cb80 <nk_str_insert_text_runes+0x98>)
 801cb0c:	f007 fff0 	bl	8024af0 <__assert_func>
    if (!str || !runes || !len) return 0;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d005      	beq.n	801cb22 <nk_str_insert_text_runes+0x3a>
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d002      	beq.n	801cb22 <nk_str_insert_text_runes+0x3a>
 801cb1c:	683b      	ldr	r3, [r7, #0]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d101      	bne.n	801cb26 <nk_str_insert_text_runes+0x3e>
 801cb22:	2300      	movs	r3, #0
 801cb24:	e024      	b.n	801cb70 <nk_str_insert_text_runes+0x88>
    for (i = 0; i < len; ++i) {
 801cb26:	2300      	movs	r3, #0
 801cb28:	61fb      	str	r3, [r7, #28]
 801cb2a:	e01a      	b.n	801cb62 <nk_str_insert_text_runes+0x7a>
        byte_len = nk_utf_encode(runes[i], glyph, NK_UTF_SIZE);
 801cb2c:	69fb      	ldr	r3, [r7, #28]
 801cb2e:	009b      	lsls	r3, r3, #2
 801cb30:	687a      	ldr	r2, [r7, #4]
 801cb32:	4413      	add	r3, r2
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	f107 0114 	add.w	r1, r7, #20
 801cb3a:	2204      	movs	r2, #4
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	f005 fbd3 	bl	80222e8 <nk_utf_encode>
 801cb42:	61b8      	str	r0, [r7, #24]
        if (!byte_len) break;
 801cb44:	69bb      	ldr	r3, [r7, #24]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d010      	beq.n	801cb6c <nk_str_insert_text_runes+0x84>
        nk_str_insert_at_rune(str, pos+i, glyph, byte_len);
 801cb4a:	68ba      	ldr	r2, [r7, #8]
 801cb4c:	69fb      	ldr	r3, [r7, #28]
 801cb4e:	18d1      	adds	r1, r2, r3
 801cb50:	f107 0214 	add.w	r2, r7, #20
 801cb54:	69bb      	ldr	r3, [r7, #24]
 801cb56:	68f8      	ldr	r0, [r7, #12]
 801cb58:	f7ff ff12 	bl	801c980 <nk_str_insert_at_rune>
    for (i = 0; i < len; ++i) {
 801cb5c:	69fb      	ldr	r3, [r7, #28]
 801cb5e:	3301      	adds	r3, #1
 801cb60:	61fb      	str	r3, [r7, #28]
 801cb62:	69fa      	ldr	r2, [r7, #28]
 801cb64:	683b      	ldr	r3, [r7, #0]
 801cb66:	429a      	cmp	r2, r3
 801cb68:	dbe0      	blt.n	801cb2c <nk_str_insert_text_runes+0x44>
 801cb6a:	e000      	b.n	801cb6e <nk_str_insert_text_runes+0x86>
        if (!byte_len) break;
 801cb6c:	bf00      	nop
    }
    return len;
 801cb6e:	683b      	ldr	r3, [r7, #0]
}
 801cb70:	4618      	mov	r0, r3
 801cb72:	3720      	adds	r7, #32
 801cb74:	46bd      	mov	sp, r7
 801cb76:	bd80      	pop	{r7, pc}
 801cb78:	08028e10 	.word	0x08028e10
 801cb7c:	0802aa34 	.word	0x0802aa34
 801cb80:	08028df4 	.word	0x08028df4

0801cb84 <nk_str_remove_chars>:
    }
    return i;
}
NK_API void
nk_str_remove_chars(struct nk_str *s, int len)
{
 801cb84:	b580      	push	{r7, lr}
 801cb86:	b082      	sub	sp, #8
 801cb88:	af00      	add	r7, sp, #0
 801cb8a:	6078      	str	r0, [r7, #4]
 801cb8c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(s);
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d105      	bne.n	801cba0 <nk_str_remove_chars+0x1c>
 801cb94:	4b1e      	ldr	r3, [pc, #120]	; (801cc10 <nk_str_remove_chars+0x8c>)
 801cb96:	4a1f      	ldr	r2, [pc, #124]	; (801cc14 <nk_str_remove_chars+0x90>)
 801cb98:	21f4      	movs	r1, #244	; 0xf4
 801cb9a:	481f      	ldr	r0, [pc, #124]	; (801cc18 <nk_str_remove_chars+0x94>)
 801cb9c:	f007 ffa8 	bl	8024af0 <__assert_func>
    NK_ASSERT(len >= 0);
 801cba0:	683b      	ldr	r3, [r7, #0]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	da05      	bge.n	801cbb2 <nk_str_remove_chars+0x2e>
 801cba6:	4b1d      	ldr	r3, [pc, #116]	; (801cc1c <nk_str_remove_chars+0x98>)
 801cba8:	4a1a      	ldr	r2, [pc, #104]	; (801cc14 <nk_str_remove_chars+0x90>)
 801cbaa:	21f5      	movs	r1, #245	; 0xf5
 801cbac:	481a      	ldr	r0, [pc, #104]	; (801cc18 <nk_str_remove_chars+0x94>)
 801cbae:	f007 ff9f 	bl	8024af0 <__assert_func>
    if (!s || len < 0 || (nk_size)len > s->buffer.allocated) return;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d026      	beq.n	801cc06 <nk_str_remove_chars+0x82>
 801cbb8:	683b      	ldr	r3, [r7, #0]
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	db23      	blt.n	801cc06 <nk_str_remove_chars+0x82>
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cbc2:	683b      	ldr	r3, [r7, #0]
 801cbc4:	429a      	cmp	r2, r3
 801cbc6:	d31e      	bcc.n	801cc06 <nk_str_remove_chars+0x82>
    NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbcc:	461a      	mov	r2, r3
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	da05      	bge.n	801cbe2 <nk_str_remove_chars+0x5e>
 801cbd6:	4b12      	ldr	r3, [pc, #72]	; (801cc20 <nk_str_remove_chars+0x9c>)
 801cbd8:	4a0e      	ldr	r2, [pc, #56]	; (801cc14 <nk_str_remove_chars+0x90>)
 801cbda:	21f7      	movs	r1, #247	; 0xf7
 801cbdc:	480e      	ldr	r0, [pc, #56]	; (801cc18 <nk_str_remove_chars+0x94>)
 801cbde:	f007 ff87 	bl	8024af0 <__assert_func>
    s->buffer.allocated -= (nk_size)len;
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cbe6:	683b      	ldr	r3, [r7, #0]
 801cbe8:	1ad2      	subs	r2, r2, r3
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	62da      	str	r2, [r3, #44]	; 0x2c
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	6a1a      	ldr	r2, [r3, #32]
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbf6:	4619      	mov	r1, r3
 801cbf8:	4610      	mov	r0, r2
 801cbfa:	f005 fbb3 	bl	8022364 <nk_utf_len>
 801cbfe:	4602      	mov	r2, r0
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	63da      	str	r2, [r3, #60]	; 0x3c
 801cc04:	e000      	b.n	801cc08 <nk_str_remove_chars+0x84>
    if (!s || len < 0 || (nk_size)len > s->buffer.allocated) return;
 801cc06:	bf00      	nop
}
 801cc08:	3708      	adds	r7, #8
 801cc0a:	46bd      	mov	sp, r7
 801cc0c:	bd80      	pop	{r7, pc}
 801cc0e:	bf00      	nop
 801cc10:	08028df0 	.word	0x08028df0
 801cc14:	0802aa50 	.word	0x0802aa50
 801cc18:	08028df4 	.word	0x08028df4
 801cc1c:	08028e14 	.word	0x08028e14
 801cc20:	08028e8c 	.word	0x08028e8c

0801cc24 <nk_str_delete_chars>:
    end = (const char*)str->buffer.memory.ptr + str->buffer.allocated;
    nk_str_remove_chars(str, (int)(end-begin)+1);
}
NK_API void
nk_str_delete_chars(struct nk_str *s, int pos, int len)
{
 801cc24:	b580      	push	{r7, lr}
 801cc26:	b086      	sub	sp, #24
 801cc28:	af00      	add	r7, sp, #0
 801cc2a:	60f8      	str	r0, [r7, #12]
 801cc2c:	60b9      	str	r1, [r7, #8]
 801cc2e:	607a      	str	r2, [r7, #4]
    NK_ASSERT(s);
 801cc30:	68fb      	ldr	r3, [r7, #12]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d106      	bne.n	801cc44 <nk_str_delete_chars+0x20>
 801cc36:	4b31      	ldr	r3, [pc, #196]	; (801ccfc <nk_str_delete_chars+0xd8>)
 801cc38:	4a31      	ldr	r2, [pc, #196]	; (801cd00 <nk_str_delete_chars+0xdc>)
 801cc3a:	f240 1113 	movw	r1, #275	; 0x113
 801cc3e:	4831      	ldr	r0, [pc, #196]	; (801cd04 <nk_str_delete_chars+0xe0>)
 801cc40:	f007 ff56 	bl	8024af0 <__assert_func>
    if (!s || !len || (nk_size)pos > s->buffer.allocated ||
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d053      	beq.n	801ccf2 <nk_str_delete_chars+0xce>
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d050      	beq.n	801ccf2 <nk_str_delete_chars+0xce>
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cc54:	68bb      	ldr	r3, [r7, #8]
 801cc56:	429a      	cmp	r2, r3
 801cc58:	d34b      	bcc.n	801ccf2 <nk_str_delete_chars+0xce>
        (nk_size)(pos + len) > s->buffer.allocated) return;
 801cc5a:	68ba      	ldr	r2, [r7, #8]
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	4413      	add	r3, r2
 801cc60:	461a      	mov	r2, r3
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if (!s || !len || (nk_size)pos > s->buffer.allocated ||
 801cc66:	429a      	cmp	r2, r3
 801cc68:	d843      	bhi.n	801ccf2 <nk_str_delete_chars+0xce>

    if ((nk_size)(pos + len) < s->buffer.allocated) {
 801cc6a:	68ba      	ldr	r2, [r7, #8]
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	4413      	add	r3, r2
 801cc70:	461a      	mov	r2, r3
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc76:	429a      	cmp	r2, r3
 801cc78:	d22b      	bcs.n	801ccd2 <nk_str_delete_chars+0xae>
        /* memmove */
        char *dst = nk_ptr_add(char, s->buffer.memory.ptr, pos);
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	6a1a      	ldr	r2, [r3, #32]
 801cc7e:	68bb      	ldr	r3, [r7, #8]
 801cc80:	4413      	add	r3, r2
 801cc82:	617b      	str	r3, [r7, #20]
        char *src = nk_ptr_add(char, s->buffer.memory.ptr, pos + len);
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	6a1b      	ldr	r3, [r3, #32]
 801cc88:	68b9      	ldr	r1, [r7, #8]
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	440a      	add	r2, r1
 801cc8e:	4413      	add	r3, r2
 801cc90:	613b      	str	r3, [r7, #16]
        NK_MEMCPY(dst, src, s->buffer.allocated - (nk_size)(pos + len));
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc96:	68b9      	ldr	r1, [r7, #8]
 801cc98:	687a      	ldr	r2, [r7, #4]
 801cc9a:	440a      	add	r2, r1
 801cc9c:	1a9b      	subs	r3, r3, r2
 801cc9e:	461a      	mov	r2, r3
 801cca0:	6939      	ldr	r1, [r7, #16]
 801cca2:	6978      	ldr	r0, [r7, #20]
 801cca4:	f005 fbaa 	bl	80223fc <nk_memcopy>
        NK_ASSERT(((int)s->buffer.allocated - (int)len) >= 0);
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccac:	461a      	mov	r2, r3
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	1ad3      	subs	r3, r2, r3
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	da06      	bge.n	801ccc4 <nk_str_delete_chars+0xa0>
 801ccb6:	4b14      	ldr	r3, [pc, #80]	; (801cd08 <nk_str_delete_chars+0xe4>)
 801ccb8:	4a11      	ldr	r2, [pc, #68]	; (801cd00 <nk_str_delete_chars+0xdc>)
 801ccba:	f44f 718e 	mov.w	r1, #284	; 0x11c
 801ccbe:	4811      	ldr	r0, [pc, #68]	; (801cd04 <nk_str_delete_chars+0xe0>)
 801ccc0:	f007 ff16 	bl	8024af0 <__assert_func>
        s->buffer.allocated -= (nk_size)len;
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	1ad2      	subs	r2, r2, r3
 801cccc:	68fb      	ldr	r3, [r7, #12]
 801ccce:	62da      	str	r2, [r3, #44]	; 0x2c
 801ccd0:	e003      	b.n	801ccda <nk_str_delete_chars+0xb6>
    } else nk_str_remove_chars(s, len);
 801ccd2:	6879      	ldr	r1, [r7, #4]
 801ccd4:	68f8      	ldr	r0, [r7, #12]
 801ccd6:	f7ff ff55 	bl	801cb84 <nk_str_remove_chars>
    s->len = nk_utf_len((char *)s->buffer.memory.ptr, (int)s->buffer.allocated);
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	6a1a      	ldr	r2, [r3, #32]
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cce2:	4619      	mov	r1, r3
 801cce4:	4610      	mov	r0, r2
 801cce6:	f005 fb3d 	bl	8022364 <nk_utf_len>
 801ccea:	4602      	mov	r2, r0
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	63da      	str	r2, [r3, #60]	; 0x3c
 801ccf0:	e000      	b.n	801ccf4 <nk_str_delete_chars+0xd0>
        (nk_size)(pos + len) > s->buffer.allocated) return;
 801ccf2:	bf00      	nop
}
 801ccf4:	3718      	adds	r7, #24
 801ccf6:	46bd      	mov	sp, r7
 801ccf8:	bd80      	pop	{r7, pc}
 801ccfa:	bf00      	nop
 801ccfc:	08028df0 	.word	0x08028df0
 801cd00:	0802aa64 	.word	0x0802aa64
 801cd04:	08028df4 	.word	0x08028df4
 801cd08:	08028e8c 	.word	0x08028e8c

0801cd0c <nk_str_delete_runes>:
NK_API void
nk_str_delete_runes(struct nk_str *s, int pos, int len)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b08a      	sub	sp, #40	; 0x28
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	60f8      	str	r0, [r7, #12]
 801cd14:	60b9      	str	r1, [r7, #8]
 801cd16:	607a      	str	r2, [r7, #4]
    nk_rune unicode;
    char *begin;
    char *end;
    int unused;

    NK_ASSERT(s);
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d106      	bne.n	801cd2c <nk_str_delete_runes+0x20>
 801cd1e:	4b38      	ldr	r3, [pc, #224]	; (801ce00 <nk_str_delete_runes+0xf4>)
 801cd20:	4a38      	ldr	r2, [pc, #224]	; (801ce04 <nk_str_delete_runes+0xf8>)
 801cd22:	f44f 7195 	mov.w	r1, #298	; 0x12a
 801cd26:	4838      	ldr	r0, [pc, #224]	; (801ce08 <nk_str_delete_runes+0xfc>)
 801cd28:	f007 fee2 	bl	8024af0 <__assert_func>
    NK_ASSERT(s->len >= pos + len);
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd30:	68b9      	ldr	r1, [r7, #8]
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	440b      	add	r3, r1
 801cd36:	429a      	cmp	r2, r3
 801cd38:	da06      	bge.n	801cd48 <nk_str_delete_runes+0x3c>
 801cd3a:	4b34      	ldr	r3, [pc, #208]	; (801ce0c <nk_str_delete_runes+0x100>)
 801cd3c:	4a31      	ldr	r2, [pc, #196]	; (801ce04 <nk_str_delete_runes+0xf8>)
 801cd3e:	f240 112b 	movw	r1, #299	; 0x12b
 801cd42:	4831      	ldr	r0, [pc, #196]	; (801ce08 <nk_str_delete_runes+0xfc>)
 801cd44:	f007 fed4 	bl	8024af0 <__assert_func>
    if (s->len < pos + len)
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd4c:	68b9      	ldr	r1, [r7, #8]
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	440b      	add	r3, r1
 801cd52:	429a      	cmp	r2, r3
 801cd54:	da1c      	bge.n	801cd90 <nk_str_delete_runes+0x84>
        len = NK_CLAMP(0, (s->len - pos), s->len);
 801cd56:	68bb      	ldr	r3, [r7, #8]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	dd06      	ble.n	801cd6a <nk_str_delete_runes+0x5e>
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd60:	68bb      	ldr	r3, [r7, #8]
 801cd62:	1ad3      	subs	r3, r2, r3
 801cd64:	0fdb      	lsrs	r3, r3, #31
 801cd66:	b2db      	uxtb	r3, r3
 801cd68:	e003      	b.n	801cd72 <nk_str_delete_runes+0x66>
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd6e:	0fdb      	lsrs	r3, r3, #31
 801cd70:	b2db      	uxtb	r3, r3
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d001      	beq.n	801cd7a <nk_str_delete_runes+0x6e>
 801cd76:	2300      	movs	r3, #0
 801cd78:	e009      	b.n	801cd8e <nk_str_delete_runes+0x82>
 801cd7a:	68bb      	ldr	r3, [r7, #8]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	dd04      	ble.n	801cd8a <nk_str_delete_runes+0x7e>
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801cd84:	68bb      	ldr	r3, [r7, #8]
 801cd86:	1ad3      	subs	r3, r2, r3
 801cd88:	e001      	b.n	801cd8e <nk_str_delete_runes+0x82>
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd8e:	607b      	str	r3, [r7, #4]
    if (!len) return;
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d02b      	beq.n	801cdee <nk_str_delete_runes+0xe2>

    temp = (char *)s->buffer.memory.ptr;
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	6a1b      	ldr	r3, [r3, #32]
 801cd9a:	627b      	str	r3, [r7, #36]	; 0x24
    begin = nk_str_at_rune(s, pos, &unicode, &unused);
 801cd9c:	f107 0314 	add.w	r3, r7, #20
 801cda0:	f107 0218 	add.w	r2, r7, #24
 801cda4:	68b9      	ldr	r1, [r7, #8]
 801cda6:	68f8      	ldr	r0, [r7, #12]
 801cda8:	f000 f832 	bl	801ce10 <nk_str_at_rune>
 801cdac:	6238      	str	r0, [r7, #32]
    if (!begin) return;
 801cdae:	6a3b      	ldr	r3, [r7, #32]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d01e      	beq.n	801cdf2 <nk_str_delete_runes+0xe6>
    s->buffer.memory.ptr = begin;
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	6a3a      	ldr	r2, [r7, #32]
 801cdb8:	621a      	str	r2, [r3, #32]
    end = nk_str_at_rune(s, len, &unicode, &unused);
 801cdba:	f107 0314 	add.w	r3, r7, #20
 801cdbe:	f107 0218 	add.w	r2, r7, #24
 801cdc2:	6879      	ldr	r1, [r7, #4]
 801cdc4:	68f8      	ldr	r0, [r7, #12]
 801cdc6:	f000 f823 	bl	801ce10 <nk_str_at_rune>
 801cdca:	61f8      	str	r0, [r7, #28]
    s->buffer.memory.ptr = temp;
 801cdcc:	68fb      	ldr	r3, [r7, #12]
 801cdce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdd0:	621a      	str	r2, [r3, #32]
    if (!end) return;
 801cdd2:	69fb      	ldr	r3, [r7, #28]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d00e      	beq.n	801cdf6 <nk_str_delete_runes+0xea>
    nk_str_delete_chars(s, (int)(begin - temp), (int)(end - begin));
 801cdd8:	6a3a      	ldr	r2, [r7, #32]
 801cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cddc:	1ad1      	subs	r1, r2, r3
 801cdde:	69fa      	ldr	r2, [r7, #28]
 801cde0:	6a3b      	ldr	r3, [r7, #32]
 801cde2:	1ad3      	subs	r3, r2, r3
 801cde4:	461a      	mov	r2, r3
 801cde6:	68f8      	ldr	r0, [r7, #12]
 801cde8:	f7ff ff1c 	bl	801cc24 <nk_str_delete_chars>
 801cdec:	e004      	b.n	801cdf8 <nk_str_delete_runes+0xec>
    if (!len) return;
 801cdee:	bf00      	nop
 801cdf0:	e002      	b.n	801cdf8 <nk_str_delete_runes+0xec>
    if (!begin) return;
 801cdf2:	bf00      	nop
 801cdf4:	e000      	b.n	801cdf8 <nk_str_delete_runes+0xec>
    if (!end) return;
 801cdf6:	bf00      	nop
}
 801cdf8:	3728      	adds	r7, #40	; 0x28
 801cdfa:	46bd      	mov	sp, r7
 801cdfc:	bd80      	pop	{r7, pc}
 801cdfe:	bf00      	nop
 801ce00:	08028df0 	.word	0x08028df0
 801ce04:	0802aa78 	.word	0x0802aa78
 801ce08:	08028df4 	.word	0x08028df4
 801ce0c:	08028eb8 	.word	0x08028eb8

0801ce10 <nk_str_at_rune>:
    if (!s || pos > (int)s->buffer.allocated) return 0;
    return nk_ptr_add(char, s->buffer.memory.ptr, pos);
}
NK_API char*
nk_str_at_rune(struct nk_str *str, int pos, nk_rune *unicode, int *len)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b08a      	sub	sp, #40	; 0x28
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	60f8      	str	r0, [r7, #12]
 801ce18:	60b9      	str	r1, [r7, #8]
 801ce1a:	607a      	str	r2, [r7, #4]
 801ce1c:	603b      	str	r3, [r7, #0]
    int i = 0;
 801ce1e:	2300      	movs	r3, #0
 801ce20:	627b      	str	r3, [r7, #36]	; 0x24
    int src_len = 0;
 801ce22:	2300      	movs	r3, #0
 801ce24:	623b      	str	r3, [r7, #32]
    int glyph_len = 0;
 801ce26:	2300      	movs	r3, #0
 801ce28:	61fb      	str	r3, [r7, #28]
    char *text;
    int text_len;

    NK_ASSERT(str);
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d106      	bne.n	801ce3e <nk_str_at_rune+0x2e>
 801ce30:	4b33      	ldr	r3, [pc, #204]	; (801cf00 <nk_str_at_rune+0xf0>)
 801ce32:	4a34      	ldr	r2, [pc, #208]	; (801cf04 <nk_str_at_rune+0xf4>)
 801ce34:	f240 1149 	movw	r1, #329	; 0x149
 801ce38:	4833      	ldr	r0, [pc, #204]	; (801cf08 <nk_str_at_rune+0xf8>)
 801ce3a:	f007 fe59 	bl	8024af0 <__assert_func>
    NK_ASSERT(unicode);
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d106      	bne.n	801ce52 <nk_str_at_rune+0x42>
 801ce44:	4b31      	ldr	r3, [pc, #196]	; (801cf0c <nk_str_at_rune+0xfc>)
 801ce46:	4a2f      	ldr	r2, [pc, #188]	; (801cf04 <nk_str_at_rune+0xf4>)
 801ce48:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801ce4c:	482e      	ldr	r0, [pc, #184]	; (801cf08 <nk_str_at_rune+0xf8>)
 801ce4e:	f007 fe4f 	bl	8024af0 <__assert_func>
    NK_ASSERT(len);
 801ce52:	683b      	ldr	r3, [r7, #0]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d106      	bne.n	801ce66 <nk_str_at_rune+0x56>
 801ce58:	4b2d      	ldr	r3, [pc, #180]	; (801cf10 <nk_str_at_rune+0x100>)
 801ce5a:	4a2a      	ldr	r2, [pc, #168]	; (801cf04 <nk_str_at_rune+0xf4>)
 801ce5c:	f240 114b 	movw	r1, #331	; 0x14b
 801ce60:	4829      	ldr	r0, [pc, #164]	; (801cf08 <nk_str_at_rune+0xf8>)
 801ce62:	f007 fe45 	bl	8024af0 <__assert_func>

    if (!str || !unicode || !len) return 0;
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d005      	beq.n	801ce78 <nk_str_at_rune+0x68>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d002      	beq.n	801ce78 <nk_str_at_rune+0x68>
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d101      	bne.n	801ce7c <nk_str_at_rune+0x6c>
 801ce78:	2300      	movs	r3, #0
 801ce7a:	e03d      	b.n	801cef8 <nk_str_at_rune+0xe8>
    if (pos < 0) {
 801ce7c:	68bb      	ldr	r3, [r7, #8]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	da07      	bge.n	801ce92 <nk_str_at_rune+0x82>
        *unicode = 0;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	2200      	movs	r2, #0
 801ce86:	601a      	str	r2, [r3, #0]
        *len = 0;
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	601a      	str	r2, [r3, #0]
        return 0;
 801ce8e:	2300      	movs	r3, #0
 801ce90:	e032      	b.n	801cef8 <nk_str_at_rune+0xe8>
    }

    text = (char*)str->buffer.memory.ptr;
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	6a1b      	ldr	r3, [r3, #32]
 801ce96:	61bb      	str	r3, [r7, #24]
    text_len = (int)str->buffer.allocated;
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce9c:	617b      	str	r3, [r7, #20]
    glyph_len = nk_utf_decode(text, unicode, text_len);
 801ce9e:	697a      	ldr	r2, [r7, #20]
 801cea0:	6879      	ldr	r1, [r7, #4]
 801cea2:	69b8      	ldr	r0, [r7, #24]
 801cea4:	f005 f980 	bl	80221a8 <nk_utf_decode>
 801cea8:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801ceaa:	e019      	b.n	801cee0 <nk_str_at_rune+0xd0>
        if (i == pos) {
 801ceac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ceae:	68bb      	ldr	r3, [r7, #8]
 801ceb0:	429a      	cmp	r2, r3
 801ceb2:	d103      	bne.n	801cebc <nk_str_at_rune+0xac>
            *len = glyph_len;
 801ceb4:	683b      	ldr	r3, [r7, #0]
 801ceb6:	69fa      	ldr	r2, [r7, #28]
 801ceb8:	601a      	str	r2, [r3, #0]
            break;
 801ceba:	e014      	b.n	801cee6 <nk_str_at_rune+0xd6>
        }

        i++;
 801cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cebe:	3301      	adds	r3, #1
 801cec0:	627b      	str	r3, [r7, #36]	; 0x24
        src_len = src_len + glyph_len;
 801cec2:	6a3a      	ldr	r2, [r7, #32]
 801cec4:	69fb      	ldr	r3, [r7, #28]
 801cec6:	4413      	add	r3, r2
 801cec8:	623b      	str	r3, [r7, #32]
        glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);
 801ceca:	6a3b      	ldr	r3, [r7, #32]
 801cecc:	69ba      	ldr	r2, [r7, #24]
 801cece:	18d0      	adds	r0, r2, r3
 801ced0:	697a      	ldr	r2, [r7, #20]
 801ced2:	6a3b      	ldr	r3, [r7, #32]
 801ced4:	1ad3      	subs	r3, r2, r3
 801ced6:	461a      	mov	r2, r3
 801ced8:	6879      	ldr	r1, [r7, #4]
 801ceda:	f005 f965 	bl	80221a8 <nk_utf_decode>
 801cede:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801cee0:	69fb      	ldr	r3, [r7, #28]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d1e2      	bne.n	801ceac <nk_str_at_rune+0x9c>
    }
    if (i != pos) return 0;
 801cee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cee8:	68bb      	ldr	r3, [r7, #8]
 801ceea:	429a      	cmp	r2, r3
 801ceec:	d001      	beq.n	801cef2 <nk_str_at_rune+0xe2>
 801ceee:	2300      	movs	r3, #0
 801cef0:	e002      	b.n	801cef8 <nk_str_at_rune+0xe8>
    return text + src_len;
 801cef2:	6a3b      	ldr	r3, [r7, #32]
 801cef4:	69ba      	ldr	r2, [r7, #24]
 801cef6:	4413      	add	r3, r2
}
 801cef8:	4618      	mov	r0, r3
 801cefa:	3728      	adds	r7, #40	; 0x28
 801cefc:	46bd      	mov	sp, r7
 801cefe:	bd80      	pop	{r7, pc}
 801cf00:	08028e10 	.word	0x08028e10
 801cf04:	0802aa8c 	.word	0x0802aa8c
 801cf08:	08028df4 	.word	0x08028df4
 801cf0c:	08028ecc 	.word	0x08028ecc
 801cf10:	08028e80 	.word	0x08028e80

0801cf14 <nk_str_at_const>:
    if (!s || pos > (int)s->buffer.allocated) return 0;
    return nk_ptr_add(char, s->buffer.memory.ptr, pos);
}
NK_API const char*
nk_str_at_const(const struct nk_str *str, int pos, nk_rune *unicode, int *len)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b08a      	sub	sp, #40	; 0x28
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	60f8      	str	r0, [r7, #12]
 801cf1c:	60b9      	str	r1, [r7, #8]
 801cf1e:	607a      	str	r2, [r7, #4]
 801cf20:	603b      	str	r3, [r7, #0]
    int i = 0;
 801cf22:	2300      	movs	r3, #0
 801cf24:	627b      	str	r3, [r7, #36]	; 0x24
    int src_len = 0;
 801cf26:	2300      	movs	r3, #0
 801cf28:	623b      	str	r3, [r7, #32]
    int glyph_len = 0;
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	61fb      	str	r3, [r7, #28]
    char *text;
    int text_len;

    NK_ASSERT(str);
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d106      	bne.n	801cf42 <nk_str_at_const+0x2e>
 801cf34:	4b33      	ldr	r3, [pc, #204]	; (801d004 <nk_str_at_const+0xf0>)
 801cf36:	4a34      	ldr	r2, [pc, #208]	; (801d008 <nk_str_at_const+0xf4>)
 801cf38:	f44f 71ba 	mov.w	r1, #372	; 0x174
 801cf3c:	4833      	ldr	r0, [pc, #204]	; (801d00c <nk_str_at_const+0xf8>)
 801cf3e:	f007 fdd7 	bl	8024af0 <__assert_func>
    NK_ASSERT(unicode);
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d106      	bne.n	801cf56 <nk_str_at_const+0x42>
 801cf48:	4b31      	ldr	r3, [pc, #196]	; (801d010 <nk_str_at_const+0xfc>)
 801cf4a:	4a2f      	ldr	r2, [pc, #188]	; (801d008 <nk_str_at_const+0xf4>)
 801cf4c:	f240 1175 	movw	r1, #373	; 0x175
 801cf50:	482e      	ldr	r0, [pc, #184]	; (801d00c <nk_str_at_const+0xf8>)
 801cf52:	f007 fdcd 	bl	8024af0 <__assert_func>
    NK_ASSERT(len);
 801cf56:	683b      	ldr	r3, [r7, #0]
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d106      	bne.n	801cf6a <nk_str_at_const+0x56>
 801cf5c:	4b2d      	ldr	r3, [pc, #180]	; (801d014 <nk_str_at_const+0x100>)
 801cf5e:	4a2a      	ldr	r2, [pc, #168]	; (801d008 <nk_str_at_const+0xf4>)
 801cf60:	f44f 71bb 	mov.w	r1, #374	; 0x176
 801cf64:	4829      	ldr	r0, [pc, #164]	; (801d00c <nk_str_at_const+0xf8>)
 801cf66:	f007 fdc3 	bl	8024af0 <__assert_func>

    if (!str || !unicode || !len) return 0;
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d005      	beq.n	801cf7c <nk_str_at_const+0x68>
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d002      	beq.n	801cf7c <nk_str_at_const+0x68>
 801cf76:	683b      	ldr	r3, [r7, #0]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d101      	bne.n	801cf80 <nk_str_at_const+0x6c>
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	e03d      	b.n	801cffc <nk_str_at_const+0xe8>
    if (pos < 0) {
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	da07      	bge.n	801cf96 <nk_str_at_const+0x82>
        *unicode = 0;
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	2200      	movs	r2, #0
 801cf8a:	601a      	str	r2, [r3, #0]
        *len = 0;
 801cf8c:	683b      	ldr	r3, [r7, #0]
 801cf8e:	2200      	movs	r2, #0
 801cf90:	601a      	str	r2, [r3, #0]
        return 0;
 801cf92:	2300      	movs	r3, #0
 801cf94:	e032      	b.n	801cffc <nk_str_at_const+0xe8>
    }

    text = (char*)str->buffer.memory.ptr;
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	6a1b      	ldr	r3, [r3, #32]
 801cf9a:	61bb      	str	r3, [r7, #24]
    text_len = (int)str->buffer.allocated;
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfa0:	617b      	str	r3, [r7, #20]
    glyph_len = nk_utf_decode(text, unicode, text_len);
 801cfa2:	697a      	ldr	r2, [r7, #20]
 801cfa4:	6879      	ldr	r1, [r7, #4]
 801cfa6:	69b8      	ldr	r0, [r7, #24]
 801cfa8:	f005 f8fe 	bl	80221a8 <nk_utf_decode>
 801cfac:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801cfae:	e019      	b.n	801cfe4 <nk_str_at_const+0xd0>
        if (i == pos) {
 801cfb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfb2:	68bb      	ldr	r3, [r7, #8]
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	d103      	bne.n	801cfc0 <nk_str_at_const+0xac>
            *len = glyph_len;
 801cfb8:	683b      	ldr	r3, [r7, #0]
 801cfba:	69fa      	ldr	r2, [r7, #28]
 801cfbc:	601a      	str	r2, [r3, #0]
            break;
 801cfbe:	e014      	b.n	801cfea <nk_str_at_const+0xd6>
        }

        i++;
 801cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfc2:	3301      	adds	r3, #1
 801cfc4:	627b      	str	r3, [r7, #36]	; 0x24
        src_len = src_len + glyph_len;
 801cfc6:	6a3a      	ldr	r2, [r7, #32]
 801cfc8:	69fb      	ldr	r3, [r7, #28]
 801cfca:	4413      	add	r3, r2
 801cfcc:	623b      	str	r3, [r7, #32]
        glyph_len = nk_utf_decode(text + src_len, unicode, text_len - src_len);
 801cfce:	6a3b      	ldr	r3, [r7, #32]
 801cfd0:	69ba      	ldr	r2, [r7, #24]
 801cfd2:	18d0      	adds	r0, r2, r3
 801cfd4:	697a      	ldr	r2, [r7, #20]
 801cfd6:	6a3b      	ldr	r3, [r7, #32]
 801cfd8:	1ad3      	subs	r3, r2, r3
 801cfda:	461a      	mov	r2, r3
 801cfdc:	6879      	ldr	r1, [r7, #4]
 801cfde:	f005 f8e3 	bl	80221a8 <nk_utf_decode>
 801cfe2:	61f8      	str	r0, [r7, #28]
    while (glyph_len) {
 801cfe4:	69fb      	ldr	r3, [r7, #28]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d1e2      	bne.n	801cfb0 <nk_str_at_const+0x9c>
    }
    if (i != pos) return 0;
 801cfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfec:	68bb      	ldr	r3, [r7, #8]
 801cfee:	429a      	cmp	r2, r3
 801cff0:	d001      	beq.n	801cff6 <nk_str_at_const+0xe2>
 801cff2:	2300      	movs	r3, #0
 801cff4:	e002      	b.n	801cffc <nk_str_at_const+0xe8>
    return text + src_len;
 801cff6:	6a3b      	ldr	r3, [r7, #32]
 801cff8:	69ba      	ldr	r2, [r7, #24]
 801cffa:	4413      	add	r3, r2
}
 801cffc:	4618      	mov	r0, r3
 801cffe:	3728      	adds	r7, #40	; 0x28
 801d000:	46bd      	mov	sp, r7
 801d002:	bd80      	pop	{r7, pc}
 801d004:	08028e10 	.word	0x08028e10
 801d008:	0802aa9c 	.word	0x0802aa9c
 801d00c:	08028df4 	.word	0x08028df4
 801d010:	08028ecc 	.word	0x08028ecc
 801d014:	08028e80 	.word	0x08028e80

0801d018 <nk_str_rune_at>:
NK_API nk_rune
nk_str_rune_at(const struct nk_str *str, int pos)
{
 801d018:	b580      	push	{r7, lr}
 801d01a:	b084      	sub	sp, #16
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]
 801d020:	6039      	str	r1, [r7, #0]
    int len;
    nk_rune unicode = 0;
 801d022:	2300      	movs	r3, #0
 801d024:	60bb      	str	r3, [r7, #8]
    nk_str_at_const(str, pos, &unicode, &len);
 801d026:	f107 030c 	add.w	r3, r7, #12
 801d02a:	f107 0208 	add.w	r2, r7, #8
 801d02e:	6839      	ldr	r1, [r7, #0]
 801d030:	6878      	ldr	r0, [r7, #4]
 801d032:	f7ff ff6f 	bl	801cf14 <nk_str_at_const>
    return unicode;
 801d036:	68bb      	ldr	r3, [r7, #8]
}
 801d038:	4618      	mov	r0, r3
 801d03a:	3710      	adds	r7, #16
 801d03c:	46bd      	mov	sp, r7
 801d03e:	bd80      	pop	{r7, pc}

0801d040 <nk_str_get_const>:
    if (!s || !s->len || !s->buffer.allocated) return 0;
    return (char*)s->buffer.memory.ptr;
}
NK_API const char*
nk_str_get_const(const struct nk_str *s)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
    NK_ASSERT(s);
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d106      	bne.n	801d05c <nk_str_get_const+0x1c>
 801d04e:	4b0d      	ldr	r3, [pc, #52]	; (801d084 <nk_str_get_const+0x44>)
 801d050:	4a0d      	ldr	r2, [pc, #52]	; (801d088 <nk_str_get_const+0x48>)
 801d052:	f240 11a1 	movw	r1, #417	; 0x1a1
 801d056:	480d      	ldr	r0, [pc, #52]	; (801d08c <nk_str_get_const+0x4c>)
 801d058:	f007 fd4a 	bl	8024af0 <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d007      	beq.n	801d072 <nk_str_get_const+0x32>
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d066:	2b00      	cmp	r3, #0
 801d068:	d003      	beq.n	801d072 <nk_str_get_const+0x32>
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d101      	bne.n	801d076 <nk_str_get_const+0x36>
 801d072:	2300      	movs	r3, #0
 801d074:	e001      	b.n	801d07a <nk_str_get_const+0x3a>
    return (const char*)s->buffer.memory.ptr;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	6a1b      	ldr	r3, [r3, #32]
}
 801d07a:	4618      	mov	r0, r3
 801d07c:	3708      	adds	r7, #8
 801d07e:	46bd      	mov	sp, r7
 801d080:	bd80      	pop	{r7, pc}
 801d082:	bf00      	nop
 801d084:	08028df0 	.word	0x08028df0
 801d088:	0802aaac 	.word	0x0802aaac
 801d08c:	08028df4 	.word	0x08028df4

0801d090 <nk_str_len>:
NK_API int
nk_str_len(struct nk_str *s)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
    NK_ASSERT(s);
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d106      	bne.n	801d0ac <nk_str_len+0x1c>
 801d09e:	4b0d      	ldr	r3, [pc, #52]	; (801d0d4 <nk_str_len+0x44>)
 801d0a0:	4a0d      	ldr	r2, [pc, #52]	; (801d0d8 <nk_str_len+0x48>)
 801d0a2:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 801d0a6:	480d      	ldr	r0, [pc, #52]	; (801d0dc <nk_str_len+0x4c>)
 801d0a8:	f007 fd22 	bl	8024af0 <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d007      	beq.n	801d0c2 <nk_str_len+0x32>
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d003      	beq.n	801d0c2 <nk_str_len+0x32>
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d101      	bne.n	801d0c6 <nk_str_len+0x36>
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	e001      	b.n	801d0ca <nk_str_len+0x3a>
    return s->len;
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	3708      	adds	r7, #8
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	bd80      	pop	{r7, pc}
 801d0d2:	bf00      	nop
 801d0d4:	08028df0 	.word	0x08028df0
 801d0d8:	0802aac0 	.word	0x0802aac0
 801d0dc:	08028df4 	.word	0x08028df4

0801d0e0 <nk_str_len_char>:
NK_API int
nk_str_len_char(struct nk_str *s)
{
 801d0e0:	b580      	push	{r7, lr}
 801d0e2:	b082      	sub	sp, #8
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	6078      	str	r0, [r7, #4]
    NK_ASSERT(s);
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d106      	bne.n	801d0fc <nk_str_len_char+0x1c>
 801d0ee:	4b0d      	ldr	r3, [pc, #52]	; (801d124 <nk_str_len_char+0x44>)
 801d0f0:	4a0d      	ldr	r2, [pc, #52]	; (801d128 <nk_str_len_char+0x48>)
 801d0f2:	f240 11af 	movw	r1, #431	; 0x1af
 801d0f6:	480d      	ldr	r0, [pc, #52]	; (801d12c <nk_str_len_char+0x4c>)
 801d0f8:	f007 fcfa 	bl	8024af0 <__assert_func>
    if (!s || !s->len || !s->buffer.allocated) return 0;
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d007      	beq.n	801d112 <nk_str_len_char+0x32>
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d106:	2b00      	cmp	r3, #0
 801d108:	d003      	beq.n	801d112 <nk_str_len_char+0x32>
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d101      	bne.n	801d116 <nk_str_len_char+0x36>
 801d112:	2300      	movs	r3, #0
 801d114:	e001      	b.n	801d11a <nk_str_len_char+0x3a>
    return (int)s->buffer.allocated;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3708      	adds	r7, #8
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}
 801d122:	bf00      	nop
 801d124:	08028df0 	.word	0x08028df0
 801d128:	0802aacc 	.word	0x0802aacc
 801d12c:	08028df4 	.word	0x08028df4

0801d130 <nk_style_default>:
/* ===============================================================
 *
 *                              STYLE
 *
 * ===============================================================*/
NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}
 801d130:	b580      	push	{r7, lr}
 801d132:	b082      	sub	sp, #8
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
 801d138:	2100      	movs	r1, #0
 801d13a:	6878      	ldr	r0, [r7, #4]
 801d13c:	f000 f838 	bl	801d1b0 <nk_style_from_table>
 801d140:	bf00      	nop
 801d142:	3708      	adds	r7, #8
 801d144:	46bd      	mov	sp, r7
 801d146:	bd80      	pop	{r7, pc}

0801d148 <nk_style_item_color>:
{
    return nk_color_names[c];
}
NK_API struct nk_style_item
nk_style_item_color(struct nk_color col)
{
 801d148:	b4b0      	push	{r4, r5, r7}
 801d14a:	b08b      	sub	sp, #44	; 0x2c
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
 801d150:	6039      	str	r1, [r7, #0]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 801d152:	2300      	movs	r3, #0
 801d154:	733b      	strb	r3, [r7, #12]
    i.data.color = col;
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	613b      	str	r3, [r7, #16]
    return i;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	461d      	mov	r5, r3
 801d15e:	f107 040c 	add.w	r4, r7, #12
 801d162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d166:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d16a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801d16e:	6878      	ldr	r0, [r7, #4]
 801d170:	372c      	adds	r7, #44	; 0x2c
 801d172:	46bd      	mov	sp, r7
 801d174:	bcb0      	pop	{r4, r5, r7}
 801d176:	4770      	bx	lr

0801d178 <nk_style_item_hide>:
    i.data.slice = slice;
    return i;
}
NK_API struct nk_style_item
nk_style_item_hide(void)
{
 801d178:	b5b0      	push	{r4, r5, r7, lr}
 801d17a:	b08a      	sub	sp, #40	; 0x28
 801d17c:	af00      	add	r7, sp, #0
 801d17e:	6078      	str	r0, [r7, #4]
    struct nk_style_item i;
    i.type = NK_STYLE_ITEM_COLOR;
 801d180:	2300      	movs	r3, #0
 801d182:	733b      	strb	r3, [r7, #12]
    i.data.color = nk_rgba(0,0,0,0);
 801d184:	2300      	movs	r3, #0
 801d186:	2200      	movs	r2, #0
 801d188:	2100      	movs	r1, #0
 801d18a:	2000      	movs	r0, #0
 801d18c:	f7f2 fd86 	bl	800fc9c <nk_rgba>
 801d190:	4603      	mov	r3, r0
 801d192:	613b      	str	r3, [r7, #16]
    return i;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	461d      	mov	r5, r3
 801d198:	f107 040c 	add.w	r4, r7, #12
 801d19c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d19e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d1a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d1a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801d1a8:	6878      	ldr	r0, [r7, #4]
 801d1aa:	3728      	adds	r7, #40	; 0x28
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bdb0      	pop	{r4, r5, r7, pc}

0801d1b0 <nk_style_from_table>:
NK_API void
nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)
{
 801d1b0:	b5b0      	push	{r4, r5, r7, lr}
 801d1b2:	b09e      	sub	sp, #120	; 0x78
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6278      	str	r0, [r7, #36]	; 0x24
 801d1b8:	6239      	str	r1, [r7, #32]
    struct nk_style_combo *combo;
    struct nk_style_chart *chart;
    struct nk_style_tab *tab;
    struct nk_style_window *win;

    NK_ASSERT(ctx);
 801d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d105      	bne.n	801d1cc <nk_style_from_table+0x1c>
 801d1c0:	4b09      	ldr	r3, [pc, #36]	; (801d1e8 <nk_style_from_table+0x38>)
 801d1c2:	4a0a      	ldr	r2, [pc, #40]	; (801d1ec <nk_style_from_table+0x3c>)
 801d1c4:	216b      	movs	r1, #107	; 0x6b
 801d1c6:	480a      	ldr	r0, [pc, #40]	; (801d1f0 <nk_style_from_table+0x40>)
 801d1c8:	f007 fc92 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 801d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	f002 8079 	beq.w	801f2c6 <nk_style_from_table+0x2116>
    style = &ctx->style;
 801d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801d1da:	677b      	str	r3, [r7, #116]	; 0x74
    table = (!table) ? nk_default_color_style: table;
 801d1dc:	6a3b      	ldr	r3, [r7, #32]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d008      	beq.n	801d1f4 <nk_style_from_table+0x44>
 801d1e2:	6a3b      	ldr	r3, [r7, #32]
 801d1e4:	e007      	b.n	801d1f6 <nk_style_from_table+0x46>
 801d1e6:	bf00      	nop
 801d1e8:	08029140 	.word	0x08029140
 801d1ec:	0802ab4c 	.word	0x0802ab4c
 801d1f0:	08029144 	.word	0x08029144
 801d1f4:	4bc6      	ldr	r3, [pc, #792]	; (801d510 <nk_style_from_table+0x360>)
 801d1f6:	623b      	str	r3, [r7, #32]

    /* default text */
    text = &style->text;
 801d1f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1fa:	332c      	adds	r3, #44	; 0x2c
 801d1fc:	673b      	str	r3, [r7, #112]	; 0x70
    text->color = table[NK_COLOR_TEXT];
 801d1fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d200:	6a3a      	ldr	r2, [r7, #32]
 801d202:	6810      	ldr	r0, [r2, #0]
 801d204:	6018      	str	r0, [r3, #0]
    text->padding = nk_vec2(0,0);
 801d206:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801d208:	eddf 0ac2 	vldr	s1, [pc, #776]	; 801d514 <nk_style_from_table+0x364>
 801d20c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801d514 <nk_style_from_table+0x364>
 801d210:	f7f9 fbca 	bl	80169a8 <nk_vec2>
 801d214:	eeb0 7a40 	vmov.f32	s14, s0
 801d218:	eef0 7a60 	vmov.f32	s15, s1
 801d21c:	ed84 7a01 	vstr	s14, [r4, #4]
 801d220:	edc4 7a02 	vstr	s15, [r4, #8]

    /* default button */
    button = &style->button;
 801d224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d226:	3338      	adds	r3, #56	; 0x38
 801d228:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801d22a:	2198      	movs	r1, #152	; 0x98
 801d22c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d22e:	f005 fa35 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_BUTTON]);
 801d232:	6a3b      	ldr	r3, [r7, #32]
 801d234:	3310      	adds	r3, #16
 801d236:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d238:	463a      	mov	r2, r7
 801d23a:	6819      	ldr	r1, [r3, #0]
 801d23c:	460b      	mov	r3, r1
 801d23e:	4619      	mov	r1, r3
 801d240:	4610      	mov	r0, r2
 801d242:	f7ff ff81 	bl	801d148 <nk_style_item_color>
 801d246:	4625      	mov	r5, r4
 801d248:	463c      	mov	r4, r7
 801d24a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d24c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d24e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d252:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801d256:	6a3b      	ldr	r3, [r7, #32]
 801d258:	3314      	adds	r3, #20
 801d25a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d25c:	463a      	mov	r2, r7
 801d25e:	6819      	ldr	r1, [r3, #0]
 801d260:	460b      	mov	r3, r1
 801d262:	4619      	mov	r1, r3
 801d264:	4610      	mov	r0, r2
 801d266:	f7ff ff6f 	bl	801d148 <nk_style_item_color>
 801d26a:	341c      	adds	r4, #28
 801d26c:	463d      	mov	r5, r7
 801d26e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 801d27a:	6a3b      	ldr	r3, [r7, #32]
 801d27c:	3318      	adds	r3, #24
 801d27e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d280:	463a      	mov	r2, r7
 801d282:	6819      	ldr	r1, [r3, #0]
 801d284:	460b      	mov	r3, r1
 801d286:	4619      	mov	r1, r3
 801d288:	4610      	mov	r0, r2
 801d28a:	f7ff ff5d 	bl	801d148 <nk_style_item_color>
 801d28e:	3438      	adds	r4, #56	; 0x38
 801d290:	463d      	mov	r5, r7
 801d292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d296:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d29a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_BORDER];
 801d29e:	6a3b      	ldr	r3, [r7, #32]
 801d2a0:	f103 020c 	add.w	r2, r3, #12
 801d2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2a6:	3354      	adds	r3, #84	; 0x54
 801d2a8:	6810      	ldr	r0, [r2, #0]
 801d2aa:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_BUTTON];
 801d2ac:	6a3b      	ldr	r3, [r7, #32]
 801d2ae:	f103 0210 	add.w	r2, r3, #16
 801d2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2b4:	3358      	adds	r3, #88	; 0x58
 801d2b6:	6810      	ldr	r0, [r2, #0]
 801d2b8:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801d2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2bc:	6a3a      	ldr	r2, [r7, #32]
 801d2be:	335c      	adds	r3, #92	; 0x5c
 801d2c0:	6810      	ldr	r0, [r2, #0]
 801d2c2:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801d2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2c6:	6a3a      	ldr	r2, [r7, #32]
 801d2c8:	3360      	adds	r3, #96	; 0x60
 801d2ca:	6810      	ldr	r0, [r2, #0]
 801d2cc:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801d2ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2d0:	6a3a      	ldr	r2, [r7, #32]
 801d2d2:	3364      	adds	r3, #100	; 0x64
 801d2d4:	6810      	ldr	r0, [r2, #0]
 801d2d6:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801d2d8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d2da:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d2de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d2e2:	f7f9 fb61 	bl	80169a8 <nk_vec2>
 801d2e6:	eeb0 7a40 	vmov.f32	s14, s0
 801d2ea:	eef0 7a60 	vmov.f32	s15, s1
 801d2ee:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801d2f2:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->image_padding   = nk_vec2(0.0f,0.0f);
 801d2f6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d2f8:	eddf 0a86 	vldr	s1, [pc, #536]	; 801d514 <nk_style_from_table+0x364>
 801d2fc:	ed9f 0a85 	vldr	s0, [pc, #532]	; 801d514 <nk_style_from_table+0x364>
 801d300:	f7f9 fb52 	bl	80169a8 <nk_vec2>
 801d304:	eeb0 7a40 	vmov.f32	s14, s0
 801d308:	eef0 7a60 	vmov.f32	s15, s1
 801d30c:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801d310:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
    button->touch_padding   = nk_vec2(0.0f, 0.0f);
 801d314:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d316:	eddf 0a7f 	vldr	s1, [pc, #508]	; 801d514 <nk_style_from_table+0x364>
 801d31a:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 801d514 <nk_style_from_table+0x364>
 801d31e:	f7f9 fb43 	bl	80169a8 <nk_vec2>
 801d322:	eeb0 7a40 	vmov.f32	s14, s0
 801d326:	eef0 7a60 	vmov.f32	s15, s1
 801d32a:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801d32e:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801d332:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d334:	2000      	movs	r0, #0
 801d336:	f7f7 fddd 	bl	8014ef4 <nk_handle_ptr>
 801d33a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801d33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d340:	2212      	movs	r2, #18
 801d342:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801d344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d346:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801d34a:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 4.0f;
 801d34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d34e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801d352:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801d354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d356:	2200      	movs	r2, #0
 801d358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801d35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d35e:	2200      	movs	r2, #0
 801d360:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* contextual button */
    button = &style->contextual_button;
 801d364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d366:	33d0      	adds	r3, #208	; 0xd0
 801d368:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801d36a:	2198      	movs	r1, #152	; 0x98
 801d36c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d36e:	f005 f995 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d372:	6a3b      	ldr	r3, [r7, #32]
 801d374:	3304      	adds	r3, #4
 801d376:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d378:	463a      	mov	r2, r7
 801d37a:	6819      	ldr	r1, [r3, #0]
 801d37c:	460b      	mov	r3, r1
 801d37e:	4619      	mov	r1, r3
 801d380:	4610      	mov	r0, r2
 801d382:	f7ff fee1 	bl	801d148 <nk_style_item_color>
 801d386:	4625      	mov	r5, r4
 801d388:	463c      	mov	r4, r7
 801d38a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d38c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d38e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d392:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_BUTTON_HOVER]);
 801d396:	6a3b      	ldr	r3, [r7, #32]
 801d398:	3314      	adds	r3, #20
 801d39a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d39c:	463a      	mov	r2, r7
 801d39e:	6819      	ldr	r1, [r3, #0]
 801d3a0:	460b      	mov	r3, r1
 801d3a2:	4619      	mov	r1, r3
 801d3a4:	4610      	mov	r0, r2
 801d3a6:	f7ff fecf 	bl	801d148 <nk_style_item_color>
 801d3aa:	341c      	adds	r4, #28
 801d3ac:	463d      	mov	r5, r7
 801d3ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d3b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d3b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d3b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_BUTTON_ACTIVE]);
 801d3ba:	6a3b      	ldr	r3, [r7, #32]
 801d3bc:	3318      	adds	r3, #24
 801d3be:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d3c0:	463a      	mov	r2, r7
 801d3c2:	6819      	ldr	r1, [r3, #0]
 801d3c4:	460b      	mov	r3, r1
 801d3c6:	4619      	mov	r1, r3
 801d3c8:	4610      	mov	r0, r2
 801d3ca:	f7ff febd 	bl	801d148 <nk_style_item_color>
 801d3ce:	3438      	adds	r4, #56	; 0x38
 801d3d0:	463d      	mov	r5, r7
 801d3d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d3d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d3d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d3da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 801d3de:	6a3b      	ldr	r3, [r7, #32]
 801d3e0:	1d1a      	adds	r2, r3, #4
 801d3e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3e4:	3354      	adds	r3, #84	; 0x54
 801d3e6:	6810      	ldr	r0, [r2, #0]
 801d3e8:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 801d3ea:	6a3b      	ldr	r3, [r7, #32]
 801d3ec:	1d1a      	adds	r2, r3, #4
 801d3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3f0:	3358      	adds	r3, #88	; 0x58
 801d3f2:	6810      	ldr	r0, [r2, #0]
 801d3f4:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801d3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d3f8:	6a3a      	ldr	r2, [r7, #32]
 801d3fa:	335c      	adds	r3, #92	; 0x5c
 801d3fc:	6810      	ldr	r0, [r2, #0]
 801d3fe:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801d400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d402:	6a3a      	ldr	r2, [r7, #32]
 801d404:	3360      	adds	r3, #96	; 0x60
 801d406:	6810      	ldr	r0, [r2, #0]
 801d408:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801d40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d40c:	6a3a      	ldr	r2, [r7, #32]
 801d40e:	3364      	adds	r3, #100	; 0x64
 801d410:	6810      	ldr	r0, [r2, #0]
 801d412:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801d414:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d416:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d41a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d41e:	f7f9 fac3 	bl	80169a8 <nk_vec2>
 801d422:	eeb0 7a40 	vmov.f32	s14, s0
 801d426:	eef0 7a60 	vmov.f32	s15, s1
 801d42a:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801d42e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801d432:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d434:	eddf 0a37 	vldr	s1, [pc, #220]	; 801d514 <nk_style_from_table+0x364>
 801d438:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801d514 <nk_style_from_table+0x364>
 801d43c:	f7f9 fab4 	bl	80169a8 <nk_vec2>
 801d440:	eeb0 7a40 	vmov.f32	s14, s0
 801d444:	eef0 7a60 	vmov.f32	s15, s1
 801d448:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801d44c:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801d450:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d452:	2000      	movs	r0, #0
 801d454:	f7f7 fd4e 	bl	8014ef4 <nk_handle_ptr>
 801d458:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801d45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d45e:	2212      	movs	r2, #18
 801d460:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801d462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d464:	f04f 0200 	mov.w	r2, #0
 801d468:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801d46a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d46c:	f04f 0200 	mov.w	r2, #0
 801d470:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801d472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d474:	2200      	movs	r2, #0
 801d476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801d47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d47c:	2200      	movs	r2, #0
 801d47e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* menu button */
    button = &style->menu_button;
 801d482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d484:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801d488:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801d48a:	2198      	movs	r1, #152	; 0x98
 801d48c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801d48e:	f005 f905 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d492:	6a3b      	ldr	r3, [r7, #32]
 801d494:	3304      	adds	r3, #4
 801d496:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d498:	463a      	mov	r2, r7
 801d49a:	6819      	ldr	r1, [r3, #0]
 801d49c:	460b      	mov	r3, r1
 801d49e:	4619      	mov	r1, r3
 801d4a0:	4610      	mov	r0, r2
 801d4a2:	f7ff fe51 	bl	801d148 <nk_style_item_color>
 801d4a6:	4625      	mov	r5, r4
 801d4a8:	463c      	mov	r4, r7
 801d4aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d4ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d4ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d4b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d4b6:	6a3b      	ldr	r3, [r7, #32]
 801d4b8:	3304      	adds	r3, #4
 801d4ba:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d4bc:	463a      	mov	r2, r7
 801d4be:	6819      	ldr	r1, [r3, #0]
 801d4c0:	460b      	mov	r3, r1
 801d4c2:	4619      	mov	r1, r3
 801d4c4:	4610      	mov	r0, r2
 801d4c6:	f7ff fe3f 	bl	801d148 <nk_style_item_color>
 801d4ca:	341c      	adds	r4, #28
 801d4cc:	463d      	mov	r5, r7
 801d4ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d4d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d4d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d4d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801d4da:	6a3b      	ldr	r3, [r7, #32]
 801d4dc:	3304      	adds	r3, #4
 801d4de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d4e0:	463a      	mov	r2, r7
 801d4e2:	6819      	ldr	r1, [r3, #0]
 801d4e4:	460b      	mov	r3, r1
 801d4e6:	4619      	mov	r1, r3
 801d4e8:	4610      	mov	r0, r2
 801d4ea:	f7ff fe2d 	bl	801d148 <nk_style_item_color>
 801d4ee:	3438      	adds	r4, #56	; 0x38
 801d4f0:	463d      	mov	r5, r7
 801d4f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d4f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d4f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d4fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = table[NK_COLOR_WINDOW];
 801d4fe:	6a3b      	ldr	r3, [r7, #32]
 801d500:	1d1a      	adds	r2, r3, #4
 801d502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d504:	3354      	adds	r3, #84	; 0x54
 801d506:	6810      	ldr	r0, [r2, #0]
 801d508:	6018      	str	r0, [r3, #0]
    button->text_background = table[NK_COLOR_WINDOW];
 801d50a:	6a3b      	ldr	r3, [r7, #32]
 801d50c:	1d1a      	adds	r2, r3, #4
 801d50e:	e003      	b.n	801d518 <nk_style_from_table+0x368>
 801d510:	0802aadc 	.word	0x0802aadc
 801d514:	00000000 	.word	0x00000000
 801d518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d51a:	3358      	adds	r3, #88	; 0x58
 801d51c:	6810      	ldr	r0, [r2, #0]
 801d51e:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801d520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d522:	6a3a      	ldr	r2, [r7, #32]
 801d524:	335c      	adds	r3, #92	; 0x5c
 801d526:	6810      	ldr	r0, [r2, #0]
 801d528:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801d52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d52c:	6a3a      	ldr	r2, [r7, #32]
 801d52e:	3360      	adds	r3, #96	; 0x60
 801d530:	6810      	ldr	r0, [r2, #0]
 801d532:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801d534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d536:	6a3a      	ldr	r2, [r7, #32]
 801d538:	3364      	adds	r3, #100	; 0x64
 801d53a:	6810      	ldr	r0, [r2, #0]
 801d53c:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801d53e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d540:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d544:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d548:	f7f9 fa2e 	bl	80169a8 <nk_vec2>
 801d54c:	eeb0 7a40 	vmov.f32	s14, s0
 801d550:	eef0 7a60 	vmov.f32	s15, s1
 801d554:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801d558:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801d55c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d55e:	ed5f 0a13 	vldr	s1, [pc, #-76]	; 801d514 <nk_style_from_table+0x364>
 801d562:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 801d514 <nk_style_from_table+0x364>
 801d566:	f7f9 fa1f 	bl	80169a8 <nk_vec2>
 801d56a:	eeb0 7a40 	vmov.f32	s14, s0
 801d56e:	eef0 7a60 	vmov.f32	s15, s1
 801d572:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801d576:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801d57a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801d57c:	2000      	movs	r0, #0
 801d57e:	f7f7 fcb9 	bl	8014ef4 <nk_handle_ptr>
 801d582:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801d586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d588:	2212      	movs	r2, #18
 801d58a:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801d58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d58e:	f04f 0200 	mov.w	r2, #0
 801d592:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 1.0f;
 801d594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d596:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801d59a:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801d59c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d59e:	2200      	movs	r2, #0
 801d5a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801d5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d5a6:	2200      	movs	r2, #0
 801d5a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* checkbox toggle */
    toggle = &style->checkbox;
 801d5ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5ae:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801d5b2:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 801d5b4:	21c8      	movs	r1, #200	; 0xc8
 801d5b6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d5b8:	f005 f870 	bl	802269c <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 801d5bc:	6a3b      	ldr	r3, [r7, #32]
 801d5be:	331c      	adds	r3, #28
 801d5c0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d5c2:	463a      	mov	r2, r7
 801d5c4:	6819      	ldr	r1, [r3, #0]
 801d5c6:	460b      	mov	r3, r1
 801d5c8:	4619      	mov	r1, r3
 801d5ca:	4610      	mov	r0, r2
 801d5cc:	f7ff fdbc 	bl	801d148 <nk_style_item_color>
 801d5d0:	4625      	mov	r5, r4
 801d5d2:	463c      	mov	r4, r7
 801d5d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d5d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d5d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d5dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d5e0:	6a3b      	ldr	r3, [r7, #32]
 801d5e2:	3320      	adds	r3, #32
 801d5e4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d5e6:	463a      	mov	r2, r7
 801d5e8:	6819      	ldr	r1, [r3, #0]
 801d5ea:	460b      	mov	r3, r1
 801d5ec:	4619      	mov	r1, r3
 801d5ee:	4610      	mov	r0, r2
 801d5f0:	f7ff fdaa 	bl	801d148 <nk_style_item_color>
 801d5f4:	341c      	adds	r4, #28
 801d5f6:	463d      	mov	r5, r7
 801d5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d5fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d604:	6a3b      	ldr	r3, [r7, #32]
 801d606:	3320      	adds	r3, #32
 801d608:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d60a:	463a      	mov	r2, r7
 801d60c:	6819      	ldr	r1, [r3, #0]
 801d60e:	460b      	mov	r3, r1
 801d610:	4619      	mov	r1, r3
 801d612:	4610      	mov	r0, r2
 801d614:	f7ff fd98 	bl	801d148 <nk_style_item_color>
 801d618:	3438      	adds	r4, #56	; 0x38
 801d61a:	463d      	mov	r5, r7
 801d61c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d628:	6a3b      	ldr	r3, [r7, #32]
 801d62a:	3324      	adds	r3, #36	; 0x24
 801d62c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d62e:	463a      	mov	r2, r7
 801d630:	6819      	ldr	r1, [r3, #0]
 801d632:	460b      	mov	r3, r1
 801d634:	4619      	mov	r1, r3
 801d636:	4610      	mov	r0, r2
 801d638:	f7ff fd86 	bl	801d148 <nk_style_item_color>
 801d63c:	3458      	adds	r4, #88	; 0x58
 801d63e:	463d      	mov	r5, r7
 801d640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d64c:	6a3b      	ldr	r3, [r7, #32]
 801d64e:	3324      	adds	r3, #36	; 0x24
 801d650:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d652:	463a      	mov	r2, r7
 801d654:	6819      	ldr	r1, [r3, #0]
 801d656:	460b      	mov	r3, r1
 801d658:	4619      	mov	r1, r3
 801d65a:	4610      	mov	r0, r2
 801d65c:	f7ff fd74 	bl	801d148 <nk_style_item_color>
 801d660:	3474      	adds	r4, #116	; 0x74
 801d662:	463d      	mov	r5, r7
 801d664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d66c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 801d670:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d672:	2000      	movs	r0, #0
 801d674:	f7f7 fc3e 	bl	8014ef4 <nk_handle_ptr>
 801d678:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 801d67c:	6a3b      	ldr	r3, [r7, #32]
 801d67e:	1d1a      	adds	r2, r3, #4
 801d680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d682:	339c      	adds	r3, #156	; 0x9c
 801d684:	6810      	ldr	r0, [r2, #0]
 801d686:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 801d688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d68a:	6a3a      	ldr	r2, [r7, #32]
 801d68c:	3390      	adds	r3, #144	; 0x90
 801d68e:	6810      	ldr	r0, [r2, #0]
 801d690:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 801d692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d694:	6a3a      	ldr	r2, [r7, #32]
 801d696:	3394      	adds	r3, #148	; 0x94
 801d698:	6810      	ldr	r0, [r2, #0]
 801d69a:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 801d69c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d69e:	6a3a      	ldr	r2, [r7, #32]
 801d6a0:	3398      	adds	r3, #152	; 0x98
 801d6a2:	6810      	ldr	r0, [r2, #0]
 801d6a4:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(2.0f, 2.0f);
 801d6a6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d6a8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d6ac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d6b0:	f7f9 f97a 	bl	80169a8 <nk_vec2>
 801d6b4:	eeb0 7a40 	vmov.f32	s14, s0
 801d6b8:	eef0 7a60 	vmov.f32	s15, s1
 801d6bc:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 801d6c0:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 801d6c4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d6c6:	ed5f 0a6d 	vldr	s1, [pc, #-436]	; 801d514 <nk_style_from_table+0x364>
 801d6ca:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 801d514 <nk_style_from_table+0x364>
 801d6ce:	f7f9 f96b 	bl	80169a8 <nk_vec2>
 801d6d2:	eeb0 7a40 	vmov.f32	s14, s0
 801d6d6:	eef0 7a60 	vmov.f32	s15, s1
 801d6da:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 801d6de:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 801d6e2:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d6e4:	2300      	movs	r3, #0
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	2100      	movs	r1, #0
 801d6ea:	2000      	movs	r0, #0
 801d6ec:	f7f2 fad6 	bl	800fc9c <nk_rgba>
 801d6f0:	4603      	mov	r3, r0
 801d6f2:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 801d6f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d6f6:	f04f 0200 	mov.w	r2, #0
 801d6fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 801d6fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d700:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801d704:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* option toggle */
    toggle = &style->option;
 801d708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d70a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801d70e:	66bb      	str	r3, [r7, #104]	; 0x68
    nk_zero_struct(*toggle);
 801d710:	21c8      	movs	r1, #200	; 0xc8
 801d712:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d714:	f004 ffc2 	bl	802269c <nk_zero>
    toggle->normal          = nk_style_item_color(table[NK_COLOR_TOGGLE]);
 801d718:	6a3b      	ldr	r3, [r7, #32]
 801d71a:	331c      	adds	r3, #28
 801d71c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d71e:	463a      	mov	r2, r7
 801d720:	6819      	ldr	r1, [r3, #0]
 801d722:	460b      	mov	r3, r1
 801d724:	4619      	mov	r1, r3
 801d726:	4610      	mov	r0, r2
 801d728:	f7ff fd0e 	bl	801d148 <nk_style_item_color>
 801d72c:	4625      	mov	r5, r4
 801d72e:	463c      	mov	r4, r7
 801d730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d734:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d738:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    toggle->hover           = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d73c:	6a3b      	ldr	r3, [r7, #32]
 801d73e:	3320      	adds	r3, #32
 801d740:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d742:	463a      	mov	r2, r7
 801d744:	6819      	ldr	r1, [r3, #0]
 801d746:	460b      	mov	r3, r1
 801d748:	4619      	mov	r1, r3
 801d74a:	4610      	mov	r0, r2
 801d74c:	f7ff fcfc 	bl	801d148 <nk_style_item_color>
 801d750:	341c      	adds	r4, #28
 801d752:	463d      	mov	r5, r7
 801d754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d758:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d75c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->active          = nk_style_item_color(table[NK_COLOR_TOGGLE_HOVER]);
 801d760:	6a3b      	ldr	r3, [r7, #32]
 801d762:	3320      	adds	r3, #32
 801d764:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d766:	463a      	mov	r2, r7
 801d768:	6819      	ldr	r1, [r3, #0]
 801d76a:	460b      	mov	r3, r1
 801d76c:	4619      	mov	r1, r3
 801d76e:	4610      	mov	r0, r2
 801d770:	f7ff fcea 	bl	801d148 <nk_style_item_color>
 801d774:	3438      	adds	r4, #56	; 0x38
 801d776:	463d      	mov	r5, r7
 801d778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d77a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d77c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d780:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_normal   = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d784:	6a3b      	ldr	r3, [r7, #32]
 801d786:	3324      	adds	r3, #36	; 0x24
 801d788:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d78a:	463a      	mov	r2, r7
 801d78c:	6819      	ldr	r1, [r3, #0]
 801d78e:	460b      	mov	r3, r1
 801d790:	4619      	mov	r1, r3
 801d792:	4610      	mov	r0, r2
 801d794:	f7ff fcd8 	bl	801d148 <nk_style_item_color>
 801d798:	3458      	adds	r4, #88	; 0x58
 801d79a:	463d      	mov	r5, r7
 801d79c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d79e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d7a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->cursor_hover    = nk_style_item_color(table[NK_COLOR_TOGGLE_CURSOR]);
 801d7a8:	6a3b      	ldr	r3, [r7, #32]
 801d7aa:	3324      	adds	r3, #36	; 0x24
 801d7ac:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d7ae:	463a      	mov	r2, r7
 801d7b0:	6819      	ldr	r1, [r3, #0]
 801d7b2:	460b      	mov	r3, r1
 801d7b4:	4619      	mov	r1, r3
 801d7b6:	4610      	mov	r0, r2
 801d7b8:	f7ff fcc6 	bl	801d148 <nk_style_item_color>
 801d7bc:	3474      	adds	r4, #116	; 0x74
 801d7be:	463d      	mov	r5, r7
 801d7c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d7c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d7c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d7c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    toggle->userdata        = nk_handle_ptr(0);
 801d7cc:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d7ce:	2000      	movs	r0, #0
 801d7d0:	f7f7 fb90 	bl	8014ef4 <nk_handle_ptr>
 801d7d4:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    toggle->text_background = table[NK_COLOR_WINDOW];
 801d7d8:	6a3b      	ldr	r3, [r7, #32]
 801d7da:	1d1a      	adds	r2, r3, #4
 801d7dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7de:	339c      	adds	r3, #156	; 0x9c
 801d7e0:	6810      	ldr	r0, [r2, #0]
 801d7e2:	6018      	str	r0, [r3, #0]
    toggle->text_normal     = table[NK_COLOR_TEXT];
 801d7e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7e6:	6a3a      	ldr	r2, [r7, #32]
 801d7e8:	3390      	adds	r3, #144	; 0x90
 801d7ea:	6810      	ldr	r0, [r2, #0]
 801d7ec:	6018      	str	r0, [r3, #0]
    toggle->text_hover      = table[NK_COLOR_TEXT];
 801d7ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7f0:	6a3a      	ldr	r2, [r7, #32]
 801d7f2:	3394      	adds	r3, #148	; 0x94
 801d7f4:	6810      	ldr	r0, [r2, #0]
 801d7f6:	6018      	str	r0, [r3, #0]
    toggle->text_active     = table[NK_COLOR_TEXT];
 801d7f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d7fa:	6a3a      	ldr	r2, [r7, #32]
 801d7fc:	3398      	adds	r3, #152	; 0x98
 801d7fe:	6810      	ldr	r0, [r2, #0]
 801d800:	6018      	str	r0, [r3, #0]
    toggle->padding         = nk_vec2(3.0f, 3.0f);
 801d802:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d804:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 801d808:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 801d80c:	f7f9 f8cc 	bl	80169a8 <nk_vec2>
 801d810:	eeb0 7a40 	vmov.f32	s14, s0
 801d814:	eef0 7a60 	vmov.f32	s15, s1
 801d818:	ed84 7a29 	vstr	s14, [r4, #164]	; 0xa4
 801d81c:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    toggle->touch_padding   = nk_vec2(0,0);
 801d820:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d822:	ed5f 0ac4 	vldr	s1, [pc, #-784]	; 801d514 <nk_style_from_table+0x364>
 801d826:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 801d514 <nk_style_from_table+0x364>
 801d82a:	f7f9 f8bd 	bl	80169a8 <nk_vec2>
 801d82e:	eeb0 7a40 	vmov.f32	s14, s0
 801d832:	eef0 7a60 	vmov.f32	s15, s1
 801d836:	ed84 7a2b 	vstr	s14, [r4, #172]	; 0xac
 801d83a:	edc4 7a2c 	vstr	s15, [r4, #176]	; 0xb0
    toggle->border_color    = nk_rgba(0,0,0,0);
 801d83e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 801d840:	2300      	movs	r3, #0
 801d842:	2200      	movs	r2, #0
 801d844:	2100      	movs	r1, #0
 801d846:	2000      	movs	r0, #0
 801d848:	f7f2 fa28 	bl	800fc9c <nk_rgba>
 801d84c:	4603      	mov	r3, r0
 801d84e:	6563      	str	r3, [r4, #84]	; 0x54
    toggle->border          = 0.0f;
 801d850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d852:	f04f 0200 	mov.w	r2, #0
 801d856:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    toggle->spacing         = 4;
 801d85a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d85c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801d860:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* selectable */
    select = &style->selectable;
 801d864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d866:	f503 7364 	add.w	r3, r3, #912	; 0x390
 801d86a:	667b      	str	r3, [r7, #100]	; 0x64
    nk_zero_struct(*select);
 801d86c:	21f0      	movs	r1, #240	; 0xf0
 801d86e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d870:	f004 ff14 	bl	802269c <nk_zero>
    select->normal          = nk_style_item_color(table[NK_COLOR_SELECT]);
 801d874:	6a3b      	ldr	r3, [r7, #32]
 801d876:	3328      	adds	r3, #40	; 0x28
 801d878:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d87a:	463a      	mov	r2, r7
 801d87c:	6819      	ldr	r1, [r3, #0]
 801d87e:	460b      	mov	r3, r1
 801d880:	4619      	mov	r1, r3
 801d882:	4610      	mov	r0, r2
 801d884:	f7ff fc60 	bl	801d148 <nk_style_item_color>
 801d888:	4625      	mov	r5, r4
 801d88a:	463c      	mov	r4, r7
 801d88c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d88e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d890:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d894:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    select->hover           = nk_style_item_color(table[NK_COLOR_SELECT]);
 801d898:	6a3b      	ldr	r3, [r7, #32]
 801d89a:	3328      	adds	r3, #40	; 0x28
 801d89c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d89e:	463a      	mov	r2, r7
 801d8a0:	6819      	ldr	r1, [r3, #0]
 801d8a2:	460b      	mov	r3, r1
 801d8a4:	4619      	mov	r1, r3
 801d8a6:	4610      	mov	r0, r2
 801d8a8:	f7ff fc4e 	bl	801d148 <nk_style_item_color>
 801d8ac:	341c      	adds	r4, #28
 801d8ae:	463d      	mov	r5, r7
 801d8b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d8b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed         = nk_style_item_color(table[NK_COLOR_SELECT]);
 801d8bc:	6a3b      	ldr	r3, [r7, #32]
 801d8be:	3328      	adds	r3, #40	; 0x28
 801d8c0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d8c2:	463a      	mov	r2, r7
 801d8c4:	6819      	ldr	r1, [r3, #0]
 801d8c6:	460b      	mov	r3, r1
 801d8c8:	4619      	mov	r1, r3
 801d8ca:	4610      	mov	r0, r2
 801d8cc:	f7ff fc3c 	bl	801d148 <nk_style_item_color>
 801d8d0:	3438      	adds	r4, #56	; 0x38
 801d8d2:	463d      	mov	r5, r7
 801d8d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d8dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->normal_active   = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801d8e0:	6a3b      	ldr	r3, [r7, #32]
 801d8e2:	332c      	adds	r3, #44	; 0x2c
 801d8e4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d8e6:	463a      	mov	r2, r7
 801d8e8:	6819      	ldr	r1, [r3, #0]
 801d8ea:	460b      	mov	r3, r1
 801d8ec:	4619      	mov	r1, r3
 801d8ee:	4610      	mov	r0, r2
 801d8f0:	f7ff fc2a 	bl	801d148 <nk_style_item_color>
 801d8f4:	3454      	adds	r4, #84	; 0x54
 801d8f6:	463d      	mov	r5, r7
 801d8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->hover_active    = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801d904:	6a3b      	ldr	r3, [r7, #32]
 801d906:	332c      	adds	r3, #44	; 0x2c
 801d908:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d90a:	463a      	mov	r2, r7
 801d90c:	6819      	ldr	r1, [r3, #0]
 801d90e:	460b      	mov	r3, r1
 801d910:	4619      	mov	r1, r3
 801d912:	4610      	mov	r0, r2
 801d914:	f7ff fc18 	bl	801d148 <nk_style_item_color>
 801d918:	3470      	adds	r4, #112	; 0x70
 801d91a:	463d      	mov	r5, r7
 801d91c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d91e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->pressed_active  = nk_style_item_color(table[NK_COLOR_SELECT_ACTIVE]);
 801d928:	6a3b      	ldr	r3, [r7, #32]
 801d92a:	332c      	adds	r3, #44	; 0x2c
 801d92c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d92e:	463a      	mov	r2, r7
 801d930:	6819      	ldr	r1, [r3, #0]
 801d932:	460b      	mov	r3, r1
 801d934:	4619      	mov	r1, r3
 801d936:	4610      	mov	r0, r2
 801d938:	f7ff fc06 	bl	801d148 <nk_style_item_color>
 801d93c:	348c      	adds	r4, #140	; 0x8c
 801d93e:	463d      	mov	r5, r7
 801d940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801d948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    select->text_normal     = table[NK_COLOR_TEXT];
 801d94c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d94e:	6a3a      	ldr	r2, [r7, #32]
 801d950:	33a8      	adds	r3, #168	; 0xa8
 801d952:	6810      	ldr	r0, [r2, #0]
 801d954:	6018      	str	r0, [r3, #0]
    select->text_hover      = table[NK_COLOR_TEXT];
 801d956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d958:	6a3a      	ldr	r2, [r7, #32]
 801d95a:	33ac      	adds	r3, #172	; 0xac
 801d95c:	6810      	ldr	r0, [r2, #0]
 801d95e:	6018      	str	r0, [r3, #0]
    select->text_pressed    = table[NK_COLOR_TEXT];
 801d960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d962:	6a3a      	ldr	r2, [r7, #32]
 801d964:	33b0      	adds	r3, #176	; 0xb0
 801d966:	6810      	ldr	r0, [r2, #0]
 801d968:	6018      	str	r0, [r3, #0]
    select->text_normal_active  = table[NK_COLOR_TEXT];
 801d96a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d96c:	6a3a      	ldr	r2, [r7, #32]
 801d96e:	33b4      	adds	r3, #180	; 0xb4
 801d970:	6810      	ldr	r0, [r2, #0]
 801d972:	6018      	str	r0, [r3, #0]
    select->text_hover_active   = table[NK_COLOR_TEXT];
 801d974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d976:	6a3a      	ldr	r2, [r7, #32]
 801d978:	33b8      	adds	r3, #184	; 0xb8
 801d97a:	6810      	ldr	r0, [r2, #0]
 801d97c:	6018      	str	r0, [r3, #0]
    select->text_pressed_active = table[NK_COLOR_TEXT];
 801d97e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d980:	6a3a      	ldr	r2, [r7, #32]
 801d982:	33bc      	adds	r3, #188	; 0xbc
 801d984:	6810      	ldr	r0, [r2, #0]
 801d986:	6018      	str	r0, [r3, #0]
    select->padding         = nk_vec2(2.0f,2.0f);
 801d988:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d98a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d98e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d992:	f7f9 f809 	bl	80169a8 <nk_vec2>
 801d996:	eeb0 7a40 	vmov.f32	s14, s0
 801d99a:	eef0 7a60 	vmov.f32	s15, s1
 801d99e:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
 801d9a2:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    select->image_padding   = nk_vec2(2.0f,2.0f);
 801d9a6:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d9a8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801d9ac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d9b0:	f7f8 fffa 	bl	80169a8 <nk_vec2>
 801d9b4:	eeb0 7a40 	vmov.f32	s14, s0
 801d9b8:	eef0 7a60 	vmov.f32	s15, s1
 801d9bc:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
 801d9c0:	edc4 7a38 	vstr	s15, [r4, #224]	; 0xe0
    select->touch_padding   = nk_vec2(0,0);
 801d9c4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d9c6:	eddf 0ad0 	vldr	s1, [pc, #832]	; 801dd08 <nk_style_from_table+0xb58>
 801d9ca:	ed9f 0acf 	vldr	s0, [pc, #828]	; 801dd08 <nk_style_from_table+0xb58>
 801d9ce:	f7f8 ffeb 	bl	80169a8 <nk_vec2>
 801d9d2:	eeb0 7a40 	vmov.f32	s14, s0
 801d9d6:	eef0 7a60 	vmov.f32	s15, s1
 801d9da:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
 801d9de:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    select->userdata        = nk_handle_ptr(0);
 801d9e2:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801d9e4:	2000      	movs	r0, #0
 801d9e6:	f7f7 fa85 	bl	8014ef4 <nk_handle_ptr>
 801d9ea:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
    select->rounding        = 0.0f;
 801d9ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d9f0:	f04f 0200 	mov.w	r2, #0
 801d9f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    select->draw_begin      = 0;
 801d9f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    select->draw_end        = 0;
 801da00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801da02:	2200      	movs	r2, #0
 801da04:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

    /* slider */
    slider = &style->slider;
 801da08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da0a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801da0e:	663b      	str	r3, [r7, #96]	; 0x60
    nk_zero_struct(*slider);
 801da10:	f44f 7109 	mov.w	r1, #548	; 0x224
 801da14:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801da16:	f004 fe41 	bl	802269c <nk_zero>
    slider->normal          = nk_style_item_hide();
 801da1a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da1c:	463b      	mov	r3, r7
 801da1e:	4618      	mov	r0, r3
 801da20:	f7ff fbaa 	bl	801d178 <nk_style_item_hide>
 801da24:	4625      	mov	r5, r4
 801da26:	463c      	mov	r4, r7
 801da28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801da2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801da2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801da30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider->hover           = nk_style_item_hide();
 801da34:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da36:	463b      	mov	r3, r7
 801da38:	4618      	mov	r0, r3
 801da3a:	f7ff fb9d 	bl	801d178 <nk_style_item_hide>
 801da3e:	341c      	adds	r4, #28
 801da40:	463d      	mov	r5, r7
 801da42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801da44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801da46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801da4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->active          = nk_style_item_hide();
 801da4e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801da50:	463b      	mov	r3, r7
 801da52:	4618      	mov	r0, r3
 801da54:	f7ff fb90 	bl	801d178 <nk_style_item_hide>
 801da58:	3438      	adds	r4, #56	; 0x38
 801da5a:	463d      	mov	r5, r7
 801da5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801da5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801da60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801da64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->bar_normal      = table[NK_COLOR_SLIDER];
 801da68:	6a3b      	ldr	r3, [r7, #32]
 801da6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801da6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da70:	3358      	adds	r3, #88	; 0x58
 801da72:	6810      	ldr	r0, [r2, #0]
 801da74:	6018      	str	r0, [r3, #0]
    slider->bar_hover       = table[NK_COLOR_SLIDER];
 801da76:	6a3b      	ldr	r3, [r7, #32]
 801da78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801da7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da7e:	335c      	adds	r3, #92	; 0x5c
 801da80:	6810      	ldr	r0, [r2, #0]
 801da82:	6018      	str	r0, [r3, #0]
    slider->bar_active      = table[NK_COLOR_SLIDER];
 801da84:	6a3b      	ldr	r3, [r7, #32]
 801da86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801da8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da8c:	3360      	adds	r3, #96	; 0x60
 801da8e:	6810      	ldr	r0, [r2, #0]
 801da90:	6018      	str	r0, [r3, #0]
    slider->bar_filled      = table[NK_COLOR_SLIDER_CURSOR];
 801da92:	6a3b      	ldr	r3, [r7, #32]
 801da94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801da98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801da9a:	3364      	adds	r3, #100	; 0x64
 801da9c:	6810      	ldr	r0, [r2, #0]
 801da9e:	6018      	str	r0, [r3, #0]
    slider->cursor_normal   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 801daa0:	6a3b      	ldr	r3, [r7, #32]
 801daa2:	3334      	adds	r3, #52	; 0x34
 801daa4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801daa6:	463a      	mov	r2, r7
 801daa8:	6819      	ldr	r1, [r3, #0]
 801daaa:	460b      	mov	r3, r1
 801daac:	4619      	mov	r1, r3
 801daae:	4610      	mov	r0, r2
 801dab0:	f7ff fb4a 	bl	801d148 <nk_style_item_color>
 801dab4:	3468      	adds	r4, #104	; 0x68
 801dab6:	463d      	mov	r5, r7
 801dab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801daba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dabc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_hover    = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 801dac4:	6a3b      	ldr	r3, [r7, #32]
 801dac6:	3338      	adds	r3, #56	; 0x38
 801dac8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801daca:	463a      	mov	r2, r7
 801dacc:	6819      	ldr	r1, [r3, #0]
 801dace:	460b      	mov	r3, r1
 801dad0:	4619      	mov	r1, r3
 801dad2:	4610      	mov	r0, r2
 801dad4:	f7ff fb38 	bl	801d148 <nk_style_item_color>
 801dad8:	3484      	adds	r4, #132	; 0x84
 801dada:	463d      	mov	r5, r7
 801dadc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dae0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->cursor_active   = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801dae8:	6a3b      	ldr	r3, [r7, #32]
 801daea:	333c      	adds	r3, #60	; 0x3c
 801daec:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801daee:	463a      	mov	r2, r7
 801daf0:	6819      	ldr	r1, [r3, #0]
 801daf2:	460b      	mov	r3, r1
 801daf4:	4619      	mov	r1, r3
 801daf6:	4610      	mov	r0, r2
 801daf8:	f7ff fb26 	bl	801d148 <nk_style_item_color>
 801dafc:	34a0      	adds	r4, #160	; 0xa0
 801dafe:	463d      	mov	r5, r7
 801db00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801db02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801db04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801db08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    slider->inc_symbol      = NK_SYMBOL_TRIANGLE_RIGHT;
 801db0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db0e:	220a      	movs	r2, #10
 801db10:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
    slider->dec_symbol      = NK_SYMBOL_TRIANGLE_LEFT;
 801db14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db16:	2209      	movs	r2, #9
 801db18:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
    slider->cursor_size     = nk_vec2(16,16);
 801db1c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db1e:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 801db22:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 801db26:	f7f8 ff3f 	bl	80169a8 <nk_vec2>
 801db2a:	eeb0 7a40 	vmov.f32	s14, s0
 801db2e:	eef0 7a60 	vmov.f32	s15, s1
 801db32:	ed84 7a36 	vstr	s14, [r4, #216]	; 0xd8
 801db36:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
    slider->padding         = nk_vec2(2,2);
 801db3a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db3c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801db40:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801db44:	f7f8 ff30 	bl	80169a8 <nk_vec2>
 801db48:	eeb0 7a40 	vmov.f32	s14, s0
 801db4c:	eef0 7a60 	vmov.f32	s15, s1
 801db50:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 801db54:	edc4 7a33 	vstr	s15, [r4, #204]	; 0xcc
    slider->spacing         = nk_vec2(2,2);
 801db58:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db5a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801db5e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801db62:	f7f8 ff21 	bl	80169a8 <nk_vec2>
 801db66:	eeb0 7a40 	vmov.f32	s14, s0
 801db6a:	eef0 7a60 	vmov.f32	s15, s1
 801db6e:	ed84 7a34 	vstr	s14, [r4, #208]	; 0xd0
 801db72:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
    slider->userdata        = nk_handle_ptr(0);
 801db76:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 801db78:	2000      	movs	r0, #0
 801db7a:	f7f7 f9bb 	bl	8014ef4 <nk_handle_ptr>
 801db7e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
    slider->show_buttons    = nk_false;
 801db82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db84:	2200      	movs	r2, #0
 801db86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    slider->bar_height      = 8;
 801db8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db8c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801db90:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    slider->rounding        = 0;
 801db94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db96:	f04f 0200 	mov.w	r2, #0
 801db9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    slider->draw_begin      = 0;
 801db9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801dba0:	2200      	movs	r2, #0
 801dba2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    slider->draw_end        = 0;
 801dba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801dba8:	2200      	movs	r2, #0
 801dbaa:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    /* slider buttons */
    button = &style->slider.inc_button;
 801dbae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbb0:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801dbb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 801dbb6:	2228      	movs	r2, #40	; 0x28
 801dbb8:	2128      	movs	r1, #40	; 0x28
 801dbba:	2028      	movs	r0, #40	; 0x28
 801dbbc:	f7f2 f8be 	bl	800fd3c <nk_rgb>
 801dbc0:	4603      	mov	r3, r0
 801dbc2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbc4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dbc6:	463b      	mov	r3, r7
 801dbc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dbca:	4618      	mov	r0, r3
 801dbcc:	f7ff fabc 	bl	801d148 <nk_style_item_color>
 801dbd0:	4625      	mov	r5, r4
 801dbd2:	463c      	mov	r4, r7
 801dbd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801dbd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801dbd8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801dbdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 801dbe0:	222a      	movs	r2, #42	; 0x2a
 801dbe2:	212a      	movs	r1, #42	; 0x2a
 801dbe4:	202a      	movs	r0, #42	; 0x2a
 801dbe6:	f7f2 f8a9 	bl	800fd3c <nk_rgb>
 801dbea:	4603      	mov	r3, r0
 801dbec:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dbee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dbf0:	463b      	mov	r3, r7
 801dbf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dbf4:	4618      	mov	r0, r3
 801dbf6:	f7ff faa7 	bl	801d148 <nk_style_item_color>
 801dbfa:	341c      	adds	r4, #28
 801dbfc:	463d      	mov	r5, r7
 801dbfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dc00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dc06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801dc0a:	222c      	movs	r2, #44	; 0x2c
 801dc0c:	212c      	movs	r1, #44	; 0x2c
 801dc0e:	202c      	movs	r0, #44	; 0x2c
 801dc10:	f7f2 f894 	bl	800fd3c <nk_rgb>
 801dc14:	4603      	mov	r3, r0
 801dc16:	633b      	str	r3, [r7, #48]	; 0x30
 801dc18:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc1a:	463b      	mov	r3, r7
 801dc1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7ff fa92 	bl	801d148 <nk_style_item_color>
 801dc24:	3438      	adds	r4, #56	; 0x38
 801dc26:	463d      	mov	r5, r7
 801dc28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dc2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dc2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dc30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 801dc34:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc36:	2241      	movs	r2, #65	; 0x41
 801dc38:	2141      	movs	r1, #65	; 0x41
 801dc3a:	2041      	movs	r0, #65	; 0x41
 801dc3c:	f7f2 f87e 	bl	800fd3c <nk_rgb>
 801dc40:	4603      	mov	r3, r0
 801dc42:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 801dc44:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc46:	2228      	movs	r2, #40	; 0x28
 801dc48:	2128      	movs	r1, #40	; 0x28
 801dc4a:	2028      	movs	r0, #40	; 0x28
 801dc4c:	f7f2 f876 	bl	800fd3c <nk_rgb>
 801dc50:	4603      	mov	r3, r0
 801dc52:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 801dc54:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc56:	22af      	movs	r2, #175	; 0xaf
 801dc58:	21af      	movs	r1, #175	; 0xaf
 801dc5a:	20af      	movs	r0, #175	; 0xaf
 801dc5c:	f7f2 f86e 	bl	800fd3c <nk_rgb>
 801dc60:	4603      	mov	r3, r0
 801dc62:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801dc64:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc66:	22af      	movs	r2, #175	; 0xaf
 801dc68:	21af      	movs	r1, #175	; 0xaf
 801dc6a:	20af      	movs	r0, #175	; 0xaf
 801dc6c:	f7f2 f866 	bl	800fd3c <nk_rgb>
 801dc70:	4603      	mov	r3, r0
 801dc72:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801dc74:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc76:	22af      	movs	r2, #175	; 0xaf
 801dc78:	21af      	movs	r1, #175	; 0xaf
 801dc7a:	20af      	movs	r0, #175	; 0xaf
 801dc7c:	f7f2 f85e 	bl	800fd3c <nk_rgb>
 801dc80:	4603      	mov	r3, r0
 801dc82:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(8.0f,8.0f);
 801dc84:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dc86:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 801dc8a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801dc8e:	f7f8 fe8b 	bl	80169a8 <nk_vec2>
 801dc92:	eeb0 7a40 	vmov.f32	s14, s0
 801dc96:	eef0 7a60 	vmov.f32	s15, s1
 801dc9a:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801dc9e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801dca2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dca4:	eddf 0a18 	vldr	s1, [pc, #96]	; 801dd08 <nk_style_from_table+0xb58>
 801dca8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801dd08 <nk_style_from_table+0xb58>
 801dcac:	f7f8 fe7c 	bl	80169a8 <nk_vec2>
 801dcb0:	eeb0 7a40 	vmov.f32	s14, s0
 801dcb4:	eef0 7a60 	vmov.f32	s15, s1
 801dcb8:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801dcbc:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801dcc0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801dcc2:	2000      	movs	r0, #0
 801dcc4:	f7f7 f916 	bl	8014ef4 <nk_handle_ptr>
 801dcc8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801dccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcce:	2212      	movs	r2, #18
 801dcd0:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801dcd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801dcd8:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801dcda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcdc:	f04f 0200 	mov.w	r2, #0
 801dce0:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801dce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dce4:	2200      	movs	r2, #0
 801dce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801dcea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcec:	2200      	movs	r2, #0
 801dcee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->slider.dec_button = style->slider.inc_button;
 801dcf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801dcf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcf6:	f202 50fc 	addw	r0, r2, #1532	; 0x5fc
 801dcfa:	f203 5364 	addw	r3, r3, #1380	; 0x564
 801dcfe:	2298      	movs	r2, #152	; 0x98
 801dd00:	4619      	mov	r1, r3
 801dd02:	f007 fd1d 	bl	8025740 <memcpy>
 801dd06:	e003      	b.n	801dd10 <nk_style_from_table+0xb60>
	...

    /* progressbar */
    prog = &style->progress;
 801dd10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dd12:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 801dd16:	65fb      	str	r3, [r7, #92]	; 0x5c
    nk_zero_struct(*prog);
 801dd18:	21d4      	movs	r1, #212	; 0xd4
 801dd1a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801dd1c:	f004 fcbe 	bl	802269c <nk_zero>
    prog->normal            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801dd20:	6a3b      	ldr	r3, [r7, #32]
 801dd22:	3330      	adds	r3, #48	; 0x30
 801dd24:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd26:	463a      	mov	r2, r7
 801dd28:	6819      	ldr	r1, [r3, #0]
 801dd2a:	460b      	mov	r3, r1
 801dd2c:	4619      	mov	r1, r3
 801dd2e:	4610      	mov	r0, r2
 801dd30:	f7ff fa0a 	bl	801d148 <nk_style_item_color>
 801dd34:	4625      	mov	r5, r4
 801dd36:	463c      	mov	r4, r7
 801dd38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801dd3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801dd3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801dd40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    prog->hover             = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801dd44:	6a3b      	ldr	r3, [r7, #32]
 801dd46:	3330      	adds	r3, #48	; 0x30
 801dd48:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd4a:	463a      	mov	r2, r7
 801dd4c:	6819      	ldr	r1, [r3, #0]
 801dd4e:	460b      	mov	r3, r1
 801dd50:	4619      	mov	r1, r3
 801dd52:	4610      	mov	r0, r2
 801dd54:	f7ff f9f8 	bl	801d148 <nk_style_item_color>
 801dd58:	341c      	adds	r4, #28
 801dd5a:	463d      	mov	r5, r7
 801dd5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dd5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dd60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dd64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->active            = nk_style_item_color(table[NK_COLOR_SLIDER]);
 801dd68:	6a3b      	ldr	r3, [r7, #32]
 801dd6a:	3330      	adds	r3, #48	; 0x30
 801dd6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd6e:	463a      	mov	r2, r7
 801dd70:	6819      	ldr	r1, [r3, #0]
 801dd72:	460b      	mov	r3, r1
 801dd74:	4619      	mov	r1, r3
 801dd76:	4610      	mov	r0, r2
 801dd78:	f7ff f9e6 	bl	801d148 <nk_style_item_color>
 801dd7c:	3438      	adds	r4, #56	; 0x38
 801dd7e:	463d      	mov	r5, r7
 801dd80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dd82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dd84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801dd88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_normal     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR]);
 801dd8c:	6a3b      	ldr	r3, [r7, #32]
 801dd8e:	3334      	adds	r3, #52	; 0x34
 801dd90:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801dd92:	463a      	mov	r2, r7
 801dd94:	6819      	ldr	r1, [r3, #0]
 801dd96:	460b      	mov	r3, r1
 801dd98:	4619      	mov	r1, r3
 801dd9a:	4610      	mov	r0, r2
 801dd9c:	f7ff f9d4 	bl	801d148 <nk_style_item_color>
 801dda0:	3458      	adds	r4, #88	; 0x58
 801dda2:	463d      	mov	r5, r7
 801dda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801dda8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ddac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_hover      = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_HOVER]);
 801ddb0:	6a3b      	ldr	r3, [r7, #32]
 801ddb2:	3338      	adds	r3, #56	; 0x38
 801ddb4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801ddb6:	463a      	mov	r2, r7
 801ddb8:	6819      	ldr	r1, [r3, #0]
 801ddba:	460b      	mov	r3, r1
 801ddbc:	4619      	mov	r1, r3
 801ddbe:	4610      	mov	r0, r2
 801ddc0:	f7ff f9c2 	bl	801d148 <nk_style_item_color>
 801ddc4:	3474      	adds	r4, #116	; 0x74
 801ddc6:	463d      	mov	r5, r7
 801ddc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ddca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ddcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ddd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->cursor_active     = nk_style_item_color(table[NK_COLOR_SLIDER_CURSOR_ACTIVE]);
 801ddd4:	6a3b      	ldr	r3, [r7, #32]
 801ddd6:	333c      	adds	r3, #60	; 0x3c
 801ddd8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801ddda:	463a      	mov	r2, r7
 801dddc:	6819      	ldr	r1, [r3, #0]
 801ddde:	460b      	mov	r3, r1
 801dde0:	4619      	mov	r1, r3
 801dde2:	4610      	mov	r0, r2
 801dde4:	f7ff f9b0 	bl	801d148 <nk_style_item_color>
 801dde8:	3490      	adds	r4, #144	; 0x90
 801ddea:	463d      	mov	r5, r7
 801ddec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ddee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ddf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ddf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    prog->border_color      = nk_rgba(0,0,0,0);
 801ddf8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	2100      	movs	r1, #0
 801de00:	2000      	movs	r0, #0
 801de02:	f7f1 ff4b 	bl	800fc9c <nk_rgba>
 801de06:	4603      	mov	r3, r0
 801de08:	6563      	str	r3, [r4, #84]	; 0x54
    prog->cursor_border_color = nk_rgba(0,0,0,0);
 801de0a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801de0c:	2300      	movs	r3, #0
 801de0e:	2200      	movs	r2, #0
 801de10:	2100      	movs	r1, #0
 801de12:	2000      	movs	r0, #0
 801de14:	f7f1 ff42 	bl	800fc9c <nk_rgba>
 801de18:	4603      	mov	r3, r0
 801de1a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    prog->userdata          = nk_handle_ptr(0);
 801de1e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801de20:	2000      	movs	r0, #0
 801de22:	f7f7 f867 	bl	8014ef4 <nk_handle_ptr>
 801de26:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    prog->padding           = nk_vec2(4,4);
 801de2a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 801de2c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801de30:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801de34:	f7f8 fdb8 	bl	80169a8 <nk_vec2>
 801de38:	eeb0 7a40 	vmov.f32	s14, s0
 801de3c:	eef0 7a60 	vmov.f32	s15, s1
 801de40:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 801de44:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    prog->rounding          = 0;
 801de48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de4a:	f04f 0200 	mov.w	r2, #0
 801de4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    prog->border            = 0;
 801de52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de54:	f04f 0200 	mov.w	r2, #0
 801de58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    prog->cursor_rounding   = 0;
 801de5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de5e:	f04f 0200 	mov.w	r2, #0
 801de62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    prog->cursor_border     = 0;
 801de66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de68:	f04f 0200 	mov.w	r2, #0
 801de6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    prog->draw_begin        = 0;
 801de70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de72:	2200      	movs	r2, #0
 801de74:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    prog->draw_end          = 0;
 801de78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801de7a:	2200      	movs	r2, #0
 801de7c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* scrollbars */
    scroll = &style->scrollh;
 801de80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801de82:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801de86:	65bb      	str	r3, [r7, #88]	; 0x58
    nk_zero_struct(*scroll);
 801de88:	f44f 7103 	mov.w	r1, #524	; 0x20c
 801de8c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801de8e:	f004 fc05 	bl	802269c <nk_zero>
    scroll->normal          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801de92:	6a3b      	ldr	r3, [r7, #32]
 801de94:	335c      	adds	r3, #92	; 0x5c
 801de96:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801de98:	463a      	mov	r2, r7
 801de9a:	6819      	ldr	r1, [r3, #0]
 801de9c:	460b      	mov	r3, r1
 801de9e:	4619      	mov	r1, r3
 801dea0:	4610      	mov	r0, r2
 801dea2:	f7ff f951 	bl	801d148 <nk_style_item_color>
 801dea6:	4625      	mov	r5, r4
 801dea8:	463c      	mov	r4, r7
 801deaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801deac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801deae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801deb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    scroll->hover           = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801deb6:	6a3b      	ldr	r3, [r7, #32]
 801deb8:	335c      	adds	r3, #92	; 0x5c
 801deba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801debc:	463a      	mov	r2, r7
 801debe:	6819      	ldr	r1, [r3, #0]
 801dec0:	460b      	mov	r3, r1
 801dec2:	4619      	mov	r1, r3
 801dec4:	4610      	mov	r0, r2
 801dec6:	f7ff f93f 	bl	801d148 <nk_style_item_color>
 801deca:	341c      	adds	r4, #28
 801decc:	463d      	mov	r5, r7
 801dece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ded0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ded2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ded6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->active          = nk_style_item_color(table[NK_COLOR_SCROLLBAR]);
 801deda:	6a3b      	ldr	r3, [r7, #32]
 801dedc:	335c      	adds	r3, #92	; 0x5c
 801dede:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801dee0:	463a      	mov	r2, r7
 801dee2:	6819      	ldr	r1, [r3, #0]
 801dee4:	460b      	mov	r3, r1
 801dee6:	4619      	mov	r1, r3
 801dee8:	4610      	mov	r0, r2
 801deea:	f7ff f92d 	bl	801d148 <nk_style_item_color>
 801deee:	3438      	adds	r4, #56	; 0x38
 801def0:	463d      	mov	r5, r7
 801def2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801def4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801def6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801defa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_normal   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR]);
 801defe:	6a3b      	ldr	r3, [r7, #32]
 801df00:	3360      	adds	r3, #96	; 0x60
 801df02:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df04:	463a      	mov	r2, r7
 801df06:	6819      	ldr	r1, [r3, #0]
 801df08:	460b      	mov	r3, r1
 801df0a:	4619      	mov	r1, r3
 801df0c:	4610      	mov	r0, r2
 801df0e:	f7ff f91b 	bl	801d148 <nk_style_item_color>
 801df12:	3458      	adds	r4, #88	; 0x58
 801df14:	463d      	mov	r5, r7
 801df16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801df1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_hover    = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_HOVER]);
 801df22:	6a3b      	ldr	r3, [r7, #32]
 801df24:	3364      	adds	r3, #100	; 0x64
 801df26:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df28:	463a      	mov	r2, r7
 801df2a:	6819      	ldr	r1, [r3, #0]
 801df2c:	460b      	mov	r3, r1
 801df2e:	4619      	mov	r1, r3
 801df30:	4610      	mov	r0, r2
 801df32:	f7ff f909 	bl	801d148 <nk_style_item_color>
 801df36:	3474      	adds	r4, #116	; 0x74
 801df38:	463d      	mov	r5, r7
 801df3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801df42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->cursor_active   = nk_style_item_color(table[NK_COLOR_SCROLLBAR_CURSOR_ACTIVE]);
 801df46:	6a3b      	ldr	r3, [r7, #32]
 801df48:	3368      	adds	r3, #104	; 0x68
 801df4a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df4c:	463a      	mov	r2, r7
 801df4e:	6819      	ldr	r1, [r3, #0]
 801df50:	460b      	mov	r3, r1
 801df52:	4619      	mov	r1, r3
 801df54:	4610      	mov	r0, r2
 801df56:	f7ff f8f7 	bl	801d148 <nk_style_item_color>
 801df5a:	3490      	adds	r4, #144	; 0x90
 801df5c:	463d      	mov	r5, r7
 801df5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801df60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801df62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801df66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    scroll->dec_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801df6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df6c:	2203      	movs	r2, #3
 801df6e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    scroll->inc_symbol      = NK_SYMBOL_CIRCLE_SOLID;
 801df72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df74:	2203      	movs	r2, #3
 801df76:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    scroll->userdata        = nk_handle_ptr(0);
 801df7a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801df7c:	2000      	movs	r0, #0
 801df7e:	f7f6 ffb9 	bl	8014ef4 <nk_handle_ptr>
 801df82:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    scroll->border_color    = table[NK_COLOR_SCROLLBAR];
 801df86:	6a3b      	ldr	r3, [r7, #32]
 801df88:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801df8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df8e:	3354      	adds	r3, #84	; 0x54
 801df90:	6810      	ldr	r0, [r2, #0]
 801df92:	6018      	str	r0, [r3, #0]
    scroll->cursor_border_color = table[NK_COLOR_SCROLLBAR];
 801df94:	6a3b      	ldr	r3, [r7, #32]
 801df96:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 801df9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df9c:	33ac      	adds	r3, #172	; 0xac
 801df9e:	6810      	ldr	r0, [r2, #0]
 801dfa0:	6018      	str	r0, [r3, #0]
    scroll->padding         = nk_vec2(0,0);
 801dfa2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 801dfa4:	ed5f 0aa7 	vldr	s1, [pc, #-668]	; 801dd0c <nk_style_from_table+0xb5c>
 801dfa8:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 801dd0c <nk_style_from_table+0xb5c>
 801dfac:	f7f8 fcfc 	bl	80169a8 <nk_vec2>
 801dfb0:	eeb0 7a40 	vmov.f32	s14, s0
 801dfb4:	eef0 7a60 	vmov.f32	s15, s1
 801dfb8:	ed84 7a30 	vstr	s14, [r4, #192]	; 0xc0
 801dfbc:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
    scroll->show_buttons    = nk_false;
 801dfc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    scroll->border          = 0;
 801dfc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfca:	f04f 0200 	mov.w	r2, #0
 801dfce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    scroll->rounding        = 0;
 801dfd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfd4:	f04f 0200 	mov.w	r2, #0
 801dfd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    scroll->border_cursor   = 0;
 801dfdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfde:	f04f 0200 	mov.w	r2, #0
 801dfe2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    scroll->rounding_cursor = 0;
 801dfe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dfe8:	f04f 0200 	mov.w	r2, #0
 801dfec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    scroll->draw_begin      = 0;
 801dff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dff2:	2200      	movs	r2, #0
 801dff4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    scroll->draw_end        = 0;
 801dff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dffa:	2200      	movs	r2, #0
 801dffc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    style->scrollv = style->scrollh;
 801e000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e006:	461a      	mov	r2, r3
 801e008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e00a:	f102 00d0 	add.w	r0, r2, #208	; 0xd0
 801e00e:	f603 63c4 	addw	r3, r3, #3780	; 0xec4
 801e012:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801e016:	4619      	mov	r1, r3
 801e018:	f007 fb92 	bl	8025740 <memcpy>

    /* scrollbars buttons */
    button = &style->scrollh.inc_button;
 801e01c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e01e:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e022:	66fb      	str	r3, [r7, #108]	; 0x6c
    button->normal          = nk_style_item_color(nk_rgb(40,40,40));
 801e024:	2228      	movs	r2, #40	; 0x28
 801e026:	2128      	movs	r1, #40	; 0x28
 801e028:	2028      	movs	r0, #40	; 0x28
 801e02a:	f7f1 fe87 	bl	800fd3c <nk_rgb>
 801e02e:	4603      	mov	r3, r0
 801e030:	637b      	str	r3, [r7, #52]	; 0x34
 801e032:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e034:	463b      	mov	r3, r7
 801e036:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e038:	4618      	mov	r0, r3
 801e03a:	f7ff f885 	bl	801d148 <nk_style_item_color>
 801e03e:	4625      	mov	r5, r4
 801e040:	463c      	mov	r4, r7
 801e042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e046:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e04a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(nk_rgb(42,42,42));
 801e04e:	222a      	movs	r2, #42	; 0x2a
 801e050:	212a      	movs	r1, #42	; 0x2a
 801e052:	202a      	movs	r0, #42	; 0x2a
 801e054:	f7f1 fe72 	bl	800fd3c <nk_rgb>
 801e058:	4603      	mov	r3, r0
 801e05a:	63bb      	str	r3, [r7, #56]	; 0x38
 801e05c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e05e:	463b      	mov	r3, r7
 801e060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e062:	4618      	mov	r0, r3
 801e064:	f7ff f870 	bl	801d148 <nk_style_item_color>
 801e068:	341c      	adds	r4, #28
 801e06a:	463d      	mov	r5, r7
 801e06c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e06e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e070:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(nk_rgb(44,44,44));
 801e078:	222c      	movs	r2, #44	; 0x2c
 801e07a:	212c      	movs	r1, #44	; 0x2c
 801e07c:	202c      	movs	r0, #44	; 0x2c
 801e07e:	f7f1 fe5d 	bl	800fd3c <nk_rgb>
 801e082:	4603      	mov	r3, r0
 801e084:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e086:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e088:	463b      	mov	r3, r7
 801e08a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e08c:	4618      	mov	r0, r3
 801e08e:	f7ff f85b 	bl	801d148 <nk_style_item_color>
 801e092:	3438      	adds	r4, #56	; 0x38
 801e094:	463d      	mov	r5, r7
 801e096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e09a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e09e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgb(65,65,65);
 801e0a2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0a4:	2241      	movs	r2, #65	; 0x41
 801e0a6:	2141      	movs	r1, #65	; 0x41
 801e0a8:	2041      	movs	r0, #65	; 0x41
 801e0aa:	f7f1 fe47 	bl	800fd3c <nk_rgb>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = nk_rgb(40,40,40);
 801e0b2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0b4:	2228      	movs	r2, #40	; 0x28
 801e0b6:	2128      	movs	r1, #40	; 0x28
 801e0b8:	2028      	movs	r0, #40	; 0x28
 801e0ba:	f7f1 fe3f 	bl	800fd3c <nk_rgb>
 801e0be:	4603      	mov	r3, r0
 801e0c0:	65a3      	str	r3, [r4, #88]	; 0x58
    button->text_normal     = nk_rgb(175,175,175);
 801e0c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0c4:	22af      	movs	r2, #175	; 0xaf
 801e0c6:	21af      	movs	r1, #175	; 0xaf
 801e0c8:	20af      	movs	r0, #175	; 0xaf
 801e0ca:	f7f1 fe37 	bl	800fd3c <nk_rgb>
 801e0ce:	4603      	mov	r3, r0
 801e0d0:	65e3      	str	r3, [r4, #92]	; 0x5c
    button->text_hover      = nk_rgb(175,175,175);
 801e0d2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0d4:	22af      	movs	r2, #175	; 0xaf
 801e0d6:	21af      	movs	r1, #175	; 0xaf
 801e0d8:	20af      	movs	r0, #175	; 0xaf
 801e0da:	f7f1 fe2f 	bl	800fd3c <nk_rgb>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	6623      	str	r3, [r4, #96]	; 0x60
    button->text_active     = nk_rgb(175,175,175);
 801e0e2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0e4:	22af      	movs	r2, #175	; 0xaf
 801e0e6:	21af      	movs	r1, #175	; 0xaf
 801e0e8:	20af      	movs	r0, #175	; 0xaf
 801e0ea:	f7f1 fe27 	bl	800fd3c <nk_rgb>
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	6663      	str	r3, [r4, #100]	; 0x64
    button->padding         = nk_vec2(4.0f,4.0f);
 801e0f2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e0f4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e0f8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e0fc:	f7f8 fc54 	bl	80169a8 <nk_vec2>
 801e100:	eeb0 7a40 	vmov.f32	s14, s0
 801e104:	eef0 7a60 	vmov.f32	s15, s1
 801e108:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801e10c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801e110:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e112:	eddf 0ac9 	vldr	s1, [pc, #804]	; 801e438 <nk_style_from_table+0x1288>
 801e116:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 801e438 <nk_style_from_table+0x1288>
 801e11a:	f7f8 fc45 	bl	80169a8 <nk_vec2>
 801e11e:	eeb0 7a40 	vmov.f32	s14, s0
 801e122:	eef0 7a60 	vmov.f32	s15, s1
 801e126:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801e12a:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801e12e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e130:	2000      	movs	r0, #0
 801e132:	f7f6 fedf 	bl	8014ef4 <nk_handle_ptr>
 801e136:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801e13a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e13c:	2212      	movs	r2, #18
 801e13e:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 1.0f;
 801e140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e142:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e146:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801e148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e14a:	f04f 0200 	mov.w	r2, #0
 801e14e:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801e150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e152:	2200      	movs	r2, #0
 801e154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801e158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e15a:	2200      	movs	r2, #0
 801e15c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->scrollh.dec_button = style->scrollh.inc_button;
 801e160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e166:	461a      	mov	r2, r3
 801e168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e16a:	f102 0028 	add.w	r0, r2, #40	; 0x28
 801e16e:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e172:	2298      	movs	r2, #152	; 0x98
 801e174:	4619      	mov	r1, r3
 801e176:	f007 fae3 	bl	8025740 <memcpy>
    style->scrollv.inc_button = style->scrollh.inc_button;
 801e17a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e180:	461a      	mov	r2, r3
 801e182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e184:	f502 70ce 	add.w	r0, r2, #412	; 0x19c
 801e188:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e18c:	2298      	movs	r2, #152	; 0x98
 801e18e:	4619      	mov	r1, r3
 801e190:	f007 fad6 	bl	8025740 <memcpy>
    style->scrollv.dec_button = style->scrollh.inc_button;
 801e194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e19a:	461a      	mov	r2, r3
 801e19c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e19e:	f502 700d 	add.w	r0, r2, #564	; 0x234
 801e1a2:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 801e1a6:	2298      	movs	r2, #152	; 0x98
 801e1a8:	4619      	mov	r1, r3
 801e1aa:	f007 fac9 	bl	8025740 <memcpy>

    /* edit */
    edit = &style->edit;
 801e1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e1b0:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 801e1b4:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801e1b6:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 801e1ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e1bc:	f004 fa6e 	bl	802269c <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_EDIT]);
 801e1c0:	6a3b      	ldr	r3, [r7, #32]
 801e1c2:	3344      	adds	r3, #68	; 0x44
 801e1c4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e1c6:	463a      	mov	r2, r7
 801e1c8:	6819      	ldr	r1, [r3, #0]
 801e1ca:	460b      	mov	r3, r1
 801e1cc:	4619      	mov	r1, r3
 801e1ce:	4610      	mov	r0, r2
 801e1d0:	f7fe ffba 	bl	801d148 <nk_style_item_color>
 801e1d4:	4625      	mov	r5, r4
 801e1d6:	463c      	mov	r4, r7
 801e1d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e1da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e1dc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e1e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_EDIT]);
 801e1e4:	6a3b      	ldr	r3, [r7, #32]
 801e1e6:	3344      	adds	r3, #68	; 0x44
 801e1e8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e1ea:	463a      	mov	r2, r7
 801e1ec:	6819      	ldr	r1, [r3, #0]
 801e1ee:	460b      	mov	r3, r1
 801e1f0:	4619      	mov	r1, r3
 801e1f2:	4610      	mov	r0, r2
 801e1f4:	f7fe ffa8 	bl	801d148 <nk_style_item_color>
 801e1f8:	341c      	adds	r4, #28
 801e1fa:	463d      	mov	r5, r7
 801e1fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e1fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_EDIT]);
 801e208:	6a3b      	ldr	r3, [r7, #32]
 801e20a:	3344      	adds	r3, #68	; 0x44
 801e20c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e20e:	463a      	mov	r2, r7
 801e210:	6819      	ldr	r1, [r3, #0]
 801e212:	460b      	mov	r3, r1
 801e214:	4619      	mov	r1, r3
 801e216:	4610      	mov	r0, r2
 801e218:	f7fe ff96 	bl	801d148 <nk_style_item_color>
 801e21c:	3438      	adds	r4, #56	; 0x38
 801e21e:	463d      	mov	r5, r7
 801e220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 801e22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e22e:	6a3a      	ldr	r2, [r7, #32]
 801e230:	f503 7319 	add.w	r3, r3, #612	; 0x264
 801e234:	6810      	ldr	r0, [r2, #0]
 801e236:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 801e238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e23a:	6a3a      	ldr	r2, [r7, #32]
 801e23c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801e240:	6810      	ldr	r0, [r2, #0]
 801e242:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 801e244:	6a3b      	ldr	r3, [r7, #32]
 801e246:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e24c:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801e250:	6810      	ldr	r0, [r2, #0]
 801e252:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 801e254:	6a3b      	ldr	r3, [r7, #32]
 801e256:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e25c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 801e260:	6810      	ldr	r0, [r2, #0]
 801e262:	6018      	str	r0, [r3, #0]
    edit->border_color      = table[NK_COLOR_BORDER];
 801e264:	6a3b      	ldr	r3, [r7, #32]
 801e266:	f103 020c 	add.w	r2, r3, #12
 801e26a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e26c:	3354      	adds	r3, #84	; 0x54
 801e26e:	6810      	ldr	r0, [r2, #0]
 801e270:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801e272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e274:	6a3a      	ldr	r2, [r7, #32]
 801e276:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801e27a:	6810      	ldr	r0, [r2, #0]
 801e27c:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 801e27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e280:	6a3a      	ldr	r2, [r7, #32]
 801e282:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801e286:	6810      	ldr	r0, [r2, #0]
 801e288:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 801e28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e28c:	6a3a      	ldr	r2, [r7, #32]
 801e28e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801e292:	6810      	ldr	r0, [r2, #0]
 801e294:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801e296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e298:	6a3a      	ldr	r2, [r7, #32]
 801e29a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801e29e:	6810      	ldr	r0, [r2, #0]
 801e2a0:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801e2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e2a4:	6a3a      	ldr	r2, [r7, #32]
 801e2a6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801e2aa:	6810      	ldr	r0, [r2, #0]
 801e2ac:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801e2ae:	6a3b      	ldr	r3, [r7, #32]
 801e2b0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e2b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801e2ba:	6810      	ldr	r0, [r2, #0]
 801e2bc:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801e2be:	6a3b      	ldr	r3, [r7, #32]
 801e2c0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e2c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e2c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801e2ca:	6810      	ldr	r0, [r2, #0]
 801e2cc:	6018      	str	r0, [r3, #0]
    edit->scrollbar_size    = nk_vec2(10,10);
 801e2ce:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e2d0:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 801e2d4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801e2d8:	f7f8 fb66 	bl	80169a8 <nk_vec2>
 801e2dc:	eeb0 7a40 	vmov.f32	s14, s0
 801e2e0:	eef0 7a60 	vmov.f32	s15, s1
 801e2e4:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801e2e8:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    edit->scrollbar         = style->scrollv;
 801e2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e2ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e2f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e2f4:	3358      	adds	r3, #88	; 0x58
 801e2f6:	f102 01d0 	add.w	r1, r2, #208	; 0xd0
 801e2fa:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801e2fe:	4618      	mov	r0, r3
 801e300:	f007 fa1e 	bl	8025740 <memcpy>
    edit->padding           = nk_vec2(4,4);
 801e304:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e306:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e30a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e30e:	f7f8 fb4b 	bl	80169a8 <nk_vec2>
 801e312:	eeb0 7a40 	vmov.f32	s14, s0
 801e316:	eef0 7a60 	vmov.f32	s15, s1
 801e31a:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 801e31e:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->row_padding       = 2;
 801e322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801e328:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    edit->cursor_size       = 4;
 801e32c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e32e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 801e332:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 1;
 801e336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e338:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e33c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801e340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e342:	f04f 0200 	mov.w	r2, #0
 801e346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* property */
    property = &style->property;
 801e34a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e34c:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 801e350:	653b      	str	r3, [r7, #80]	; 0x50
    nk_zero_struct(*property);
 801e352:	f240 4164 	movw	r1, #1124	; 0x464
 801e356:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e358:	f004 f9a0 	bl	802269c <nk_zero>
    property->normal        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e35c:	6a3b      	ldr	r3, [r7, #32]
 801e35e:	3340      	adds	r3, #64	; 0x40
 801e360:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e362:	463a      	mov	r2, r7
 801e364:	6819      	ldr	r1, [r3, #0]
 801e366:	460b      	mov	r3, r1
 801e368:	4619      	mov	r1, r3
 801e36a:	4610      	mov	r0, r2
 801e36c:	f7fe feec 	bl	801d148 <nk_style_item_color>
 801e370:	4625      	mov	r5, r4
 801e372:	463c      	mov	r4, r7
 801e374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e378:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e37c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    property->hover         = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e380:	6a3b      	ldr	r3, [r7, #32]
 801e382:	3340      	adds	r3, #64	; 0x40
 801e384:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e386:	463a      	mov	r2, r7
 801e388:	6819      	ldr	r1, [r3, #0]
 801e38a:	460b      	mov	r3, r1
 801e38c:	4619      	mov	r1, r3
 801e38e:	4610      	mov	r0, r2
 801e390:	f7fe feda 	bl	801d148 <nk_style_item_color>
 801e394:	341c      	adds	r4, #28
 801e396:	463d      	mov	r5, r7
 801e398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e39a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e39c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e3a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->active        = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e3a4:	6a3b      	ldr	r3, [r7, #32]
 801e3a6:	3340      	adds	r3, #64	; 0x40
 801e3a8:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e3aa:	463a      	mov	r2, r7
 801e3ac:	6819      	ldr	r1, [r3, #0]
 801e3ae:	460b      	mov	r3, r1
 801e3b0:	4619      	mov	r1, r3
 801e3b2:	4610      	mov	r0, r2
 801e3b4:	f7fe fec8 	bl	801d148 <nk_style_item_color>
 801e3b8:	3438      	adds	r4, #56	; 0x38
 801e3ba:	463d      	mov	r5, r7
 801e3bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e3be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e3c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e3c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    property->border_color  = table[NK_COLOR_BORDER];
 801e3c8:	6a3b      	ldr	r3, [r7, #32]
 801e3ca:	f103 020c 	add.w	r2, r3, #12
 801e3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3d0:	3354      	adds	r3, #84	; 0x54
 801e3d2:	6810      	ldr	r0, [r2, #0]
 801e3d4:	6018      	str	r0, [r3, #0]
    property->label_normal  = table[NK_COLOR_TEXT];
 801e3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3d8:	6a3a      	ldr	r2, [r7, #32]
 801e3da:	3358      	adds	r3, #88	; 0x58
 801e3dc:	6810      	ldr	r0, [r2, #0]
 801e3de:	6018      	str	r0, [r3, #0]
    property->label_hover   = table[NK_COLOR_TEXT];
 801e3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3e2:	6a3a      	ldr	r2, [r7, #32]
 801e3e4:	335c      	adds	r3, #92	; 0x5c
 801e3e6:	6810      	ldr	r0, [r2, #0]
 801e3e8:	6018      	str	r0, [r3, #0]
    property->label_active  = table[NK_COLOR_TEXT];
 801e3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3ec:	6a3a      	ldr	r2, [r7, #32]
 801e3ee:	3360      	adds	r3, #96	; 0x60
 801e3f0:	6810      	ldr	r0, [r2, #0]
 801e3f2:	6018      	str	r0, [r3, #0]
    property->sym_left      = NK_SYMBOL_TRIANGLE_LEFT;
 801e3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3f6:	2209      	movs	r2, #9
 801e3f8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    property->sym_right     = NK_SYMBOL_TRIANGLE_RIGHT;
 801e3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e3fe:	220a      	movs	r2, #10
 801e400:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    property->userdata      = nk_handle_ptr(0);
 801e404:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e406:	2000      	movs	r0, #0
 801e408:	f7f6 fd74 	bl	8014ef4 <nk_handle_ptr>
 801e40c:	f8c4 0458 	str.w	r0, [r4, #1112]	; 0x458
    property->padding       = nk_vec2(4,4);
 801e410:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 801e412:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e416:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e41a:	f7f8 fac5 	bl	80169a8 <nk_vec2>
 801e41e:	eeb0 7a40 	vmov.f32	s14, s0
 801e422:	eef0 7a60 	vmov.f32	s15, s1
 801e426:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801e42a:	edc4 7a1d 	vstr	s15, [r4, #116]	; 0x74
    property->border        = 1;
 801e42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e430:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e434:	e002      	b.n	801e43c <nk_style_from_table+0x128c>
 801e436:	bf00      	nop
 801e438:	00000000 	.word	0x00000000
 801e43c:	669a      	str	r2, [r3, #104]	; 0x68
    property->rounding      = 10;
 801e43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e440:	4ac3      	ldr	r2, [pc, #780]	; (801e750 <nk_style_from_table+0x15a0>)
 801e442:	66da      	str	r2, [r3, #108]	; 0x6c
    property->draw_begin    = 0;
 801e444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e446:	2200      	movs	r2, #0
 801e448:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
    property->draw_end      = 0;
 801e44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e44e:	2200      	movs	r2, #0
 801e450:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460

    /* property buttons */
    button = &style->property.dec_button;
 801e454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e456:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801e45a:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801e45c:	2198      	movs	r1, #152	; 0x98
 801e45e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801e460:	f004 f91c 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e464:	6a3b      	ldr	r3, [r7, #32]
 801e466:	3340      	adds	r3, #64	; 0x40
 801e468:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e46a:	463a      	mov	r2, r7
 801e46c:	6819      	ldr	r1, [r3, #0]
 801e46e:	460b      	mov	r3, r1
 801e470:	4619      	mov	r1, r3
 801e472:	4610      	mov	r0, r2
 801e474:	f7fe fe68 	bl	801d148 <nk_style_item_color>
 801e478:	4625      	mov	r5, r4
 801e47a:	463c      	mov	r4, r7
 801e47c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e47e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e480:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e488:	6a3b      	ldr	r3, [r7, #32]
 801e48a:	3340      	adds	r3, #64	; 0x40
 801e48c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e48e:	463a      	mov	r2, r7
 801e490:	6819      	ldr	r1, [r3, #0]
 801e492:	460b      	mov	r3, r1
 801e494:	4619      	mov	r1, r3
 801e496:	4610      	mov	r0, r2
 801e498:	f7fe fe56 	bl	801d148 <nk_style_item_color>
 801e49c:	341c      	adds	r4, #28
 801e49e:	463d      	mov	r5, r7
 801e4a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e4a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e4a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e4ac:	6a3b      	ldr	r3, [r7, #32]
 801e4ae:	3340      	adds	r3, #64	; 0x40
 801e4b0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e4b2:	463a      	mov	r2, r7
 801e4b4:	6819      	ldr	r1, [r3, #0]
 801e4b6:	460b      	mov	r3, r1
 801e4b8:	4619      	mov	r1, r3
 801e4ba:	4610      	mov	r0, r2
 801e4bc:	f7fe fe44 	bl	801d148 <nk_style_item_color>
 801e4c0:	3438      	adds	r4, #56	; 0x38
 801e4c2:	463d      	mov	r5, r7
 801e4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e4c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e4cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801e4d0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e4d2:	2300      	movs	r3, #0
 801e4d4:	2200      	movs	r2, #0
 801e4d6:	2100      	movs	r1, #0
 801e4d8:	2000      	movs	r0, #0
 801e4da:	f7f1 fbdf 	bl	800fc9c <nk_rgba>
 801e4de:	4603      	mov	r3, r0
 801e4e0:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_PROPERTY];
 801e4e2:	6a3b      	ldr	r3, [r7, #32]
 801e4e4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801e4e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4ea:	3358      	adds	r3, #88	; 0x58
 801e4ec:	6810      	ldr	r0, [r2, #0]
 801e4ee:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801e4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4f2:	6a3a      	ldr	r2, [r7, #32]
 801e4f4:	335c      	adds	r3, #92	; 0x5c
 801e4f6:	6810      	ldr	r0, [r2, #0]
 801e4f8:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801e4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e4fc:	6a3a      	ldr	r2, [r7, #32]
 801e4fe:	3360      	adds	r3, #96	; 0x60
 801e500:	6810      	ldr	r0, [r2, #0]
 801e502:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801e504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e506:	6a3a      	ldr	r2, [r7, #32]
 801e508:	3364      	adds	r3, #100	; 0x64
 801e50a:	6810      	ldr	r0, [r2, #0]
 801e50c:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801e50e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e510:	eddf 0a90 	vldr	s1, [pc, #576]	; 801e754 <nk_style_from_table+0x15a4>
 801e514:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 801e754 <nk_style_from_table+0x15a4>
 801e518:	f7f8 fa46 	bl	80169a8 <nk_vec2>
 801e51c:	eeb0 7a40 	vmov.f32	s14, s0
 801e520:	eef0 7a60 	vmov.f32	s15, s1
 801e524:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801e528:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801e52c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e52e:	eddf 0a89 	vldr	s1, [pc, #548]	; 801e754 <nk_style_from_table+0x15a4>
 801e532:	ed9f 0a88 	vldr	s0, [pc, #544]	; 801e754 <nk_style_from_table+0x15a4>
 801e536:	f7f8 fa37 	bl	80169a8 <nk_vec2>
 801e53a:	eeb0 7a40 	vmov.f32	s14, s0
 801e53e:	eef0 7a60 	vmov.f32	s15, s1
 801e542:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801e546:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801e54a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e54c:	2000      	movs	r0, #0
 801e54e:	f7f6 fcd1 	bl	8014ef4 <nk_handle_ptr>
 801e552:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801e556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e558:	2212      	movs	r2, #18
 801e55a:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801e55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e55e:	f04f 0200 	mov.w	r2, #0
 801e562:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801e564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e566:	f04f 0200 	mov.w	r2, #0
 801e56a:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801e56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e56e:	2200      	movs	r2, #0
 801e570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801e574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e576:	2200      	movs	r2, #0
 801e578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->property.inc_button = style->property.dec_button;
 801e57c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e580:	f502 602a 	add.w	r0, r2, #2720	; 0xaa0
 801e584:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 801e588:	2298      	movs	r2, #152	; 0x98
 801e58a:	4619      	mov	r1, r3
 801e58c:	f007 f8d8 	bl	8025740 <memcpy>

    /* property edit */
    edit = &style->property.edit;
 801e590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e592:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 801e596:	657b      	str	r3, [r7, #84]	; 0x54
    nk_zero_struct(*edit);
 801e598:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 801e59c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e59e:	f004 f87d 	bl	802269c <nk_zero>
    edit->normal            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e5a2:	6a3b      	ldr	r3, [r7, #32]
 801e5a4:	3340      	adds	r3, #64	; 0x40
 801e5a6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e5a8:	463a      	mov	r2, r7
 801e5aa:	6819      	ldr	r1, [r3, #0]
 801e5ac:	460b      	mov	r3, r1
 801e5ae:	4619      	mov	r1, r3
 801e5b0:	4610      	mov	r0, r2
 801e5b2:	f7fe fdc9 	bl	801d148 <nk_style_item_color>
 801e5b6:	4625      	mov	r5, r4
 801e5b8:	463c      	mov	r4, r7
 801e5ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e5bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e5be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e5c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    edit->hover             = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e5c6:	6a3b      	ldr	r3, [r7, #32]
 801e5c8:	3340      	adds	r3, #64	; 0x40
 801e5ca:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e5cc:	463a      	mov	r2, r7
 801e5ce:	6819      	ldr	r1, [r3, #0]
 801e5d0:	460b      	mov	r3, r1
 801e5d2:	4619      	mov	r1, r3
 801e5d4:	4610      	mov	r0, r2
 801e5d6:	f7fe fdb7 	bl	801d148 <nk_style_item_color>
 801e5da:	341c      	adds	r4, #28
 801e5dc:	463d      	mov	r5, r7
 801e5de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e5e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e5e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e5e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->active            = nk_style_item_color(table[NK_COLOR_PROPERTY]);
 801e5ea:	6a3b      	ldr	r3, [r7, #32]
 801e5ec:	3340      	adds	r3, #64	; 0x40
 801e5ee:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e5f0:	463a      	mov	r2, r7
 801e5f2:	6819      	ldr	r1, [r3, #0]
 801e5f4:	460b      	mov	r3, r1
 801e5f6:	4619      	mov	r1, r3
 801e5f8:	4610      	mov	r0, r2
 801e5fa:	f7fe fda5 	bl	801d148 <nk_style_item_color>
 801e5fe:	3438      	adds	r4, #56	; 0x38
 801e600:	463d      	mov	r5, r7
 801e602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e60a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    edit->border_color      = nk_rgba(0,0,0,0);
 801e60e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e610:	2300      	movs	r3, #0
 801e612:	2200      	movs	r2, #0
 801e614:	2100      	movs	r1, #0
 801e616:	2000      	movs	r0, #0
 801e618:	f7f1 fb40 	bl	800fc9c <nk_rgba>
 801e61c:	4603      	mov	r3, r0
 801e61e:	6563      	str	r3, [r4, #84]	; 0x54
    edit->cursor_normal     = table[NK_COLOR_TEXT];
 801e620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e622:	6a3a      	ldr	r2, [r7, #32]
 801e624:	f503 7319 	add.w	r3, r3, #612	; 0x264
 801e628:	6810      	ldr	r0, [r2, #0]
 801e62a:	6018      	str	r0, [r3, #0]
    edit->cursor_hover      = table[NK_COLOR_TEXT];
 801e62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e62e:	6a3a      	ldr	r2, [r7, #32]
 801e630:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801e634:	6810      	ldr	r0, [r2, #0]
 801e636:	6018      	str	r0, [r3, #0]
    edit->cursor_text_normal= table[NK_COLOR_EDIT];
 801e638:	6a3b      	ldr	r3, [r7, #32]
 801e63a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e640:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 801e644:	6810      	ldr	r0, [r2, #0]
 801e646:	6018      	str	r0, [r3, #0]
    edit->cursor_text_hover = table[NK_COLOR_EDIT];
 801e648:	6a3b      	ldr	r3, [r7, #32]
 801e64a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e650:	f503 731c 	add.w	r3, r3, #624	; 0x270
 801e654:	6810      	ldr	r0, [r2, #0]
 801e656:	6018      	str	r0, [r3, #0]
    edit->text_normal       = table[NK_COLOR_TEXT];
 801e658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e65a:	6a3a      	ldr	r2, [r7, #32]
 801e65c:	f503 731d 	add.w	r3, r3, #628	; 0x274
 801e660:	6810      	ldr	r0, [r2, #0]
 801e662:	6018      	str	r0, [r3, #0]
    edit->text_hover        = table[NK_COLOR_TEXT];
 801e664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e666:	6a3a      	ldr	r2, [r7, #32]
 801e668:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801e66c:	6810      	ldr	r0, [r2, #0]
 801e66e:	6018      	str	r0, [r3, #0]
    edit->text_active       = table[NK_COLOR_TEXT];
 801e670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e672:	6a3a      	ldr	r2, [r7, #32]
 801e674:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 801e678:	6810      	ldr	r0, [r2, #0]
 801e67a:	6018      	str	r0, [r3, #0]
    edit->selected_normal   = table[NK_COLOR_TEXT];
 801e67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e67e:	6a3a      	ldr	r2, [r7, #32]
 801e680:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801e684:	6810      	ldr	r0, [r2, #0]
 801e686:	6018      	str	r0, [r3, #0]
    edit->selected_hover    = table[NK_COLOR_TEXT];
 801e688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e68a:	6a3a      	ldr	r2, [r7, #32]
 801e68c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801e690:	6810      	ldr	r0, [r2, #0]
 801e692:	6018      	str	r0, [r3, #0]
    edit->selected_text_normal  = table[NK_COLOR_EDIT];
 801e694:	6a3b      	ldr	r3, [r7, #32]
 801e696:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e69c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801e6a0:	6810      	ldr	r0, [r2, #0]
 801e6a2:	6018      	str	r0, [r3, #0]
    edit->selected_text_hover   = table[NK_COLOR_EDIT];
 801e6a4:	6a3b      	ldr	r3, [r7, #32]
 801e6a6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801e6aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801e6b0:	6810      	ldr	r0, [r2, #0]
 801e6b2:	6018      	str	r0, [r3, #0]
    edit->padding           = nk_vec2(0,0);
 801e6b4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 801e6b6:	eddf 0a27 	vldr	s1, [pc, #156]	; 801e754 <nk_style_from_table+0x15a4>
 801e6ba:	ed9f 0a26 	vldr	s0, [pc, #152]	; 801e754 <nk_style_from_table+0x15a4>
 801e6be:	f7f8 f973 	bl	80169a8 <nk_vec2>
 801e6c2:	eeb0 7a40 	vmov.f32	s14, s0
 801e6c6:	eef0 7a60 	vmov.f32	s15, s1
 801e6ca:	ed84 7aa9 	vstr	s14, [r4, #676]	; 0x2a4
 801e6ce:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
    edit->cursor_size       = 8;
 801e6d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6d4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801e6d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    edit->border            = 0;
 801e6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6de:	f04f 0200 	mov.w	r2, #0
 801e6e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    edit->rounding          = 0;
 801e6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e6e8:	f04f 0200 	mov.w	r2, #0
 801e6ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

    /* chart */
    chart = &style->chart;
 801e6f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e6f2:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 801e6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    nk_zero_struct(*chart);
 801e6f8:	2138      	movs	r1, #56	; 0x38
 801e6fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e6fc:	f003 ffce 	bl	802269c <nk_zero>
    chart->background       = nk_style_item_color(table[NK_COLOR_CHART]);
 801e700:	6a3b      	ldr	r3, [r7, #32]
 801e702:	3350      	adds	r3, #80	; 0x50
 801e704:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e706:	463a      	mov	r2, r7
 801e708:	6819      	ldr	r1, [r3, #0]
 801e70a:	460b      	mov	r3, r1
 801e70c:	4619      	mov	r1, r3
 801e70e:	4610      	mov	r0, r2
 801e710:	f7fe fd1a 	bl	801d148 <nk_style_item_color>
 801e714:	4625      	mov	r5, r4
 801e716:	463c      	mov	r4, r7
 801e718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e71a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e71c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e720:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    chart->border_color     = table[NK_COLOR_BORDER];
 801e724:	6a3b      	ldr	r3, [r7, #32]
 801e726:	f103 020c 	add.w	r2, r3, #12
 801e72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e72c:	331c      	adds	r3, #28
 801e72e:	6810      	ldr	r0, [r2, #0]
 801e730:	6018      	str	r0, [r3, #0]
    chart->selected_color   = table[NK_COLOR_CHART_COLOR_HIGHLIGHT];
 801e732:	6a3b      	ldr	r3, [r7, #32]
 801e734:	f103 0258 	add.w	r2, r3, #88	; 0x58
 801e738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e73a:	3320      	adds	r3, #32
 801e73c:	6810      	ldr	r0, [r2, #0]
 801e73e:	6018      	str	r0, [r3, #0]
    chart->color            = table[NK_COLOR_CHART_COLOR];
 801e740:	6a3b      	ldr	r3, [r7, #32]
 801e742:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801e746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e748:	3324      	adds	r3, #36	; 0x24
 801e74a:	6810      	ldr	r0, [r2, #0]
 801e74c:	6018      	str	r0, [r3, #0]
 801e74e:	e003      	b.n	801e758 <nk_style_from_table+0x15a8>
 801e750:	41200000 	.word	0x41200000
 801e754:	00000000 	.word	0x00000000
    chart->padding          = nk_vec2(4,4);
 801e758:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801e75a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e75e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e762:	f7f8 f921 	bl	80169a8 <nk_vec2>
 801e766:	eeb0 7a40 	vmov.f32	s14, s0
 801e76a:	eef0 7a60 	vmov.f32	s15, s1
 801e76e:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
 801e772:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    chart->border           = 0;
 801e776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e778:	f04f 0200 	mov.w	r2, #0
 801e77c:	629a      	str	r2, [r3, #40]	; 0x28
    chart->rounding         = 0;
 801e77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e780:	f04f 0200 	mov.w	r2, #0
 801e784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* combo */
    combo = &style->combo;
 801e786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e788:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 801e78c:	64bb      	str	r3, [r7, #72]	; 0x48
    combo->normal           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e78e:	6a3b      	ldr	r3, [r7, #32]
 801e790:	334c      	adds	r3, #76	; 0x4c
 801e792:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e794:	463a      	mov	r2, r7
 801e796:	6819      	ldr	r1, [r3, #0]
 801e798:	460b      	mov	r3, r1
 801e79a:	4619      	mov	r1, r3
 801e79c:	4610      	mov	r0, r2
 801e79e:	f7fe fcd3 	bl	801d148 <nk_style_item_color>
 801e7a2:	4625      	mov	r5, r4
 801e7a4:	463c      	mov	r4, r7
 801e7a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e7a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e7aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e7ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    combo->hover            = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e7b2:	6a3b      	ldr	r3, [r7, #32]
 801e7b4:	334c      	adds	r3, #76	; 0x4c
 801e7b6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e7b8:	463a      	mov	r2, r7
 801e7ba:	6819      	ldr	r1, [r3, #0]
 801e7bc:	460b      	mov	r3, r1
 801e7be:	4619      	mov	r1, r3
 801e7c0:	4610      	mov	r0, r2
 801e7c2:	f7fe fcc1 	bl	801d148 <nk_style_item_color>
 801e7c6:	341c      	adds	r4, #28
 801e7c8:	463d      	mov	r5, r7
 801e7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e7ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e7d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->active           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e7d6:	6a3b      	ldr	r3, [r7, #32]
 801e7d8:	334c      	adds	r3, #76	; 0x4c
 801e7da:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e7dc:	463a      	mov	r2, r7
 801e7de:	6819      	ldr	r1, [r3, #0]
 801e7e0:	460b      	mov	r3, r1
 801e7e2:	4619      	mov	r1, r3
 801e7e4:	4610      	mov	r0, r2
 801e7e6:	f7fe fcaf 	bl	801d148 <nk_style_item_color>
 801e7ea:	3438      	adds	r4, #56	; 0x38
 801e7ec:	463d      	mov	r5, r7
 801e7ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e7f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e7f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    combo->border_color     = table[NK_COLOR_BORDER];
 801e7fa:	6a3b      	ldr	r3, [r7, #32]
 801e7fc:	f103 020c 	add.w	r2, r3, #12
 801e800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e802:	3354      	adds	r3, #84	; 0x54
 801e804:	6810      	ldr	r0, [r2, #0]
 801e806:	6018      	str	r0, [r3, #0]
    combo->label_normal     = table[NK_COLOR_TEXT];
 801e808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e80a:	6a3a      	ldr	r2, [r7, #32]
 801e80c:	3358      	adds	r3, #88	; 0x58
 801e80e:	6810      	ldr	r0, [r2, #0]
 801e810:	6018      	str	r0, [r3, #0]
    combo->label_hover      = table[NK_COLOR_TEXT];
 801e812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e814:	6a3a      	ldr	r2, [r7, #32]
 801e816:	335c      	adds	r3, #92	; 0x5c
 801e818:	6810      	ldr	r0, [r2, #0]
 801e81a:	6018      	str	r0, [r3, #0]
    combo->label_active     = table[NK_COLOR_TEXT];
 801e81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e81e:	6a3a      	ldr	r2, [r7, #32]
 801e820:	3360      	adds	r3, #96	; 0x60
 801e822:	6810      	ldr	r0, [r2, #0]
 801e824:	6018      	str	r0, [r3, #0]
    combo->sym_normal       = NK_SYMBOL_TRIANGLE_DOWN;
 801e826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e828:	2208      	movs	r2, #8
 801e82a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    combo->sym_hover        = NK_SYMBOL_TRIANGLE_DOWN;
 801e82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e830:	2208      	movs	r2, #8
 801e832:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    combo->sym_active       = NK_SYMBOL_TRIANGLE_DOWN;
 801e836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e838:	2208      	movs	r2, #8
 801e83a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    combo->content_padding  = nk_vec2(4,4);
 801e83e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e840:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e844:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e848:	f7f8 f8ae 	bl	80169a8 <nk_vec2>
 801e84c:	eeb0 7a40 	vmov.f32	s14, s0
 801e850:	eef0 7a60 	vmov.f32	s15, s1
 801e854:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 801e858:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
    combo->button_padding   = nk_vec2(0,4);
 801e85c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e85e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801e862:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 801e754 <nk_style_from_table+0x15a4>
 801e866:	f7f8 f89f 	bl	80169a8 <nk_vec2>
 801e86a:	eeb0 7a40 	vmov.f32	s14, s0
 801e86e:	eef0 7a60 	vmov.f32	s15, s1
 801e872:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 801e876:	edc4 7a48 	vstr	s15, [r4, #288]	; 0x120
    combo->spacing          = nk_vec2(4,0);
 801e87a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801e87c:	ed5f 0a4b 	vldr	s1, [pc, #-300]	; 801e754 <nk_style_from_table+0x15a4>
 801e880:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801e884:	f7f8 f890 	bl	80169a8 <nk_vec2>
 801e888:	eeb0 7a40 	vmov.f32	s14, s0
 801e88c:	eef0 7a60 	vmov.f32	s15, s1
 801e890:	ed84 7a49 	vstr	s14, [r4, #292]	; 0x124
 801e894:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
    combo->border           = 1;
 801e898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e89a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e89e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    combo->rounding         = 0;
 801e8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e8a4:	f04f 0200 	mov.w	r2, #0
 801e8a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

    /* combo button */
    button = &style->combo.button;
 801e8ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e8ae:	f503 53af 	add.w	r3, r3, #5600	; 0x15e0
 801e8b2:	3310      	adds	r3, #16
 801e8b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801e8b6:	2198      	movs	r1, #152	; 0x98
 801e8b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801e8ba:	f003 feef 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e8be:	6a3b      	ldr	r3, [r7, #32]
 801e8c0:	334c      	adds	r3, #76	; 0x4c
 801e8c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e8c4:	463a      	mov	r2, r7
 801e8c6:	6819      	ldr	r1, [r3, #0]
 801e8c8:	460b      	mov	r3, r1
 801e8ca:	4619      	mov	r1, r3
 801e8cc:	4610      	mov	r0, r2
 801e8ce:	f7fe fc3b 	bl	801d148 <nk_style_item_color>
 801e8d2:	4625      	mov	r5, r4
 801e8d4:	463c      	mov	r4, r7
 801e8d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e8d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e8da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e8de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e8e2:	6a3b      	ldr	r3, [r7, #32]
 801e8e4:	334c      	adds	r3, #76	; 0x4c
 801e8e6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e8e8:	463a      	mov	r2, r7
 801e8ea:	6819      	ldr	r1, [r3, #0]
 801e8ec:	460b      	mov	r3, r1
 801e8ee:	4619      	mov	r1, r3
 801e8f0:	4610      	mov	r0, r2
 801e8f2:	f7fe fc29 	bl	801d148 <nk_style_item_color>
 801e8f6:	341c      	adds	r4, #28
 801e8f8:	463d      	mov	r5, r7
 801e8fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e8fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e8fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_COMBO]);
 801e906:	6a3b      	ldr	r3, [r7, #32]
 801e908:	334c      	adds	r3, #76	; 0x4c
 801e90a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e90c:	463a      	mov	r2, r7
 801e90e:	6819      	ldr	r1, [r3, #0]
 801e910:	460b      	mov	r3, r1
 801e912:	4619      	mov	r1, r3
 801e914:	4610      	mov	r0, r2
 801e916:	f7fe fc17 	bl	801d148 <nk_style_item_color>
 801e91a:	3438      	adds	r4, #56	; 0x38
 801e91c:	463d      	mov	r5, r7
 801e91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e922:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801e92a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e92c:	2300      	movs	r3, #0
 801e92e:	2200      	movs	r2, #0
 801e930:	2100      	movs	r1, #0
 801e932:	2000      	movs	r0, #0
 801e934:	f7f1 f9b2 	bl	800fc9c <nk_rgba>
 801e938:	4603      	mov	r3, r0
 801e93a:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_COMBO];
 801e93c:	6a3b      	ldr	r3, [r7, #32]
 801e93e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801e942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e944:	3358      	adds	r3, #88	; 0x58
 801e946:	6810      	ldr	r0, [r2, #0]
 801e948:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801e94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e94c:	6a3a      	ldr	r2, [r7, #32]
 801e94e:	335c      	adds	r3, #92	; 0x5c
 801e950:	6810      	ldr	r0, [r2, #0]
 801e952:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801e954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e956:	6a3a      	ldr	r2, [r7, #32]
 801e958:	3360      	adds	r3, #96	; 0x60
 801e95a:	6810      	ldr	r0, [r2, #0]
 801e95c:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801e95e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e960:	6a3a      	ldr	r2, [r7, #32]
 801e962:	3364      	adds	r3, #100	; 0x64
 801e964:	6810      	ldr	r0, [r2, #0]
 801e966:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801e968:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e96a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801e96e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801e972:	f7f8 f819 	bl	80169a8 <nk_vec2>
 801e976:	eeb0 7a40 	vmov.f32	s14, s0
 801e97a:	eef0 7a60 	vmov.f32	s15, s1
 801e97e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801e982:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801e986:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e988:	ed5f 0a8e 	vldr	s1, [pc, #-568]	; 801e754 <nk_style_from_table+0x15a4>
 801e98c:	ed1f 0a8f 	vldr	s0, [pc, #-572]	; 801e754 <nk_style_from_table+0x15a4>
 801e990:	f7f8 f80a 	bl	80169a8 <nk_vec2>
 801e994:	eeb0 7a40 	vmov.f32	s14, s0
 801e998:	eef0 7a60 	vmov.f32	s15, s1
 801e99c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801e9a0:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801e9a4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801e9a6:	2000      	movs	r0, #0
 801e9a8:	f7f6 faa4 	bl	8014ef4 <nk_handle_ptr>
 801e9ac:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801e9b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9b2:	2212      	movs	r2, #18
 801e9b4:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801e9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9b8:	f04f 0200 	mov.w	r2, #0
 801e9bc:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801e9be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9c0:	f04f 0200 	mov.w	r2, #0
 801e9c4:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801e9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801e9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e9d0:	2200      	movs	r2, #0
 801e9d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* tab */
    tab = &style->tab;
 801e9d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e9d8:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 801e9dc:	331c      	adds	r3, #28
 801e9de:	647b      	str	r3, [r7, #68]	; 0x44
    tab->background         = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801e9e0:	6a3b      	ldr	r3, [r7, #32]
 801e9e2:	336c      	adds	r3, #108	; 0x6c
 801e9e4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801e9e6:	463a      	mov	r2, r7
 801e9e8:	6819      	ldr	r1, [r3, #0]
 801e9ea:	460b      	mov	r3, r1
 801e9ec:	4619      	mov	r1, r3
 801e9ee:	4610      	mov	r0, r2
 801e9f0:	f7fe fbaa 	bl	801d148 <nk_style_item_color>
 801e9f4:	4625      	mov	r5, r4
 801e9f6:	463c      	mov	r4, r7
 801e9f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e9fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e9fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ea00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    tab->border_color       = table[NK_COLOR_BORDER];
 801ea04:	6a3b      	ldr	r3, [r7, #32]
 801ea06:	f103 020c 	add.w	r2, r3, #12
 801ea0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea0c:	331c      	adds	r3, #28
 801ea0e:	6810      	ldr	r0, [r2, #0]
 801ea10:	6018      	str	r0, [r3, #0]
    tab->text               = table[NK_COLOR_TEXT];
 801ea12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea14:	6a3a      	ldr	r2, [r7, #32]
 801ea16:	3320      	adds	r3, #32
 801ea18:	6810      	ldr	r0, [r2, #0]
 801ea1a:	6018      	str	r0, [r3, #0]
    tab->sym_minimize       = NK_SYMBOL_TRIANGLE_RIGHT;
 801ea1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea1e:	220a      	movs	r2, #10
 801ea20:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
    tab->sym_maximize       = NK_SYMBOL_TRIANGLE_DOWN;
 801ea24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea26:	2208      	movs	r2, #8
 801ea28:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
    tab->padding            = nk_vec2(4,4);
 801ea2c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801ea2e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801ea32:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801ea36:	f7f7 ffb7 	bl	80169a8 <nk_vec2>
 801ea3a:	eeb0 7a40 	vmov.f32	s14, s0
 801ea3e:	eef0 7a60 	vmov.f32	s15, s1
 801ea42:	ed84 7aa5 	vstr	s14, [r4, #660]	; 0x294
 801ea46:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
    tab->spacing            = nk_vec2(4,4);
 801ea4a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801ea4c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801ea50:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801ea54:	f7f7 ffa8 	bl	80169a8 <nk_vec2>
 801ea58:	eeb0 7a40 	vmov.f32	s14, s0
 801ea5c:	eef0 7a60 	vmov.f32	s15, s1
 801ea60:	ed84 7aa7 	vstr	s14, [r4, #668]	; 0x29c
 801ea64:	edc4 7aa8 	vstr	s15, [r4, #672]	; 0x2a0
    tab->indent             = 10.0f;
 801ea68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea6a:	4aca      	ldr	r2, [pc, #808]	; (801ed94 <nk_style_from_table+0x1be4>)
 801ea6c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
    tab->border             = 1;
 801ea70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801ea76:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    tab->rounding           = 0;
 801ea7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ea7c:	f04f 0200 	mov.w	r2, #0
 801ea80:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c

    /* tab button */
    button = &style->tab.tab_minimize_button;
 801ea84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ea86:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801ea8a:	3318      	adds	r3, #24
 801ea8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ea8e:	2198      	movs	r1, #152	; 0x98
 801ea90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ea92:	f003 fe03 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801ea96:	6a3b      	ldr	r3, [r7, #32]
 801ea98:	336c      	adds	r3, #108	; 0x6c
 801ea9a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ea9c:	463a      	mov	r2, r7
 801ea9e:	6819      	ldr	r1, [r3, #0]
 801eaa0:	460b      	mov	r3, r1
 801eaa2:	4619      	mov	r1, r3
 801eaa4:	4610      	mov	r0, r2
 801eaa6:	f7fe fb4f 	bl	801d148 <nk_style_item_color>
 801eaaa:	4625      	mov	r5, r4
 801eaac:	463c      	mov	r4, r7
 801eaae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801eab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801eab2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801eab6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801eaba:	6a3b      	ldr	r3, [r7, #32]
 801eabc:	336c      	adds	r3, #108	; 0x6c
 801eabe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eac0:	463a      	mov	r2, r7
 801eac2:	6819      	ldr	r1, [r3, #0]
 801eac4:	460b      	mov	r3, r1
 801eac6:	4619      	mov	r1, r3
 801eac8:	4610      	mov	r0, r2
 801eaca:	f7fe fb3d 	bl	801d148 <nk_style_item_color>
 801eace:	341c      	adds	r4, #28
 801ead0:	463d      	mov	r5, r7
 801ead2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ead4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ead6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801eada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_TAB_HEADER]);
 801eade:	6a3b      	ldr	r3, [r7, #32]
 801eae0:	336c      	adds	r3, #108	; 0x6c
 801eae2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eae4:	463a      	mov	r2, r7
 801eae6:	6819      	ldr	r1, [r3, #0]
 801eae8:	460b      	mov	r3, r1
 801eaea:	4619      	mov	r1, r3
 801eaec:	4610      	mov	r0, r2
 801eaee:	f7fe fb2b 	bl	801d148 <nk_style_item_color>
 801eaf2:	3438      	adds	r4, #56	; 0x38
 801eaf4:	463d      	mov	r5, r7
 801eaf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801eaf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801eafa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801eafe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801eb02:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb04:	2300      	movs	r3, #0
 801eb06:	2200      	movs	r2, #0
 801eb08:	2100      	movs	r1, #0
 801eb0a:	2000      	movs	r0, #0
 801eb0c:	f7f1 f8c6 	bl	800fc9c <nk_rgba>
 801eb10:	4603      	mov	r3, r0
 801eb12:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801eb14:	6a3b      	ldr	r3, [r7, #32]
 801eb16:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801eb1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb1c:	3358      	adds	r3, #88	; 0x58
 801eb1e:	6810      	ldr	r0, [r2, #0]
 801eb20:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801eb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb24:	6a3a      	ldr	r2, [r7, #32]
 801eb26:	335c      	adds	r3, #92	; 0x5c
 801eb28:	6810      	ldr	r0, [r2, #0]
 801eb2a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801eb2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb2e:	6a3a      	ldr	r2, [r7, #32]
 801eb30:	3360      	adds	r3, #96	; 0x60
 801eb32:	6810      	ldr	r0, [r2, #0]
 801eb34:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801eb36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb38:	6a3a      	ldr	r2, [r7, #32]
 801eb3a:	3364      	adds	r3, #100	; 0x64
 801eb3c:	6810      	ldr	r0, [r2, #0]
 801eb3e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801eb40:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801eb46:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801eb4a:	f7f7 ff2d 	bl	80169a8 <nk_vec2>
 801eb4e:	eeb0 7a40 	vmov.f32	s14, s0
 801eb52:	eef0 7a60 	vmov.f32	s15, s1
 801eb56:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801eb5a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801eb5e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb60:	eddf 0a8d 	vldr	s1, [pc, #564]	; 801ed98 <nk_style_from_table+0x1be8>
 801eb64:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801ed98 <nk_style_from_table+0x1be8>
 801eb68:	f7f7 ff1e 	bl	80169a8 <nk_vec2>
 801eb6c:	eeb0 7a40 	vmov.f32	s14, s0
 801eb70:	eef0 7a60 	vmov.f32	s15, s1
 801eb74:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801eb78:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801eb7c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eb7e:	2000      	movs	r0, #0
 801eb80:	f7f6 f9b8 	bl	8014ef4 <nk_handle_ptr>
 801eb84:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801eb88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb8a:	2212      	movs	r2, #18
 801eb8c:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801eb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb90:	f04f 0200 	mov.w	r2, #0
 801eb94:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801eb96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb98:	f04f 0200 	mov.w	r2, #0
 801eb9c:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801eb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eba0:	2200      	movs	r2, #0
 801eba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801eba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eba8:	2200      	movs	r2, #0
 801ebaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.tab_maximize_button =*button;
 801ebae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ebb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ebb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ebb6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ebba:	4611      	mov	r1, r2
 801ebbc:	2298      	movs	r2, #152	; 0x98
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	f006 fdbe 	bl	8025740 <memcpy>

    /* node button */
    button = &style->tab.node_minimize_button;
 801ebc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ebc6:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 801ebca:	3308      	adds	r3, #8
 801ebcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ebce:	2198      	movs	r1, #152	; 0x98
 801ebd0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ebd2:	f003 fd63 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801ebd6:	6a3b      	ldr	r3, [r7, #32]
 801ebd8:	3304      	adds	r3, #4
 801ebda:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ebdc:	463a      	mov	r2, r7
 801ebde:	6819      	ldr	r1, [r3, #0]
 801ebe0:	460b      	mov	r3, r1
 801ebe2:	4619      	mov	r1, r3
 801ebe4:	4610      	mov	r0, r2
 801ebe6:	f7fe faaf 	bl	801d148 <nk_style_item_color>
 801ebea:	4625      	mov	r5, r4
 801ebec:	463c      	mov	r4, r7
 801ebee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ebf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ebf2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ebf6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801ebfa:	6a3b      	ldr	r3, [r7, #32]
 801ebfc:	3304      	adds	r3, #4
 801ebfe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec00:	463a      	mov	r2, r7
 801ec02:	6819      	ldr	r1, [r3, #0]
 801ec04:	460b      	mov	r3, r1
 801ec06:	4619      	mov	r1, r3
 801ec08:	4610      	mov	r0, r2
 801ec0a:	f7fe fa9d 	bl	801d148 <nk_style_item_color>
 801ec0e:	341c      	adds	r4, #28
 801ec10:	463d      	mov	r5, r7
 801ec12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ec14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ec16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ec1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801ec1e:	6a3b      	ldr	r3, [r7, #32]
 801ec20:	3304      	adds	r3, #4
 801ec22:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec24:	463a      	mov	r2, r7
 801ec26:	6819      	ldr	r1, [r3, #0]
 801ec28:	460b      	mov	r3, r1
 801ec2a:	4619      	mov	r1, r3
 801ec2c:	4610      	mov	r0, r2
 801ec2e:	f7fe fa8b 	bl	801d148 <nk_style_item_color>
 801ec32:	3438      	adds	r4, #56	; 0x38
 801ec34:	463d      	mov	r5, r7
 801ec36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ec38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ec3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ec3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801ec42:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec44:	2300      	movs	r3, #0
 801ec46:	2200      	movs	r2, #0
 801ec48:	2100      	movs	r1, #0
 801ec4a:	2000      	movs	r0, #0
 801ec4c:	f7f1 f826 	bl	800fc9c <nk_rgba>
 801ec50:	4603      	mov	r3, r0
 801ec52:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_TAB_HEADER];
 801ec54:	6a3b      	ldr	r3, [r7, #32]
 801ec56:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801ec5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec5c:	3358      	adds	r3, #88	; 0x58
 801ec5e:	6810      	ldr	r0, [r2, #0]
 801ec60:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801ec62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec64:	6a3a      	ldr	r2, [r7, #32]
 801ec66:	335c      	adds	r3, #92	; 0x5c
 801ec68:	6810      	ldr	r0, [r2, #0]
 801ec6a:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801ec6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec6e:	6a3a      	ldr	r2, [r7, #32]
 801ec70:	3360      	adds	r3, #96	; 0x60
 801ec72:	6810      	ldr	r0, [r2, #0]
 801ec74:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801ec76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ec78:	6a3a      	ldr	r2, [r7, #32]
 801ec7a:	3364      	adds	r3, #100	; 0x64
 801ec7c:	6810      	ldr	r0, [r2, #0]
 801ec7e:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(2.0f,2.0f);
 801ec80:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ec82:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 801ec86:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801ec8a:	f7f7 fe8d 	bl	80169a8 <nk_vec2>
 801ec8e:	eeb0 7a40 	vmov.f32	s14, s0
 801ec92:	eef0 7a60 	vmov.f32	s15, s1
 801ec96:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801ec9a:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801ec9e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eca0:	eddf 0a3d 	vldr	s1, [pc, #244]	; 801ed98 <nk_style_from_table+0x1be8>
 801eca4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801ed98 <nk_style_from_table+0x1be8>
 801eca8:	f7f7 fe7e 	bl	80169a8 <nk_vec2>
 801ecac:	eeb0 7a40 	vmov.f32	s14, s0
 801ecb0:	eef0 7a60 	vmov.f32	s15, s1
 801ecb4:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801ecb8:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801ecbc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ecbe:	2000      	movs	r0, #0
 801ecc0:	f7f6 f918 	bl	8014ef4 <nk_handle_ptr>
 801ecc4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801ecc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecca:	2212      	movs	r2, #18
 801eccc:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801ecce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecd0:	f04f 0200 	mov.w	r2, #0
 801ecd4:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801ecd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ecd8:	f04f 0200 	mov.w	r2, #0
 801ecdc:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801ecde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ece0:	2200      	movs	r2, #0
 801ece2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801ece6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ece8:	2200      	movs	r2, #0
 801ecea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    style->tab.node_maximize_button =*button;
 801ecee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ecf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ecf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ecf6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 801ecfa:	4611      	mov	r1, r2
 801ecfc:	2298      	movs	r2, #152	; 0x98
 801ecfe:	4618      	mov	r0, r3
 801ed00:	f006 fd1e 	bl	8025740 <memcpy>

    /* window header */
    win = &style->window;
 801ed04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ed06:	f503 53b5 	add.w	r3, r3, #5792	; 0x16a0
 801ed0a:	330c      	adds	r3, #12
 801ed0c:	643b      	str	r3, [r7, #64]	; 0x40
    win->header.align = NK_HEADER_RIGHT;
 801ed0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed10:	2201      	movs	r2, #1
 801ed12:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
    win->header.close_symbol = NK_SYMBOL_X;
 801ed16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed18:	2201      	movs	r2, #1
 801ed1a:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
    win->header.minimize_symbol = NK_SYMBOL_MINUS;
 801ed1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed20:	220c      	movs	r2, #12
 801ed22:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    win->header.maximize_symbol = NK_SYMBOL_PLUS;
 801ed26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ed28:	220b      	movs	r2, #11
 801ed2a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    win->header.normal = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ed2e:	6a3b      	ldr	r3, [r7, #32]
 801ed30:	3308      	adds	r3, #8
 801ed32:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ed34:	463a      	mov	r2, r7
 801ed36:	6819      	ldr	r1, [r3, #0]
 801ed38:	460b      	mov	r3, r1
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	4610      	mov	r0, r2
 801ed3e:	f7fe fa03 	bl	801d148 <nk_style_item_color>
 801ed42:	4625      	mov	r5, r4
 801ed44:	463c      	mov	r4, r7
 801ed46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ed48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ed4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ed4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    win->header.hover = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ed52:	6a3b      	ldr	r3, [r7, #32]
 801ed54:	3308      	adds	r3, #8
 801ed56:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ed58:	463a      	mov	r2, r7
 801ed5a:	6819      	ldr	r1, [r3, #0]
 801ed5c:	460b      	mov	r3, r1
 801ed5e:	4619      	mov	r1, r3
 801ed60:	4610      	mov	r0, r2
 801ed62:	f7fe f9f1 	bl	801d148 <nk_style_item_color>
 801ed66:	341c      	adds	r4, #28
 801ed68:	463d      	mov	r5, r7
 801ed6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ed6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ed6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ed72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.active = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ed76:	6a3b      	ldr	r3, [r7, #32]
 801ed78:	3308      	adds	r3, #8
 801ed7a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ed7c:	463a      	mov	r2, r7
 801ed7e:	6819      	ldr	r1, [r3, #0]
 801ed80:	460b      	mov	r3, r1
 801ed82:	4619      	mov	r1, r3
 801ed84:	4610      	mov	r0, r2
 801ed86:	f7fe f9df 	bl	801d148 <nk_style_item_color>
 801ed8a:	3438      	adds	r4, #56	; 0x38
 801ed8c:	463d      	mov	r5, r7
 801ed8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ed90:	e004      	b.n	801ed9c <nk_style_from_table+0x1bec>
 801ed92:	bf00      	nop
 801ed94:	41200000 	.word	0x41200000
 801ed98:	00000000 	.word	0x00000000
 801ed9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ed9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801eda2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->header.label_normal = table[NK_COLOR_TEXT];
 801eda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eda8:	6a3a      	ldr	r2, [r7, #32]
 801edaa:	f203 1387 	addw	r3, r3, #391	; 0x187
 801edae:	6812      	ldr	r2, [r2, #0]
 801edb0:	601a      	str	r2, [r3, #0]
    win->header.label_hover = table[NK_COLOR_TEXT];
 801edb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edb4:	6a3a      	ldr	r2, [r7, #32]
 801edb6:	f203 138b 	addw	r3, r3, #395	; 0x18b
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	601a      	str	r2, [r3, #0]
    win->header.label_active = table[NK_COLOR_TEXT];
 801edbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801edc0:	6a3a      	ldr	r2, [r7, #32]
 801edc2:	f203 138f 	addw	r3, r3, #399	; 0x18f
 801edc6:	6812      	ldr	r2, [r2, #0]
 801edc8:	601a      	str	r2, [r3, #0]
    win->header.label_padding = nk_vec2(4,4);
 801edca:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801edcc:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801edd0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801edd4:	f7f7 fde8 	bl	80169a8 <nk_vec2>
 801edd8:	eeb0 7a40 	vmov.f32	s14, s0
 801eddc:	eef0 7a60 	vmov.f32	s15, s1
 801ede0:	ed84 7a67 	vstr	s14, [r4, #412]	; 0x19c
 801ede4:	edc4 7a68 	vstr	s15, [r4, #416]	; 0x1a0
    win->header.padding = nk_vec2(4,4);
 801ede8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801edea:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801edee:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801edf2:	f7f7 fdd9 	bl	80169a8 <nk_vec2>
 801edf6:	eeb0 7a40 	vmov.f32	s14, s0
 801edfa:	eef0 7a60 	vmov.f32	s15, s1
 801edfe:	ed84 7a65 	vstr	s14, [r4, #404]	; 0x194
 801ee02:	edc4 7a66 	vstr	s15, [r4, #408]	; 0x198
    win->header.spacing = nk_vec2(0,0);
 801ee06:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801ee08:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801ed98 <nk_style_from_table+0x1be8>
 801ee0c:	ed1f 0a1e 	vldr	s0, [pc, #-120]	; 801ed98 <nk_style_from_table+0x1be8>
 801ee10:	f7f7 fdca 	bl	80169a8 <nk_vec2>
 801ee14:	eeb0 7a40 	vmov.f32	s14, s0
 801ee18:	eef0 7a60 	vmov.f32	s15, s1
 801ee1c:	ed84 7a69 	vstr	s14, [r4, #420]	; 0x1a4
 801ee20:	edc4 7a6a 	vstr	s15, [r4, #424]	; 0x1a8

    /* window header close button */
    button = &style->window.header.close_button;
 801ee24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ee26:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 801ee2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ee2c:	2198      	movs	r1, #152	; 0x98
 801ee2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ee30:	f003 fc34 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ee34:	6a3b      	ldr	r3, [r7, #32]
 801ee36:	3308      	adds	r3, #8
 801ee38:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee3a:	463a      	mov	r2, r7
 801ee3c:	6819      	ldr	r1, [r3, #0]
 801ee3e:	460b      	mov	r3, r1
 801ee40:	4619      	mov	r1, r3
 801ee42:	4610      	mov	r0, r2
 801ee44:	f7fe f980 	bl	801d148 <nk_style_item_color>
 801ee48:	4625      	mov	r5, r4
 801ee4a:	463c      	mov	r4, r7
 801ee4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ee50:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ee54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ee58:	6a3b      	ldr	r3, [r7, #32]
 801ee5a:	3308      	adds	r3, #8
 801ee5c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee5e:	463a      	mov	r2, r7
 801ee60:	6819      	ldr	r1, [r3, #0]
 801ee62:	460b      	mov	r3, r1
 801ee64:	4619      	mov	r1, r3
 801ee66:	4610      	mov	r0, r2
 801ee68:	f7fe f96e 	bl	801d148 <nk_style_item_color>
 801ee6c:	341c      	adds	r4, #28
 801ee6e:	463d      	mov	r5, r7
 801ee70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ee72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ee74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ee78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ee7c:	6a3b      	ldr	r3, [r7, #32]
 801ee7e:	3308      	adds	r3, #8
 801ee80:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ee82:	463a      	mov	r2, r7
 801ee84:	6819      	ldr	r1, [r3, #0]
 801ee86:	460b      	mov	r3, r1
 801ee88:	4619      	mov	r1, r3
 801ee8a:	4610      	mov	r0, r2
 801ee8c:	f7fe f95c 	bl	801d148 <nk_style_item_color>
 801ee90:	3438      	adds	r4, #56	; 0x38
 801ee92:	463d      	mov	r5, r7
 801ee94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ee96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ee98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ee9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801eea0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eea2:	2300      	movs	r3, #0
 801eea4:	2200      	movs	r2, #0
 801eea6:	2100      	movs	r1, #0
 801eea8:	2000      	movs	r0, #0
 801eeaa:	f7f0 fef7 	bl	800fc9c <nk_rgba>
 801eeae:	4603      	mov	r3, r0
 801eeb0:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801eeb2:	6a3b      	ldr	r3, [r7, #32]
 801eeb4:	f103 0208 	add.w	r2, r3, #8
 801eeb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eeba:	3358      	adds	r3, #88	; 0x58
 801eebc:	6810      	ldr	r0, [r2, #0]
 801eebe:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801eec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eec2:	6a3a      	ldr	r2, [r7, #32]
 801eec4:	335c      	adds	r3, #92	; 0x5c
 801eec6:	6810      	ldr	r0, [r2, #0]
 801eec8:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801eeca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eecc:	6a3a      	ldr	r2, [r7, #32]
 801eece:	3360      	adds	r3, #96	; 0x60
 801eed0:	6810      	ldr	r0, [r2, #0]
 801eed2:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801eed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eed6:	6a3a      	ldr	r2, [r7, #32]
 801eed8:	3364      	adds	r3, #100	; 0x64
 801eeda:	6810      	ldr	r0, [r2, #0]
 801eedc:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801eede:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eee0:	ed5f 0a53 	vldr	s1, [pc, #-332]	; 801ed98 <nk_style_from_table+0x1be8>
 801eee4:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 801ed98 <nk_style_from_table+0x1be8>
 801eee8:	f7f7 fd5e 	bl	80169a8 <nk_vec2>
 801eeec:	eeb0 7a40 	vmov.f32	s14, s0
 801eef0:	eef0 7a60 	vmov.f32	s15, s1
 801eef4:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801eef8:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801eefc:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801eefe:	ed5f 0a5a 	vldr	s1, [pc, #-360]	; 801ed98 <nk_style_from_table+0x1be8>
 801ef02:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 801ed98 <nk_style_from_table+0x1be8>
 801ef06:	f7f7 fd4f 	bl	80169a8 <nk_vec2>
 801ef0a:	eeb0 7a40 	vmov.f32	s14, s0
 801ef0e:	eef0 7a60 	vmov.f32	s15, s1
 801ef12:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801ef16:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801ef1a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef1c:	2000      	movs	r0, #0
 801ef1e:	f7f5 ffe9 	bl	8014ef4 <nk_handle_ptr>
 801ef22:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801ef26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef28:	2212      	movs	r2, #18
 801ef2a:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801ef2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef2e:	f04f 0200 	mov.w	r2, #0
 801ef32:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801ef34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef36:	f04f 0200 	mov.w	r2, #0
 801ef3a:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801ef3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef3e:	2200      	movs	r2, #0
 801ef40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801ef44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef46:	2200      	movs	r2, #0
 801ef48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window header minimize button */
    button = &style->window.header.minimize_button;
 801ef4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ef4e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 801ef52:	3318      	adds	r3, #24
 801ef54:	66fb      	str	r3, [r7, #108]	; 0x6c
    nk_zero_struct(*button);
 801ef56:	2198      	movs	r1, #152	; 0x98
 801ef58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801ef5a:	f003 fb9f 	bl	802269c <nk_zero>
    button->normal          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ef5e:	6a3b      	ldr	r3, [r7, #32]
 801ef60:	3308      	adds	r3, #8
 801ef62:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef64:	463a      	mov	r2, r7
 801ef66:	6819      	ldr	r1, [r3, #0]
 801ef68:	460b      	mov	r3, r1
 801ef6a:	4619      	mov	r1, r3
 801ef6c:	4610      	mov	r0, r2
 801ef6e:	f7fe f8eb 	bl	801d148 <nk_style_item_color>
 801ef72:	4625      	mov	r5, r4
 801ef74:	463c      	mov	r4, r7
 801ef76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ef78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ef7a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ef7e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    button->hover           = nk_style_item_color(table[NK_COLOR_HEADER]);
 801ef82:	6a3b      	ldr	r3, [r7, #32]
 801ef84:	3308      	adds	r3, #8
 801ef86:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801ef88:	463a      	mov	r2, r7
 801ef8a:	6819      	ldr	r1, [r3, #0]
 801ef8c:	460b      	mov	r3, r1
 801ef8e:	4619      	mov	r1, r3
 801ef90:	4610      	mov	r0, r2
 801ef92:	f7fe f8d9 	bl	801d148 <nk_style_item_color>
 801ef96:	341c      	adds	r4, #28
 801ef98:	463d      	mov	r5, r7
 801ef9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ef9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ef9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801efa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->active          = nk_style_item_color(table[NK_COLOR_HEADER]);
 801efa6:	6a3b      	ldr	r3, [r7, #32]
 801efa8:	3308      	adds	r3, #8
 801efaa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801efac:	463a      	mov	r2, r7
 801efae:	6819      	ldr	r1, [r3, #0]
 801efb0:	460b      	mov	r3, r1
 801efb2:	4619      	mov	r1, r3
 801efb4:	4610      	mov	r0, r2
 801efb6:	f7fe f8c7 	bl	801d148 <nk_style_item_color>
 801efba:	3438      	adds	r4, #56	; 0x38
 801efbc:	463d      	mov	r5, r7
 801efbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801efc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801efc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801efc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    button->border_color    = nk_rgba(0,0,0,0);
 801efca:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801efcc:	2300      	movs	r3, #0
 801efce:	2200      	movs	r2, #0
 801efd0:	2100      	movs	r1, #0
 801efd2:	2000      	movs	r0, #0
 801efd4:	f7f0 fe62 	bl	800fc9c <nk_rgba>
 801efd8:	4603      	mov	r3, r0
 801efda:	6563      	str	r3, [r4, #84]	; 0x54
    button->text_background = table[NK_COLOR_HEADER];
 801efdc:	6a3b      	ldr	r3, [r7, #32]
 801efde:	f103 0208 	add.w	r2, r3, #8
 801efe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efe4:	3358      	adds	r3, #88	; 0x58
 801efe6:	6810      	ldr	r0, [r2, #0]
 801efe8:	6018      	str	r0, [r3, #0]
    button->text_normal     = table[NK_COLOR_TEXT];
 801efea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801efec:	6a3a      	ldr	r2, [r7, #32]
 801efee:	335c      	adds	r3, #92	; 0x5c
 801eff0:	6810      	ldr	r0, [r2, #0]
 801eff2:	6018      	str	r0, [r3, #0]
    button->text_hover      = table[NK_COLOR_TEXT];
 801eff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eff6:	6a3a      	ldr	r2, [r7, #32]
 801eff8:	3360      	adds	r3, #96	; 0x60
 801effa:	6810      	ldr	r0, [r2, #0]
 801effc:	6018      	str	r0, [r3, #0]
    button->text_active     = table[NK_COLOR_TEXT];
 801effe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f000:	6a3a      	ldr	r2, [r7, #32]
 801f002:	3364      	adds	r3, #100	; 0x64
 801f004:	6810      	ldr	r0, [r2, #0]
 801f006:	6018      	str	r0, [r3, #0]
    button->padding         = nk_vec2(0.0f,0.0f);
 801f008:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801f00a:	ed5f 0a9d 	vldr	s1, [pc, #-628]	; 801ed98 <nk_style_from_table+0x1be8>
 801f00e:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 801ed98 <nk_style_from_table+0x1be8>
 801f012:	f7f7 fcc9 	bl	80169a8 <nk_vec2>
 801f016:	eeb0 7a40 	vmov.f32	s14, s0
 801f01a:	eef0 7a60 	vmov.f32	s15, s1
 801f01e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
 801f022:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    button->touch_padding   = nk_vec2(0.0f,0.0f);
 801f026:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801f028:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 801ed98 <nk_style_from_table+0x1be8>
 801f02c:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 801ed98 <nk_style_from_table+0x1be8>
 801f030:	f7f7 fcba 	bl	80169a8 <nk_vec2>
 801f034:	eeb0 7a40 	vmov.f32	s14, s0
 801f038:	eef0 7a60 	vmov.f32	s15, s1
 801f03c:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
 801f040:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    button->userdata        = nk_handle_ptr(0);
 801f044:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801f046:	2000      	movs	r0, #0
 801f048:	f7f5 ff54 	bl	8014ef4 <nk_handle_ptr>
 801f04c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    button->text_alignment  = NK_TEXT_CENTERED;
 801f050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f052:	2212      	movs	r2, #18
 801f054:	669a      	str	r2, [r3, #104]	; 0x68
    button->border          = 0.0f;
 801f056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f058:	f04f 0200 	mov.w	r2, #0
 801f05c:	66da      	str	r2, [r3, #108]	; 0x6c
    button->rounding        = 0.0f;
 801f05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f060:	f04f 0200 	mov.w	r2, #0
 801f064:	671a      	str	r2, [r3, #112]	; 0x70
    button->draw_begin      = 0;
 801f066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f068:	2200      	movs	r2, #0
 801f06a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    button->draw_end        = 0;
 801f06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f070:	2200      	movs	r2, #0
 801f072:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* window */
    win->background = table[NK_COLOR_WINDOW];
 801f076:	6a3b      	ldr	r3, [r7, #32]
 801f078:	1d1a      	adds	r2, r3, #4
 801f07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f07c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801f080:	6810      	ldr	r0, [r2, #0]
 801f082:	6018      	str	r0, [r3, #0]
    win->fixed_background = nk_style_item_color(table[NK_COLOR_WINDOW]);
 801f084:	6a3b      	ldr	r3, [r7, #32]
 801f086:	3304      	adds	r3, #4
 801f088:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f08a:	463a      	mov	r2, r7
 801f08c:	6819      	ldr	r1, [r3, #0]
 801f08e:	460b      	mov	r3, r1
 801f090:	4619      	mov	r1, r3
 801f092:	4610      	mov	r0, r2
 801f094:	f7fe f858 	bl	801d148 <nk_style_item_color>
 801f098:	f504 74d6 	add.w	r4, r4, #428	; 0x1ac
 801f09c:	463d      	mov	r5, r7
 801f09e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f0a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f0a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801f0a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    win->border_color = table[NK_COLOR_BORDER];
 801f0aa:	6a3b      	ldr	r3, [r7, #32]
 801f0ac:	f103 020c 	add.w	r2, r3, #12
 801f0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0b2:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 801f0b6:	6810      	ldr	r0, [r2, #0]
 801f0b8:	6018      	str	r0, [r3, #0]
    win->popup_border_color = table[NK_COLOR_BORDER];
 801f0ba:	6a3b      	ldr	r3, [r7, #32]
 801f0bc:	f103 020c 	add.w	r2, r3, #12
 801f0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0c2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 801f0c6:	6810      	ldr	r0, [r2, #0]
 801f0c8:	6018      	str	r0, [r3, #0]
    win->combo_border_color = table[NK_COLOR_BORDER];
 801f0ca:	6a3b      	ldr	r3, [r7, #32]
 801f0cc:	f103 020c 	add.w	r2, r3, #12
 801f0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0d2:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801f0d6:	6810      	ldr	r0, [r2, #0]
 801f0d8:	6018      	str	r0, [r3, #0]
    win->contextual_border_color = table[NK_COLOR_BORDER];
 801f0da:	6a3b      	ldr	r3, [r7, #32]
 801f0dc:	f103 020c 	add.w	r2, r3, #12
 801f0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0e2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801f0e6:	6810      	ldr	r0, [r2, #0]
 801f0e8:	6018      	str	r0, [r3, #0]
    win->menu_border_color = table[NK_COLOR_BORDER];
 801f0ea:	6a3b      	ldr	r3, [r7, #32]
 801f0ec:	f103 020c 	add.w	r2, r3, #12
 801f0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0f2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801f0f6:	6810      	ldr	r0, [r2, #0]
 801f0f8:	6018      	str	r0, [r3, #0]
    win->group_border_color = table[NK_COLOR_BORDER];
 801f0fa:	6a3b      	ldr	r3, [r7, #32]
 801f0fc:	f103 020c 	add.w	r2, r3, #12
 801f100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f102:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801f106:	6810      	ldr	r0, [r2, #0]
 801f108:	6018      	str	r0, [r3, #0]
    win->tooltip_border_color = table[NK_COLOR_BORDER];
 801f10a:	6a3b      	ldr	r3, [r7, #32]
 801f10c:	f103 020c 	add.w	r2, r3, #12
 801f110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f112:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801f116:	6810      	ldr	r0, [r2, #0]
 801f118:	6018      	str	r0, [r3, #0]
    win->scaler = nk_style_item_color(table[NK_COLOR_TEXT]);
 801f11a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f11c:	463a      	mov	r2, r7
 801f11e:	6a3b      	ldr	r3, [r7, #32]
 801f120:	6819      	ldr	r1, [r3, #0]
 801f122:	460b      	mov	r3, r1
 801f124:	4619      	mov	r1, r3
 801f126:	4610      	mov	r0, r2
 801f128:	f7fe f80e 	bl	801d148 <nk_style_item_color>
 801f12c:	f504 74f4 	add.w	r4, r4, #488	; 0x1e8
 801f130:	463d      	mov	r5, r7
 801f132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801f13a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    win->rounding = 0.0f;
 801f13e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f140:	f04f 0200 	mov.w	r2, #0
 801f144:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    win->spacing = nk_vec2(4,4);
 801f148:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f14a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f14e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f152:	f7f7 fc29 	bl	80169a8 <nk_vec2>
 801f156:	eeb0 7a40 	vmov.f32	s14, s0
 801f15a:	eef0 7a60 	vmov.f32	s15, s1
 801f15e:	ed84 7a8a 	vstr	s14, [r4, #552]	; 0x228
 801f162:	edc4 7a8b 	vstr	s15, [r4, #556]	; 0x22c
    win->scrollbar_size = nk_vec2(20,20);
 801f166:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f168:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 801f16c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 801f170:	f7f7 fc1a 	bl	80169a8 <nk_vec2>
 801f174:	eeb0 7a40 	vmov.f32	s14, s0
 801f178:	eef0 7a60 	vmov.f32	s15, s1
 801f17c:	ed84 7a8c 	vstr	s14, [r4, #560]	; 0x230
 801f180:	edc4 7a8d 	vstr	s15, [r4, #564]	; 0x234
    win->min_size = nk_vec2(64,64);
 801f184:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f186:	eddf 0a52 	vldr	s1, [pc, #328]	; 801f2d0 <nk_style_from_table+0x2120>
 801f18a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 801f2d0 <nk_style_from_table+0x2120>
 801f18e:	f7f7 fc0b 	bl	80169a8 <nk_vec2>
 801f192:	eeb0 7a40 	vmov.f32	s14, s0
 801f196:	eef0 7a60 	vmov.f32	s15, s1
 801f19a:	ed84 7a8e 	vstr	s14, [r4, #568]	; 0x238
 801f19e:	edc4 7a8f 	vstr	s15, [r4, #572]	; 0x23c

    win->combo_border = 1.0f;
 801f1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    win->contextual_border = 1.0f;
 801f1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    win->menu_border = 1.0f;
 801f1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    win->group_border = 1.0f;
 801f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    win->tooltip_border = 1.0f;
 801f1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    win->popup_border = 1.0f;
 801f1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801f1da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    win->border = 2.0f;
 801f1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f1e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    win->min_row_height_padding = 8;
 801f1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1ea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801f1ee:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

    win->padding = nk_vec2(4,4);
 801f1f2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f1f4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f1f8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f1fc:	f7f7 fbd4 	bl	80169a8 <nk_vec2>
 801f200:	eeb0 7a40 	vmov.f32	s14, s0
 801f204:	eef0 7a60 	vmov.f32	s15, s1
 801f208:	ed84 7a90 	vstr	s14, [r4, #576]	; 0x240
 801f20c:	edc4 7a91 	vstr	s15, [r4, #580]	; 0x244
    win->group_padding = nk_vec2(4,4);
 801f210:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f212:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f216:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f21a:	f7f7 fbc5 	bl	80169a8 <nk_vec2>
 801f21e:	eeb0 7a40 	vmov.f32	s14, s0
 801f222:	eef0 7a60 	vmov.f32	s15, s1
 801f226:	ed84 7a92 	vstr	s14, [r4, #584]	; 0x248
 801f22a:	edc4 7a93 	vstr	s15, [r4, #588]	; 0x24c
    win->popup_padding = nk_vec2(4,4);
 801f22e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f230:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f234:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f238:	f7f7 fbb6 	bl	80169a8 <nk_vec2>
 801f23c:	eeb0 7a40 	vmov.f32	s14, s0
 801f240:	eef0 7a60 	vmov.f32	s15, s1
 801f244:	ed84 7a94 	vstr	s14, [r4, #592]	; 0x250
 801f248:	edc4 7a95 	vstr	s15, [r4, #596]	; 0x254
    win->combo_padding = nk_vec2(4,4);
 801f24c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f24e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f252:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f256:	f7f7 fba7 	bl	80169a8 <nk_vec2>
 801f25a:	eeb0 7a40 	vmov.f32	s14, s0
 801f25e:	eef0 7a60 	vmov.f32	s15, s1
 801f262:	ed84 7a96 	vstr	s14, [r4, #600]	; 0x258
 801f266:	edc4 7a97 	vstr	s15, [r4, #604]	; 0x25c
    win->contextual_padding = nk_vec2(4,4);
 801f26a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f26c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f270:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f274:	f7f7 fb98 	bl	80169a8 <nk_vec2>
 801f278:	eeb0 7a40 	vmov.f32	s14, s0
 801f27c:	eef0 7a60 	vmov.f32	s15, s1
 801f280:	ed84 7a98 	vstr	s14, [r4, #608]	; 0x260
 801f284:	edc4 7a99 	vstr	s15, [r4, #612]	; 0x264
    win->menu_padding = nk_vec2(4,4);
 801f288:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f28a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f28e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f292:	f7f7 fb89 	bl	80169a8 <nk_vec2>
 801f296:	eeb0 7a40 	vmov.f32	s14, s0
 801f29a:	eef0 7a60 	vmov.f32	s15, s1
 801f29e:	ed84 7a9a 	vstr	s14, [r4, #616]	; 0x268
 801f2a2:	edc4 7a9b 	vstr	s15, [r4, #620]	; 0x26c
    win->tooltip_padding = nk_vec2(4,4);
 801f2a6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801f2a8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801f2ac:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 801f2b0:	f7f7 fb7a 	bl	80169a8 <nk_vec2>
 801f2b4:	eeb0 7a40 	vmov.f32	s14, s0
 801f2b8:	eef0 7a60 	vmov.f32	s15, s1
 801f2bc:	ed84 7a9c 	vstr	s14, [r4, #624]	; 0x270
 801f2c0:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
 801f2c4:	e000      	b.n	801f2c8 <nk_style_from_table+0x2118>
    if (!ctx) return;
 801f2c6:	bf00      	nop
}
 801f2c8:	3778      	adds	r7, #120	; 0x78
 801f2ca:	46bd      	mov	sp, r7
 801f2cc:	bdb0      	pop	{r4, r5, r7, pc}
 801f2ce:	bf00      	nop
 801f2d0:	42800000 	.word	0x42800000

0801f2d4 <nk_create_table>:
 *                              TABLE
 *
 * ===============================================================*/
NK_LIB struct nk_table*
nk_create_table(struct nk_context *ctx)
{
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	b084      	sub	sp, #16
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 801f2dc:	6878      	ldr	r0, [r7, #4]
 801f2de:	f7f7 fdf7 	bl	8016ed0 <nk_create_page_element>
 801f2e2:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d101      	bne.n	801f2ee <nk_create_table+0x1a>
 801f2ea:	2300      	movs	r3, #0
 801f2ec:	e005      	b.n	801f2fa <nk_create_table+0x26>
    nk_zero_struct(*elem);
 801f2ee:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801f2f2:	68f8      	ldr	r0, [r7, #12]
 801f2f4:	f003 f9d2 	bl	802269c <nk_zero>
    return &elem->data.tbl;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
}
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	3710      	adds	r7, #16
 801f2fe:	46bd      	mov	sp, r7
 801f300:	bd80      	pop	{r7, pc}

0801f302 <nk_free_table>:
NK_LIB void
nk_free_table(struct nk_context *ctx, struct nk_table *tbl)
{
 801f302:	b580      	push	{r7, lr}
 801f304:	b084      	sub	sp, #16
 801f306:	af00      	add	r7, sp, #0
 801f308:	6078      	str	r0, [r7, #4]
 801f30a:	6039      	str	r1, [r7, #0]
    union nk_page_data *pd = NK_CONTAINER_OF(tbl, union nk_page_data, tbl);
 801f30c:	683b      	ldr	r3, [r7, #0]
 801f30e:	60fb      	str	r3, [r7, #12]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 801f310:	68fb      	ldr	r3, [r7, #12]
 801f312:	60bb      	str	r3, [r7, #8]
    nk_free_page_element(ctx, pe);
 801f314:	68b9      	ldr	r1, [r7, #8]
 801f316:	6878      	ldr	r0, [r7, #4]
 801f318:	f7f7 fe71 	bl	8016ffe <nk_free_page_element>
}
 801f31c:	bf00      	nop
 801f31e:	3710      	adds	r7, #16
 801f320:	46bd      	mov	sp, r7
 801f322:	bd80      	pop	{r7, pc}

0801f324 <nk_push_table>:
NK_LIB void
nk_push_table(struct nk_window *win, struct nk_table *tbl)
{
 801f324:	b480      	push	{r7}
 801f326:	b083      	sub	sp, #12
 801f328:	af00      	add	r7, sp, #0
 801f32a:	6078      	str	r0, [r7, #4]
 801f32c:	6039      	str	r1, [r7, #0]
    if (!win->tables) {
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f334:	2b00      	cmp	r3, #0
 801f336:	d113      	bne.n	801f360 <nk_push_table+0x3c>
        win->tables = tbl;
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	683a      	ldr	r2, [r7, #0]
 801f33c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        tbl->next = 0;
 801f340:	683b      	ldr	r3, [r7, #0]
 801f342:	2200      	movs	r2, #0
 801f344:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
        tbl->prev = 0;
 801f348:	683b      	ldr	r3, [r7, #0]
 801f34a:	2200      	movs	r2, #0
 801f34c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
        tbl->size = 0;
 801f350:	683b      	ldr	r3, [r7, #0]
 801f352:	2200      	movs	r2, #0
 801f354:	605a      	str	r2, [r3, #4]
        win->table_count = 1;
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	2201      	movs	r2, #1
 801f35a:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        return;
 801f35e:	e01d      	b.n	801f39c <nk_push_table+0x78>
    }
    win->tables->prev = tbl;
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f366:	683a      	ldr	r2, [r7, #0]
 801f368:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->next = win->tables;
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801f372:	683b      	ldr	r3, [r7, #0]
 801f374:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801f378:	683b      	ldr	r3, [r7, #0]
 801f37a:	2200      	movs	r2, #0
 801f37c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    tbl->size = 0;
 801f380:	683b      	ldr	r3, [r7, #0]
 801f382:	2200      	movs	r2, #0
 801f384:	605a      	str	r2, [r3, #4]
    win->tables = tbl;
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	683a      	ldr	r2, [r7, #0]
 801f38a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    win->table_count++;
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 801f394:	1c5a      	adds	r2, r3, #1
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
}
 801f39c:	370c      	adds	r7, #12
 801f39e:	46bd      	mov	sp, r7
 801f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3a4:	4770      	bx	lr

0801f3a6 <nk_remove_table>:
NK_LIB void
nk_remove_table(struct nk_window *win, struct nk_table *tbl)
{
 801f3a6:	b480      	push	{r7}
 801f3a8:	b083      	sub	sp, #12
 801f3aa:	af00      	add	r7, sp, #0
 801f3ac:	6078      	str	r0, [r7, #4]
 801f3ae:	6039      	str	r1, [r7, #0]
    if (win->tables == tbl)
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f3b6:	683a      	ldr	r2, [r7, #0]
 801f3b8:	429a      	cmp	r2, r3
 801f3ba:	d105      	bne.n	801f3c8 <nk_remove_table+0x22>
        win->tables = tbl->next;
 801f3bc:	683b      	ldr	r3, [r7, #0]
 801f3be:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    if (tbl->next)
 801f3c8:	683b      	ldr	r3, [r7, #0]
 801f3ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d007      	beq.n	801f3e2 <nk_remove_table+0x3c>
        tbl->next->prev = tbl->prev;
 801f3d2:	683b      	ldr	r3, [r7, #0]
 801f3d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801f3d8:	683a      	ldr	r2, [r7, #0]
 801f3da:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 801f3de:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    if (tbl->prev)
 801f3e2:	683b      	ldr	r3, [r7, #0]
 801f3e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d007      	beq.n	801f3fc <nk_remove_table+0x56>
        tbl->prev->next = tbl->next;
 801f3ec:	683b      	ldr	r3, [r7, #0]
 801f3ee:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801f3f2:	683a      	ldr	r2, [r7, #0]
 801f3f4:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 801f3f8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->next = 0;
 801f3fc:	683b      	ldr	r3, [r7, #0]
 801f3fe:	2200      	movs	r2, #0
 801f400:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    tbl->prev = 0;
 801f404:	683b      	ldr	r3, [r7, #0]
 801f406:	2200      	movs	r2, #0
 801f408:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 801f40c:	bf00      	nop
 801f40e:	370c      	adds	r7, #12
 801f410:	46bd      	mov	sp, r7
 801f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f416:	4770      	bx	lr

0801f418 <nk_add_value>:
NK_LIB nk_uint*
nk_add_value(struct nk_context *ctx, struct nk_window *win,
            nk_hash name, nk_uint value)
{
 801f418:	b580      	push	{r7, lr}
 801f41a:	b086      	sub	sp, #24
 801f41c:	af00      	add	r7, sp, #0
 801f41e:	60f8      	str	r0, [r7, #12]
 801f420:	60b9      	str	r1, [r7, #8]
 801f422:	607a      	str	r2, [r7, #4]
 801f424:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	2b00      	cmp	r3, #0
 801f42a:	d105      	bne.n	801f438 <nk_add_value+0x20>
 801f42c:	4b32      	ldr	r3, [pc, #200]	; (801f4f8 <nk_add_value+0xe0>)
 801f42e:	4a33      	ldr	r2, [pc, #204]	; (801f4fc <nk_add_value+0xe4>)
 801f430:	213b      	movs	r1, #59	; 0x3b
 801f432:	4833      	ldr	r0, [pc, #204]	; (801f500 <nk_add_value+0xe8>)
 801f434:	f005 fb5c 	bl	8024af0 <__assert_func>
    NK_ASSERT(win);
 801f438:	68bb      	ldr	r3, [r7, #8]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d105      	bne.n	801f44a <nk_add_value+0x32>
 801f43e:	4b31      	ldr	r3, [pc, #196]	; (801f504 <nk_add_value+0xec>)
 801f440:	4a2e      	ldr	r2, [pc, #184]	; (801f4fc <nk_add_value+0xe4>)
 801f442:	213c      	movs	r1, #60	; 0x3c
 801f444:	482e      	ldr	r0, [pc, #184]	; (801f500 <nk_add_value+0xe8>)
 801f446:	f005 fb53 	bl	8024af0 <__assert_func>
    if (!win || !ctx) return 0;
 801f44a:	68bb      	ldr	r3, [r7, #8]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d002      	beq.n	801f456 <nk_add_value+0x3e>
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d101      	bne.n	801f45a <nk_add_value+0x42>
 801f456:	2300      	movs	r3, #0
 801f458:	e04a      	b.n	801f4f0 <nk_add_value+0xd8>
    if (!win->tables || win->tables->size >= NK_VALUE_PAGE_CAPACITY) {
 801f45a:	68bb      	ldr	r3, [r7, #8]
 801f45c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f460:	2b00      	cmp	r3, #0
 801f462:	d005      	beq.n	801f470 <nk_add_value+0x58>
 801f464:	68bb      	ldr	r3, [r7, #8]
 801f466:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f46a:	685b      	ldr	r3, [r3, #4]
 801f46c:	2b32      	cmp	r3, #50	; 0x32
 801f46e:	d915      	bls.n	801f49c <nk_add_value+0x84>
        struct nk_table *tbl = nk_create_table(ctx);
 801f470:	68f8      	ldr	r0, [r7, #12]
 801f472:	f7ff ff2f 	bl	801f2d4 <nk_create_table>
 801f476:	6178      	str	r0, [r7, #20]
        NK_ASSERT(tbl);
 801f478:	697b      	ldr	r3, [r7, #20]
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d105      	bne.n	801f48a <nk_add_value+0x72>
 801f47e:	4b22      	ldr	r3, [pc, #136]	; (801f508 <nk_add_value+0xf0>)
 801f480:	4a1e      	ldr	r2, [pc, #120]	; (801f4fc <nk_add_value+0xe4>)
 801f482:	2140      	movs	r1, #64	; 0x40
 801f484:	481e      	ldr	r0, [pc, #120]	; (801f500 <nk_add_value+0xe8>)
 801f486:	f005 fb33 	bl	8024af0 <__assert_func>
        if (!tbl) return 0;
 801f48a:	697b      	ldr	r3, [r7, #20]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d101      	bne.n	801f494 <nk_add_value+0x7c>
 801f490:	2300      	movs	r3, #0
 801f492:	e02d      	b.n	801f4f0 <nk_add_value+0xd8>
        nk_push_table(win, tbl);
 801f494:	6979      	ldr	r1, [r7, #20]
 801f496:	68b8      	ldr	r0, [r7, #8]
 801f498:	f7ff ff44 	bl	801f324 <nk_push_table>
    }
    win->tables->seq = win->seq;
 801f49c:	68bb      	ldr	r3, [r7, #8]
 801f49e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f4a2:	68ba      	ldr	r2, [r7, #8]
 801f4a4:	6812      	ldr	r2, [r2, #0]
 801f4a6:	601a      	str	r2, [r3, #0]
    win->tables->keys[win->tables->size] = name;
 801f4a8:	68bb      	ldr	r3, [r7, #8]
 801f4aa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f4ae:	68ba      	ldr	r2, [r7, #8]
 801f4b0:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 801f4b4:	6852      	ldr	r2, [r2, #4]
 801f4b6:	3202      	adds	r2, #2
 801f4b8:	6879      	ldr	r1, [r7, #4]
 801f4ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    win->tables->values[win->tables->size] = value;
 801f4be:	68bb      	ldr	r3, [r7, #8]
 801f4c0:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801f4c4:	68bb      	ldr	r3, [r7, #8]
 801f4c6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f4ca:	685b      	ldr	r3, [r3, #4]
 801f4cc:	3334      	adds	r3, #52	; 0x34
 801f4ce:	009b      	lsls	r3, r3, #2
 801f4d0:	4413      	add	r3, r2
 801f4d2:	683a      	ldr	r2, [r7, #0]
 801f4d4:	605a      	str	r2, [r3, #4]
    return &win->tables->values[win->tables->size++];
 801f4d6:	68bb      	ldr	r3, [r7, #8]
 801f4d8:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 801f4dc:	68bb      	ldr	r3, [r7, #8]
 801f4de:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 801f4e2:	6853      	ldr	r3, [r2, #4]
 801f4e4:	1c58      	adds	r0, r3, #1
 801f4e6:	6050      	str	r0, [r2, #4]
 801f4e8:	3334      	adds	r3, #52	; 0x34
 801f4ea:	009b      	lsls	r3, r3, #2
 801f4ec:	440b      	add	r3, r1
 801f4ee:	3304      	adds	r3, #4
}
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	3718      	adds	r7, #24
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	bd80      	pop	{r7, pc}
 801f4f8:	08029240 	.word	0x08029240
 801f4fc:	0802ab60 	.word	0x0802ab60
 801f500:	08029244 	.word	0x08029244
 801f504:	08029260 	.word	0x08029260
 801f508:	08029264 	.word	0x08029264

0801f50c <nk_find_value>:
NK_LIB nk_uint*
nk_find_value(struct nk_window *win, nk_hash name)
{
 801f50c:	b480      	push	{r7}
 801f50e:	b087      	sub	sp, #28
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
 801f514:	6039      	str	r1, [r7, #0]
    struct nk_table *iter = win->tables;
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801f51c:	617b      	str	r3, [r7, #20]
    while (iter) {
 801f51e:	e027      	b.n	801f570 <nk_find_value+0x64>
        unsigned int i = 0;
 801f520:	2300      	movs	r3, #0
 801f522:	613b      	str	r3, [r7, #16]
        unsigned int size = iter->size;
 801f524:	697b      	ldr	r3, [r7, #20]
 801f526:	685b      	ldr	r3, [r3, #4]
 801f528:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < size; ++i) {
 801f52a:	2300      	movs	r3, #0
 801f52c:	613b      	str	r3, [r7, #16]
 801f52e:	e015      	b.n	801f55c <nk_find_value+0x50>
            if (iter->keys[i] == name) {
 801f530:	697b      	ldr	r3, [r7, #20]
 801f532:	693a      	ldr	r2, [r7, #16]
 801f534:	3202      	adds	r2, #2
 801f536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f53a:	683a      	ldr	r2, [r7, #0]
 801f53c:	429a      	cmp	r2, r3
 801f53e:	d10a      	bne.n	801f556 <nk_find_value+0x4a>
                iter->seq = win->seq;
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	681a      	ldr	r2, [r3, #0]
 801f544:	697b      	ldr	r3, [r7, #20]
 801f546:	601a      	str	r2, [r3, #0]
                return &iter->values[i];
 801f548:	693b      	ldr	r3, [r7, #16]
 801f54a:	3334      	adds	r3, #52	; 0x34
 801f54c:	009b      	lsls	r3, r3, #2
 801f54e:	697a      	ldr	r2, [r7, #20]
 801f550:	4413      	add	r3, r2
 801f552:	3304      	adds	r3, #4
 801f554:	e010      	b.n	801f578 <nk_find_value+0x6c>
        for (i = 0; i < size; ++i) {
 801f556:	693b      	ldr	r3, [r7, #16]
 801f558:	3301      	adds	r3, #1
 801f55a:	613b      	str	r3, [r7, #16]
 801f55c:	693a      	ldr	r2, [r7, #16]
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	429a      	cmp	r2, r3
 801f562:	d3e5      	bcc.n	801f530 <nk_find_value+0x24>
            }
        } size = NK_VALUE_PAGE_CAPACITY;
 801f564:	2333      	movs	r3, #51	; 0x33
 801f566:	60fb      	str	r3, [r7, #12]
        iter = iter->next;
 801f568:	697b      	ldr	r3, [r7, #20]
 801f56a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801f56e:	617b      	str	r3, [r7, #20]
    while (iter) {
 801f570:	697b      	ldr	r3, [r7, #20]
 801f572:	2b00      	cmp	r3, #0
 801f574:	d1d4      	bne.n	801f520 <nk_find_value+0x14>
    }
    return 0;
 801f576:	2300      	movs	r3, #0
}
 801f578:	4618      	mov	r0, r3
 801f57a:	371c      	adds	r7, #28
 801f57c:	46bd      	mov	sp, r7
 801f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f582:	4770      	bx	lr

0801f584 <nk_widget_text>:
 * ===============================================================*/
NK_LIB void
nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,
    const char *string, int len, const struct nk_text *t,
    nk_flags a, const struct nk_user_font *f)
{
 801f584:	b580      	push	{r7, lr}
 801f586:	b090      	sub	sp, #64	; 0x40
 801f588:	af02      	add	r7, sp, #8
 801f58a:	61f8      	str	r0, [r7, #28]
 801f58c:	eeb0 6a40 	vmov.f32	s12, s0
 801f590:	eef0 6a60 	vmov.f32	s13, s1
 801f594:	eeb0 7a41 	vmov.f32	s14, s2
 801f598:	eef0 7a61 	vmov.f32	s15, s3
 801f59c:	60b9      	str	r1, [r7, #8]
 801f59e:	607a      	str	r2, [r7, #4]
 801f5a0:	603b      	str	r3, [r7, #0]
 801f5a2:	ed87 6a03 	vstr	s12, [r7, #12]
 801f5a6:	edc7 6a04 	vstr	s13, [r7, #16]
 801f5aa:	ed87 7a05 	vstr	s14, [r7, #20]
 801f5ae:	edc7 7a06 	vstr	s15, [r7, #24]
    struct nk_rect label;
    float text_width;

    NK_ASSERT(o);
 801f5b2:	69fb      	ldr	r3, [r7, #28]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d105      	bne.n	801f5c4 <nk_widget_text+0x40>
 801f5b8:	4bb0      	ldr	r3, [pc, #704]	; (801f87c <nk_widget_text+0x2f8>)
 801f5ba:	4ab1      	ldr	r2, [pc, #708]	; (801f880 <nk_widget_text+0x2fc>)
 801f5bc:	2111      	movs	r1, #17
 801f5be:	48b1      	ldr	r0, [pc, #708]	; (801f884 <nk_widget_text+0x300>)
 801f5c0:	f005 fa96 	bl	8024af0 <__assert_func>
    NK_ASSERT(t);
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d105      	bne.n	801f5d6 <nk_widget_text+0x52>
 801f5ca:	4baf      	ldr	r3, [pc, #700]	; (801f888 <nk_widget_text+0x304>)
 801f5cc:	4aac      	ldr	r2, [pc, #688]	; (801f880 <nk_widget_text+0x2fc>)
 801f5ce:	2112      	movs	r1, #18
 801f5d0:	48ac      	ldr	r0, [pc, #688]	; (801f884 <nk_widget_text+0x300>)
 801f5d2:	f005 fa8d 	bl	8024af0 <__assert_func>
    if (!o || !t) return;
 801f5d6:	69fb      	ldr	r3, [r7, #28]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	f000 81f4 	beq.w	801f9c6 <nk_widget_text+0x442>
 801f5de:	683b      	ldr	r3, [r7, #0]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	f000 81f0 	beq.w	801f9c6 <nk_widget_text+0x442>

    b.h = NK_MAX(b.h, 2 * t->padding.y);
 801f5e6:	ed97 7a06 	vldr	s14, [r7, #24]
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	edd3 7a01 	vldr	s15, [r3, #4]
 801f5f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f5f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5fc:	d505      	bpl.n	801f60a <nk_widget_text+0x86>
 801f5fe:	683b      	ldr	r3, [r7, #0]
 801f600:	edd3 7a01 	vldr	s15, [r3, #4]
 801f604:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f608:	e001      	b.n	801f60e <nk_widget_text+0x8a>
 801f60a:	edd7 7a06 	vldr	s15, [r7, #24]
 801f60e:	edc7 7a06 	vstr	s15, [r7, #24]
    label.x = 0; label.w = 0;
 801f612:	f04f 0300 	mov.w	r3, #0
 801f616:	627b      	str	r3, [r7, #36]	; 0x24
 801f618:	f04f 0300 	mov.w	r3, #0
 801f61c:	62fb      	str	r3, [r7, #44]	; 0x2c
    label.y = b.y + t->padding.y;
 801f61e:	ed97 7a04 	vldr	s14, [r7, #16]
 801f622:	683b      	ldr	r3, [r7, #0]
 801f624:	edd3 7a01 	vldr	s15, [r3, #4]
 801f628:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f62c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    label.h = NK_MIN(f->height, b.h - 2 * t->padding.y);
 801f630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f632:	ed93 7a01 	vldr	s14, [r3, #4]
 801f636:	edd7 6a06 	vldr	s13, [r7, #24]
 801f63a:	683b      	ldr	r3, [r7, #0]
 801f63c:	edd3 7a01 	vldr	s15, [r3, #4]
 801f640:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f644:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f650:	d503      	bpl.n	801f65a <nk_widget_text+0xd6>
 801f652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f654:	edd3 7a01 	vldr	s15, [r3, #4]
 801f658:	e008      	b.n	801f66c <nk_widget_text+0xe8>
 801f65a:	ed97 7a06 	vldr	s14, [r7, #24]
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	edd3 7a01 	vldr	s15, [r3, #4]
 801f664:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f668:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f66c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    text_width = f->width(f->userdata, f->height, (const char*)string, len);
 801f670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f672:	689b      	ldr	r3, [r3, #8]
 801f674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f676:	edd2 7a01 	vldr	s15, [r2, #4]
 801f67a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f67c:	687a      	ldr	r2, [r7, #4]
 801f67e:	68b9      	ldr	r1, [r7, #8]
 801f680:	eeb0 0a67 	vmov.f32	s0, s15
 801f684:	6800      	ldr	r0, [r0, #0]
 801f686:	4798      	blx	r3
 801f688:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    text_width += (2.0f * t->padding.x);
 801f68c:	683b      	ldr	r3, [r7, #0]
 801f68e:	edd3 7a00 	vldr	s15, [r3]
 801f692:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f696:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801f69a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f69e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* align in x-axis */
    if (a & NK_TEXT_ALIGN_LEFT) {
 801f6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f6a4:	f003 0301 	and.w	r3, r3, #1
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d025      	beq.n	801f6f8 <nk_widget_text+0x174>
        label.x = b.x + t->padding.x;
 801f6ac:	ed97 7a03 	vldr	s14, [r7, #12]
 801f6b0:	683b      	ldr	r3, [r7, #0]
 801f6b2:	edd3 7a00 	vldr	s15, [r3]
 801f6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f6ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MAX(0, b.w - 2 * t->padding.x);
 801f6be:	ed97 7a05 	vldr	s14, [r7, #20]
 801f6c2:	683b      	ldr	r3, [r7, #0]
 801f6c4:	edd3 7a00 	vldr	s15, [r3]
 801f6c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f6cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f6d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6d8:	dd09      	ble.n	801f6ee <nk_widget_text+0x16a>
 801f6da:	ed97 7a05 	vldr	s14, [r7, #20]
 801f6de:	683b      	ldr	r3, [r7, #0]
 801f6e0:	edd3 7a00 	vldr	s15, [r3]
 801f6e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f6e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f6ec:	e001      	b.n	801f6f2 <nk_widget_text+0x16e>
 801f6ee:	eddf 7a67 	vldr	s15, [pc, #412]	; 801f88c <nk_widget_text+0x308>
 801f6f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801f6f6:	e0df      	b.n	801f8b8 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_CENTERED) {
 801f6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f6fa:	f003 0302 	and.w	r3, r3, #2
 801f6fe:	2b00      	cmp	r3, #0
 801f700:	f000 8086 	beq.w	801f810 <nk_widget_text+0x28c>
        label.w = NK_MAX(1, 2 * t->padding.x + (float)text_width);
 801f704:	683b      	ldr	r3, [r7, #0]
 801f706:	edd3 7a00 	vldr	s15, [r3]
 801f70a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801f70e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f712:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f722:	dd09      	ble.n	801f738 <nk_widget_text+0x1b4>
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	edd3 7a00 	vldr	s15, [r3]
 801f72a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801f72e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f732:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f736:	e001      	b.n	801f73c <nk_widget_text+0x1b8>
 801f738:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f73c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        label.x = (b.x + t->padding.x + ((b.w - 2 * t->padding.x) - label.w) / 2);
 801f740:	ed97 7a03 	vldr	s14, [r7, #12]
 801f744:	683b      	ldr	r3, [r7, #0]
 801f746:	edd3 7a00 	vldr	s15, [r3]
 801f74a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f74e:	edd7 6a05 	vldr	s13, [r7, #20]
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	edd3 7a00 	vldr	s15, [r3]
 801f758:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f75c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801f760:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f764:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801f768:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f76c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801f770:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f774:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.x = NK_MAX(b.x + t->padding.x, label.x);
 801f778:	ed97 7a03 	vldr	s14, [r7, #12]
 801f77c:	683b      	ldr	r3, [r7, #0]
 801f77e:	edd3 7a00 	vldr	s15, [r3]
 801f782:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f786:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f78a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f792:	d502      	bpl.n	801f79a <nk_widget_text+0x216>
 801f794:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f798:	e006      	b.n	801f7a8 <nk_widget_text+0x224>
 801f79a:	ed97 7a03 	vldr	s14, [r7, #12]
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	edd3 7a00 	vldr	s15, [r3]
 801f7a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f7a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = NK_MIN(b.x + b.w, label.x + label.w);
 801f7ac:	ed97 7a03 	vldr	s14, [r7, #12]
 801f7b0:	edd7 7a05 	vldr	s15, [r7, #20]
 801f7b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f7b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801f7bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f7c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7cc:	d506      	bpl.n	801f7dc <nk_widget_text+0x258>
 801f7ce:	ed97 7a03 	vldr	s14, [r7, #12]
 801f7d2:	edd7 7a05 	vldr	s15, [r7, #20]
 801f7d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f7da:	e005      	b.n	801f7e8 <nk_widget_text+0x264>
 801f7dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801f7e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f7e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f7e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if (label.w >= label.x) label.w -= label.x;
 801f7ec:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f7f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f7f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7fc:	db5c      	blt.n	801f8b8 <nk_widget_text+0x334>
 801f7fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f802:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f806:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f80a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801f80e:	e053      	b.n	801f8b8 <nk_widget_text+0x334>
    } else if (a & NK_TEXT_ALIGN_RIGHT) {
 801f810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f812:	f003 0304 	and.w	r3, r3, #4
 801f816:	2b00      	cmp	r3, #0
 801f818:	f000 80d7 	beq.w	801f9ca <nk_widget_text+0x446>
        label.x = NK_MAX(b.x + t->padding.x, (b.x + b.w) - (2 * t->padding.x + (float)text_width));
 801f81c:	ed97 7a03 	vldr	s14, [r7, #12]
 801f820:	683b      	ldr	r3, [r7, #0]
 801f822:	edd3 7a00 	vldr	s15, [r3]
 801f826:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f82a:	edd7 6a03 	vldr	s13, [r7, #12]
 801f82e:	edd7 7a05 	vldr	s15, [r7, #20]
 801f832:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801f836:	683b      	ldr	r3, [r7, #0]
 801f838:	edd3 7a00 	vldr	s15, [r3]
 801f83c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801f840:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f844:	ee76 7a27 	vadd.f32	s15, s12, s15
 801f848:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f84c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f854:	d51c      	bpl.n	801f890 <nk_widget_text+0x30c>
 801f856:	ed97 7a03 	vldr	s14, [r7, #12]
 801f85a:	edd7 7a05 	vldr	s15, [r7, #20]
 801f85e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f862:	683b      	ldr	r3, [r7, #0]
 801f864:	edd3 7a00 	vldr	s15, [r3]
 801f868:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801f86c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f874:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f878:	e011      	b.n	801f89e <nk_widget_text+0x31a>
 801f87a:	bf00      	nop
 801f87c:	08029268 	.word	0x08029268
 801f880:	0802ab70 	.word	0x0802ab70
 801f884:	0802926c 	.word	0x0802926c
 801f888:	08029288 	.word	0x08029288
 801f88c:	00000000 	.word	0x00000000
 801f890:	ed97 7a03 	vldr	s14, [r7, #12]
 801f894:	683b      	ldr	r3, [r7, #0]
 801f896:	edd3 7a00 	vldr	s15, [r3]
 801f89a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f89e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        label.w = (float)text_width + 2 * t->padding.x;
 801f8a2:	683b      	ldr	r3, [r7, #0]
 801f8a4:	edd3 7a00 	vldr	s15, [r3]
 801f8a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801f8ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f8b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f8b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    } else return;

    /* align in y-axis */
    if (a & NK_TEXT_ALIGN_MIDDLE) {
 801f8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f8ba:	f003 0310 	and.w	r3, r3, #16
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	d04f      	beq.n	801f962 <nk_widget_text+0x3de>
        label.y = b.y + b.h/2.0f - (float)f->height/2.0f;
 801f8c2:	ed97 7a04 	vldr	s14, [r7, #16]
 801f8c6:	edd7 6a06 	vldr	s13, [r7, #24]
 801f8ca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f8ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801f8d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8d8:	edd3 6a01 	vldr	s13, [r3, #4]
 801f8dc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f8e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801f8e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f8e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = NK_MAX(b.h/2.0f, b.h - (b.h/2.0f + f->height/2.0f));
 801f8ec:	edd7 7a06 	vldr	s15, [r7, #24]
 801f8f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f8f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f8f8:	edd7 6a06 	vldr	s13, [r7, #24]
 801f8fc:	edd7 7a06 	vldr	s15, [r7, #24]
 801f900:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801f904:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801f908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f90a:	edd3 5a01 	vldr	s11, [r3, #4]
 801f90e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801f912:	eec5 7a85 	vdiv.f32	s15, s11, s10
 801f916:	ee76 7a27 	vadd.f32	s15, s12, s15
 801f91a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801f91e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f926:	d513      	bpl.n	801f950 <nk_widget_text+0x3cc>
 801f928:	ed97 7a06 	vldr	s14, [r7, #24]
 801f92c:	edd7 7a06 	vldr	s15, [r7, #24]
 801f930:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801f934:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801f938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f93a:	ed93 6a01 	vldr	s12, [r3, #4]
 801f93e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801f942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f94a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f94e:	e005      	b.n	801f95c <nk_widget_text+0x3d8>
 801f950:	ed97 7a06 	vldr	s14, [r7, #24]
 801f954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801f95c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801f960:	e014      	b.n	801f98c <nk_widget_text+0x408>
    } else if (a & NK_TEXT_ALIGN_BOTTOM) {
 801f962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f964:	f003 0320 	and.w	r3, r3, #32
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d00f      	beq.n	801f98c <nk_widget_text+0x408>
        label.y = b.y + b.h - f->height;
 801f96c:	ed97 7a04 	vldr	s14, [r7, #16]
 801f970:	edd7 7a06 	vldr	s15, [r7, #24]
 801f974:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f97a:	edd3 7a01 	vldr	s15, [r3, #4]
 801f97e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f982:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        label.h = f->height;
 801f986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f988:	685b      	ldr	r3, [r3, #4]
 801f98a:	633b      	str	r3, [r7, #48]	; 0x30
    }
    nk_draw_text(o, label, (const char*)string, len, f, t->background, t->text);
 801f98c:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 801f990:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 801f994:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f998:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801f99c:	683b      	ldr	r3, [r7, #0]
 801f99e:	68db      	ldr	r3, [r3, #12]
 801f9a0:	9301      	str	r3, [sp, #4]
 801f9a2:	683b      	ldr	r3, [r7, #0]
 801f9a4:	689b      	ldr	r3, [r3, #8]
 801f9a6:	9300      	str	r3, [sp, #0]
 801f9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f9aa:	687a      	ldr	r2, [r7, #4]
 801f9ac:	68b9      	ldr	r1, [r7, #8]
 801f9ae:	eeb0 0a46 	vmov.f32	s0, s12
 801f9b2:	eef0 0a66 	vmov.f32	s1, s13
 801f9b6:	eeb0 1a47 	vmov.f32	s2, s14
 801f9ba:	eef0 1a67 	vmov.f32	s3, s15
 801f9be:	69f8      	ldr	r0, [r7, #28]
 801f9c0:	f7f3 f8f0 	bl	8012ba4 <nk_draw_text>
 801f9c4:	e002      	b.n	801f9cc <nk_widget_text+0x448>
    if (!o || !t) return;
 801f9c6:	bf00      	nop
 801f9c8:	e000      	b.n	801f9cc <nk_widget_text+0x448>
    } else return;
 801f9ca:	bf00      	nop
}
 801f9cc:	3738      	adds	r7, #56	; 0x38
 801f9ce:	46bd      	mov	sp, r7
 801f9d0:	bd80      	pop	{r7, pc}
 801f9d2:	bf00      	nop

0801f9d4 <nk_text_colored>:
    }
}
NK_API void
nk_text_colored(struct nk_context *ctx, const char *str, int len,
    nk_flags alignment, struct nk_color color)
{
 801f9d4:	b580      	push	{r7, lr}
 801f9d6:	b092      	sub	sp, #72	; 0x48
 801f9d8:	af02      	add	r7, sp, #8
 801f9da:	60f8      	str	r0, [r7, #12]
 801f9dc:	60b9      	str	r1, [r7, #8]
 801f9de:	607a      	str	r2, [r7, #4]
 801f9e0:	603b      	str	r3, [r7, #0]

    struct nk_vec2 item_padding;
    struct nk_rect bounds;
    struct nk_text text;

    NK_ASSERT(ctx);
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d105      	bne.n	801f9f4 <nk_text_colored+0x20>
 801f9e8:	4b3e      	ldr	r3, [pc, #248]	; (801fae4 <nk_text_colored+0x110>)
 801f9ea:	4a3f      	ldr	r2, [pc, #252]	; (801fae8 <nk_text_colored+0x114>)
 801f9ec:	2168      	movs	r1, #104	; 0x68
 801f9ee:	483f      	ldr	r0, [pc, #252]	; (801faec <nk_text_colored+0x118>)
 801f9f0:	f005 f87e 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 801f9f4:	68fb      	ldr	r3, [r7, #12]
 801f9f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801f9fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d105      	bne.n	801fa0e <nk_text_colored+0x3a>
 801fa02:	4b3b      	ldr	r3, [pc, #236]	; (801faf0 <nk_text_colored+0x11c>)
 801fa04:	4a38      	ldr	r2, [pc, #224]	; (801fae8 <nk_text_colored+0x114>)
 801fa06:	2169      	movs	r1, #105	; 0x69
 801fa08:	4838      	ldr	r0, [pc, #224]	; (801faec <nk_text_colored+0x118>)
 801fa0a:	f005 f871 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa14:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d105      	bne.n	801fa2c <nk_text_colored+0x58>
 801fa20:	4b34      	ldr	r3, [pc, #208]	; (801faf4 <nk_text_colored+0x120>)
 801fa22:	4a31      	ldr	r2, [pc, #196]	; (801fae8 <nk_text_colored+0x114>)
 801fa24:	216a      	movs	r1, #106	; 0x6a
 801fa26:	4831      	ldr	r0, [pc, #196]	; (801faec <nk_text_colored+0x118>)
 801fa28:	f005 f862 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d053      	beq.n	801fada <nk_text_colored+0x106>
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa38:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d04c      	beq.n	801fada <nk_text_colored+0x106>
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa46:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d043      	beq.n	801fada <nk_text_colored+0x106>

    win = ctx->current;
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801fa58:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801fa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    style = &ctx->style;
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801fa64:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_panel_alloc_space(&bounds, ctx);
 801fa66:	f107 0320 	add.w	r3, r7, #32
 801fa6a:	68f9      	ldr	r1, [r7, #12]
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	f7f6 fd89 	bl	8016584 <nk_panel_alloc_space>
    item_padding = style->text.padding;
 801fa72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fa74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fa78:	3230      	adds	r2, #48	; 0x30
 801fa7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fa7e:	e883 0003 	stmia.w	r3, {r0, r1}

    text.padding.x = item_padding.x;
 801fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa84:	613b      	str	r3, [r7, #16]
    text.padding.y = item_padding.y;
 801fa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa88:	617b      	str	r3, [r7, #20]
    text.background = style->window.background;
 801fa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801fa90:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 801fa94:	61bb      	str	r3, [r7, #24]
    text.text = color;
 801fa96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa98:	61fb      	str	r3, [r7, #28]
    nk_widget_text(&win->buffer, bounds, str, len, &text, alignment, style->font);
 801fa9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa9c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801faa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	f107 0210 	add.w	r2, r7, #16
 801faa8:	ed97 6a08 	vldr	s12, [r7, #32]
 801faac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801fab0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801fab4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801fab8:	9301      	str	r3, [sp, #4]
 801faba:	683b      	ldr	r3, [r7, #0]
 801fabc:	9300      	str	r3, [sp, #0]
 801fabe:	4613      	mov	r3, r2
 801fac0:	687a      	ldr	r2, [r7, #4]
 801fac2:	68b9      	ldr	r1, [r7, #8]
 801fac4:	eeb0 0a46 	vmov.f32	s0, s12
 801fac8:	eef0 0a66 	vmov.f32	s1, s13
 801facc:	eeb0 1a47 	vmov.f32	s2, s14
 801fad0:	eef0 1a67 	vmov.f32	s3, s15
 801fad4:	f7ff fd56 	bl	801f584 <nk_widget_text>
 801fad8:	e000      	b.n	801fadc <nk_text_colored+0x108>
    if (!ctx || !ctx->current || !ctx->current->layout) return;
 801fada:	bf00      	nop
}
 801fadc:	3740      	adds	r7, #64	; 0x40
 801fade:	46bd      	mov	sp, r7
 801fae0:	bd80      	pop	{r7, pc}
 801fae2:	bf00      	nop
 801fae4:	0802928c 	.word	0x0802928c
 801fae8:	0802ab80 	.word	0x0802ab80
 801faec:	0802926c 	.word	0x0802926c
 801faf0:	08029290 	.word	0x08029290
 801faf4:	080292a0 	.word	0x080292a0

0801faf8 <nk_text>:
    nk_labelf(ctx, NK_TEXT_LEFT, "%s: %s", prefix, hex);
}
#endif
NK_API void
nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)
{
 801faf8:	b580      	push	{r7, lr}
 801fafa:	b086      	sub	sp, #24
 801fafc:	af02      	add	r7, sp, #8
 801fafe:	60f8      	str	r0, [r7, #12]
 801fb00:	60b9      	str	r1, [r7, #8]
 801fb02:	607a      	str	r2, [r7, #4]
 801fb04:	603b      	str	r3, [r7, #0]
    NK_ASSERT(ctx);
 801fb06:	68fb      	ldr	r3, [r7, #12]
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	d106      	bne.n	801fb1a <nk_text+0x22>
 801fb0c:	4b0c      	ldr	r3, [pc, #48]	; (801fb40 <nk_text+0x48>)
 801fb0e:	4a0d      	ldr	r2, [pc, #52]	; (801fb44 <nk_text+0x4c>)
 801fb10:	f44f 7182 	mov.w	r1, #260	; 0x104
 801fb14:	480c      	ldr	r0, [pc, #48]	; (801fb48 <nk_text+0x50>)
 801fb16:	f004 ffeb 	bl	8024af0 <__assert_func>
    if (!ctx) return;
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d00a      	beq.n	801fb36 <nk_text+0x3e>
    nk_text_colored(ctx, str, len, alignment, ctx->style.text.color);
 801fb20:	68fb      	ldr	r3, [r7, #12]
 801fb22:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801fb26:	9300      	str	r3, [sp, #0]
 801fb28:	683b      	ldr	r3, [r7, #0]
 801fb2a:	687a      	ldr	r2, [r7, #4]
 801fb2c:	68b9      	ldr	r1, [r7, #8]
 801fb2e:	68f8      	ldr	r0, [r7, #12]
 801fb30:	f7ff ff50 	bl	801f9d4 <nk_text_colored>
 801fb34:	e000      	b.n	801fb38 <nk_text+0x40>
    if (!ctx) return;
 801fb36:	bf00      	nop
}
 801fb38:	3710      	adds	r7, #16
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	bd80      	pop	{r7, pc}
 801fb3e:	bf00      	nop
 801fb40:	0802928c 	.word	0x0802928c
 801fb44:	0802ab90 	.word	0x0802ab90
 801fb48:	0802926c 	.word	0x0802926c

0801fb4c <nk_label>:
    if (!ctx) return;
    nk_text_wrap_colored(ctx, str, len, ctx->style.text.color);
}
NK_API void
nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)
{
 801fb4c:	b580      	push	{r7, lr}
 801fb4e:	b084      	sub	sp, #16
 801fb50:	af00      	add	r7, sp, #0
 801fb52:	60f8      	str	r0, [r7, #12]
 801fb54:	60b9      	str	r1, [r7, #8]
 801fb56:	607a      	str	r2, [r7, #4]
    nk_text(ctx, str, nk_strlen(str), alignment);
 801fb58:	68b8      	ldr	r0, [r7, #8]
 801fb5a:	f002 fdbd 	bl	80226d8 <nk_strlen>
 801fb5e:	4602      	mov	r2, r0
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	68b9      	ldr	r1, [r7, #8]
 801fb64:	68f8      	ldr	r0, [r7, #12]
 801fb66:	f7ff ffc7 	bl	801faf8 <nk_text>
}
 801fb6a:	bf00      	nop
 801fb6c:	3710      	adds	r7, #16
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	bd80      	pop	{r7, pc}

0801fb72 <nk_textedit_get_width>:
#define NK_TEXT_HAS_SELECTION(s)   ((s)->select_start != (s)->select_end)

NK_INTERN float
nk_textedit_get_width(const struct nk_text_edit *edit, int line_start, int char_id,
    const struct nk_user_font *font)
{
 801fb72:	b580      	push	{r7, lr}
 801fb74:	b088      	sub	sp, #32
 801fb76:	af00      	add	r7, sp, #0
 801fb78:	60f8      	str	r0, [r7, #12]
 801fb7a:	60b9      	str	r1, [r7, #8]
 801fb7c:	607a      	str	r2, [r7, #4]
 801fb7e:	603b      	str	r3, [r7, #0]
    int len = 0;
 801fb80:	2300      	movs	r3, #0
 801fb82:	61bb      	str	r3, [r7, #24]
    nk_rune unicode = 0;
 801fb84:	2300      	movs	r3, #0
 801fb86:	617b      	str	r3, [r7, #20]
    const char *str = nk_str_at_const(&edit->string, line_start + char_id, &unicode, &len);
 801fb88:	68fb      	ldr	r3, [r7, #12]
 801fb8a:	f103 000c 	add.w	r0, r3, #12
 801fb8e:	68ba      	ldr	r2, [r7, #8]
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	18d1      	adds	r1, r2, r3
 801fb94:	f107 0318 	add.w	r3, r7, #24
 801fb98:	f107 0214 	add.w	r2, r7, #20
 801fb9c:	f7fd f9ba 	bl	801cf14 <nk_str_at_const>
 801fba0:	61f8      	str	r0, [r7, #28]
    return font->width(font->userdata, font->height, str, len);
 801fba2:	683b      	ldr	r3, [r7, #0]
 801fba4:	689b      	ldr	r3, [r3, #8]
 801fba6:	683a      	ldr	r2, [r7, #0]
 801fba8:	edd2 7a01 	vldr	s15, [r2, #4]
 801fbac:	69ba      	ldr	r2, [r7, #24]
 801fbae:	6838      	ldr	r0, [r7, #0]
 801fbb0:	69f9      	ldr	r1, [r7, #28]
 801fbb2:	eeb0 0a67 	vmov.f32	s0, s15
 801fbb6:	6800      	ldr	r0, [r0, #0]
 801fbb8:	4798      	blx	r3
 801fbba:	eef0 7a40 	vmov.f32	s15, s0
}
 801fbbe:	eeb0 0a67 	vmov.f32	s0, s15
 801fbc2:	3720      	adds	r7, #32
 801fbc4:	46bd      	mov	sp, r7
 801fbc6:	bd80      	pop	{r7, pc}

0801fbc8 <nk_textedit_layout_row>:
NK_INTERN void
nk_textedit_layout_row(struct nk_text_edit_row *r, struct nk_text_edit *edit,
    int line_start_id, float row_height, const struct nk_user_font *font)
{
 801fbc8:	b580      	push	{r7, lr}
 801fbca:	b094      	sub	sp, #80	; 0x50
 801fbcc:	af04      	add	r7, sp, #16
 801fbce:	6178      	str	r0, [r7, #20]
 801fbd0:	6139      	str	r1, [r7, #16]
 801fbd2:	60fa      	str	r2, [r7, #12]
 801fbd4:	ed87 0a02 	vstr	s0, [r7, #8]
 801fbd8:	607b      	str	r3, [r7, #4]
    int l;
    int glyphs = 0;
 801fbda:	2300      	movs	r3, #0
 801fbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    nk_rune unicode;
    const char *remaining;
    int len = nk_str_len_char(&edit->string);
 801fbde:	693b      	ldr	r3, [r7, #16]
 801fbe0:	330c      	adds	r3, #12
 801fbe2:	4618      	mov	r0, r3
 801fbe4:	f7fd fa7c 	bl	801d0e0 <nk_str_len_char>
 801fbe8:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char *end = nk_str_get_const(&edit->string) + len;
 801fbea:	693b      	ldr	r3, [r7, #16]
 801fbec:	330c      	adds	r3, #12
 801fbee:	4618      	mov	r0, r3
 801fbf0:	f7fd fa26 	bl	801d040 <nk_str_get_const>
 801fbf4:	4602      	mov	r2, r0
 801fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fbf8:	4413      	add	r3, r2
 801fbfa:	63bb      	str	r3, [r7, #56]	; 0x38
    const char *text = nk_str_at_const(&edit->string, line_start_id, &unicode, &l);
 801fbfc:	693b      	ldr	r3, [r7, #16]
 801fbfe:	f103 000c 	add.w	r0, r3, #12
 801fc02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801fc06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801fc0a:	68f9      	ldr	r1, [r7, #12]
 801fc0c:	f7fd f982 	bl	801cf14 <nk_str_at_const>
 801fc10:	6378      	str	r0, [r7, #52]	; 0x34
    const struct nk_vec2 size = nk_text_calculate_text_bounds(font,
 801fc12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fc16:	1ad2      	subs	r2, r2, r3
 801fc18:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801fc1c:	2301      	movs	r3, #1
 801fc1e:	9302      	str	r3, [sp, #8]
 801fc20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801fc24:	9301      	str	r3, [sp, #4]
 801fc26:	2300      	movs	r3, #0
 801fc28:	9300      	str	r3, [sp, #0]
 801fc2a:	460b      	mov	r3, r1
 801fc2c:	ed97 0a02 	vldr	s0, [r7, #8]
 801fc30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fc32:	6878      	ldr	r0, [r7, #4]
 801fc34:	f003 fb3a 	bl	80232ac <nk_text_calculate_text_bounds>
 801fc38:	eeb0 7a40 	vmov.f32	s14, s0
 801fc3c:	eef0 7a60 	vmov.f32	s15, s1
 801fc40:	ed87 7a07 	vstr	s14, [r7, #28]
 801fc44:	edc7 7a08 	vstr	s15, [r7, #32]
        text, (int)(end - text), row_height, &remaining, 0, &glyphs, NK_STOP_ON_NEW_LINE);

    r->x0 = 0.0f;
 801fc48:	697b      	ldr	r3, [r7, #20]
 801fc4a:	f04f 0200 	mov.w	r2, #0
 801fc4e:	601a      	str	r2, [r3, #0]
    r->x1 = size.x;
 801fc50:	69fa      	ldr	r2, [r7, #28]
 801fc52:	697b      	ldr	r3, [r7, #20]
 801fc54:	605a      	str	r2, [r3, #4]
    r->baseline_y_delta = size.y;
 801fc56:	6a3a      	ldr	r2, [r7, #32]
 801fc58:	697b      	ldr	r3, [r7, #20]
 801fc5a:	609a      	str	r2, [r3, #8]
    r->ymin = 0.0f;
 801fc5c:	697b      	ldr	r3, [r7, #20]
 801fc5e:	f04f 0200 	mov.w	r2, #0
 801fc62:	60da      	str	r2, [r3, #12]
    r->ymax = size.y;
 801fc64:	6a3a      	ldr	r2, [r7, #32]
 801fc66:	697b      	ldr	r3, [r7, #20]
 801fc68:	611a      	str	r2, [r3, #16]
    r->num_chars = glyphs;
 801fc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fc6c:	697b      	ldr	r3, [r7, #20]
 801fc6e:	615a      	str	r2, [r3, #20]
}
 801fc70:	bf00      	nop
 801fc72:	3740      	adds	r7, #64	; 0x40
 801fc74:	46bd      	mov	sp, r7
 801fc76:	bd80      	pop	{r7, pc}

0801fc78 <nk_textedit_locate_coord>:
NK_INTERN int
nk_textedit_locate_coord(struct nk_text_edit *edit, float x, float y,
    const struct nk_user_font *font, float row_height)
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b092      	sub	sp, #72	; 0x48
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	6178      	str	r0, [r7, #20]
 801fc80:	ed87 0a04 	vstr	s0, [r7, #16]
 801fc84:	edc7 0a03 	vstr	s1, [r7, #12]
 801fc88:	60b9      	str	r1, [r7, #8]
 801fc8a:	ed87 1a01 	vstr	s2, [r7, #4]
    struct nk_text_edit_row r;
    int n = edit->string.len;
 801fc8e:	697b      	ldr	r3, [r7, #20]
 801fc90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fc92:	63bb      	str	r3, [r7, #56]	; 0x38
    float base_y = 0, prev_x;
 801fc94:	f04f 0300 	mov.w	r3, #0
 801fc98:	647b      	str	r3, [r7, #68]	; 0x44
    int i=0, k;
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	63fb      	str	r3, [r7, #60]	; 0x3c

    r.x0 = r.x1 = 0;
 801fc9e:	f04f 0300 	mov.w	r3, #0
 801fca2:	61fb      	str	r3, [r7, #28]
 801fca4:	69fb      	ldr	r3, [r7, #28]
 801fca6:	61bb      	str	r3, [r7, #24]
    r.ymin = r.ymax = 0;
 801fca8:	f04f 0300 	mov.w	r3, #0
 801fcac:	62bb      	str	r3, [r7, #40]	; 0x28
 801fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcb0:	627b      	str	r3, [r7, #36]	; 0x24
    r.num_chars = 0;
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* search rows to find one that straddles 'y' */
    while (i < n) {
 801fcb6:	e038      	b.n	801fd2a <nk_textedit_locate_coord+0xb2>
        nk_textedit_layout_row(&r, edit, i, row_height, font);
 801fcb8:	f107 0018 	add.w	r0, r7, #24
 801fcbc:	68bb      	ldr	r3, [r7, #8]
 801fcbe:	ed97 0a01 	vldr	s0, [r7, #4]
 801fcc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fcc4:	6979      	ldr	r1, [r7, #20]
 801fcc6:	f7ff ff7f 	bl	801fbc8 <nk_textedit_layout_row>
        if (r.num_chars <= 0)
 801fcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	dc01      	bgt.n	801fcd4 <nk_textedit_locate_coord+0x5c>
            return n;
 801fcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fcd2:	e0a4      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>

        if (i==0 && y < base_y + r.ymin)
 801fcd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d10e      	bne.n	801fcf8 <nk_textedit_locate_coord+0x80>
 801fcda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801fcde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801fce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fce6:	ed97 7a03 	vldr	s14, [r7, #12]
 801fcea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcf2:	d501      	bpl.n	801fcf8 <nk_textedit_locate_coord+0x80>
            return 0;
 801fcf4:	2300      	movs	r3, #0
 801fcf6:	e092      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>

        if (y < base_y + r.ymax)
 801fcf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801fcfc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801fd00:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd04:	ed97 7a03 	vldr	s14, [r7, #12]
 801fd08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd10:	d410      	bmi.n	801fd34 <nk_textedit_locate_coord+0xbc>
            break;

        i += r.num_chars;
 801fd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd16:	4413      	add	r3, r2
 801fd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        base_y += r.baseline_y_delta;
 801fd1a:	edd7 7a08 	vldr	s15, [r7, #32]
 801fd1e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801fd22:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd26:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    while (i < n) {
 801fd2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd2e:	429a      	cmp	r2, r3
 801fd30:	dbc2      	blt.n	801fcb8 <nk_textedit_locate_coord+0x40>
 801fd32:	e000      	b.n	801fd36 <nk_textedit_locate_coord+0xbe>
            break;
 801fd34:	bf00      	nop
    }

    /* below all text, return 'after' last character */
    if (i >= n)
 801fd36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd3a:	429a      	cmp	r2, r3
 801fd3c:	db01      	blt.n	801fd42 <nk_textedit_locate_coord+0xca>
        return n;
 801fd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd40:	e06d      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>

    /* check if it's before the beginning of the line */
    if (x < r.x0)
 801fd42:	edd7 7a06 	vldr	s15, [r7, #24]
 801fd46:	ed97 7a04 	vldr	s14, [r7, #16]
 801fd4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd52:	d501      	bpl.n	801fd58 <nk_textedit_locate_coord+0xe0>
        return i;
 801fd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd56:	e062      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>

    /* check if it's before the end of the line */
    if (x < r.x1) {
 801fd58:	edd7 7a07 	vldr	s15, [r7, #28]
 801fd5c:	ed97 7a04 	vldr	s14, [r7, #16]
 801fd60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd68:	d544      	bpl.n	801fdf4 <nk_textedit_locate_coord+0x17c>
        /* search characters in row for one that straddles 'x' */
        k = i;
 801fd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd6c:	637b      	str	r3, [r7, #52]	; 0x34
        prev_x = r.x0;
 801fd6e:	69bb      	ldr	r3, [r7, #24]
 801fd70:	643b      	str	r3, [r7, #64]	; 0x40
        for (i=0; i < r.num_chars; ++i) {
 801fd72:	2300      	movs	r3, #0
 801fd74:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fd76:	e039      	b.n	801fdec <nk_textedit_locate_coord+0x174>
            float w = nk_textedit_get_width(edit, k, i, font);
 801fd78:	68bb      	ldr	r3, [r7, #8]
 801fd7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fd7e:	6978      	ldr	r0, [r7, #20]
 801fd80:	f7ff fef7 	bl	801fb72 <nk_textedit_get_width>
 801fd84:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
            if (x < prev_x+w) {
 801fd88:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801fd8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801fd90:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd94:	ed97 7a04 	vldr	s14, [r7, #16]
 801fd98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fda0:	d519      	bpl.n	801fdd6 <nk_textedit_locate_coord+0x15e>
                if (x < prev_x+w/2)
 801fda2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801fda6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801fdaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801fdae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801fdb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fdb6:	ed97 7a04 	vldr	s14, [r7, #16]
 801fdba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdc2:	d503      	bpl.n	801fdcc <nk_textedit_locate_coord+0x154>
                    return k+i;
 801fdc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdc8:	4413      	add	r3, r2
 801fdca:	e028      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>
                else return k+i+1;
 801fdcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdd0:	4413      	add	r3, r2
 801fdd2:	3301      	adds	r3, #1
 801fdd4:	e023      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>
            }
            prev_x += w;
 801fdd6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801fdda:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801fdde:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fde2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        for (i=0; i < r.num_chars; ++i) {
 801fde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fde8:	3301      	adds	r3, #1
 801fdea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fdf0:	429a      	cmp	r2, r3
 801fdf2:	dbc1      	blt.n	801fd78 <nk_textedit_locate_coord+0x100>
        /* shouldn't happen, but if it does, fall through to end-of-line case */
    }

    /* if the last character is a newline, return that.
     * otherwise return 'after' the last character */
    if (nk_str_rune_at(&edit->string, i+r.num_chars-1) == '\n')
 801fdf4:	697b      	ldr	r3, [r7, #20]
 801fdf6:	f103 000c 	add.w	r0, r3, #12
 801fdfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdfe:	4413      	add	r3, r2
 801fe00:	3b01      	subs	r3, #1
 801fe02:	4619      	mov	r1, r3
 801fe04:	f7fd f908 	bl	801d018 <nk_str_rune_at>
 801fe08:	4603      	mov	r3, r0
 801fe0a:	2b0a      	cmp	r3, #10
 801fe0c:	d104      	bne.n	801fe18 <nk_textedit_locate_coord+0x1a0>
        return i+r.num_chars-1;
 801fe0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe12:	4413      	add	r3, r2
 801fe14:	3b01      	subs	r3, #1
 801fe16:	e002      	b.n	801fe1e <nk_textedit_locate_coord+0x1a6>
    else return i+r.num_chars;
 801fe18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe1c:	4413      	add	r3, r2
}
 801fe1e:	4618      	mov	r0, r3
 801fe20:	3748      	adds	r7, #72	; 0x48
 801fe22:	46bd      	mov	sp, r7
 801fe24:	bd80      	pop	{r7, pc}

0801fe26 <nk_textedit_click>:
NK_LIB void
nk_textedit_click(struct nk_text_edit *state, float x, float y,
    const struct nk_user_font *font, float row_height)
{
 801fe26:	b580      	push	{r7, lr}
 801fe28:	b086      	sub	sp, #24
 801fe2a:	af00      	add	r7, sp, #0
 801fe2c:	6178      	str	r0, [r7, #20]
 801fe2e:	ed87 0a04 	vstr	s0, [r7, #16]
 801fe32:	edc7 0a03 	vstr	s1, [r7, #12]
 801fe36:	60b9      	str	r1, [r7, #8]
 801fe38:	ed87 1a01 	vstr	s2, [r7, #4]
    /* API click: on mouse down, move the cursor to the clicked location,
     * and reset the selection */
    state->cursor = nk_textedit_locate_coord(state, x, y, font, row_height);
 801fe3c:	ed97 1a01 	vldr	s2, [r7, #4]
 801fe40:	68b9      	ldr	r1, [r7, #8]
 801fe42:	edd7 0a03 	vldr	s1, [r7, #12]
 801fe46:	ed97 0a04 	vldr	s0, [r7, #16]
 801fe4a:	6978      	ldr	r0, [r7, #20]
 801fe4c:	f7ff ff14 	bl	801fc78 <nk_textedit_locate_coord>
 801fe50:	4602      	mov	r2, r0
 801fe52:	697b      	ldr	r3, [r7, #20]
 801fe54:	659a      	str	r2, [r3, #88]	; 0x58
    state->select_start = state->cursor;
 801fe56:	697b      	ldr	r3, [r7, #20]
 801fe58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fe5a:	697b      	ldr	r3, [r7, #20]
 801fe5c:	65da      	str	r2, [r3, #92]	; 0x5c
    state->select_end = state->cursor;
 801fe5e:	697b      	ldr	r3, [r7, #20]
 801fe60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fe62:	697b      	ldr	r3, [r7, #20]
 801fe64:	661a      	str	r2, [r3, #96]	; 0x60
    state->has_preferred_x = 0;
 801fe66:	697b      	ldr	r3, [r7, #20]
 801fe68:	2200      	movs	r2, #0
 801fe6a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 801fe6e:	bf00      	nop
 801fe70:	3718      	adds	r7, #24
 801fe72:	46bd      	mov	sp, r7
 801fe74:	bd80      	pop	{r7, pc}

0801fe76 <nk_textedit_drag>:
NK_LIB void
nk_textedit_drag(struct nk_text_edit *state, float x, float y,
    const struct nk_user_font *font, float row_height)
{
 801fe76:	b580      	push	{r7, lr}
 801fe78:	b088      	sub	sp, #32
 801fe7a:	af00      	add	r7, sp, #0
 801fe7c:	6178      	str	r0, [r7, #20]
 801fe7e:	ed87 0a04 	vstr	s0, [r7, #16]
 801fe82:	edc7 0a03 	vstr	s1, [r7, #12]
 801fe86:	60b9      	str	r1, [r7, #8]
 801fe88:	ed87 1a01 	vstr	s2, [r7, #4]
    /* API drag: on mouse drag, move the cursor and selection endpoint
     * to the clicked location */
    int p = nk_textedit_locate_coord(state, x, y, font, row_height);
 801fe8c:	ed97 1a01 	vldr	s2, [r7, #4]
 801fe90:	68b9      	ldr	r1, [r7, #8]
 801fe92:	edd7 0a03 	vldr	s1, [r7, #12]
 801fe96:	ed97 0a04 	vldr	s0, [r7, #16]
 801fe9a:	6978      	ldr	r0, [r7, #20]
 801fe9c:	f7ff feec 	bl	801fc78 <nk_textedit_locate_coord>
 801fea0:	61f8      	str	r0, [r7, #28]
    if (state->select_start == state->select_end)
 801fea2:	697b      	ldr	r3, [r7, #20]
 801fea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fea6:	697b      	ldr	r3, [r7, #20]
 801fea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801feaa:	429a      	cmp	r2, r3
 801feac:	d103      	bne.n	801feb6 <nk_textedit_drag+0x40>
        state->select_start = state->cursor;
 801feae:	697b      	ldr	r3, [r7, #20]
 801feb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801feb2:	697b      	ldr	r3, [r7, #20]
 801feb4:	65da      	str	r2, [r3, #92]	; 0x5c
    state->cursor = state->select_end = p;
 801feb6:	697b      	ldr	r3, [r7, #20]
 801feb8:	69fa      	ldr	r2, [r7, #28]
 801feba:	661a      	str	r2, [r3, #96]	; 0x60
 801febc:	697b      	ldr	r3, [r7, #20]
 801febe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fec0:	697b      	ldr	r3, [r7, #20]
 801fec2:	659a      	str	r2, [r3, #88]	; 0x58
}
 801fec4:	bf00      	nop
 801fec6:	3720      	adds	r7, #32
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}

0801fecc <nk_textedit_find_charpos>:
NK_INTERN void
nk_textedit_find_charpos(struct nk_text_find *find, struct nk_text_edit *state,
    int n, int single_line, const struct nk_user_font *font, float row_height)
{
 801fecc:	b580      	push	{r7, lr}
 801fece:	b090      	sub	sp, #64	; 0x40
 801fed0:	af00      	add	r7, sp, #0
 801fed2:	6178      	str	r0, [r7, #20]
 801fed4:	6139      	str	r1, [r7, #16]
 801fed6:	60fa      	str	r2, [r7, #12]
 801fed8:	60bb      	str	r3, [r7, #8]
 801feda:	ed87 0a01 	vstr	s0, [r7, #4]
    /* find the x/y location of a character, and remember info about the previous
     * row in case we get a move-up event (for page up, we'll have to rescan) */
    struct nk_text_edit_row r;
    int prev_start = 0;
 801fede:	2300      	movs	r3, #0
 801fee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    int z = state->string.len;
 801fee2:	693b      	ldr	r3, [r7, #16]
 801fee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fee6:	637b      	str	r3, [r7, #52]	; 0x34
    int i=0, first;
 801fee8:	2300      	movs	r3, #0
 801feea:	63bb      	str	r3, [r7, #56]	; 0x38

    nk_zero_struct(r);
 801feec:	f107 0318 	add.w	r3, r7, #24
 801fef0:	2118      	movs	r1, #24
 801fef2:	4618      	mov	r0, r3
 801fef4:	f002 fbd2 	bl	802269c <nk_zero>
    if (n == z) {
 801fef8:	68fa      	ldr	r2, [r7, #12]
 801fefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fefc:	429a      	cmp	r2, r3
 801fefe:	d13e      	bne.n	801ff7e <nk_textedit_find_charpos+0xb2>
        /* if it's at the end, then find the last line -- simpler than trying to
        explicitly handle this case in the regular code */
        nk_textedit_layout_row(&r, state, 0, row_height, font);
 801ff00:	f107 0018 	add.w	r0, r7, #24
 801ff04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ff06:	ed97 0a01 	vldr	s0, [r7, #4]
 801ff0a:	2200      	movs	r2, #0
 801ff0c:	6939      	ldr	r1, [r7, #16]
 801ff0e:	f7ff fe5b 	bl	801fbc8 <nk_textedit_layout_row>
        if (single_line) {
 801ff12:	68bb      	ldr	r3, [r7, #8]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d015      	beq.n	801ff44 <nk_textedit_find_charpos+0x78>
            find->first_char = 0;
 801ff18:	697b      	ldr	r3, [r7, #20]
 801ff1a:	2200      	movs	r2, #0
 801ff1c:	60da      	str	r2, [r3, #12]
            find->length = z;
 801ff1e:	697b      	ldr	r3, [r7, #20]
 801ff20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ff22:	611a      	str	r2, [r3, #16]
 801ff24:	e018      	b.n	801ff58 <nk_textedit_find_charpos+0x8c>
        } else {
            while (i < z) {
                prev_start = i;
 801ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff28:	63fb      	str	r3, [r7, #60]	; 0x3c
                i += r.num_chars;
 801ff2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff2e:	4413      	add	r3, r2
 801ff30:	63bb      	str	r3, [r7, #56]	; 0x38
                nk_textedit_layout_row(&r, state, i, row_height, font);
 801ff32:	f107 0018 	add.w	r0, r7, #24
 801ff36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ff38:	ed97 0a01 	vldr	s0, [r7, #4]
 801ff3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff3e:	6939      	ldr	r1, [r7, #16]
 801ff40:	f7ff fe42 	bl	801fbc8 <nk_textedit_layout_row>
            while (i < z) {
 801ff44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff48:	429a      	cmp	r2, r3
 801ff4a:	dbec      	blt.n	801ff26 <nk_textedit_find_charpos+0x5a>
            }

            find->first_char = i;
 801ff4c:	697b      	ldr	r3, [r7, #20]
 801ff4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff50:	60da      	str	r2, [r3, #12]
            find->length = r.num_chars;
 801ff52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff54:	697b      	ldr	r3, [r7, #20]
 801ff56:	611a      	str	r2, [r3, #16]
        }
        find->x = r.x1;
 801ff58:	69fa      	ldr	r2, [r7, #28]
 801ff5a:	697b      	ldr	r3, [r7, #20]
 801ff5c:	601a      	str	r2, [r3, #0]
        find->y = r.ymin;
 801ff5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff60:	697b      	ldr	r3, [r7, #20]
 801ff62:	605a      	str	r2, [r3, #4]
        find->height = r.ymax - r.ymin;
 801ff64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ff68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ff6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ff70:	697b      	ldr	r3, [r7, #20]
 801ff72:	edc3 7a02 	vstr	s15, [r3, #8]
        find->prev_first = prev_start;
 801ff76:	697b      	ldr	r3, [r7, #20]
 801ff78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ff7a:	615a      	str	r2, [r3, #20]
 801ff7c:	e057      	b.n	802002e <nk_textedit_find_charpos+0x162>
        return;
    }

    /* search rows to find the one that straddles character n */
    find->y = 0;
 801ff7e:	697b      	ldr	r3, [r7, #20]
 801ff80:	f04f 0200 	mov.w	r2, #0
 801ff84:	605a      	str	r2, [r3, #4]

    for(;;) {
        nk_textedit_layout_row(&r, state, i, row_height, font);
 801ff86:	f107 0018 	add.w	r0, r7, #24
 801ff8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ff8c:	ed97 0a01 	vldr	s0, [r7, #4]
 801ff90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ff92:	6939      	ldr	r1, [r7, #16]
 801ff94:	f7ff fe18 	bl	801fbc8 <nk_textedit_layout_row>
        if (n < i + r.num_chars) break;
 801ff98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ff9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff9c:	4413      	add	r3, r2
 801ff9e:	68fa      	ldr	r2, [r7, #12]
 801ffa0:	429a      	cmp	r2, r3
 801ffa2:	db10      	blt.n	801ffc6 <nk_textedit_find_charpos+0xfa>
        prev_start = i;
 801ffa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ffa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        i += r.num_chars;
 801ffa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ffac:	4413      	add	r3, r2
 801ffae:	63bb      	str	r3, [r7, #56]	; 0x38
        find->y += r.baseline_y_delta;
 801ffb0:	697b      	ldr	r3, [r7, #20]
 801ffb2:	ed93 7a01 	vldr	s14, [r3, #4]
 801ffb6:	edd7 7a08 	vldr	s15, [r7, #32]
 801ffba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ffbe:	697b      	ldr	r3, [r7, #20]
 801ffc0:	edc3 7a01 	vstr	s15, [r3, #4]
        nk_textedit_layout_row(&r, state, i, row_height, font);
 801ffc4:	e7df      	b.n	801ff86 <nk_textedit_find_charpos+0xba>
        if (n < i + r.num_chars) break;
 801ffc6:	bf00      	nop
    }

    find->first_char = first = i;
 801ffc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ffca:	633b      	str	r3, [r7, #48]	; 0x30
 801ffcc:	697b      	ldr	r3, [r7, #20]
 801ffce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ffd0:	60da      	str	r2, [r3, #12]
    find->length = r.num_chars;
 801ffd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ffd4:	697b      	ldr	r3, [r7, #20]
 801ffd6:	611a      	str	r2, [r3, #16]
    find->height = r.ymax - r.ymin;
 801ffd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ffdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ffe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ffe4:	697b      	ldr	r3, [r7, #20]
 801ffe6:	edc3 7a02 	vstr	s15, [r3, #8]
    find->prev_first = prev_start;
 801ffea:	697b      	ldr	r3, [r7, #20]
 801ffec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ffee:	615a      	str	r2, [r3, #20]

    /* now scan to find xpos */
    find->x = r.x0;
 801fff0:	69ba      	ldr	r2, [r7, #24]
 801fff2:	697b      	ldr	r3, [r7, #20]
 801fff4:	601a      	str	r2, [r3, #0]
    for (i=0; first+i < n; ++i)
 801fff6:	2300      	movs	r3, #0
 801fff8:	63bb      	str	r3, [r7, #56]	; 0x38
 801fffa:	e012      	b.n	8020022 <nk_textedit_find_charpos+0x156>
        find->x += nk_textedit_get_width(state, first, i, font);
 801fffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020000:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020002:	6938      	ldr	r0, [r7, #16]
 8020004:	f7ff fdb5 	bl	801fb72 <nk_textedit_get_width>
 8020008:	eeb0 7a40 	vmov.f32	s14, s0
 802000c:	697b      	ldr	r3, [r7, #20]
 802000e:	edd3 7a00 	vldr	s15, [r3]
 8020012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020016:	697b      	ldr	r3, [r7, #20]
 8020018:	edc3 7a00 	vstr	s15, [r3]
    for (i=0; first+i < n; ++i)
 802001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802001e:	3301      	adds	r3, #1
 8020020:	63bb      	str	r3, [r7, #56]	; 0x38
 8020022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020026:	4413      	add	r3, r2
 8020028:	68fa      	ldr	r2, [r7, #12]
 802002a:	429a      	cmp	r2, r3
 802002c:	dce6      	bgt.n	801fffc <nk_textedit_find_charpos+0x130>
}
 802002e:	3740      	adds	r7, #64	; 0x40
 8020030:	46bd      	mov	sp, r7
 8020032:	bd80      	pop	{r7, pc}

08020034 <nk_textedit_clamp>:
NK_INTERN void
nk_textedit_clamp(struct nk_text_edit *state)
{
 8020034:	b480      	push	{r7}
 8020036:	b085      	sub	sp, #20
 8020038:	af00      	add	r7, sp, #0
 802003a:	6078      	str	r0, [r7, #4]
    /* make the selection/cursor state valid if client altered the string */
    int n = state->string.len;
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020040:	60fb      	str	r3, [r7, #12]
    if (NK_TEXT_HAS_SELECTION(state)) {
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802004a:	429a      	cmp	r2, r3
 802004c:	d019      	beq.n	8020082 <nk_textedit_clamp+0x4e>
        if (state->select_start > n) state->select_start = n;
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020052:	68fa      	ldr	r2, [r7, #12]
 8020054:	429a      	cmp	r2, r3
 8020056:	da02      	bge.n	802005e <nk_textedit_clamp+0x2a>
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	68fa      	ldr	r2, [r7, #12]
 802005c:	65da      	str	r2, [r3, #92]	; 0x5c
        if (state->select_end   > n) state->select_end = n;
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020062:	68fa      	ldr	r2, [r7, #12]
 8020064:	429a      	cmp	r2, r3
 8020066:	da02      	bge.n	802006e <nk_textedit_clamp+0x3a>
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	68fa      	ldr	r2, [r7, #12]
 802006c:	661a      	str	r2, [r3, #96]	; 0x60
        /* if clamping forced them to be equal, move the cursor to match */
        if (state->select_start == state->select_end)
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020076:	429a      	cmp	r2, r3
 8020078:	d103      	bne.n	8020082 <nk_textedit_clamp+0x4e>
            state->cursor = state->select_start;
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (state->cursor > n) state->cursor = n;
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020086:	68fa      	ldr	r2, [r7, #12]
 8020088:	429a      	cmp	r2, r3
 802008a:	da02      	bge.n	8020092 <nk_textedit_clamp+0x5e>
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	68fa      	ldr	r2, [r7, #12]
 8020090:	659a      	str	r2, [r3, #88]	; 0x58
}
 8020092:	bf00      	nop
 8020094:	3714      	adds	r7, #20
 8020096:	46bd      	mov	sp, r7
 8020098:	f85d 7b04 	ldr.w	r7, [sp], #4
 802009c:	4770      	bx	lr

0802009e <nk_textedit_delete>:
NK_API void
nk_textedit_delete(struct nk_text_edit *state, int where, int len)
{
 802009e:	b580      	push	{r7, lr}
 80200a0:	b084      	sub	sp, #16
 80200a2:	af00      	add	r7, sp, #0
 80200a4:	60f8      	str	r0, [r7, #12]
 80200a6:	60b9      	str	r1, [r7, #8]
 80200a8:	607a      	str	r2, [r7, #4]
    /* delete characters while updating undo */
    nk_textedit_makeundo_delete(state, where, len);
 80200aa:	687a      	ldr	r2, [r7, #4]
 80200ac:	68b9      	ldr	r1, [r7, #8]
 80200ae:	68f8      	ldr	r0, [r7, #12]
 80200b0:	f001 faa5 	bl	80215fe <nk_textedit_makeundo_delete>
    nk_str_delete_runes(&state->string, where, len);
 80200b4:	68fb      	ldr	r3, [r7, #12]
 80200b6:	330c      	adds	r3, #12
 80200b8:	687a      	ldr	r2, [r7, #4]
 80200ba:	68b9      	ldr	r1, [r7, #8]
 80200bc:	4618      	mov	r0, r3
 80200be:	f7fc fe25 	bl	801cd0c <nk_str_delete_runes>
    state->has_preferred_x = 0;
 80200c2:	68fb      	ldr	r3, [r7, #12]
 80200c4:	2200      	movs	r2, #0
 80200c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 80200ca:	bf00      	nop
 80200cc:	3710      	adds	r7, #16
 80200ce:	46bd      	mov	sp, r7
 80200d0:	bd80      	pop	{r7, pc}

080200d2 <nk_textedit_delete_selection>:
NK_API void
nk_textedit_delete_selection(struct nk_text_edit *state)
{
 80200d2:	b580      	push	{r7, lr}
 80200d4:	b082      	sub	sp, #8
 80200d6:	af00      	add	r7, sp, #0
 80200d8:	6078      	str	r0, [r7, #4]
    /* delete the section */
    nk_textedit_clamp(state);
 80200da:	6878      	ldr	r0, [r7, #4]
 80200dc:	f7ff ffaa 	bl	8020034 <nk_textedit_clamp>
    if (NK_TEXT_HAS_SELECTION(state)) {
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80200e8:	429a      	cmp	r2, r3
 80200ea:	d030      	beq.n	802014e <nk_textedit_delete_selection+0x7c>
        if (state->select_start < state->select_end) {
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80200f4:	429a      	cmp	r2, r3
 80200f6:	da13      	bge.n	8020120 <nk_textedit_delete_selection+0x4e>
            nk_textedit_delete(state, state->select_start,
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
                state->select_end - state->select_start);
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            nk_textedit_delete(state, state->select_start,
 8020104:	1ad3      	subs	r3, r2, r3
 8020106:	461a      	mov	r2, r3
 8020108:	6878      	ldr	r0, [r7, #4]
 802010a:	f7ff ffc8 	bl	802009e <nk_textedit_delete>
            state->select_end = state->cursor = state->select_start;
 802010e:	687b      	ldr	r3, [r7, #4]
 8020110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	659a      	str	r2, [r3, #88]	; 0x58
 8020116:	687b      	ldr	r3, [r7, #4]
 8020118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	661a      	str	r2, [r3, #96]	; 0x60
 802011e:	e012      	b.n	8020146 <nk_textedit_delete_selection+0x74>
        } else {
            nk_textedit_delete(state, state->select_end,
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	6e19      	ldr	r1, [r3, #96]	; 0x60
                state->select_start - state->select_end);
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            nk_textedit_delete(state, state->select_end,
 802012c:	1ad3      	subs	r3, r2, r3
 802012e:	461a      	mov	r2, r3
 8020130:	6878      	ldr	r0, [r7, #4]
 8020132:	f7ff ffb4 	bl	802009e <nk_textedit_delete>
            state->select_start = state->cursor = state->select_end;
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	659a      	str	r2, [r3, #88]	; 0x58
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        state->has_preferred_x = 0;
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	2200      	movs	r2, #0
 802014a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    }
}
 802014e:	bf00      	nop
 8020150:	3708      	adds	r7, #8
 8020152:	46bd      	mov	sp, r7
 8020154:	bd80      	pop	{r7, pc}

08020156 <nk_textedit_sortselection>:
NK_INTERN void
nk_textedit_sortselection(struct nk_text_edit *state)
{
 8020156:	b480      	push	{r7}
 8020158:	b085      	sub	sp, #20
 802015a:	af00      	add	r7, sp, #0
 802015c:	6078      	str	r0, [r7, #4]
    /* canonicalize the selection so start <= end */
    if (state->select_end < state->select_start) {
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020166:	429a      	cmp	r2, r3
 8020168:	da09      	bge.n	802017e <nk_textedit_sortselection+0x28>
        int temp = state->select_end;
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802016e:	60fb      	str	r3, [r7, #12]
        state->select_end = state->select_start;
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	661a      	str	r2, [r3, #96]	; 0x60
        state->select_start = temp;
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	68fa      	ldr	r2, [r7, #12]
 802017c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
}
 802017e:	bf00      	nop
 8020180:	3714      	adds	r7, #20
 8020182:	46bd      	mov	sp, r7
 8020184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020188:	4770      	bx	lr

0802018a <nk_textedit_move_to_first>:
NK_INTERN void
nk_textedit_move_to_first(struct nk_text_edit *state)
{
 802018a:	b580      	push	{r7, lr}
 802018c:	b082      	sub	sp, #8
 802018e:	af00      	add	r7, sp, #0
 8020190:	6078      	str	r0, [r7, #4]
    /* move cursor to first character of selection */
    if (NK_TEXT_HAS_SELECTION(state)) {
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802019a:	429a      	cmp	r2, r3
 802019c:	d00e      	beq.n	80201bc <nk_textedit_move_to_first+0x32>
        nk_textedit_sortselection(state);
 802019e:	6878      	ldr	r0, [r7, #4]
 80201a0:	f7ff ffd9 	bl	8020156 <nk_textedit_sortselection>
        state->cursor = state->select_start;
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	659a      	str	r2, [r3, #88]	; 0x58
        state->select_end = state->select_start;
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	661a      	str	r2, [r3, #96]	; 0x60
        state->has_preferred_x = 0;
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	2200      	movs	r2, #0
 80201b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    }
}
 80201bc:	bf00      	nop
 80201be:	3708      	adds	r7, #8
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}

080201c4 <nk_textedit_move_to_last>:
NK_INTERN void
nk_textedit_move_to_last(struct nk_text_edit *state)
{
 80201c4:	b580      	push	{r7, lr}
 80201c6:	b082      	sub	sp, #8
 80201c8:	af00      	add	r7, sp, #0
 80201ca:	6078      	str	r0, [r7, #4]
    /* move cursor to last character of selection */
    if (NK_TEXT_HAS_SELECTION(state)) {
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80201d4:	429a      	cmp	r2, r3
 80201d6:	d011      	beq.n	80201fc <nk_textedit_move_to_last+0x38>
        nk_textedit_sortselection(state);
 80201d8:	6878      	ldr	r0, [r7, #4]
 80201da:	f7ff ffbc 	bl	8020156 <nk_textedit_sortselection>
        nk_textedit_clamp(state);
 80201de:	6878      	ldr	r0, [r7, #4]
 80201e0:	f7ff ff28 	bl	8020034 <nk_textedit_clamp>
        state->cursor = state->select_end;
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	659a      	str	r2, [r3, #88]	; 0x58
        state->select_start = state->select_end;
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	65da      	str	r2, [r3, #92]	; 0x5c
        state->has_preferred_x = 0;
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	2200      	movs	r2, #0
 80201f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    }
}
 80201fc:	bf00      	nop
 80201fe:	3708      	adds	r7, #8
 8020200:	46bd      	mov	sp, r7
 8020202:	bd80      	pop	{r7, pc}

08020204 <nk_is_word_boundary>:
NK_INTERN int
nk_is_word_boundary( struct nk_text_edit *state, int idx)
{
 8020204:	b580      	push	{r7, lr}
 8020206:	b084      	sub	sp, #16
 8020208:	af00      	add	r7, sp, #0
 802020a:	6078      	str	r0, [r7, #4]
 802020c:	6039      	str	r1, [r7, #0]
    int len;
    nk_rune c;
    if (idx <= 0) return 1;
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	2b00      	cmp	r3, #0
 8020212:	dc01      	bgt.n	8020218 <nk_is_word_boundary+0x14>
 8020214:	2301      	movs	r3, #1
 8020216:	e036      	b.n	8020286 <nk_is_word_boundary+0x82>
    if (!nk_str_at_rune(&state->string, idx, &c, &len)) return 1;
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	f103 000c 	add.w	r0, r3, #12
 802021e:	f107 030c 	add.w	r3, r7, #12
 8020222:	f107 0208 	add.w	r2, r7, #8
 8020226:	6839      	ldr	r1, [r7, #0]
 8020228:	f7fc fdf2 	bl	801ce10 <nk_str_at_rune>
 802022c:	4603      	mov	r3, r0
 802022e:	2b00      	cmp	r3, #0
 8020230:	d101      	bne.n	8020236 <nk_is_word_boundary+0x32>
 8020232:	2301      	movs	r3, #1
 8020234:	e027      	b.n	8020286 <nk_is_word_boundary+0x82>
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 8020236:	68bb      	ldr	r3, [r7, #8]
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 8020238:	2b20      	cmp	r3, #32
 802023a:	d021      	beq.n	8020280 <nk_is_word_boundary+0x7c>
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 802023c:	68bb      	ldr	r3, [r7, #8]
 802023e:	2b09      	cmp	r3, #9
 8020240:	d01e      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 8020242:	68bb      	ldr	r3, [r7, #8]
 8020244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020248:	d01a      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 802024a:	68bb      	ldr	r3, [r7, #8]
 802024c:	2b2c      	cmp	r3, #44	; 0x2c
 802024e:	d017      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 8020250:	68bb      	ldr	r3, [r7, #8]
 8020252:	2b3b      	cmp	r3, #59	; 0x3b
 8020254:	d014      	beq.n	8020280 <nk_is_word_boundary+0x7c>
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 8020256:	68bb      	ldr	r3, [r7, #8]
    return (c == ' ' || c == '\t' ||c == 0x3000 || c == ',' || c == ';' ||
 8020258:	2b28      	cmp	r3, #40	; 0x28
 802025a:	d011      	beq.n	8020280 <nk_is_word_boundary+0x7c>
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 802025c:	68bb      	ldr	r3, [r7, #8]
 802025e:	2b29      	cmp	r3, #41	; 0x29
 8020260:	d00e      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 8020262:	68bb      	ldr	r3, [r7, #8]
 8020264:	2b7b      	cmp	r3, #123	; 0x7b
 8020266:	d00b      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 8020268:	68bb      	ldr	r3, [r7, #8]
 802026a:	2b7d      	cmp	r3, #125	; 0x7d
 802026c:	d008      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 802026e:	68bb      	ldr	r3, [r7, #8]
 8020270:	2b5b      	cmp	r3, #91	; 0x5b
 8020272:	d005      	beq.n	8020280 <nk_is_word_boundary+0x7c>
 8020274:	68bb      	ldr	r3, [r7, #8]
 8020276:	2b5d      	cmp	r3, #93	; 0x5d
 8020278:	d002      	beq.n	8020280 <nk_is_word_boundary+0x7c>
            c == '|');
 802027a:	68bb      	ldr	r3, [r7, #8]
            c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' ||
 802027c:	2b7c      	cmp	r3, #124	; 0x7c
 802027e:	d101      	bne.n	8020284 <nk_is_word_boundary+0x80>
 8020280:	2301      	movs	r3, #1
 8020282:	e000      	b.n	8020286 <nk_is_word_boundary+0x82>
 8020284:	2300      	movs	r3, #0
}
 8020286:	4618      	mov	r0, r3
 8020288:	3710      	adds	r7, #16
 802028a:	46bd      	mov	sp, r7
 802028c:	bd80      	pop	{r7, pc}

0802028e <nk_textedit_move_to_word_previous>:
NK_INTERN int
nk_textedit_move_to_word_previous(struct nk_text_edit *state)
{
 802028e:	b580      	push	{r7, lr}
 8020290:	b084      	sub	sp, #16
 8020292:	af00      	add	r7, sp, #0
 8020294:	6078      	str	r0, [r7, #4]
   int c = state->cursor - 1;
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802029a:	3b01      	subs	r3, #1
 802029c:	60fb      	str	r3, [r7, #12]
   while( c >= 0 && !nk_is_word_boundary(state, c))
 802029e:	e002      	b.n	80202a6 <nk_textedit_move_to_word_previous+0x18>
      --c;
 80202a0:	68fb      	ldr	r3, [r7, #12]
 80202a2:	3b01      	subs	r3, #1
 80202a4:	60fb      	str	r3, [r7, #12]
   while( c >= 0 && !nk_is_word_boundary(state, c))
 80202a6:	68fb      	ldr	r3, [r7, #12]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	db06      	blt.n	80202ba <nk_textedit_move_to_word_previous+0x2c>
 80202ac:	68f9      	ldr	r1, [r7, #12]
 80202ae:	6878      	ldr	r0, [r7, #4]
 80202b0:	f7ff ffa8 	bl	8020204 <nk_is_word_boundary>
 80202b4:	4603      	mov	r3, r0
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d0f2      	beq.n	80202a0 <nk_textedit_move_to_word_previous+0x12>

   if( c < 0 )
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	2b00      	cmp	r3, #0
 80202be:	da01      	bge.n	80202c4 <nk_textedit_move_to_word_previous+0x36>
      c = 0;
 80202c0:	2300      	movs	r3, #0
 80202c2:	60fb      	str	r3, [r7, #12]

   return c;
 80202c4:	68fb      	ldr	r3, [r7, #12]
}
 80202c6:	4618      	mov	r0, r3
 80202c8:	3710      	adds	r7, #16
 80202ca:	46bd      	mov	sp, r7
 80202cc:	bd80      	pop	{r7, pc}

080202ce <nk_textedit_move_to_word_next>:
NK_INTERN int
nk_textedit_move_to_word_next(struct nk_text_edit *state)
{
 80202ce:	b580      	push	{r7, lr}
 80202d0:	b084      	sub	sp, #16
 80202d2:	af00      	add	r7, sp, #0
 80202d4:	6078      	str	r0, [r7, #4]
   const int len = state->string.len;
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80202da:	60bb      	str	r3, [r7, #8]
   int c = state->cursor+1;
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80202e0:	3301      	adds	r3, #1
 80202e2:	60fb      	str	r3, [r7, #12]
   while( c < len && !nk_is_word_boundary(state, c))
 80202e4:	e002      	b.n	80202ec <nk_textedit_move_to_word_next+0x1e>
      ++c;
 80202e6:	68fb      	ldr	r3, [r7, #12]
 80202e8:	3301      	adds	r3, #1
 80202ea:	60fb      	str	r3, [r7, #12]
   while( c < len && !nk_is_word_boundary(state, c))
 80202ec:	68fa      	ldr	r2, [r7, #12]
 80202ee:	68bb      	ldr	r3, [r7, #8]
 80202f0:	429a      	cmp	r2, r3
 80202f2:	da06      	bge.n	8020302 <nk_textedit_move_to_word_next+0x34>
 80202f4:	68f9      	ldr	r1, [r7, #12]
 80202f6:	6878      	ldr	r0, [r7, #4]
 80202f8:	f7ff ff84 	bl	8020204 <nk_is_word_boundary>
 80202fc:	4603      	mov	r3, r0
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d0f1      	beq.n	80202e6 <nk_textedit_move_to_word_next+0x18>

   if( c > len )
 8020302:	68fa      	ldr	r2, [r7, #12]
 8020304:	68bb      	ldr	r3, [r7, #8]
 8020306:	429a      	cmp	r2, r3
 8020308:	dd01      	ble.n	802030e <nk_textedit_move_to_word_next+0x40>
      c = len;
 802030a:	68bb      	ldr	r3, [r7, #8]
 802030c:	60fb      	str	r3, [r7, #12]

   return c;
 802030e:	68fb      	ldr	r3, [r7, #12]
}
 8020310:	4618      	mov	r0, r3
 8020312:	3710      	adds	r7, #16
 8020314:	46bd      	mov	sp, r7
 8020316:	bd80      	pop	{r7, pc}

08020318 <nk_textedit_prep_selection_at_cursor>:
NK_INTERN void
nk_textedit_prep_selection_at_cursor(struct nk_text_edit *state)
{
 8020318:	b480      	push	{r7}
 802031a:	b083      	sub	sp, #12
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
    /* update selection and cursor to match each other */
    if (!NK_TEXT_HAS_SELECTION(state))
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020328:	429a      	cmp	r2, r3
 802032a:	d108      	bne.n	802033e <nk_textedit_prep_selection_at_cursor+0x26>
        state->select_start = state->select_end = state->cursor;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	661a      	str	r2, [r3, #96]	; 0x60
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	65da      	str	r2, [r3, #92]	; 0x5c
    else state->cursor = state->select_end;
}
 802033c:	e003      	b.n	8020346 <nk_textedit_prep_selection_at_cursor+0x2e>
    else state->cursor = state->select_end;
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	659a      	str	r2, [r3, #88]	; 0x58
}
 8020346:	bf00      	nop
 8020348:	370c      	adds	r7, #12
 802034a:	46bd      	mov	sp, r7
 802034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020350:	4770      	bx	lr

08020352 <nk_textedit_cut>:
NK_API nk_bool
nk_textedit_cut(struct nk_text_edit *state)
{
 8020352:	b580      	push	{r7, lr}
 8020354:	b082      	sub	sp, #8
 8020356:	af00      	add	r7, sp, #0
 8020358:	6078      	str	r0, [r7, #4]
    /* API cut: delete selection */
    if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020360:	2b00      	cmp	r3, #0
 8020362:	d101      	bne.n	8020368 <nk_textedit_cut+0x16>
        return 0;
 8020364:	2300      	movs	r3, #0
 8020366:	e00f      	b.n	8020388 <nk_textedit_cut+0x36>
    if (NK_TEXT_HAS_SELECTION(state)) {
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020370:	429a      	cmp	r2, r3
 8020372:	d008      	beq.n	8020386 <nk_textedit_cut+0x34>
        nk_textedit_delete_selection(state); /* implicitly clamps */
 8020374:	6878      	ldr	r0, [r7, #4]
 8020376:	f7ff feac 	bl	80200d2 <nk_textedit_delete_selection>
        state->has_preferred_x = 0;
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	2200      	movs	r2, #0
 802037e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        return 1;
 8020382:	2301      	movs	r3, #1
 8020384:	e000      	b.n	8020388 <nk_textedit_cut+0x36>
    }
   return 0;
 8020386:	2300      	movs	r3, #0
}
 8020388:	4618      	mov	r0, r3
 802038a:	3708      	adds	r7, #8
 802038c:	46bd      	mov	sp, r7
 802038e:	bd80      	pop	{r7, pc}

08020390 <nk_textedit_text>:
        --state->undo.undo_point;
    return 0;
}
NK_API void
nk_textedit_text(struct nk_text_edit *state, const char *text, int total_len)
{
 8020390:	b580      	push	{r7, lr}
 8020392:	b088      	sub	sp, #32
 8020394:	af00      	add	r7, sp, #0
 8020396:	60f8      	str	r0, [r7, #12]
 8020398:	60b9      	str	r1, [r7, #8]
 802039a:	607a      	str	r2, [r7, #4]
    nk_rune unicode;
    int glyph_len;
    int text_len = 0;
 802039c:	2300      	movs	r3, #0
 802039e:	61bb      	str	r3, [r7, #24]

    NK_ASSERT(state);
 80203a0:	68fb      	ldr	r3, [r7, #12]
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d106      	bne.n	80203b4 <nk_textedit_text+0x24>
 80203a6:	4b62      	ldr	r3, [pc, #392]	; (8020530 <nk_textedit_text+0x1a0>)
 80203a8:	4a62      	ldr	r2, [pc, #392]	; (8020534 <nk_textedit_text+0x1a4>)
 80203aa:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80203ae:	4862      	ldr	r0, [pc, #392]	; (8020538 <nk_textedit_text+0x1a8>)
 80203b0:	f004 fb9e 	bl	8024af0 <__assert_func>
    NK_ASSERT(text);
 80203b4:	68bb      	ldr	r3, [r7, #8]
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d106      	bne.n	80203c8 <nk_textedit_text+0x38>
 80203ba:	4b60      	ldr	r3, [pc, #384]	; (802053c <nk_textedit_text+0x1ac>)
 80203bc:	4a5d      	ldr	r2, [pc, #372]	; (8020534 <nk_textedit_text+0x1a4>)
 80203be:	f240 116d 	movw	r1, #365	; 0x16d
 80203c2:	485d      	ldr	r0, [pc, #372]	; (8020538 <nk_textedit_text+0x1a8>)
 80203c4:	f004 fb94 	bl	8024af0 <__assert_func>
    if (!text || !total_len || state->mode == NK_TEXT_EDIT_MODE_VIEW) return;
 80203c8:	68bb      	ldr	r3, [r7, #8]
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	f000 80ab 	beq.w	8020526 <nk_textedit_text+0x196>
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	f000 80a7 	beq.w	8020526 <nk_textedit_text+0x196>
 80203d8:	68fb      	ldr	r3, [r7, #12]
 80203da:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80203de:	2b00      	cmp	r3, #0
 80203e0:	f000 80a1 	beq.w	8020526 <nk_textedit_text+0x196>

    glyph_len = nk_utf_decode(text, &unicode, total_len);
 80203e4:	f107 0314 	add.w	r3, r7, #20
 80203e8:	687a      	ldr	r2, [r7, #4]
 80203ea:	4619      	mov	r1, r3
 80203ec:	68b8      	ldr	r0, [r7, #8]
 80203ee:	f001 fedb 	bl	80221a8 <nk_utf_decode>
 80203f2:	61f8      	str	r0, [r7, #28]
    while ((text_len < total_len) && glyph_len)
 80203f4:	e08e      	b.n	8020514 <nk_textedit_text+0x184>
    {
        /* don't insert a backward delete, just process the event */
        if (unicode == 127) goto next;
 80203f6:	697b      	ldr	r3, [r7, #20]
 80203f8:	2b7f      	cmp	r3, #127	; 0x7f
 80203fa:	d074      	beq.n	80204e6 <nk_textedit_text+0x156>
        /* can't add newline in single-line mode */
        if (unicode == '\n' && state->single_line) goto next;
 80203fc:	697b      	ldr	r3, [r7, #20]
 80203fe:	2b0a      	cmp	r3, #10
 8020400:	d104      	bne.n	802040c <nk_textedit_text+0x7c>
 8020402:	68fb      	ldr	r3, [r7, #12]
 8020404:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020408:	2b00      	cmp	r3, #0
 802040a:	d16e      	bne.n	80204ea <nk_textedit_text+0x15a>
        /* filter incoming text */
        if (state->filter && !state->filter(state, unicode)) goto next;
 802040c:	68fb      	ldr	r3, [r7, #12]
 802040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020410:	2b00      	cmp	r3, #0
 8020412:	d008      	beq.n	8020426 <nk_textedit_text+0x96>
 8020414:	68fb      	ldr	r3, [r7, #12]
 8020416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020418:	697a      	ldr	r2, [r7, #20]
 802041a:	4611      	mov	r1, r2
 802041c:	68f8      	ldr	r0, [r7, #12]
 802041e:	4798      	blx	r3
 8020420:	4603      	mov	r3, r0
 8020422:	2b00      	cmp	r3, #0
 8020424:	d063      	beq.n	80204ee <nk_textedit_text+0x15e>

        if (!NK_TEXT_HAS_SELECTION(state) &&
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802042a:	68fb      	ldr	r3, [r7, #12]
 802042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802042e:	429a      	cmp	r2, r3
 8020430:	d132      	bne.n	8020498 <nk_textedit_text+0x108>
            state->cursor < state->string.len)
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020436:	68fb      	ldr	r3, [r7, #12]
 8020438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        if (!NK_TEXT_HAS_SELECTION(state) &&
 802043a:	429a      	cmp	r2, r3
 802043c:	da2c      	bge.n	8020498 <nk_textedit_text+0x108>
        {
            if (state->mode == NK_TEXT_EDIT_MODE_REPLACE) {
 802043e:	68fb      	ldr	r3, [r7, #12]
 8020440:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020444:	2b02      	cmp	r3, #2
 8020446:	d10f      	bne.n	8020468 <nk_textedit_text+0xd8>
                nk_textedit_makeundo_replace(state, state->cursor, 1, 1);
 8020448:	68fb      	ldr	r3, [r7, #12]
 802044a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 802044c:	2301      	movs	r3, #1
 802044e:	2201      	movs	r2, #1
 8020450:	68f8      	ldr	r0, [r7, #12]
 8020452:	f001 f902 	bl	802165a <nk_textedit_makeundo_replace>
                nk_str_delete_runes(&state->string, state->cursor, 1);
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	f103 000c 	add.w	r0, r3, #12
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020460:	2201      	movs	r2, #1
 8020462:	4619      	mov	r1, r3
 8020464:	f7fc fc52 	bl	801cd0c <nk_str_delete_runes>
            }
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	f103 000c 	add.w	r0, r3, #12
 802046e:	68fb      	ldr	r3, [r7, #12]
 8020470:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020472:	69bb      	ldr	r3, [r7, #24]
 8020474:	68ba      	ldr	r2, [r7, #8]
 8020476:	441a      	add	r2, r3
 8020478:	2301      	movs	r3, #1
 802047a:	f7fc fae3 	bl	801ca44 <nk_str_insert_text_utf8>
 802047e:	4603      	mov	r3, r0
 8020480:	2b00      	cmp	r3, #0
 8020482:	d037      	beq.n	80204f4 <nk_textedit_text+0x164>
                                        text+text_len, 1))
            {
                ++state->cursor;
 8020484:	68fb      	ldr	r3, [r7, #12]
 8020486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020488:	1c5a      	adds	r2, r3, #1
 802048a:	68fb      	ldr	r3, [r7, #12]
 802048c:	659a      	str	r2, [r3, #88]	; 0x58
                state->has_preferred_x = 0;
 802048e:	68fb      	ldr	r3, [r7, #12]
 8020490:	2200      	movs	r2, #0
 8020492:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 8020496:	e02d      	b.n	80204f4 <nk_textedit_text+0x164>
            }
        } else {
            nk_textedit_delete_selection(state); /* implicitly clamps */
 8020498:	68f8      	ldr	r0, [r7, #12]
 802049a:	f7ff fe1a 	bl	80200d2 <nk_textedit_delete_selection>
            if (nk_str_insert_text_utf8(&state->string, state->cursor,
 802049e:	68fb      	ldr	r3, [r7, #12]
 80204a0:	f103 000c 	add.w	r0, r3, #12
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80204a8:	69bb      	ldr	r3, [r7, #24]
 80204aa:	68ba      	ldr	r2, [r7, #8]
 80204ac:	441a      	add	r2, r3
 80204ae:	2301      	movs	r3, #1
 80204b0:	f7fc fac8 	bl	801ca44 <nk_str_insert_text_utf8>
 80204b4:	4603      	mov	r3, r0
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d01b      	beq.n	80204f2 <nk_textedit_text+0x162>
                                        text+text_len, 1))
            {
                nk_textedit_makeundo_insert(state, state->cursor, 1);
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80204be:	2201      	movs	r2, #1
 80204c0:	4619      	mov	r1, r3
 80204c2:	68f8      	ldr	r0, [r7, #12]
 80204c4:	f001 f889 	bl	80215da <nk_textedit_makeundo_insert>
                state->cursor = NK_MIN(state->cursor + 1, state->string.len);
 80204c8:	68fb      	ldr	r3, [r7, #12]
 80204ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80204cc:	68fb      	ldr	r3, [r7, #12]
 80204ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80204d0:	3301      	adds	r3, #1
 80204d2:	429a      	cmp	r2, r3
 80204d4:	bfa8      	it	ge
 80204d6:	461a      	movge	r2, r3
 80204d8:	68fb      	ldr	r3, [r7, #12]
 80204da:	659a      	str	r2, [r3, #88]	; 0x58
                state->has_preferred_x = 0;
 80204dc:	68fb      	ldr	r3, [r7, #12]
 80204de:	2200      	movs	r2, #0
 80204e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80204e4:	e006      	b.n	80204f4 <nk_textedit_text+0x164>
        if (unicode == 127) goto next;
 80204e6:	bf00      	nop
 80204e8:	e004      	b.n	80204f4 <nk_textedit_text+0x164>
        if (unicode == '\n' && state->single_line) goto next;
 80204ea:	bf00      	nop
 80204ec:	e002      	b.n	80204f4 <nk_textedit_text+0x164>
        if (state->filter && !state->filter(state, unicode)) goto next;
 80204ee:	bf00      	nop
 80204f0:	e000      	b.n	80204f4 <nk_textedit_text+0x164>
            }
        }
        next:
 80204f2:	bf00      	nop
        text_len += glyph_len;
 80204f4:	69ba      	ldr	r2, [r7, #24]
 80204f6:	69fb      	ldr	r3, [r7, #28]
 80204f8:	4413      	add	r3, r2
 80204fa:	61bb      	str	r3, [r7, #24]
        glyph_len = nk_utf_decode(text + text_len, &unicode, total_len-text_len);
 80204fc:	69bb      	ldr	r3, [r7, #24]
 80204fe:	68ba      	ldr	r2, [r7, #8]
 8020500:	18d0      	adds	r0, r2, r3
 8020502:	687a      	ldr	r2, [r7, #4]
 8020504:	69bb      	ldr	r3, [r7, #24]
 8020506:	1ad2      	subs	r2, r2, r3
 8020508:	f107 0314 	add.w	r3, r7, #20
 802050c:	4619      	mov	r1, r3
 802050e:	f001 fe4b 	bl	80221a8 <nk_utf_decode>
 8020512:	61f8      	str	r0, [r7, #28]
    while ((text_len < total_len) && glyph_len)
 8020514:	69ba      	ldr	r2, [r7, #24]
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	429a      	cmp	r2, r3
 802051a:	da05      	bge.n	8020528 <nk_textedit_text+0x198>
 802051c:	69fb      	ldr	r3, [r7, #28]
 802051e:	2b00      	cmp	r3, #0
 8020520:	f47f af69 	bne.w	80203f6 <nk_textedit_text+0x66>
 8020524:	e000      	b.n	8020528 <nk_textedit_text+0x198>
    if (!text || !total_len || state->mode == NK_TEXT_EDIT_MODE_VIEW) return;
 8020526:	bf00      	nop
    }
}
 8020528:	3720      	adds	r7, #32
 802052a:	46bd      	mov	sp, r7
 802052c:	bd80      	pop	{r7, pc}
 802052e:	bf00      	nop
 8020530:	08029324 	.word	0x08029324
 8020534:	0802ab98 	.word	0x0802ab98
 8020538:	0802932c 	.word	0x0802932c
 802053c:	08029350 	.word	0x08029350

08020540 <nk_textedit_key>:
NK_LIB void
nk_textedit_key(struct nk_text_edit *state, enum nk_keys key, int shift_mod,
    const struct nk_user_font *font, float row_height)
{
 8020540:	b590      	push	{r4, r7, lr}
 8020542:	b0c5      	sub	sp, #276	; 0x114
 8020544:	af02      	add	r7, sp, #8
 8020546:	6178      	str	r0, [r7, #20]
 8020548:	60fa      	str	r2, [r7, #12]
 802054a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802054e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020552:	6013      	str	r3, [r2, #0]
 8020554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 802055c:	ed83 0a00 	vstr	s0, [r3]
 8020560:	460b      	mov	r3, r1
 8020562:	74fb      	strb	r3, [r7, #19]
retry:
    switch (key)
 8020564:	7cfb      	ldrb	r3, [r7, #19]
 8020566:	3b03      	subs	r3, #3
 8020568:	2b16      	cmp	r3, #22
 802056a:	f200 842d 	bhi.w	8020dc8 <nk_textedit_key+0x888>
 802056e:	a201      	add	r2, pc, #4	; (adr r2, 8020574 <nk_textedit_key+0x34>)
 8020570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020574:	08020ab5 	.word	0x08020ab5
 8020578:	08020dc9 	.word	0x08020dc9
 802057c:	08020dc9 	.word	0x08020dc9
 8020580:	08020b01 	.word	0x08020b01
 8020584:	08020dc9 	.word	0x08020dc9
 8020588:	08020dc9 	.word	0x08020dc9
 802058c:	08020dc9 	.word	0x08020dc9
 8020590:	08020945 	.word	0x08020945
 8020594:	080207c9 	.word	0x080207c9
 8020598:	0802064f 	.word	0x0802064f
 802059c:	080206b5 	.word	0x080206b5
 80205a0:	08020603 	.word	0x08020603
 80205a4:	08020619 	.word	0x08020619
 80205a8:	0802062f 	.word	0x0802062f
 80205ac:	08020bdd 	.word	0x08020bdd
 80205b0:	08020cc3 	.word	0x08020cc3
 80205b4:	08020b53 	.word	0x08020b53
 80205b8:	08020b97 	.word	0x08020b97
 80205bc:	080205d1 	.word	0x080205d1
 80205c0:	080205e3 	.word	0x080205e3
 80205c4:	080205f3 	.word	0x080205f3
 80205c8:	08020711 	.word	0x08020711
 80205cc:	0802076d 	.word	0x0802076d
    case NK_KEY_CUT:
    case NK_KEY_PASTE:
    case NK_KEY_MAX:
    default: break;
    case NK_KEY_TEXT_UNDO:
         nk_textedit_undo(state);
 80205d0:	6978      	ldr	r0, [r7, #20]
 80205d2:	f000 fe14 	bl	80211fe <nk_textedit_undo>
         state->has_preferred_x = 0;
 80205d6:	697b      	ldr	r3, [r7, #20]
 80205d8:	2200      	movs	r2, #0
 80205da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 80205de:	f000 bc04 	b.w	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_REDO:
        nk_textedit_redo(state);
 80205e2:	6978      	ldr	r0, [r7, #20]
 80205e4:	f000 ff21 	bl	802142a <nk_textedit_redo>
        state->has_preferred_x = 0;
 80205e8:	697b      	ldr	r3, [r7, #20]
 80205ea:	2200      	movs	r2, #0
 80205ec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        break;
 80205f0:	e3fb      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_SELECT_ALL:
        nk_textedit_select_all(state);
 80205f2:	6978      	ldr	r0, [r7, #20]
 80205f4:	f001 f8c0 	bl	8021778 <nk_textedit_select_all>
        state->has_preferred_x = 0;
 80205f8:	697b      	ldr	r3, [r7, #20]
 80205fa:	2200      	movs	r2, #0
 80205fc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        break;
 8020600:	e3f3      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_INSERT_MODE:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020602:	697b      	ldr	r3, [r7, #20]
 8020604:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020608:	2b00      	cmp	r3, #0
 802060a:	f040 83df 	bne.w	8020dcc <nk_textedit_key+0x88c>
            state->mode = NK_TEXT_EDIT_MODE_INSERT;
 802060e:	697b      	ldr	r3, [r7, #20]
 8020610:	2201      	movs	r2, #1
 8020612:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        break;
 8020616:	e3d9      	b.n	8020dcc <nk_textedit_key+0x88c>
    case NK_KEY_TEXT_REPLACE_MODE:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020618:	697b      	ldr	r3, [r7, #20]
 802061a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 802061e:	2b00      	cmp	r3, #0
 8020620:	f040 83d6 	bne.w	8020dd0 <nk_textedit_key+0x890>
            state->mode = NK_TEXT_EDIT_MODE_REPLACE;
 8020624:	697b      	ldr	r3, [r7, #20]
 8020626:	2202      	movs	r2, #2
 8020628:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        break;
 802062c:	e3d0      	b.n	8020dd0 <nk_textedit_key+0x890>
    case NK_KEY_TEXT_RESET_MODE:
        if (state->mode == NK_TEXT_EDIT_MODE_INSERT ||
 802062e:	697b      	ldr	r3, [r7, #20]
 8020630:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020634:	2b01      	cmp	r3, #1
 8020636:	d005      	beq.n	8020644 <nk_textedit_key+0x104>
            state->mode == NK_TEXT_EDIT_MODE_REPLACE)
 8020638:	697b      	ldr	r3, [r7, #20]
 802063a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
        if (state->mode == NK_TEXT_EDIT_MODE_INSERT ||
 802063e:	2b02      	cmp	r3, #2
 8020640:	f040 83c8 	bne.w	8020dd4 <nk_textedit_key+0x894>
            state->mode = NK_TEXT_EDIT_MODE_VIEW;
 8020644:	697b      	ldr	r3, [r7, #20]
 8020646:	2200      	movs	r2, #0
 8020648:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        break;
 802064c:	e3c2      	b.n	8020dd4 <nk_textedit_key+0x894>

    case NK_KEY_LEFT:
        if (shift_mod) {
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	2b00      	cmp	r3, #0
 8020652:	d017      	beq.n	8020684 <nk_textedit_key+0x144>
            nk_textedit_clamp(state);
 8020654:	6978      	ldr	r0, [r7, #20]
 8020656:	f7ff fced 	bl	8020034 <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 802065a:	6978      	ldr	r0, [r7, #20]
 802065c:	f7ff fe5c 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            /* move selection left */
            if (state->select_end > 0)
 8020660:	697b      	ldr	r3, [r7, #20]
 8020662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020664:	2b00      	cmp	r3, #0
 8020666:	dd04      	ble.n	8020672 <nk_textedit_key+0x132>
                --state->select_end;
 8020668:	697b      	ldr	r3, [r7, #20]
 802066a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802066c:	1e5a      	subs	r2, r3, #1
 802066e:	697b      	ldr	r3, [r7, #20]
 8020670:	661a      	str	r2, [r3, #96]	; 0x60
            state->cursor = state->select_end;
 8020672:	697b      	ldr	r3, [r7, #20]
 8020674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020676:	697b      	ldr	r3, [r7, #20]
 8020678:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 802067a:	697b      	ldr	r3, [r7, #20]
 802067c:	2200      	movs	r2, #0
 802067e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            if (NK_TEXT_HAS_SELECTION(state))
                nk_textedit_move_to_first(state);
            else if (state->cursor > 0)
               --state->cursor;
            state->has_preferred_x = 0;
        } break;
 8020682:	e3b2      	b.n	8020dea <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 8020684:	697b      	ldr	r3, [r7, #20]
 8020686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020688:	697b      	ldr	r3, [r7, #20]
 802068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802068c:	429a      	cmp	r2, r3
 802068e:	d003      	beq.n	8020698 <nk_textedit_key+0x158>
                nk_textedit_move_to_first(state);
 8020690:	6978      	ldr	r0, [r7, #20]
 8020692:	f7ff fd7a 	bl	802018a <nk_textedit_move_to_first>
 8020696:	e008      	b.n	80206aa <nk_textedit_key+0x16a>
            else if (state->cursor > 0)
 8020698:	697b      	ldr	r3, [r7, #20]
 802069a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802069c:	2b00      	cmp	r3, #0
 802069e:	dd04      	ble.n	80206aa <nk_textedit_key+0x16a>
               --state->cursor;
 80206a0:	697b      	ldr	r3, [r7, #20]
 80206a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80206a4:	1e5a      	subs	r2, r3, #1
 80206a6:	697b      	ldr	r3, [r7, #20]
 80206a8:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 80206aa:	697b      	ldr	r3, [r7, #20]
 80206ac:	2200      	movs	r2, #0
 80206ae:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        } break;
 80206b2:	e39a      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_RIGHT:
        if (shift_mod) {
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d013      	beq.n	80206e2 <nk_textedit_key+0x1a2>
            nk_textedit_prep_selection_at_cursor(state);
 80206ba:	6978      	ldr	r0, [r7, #20]
 80206bc:	f7ff fe2c 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            /* move selection right */
            ++state->select_end;
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80206c4:	1c5a      	adds	r2, r3, #1
 80206c6:	697b      	ldr	r3, [r7, #20]
 80206c8:	661a      	str	r2, [r3, #96]	; 0x60
            nk_textedit_clamp(state);
 80206ca:	6978      	ldr	r0, [r7, #20]
 80206cc:	f7ff fcb2 	bl	8020034 <nk_textedit_clamp>
            state->cursor = state->select_end;
 80206d0:	697b      	ldr	r3, [r7, #20]
 80206d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80206d4:	697b      	ldr	r3, [r7, #20]
 80206d6:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 80206d8:	697b      	ldr	r3, [r7, #20]
 80206da:	2200      	movs	r2, #0
 80206dc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            if (NK_TEXT_HAS_SELECTION(state))
                nk_textedit_move_to_last(state);
            else ++state->cursor;
            nk_textedit_clamp(state);
            state->has_preferred_x = 0;
        } break;
 80206e0:	e383      	b.n	8020dea <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 80206e2:	697b      	ldr	r3, [r7, #20]
 80206e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80206e6:	697b      	ldr	r3, [r7, #20]
 80206e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80206ea:	429a      	cmp	r2, r3
 80206ec:	d003      	beq.n	80206f6 <nk_textedit_key+0x1b6>
                nk_textedit_move_to_last(state);
 80206ee:	6978      	ldr	r0, [r7, #20]
 80206f0:	f7ff fd68 	bl	80201c4 <nk_textedit_move_to_last>
 80206f4:	e004      	b.n	8020700 <nk_textedit_key+0x1c0>
            else ++state->cursor;
 80206f6:	697b      	ldr	r3, [r7, #20]
 80206f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80206fa:	1c5a      	adds	r2, r3, #1
 80206fc:	697b      	ldr	r3, [r7, #20]
 80206fe:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_clamp(state);
 8020700:	6978      	ldr	r0, [r7, #20]
 8020702:	f7ff fc97 	bl	8020034 <nk_textedit_clamp>
            state->has_preferred_x = 0;
 8020706:	697b      	ldr	r3, [r7, #20]
 8020708:	2200      	movs	r2, #0
 802070a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        } break;
 802070e:	e36c      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_WORD_LEFT:
        if (shift_mod) {
 8020710:	68fb      	ldr	r3, [r7, #12]
 8020712:	2b00      	cmp	r3, #0
 8020714:	d016      	beq.n	8020744 <nk_textedit_key+0x204>
            if( !NK_TEXT_HAS_SELECTION( state ) )
 8020716:	697b      	ldr	r3, [r7, #20]
 8020718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802071a:	697b      	ldr	r3, [r7, #20]
 802071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802071e:	429a      	cmp	r2, r3
 8020720:	d102      	bne.n	8020728 <nk_textedit_key+0x1e8>
            nk_textedit_prep_selection_at_cursor(state);
 8020722:	6978      	ldr	r0, [r7, #20]
 8020724:	f7ff fdf8 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            state->cursor = nk_textedit_move_to_word_previous(state);
 8020728:	6978      	ldr	r0, [r7, #20]
 802072a:	f7ff fdb0 	bl	802028e <nk_textedit_move_to_word_previous>
 802072e:	4602      	mov	r2, r0
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_end = state->cursor;
 8020734:	697b      	ldr	r3, [r7, #20]
 8020736:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020738:	697b      	ldr	r3, [r7, #20]
 802073a:	661a      	str	r2, [r3, #96]	; 0x60
            nk_textedit_clamp(state );
 802073c:	6978      	ldr	r0, [r7, #20]
 802073e:	f7ff fc79 	bl	8020034 <nk_textedit_clamp>
                nk_textedit_move_to_first(state);
            else {
                state->cursor = nk_textedit_move_to_word_previous(state);
                nk_textedit_clamp(state );
            }
        } break;
 8020742:	e352      	b.n	8020dea <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 8020744:	697b      	ldr	r3, [r7, #20]
 8020746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020748:	697b      	ldr	r3, [r7, #20]
 802074a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802074c:	429a      	cmp	r2, r3
 802074e:	d003      	beq.n	8020758 <nk_textedit_key+0x218>
                nk_textedit_move_to_first(state);
 8020750:	6978      	ldr	r0, [r7, #20]
 8020752:	f7ff fd1a 	bl	802018a <nk_textedit_move_to_first>
        } break;
 8020756:	e348      	b.n	8020dea <nk_textedit_key+0x8aa>
                state->cursor = nk_textedit_move_to_word_previous(state);
 8020758:	6978      	ldr	r0, [r7, #20]
 802075a:	f7ff fd98 	bl	802028e <nk_textedit_move_to_word_previous>
 802075e:	4602      	mov	r2, r0
 8020760:	697b      	ldr	r3, [r7, #20]
 8020762:	659a      	str	r2, [r3, #88]	; 0x58
                nk_textedit_clamp(state );
 8020764:	6978      	ldr	r0, [r7, #20]
 8020766:	f7ff fc65 	bl	8020034 <nk_textedit_clamp>
        } break;
 802076a:	e33e      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_WORD_RIGHT:
        if (shift_mod) {
 802076c:	68fb      	ldr	r3, [r7, #12]
 802076e:	2b00      	cmp	r3, #0
 8020770:	d016      	beq.n	80207a0 <nk_textedit_key+0x260>
            if( !NK_TEXT_HAS_SELECTION( state ) )
 8020772:	697b      	ldr	r3, [r7, #20]
 8020774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020776:	697b      	ldr	r3, [r7, #20]
 8020778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802077a:	429a      	cmp	r2, r3
 802077c:	d102      	bne.n	8020784 <nk_textedit_key+0x244>
                nk_textedit_prep_selection_at_cursor(state);
 802077e:	6978      	ldr	r0, [r7, #20]
 8020780:	f7ff fdca 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            state->cursor = nk_textedit_move_to_word_next(state);
 8020784:	6978      	ldr	r0, [r7, #20]
 8020786:	f7ff fda2 	bl	80202ce <nk_textedit_move_to_word_next>
 802078a:	4602      	mov	r2, r0
 802078c:	697b      	ldr	r3, [r7, #20]
 802078e:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_end = state->cursor;
 8020790:	697b      	ldr	r3, [r7, #20]
 8020792:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020794:	697b      	ldr	r3, [r7, #20]
 8020796:	661a      	str	r2, [r3, #96]	; 0x60
            nk_textedit_clamp(state);
 8020798:	6978      	ldr	r0, [r7, #20]
 802079a:	f7ff fc4b 	bl	8020034 <nk_textedit_clamp>
                nk_textedit_move_to_last(state);
            else {
                state->cursor = nk_textedit_move_to_word_next(state);
                nk_textedit_clamp(state );
            }
        } break;
 802079e:	e324      	b.n	8020dea <nk_textedit_key+0x8aa>
            if (NK_TEXT_HAS_SELECTION(state))
 80207a0:	697b      	ldr	r3, [r7, #20]
 80207a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80207a4:	697b      	ldr	r3, [r7, #20]
 80207a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207a8:	429a      	cmp	r2, r3
 80207aa:	d003      	beq.n	80207b4 <nk_textedit_key+0x274>
                nk_textedit_move_to_last(state);
 80207ac:	6978      	ldr	r0, [r7, #20]
 80207ae:	f7ff fd09 	bl	80201c4 <nk_textedit_move_to_last>
        } break;
 80207b2:	e31a      	b.n	8020dea <nk_textedit_key+0x8aa>
                state->cursor = nk_textedit_move_to_word_next(state);
 80207b4:	6978      	ldr	r0, [r7, #20]
 80207b6:	f7ff fd8a 	bl	80202ce <nk_textedit_move_to_word_next>
 80207ba:	4602      	mov	r2, r0
 80207bc:	697b      	ldr	r3, [r7, #20]
 80207be:	659a      	str	r2, [r3, #88]	; 0x58
                nk_textedit_clamp(state );
 80207c0:	6978      	ldr	r0, [r7, #20]
 80207c2:	f7ff fc37 	bl	8020034 <nk_textedit_clamp>
        } break;
 80207c6:	e310      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_DOWN: {
        struct nk_text_find find;
        struct nk_text_edit_row row;
        int i, sel = shift_mod;
 80207c8:	68fb      	ldr	r3, [r7, #12]
 80207ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        if (state->single_line) {
 80207ce:	697b      	ldr	r3, [r7, #20]
 80207d0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	d002      	beq.n	80207de <nk_textedit_key+0x29e>
            /* on windows, up&down in single-line behave like left&right */
            key = NK_KEY_RIGHT;
 80207d8:	230d      	movs	r3, #13
 80207da:	74fb      	strb	r3, [r7, #19]
 80207dc:	e6c2      	b.n	8020564 <nk_textedit_key+0x24>
            goto retry;
        }

        if (sel)
 80207de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d003      	beq.n	80207ee <nk_textedit_key+0x2ae>
            nk_textedit_prep_selection_at_cursor(state);
 80207e6:	6978      	ldr	r0, [r7, #20]
 80207e8:	f7ff fd96 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
 80207ec:	e008      	b.n	8020800 <nk_textedit_key+0x2c0>
        else if (NK_TEXT_HAS_SELECTION(state))
 80207ee:	697b      	ldr	r3, [r7, #20]
 80207f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207f6:	429a      	cmp	r2, r3
 80207f8:	d002      	beq.n	8020800 <nk_textedit_key+0x2c0>
            nk_textedit_move_to_last(state);
 80207fa:	6978      	ldr	r0, [r7, #20]
 80207fc:	f7ff fce2 	bl	80201c4 <nk_textedit_move_to_last>

        /* compute current position of cursor point */
        nk_textedit_clamp(state);
 8020800:	6978      	ldr	r0, [r7, #20]
 8020802:	f7ff fc17 	bl	8020034 <nk_textedit_clamp>
        nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020806:	697b      	ldr	r3, [r7, #20]
 8020808:	6d99      	ldr	r1, [r3, #88]	; 0x58
 802080a:	697b      	ldr	r3, [r7, #20]
 802080c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020810:	461c      	mov	r4, r3
 8020812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 802081a:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 802081e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020822:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020826:	6812      	ldr	r2, [r2, #0]
 8020828:	9200      	str	r2, [sp, #0]
 802082a:	ed93 0a00 	vldr	s0, [r3]
 802082e:	4623      	mov	r3, r4
 8020830:	460a      	mov	r2, r1
 8020832:	6979      	ldr	r1, [r7, #20]
 8020834:	f7ff fb4a 	bl	801fecc <nk_textedit_find_charpos>
            font, row_height);

        /* now find character position down a row */
        if (find.length)
 8020838:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802083c:	2b00      	cmp	r3, #0
 802083e:	f000 82cb 	beq.w	8020dd8 <nk_textedit_key+0x898>
        {
            float x;
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 8020842:	697b      	ldr	r3, [r7, #20]
 8020844:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8020848:	2b00      	cmp	r3, #0
 802084a:	d002      	beq.n	8020852 <nk_textedit_key+0x312>
 802084c:	697b      	ldr	r3, [r7, #20]
 802084e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020850:	e001      	b.n	8020856 <nk_textedit_key+0x316>
 8020852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8020856:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            int start = find.first_char + find.length;
 802085a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 802085e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8020862:	4413      	add	r3, r2
 8020864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            state->cursor = start;
 8020868:	697b      	ldr	r3, [r7, #20]
 802086a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802086e:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_layout_row(&row, state, state->cursor, row_height, font);
 8020870:	697b      	ldr	r3, [r7, #20]
 8020872:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020878:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 802087c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020880:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8020884:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8020888:	681b      	ldr	r3, [r3, #0]
 802088a:	ed92 0a00 	vldr	s0, [r2]
 802088e:	460a      	mov	r2, r1
 8020890:	6979      	ldr	r1, [r7, #20]
 8020892:	f7ff f999 	bl	801fbc8 <nk_textedit_layout_row>
            x = row.x0;
 8020896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802089a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 802089e:	2300      	movs	r3, #0
 80208a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80208a4:	e028      	b.n	80208f8 <nk_textedit_key+0x3b8>
                float dx = nk_textedit_get_width(state, start, i, font);
 80208a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80208aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80208b4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80208b8:	6978      	ldr	r0, [r7, #20]
 80208ba:	f7ff f95a 	bl	801fb72 <nk_textedit_get_width>
 80208be:	ed87 0a3a 	vstr	s0, [r7, #232]	; 0xe8
                x += dx;
 80208c2:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80208c6:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80208ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80208ce:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
                if (x > goal_x)
 80208d2:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80208d6:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80208da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80208de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208e2:	dc19      	bgt.n	8020918 <nk_textedit_key+0x3d8>
                    break;
                ++state->cursor;
 80208e4:	697b      	ldr	r3, [r7, #20]
 80208e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80208e8:	1c5a      	adds	r2, r3, #1
 80208ea:	697b      	ldr	r3, [r7, #20]
 80208ec:	659a      	str	r2, [r3, #88]	; 0x58
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 80208ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80208f2:	3301      	adds	r3, #1
 80208f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80208f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80208fc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8020900:	429a      	cmp	r2, r3
 8020902:	da0a      	bge.n	802091a <nk_textedit_key+0x3da>
 8020904:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8020908:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 802090c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020914:	d4c7      	bmi.n	80208a6 <nk_textedit_key+0x366>
 8020916:	e000      	b.n	802091a <nk_textedit_key+0x3da>
                    break;
 8020918:	bf00      	nop
            }
            nk_textedit_clamp(state);
 802091a:	6978      	ldr	r0, [r7, #20]
 802091c:	f7ff fb8a 	bl	8020034 <nk_textedit_clamp>

            state->has_preferred_x = 1;
 8020920:	697b      	ldr	r3, [r7, #20]
 8020922:	2201      	movs	r2, #1
 8020924:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->preferred_x = goal_x;
 8020928:	697b      	ldr	r3, [r7, #20]
 802092a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 802092e:	66da      	str	r2, [r3, #108]	; 0x6c
            if (sel)
 8020930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020934:	2b00      	cmp	r3, #0
 8020936:	f000 824f 	beq.w	8020dd8 <nk_textedit_key+0x898>
                state->select_end = state->cursor;
 802093a:	697b      	ldr	r3, [r7, #20]
 802093c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	661a      	str	r2, [r3, #96]	; 0x60
        }
    } break;
 8020942:	e249      	b.n	8020dd8 <nk_textedit_key+0x898>

    case NK_KEY_UP: {
        struct nk_text_find find;
        struct nk_text_edit_row row;
        int i, sel = shift_mod;
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

        if (state->single_line) {
 802094a:	697b      	ldr	r3, [r7, #20]
 802094c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020950:	2b00      	cmp	r3, #0
 8020952:	d002      	beq.n	802095a <nk_textedit_key+0x41a>
            /* on windows, up&down become left&right */
            key = NK_KEY_LEFT;
 8020954:	230c      	movs	r3, #12
 8020956:	74fb      	strb	r3, [r7, #19]
 8020958:	e604      	b.n	8020564 <nk_textedit_key+0x24>
            goto retry;
        }

        if (sel)
 802095a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802095e:	2b00      	cmp	r3, #0
 8020960:	d003      	beq.n	802096a <nk_textedit_key+0x42a>
            nk_textedit_prep_selection_at_cursor(state);
 8020962:	6978      	ldr	r0, [r7, #20]
 8020964:	f7ff fcd8 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
 8020968:	e008      	b.n	802097c <nk_textedit_key+0x43c>
        else if (NK_TEXT_HAS_SELECTION(state))
 802096a:	697b      	ldr	r3, [r7, #20]
 802096c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802096e:	697b      	ldr	r3, [r7, #20]
 8020970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020972:	429a      	cmp	r2, r3
 8020974:	d002      	beq.n	802097c <nk_textedit_key+0x43c>
            nk_textedit_move_to_first(state);
 8020976:	6978      	ldr	r0, [r7, #20]
 8020978:	f7ff fc07 	bl	802018a <nk_textedit_move_to_first>

         /* compute current position of cursor point */
         nk_textedit_clamp(state);
 802097c:	6978      	ldr	r0, [r7, #20]
 802097e:	f7ff fb59 	bl	8020034 <nk_textedit_clamp>
         nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020982:	697b      	ldr	r3, [r7, #20]
 8020984:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020986:	697b      	ldr	r3, [r7, #20]
 8020988:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 802098c:	461c      	mov	r4, r3
 802098e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020996:	f107 0090 	add.w	r0, r7, #144	; 0x90
 802099a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802099e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80209a2:	6812      	ldr	r2, [r2, #0]
 80209a4:	9200      	str	r2, [sp, #0]
 80209a6:	ed93 0a00 	vldr	s0, [r3]
 80209aa:	4623      	mov	r3, r4
 80209ac:	460a      	mov	r2, r1
 80209ae:	6979      	ldr	r1, [r7, #20]
 80209b0:	f7ff fa8c 	bl	801fecc <nk_textedit_find_charpos>
                font, row_height);

         /* can only go up if there's a previous row */
         if (find.prev_first != find.first_char) {
 80209b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80209b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80209bc:	429a      	cmp	r2, r3
 80209be:	f000 820d 	beq.w	8020ddc <nk_textedit_key+0x89c>
            /* now find character position up a row */
            float x;
            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
 80209c2:	697b      	ldr	r3, [r7, #20]
 80209c4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d002      	beq.n	80209d2 <nk_textedit_key+0x492>
 80209cc:	697b      	ldr	r3, [r7, #20]
 80209ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80209d0:	e001      	b.n	80209d6 <nk_textedit_key+0x496>
 80209d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80209d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

            state->cursor = find.prev_first;
 80209da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80209de:	697b      	ldr	r3, [r7, #20]
 80209e0:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_layout_row(&row, state, state->cursor, row_height, font);
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80209e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80209ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80209ee:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80209f2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80209f6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	ed92 0a00 	vldr	s0, [r2]
 8020a00:	460a      	mov	r2, r1
 8020a02:	6979      	ldr	r1, [r7, #20]
 8020a04:	f7ff f8e0 	bl	801fbc8 <nk_textedit_layout_row>
            x = row.x0;
 8020a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020a0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8020a0e:	2300      	movs	r3, #0
 8020a10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8020a14:	e028      	b.n	8020a68 <nk_textedit_key+0x528>
                float dx = nk_textedit_get_width(state, find.prev_first, i, font);
 8020a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8020a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020a1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020a28:	6978      	ldr	r0, [r7, #20]
 8020a2a:	f7ff f8a2 	bl	801fb72 <nk_textedit_get_width>
 8020a2e:	ed87 0a37 	vstr	s0, [r7, #220]	; 0xdc
                x += dx;
 8020a32:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8020a36:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8020a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020a3e:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
                if (x > goal_x)
 8020a42:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8020a46:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8020a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a52:	dc19      	bgt.n	8020a88 <nk_textedit_key+0x548>
                    break;
                ++state->cursor;
 8020a54:	697b      	ldr	r3, [r7, #20]
 8020a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020a58:	1c5a      	adds	r2, r3, #1
 8020a5a:	697b      	ldr	r3, [r7, #20]
 8020a5c:	659a      	str	r2, [r3, #88]	; 0x58
            for (i=0; i < row.num_chars && x < row.x1; ++i) {
 8020a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8020a62:	3301      	adds	r3, #1
 8020a64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8020a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8020a6c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020a70:	429a      	cmp	r2, r3
 8020a72:	da0a      	bge.n	8020a8a <nk_textedit_key+0x54a>
 8020a74:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8020a78:	ed97 7a3e 	vldr	s14, [r7, #248]	; 0xf8
 8020a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a84:	d4c7      	bmi.n	8020a16 <nk_textedit_key+0x4d6>
 8020a86:	e000      	b.n	8020a8a <nk_textedit_key+0x54a>
                    break;
 8020a88:	bf00      	nop
            }
            nk_textedit_clamp(state);
 8020a8a:	6978      	ldr	r0, [r7, #20]
 8020a8c:	f7ff fad2 	bl	8020034 <nk_textedit_clamp>

            state->has_preferred_x = 1;
 8020a90:	697b      	ldr	r3, [r7, #20]
 8020a92:	2201      	movs	r2, #1
 8020a94:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->preferred_x = goal_x;
 8020a98:	697b      	ldr	r3, [r7, #20]
 8020a9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8020a9e:	66da      	str	r2, [r3, #108]	; 0x6c
            if (sel) state->select_end = state->cursor;
 8020aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	f000 8199 	beq.w	8020ddc <nk_textedit_key+0x89c>
 8020aaa:	697b      	ldr	r3, [r7, #20]
 8020aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020aae:	697b      	ldr	r3, [r7, #20]
 8020ab0:	661a      	str	r2, [r3, #96]	; 0x60
         }
      } break;
 8020ab2:	e193      	b.n	8020ddc <nk_textedit_key+0x89c>

    case NK_KEY_DEL:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020ab4:	697b      	ldr	r3, [r7, #20]
 8020ab6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	f000 8190 	beq.w	8020de0 <nk_textedit_key+0x8a0>
            break;
        if (NK_TEXT_HAS_SELECTION(state))
 8020ac0:	697b      	ldr	r3, [r7, #20]
 8020ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020ac4:	697b      	ldr	r3, [r7, #20]
 8020ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020ac8:	429a      	cmp	r2, r3
 8020aca:	d003      	beq.n	8020ad4 <nk_textedit_key+0x594>
            nk_textedit_delete_selection(state);
 8020acc:	6978      	ldr	r0, [r7, #20]
 8020ace:	f7ff fb00 	bl	80200d2 <nk_textedit_delete_selection>
 8020ad2:	e010      	b.n	8020af6 <nk_textedit_key+0x5b6>
        else {
            int n = state->string.len;
 8020ad4:	697b      	ldr	r3, [r7, #20]
 8020ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if (state->cursor < n)
 8020adc:	697b      	ldr	r3, [r7, #20]
 8020ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020ae0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8020ae4:	429a      	cmp	r2, r3
 8020ae6:	dd06      	ble.n	8020af6 <nk_textedit_key+0x5b6>
                nk_textedit_delete(state, state->cursor, 1);
 8020ae8:	697b      	ldr	r3, [r7, #20]
 8020aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020aec:	2201      	movs	r2, #1
 8020aee:	4619      	mov	r1, r3
 8020af0:	6978      	ldr	r0, [r7, #20]
 8020af2:	f7ff fad4 	bl	802009e <nk_textedit_delete>
         }
         state->has_preferred_x = 0;
 8020af6:	697b      	ldr	r3, [r7, #20]
 8020af8:	2200      	movs	r2, #0
 8020afa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020afe:	e174      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_BACKSPACE:
        if (state->mode == NK_TEXT_EDIT_MODE_VIEW)
 8020b00:	697b      	ldr	r3, [r7, #20]
 8020b02:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	f000 816c 	beq.w	8020de4 <nk_textedit_key+0x8a4>
            break;
        if (NK_TEXT_HAS_SELECTION(state))
 8020b0c:	697b      	ldr	r3, [r7, #20]
 8020b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020b10:	697b      	ldr	r3, [r7, #20]
 8020b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020b14:	429a      	cmp	r2, r3
 8020b16:	d003      	beq.n	8020b20 <nk_textedit_key+0x5e0>
            nk_textedit_delete_selection(state);
 8020b18:	6978      	ldr	r0, [r7, #20]
 8020b1a:	f7ff fada 	bl	80200d2 <nk_textedit_delete_selection>
 8020b1e:	e013      	b.n	8020b48 <nk_textedit_key+0x608>
        else {
            nk_textedit_clamp(state);
 8020b20:	6978      	ldr	r0, [r7, #20]
 8020b22:	f7ff fa87 	bl	8020034 <nk_textedit_clamp>
            if (state->cursor > 0) {
 8020b26:	697b      	ldr	r3, [r7, #20]
 8020b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	dd0c      	ble.n	8020b48 <nk_textedit_key+0x608>
                nk_textedit_delete(state, state->cursor-1, 1);
 8020b2e:	697b      	ldr	r3, [r7, #20]
 8020b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020b32:	3b01      	subs	r3, #1
 8020b34:	2201      	movs	r2, #1
 8020b36:	4619      	mov	r1, r3
 8020b38:	6978      	ldr	r0, [r7, #20]
 8020b3a:	f7ff fab0 	bl	802009e <nk_textedit_delete>
                --state->cursor;
 8020b3e:	697b      	ldr	r3, [r7, #20]
 8020b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020b42:	1e5a      	subs	r2, r3, #1
 8020b44:	697b      	ldr	r3, [r7, #20]
 8020b46:	659a      	str	r2, [r3, #88]	; 0x58
            }
         }
         state->has_preferred_x = 0;
 8020b48:	697b      	ldr	r3, [r7, #20]
 8020b4a:	2200      	movs	r2, #0
 8020b4c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020b50:	e14b      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_START:
         if (shift_mod) {
 8020b52:	68fb      	ldr	r3, [r7, #12]
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d00e      	beq.n	8020b76 <nk_textedit_key+0x636>
            nk_textedit_prep_selection_at_cursor(state);
 8020b58:	6978      	ldr	r0, [r7, #20]
 8020b5a:	f7ff fbdd 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            state->cursor = state->select_end = 0;
 8020b5e:	697b      	ldr	r3, [r7, #20]
 8020b60:	2200      	movs	r2, #0
 8020b62:	661a      	str	r2, [r3, #96]	; 0x60
 8020b64:	697b      	ldr	r3, [r7, #20]
 8020b66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020b68:	697b      	ldr	r3, [r7, #20]
 8020b6a:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020b6c:	697b      	ldr	r3, [r7, #20]
 8020b6e:	2200      	movs	r2, #0
 8020b70:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         } else {
            state->cursor = state->select_start = state->select_end = 0;
            state->has_preferred_x = 0;
         }
         break;
 8020b74:	e139      	b.n	8020dea <nk_textedit_key+0x8aa>
            state->cursor = state->select_start = state->select_end = 0;
 8020b76:	697b      	ldr	r3, [r7, #20]
 8020b78:	2200      	movs	r2, #0
 8020b7a:	661a      	str	r2, [r3, #96]	; 0x60
 8020b7c:	697b      	ldr	r3, [r7, #20]
 8020b7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020b80:	697b      	ldr	r3, [r7, #20]
 8020b82:	65da      	str	r2, [r3, #92]	; 0x5c
 8020b84:	697b      	ldr	r3, [r7, #20]
 8020b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020b88:	697b      	ldr	r3, [r7, #20]
 8020b8a:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020b8c:	697b      	ldr	r3, [r7, #20]
 8020b8e:	2200      	movs	r2, #0
 8020b90:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020b94:	e129      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_END:
         if (shift_mod) {
 8020b96:	68fb      	ldr	r3, [r7, #12]
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	d00f      	beq.n	8020bbc <nk_textedit_key+0x67c>
            nk_textedit_prep_selection_at_cursor(state);
 8020b9c:	6978      	ldr	r0, [r7, #20]
 8020b9e:	f7ff fbbb 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            state->cursor = state->select_end = state->string.len;
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	661a      	str	r2, [r3, #96]	; 0x60
 8020baa:	697b      	ldr	r3, [r7, #20]
 8020bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020bae:	697b      	ldr	r3, [r7, #20]
 8020bb0:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         } else {
            state->cursor = state->string.len;
            state->select_start = state->select_end = 0;
            state->has_preferred_x = 0;
         }
         break;
 8020bba:	e116      	b.n	8020dea <nk_textedit_key+0x8aa>
            state->cursor = state->string.len;
 8020bbc:	697b      	ldr	r3, [r7, #20]
 8020bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020bc0:	697b      	ldr	r3, [r7, #20]
 8020bc2:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_start = state->select_end = 0;
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	661a      	str	r2, [r3, #96]	; 0x60
 8020bca:	697b      	ldr	r3, [r7, #20]
 8020bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020bce:	697b      	ldr	r3, [r7, #20]
 8020bd0:	65da      	str	r2, [r3, #92]	; 0x5c
            state->has_preferred_x = 0;
 8020bd2:	697b      	ldr	r3, [r7, #20]
 8020bd4:	2200      	movs	r2, #0
 8020bd6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
         break;
 8020bda:	e106      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_LINE_START: {
        if (shift_mod) {
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	d039      	beq.n	8020c56 <nk_textedit_key+0x716>
            struct nk_text_find find;
           nk_textedit_clamp(state);
 8020be2:	6978      	ldr	r0, [r7, #20]
 8020be4:	f7ff fa26 	bl	8020034 <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8020be8:	6978      	ldr	r0, [r7, #20]
 8020bea:	f7ff fb95 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            if (state->string.len && state->cursor == state->string.len)
 8020bee:	697b      	ldr	r3, [r7, #20]
 8020bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d00a      	beq.n	8020c0c <nk_textedit_key+0x6cc>
 8020bf6:	697b      	ldr	r3, [r7, #20]
 8020bf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020bfa:	697b      	ldr	r3, [r7, #20]
 8020bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020bfe:	429a      	cmp	r2, r3
 8020c00:	d104      	bne.n	8020c0c <nk_textedit_key+0x6cc>
                --state->cursor;
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020c06:	1e5a      	subs	r2, r3, #1
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_find_charpos(&find, state,state->cursor, state->single_line,
 8020c0c:	697b      	ldr	r3, [r7, #20]
 8020c0e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020c10:	697b      	ldr	r3, [r7, #20]
 8020c12:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020c16:	461c      	mov	r4, r3
 8020c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020c20:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8020c24:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020c28:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020c2c:	6812      	ldr	r2, [r2, #0]
 8020c2e:	9200      	str	r2, [sp, #0]
 8020c30:	ed93 0a00 	vldr	s0, [r3]
 8020c34:	4623      	mov	r3, r4
 8020c36:	460a      	mov	r2, r1
 8020c38:	6979      	ldr	r1, [r7, #20]
 8020c3a:	f7ff f947 	bl	801fecc <nk_textedit_find_charpos>
                font, row_height);
            state->cursor = state->select_end = find.first_char;
 8020c3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8020c40:	697b      	ldr	r3, [r7, #20]
 8020c42:	661a      	str	r2, [r3, #96]	; 0x60
 8020c44:	697b      	ldr	r3, [r7, #20]
 8020c46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020c48:	697b      	ldr	r3, [r7, #20]
 8020c4a:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020c4c:	697b      	ldr	r3, [r7, #20]
 8020c4e:	2200      	movs	r2, #0
 8020c50:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
                font, row_height);
            state->cursor = find.first_char;
            state->has_preferred_x = 0;
        }
      } break;
 8020c54:	e0c9      	b.n	8020dea <nk_textedit_key+0x8aa>
            if (state->string.len && state->cursor == state->string.len)
 8020c56:	697b      	ldr	r3, [r7, #20]
 8020c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d00a      	beq.n	8020c74 <nk_textedit_key+0x734>
 8020c5e:	697b      	ldr	r3, [r7, #20]
 8020c60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020c62:	697b      	ldr	r3, [r7, #20]
 8020c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020c66:	429a      	cmp	r2, r3
 8020c68:	d104      	bne.n	8020c74 <nk_textedit_key+0x734>
                --state->cursor;
 8020c6a:	697b      	ldr	r3, [r7, #20]
 8020c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020c6e:	1e5a      	subs	r2, r3, #1
 8020c70:	697b      	ldr	r3, [r7, #20]
 8020c72:	659a      	str	r2, [r3, #88]	; 0x58
            nk_textedit_clamp(state);
 8020c74:	6978      	ldr	r0, [r7, #20]
 8020c76:	f7ff f9dd 	bl	8020034 <nk_textedit_clamp>
            nk_textedit_move_to_first(state);
 8020c7a:	6978      	ldr	r0, [r7, #20]
 8020c7c:	f7ff fa85 	bl	802018a <nk_textedit_move_to_first>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020c80:	697b      	ldr	r3, [r7, #20]
 8020c82:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020c84:	697b      	ldr	r3, [r7, #20]
 8020c86:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020c8a:	461c      	mov	r4, r3
 8020c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020c94:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8020c98:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020c9c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020ca0:	6812      	ldr	r2, [r2, #0]
 8020ca2:	9200      	str	r2, [sp, #0]
 8020ca4:	ed93 0a00 	vldr	s0, [r3]
 8020ca8:	4623      	mov	r3, r4
 8020caa:	460a      	mov	r2, r1
 8020cac:	6979      	ldr	r1, [r7, #20]
 8020cae:	f7ff f90d 	bl	801fecc <nk_textedit_find_charpos>
            state->cursor = find.first_char;
 8020cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020cb4:	697b      	ldr	r3, [r7, #20]
 8020cb6:	659a      	str	r2, [r3, #88]	; 0x58
            state->has_preferred_x = 0;
 8020cb8:	697b      	ldr	r3, [r7, #20]
 8020cba:	2200      	movs	r2, #0
 8020cbc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      } break;
 8020cc0:	e093      	b.n	8020dea <nk_textedit_key+0x8aa>

    case NK_KEY_TEXT_LINE_END: {
        if (shift_mod) {
 8020cc2:	68fb      	ldr	r3, [r7, #12]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d041      	beq.n	8020d4c <nk_textedit_key+0x80c>
            struct nk_text_find find;
            nk_textedit_clamp(state);
 8020cc8:	6978      	ldr	r0, [r7, #20]
 8020cca:	f7ff f9b3 	bl	8020034 <nk_textedit_clamp>
            nk_textedit_prep_selection_at_cursor(state);
 8020cce:	6978      	ldr	r0, [r7, #20]
 8020cd0:	f7ff fb22 	bl	8020318 <nk_textedit_prep_selection_at_cursor>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020cd4:	697b      	ldr	r3, [r7, #20]
 8020cd6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020cd8:	697b      	ldr	r3, [r7, #20]
 8020cda:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020cde:	461c      	mov	r4, r3
 8020ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020ce8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8020cec:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020cf0:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020cf4:	6812      	ldr	r2, [r2, #0]
 8020cf6:	9200      	str	r2, [sp, #0]
 8020cf8:	ed93 0a00 	vldr	s0, [r3]
 8020cfc:	4623      	mov	r3, r4
 8020cfe:	460a      	mov	r2, r1
 8020d00:	6979      	ldr	r1, [r7, #20]
 8020d02:	f7ff f8e3 	bl	801fecc <nk_textedit_find_charpos>
                font, row_height);
            state->has_preferred_x = 0;
 8020d06:	697b      	ldr	r3, [r7, #20]
 8020d08:	2200      	movs	r2, #0
 8020d0a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->cursor = find.first_char + find.length;
 8020d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d12:	441a      	add	r2, r3
 8020d14:	697b      	ldr	r3, [r7, #20]
 8020d16:	659a      	str	r2, [r3, #88]	; 0x58
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8020d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	dd11      	ble.n	8020d42 <nk_textedit_key+0x802>
 8020d1e:	697b      	ldr	r3, [r7, #20]
 8020d20:	f103 020c 	add.w	r2, r3, #12
 8020d24:	697b      	ldr	r3, [r7, #20]
 8020d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d28:	3b01      	subs	r3, #1
 8020d2a:	4619      	mov	r1, r3
 8020d2c:	4610      	mov	r0, r2
 8020d2e:	f7fc f973 	bl	801d018 <nk_str_rune_at>
 8020d32:	4603      	mov	r3, r0
 8020d34:	2b0a      	cmp	r3, #10
 8020d36:	d104      	bne.n	8020d42 <nk_textedit_key+0x802>
                --state->cursor;
 8020d38:	697b      	ldr	r3, [r7, #20]
 8020d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d3c:	1e5a      	subs	r2, r3, #1
 8020d3e:	697b      	ldr	r3, [r7, #20]
 8020d40:	659a      	str	r2, [r3, #88]	; 0x58
            state->select_end = state->cursor;
 8020d42:	697b      	ldr	r3, [r7, #20]
 8020d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020d46:	697b      	ldr	r3, [r7, #20]
 8020d48:	661a      	str	r2, [r3, #96]	; 0x60

            state->has_preferred_x = 0;
            state->cursor = find.first_char + find.length;
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
                --state->cursor;
        }} break;
 8020d4a:	e04d      	b.n	8020de8 <nk_textedit_key+0x8a8>
            nk_textedit_clamp(state);
 8020d4c:	6978      	ldr	r0, [r7, #20]
 8020d4e:	f7ff f971 	bl	8020034 <nk_textedit_clamp>
            nk_textedit_move_to_first(state);
 8020d52:	6978      	ldr	r0, [r7, #20]
 8020d54:	f7ff fa19 	bl	802018a <nk_textedit_move_to_first>
            nk_textedit_find_charpos(&find, state, state->cursor, state->single_line,
 8020d58:	697b      	ldr	r3, [r7, #20]
 8020d5a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8020d5c:	697b      	ldr	r3, [r7, #20]
 8020d5e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8020d62:	461c      	mov	r4, r3
 8020d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8020d6c:	f107 0018 	add.w	r0, r7, #24
 8020d70:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8020d74:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8020d78:	6812      	ldr	r2, [r2, #0]
 8020d7a:	9200      	str	r2, [sp, #0]
 8020d7c:	ed93 0a00 	vldr	s0, [r3]
 8020d80:	4623      	mov	r3, r4
 8020d82:	460a      	mov	r2, r1
 8020d84:	6979      	ldr	r1, [r7, #20]
 8020d86:	f7ff f8a1 	bl	801fecc <nk_textedit_find_charpos>
            state->has_preferred_x = 0;
 8020d8a:	697b      	ldr	r3, [r7, #20]
 8020d8c:	2200      	movs	r2, #0
 8020d8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            state->cursor = find.first_char + find.length;
 8020d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d96:	441a      	add	r2, r3
 8020d98:	697b      	ldr	r3, [r7, #20]
 8020d9a:	659a      	str	r2, [r3, #88]	; 0x58
            if (find.length > 0 && nk_str_rune_at(&state->string, state->cursor-1) == '\n')
 8020d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	dd22      	ble.n	8020de8 <nk_textedit_key+0x8a8>
 8020da2:	697b      	ldr	r3, [r7, #20]
 8020da4:	f103 020c 	add.w	r2, r3, #12
 8020da8:	697b      	ldr	r3, [r7, #20]
 8020daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020dac:	3b01      	subs	r3, #1
 8020dae:	4619      	mov	r1, r3
 8020db0:	4610      	mov	r0, r2
 8020db2:	f7fc f931 	bl	801d018 <nk_str_rune_at>
 8020db6:	4603      	mov	r3, r0
 8020db8:	2b0a      	cmp	r3, #10
 8020dba:	d115      	bne.n	8020de8 <nk_textedit_key+0x8a8>
                --state->cursor;
 8020dbc:	697b      	ldr	r3, [r7, #20]
 8020dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020dc0:	1e5a      	subs	r2, r3, #1
 8020dc2:	697b      	ldr	r3, [r7, #20]
 8020dc4:	659a      	str	r2, [r3, #88]	; 0x58
        }} break;
 8020dc6:	e00f      	b.n	8020de8 <nk_textedit_key+0x8a8>
    default: break;
 8020dc8:	bf00      	nop
 8020dca:	e00e      	b.n	8020dea <nk_textedit_key+0x8aa>
        break;
 8020dcc:	bf00      	nop
 8020dce:	e00c      	b.n	8020dea <nk_textedit_key+0x8aa>
        break;
 8020dd0:	bf00      	nop
 8020dd2:	e00a      	b.n	8020dea <nk_textedit_key+0x8aa>
        break;
 8020dd4:	bf00      	nop
 8020dd6:	e008      	b.n	8020dea <nk_textedit_key+0x8aa>
    } break;
 8020dd8:	bf00      	nop
 8020dda:	e006      	b.n	8020dea <nk_textedit_key+0x8aa>
      } break;
 8020ddc:	bf00      	nop
 8020dde:	e004      	b.n	8020dea <nk_textedit_key+0x8aa>
            break;
 8020de0:	bf00      	nop
 8020de2:	e002      	b.n	8020dea <nk_textedit_key+0x8aa>
            break;
 8020de4:	bf00      	nop
 8020de6:	e000      	b.n	8020dea <nk_textedit_key+0x8aa>
        }} break;
 8020de8:	bf00      	nop
    }
}
 8020dea:	bf00      	nop
 8020dec:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8020df0:	46bd      	mov	sp, r7
 8020df2:	bd90      	pop	{r4, r7, pc}

08020df4 <nk_textedit_flush_redo>:
NK_INTERN void
nk_textedit_flush_redo(struct nk_text_undo_state *state)
{
 8020df4:	b480      	push	{r7}
 8020df6:	b083      	sub	sp, #12
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	6078      	str	r0, [r7, #4]
    state->redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e02:	2263      	movs	r2, #99	; 0x63
 8020e04:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
    state->redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8020e12:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
}
 8020e16:	bf00      	nop
 8020e18:	370c      	adds	r7, #12
 8020e1a:	46bd      	mov	sp, r7
 8020e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e20:	4770      	bx	lr

08020e22 <nk_textedit_discard_undo>:
NK_INTERN void
nk_textedit_discard_undo(struct nk_text_undo_state *state)
{
 8020e22:	b580      	push	{r7, lr}
 8020e24:	b084      	sub	sp, #16
 8020e26:	af00      	add	r7, sp, #0
 8020e28:	6078      	str	r0, [r7, #4]
    /* discard the oldest entry in the undo list */
    if (state->undo_point > 0) {
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e30:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	dd7e      	ble.n	8020f36 <nk_textedit_discard_undo+0x114>
        /* if the 0th undo state has characters, clean those up */
        if (state->undo_rec[0].char_storage >= 0) {
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	db5a      	blt.n	8020ef8 <nk_textedit_discard_undo+0xd6>
            int n = state->undo_rec[0].insert_length, i;
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e48:	60bb      	str	r3, [r7, #8]
            /* delete n characters from all other records */
            state->undo_char_point = (short)(state->undo_char_point - n);
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e50:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 8020e54:	b29a      	uxth	r2, r3
 8020e56:	68bb      	ldr	r3, [r7, #8]
 8020e58:	b29b      	uxth	r3, r3
 8020e5a:	1ad3      	subs	r3, r2, r3
 8020e5c:	b29b      	uxth	r3, r3
 8020e5e:	b21a      	sxth	r2, r3
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e66:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
            NK_MEMCPY(state->undo_char, state->undo_char + n,
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	f203 40a4 	addw	r0, r3, #1188	; 0x4a4
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 8020e76:	68bb      	ldr	r3, [r7, #8]
 8020e78:	009b      	lsls	r3, r3, #2
 8020e7a:	18d1      	adds	r1, r2, r3
                (nk_size)state->undo_char_point*sizeof(nk_rune));
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020e82:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
            NK_MEMCPY(state->undo_char, state->undo_char + n,
 8020e86:	009b      	lsls	r3, r3, #2
 8020e88:	461a      	mov	r2, r3
 8020e8a:	f001 fab7 	bl	80223fc <nk_memcopy>
            for (i=0; i < state->undo_point; ++i) {
 8020e8e:	2300      	movs	r3, #0
 8020e90:	60fb      	str	r3, [r7, #12]
 8020e92:	e028      	b.n	8020ee6 <nk_textedit_discard_undo+0xc4>
                if (state->undo_rec[i].char_storage >= 0)
 8020e94:	6879      	ldr	r1, [r7, #4]
 8020e96:	68fa      	ldr	r2, [r7, #12]
 8020e98:	4613      	mov	r3, r2
 8020e9a:	005b      	lsls	r3, r3, #1
 8020e9c:	4413      	add	r3, r2
 8020e9e:	009b      	lsls	r3, r3, #2
 8020ea0:	440b      	add	r3, r1
 8020ea2:	3308      	adds	r3, #8
 8020ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ea8:	2b00      	cmp	r3, #0
 8020eaa:	db19      	blt.n	8020ee0 <nk_textedit_discard_undo+0xbe>
                state->undo_rec[i].char_storage = (short)
                    (state->undo_rec[i].char_storage - n);
 8020eac:	6879      	ldr	r1, [r7, #4]
 8020eae:	68fa      	ldr	r2, [r7, #12]
 8020eb0:	4613      	mov	r3, r2
 8020eb2:	005b      	lsls	r3, r3, #1
 8020eb4:	4413      	add	r3, r2
 8020eb6:	009b      	lsls	r3, r3, #2
 8020eb8:	440b      	add	r3, r1
 8020eba:	3308      	adds	r3, #8
 8020ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ec0:	b29a      	uxth	r2, r3
 8020ec2:	68bb      	ldr	r3, [r7, #8]
 8020ec4:	b29b      	uxth	r3, r3
 8020ec6:	1ad3      	subs	r3, r2, r3
 8020ec8:	b29b      	uxth	r3, r3
                state->undo_rec[i].char_storage = (short)
 8020eca:	b218      	sxth	r0, r3
 8020ecc:	6879      	ldr	r1, [r7, #4]
 8020ece:	68fa      	ldr	r2, [r7, #12]
 8020ed0:	4613      	mov	r3, r2
 8020ed2:	005b      	lsls	r3, r3, #1
 8020ed4:	4413      	add	r3, r2
 8020ed6:	009b      	lsls	r3, r3, #2
 8020ed8:	440b      	add	r3, r1
 8020eda:	3308      	adds	r3, #8
 8020edc:	4602      	mov	r2, r0
 8020ede:	801a      	strh	r2, [r3, #0]
            for (i=0; i < state->undo_point; ++i) {
 8020ee0:	68fb      	ldr	r3, [r7, #12]
 8020ee2:	3301      	adds	r3, #1
 8020ee4:	60fb      	str	r3, [r7, #12]
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020eec:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020ef0:	461a      	mov	r2, r3
 8020ef2:	68fb      	ldr	r3, [r7, #12]
 8020ef4:	4293      	cmp	r3, r2
 8020ef6:	dbcd      	blt.n	8020e94 <nk_textedit_discard_undo+0x72>
            }
        }
        --state->undo_point;
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020efe:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020f02:	b29b      	uxth	r3, r3
 8020f04:	3b01      	subs	r3, #1
 8020f06:	b29b      	uxth	r3, r3
 8020f08:	b21a      	sxth	r2, r3
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f10:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
        NK_MEMCPY(state->undo_rec, state->undo_rec+1,
 8020f14:	6878      	ldr	r0, [r7, #4]
 8020f16:	687b      	ldr	r3, [r7, #4]
 8020f18:	f103 010c 	add.w	r1, r3, #12
            (nk_size)((nk_size)state->undo_point * sizeof(state->undo_rec[0])));
 8020f1c:	687b      	ldr	r3, [r7, #4]
 8020f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f22:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8020f26:	461a      	mov	r2, r3
        NK_MEMCPY(state->undo_rec, state->undo_rec+1,
 8020f28:	4613      	mov	r3, r2
 8020f2a:	005b      	lsls	r3, r3, #1
 8020f2c:	4413      	add	r3, r2
 8020f2e:	009b      	lsls	r3, r3, #2
 8020f30:	461a      	mov	r2, r3
 8020f32:	f001 fa63 	bl	80223fc <nk_memcopy>
    }
}
 8020f36:	bf00      	nop
 8020f38:	3710      	adds	r7, #16
 8020f3a:	46bd      	mov	sp, r7
 8020f3c:	bd80      	pop	{r7, pc}

08020f3e <nk_textedit_discard_redo>:
NK_INTERN void
nk_textedit_discard_redo(struct nk_text_undo_state *state)
{
 8020f3e:	b580      	push	{r7, lr}
 8020f40:	b086      	sub	sp, #24
 8020f42:	af00      	add	r7, sp, #0
 8020f44:	6078      	str	r0, [r7, #4]
/*  discard the oldest entry in the redo list--it's bad if this
    ever happens, but because undo & redo have to store the actual
    characters in different cases, the redo character buffer can
    fill up even though the undo buffer didn't */
    nk_size num;
    int k = NK_TEXTEDIT_UNDOSTATECOUNT-1;
 8020f46:	2362      	movs	r3, #98	; 0x62
 8020f48:	613b      	str	r3, [r7, #16]
    if (state->redo_point <= k) {
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f50:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8020f54:	461a      	mov	r2, r3
 8020f56:	693b      	ldr	r3, [r7, #16]
 8020f58:	4293      	cmp	r3, r2
 8020f5a:	f2c0 80b9 	blt.w	80210d0 <nk_textedit_discard_redo+0x192>
        /* if the k'th undo state has characters, clean those up */
        if (state->undo_rec[k].char_storage >= 0) {
 8020f5e:	6879      	ldr	r1, [r7, #4]
 8020f60:	693a      	ldr	r2, [r7, #16]
 8020f62:	4613      	mov	r3, r2
 8020f64:	005b      	lsls	r3, r3, #1
 8020f66:	4413      	add	r3, r2
 8020f68:	009b      	lsls	r3, r3, #2
 8020f6a:	440b      	add	r3, r1
 8020f6c:	3308      	adds	r3, #8
 8020f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	db72      	blt.n	802105c <nk_textedit_discard_redo+0x11e>
            int n = state->undo_rec[k].insert_length, i;
 8020f76:	6879      	ldr	r1, [r7, #4]
 8020f78:	693a      	ldr	r2, [r7, #16]
 8020f7a:	4613      	mov	r3, r2
 8020f7c:	005b      	lsls	r3, r3, #1
 8020f7e:	4413      	add	r3, r2
 8020f80:	009b      	lsls	r3, r3, #2
 8020f82:	440b      	add	r3, r1
 8020f84:	3304      	adds	r3, #4
 8020f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f8a:	60fb      	str	r3, [r7, #12]
            /* delete n characters from all other records */
            state->redo_char_point = (short)(state->redo_char_point + n);
 8020f8c:	687b      	ldr	r3, [r7, #4]
 8020f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020f92:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020f96:	b29a      	uxth	r2, r3
 8020f98:	68fb      	ldr	r3, [r7, #12]
 8020f9a:	b29b      	uxth	r3, r3
 8020f9c:	4413      	add	r3, r2
 8020f9e:	b29b      	uxth	r3, r3
 8020fa0:	b21a      	sxth	r2, r3
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fa8:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
            num = (nk_size)(NK_TEXTEDIT_UNDOCHARCOUNT - state->redo_char_point);
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fb2:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020fb6:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8020fba:	3303      	adds	r3, #3
 8020fbc:	60bb      	str	r3, [r7, #8]
            NK_MEMCPY(state->undo_char + state->redo_char_point,
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fca:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020fce:	009b      	lsls	r3, r3, #2
 8020fd0:	18d0      	adds	r0, r2, r3
                state->undo_char + state->redo_char_point-n, num * sizeof(char));
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	f203 42a4 	addw	r2, r3, #1188	; 0x4a4
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020fde:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8020fe2:	4619      	mov	r1, r3
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	1acb      	subs	r3, r1, r3
 8020fe8:	009b      	lsls	r3, r3, #2
            NK_MEMCPY(state->undo_char + state->redo_char_point,
 8020fea:	4413      	add	r3, r2
 8020fec:	68ba      	ldr	r2, [r7, #8]
 8020fee:	4619      	mov	r1, r3
 8020ff0:	f001 fa04 	bl	80223fc <nk_memcopy>
            for (i = state->redo_point; i < k; ++i) {
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020ffa:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8020ffe:	617b      	str	r3, [r7, #20]
 8021000:	e028      	b.n	8021054 <nk_textedit_discard_redo+0x116>
                if (state->undo_rec[i].char_storage >= 0) {
 8021002:	6879      	ldr	r1, [r7, #4]
 8021004:	697a      	ldr	r2, [r7, #20]
 8021006:	4613      	mov	r3, r2
 8021008:	005b      	lsls	r3, r3, #1
 802100a:	4413      	add	r3, r2
 802100c:	009b      	lsls	r3, r3, #2
 802100e:	440b      	add	r3, r1
 8021010:	3308      	adds	r3, #8
 8021012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021016:	2b00      	cmp	r3, #0
 8021018:	db19      	blt.n	802104e <nk_textedit_discard_redo+0x110>
                    state->undo_rec[i].char_storage = (short)
                        (state->undo_rec[i].char_storage + n);
 802101a:	6879      	ldr	r1, [r7, #4]
 802101c:	697a      	ldr	r2, [r7, #20]
 802101e:	4613      	mov	r3, r2
 8021020:	005b      	lsls	r3, r3, #1
 8021022:	4413      	add	r3, r2
 8021024:	009b      	lsls	r3, r3, #2
 8021026:	440b      	add	r3, r1
 8021028:	3308      	adds	r3, #8
 802102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802102e:	b29a      	uxth	r2, r3
 8021030:	68fb      	ldr	r3, [r7, #12]
 8021032:	b29b      	uxth	r3, r3
 8021034:	4413      	add	r3, r2
 8021036:	b29b      	uxth	r3, r3
                    state->undo_rec[i].char_storage = (short)
 8021038:	b218      	sxth	r0, r3
 802103a:	6879      	ldr	r1, [r7, #4]
 802103c:	697a      	ldr	r2, [r7, #20]
 802103e:	4613      	mov	r3, r2
 8021040:	005b      	lsls	r3, r3, #1
 8021042:	4413      	add	r3, r2
 8021044:	009b      	lsls	r3, r3, #2
 8021046:	440b      	add	r3, r1
 8021048:	3308      	adds	r3, #8
 802104a:	4602      	mov	r2, r0
 802104c:	801a      	strh	r2, [r3, #0]
            for (i = state->redo_point; i < k; ++i) {
 802104e:	697b      	ldr	r3, [r7, #20]
 8021050:	3301      	adds	r3, #1
 8021052:	617b      	str	r3, [r7, #20]
 8021054:	697a      	ldr	r2, [r7, #20]
 8021056:	693b      	ldr	r3, [r7, #16]
 8021058:	429a      	cmp	r2, r3
 802105a:	dbd2      	blt.n	8021002 <nk_textedit_discard_redo+0xc4>
                }
            }
        }
        ++state->redo_point;
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021062:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021066:	b29b      	uxth	r3, r3
 8021068:	3301      	adds	r3, #1
 802106a:	b29b      	uxth	r3, r3
 802106c:	b21a      	sxth	r2, r3
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021074:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
        num = (nk_size)(NK_TEXTEDIT_UNDOSTATECOUNT - state->redo_point);
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802107e:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021082:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8021086:	60bb      	str	r3, [r7, #8]
        if (num) NK_MEMCPY(state->undo_rec + state->redo_point-1,
 8021088:	68bb      	ldr	r3, [r7, #8]
 802108a:	2b00      	cmp	r3, #0
 802108c:	d020      	beq.n	80210d0 <nk_textedit_discard_redo+0x192>
 802108e:	687a      	ldr	r2, [r7, #4]
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021096:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802109a:	4619      	mov	r1, r3
 802109c:	460b      	mov	r3, r1
 802109e:	005b      	lsls	r3, r3, #1
 80210a0:	440b      	add	r3, r1
 80210a2:	009b      	lsls	r3, r3, #2
 80210a4:	3b0c      	subs	r3, #12
 80210a6:	18d0      	adds	r0, r2, r3
            state->undo_rec + state->redo_point, num * sizeof(state->undo_rec[0]));
 80210a8:	687a      	ldr	r2, [r7, #4]
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210b0:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80210b4:	4619      	mov	r1, r3
 80210b6:	460b      	mov	r3, r1
 80210b8:	005b      	lsls	r3, r3, #1
 80210ba:	440b      	add	r3, r1
 80210bc:	009b      	lsls	r3, r3, #2
        if (num) NK_MEMCPY(state->undo_rec + state->redo_point-1,
 80210be:	18d1      	adds	r1, r2, r3
 80210c0:	68ba      	ldr	r2, [r7, #8]
 80210c2:	4613      	mov	r3, r2
 80210c4:	005b      	lsls	r3, r3, #1
 80210c6:	4413      	add	r3, r2
 80210c8:	009b      	lsls	r3, r3, #2
 80210ca:	461a      	mov	r2, r3
 80210cc:	f001 f996 	bl	80223fc <nk_memcopy>
    }
}
 80210d0:	bf00      	nop
 80210d2:	3718      	adds	r7, #24
 80210d4:	46bd      	mov	sp, r7
 80210d6:	bd80      	pop	{r7, pc}

080210d8 <nk_textedit_create_undo_record>:
NK_INTERN struct nk_text_undo_record*
nk_textedit_create_undo_record(struct nk_text_undo_state *state, int numchars)
{
 80210d8:	b580      	push	{r7, lr}
 80210da:	b082      	sub	sp, #8
 80210dc:	af00      	add	r7, sp, #0
 80210de:	6078      	str	r0, [r7, #4]
 80210e0:	6039      	str	r1, [r7, #0]
    /* any time we create a new undo record, we discard redo*/
    nk_textedit_flush_redo(state);
 80210e2:	6878      	ldr	r0, [r7, #4]
 80210e4:	f7ff fe86 	bl	8020df4 <nk_textedit_flush_redo>

    /* if we have no free records, we have to make room,
     * by sliding the existing records down */
    if (state->undo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 80210e8:	687b      	ldr	r3, [r7, #4]
 80210ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210ee:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80210f2:	2b63      	cmp	r3, #99	; 0x63
 80210f4:	d102      	bne.n	80210fc <nk_textedit_create_undo_record+0x24>
        nk_textedit_discard_undo(state);
 80210f6:	6878      	ldr	r0, [r7, #4]
 80210f8:	f7ff fe93 	bl	8020e22 <nk_textedit_discard_undo>

    /* if the characters to store won't possibly fit in the buffer,
     * we can't undo */
    if (numchars > NK_TEXTEDIT_UNDOCHARCOUNT) {
 80210fc:	683b      	ldr	r3, [r7, #0]
 80210fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021102:	db10      	blt.n	8021126 <nk_textedit_create_undo_record+0x4e>
        state->undo_point = 0;
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802110a:	2200      	movs	r2, #0
 802110c:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
        state->undo_char_point = 0;
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021116:	2200      	movs	r2, #0
 8021118:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
        return 0;
 802111c:	2300      	movs	r3, #0
 802111e:	e021      	b.n	8021164 <nk_textedit_create_undo_record+0x8c>
    }

    /* if we don't have enough free characters in the buffer,
     * we have to make room */
    while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)
        nk_textedit_discard_undo(state);
 8021120:	6878      	ldr	r0, [r7, #4]
 8021122:	f7ff fe7e 	bl	8020e22 <nk_textedit_discard_undo>
    while (state->undo_char_point + numchars > NK_TEXTEDIT_UNDOCHARCOUNT)
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802112c:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 8021130:	461a      	mov	r2, r3
 8021132:	683b      	ldr	r3, [r7, #0]
 8021134:	4413      	add	r3, r2
 8021136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802113a:	daf1      	bge.n	8021120 <nk_textedit_create_undo_record+0x48>
    return &state->undo_rec[state->undo_point++];
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021142:	f9b3 2440 	ldrsh.w	r2, [r3, #1088]	; 0x440
 8021146:	b293      	uxth	r3, r2
 8021148:	3301      	adds	r3, #1
 802114a:	b29b      	uxth	r3, r3
 802114c:	b219      	sxth	r1, r3
 802114e:	687b      	ldr	r3, [r7, #4]
 8021150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021154:	f8a3 1440 	strh.w	r1, [r3, #1088]	; 0x440
 8021158:	4613      	mov	r3, r2
 802115a:	005b      	lsls	r3, r3, #1
 802115c:	4413      	add	r3, r2
 802115e:	009b      	lsls	r3, r3, #2
 8021160:	687a      	ldr	r2, [r7, #4]
 8021162:	4413      	add	r3, r2
}
 8021164:	4618      	mov	r0, r3
 8021166:	3708      	adds	r7, #8
 8021168:	46bd      	mov	sp, r7
 802116a:	bd80      	pop	{r7, pc}

0802116c <nk_textedit_createundo>:
NK_INTERN nk_rune*
nk_textedit_createundo(struct nk_text_undo_state *state, int pos,
    int insert_len, int delete_len)
{
 802116c:	b580      	push	{r7, lr}
 802116e:	b086      	sub	sp, #24
 8021170:	af00      	add	r7, sp, #0
 8021172:	60f8      	str	r0, [r7, #12]
 8021174:	60b9      	str	r1, [r7, #8]
 8021176:	607a      	str	r2, [r7, #4]
 8021178:	603b      	str	r3, [r7, #0]
    struct nk_text_undo_record *r = nk_textedit_create_undo_record(state, insert_len);
 802117a:	6879      	ldr	r1, [r7, #4]
 802117c:	68f8      	ldr	r0, [r7, #12]
 802117e:	f7ff ffab 	bl	80210d8 <nk_textedit_create_undo_record>
 8021182:	6178      	str	r0, [r7, #20]
    if (r == 0)
 8021184:	697b      	ldr	r3, [r7, #20]
 8021186:	2b00      	cmp	r3, #0
 8021188:	d101      	bne.n	802118e <nk_textedit_createundo+0x22>
        return 0;
 802118a:	2300      	movs	r3, #0
 802118c:	e033      	b.n	80211f6 <nk_textedit_createundo+0x8a>

    r->where = pos;
 802118e:	697b      	ldr	r3, [r7, #20]
 8021190:	68ba      	ldr	r2, [r7, #8]
 8021192:	601a      	str	r2, [r3, #0]
    r->insert_length = (short) insert_len;
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	b21a      	sxth	r2, r3
 8021198:	697b      	ldr	r3, [r7, #20]
 802119a:	809a      	strh	r2, [r3, #4]
    r->delete_length = (short) delete_len;
 802119c:	683b      	ldr	r3, [r7, #0]
 802119e:	b21a      	sxth	r2, r3
 80211a0:	697b      	ldr	r3, [r7, #20]
 80211a2:	80da      	strh	r2, [r3, #6]

    if (insert_len == 0) {
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	d105      	bne.n	80211b6 <nk_textedit_createundo+0x4a>
        r->char_storage = -1;
 80211aa:	697b      	ldr	r3, [r7, #20]
 80211ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80211b0:	811a      	strh	r2, [r3, #8]
        return 0;
 80211b2:	2300      	movs	r3, #0
 80211b4:	e01f      	b.n	80211f6 <nk_textedit_createundo+0x8a>
    } else {
        r->char_storage = state->undo_char_point;
 80211b6:	68fb      	ldr	r3, [r7, #12]
 80211b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211bc:	f9b3 2444 	ldrsh.w	r2, [r3, #1092]	; 0x444
 80211c0:	697b      	ldr	r3, [r7, #20]
 80211c2:	811a      	strh	r2, [r3, #8]
        state->undo_char_point = (short)(state->undo_char_point +  insert_len);
 80211c4:	68fb      	ldr	r3, [r7, #12]
 80211c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211ca:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80211ce:	b29a      	uxth	r2, r3
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	b29b      	uxth	r3, r3
 80211d4:	4413      	add	r3, r2
 80211d6:	b29b      	uxth	r3, r3
 80211d8:	b21a      	sxth	r2, r3
 80211da:	68fb      	ldr	r3, [r7, #12]
 80211dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80211e0:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
        return &state->undo_char[r->char_storage];
 80211e4:	697b      	ldr	r3, [r7, #20]
 80211e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80211ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80211ee:	009b      	lsls	r3, r3, #2
 80211f0:	68fa      	ldr	r2, [r7, #12]
 80211f2:	4413      	add	r3, r2
 80211f4:	3304      	adds	r3, #4
    }
}
 80211f6:	4618      	mov	r0, r3
 80211f8:	3718      	adds	r7, #24
 80211fa:	46bd      	mov	sp, r7
 80211fc:	bd80      	pop	{r7, pc}

080211fe <nk_textedit_undo>:
NK_API void
nk_textedit_undo(struct nk_text_edit *state)
{
 80211fe:	b590      	push	{r4, r7, lr}
 8021200:	b089      	sub	sp, #36	; 0x24
 8021202:	af00      	add	r7, sp, #0
 8021204:	6078      	str	r0, [r7, #4]
    struct nk_text_undo_state *s = &state->undo;
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	3370      	adds	r3, #112	; 0x70
 802120a:	61bb      	str	r3, [r7, #24]
    struct nk_text_undo_record u, *r;
    if (s->undo_point == 0)
 802120c:	69bb      	ldr	r3, [r7, #24]
 802120e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021212:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8021216:	2b00      	cmp	r3, #0
 8021218:	f000 8101 	beq.w	802141e <nk_textedit_undo+0x220>
        return;

    /* we need to do two things: apply the undo record, and create a redo record */
    u = s->undo_rec[s->undo_point-1];
 802121c:	69bb      	ldr	r3, [r7, #24]
 802121e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021222:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8021226:	1e5a      	subs	r2, r3, #1
 8021228:	69b9      	ldr	r1, [r7, #24]
 802122a:	4613      	mov	r3, r2
 802122c:	005b      	lsls	r3, r3, #1
 802122e:	4413      	add	r3, r2
 8021230:	009b      	lsls	r3, r3, #2
 8021232:	18ca      	adds	r2, r1, r3
 8021234:	f107 0308 	add.w	r3, r7, #8
 8021238:	ca07      	ldmia	r2, {r0, r1, r2}
 802123a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    r = &s->undo_rec[s->redo_point-1];
 802123e:	69bb      	ldr	r3, [r7, #24]
 8021240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021244:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021248:	1e5a      	subs	r2, r3, #1
 802124a:	4613      	mov	r3, r2
 802124c:	005b      	lsls	r3, r3, #1
 802124e:	4413      	add	r3, r2
 8021250:	009b      	lsls	r3, r3, #2
 8021252:	69ba      	ldr	r2, [r7, #24]
 8021254:	4413      	add	r3, r2
 8021256:	617b      	str	r3, [r7, #20]
    r->char_storage = -1;
 8021258:	697b      	ldr	r3, [r7, #20]
 802125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802125e:	811a      	strh	r2, [r3, #8]

    r->insert_length = u.delete_length;
 8021260:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021264:	697b      	ldr	r3, [r7, #20]
 8021266:	809a      	strh	r2, [r3, #4]
    r->delete_length = u.insert_length;
 8021268:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802126c:	697b      	ldr	r3, [r7, #20]
 802126e:	80da      	strh	r2, [r3, #6]
    r->where = u.where;
 8021270:	68ba      	ldr	r2, [r7, #8]
 8021272:	697b      	ldr	r3, [r7, #20]
 8021274:	601a      	str	r2, [r3, #0]

    if (u.delete_length)
 8021276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802127a:	2b00      	cmp	r3, #0
 802127c:	f000 8082 	beq.w	8021384 <nk_textedit_undo+0x186>
            there are three cases:
                - there's enough room to store the characters
                - characters stored for *redoing* don't leave room for redo
                - characters stored for *undoing* don't leave room for redo
            if the last is true, we have to bail */
        if (s->undo_char_point + u.delete_length >= NK_TEXTEDIT_UNDOCHARCOUNT) {
 8021280:	69bb      	ldr	r3, [r7, #24]
 8021282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021286:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 802128a:	461a      	mov	r2, r3
 802128c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021290:	4413      	add	r3, r2
 8021292:	f240 32e6 	movw	r2, #998	; 0x3e6
 8021296:	4293      	cmp	r3, r2
 8021298:	dd0e      	ble.n	80212b8 <nk_textedit_undo+0xba>
            /* the undo records take up too much character space; there's no space
            * to store the redo characters */
            r->insert_length = 0;
 802129a:	697b      	ldr	r3, [r7, #20]
 802129c:	2200      	movs	r2, #0
 802129e:	809a      	strh	r2, [r3, #4]
 80212a0:	e068      	b.n	8021374 <nk_textedit_undo+0x176>
        } else {
            int i;
            /* there's definitely room to store the characters eventually */
            while (s->undo_char_point + u.delete_length > s->redo_char_point) {
                /* there's currently not enough room, so discard a redo record */
                nk_textedit_discard_redo(s);
 80212a2:	69b8      	ldr	r0, [r7, #24]
 80212a4:	f7ff fe4b 	bl	8020f3e <nk_textedit_discard_redo>
                /* should never happen: */
                if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 80212a8:	69bb      	ldr	r3, [r7, #24]
 80212aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212ae:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80212b2:	2b63      	cmp	r3, #99	; 0x63
 80212b4:	f000 80b5 	beq.w	8021422 <nk_textedit_undo+0x224>
            while (s->undo_char_point + u.delete_length > s->redo_char_point) {
 80212b8:	69bb      	ldr	r3, [r7, #24]
 80212ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212be:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80212c2:	461a      	mov	r2, r3
 80212c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80212c8:	4413      	add	r3, r2
 80212ca:	69ba      	ldr	r2, [r7, #24]
 80212cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80212d0:	f9b2 2446 	ldrsh.w	r2, [r2, #1094]	; 0x446
 80212d4:	4293      	cmp	r3, r2
 80212d6:	dce4      	bgt.n	80212a2 <nk_textedit_undo+0xa4>
                    return;
            }

            r = &s->undo_rec[s->redo_point-1];
 80212d8:	69bb      	ldr	r3, [r7, #24]
 80212da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212de:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80212e2:	1e5a      	subs	r2, r3, #1
 80212e4:	4613      	mov	r3, r2
 80212e6:	005b      	lsls	r3, r3, #1
 80212e8:	4413      	add	r3, r2
 80212ea:	009b      	lsls	r3, r3, #2
 80212ec:	69ba      	ldr	r2, [r7, #24]
 80212ee:	4413      	add	r3, r2
 80212f0:	617b      	str	r3, [r7, #20]
            r->char_storage = (short)(s->redo_char_point - u.delete_length);
 80212f2:	69bb      	ldr	r3, [r7, #24]
 80212f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212f8:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 80212fc:	b29a      	uxth	r2, r3
 80212fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021302:	b29b      	uxth	r3, r3
 8021304:	1ad3      	subs	r3, r2, r3
 8021306:	b29b      	uxth	r3, r3
 8021308:	b21a      	sxth	r2, r3
 802130a:	697b      	ldr	r3, [r7, #20]
 802130c:	811a      	strh	r2, [r3, #8]
            s->redo_char_point = (short)(s->redo_char_point -  u.delete_length);
 802130e:	69bb      	ldr	r3, [r7, #24]
 8021310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021314:	f9b3 3446 	ldrsh.w	r3, [r3, #1094]	; 0x446
 8021318:	b29a      	uxth	r2, r3
 802131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802131e:	b29b      	uxth	r3, r3
 8021320:	1ad3      	subs	r3, r2, r3
 8021322:	b29b      	uxth	r3, r3
 8021324:	b21a      	sxth	r2, r3
 8021326:	69bb      	ldr	r3, [r7, #24]
 8021328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802132c:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446

            /* now save the characters */
            for (i=0; i < u.delete_length; ++i)
 8021330:	2300      	movs	r3, #0
 8021332:	61fb      	str	r3, [r7, #28]
 8021334:	e018      	b.n	8021368 <nk_textedit_undo+0x16a>
                s->undo_char[r->char_storage + i] =
                    nk_str_rune_at(&state->string, u.where + i);
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	f103 000c 	add.w	r0, r3, #12
 802133c:	68ba      	ldr	r2, [r7, #8]
 802133e:	69fb      	ldr	r3, [r7, #28]
 8021340:	441a      	add	r2, r3
                s->undo_char[r->char_storage + i] =
 8021342:	697b      	ldr	r3, [r7, #20]
 8021344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021348:	4619      	mov	r1, r3
 802134a:	69fb      	ldr	r3, [r7, #28]
 802134c:	18cc      	adds	r4, r1, r3
                    nk_str_rune_at(&state->string, u.where + i);
 802134e:	4611      	mov	r1, r2
 8021350:	f7fb fe62 	bl	801d018 <nk_str_rune_at>
 8021354:	4601      	mov	r1, r0
                s->undo_char[r->char_storage + i] =
 8021356:	69ba      	ldr	r2, [r7, #24]
 8021358:	f504 7394 	add.w	r3, r4, #296	; 0x128
 802135c:	009b      	lsls	r3, r3, #2
 802135e:	4413      	add	r3, r2
 8021360:	6059      	str	r1, [r3, #4]
            for (i=0; i < u.delete_length; ++i)
 8021362:	69fb      	ldr	r3, [r7, #28]
 8021364:	3301      	adds	r3, #1
 8021366:	61fb      	str	r3, [r7, #28]
 8021368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802136c:	461a      	mov	r2, r3
 802136e:	69fb      	ldr	r3, [r7, #28]
 8021370:	4293      	cmp	r3, r2
 8021372:	dbe0      	blt.n	8021336 <nk_textedit_undo+0x138>
        }
        /* now we can carry out the deletion */
        nk_str_delete_runes(&state->string, u.where, u.delete_length);
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	330c      	adds	r3, #12
 8021378:	68b9      	ldr	r1, [r7, #8]
 802137a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802137e:	4618      	mov	r0, r3
 8021380:	f7fb fcc4 	bl	801cd0c <nk_str_delete_runes>
    }

    /* check type of recorded action: */
    if (u.insert_length) {
 8021384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021388:	2b00      	cmp	r3, #0
 802138a:	d020      	beq.n	80213ce <nk_textedit_undo+0x1d0>
        /* easy case: was a deletion, so we need to insert n characters */
        nk_str_insert_text_runes(&state->string, u.where,
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	f103 000c 	add.w	r0, r3, #12
 8021392:	68b9      	ldr	r1, [r7, #8]
            &s->undo_char[u.char_storage], u.insert_length);
 8021394:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8021398:	f503 7394 	add.w	r3, r3, #296	; 0x128
 802139c:	009b      	lsls	r3, r3, #2
 802139e:	69ba      	ldr	r2, [r7, #24]
 80213a0:	4413      	add	r3, r2
 80213a2:	1d1a      	adds	r2, r3, #4
 80213a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
        nk_str_insert_text_runes(&state->string, u.where,
 80213a8:	f7fb fb9e 	bl	801cae8 <nk_str_insert_text_runes>
        s->undo_char_point = (short)(s->undo_char_point - u.insert_length);
 80213ac:	69bb      	ldr	r3, [r7, #24]
 80213ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213b2:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80213b6:	b29a      	uxth	r2, r3
 80213b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80213bc:	b29b      	uxth	r3, r3
 80213be:	1ad3      	subs	r3, r2, r3
 80213c0:	b29b      	uxth	r3, r3
 80213c2:	b21a      	sxth	r2, r3
 80213c4:	69bb      	ldr	r3, [r7, #24]
 80213c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213ca:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
    }
    state->cursor = (short)(u.where + u.insert_length);
 80213ce:	68bb      	ldr	r3, [r7, #8]
 80213d0:	b29a      	uxth	r2, r3
 80213d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80213d6:	b29b      	uxth	r3, r3
 80213d8:	4413      	add	r3, r2
 80213da:	b29b      	uxth	r3, r3
 80213dc:	b21b      	sxth	r3, r3
 80213de:	461a      	mov	r2, r3
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	659a      	str	r2, [r3, #88]	; 0x58

    s->undo_point--;
 80213e4:	69bb      	ldr	r3, [r7, #24]
 80213e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213ea:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80213ee:	b29b      	uxth	r3, r3
 80213f0:	3b01      	subs	r3, #1
 80213f2:	b29b      	uxth	r3, r3
 80213f4:	b21a      	sxth	r2, r3
 80213f6:	69bb      	ldr	r3, [r7, #24]
 80213f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80213fc:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
    s->redo_point--;
 8021400:	69bb      	ldr	r3, [r7, #24]
 8021402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021406:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802140a:	b29b      	uxth	r3, r3
 802140c:	3b01      	subs	r3, #1
 802140e:	b29b      	uxth	r3, r3
 8021410:	b21a      	sxth	r2, r3
 8021412:	69bb      	ldr	r3, [r7, #24]
 8021414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021418:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
 802141c:	e002      	b.n	8021424 <nk_textedit_undo+0x226>
        return;
 802141e:	bf00      	nop
 8021420:	e000      	b.n	8021424 <nk_textedit_undo+0x226>
                    return;
 8021422:	bf00      	nop
}
 8021424:	3724      	adds	r7, #36	; 0x24
 8021426:	46bd      	mov	sp, r7
 8021428:	bd90      	pop	{r4, r7, pc}

0802142a <nk_textedit_redo>:
NK_API void
nk_textedit_redo(struct nk_text_edit *state)
{
 802142a:	b590      	push	{r4, r7, lr}
 802142c:	b089      	sub	sp, #36	; 0x24
 802142e:	af00      	add	r7, sp, #0
 8021430:	6078      	str	r0, [r7, #4]
    struct nk_text_undo_state *s = &state->undo;
 8021432:	687b      	ldr	r3, [r7, #4]
 8021434:	3370      	adds	r3, #112	; 0x70
 8021436:	61bb      	str	r3, [r7, #24]
    struct nk_text_undo_record *u, r;
    if (s->redo_point == NK_TEXTEDIT_UNDOSTATECOUNT)
 8021438:	69bb      	ldr	r3, [r7, #24]
 802143a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802143e:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 8021442:	2b63      	cmp	r3, #99	; 0x63
 8021444:	f000 80c5 	beq.w	80215d2 <nk_textedit_redo+0x1a8>
        return;

    /* we need to do two things: apply the redo record, and create an undo record */
    u = &s->undo_rec[s->undo_point];
 8021448:	69bb      	ldr	r3, [r7, #24]
 802144a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802144e:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 8021452:	461a      	mov	r2, r3
 8021454:	4613      	mov	r3, r2
 8021456:	005b      	lsls	r3, r3, #1
 8021458:	4413      	add	r3, r2
 802145a:	009b      	lsls	r3, r3, #2
 802145c:	69ba      	ldr	r2, [r7, #24]
 802145e:	4413      	add	r3, r2
 8021460:	617b      	str	r3, [r7, #20]
    r = s->undo_rec[s->redo_point];
 8021462:	69bb      	ldr	r3, [r7, #24]
 8021464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021468:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 802146c:	4619      	mov	r1, r3
 802146e:	69ba      	ldr	r2, [r7, #24]
 8021470:	460b      	mov	r3, r1
 8021472:	005b      	lsls	r3, r3, #1
 8021474:	440b      	add	r3, r1
 8021476:	009b      	lsls	r3, r3, #2
 8021478:	441a      	add	r2, r3
 802147a:	f107 0308 	add.w	r3, r7, #8
 802147e:	ca07      	ldmia	r2, {r0, r1, r2}
 8021480:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* we KNOW there must be room for the undo record, because the redo record
    was derived from an undo record */
    u->delete_length = r.insert_length;
 8021484:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8021488:	697b      	ldr	r3, [r7, #20]
 802148a:	80da      	strh	r2, [r3, #6]
    u->insert_length = r.delete_length;
 802148c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021490:	697b      	ldr	r3, [r7, #20]
 8021492:	809a      	strh	r2, [r3, #4]
    u->where = r.where;
 8021494:	68ba      	ldr	r2, [r7, #8]
 8021496:	697b      	ldr	r3, [r7, #20]
 8021498:	601a      	str	r2, [r3, #0]
    u->char_storage = -1;
 802149a:	697b      	ldr	r3, [r7, #20]
 802149c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80214a0:	811a      	strh	r2, [r3, #8]

    if (r.delete_length) {
 80214a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d05c      	beq.n	8021564 <nk_textedit_redo+0x13a>
        /* the redo record requires us to delete characters, so the undo record
        needs to store the characters */
        if (s->undo_char_point + u->insert_length > s->redo_char_point) {
 80214aa:	69bb      	ldr	r3, [r7, #24]
 80214ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80214b0:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80214b4:	461a      	mov	r2, r3
 80214b6:	697b      	ldr	r3, [r7, #20]
 80214b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80214bc:	4413      	add	r3, r2
 80214be:	69ba      	ldr	r2, [r7, #24]
 80214c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80214c4:	f9b2 2446 	ldrsh.w	r2, [r2, #1094]	; 0x446
 80214c8:	4293      	cmp	r3, r2
 80214ca:	dd06      	ble.n	80214da <nk_textedit_redo+0xb0>
            u->insert_length = 0;
 80214cc:	697b      	ldr	r3, [r7, #20]
 80214ce:	2200      	movs	r2, #0
 80214d0:	809a      	strh	r2, [r3, #4]
            u->delete_length = 0;
 80214d2:	697b      	ldr	r3, [r7, #20]
 80214d4:	2200      	movs	r2, #0
 80214d6:	80da      	strh	r2, [r3, #6]
 80214d8:	e03c      	b.n	8021554 <nk_textedit_redo+0x12a>
        } else {
            int i;
            u->char_storage = s->undo_char_point;
 80214da:	69bb      	ldr	r3, [r7, #24]
 80214dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80214e0:	f9b3 2444 	ldrsh.w	r2, [r3, #1092]	; 0x444
 80214e4:	697b      	ldr	r3, [r7, #20]
 80214e6:	811a      	strh	r2, [r3, #8]
            s->undo_char_point = (short)(s->undo_char_point + u->insert_length);
 80214e8:	69bb      	ldr	r3, [r7, #24]
 80214ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80214ee:	f9b3 3444 	ldrsh.w	r3, [r3, #1092]	; 0x444
 80214f2:	b29a      	uxth	r2, r3
 80214f4:	697b      	ldr	r3, [r7, #20]
 80214f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80214fa:	b29b      	uxth	r3, r3
 80214fc:	4413      	add	r3, r2
 80214fe:	b29b      	uxth	r3, r3
 8021500:	b21a      	sxth	r2, r3
 8021502:	69bb      	ldr	r3, [r7, #24]
 8021504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021508:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

            /* now save the characters */
            for (i=0; i < u->insert_length; ++i) {
 802150c:	2300      	movs	r3, #0
 802150e:	61fb      	str	r3, [r7, #28]
 8021510:	e019      	b.n	8021546 <nk_textedit_redo+0x11c>
                s->undo_char[u->char_storage + i] =
                    nk_str_rune_at(&state->string, u->where + i);
 8021512:	687b      	ldr	r3, [r7, #4]
 8021514:	f103 000c 	add.w	r0, r3, #12
 8021518:	697b      	ldr	r3, [r7, #20]
 802151a:	681a      	ldr	r2, [r3, #0]
 802151c:	69fb      	ldr	r3, [r7, #28]
 802151e:	441a      	add	r2, r3
                s->undo_char[u->char_storage + i] =
 8021520:	697b      	ldr	r3, [r7, #20]
 8021522:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021526:	4619      	mov	r1, r3
 8021528:	69fb      	ldr	r3, [r7, #28]
 802152a:	18cc      	adds	r4, r1, r3
                    nk_str_rune_at(&state->string, u->where + i);
 802152c:	4611      	mov	r1, r2
 802152e:	f7fb fd73 	bl	801d018 <nk_str_rune_at>
 8021532:	4601      	mov	r1, r0
                s->undo_char[u->char_storage + i] =
 8021534:	69ba      	ldr	r2, [r7, #24]
 8021536:	f504 7394 	add.w	r3, r4, #296	; 0x128
 802153a:	009b      	lsls	r3, r3, #2
 802153c:	4413      	add	r3, r2
 802153e:	6059      	str	r1, [r3, #4]
            for (i=0; i < u->insert_length; ++i) {
 8021540:	69fb      	ldr	r3, [r7, #28]
 8021542:	3301      	adds	r3, #1
 8021544:	61fb      	str	r3, [r7, #28]
 8021546:	697b      	ldr	r3, [r7, #20]
 8021548:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802154c:	461a      	mov	r2, r3
 802154e:	69fb      	ldr	r3, [r7, #28]
 8021550:	4293      	cmp	r3, r2
 8021552:	dbde      	blt.n	8021512 <nk_textedit_redo+0xe8>
            }
        }
        nk_str_delete_runes(&state->string, r.where, r.delete_length);
 8021554:	687b      	ldr	r3, [r7, #4]
 8021556:	330c      	adds	r3, #12
 8021558:	68b9      	ldr	r1, [r7, #8]
 802155a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802155e:	4618      	mov	r0, r3
 8021560:	f7fb fbd4 	bl	801cd0c <nk_str_delete_runes>
    }

    if (r.insert_length) {
 8021564:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021568:	2b00      	cmp	r3, #0
 802156a:	d00f      	beq.n	802158c <nk_textedit_redo+0x162>
        /* easy case: need to insert n characters */
        nk_str_insert_text_runes(&state->string, r.where,
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	f103 000c 	add.w	r0, r3, #12
 8021572:	68b9      	ldr	r1, [r7, #8]
            &s->undo_char[r.char_storage], r.insert_length);
 8021574:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8021578:	f503 7394 	add.w	r3, r3, #296	; 0x128
 802157c:	009b      	lsls	r3, r3, #2
 802157e:	69ba      	ldr	r2, [r7, #24]
 8021580:	4413      	add	r3, r2
 8021582:	1d1a      	adds	r2, r3, #4
 8021584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
        nk_str_insert_text_runes(&state->string, r.where,
 8021588:	f7fb faae 	bl	801cae8 <nk_str_insert_text_runes>
    }
    state->cursor = r.where + r.insert_length;
 802158c:	68bb      	ldr	r3, [r7, #8]
 802158e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8021592:	441a      	add	r2, r3
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	659a      	str	r2, [r3, #88]	; 0x58

    s->undo_point++;
 8021598:	69bb      	ldr	r3, [r7, #24]
 802159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802159e:	f9b3 3440 	ldrsh.w	r3, [r3, #1088]	; 0x440
 80215a2:	b29b      	uxth	r3, r3
 80215a4:	3301      	adds	r3, #1
 80215a6:	b29b      	uxth	r3, r3
 80215a8:	b21a      	sxth	r2, r3
 80215aa:	69bb      	ldr	r3, [r7, #24]
 80215ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80215b0:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440
    s->redo_point++;
 80215b4:	69bb      	ldr	r3, [r7, #24]
 80215b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80215ba:	f9b3 3442 	ldrsh.w	r3, [r3, #1090]	; 0x442
 80215be:	b29b      	uxth	r3, r3
 80215c0:	3301      	adds	r3, #1
 80215c2:	b29b      	uxth	r3, r3
 80215c4:	b21a      	sxth	r2, r3
 80215c6:	69bb      	ldr	r3, [r7, #24]
 80215c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80215cc:	f8a3 2442 	strh.w	r2, [r3, #1090]	; 0x442
 80215d0:	e000      	b.n	80215d4 <nk_textedit_redo+0x1aa>
        return;
 80215d2:	bf00      	nop
}
 80215d4:	3724      	adds	r7, #36	; 0x24
 80215d6:	46bd      	mov	sp, r7
 80215d8:	bd90      	pop	{r4, r7, pc}

080215da <nk_textedit_makeundo_insert>:
NK_INTERN void
nk_textedit_makeundo_insert(struct nk_text_edit *state, int where, int length)
{
 80215da:	b580      	push	{r7, lr}
 80215dc:	b084      	sub	sp, #16
 80215de:	af00      	add	r7, sp, #0
 80215e0:	60f8      	str	r0, [r7, #12]
 80215e2:	60b9      	str	r1, [r7, #8]
 80215e4:	607a      	str	r2, [r7, #4]
    nk_textedit_createundo(&state->undo, where, 0, length);
 80215e6:	68fb      	ldr	r3, [r7, #12]
 80215e8:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	2200      	movs	r2, #0
 80215f0:	68b9      	ldr	r1, [r7, #8]
 80215f2:	f7ff fdbb 	bl	802116c <nk_textedit_createundo>
}
 80215f6:	bf00      	nop
 80215f8:	3710      	adds	r7, #16
 80215fa:	46bd      	mov	sp, r7
 80215fc:	bd80      	pop	{r7, pc}

080215fe <nk_textedit_makeundo_delete>:
NK_INTERN void
nk_textedit_makeundo_delete(struct nk_text_edit *state, int where, int length)
{
 80215fe:	b590      	push	{r4, r7, lr}
 8021600:	b087      	sub	sp, #28
 8021602:	af00      	add	r7, sp, #0
 8021604:	60f8      	str	r0, [r7, #12]
 8021606:	60b9      	str	r1, [r7, #8]
 8021608:	607a      	str	r2, [r7, #4]
    int i;
    nk_rune *p = nk_textedit_createundo(&state->undo, where, length, 0);
 802160a:	68fb      	ldr	r3, [r7, #12]
 802160c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8021610:	2300      	movs	r3, #0
 8021612:	687a      	ldr	r2, [r7, #4]
 8021614:	68b9      	ldr	r1, [r7, #8]
 8021616:	f7ff fda9 	bl	802116c <nk_textedit_createundo>
 802161a:	6138      	str	r0, [r7, #16]
    if (p) {
 802161c:	693b      	ldr	r3, [r7, #16]
 802161e:	2b00      	cmp	r3, #0
 8021620:	d017      	beq.n	8021652 <nk_textedit_makeundo_delete+0x54>
        for (i=0; i < length; ++i)
 8021622:	2300      	movs	r3, #0
 8021624:	617b      	str	r3, [r7, #20]
 8021626:	e010      	b.n	802164a <nk_textedit_makeundo_delete+0x4c>
            p[i] = nk_str_rune_at(&state->string, where+i);
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	f103 000c 	add.w	r0, r3, #12
 802162e:	68ba      	ldr	r2, [r7, #8]
 8021630:	697b      	ldr	r3, [r7, #20]
 8021632:	18d1      	adds	r1, r2, r3
 8021634:	697b      	ldr	r3, [r7, #20]
 8021636:	009b      	lsls	r3, r3, #2
 8021638:	693a      	ldr	r2, [r7, #16]
 802163a:	18d4      	adds	r4, r2, r3
 802163c:	f7fb fcec 	bl	801d018 <nk_str_rune_at>
 8021640:	4603      	mov	r3, r0
 8021642:	6023      	str	r3, [r4, #0]
        for (i=0; i < length; ++i)
 8021644:	697b      	ldr	r3, [r7, #20]
 8021646:	3301      	adds	r3, #1
 8021648:	617b      	str	r3, [r7, #20]
 802164a:	697a      	ldr	r2, [r7, #20]
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	429a      	cmp	r2, r3
 8021650:	dbea      	blt.n	8021628 <nk_textedit_makeundo_delete+0x2a>
    }
}
 8021652:	bf00      	nop
 8021654:	371c      	adds	r7, #28
 8021656:	46bd      	mov	sp, r7
 8021658:	bd90      	pop	{r4, r7, pc}

0802165a <nk_textedit_makeundo_replace>:
NK_INTERN void
nk_textedit_makeundo_replace(struct nk_text_edit *state, int where,
    int old_length, int new_length)
{
 802165a:	b590      	push	{r4, r7, lr}
 802165c:	b087      	sub	sp, #28
 802165e:	af00      	add	r7, sp, #0
 8021660:	60f8      	str	r0, [r7, #12]
 8021662:	60b9      	str	r1, [r7, #8]
 8021664:	607a      	str	r2, [r7, #4]
 8021666:	603b      	str	r3, [r7, #0]
    int i;
    nk_rune *p = nk_textedit_createundo(&state->undo, where, old_length, new_length);
 8021668:	68fb      	ldr	r3, [r7, #12]
 802166a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802166e:	683b      	ldr	r3, [r7, #0]
 8021670:	687a      	ldr	r2, [r7, #4]
 8021672:	68b9      	ldr	r1, [r7, #8]
 8021674:	f7ff fd7a 	bl	802116c <nk_textedit_createundo>
 8021678:	6138      	str	r0, [r7, #16]
    if (p) {
 802167a:	693b      	ldr	r3, [r7, #16]
 802167c:	2b00      	cmp	r3, #0
 802167e:	d017      	beq.n	80216b0 <nk_textedit_makeundo_replace+0x56>
        for (i=0; i < old_length; ++i)
 8021680:	2300      	movs	r3, #0
 8021682:	617b      	str	r3, [r7, #20]
 8021684:	e010      	b.n	80216a8 <nk_textedit_makeundo_replace+0x4e>
            p[i] = nk_str_rune_at(&state->string, where+i);
 8021686:	68fb      	ldr	r3, [r7, #12]
 8021688:	f103 000c 	add.w	r0, r3, #12
 802168c:	68ba      	ldr	r2, [r7, #8]
 802168e:	697b      	ldr	r3, [r7, #20]
 8021690:	18d1      	adds	r1, r2, r3
 8021692:	697b      	ldr	r3, [r7, #20]
 8021694:	009b      	lsls	r3, r3, #2
 8021696:	693a      	ldr	r2, [r7, #16]
 8021698:	18d4      	adds	r4, r2, r3
 802169a:	f7fb fcbd 	bl	801d018 <nk_str_rune_at>
 802169e:	4603      	mov	r3, r0
 80216a0:	6023      	str	r3, [r4, #0]
        for (i=0; i < old_length; ++i)
 80216a2:	697b      	ldr	r3, [r7, #20]
 80216a4:	3301      	adds	r3, #1
 80216a6:	617b      	str	r3, [r7, #20]
 80216a8:	697a      	ldr	r2, [r7, #20]
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	429a      	cmp	r2, r3
 80216ae:	dbea      	blt.n	8021686 <nk_textedit_makeundo_replace+0x2c>
    }
}
 80216b0:	bf00      	nop
 80216b2:	371c      	adds	r7, #28
 80216b4:	46bd      	mov	sp, r7
 80216b6:	bd90      	pop	{r4, r7, pc}

080216b8 <nk_textedit_clear_state>:
NK_LIB void
nk_textedit_clear_state(struct nk_text_edit *state, enum nk_text_edit_type type,
    nk_plugin_filter filter)
{
 80216b8:	b590      	push	{r4, r7, lr}
 80216ba:	b085      	sub	sp, #20
 80216bc:	af00      	add	r7, sp, #0
 80216be:	60f8      	str	r0, [r7, #12]
 80216c0:	460b      	mov	r3, r1
 80216c2:	607a      	str	r2, [r7, #4]
 80216c4:	72fb      	strb	r3, [r7, #11]
    /* reset the state to default */
   state->undo.undo_point = 0;
 80216c6:	68fb      	ldr	r3, [r7, #12]
 80216c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216cc:	2200      	movs	r2, #0
 80216ce:	f8a3 24b0 	strh.w	r2, [r3, #1200]	; 0x4b0
   state->undo.undo_char_point = 0;
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216d8:	2200      	movs	r2, #0
 80216da:	f8a3 24b4 	strh.w	r2, [r3, #1204]	; 0x4b4
   state->undo.redo_point = NK_TEXTEDIT_UNDOSTATECOUNT;
 80216de:	68fb      	ldr	r3, [r7, #12]
 80216e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216e4:	2263      	movs	r2, #99	; 0x63
 80216e6:	f8a3 24b2 	strh.w	r2, [r3, #1202]	; 0x4b2
   state->undo.redo_char_point = NK_TEXTEDIT_UNDOCHARCOUNT;
 80216ea:	68fb      	ldr	r3, [r7, #12]
 80216ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80216f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80216f4:	f8a3 24b6 	strh.w	r2, [r3, #1206]	; 0x4b6
   state->select_end = state->select_start = 0;
 80216f8:	68fb      	ldr	r3, [r7, #12]
 80216fa:	2200      	movs	r2, #0
 80216fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80216fe:	68fb      	ldr	r3, [r7, #12]
 8021700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8021702:	68fb      	ldr	r3, [r7, #12]
 8021704:	661a      	str	r2, [r3, #96]	; 0x60
   state->cursor = 0;
 8021706:	68fb      	ldr	r3, [r7, #12]
 8021708:	2200      	movs	r2, #0
 802170a:	659a      	str	r2, [r3, #88]	; 0x58
   state->has_preferred_x = 0;
 802170c:	68fb      	ldr	r3, [r7, #12]
 802170e:	2200      	movs	r2, #0
 8021710:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   state->preferred_x = 0;
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	f04f 0200 	mov.w	r2, #0
 802171a:	66da      	str	r2, [r3, #108]	; 0x6c
   state->cursor_at_end_of_line = 0;
 802171c:	68fb      	ldr	r3, [r7, #12]
 802171e:	2200      	movs	r2, #0
 8021720:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
   state->initialized = 1;
 8021724:	68fb      	ldr	r3, [r7, #12]
 8021726:	2201      	movs	r2, #1
 8021728:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
   state->single_line = (unsigned char)(type == NK_TEXT_EDIT_SINGLE_LINE);
 802172c:	7afb      	ldrb	r3, [r7, #11]
 802172e:	2b00      	cmp	r3, #0
 8021730:	bf0c      	ite	eq
 8021732:	2301      	moveq	r3, #1
 8021734:	2300      	movne	r3, #0
 8021736:	b2db      	uxtb	r3, r3
 8021738:	461a      	mov	r2, r3
 802173a:	68fb      	ldr	r3, [r7, #12]
 802173c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   state->mode = NK_TEXT_EDIT_MODE_VIEW;
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	2200      	movs	r2, #0
 8021744:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   state->filter = filter;
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	687a      	ldr	r2, [r7, #4]
 802174c:	64da      	str	r2, [r3, #76]	; 0x4c
   state->scrollbar = nk_vec2(0,0);
 802174e:	68fc      	ldr	r4, [r7, #12]
 8021750:	eddf 0a08 	vldr	s1, [pc, #32]	; 8021774 <nk_textedit_clear_state+0xbc>
 8021754:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8021774 <nk_textedit_clear_state+0xbc>
 8021758:	f7f5 f926 	bl	80169a8 <nk_vec2>
 802175c:	eeb0 7a40 	vmov.f32	s14, s0
 8021760:	eef0 7a60 	vmov.f32	s15, s1
 8021764:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
 8021768:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 802176c:	bf00      	nop
 802176e:	3714      	adds	r7, #20
 8021770:	46bd      	mov	sp, r7
 8021772:	bd90      	pop	{r4, r7, pc}
 8021774:	00000000 	.word	0x00000000

08021778 <nk_textedit_select_all>:
    nk_str_init_default(&state->string);
}
#endif
NK_API void
nk_textedit_select_all(struct nk_text_edit *state)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b082      	sub	sp, #8
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]
    NK_ASSERT(state);
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	2b00      	cmp	r3, #0
 8021784:	d106      	bne.n	8021794 <nk_textedit_select_all+0x1c>
 8021786:	4b09      	ldr	r3, [pc, #36]	; (80217ac <nk_textedit_select_all+0x34>)
 8021788:	4a09      	ldr	r2, [pc, #36]	; (80217b0 <nk_textedit_select_all+0x38>)
 802178a:	f240 31fa 	movw	r1, #1018	; 0x3fa
 802178e:	4809      	ldr	r0, [pc, #36]	; (80217b4 <nk_textedit_select_all+0x3c>)
 8021790:	f003 f9ae 	bl	8024af0 <__assert_func>
    state->select_start = 0;
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	2200      	movs	r2, #0
 8021798:	65da      	str	r2, [r3, #92]	; 0x5c
    state->select_end = state->string.len;
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80217a2:	bf00      	nop
 80217a4:	3708      	adds	r7, #8
 80217a6:	46bd      	mov	sp, r7
 80217a8:	bd80      	pop	{r7, pc}
 80217aa:	bf00      	nop
 80217ac:	08029324 	.word	0x08029324
 80217b0:	0802abac 	.word	0x0802abac
 80217b4:	0802932c 	.word	0x0802932c

080217b8 <nk_tree_state_base>:
 *
 * ===============================================================*/
NK_INTERN int
nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states *state)
{
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b0aa      	sub	sp, #168	; 0xa8
 80217bc:	af04      	add	r7, sp, #16
 80217be:	60f8      	str	r0, [r7, #12]
 80217c0:	607a      	str	r2, [r7, #4]
 80217c2:	603b      	str	r3, [r7, #0]
 80217c4:	460b      	mov	r3, r1
 80217c6:	72fb      	strb	r3, [r7, #11]
    const struct nk_style_button *button;
    enum nk_symbol_type symbol;
    float row_height;

    struct nk_vec2 item_spacing;
    struct nk_rect header = {0,0,0,0};
 80217c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80217cc:	2200      	movs	r2, #0
 80217ce:	601a      	str	r2, [r3, #0]
 80217d0:	605a      	str	r2, [r3, #4]
 80217d2:	609a      	str	r2, [r3, #8]
 80217d4:	60da      	str	r2, [r3, #12]
    struct nk_rect sym = {0,0,0,0};
 80217d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80217da:	2200      	movs	r2, #0
 80217dc:	601a      	str	r2, [r3, #0]
 80217de:	605a      	str	r2, [r3, #4]
 80217e0:	609a      	str	r2, [r3, #8]
 80217e2:	60da      	str	r2, [r3, #12]
    struct nk_text text;

    nk_flags ws = 0;
 80217e4:	2300      	movs	r3, #0
 80217e6:	627b      	str	r3, [r7, #36]	; 0x24
    enum nk_widget_layout_states widget_state;

    NK_ASSERT(ctx);
 80217e8:	68fb      	ldr	r3, [r7, #12]
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d105      	bne.n	80217fa <nk_tree_state_base+0x42>
 80217ee:	4bcf      	ldr	r3, [pc, #828]	; (8021b2c <nk_tree_state_base+0x374>)
 80217f0:	4acf      	ldr	r2, [pc, #828]	; (8021b30 <nk_tree_state_base+0x378>)
 80217f2:	211e      	movs	r1, #30
 80217f4:	48cf      	ldr	r0, [pc, #828]	; (8021b34 <nk_tree_state_base+0x37c>)
 80217f6:	f003 f97b 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80217fa:	68fb      	ldr	r3, [r7, #12]
 80217fc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021800:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021804:	2b00      	cmp	r3, #0
 8021806:	d105      	bne.n	8021814 <nk_tree_state_base+0x5c>
 8021808:	4bcb      	ldr	r3, [pc, #812]	; (8021b38 <nk_tree_state_base+0x380>)
 802180a:	4ac9      	ldr	r2, [pc, #804]	; (8021b30 <nk_tree_state_base+0x378>)
 802180c:	211f      	movs	r1, #31
 802180e:	48c9      	ldr	r0, [pc, #804]	; (8021b34 <nk_tree_state_base+0x37c>)
 8021810:	f003 f96e 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8021814:	68fb      	ldr	r3, [r7, #12]
 8021816:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802181a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021822:	2b00      	cmp	r3, #0
 8021824:	d105      	bne.n	8021832 <nk_tree_state_base+0x7a>
 8021826:	4bc5      	ldr	r3, [pc, #788]	; (8021b3c <nk_tree_state_base+0x384>)
 8021828:	4ac1      	ldr	r2, [pc, #772]	; (8021b30 <nk_tree_state_base+0x378>)
 802182a:	2120      	movs	r1, #32
 802182c:	48c1      	ldr	r0, [pc, #772]	; (8021b34 <nk_tree_state_base+0x37c>)
 802182e:	f003 f95f 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d00f      	beq.n	8021858 <nk_tree_state_base+0xa0>
 8021838:	68fb      	ldr	r3, [r7, #12]
 802183a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802183e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021842:	2b00      	cmp	r3, #0
 8021844:	d008      	beq.n	8021858 <nk_tree_state_base+0xa0>
 8021846:	68fb      	ldr	r3, [r7, #12]
 8021848:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802184c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021854:	2b00      	cmp	r3, #0
 8021856:	d101      	bne.n	802185c <nk_tree_state_base+0xa4>
        return 0;
 8021858:	2300      	movs	r3, #0
 802185a:	e2f2      	b.n	8021e42 <nk_tree_state_base+0x68a>

    /* cache some data */
    win = ctx->current;
 802185c:	68fb      	ldr	r3, [r7, #12]
 802185e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021862:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    layout = win->layout;
 802186a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    out = &win->buffer;
 8021876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802187a:	3364      	adds	r3, #100	; 0x64
 802187c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    style = &ctx->style;
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8021886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    item_spacing = style->window.spacing;
 802188a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021892:	461a      	mov	r2, r3
 8021894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021898:	f602 02d4 	addw	r2, r2, #2260	; 0x8d4
 802189c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80218a0:	e883 0003 	stmia.w	r3, {r0, r1}

    /* calculate header bounds and draw background */
    row_height = 4 + style->font->height + 2 * style->tab.padding.y;
 80218a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80218a8:	681b      	ldr	r3, [r3, #0]
 80218aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80218ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80218b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80218b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80218ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80218be:	f203 5374 	addw	r3, r3, #1396	; 0x574
 80218c2:	edd3 7a00 	vldr	s15, [r3]
 80218c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80218ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80218ce:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    nk_layout_set_min_row_height(ctx, row_height);
 80218d2:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80218d6:	68f8      	ldr	r0, [r7, #12]
 80218d8:	f7f3 feda 	bl	8015690 <nk_layout_set_min_row_height>
    nk_layout_row_dynamic(ctx, row_height, 1);
 80218dc:	2101      	movs	r1, #1
 80218de:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80218e2:	68f8      	ldr	r0, [r7, #12]
 80218e4:	f7f4 f97e 	bl	8015be4 <nk_layout_row_dynamic>
    nk_layout_reset_min_row_height(ctx);
 80218e8:	68f8      	ldr	r0, [r7, #12]
 80218ea:	f7f3 ff2b 	bl	8015744 <nk_layout_reset_min_row_height>

    widget_state = nk_widget(&header, ctx);
 80218ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80218f2:	68f9      	ldr	r1, [r7, #12]
 80218f4:	4618      	mov	r0, r3
 80218f6:	f001 fe15 	bl	8023524 <nk_widget>
 80218fa:	4603      	mov	r3, r0
 80218fc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    if (type == NK_TREE_TAB) {
 8021900:	7afb      	ldrb	r3, [r7, #11]
 8021902:	2b01      	cmp	r3, #1
 8021904:	f040 80af 	bne.w	8021a66 <nk_tree_state_base+0x2ae>
        const struct nk_style_item *background = &style->tab.background;
 8021908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802190c:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8021910:	331c      	adds	r3, #28
 8021912:	677b      	str	r3, [r7, #116]	; 0x74

        switch(background->type) {
 8021914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021916:	781b      	ldrb	r3, [r3, #0]
 8021918:	2b02      	cmp	r3, #2
 802191a:	d021      	beq.n	8021960 <nk_tree_state_base+0x1a8>
 802191c:	2b02      	cmp	r3, #2
 802191e:	f300 80a9 	bgt.w	8021a74 <nk_tree_state_base+0x2bc>
 8021922:	2b00      	cmp	r3, #0
 8021924:	d036      	beq.n	8021994 <nk_tree_state_base+0x1dc>
 8021926:	2b01      	cmp	r3, #1
 8021928:	f040 80a4 	bne.w	8021a74 <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_IMAGE:
                nk_draw_image(out, header, &background->data.image, nk_white);
 802192c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802192e:	3304      	adds	r3, #4
 8021930:	4a83      	ldr	r2, [pc, #524]	; (8021b40 <nk_tree_state_base+0x388>)
 8021932:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8021936:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 802193a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 802193e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8021942:	6812      	ldr	r2, [r2, #0]
 8021944:	4619      	mov	r1, r3
 8021946:	eeb0 0a46 	vmov.f32	s0, s12
 802194a:	eef0 0a66 	vmov.f32	s1, s13
 802194e:	eeb0 1a47 	vmov.f32	s2, s14
 8021952:	eef0 1a67 	vmov.f32	s3, s15
 8021956:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 802195a:	f7f0 fc07 	bl	801216c <nk_draw_image>
                break;
 802195e:	e089      	b.n	8021a74 <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_NINE_SLICE:
                nk_draw_nine_slice(out, header, &background->data.slice, nk_white);
 8021960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021962:	3304      	adds	r3, #4
 8021964:	4a76      	ldr	r2, [pc, #472]	; (8021b40 <nk_tree_state_base+0x388>)
 8021966:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 802196a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 802196e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021972:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8021976:	6812      	ldr	r2, [r2, #0]
 8021978:	4619      	mov	r1, r3
 802197a:	eeb0 0a46 	vmov.f32	s0, s12
 802197e:	eef0 0a66 	vmov.f32	s1, s13
 8021982:	eeb0 1a47 	vmov.f32	s2, s14
 8021986:	eef0 1a67 	vmov.f32	s3, s15
 802198a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 802198e:	f7f0 fcdf 	bl	8012350 <nk_draw_nine_slice>
                break;
 8021992:	e06f      	b.n	8021a74 <nk_tree_state_base+0x2bc>
            case NK_STYLE_ITEM_COLOR:
                nk_fill_rect(out, header, 0, style->tab.border_color);
 8021994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802199c:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80219a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80219a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80219a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80219ac:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 80219b0:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8021b44 <nk_tree_state_base+0x38c>
 80219b4:	eeb0 0a46 	vmov.f32	s0, s12
 80219b8:	eef0 0a66 	vmov.f32	s1, s13
 80219bc:	eeb0 1a47 	vmov.f32	s2, s14
 80219c0:	eef0 1a67 	vmov.f32	s3, s15
 80219c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80219c8:	f7f0 f876 	bl	8011ab8 <nk_fill_rect>
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 80219cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80219d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219d4:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80219d8:	edd3 5a00 	vldr	s11, [r3]
 80219dc:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80219e0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80219e4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80219e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80219ec:	eeb0 2a65 	vmov.f32	s4, s11
 80219f0:	eeb0 0a46 	vmov.f32	s0, s12
 80219f4:	eef0 0a66 	vmov.f32	s1, s13
 80219f8:	eeb0 1a47 	vmov.f32	s2, s14
 80219fc:	eef0 1a67 	vmov.f32	s3, s15
 8021a00:	f7f4 ff52 	bl	80168a8 <nk_shrink_rect>
 8021a04:	eeb0 6a40 	vmov.f32	s12, s0
 8021a08:	eef0 6a60 	vmov.f32	s13, s1
 8021a0c:	eeb0 7a41 	vmov.f32	s14, s2
 8021a10:	eef0 7a61 	vmov.f32	s15, s3
 8021a14:	ed87 6a18 	vstr	s12, [r7, #96]	; 0x60
 8021a18:	edc7 6a19 	vstr	s13, [r7, #100]	; 0x64
 8021a1c:	ed87 7a1a 	vstr	s14, [r7, #104]	; 0x68
 8021a20:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
                    style->tab.rounding, background->data.color);
 8021a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021a2c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8021a30:	edd3 5a00 	vldr	s11, [r3]
                nk_fill_rect(out, nk_shrink_rect(header, style->tab.border),
 8021a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021a36:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8021a3a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8021a3e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8021a42:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8021a46:	6859      	ldr	r1, [r3, #4]
 8021a48:	eeb0 2a65 	vmov.f32	s4, s11
 8021a4c:	eeb0 0a46 	vmov.f32	s0, s12
 8021a50:	eef0 0a66 	vmov.f32	s1, s13
 8021a54:	eeb0 1a47 	vmov.f32	s2, s14
 8021a58:	eef0 1a67 	vmov.f32	s3, s15
 8021a5c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8021a60:	f7f0 f82a 	bl	8011ab8 <nk_fill_rect>
                break;
 8021a64:	e006      	b.n	8021a74 <nk_tree_state_base+0x2bc>
        }
    } else text.background = style->window.background;
 8021a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021a6e:	f8d3 3874 	ldr.w	r3, [r3, #2164]	; 0x874
 8021a72:	633b      	str	r3, [r7, #48]	; 0x30

    /* update node state */
    in = (!(layout->flags & NK_WINDOW_ROM)) ? &ctx->input: 0;
 8021a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021a78:	685b      	ldr	r3, [r3, #4]
 8021a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d101      	bne.n	8021a86 <nk_tree_state_base+0x2ce>
 8021a82:	68fb      	ldr	r3, [r7, #12]
 8021a84:	e000      	b.n	8021a88 <nk_tree_state_base+0x2d0>
 8021a86:	2300      	movs	r3, #0
 8021a88:	673b      	str	r3, [r7, #112]	; 0x70
    in = (in && widget_state == NK_WIDGET_VALID) ? &ctx->input : 0;
 8021a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d005      	beq.n	8021a9c <nk_tree_state_base+0x2e4>
 8021a90:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8021a94:	2b01      	cmp	r3, #1
 8021a96:	d101      	bne.n	8021a9c <nk_tree_state_base+0x2e4>
 8021a98:	68fb      	ldr	r3, [r7, #12]
 8021a9a:	e000      	b.n	8021a9e <nk_tree_state_base+0x2e6>
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	673b      	str	r3, [r7, #112]	; 0x70
    if (nk_button_behavior(&ws, header, in, NK_BUTTON_DEFAULT))
 8021aa0:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8021aa4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8021aa8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021aac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8021ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021ab4:	2200      	movs	r2, #0
 8021ab6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8021ab8:	eeb0 0a46 	vmov.f32	s0, s12
 8021abc:	eef0 0a66 	vmov.f32	s1, s13
 8021ac0:	eeb0 1a47 	vmov.f32	s2, s14
 8021ac4:	eef0 1a67 	vmov.f32	s3, s15
 8021ac8:	4618      	mov	r0, r3
 8021aca:	f7ed facf 	bl	800f06c <nk_button_behavior>
 8021ace:	4603      	mov	r3, r0
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d00b      	beq.n	8021aec <nk_tree_state_base+0x334>
        *state = (*state == NK_MAXIMIZED) ? NK_MINIMIZED : NK_MAXIMIZED;
 8021ad4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021ad8:	781b      	ldrb	r3, [r3, #0]
 8021ada:	2b01      	cmp	r3, #1
 8021adc:	bf14      	ite	ne
 8021ade:	2301      	movne	r3, #1
 8021ae0:	2300      	moveq	r3, #0
 8021ae2:	b2db      	uxtb	r3, r3
 8021ae4:	461a      	mov	r2, r3
 8021ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021aea:	701a      	strb	r2, [r3, #0]

    /* select correct button style */
    if (*state == NK_MAXIMIZED) {
 8021aec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021af0:	781b      	ldrb	r3, [r3, #0]
 8021af2:	2b01      	cmp	r3, #1
 8021af4:	d128      	bne.n	8021b48 <nk_tree_state_base+0x390>
        symbol = style->tab.sym_maximize;
 8021af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021afe:	f893 3561 	ldrb.w	r3, [r3, #1377]	; 0x561
 8021b02:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 8021b06:	7afb      	ldrb	r3, [r7, #11]
 8021b08:	2b01      	cmp	r3, #1
 8021b0a:	d106      	bne.n	8021b1a <nk_tree_state_base+0x362>
            button = &style->tab.tab_maximize_button;
 8021b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b10:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8021b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021b18:	e030      	b.n	8021b7c <nk_tree_state_base+0x3c4>
        else button = &style->tab.node_maximize_button;
 8021b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b1e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8021b22:	3310      	adds	r3, #16
 8021b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021b28:	e028      	b.n	8021b7c <nk_tree_state_base+0x3c4>
 8021b2a:	bf00      	nop
 8021b2c:	08029368 	.word	0x08029368
 8021b30:	0802abc8 	.word	0x0802abc8
 8021b34:	0802936c 	.word	0x0802936c
 8021b38:	08029388 	.word	0x08029388
 8021b3c:	08029398 	.word	0x08029398
 8021b40:	0802abc4 	.word	0x0802abc4
 8021b44:	00000000 	.word	0x00000000
    } else {
        symbol = style->tab.sym_minimize;
 8021b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b50:	f893 3560 	ldrb.w	r3, [r3, #1376]	; 0x560
 8021b54:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (type == NK_TREE_TAB)
 8021b58:	7afb      	ldrb	r3, [r7, #11]
 8021b5a:	2b01      	cmp	r3, #1
 8021b5c:	d107      	bne.n	8021b6e <nk_tree_state_base+0x3b6>
            button = &style->tab.tab_minimize_button;
 8021b5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b62:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8021b66:	3318      	adds	r3, #24
 8021b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8021b6c:	e006      	b.n	8021b7c <nk_tree_state_base+0x3c4>
        else button = &style->tab.node_minimize_button;
 8021b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b72:	f503 53a6 	add.w	r3, r3, #5312	; 0x14c0
 8021b76:	3308      	adds	r3, #8
 8021b78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    {/* draw triangle button */
    sym.w = sym.h = style->font->height;
 8021b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b80:	681b      	ldr	r3, [r3, #0]
 8021b82:	685b      	ldr	r3, [r3, #4]
 8021b84:	647b      	str	r3, [r7, #68]	; 0x44
 8021b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021b88:	643b      	str	r3, [r7, #64]	; 0x40
    sym.y = header.y + style->tab.padding.y;
 8021b8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8021b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b96:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8021b9a:	edd3 7a00 	vldr	s15, [r3]
 8021b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021ba2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sym.x = header.x + style->tab.padding.x;
 8021ba6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8021baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021bb2:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8021bb6:	edd3 7a00 	vldr	s15, [r3]
 8021bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021bbe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 8021bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021bc6:	f103 0164 	add.w	r1, r3, #100	; 0x64
        button, 0, style->font);
 8021bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021bce:	681b      	ldr	r3, [r3, #0]
    nk_do_button_symbol(&ws, &win->buffer, sym, symbol, NK_BUTTON_DEFAULT,
 8021bd0:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8021bd4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8021bd8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8021bdc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8021be0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8021be4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8021be8:	9302      	str	r3, [sp, #8]
 8021bea:	2300      	movs	r3, #0
 8021bec:	9301      	str	r3, [sp, #4]
 8021bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8021bf2:	9300      	str	r3, [sp, #0]
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	eeb0 0a46 	vmov.f32	s0, s12
 8021bfa:	eef0 0a66 	vmov.f32	s1, s13
 8021bfe:	eeb0 1a47 	vmov.f32	s2, s14
 8021c02:	eef0 1a67 	vmov.f32	s3, s15
 8021c06:	f7ed fdc3 	bl	800f790 <nk_do_button_symbol>

    if (img) {
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	2b00      	cmp	r3, #0
 8021c0e:	d039      	beq.n	8021c84 <nk_tree_state_base+0x4cc>
        /* draw optional image icon */
        sym.x = sym.x + sym.w + 4 * item_spacing.x;
 8021c10:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8021c14:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8021c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021c1c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021c20:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8021c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021c2c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        nk_draw_image(&win->buffer, sym, img, nk_white);
 8021c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021c34:	3364      	adds	r3, #100	; 0x64
 8021c36:	4a85      	ldr	r2, [pc, #532]	; (8021e4c <nk_tree_state_base+0x694>)
 8021c38:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8021c3c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8021c40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8021c44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8021c48:	6812      	ldr	r2, [r2, #0]
 8021c4a:	6879      	ldr	r1, [r7, #4]
 8021c4c:	eeb0 0a46 	vmov.f32	s0, s12
 8021c50:	eef0 0a66 	vmov.f32	s1, s13
 8021c54:	eeb0 1a47 	vmov.f32	s2, s14
 8021c58:	eef0 1a67 	vmov.f32	s3, s15
 8021c5c:	4618      	mov	r0, r3
 8021c5e:	f7f0 fa85 	bl	801216c <nk_draw_image>
        sym.w = style->font->height + style->tab.spacing.x;}
 8021c62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	ed93 7a01 	vldr	s14, [r3, #4]
 8021c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021c74:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8021c78:	edd3 7a00 	vldr	s15, [r3]
 8021c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021c80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    {/* draw label */
    struct nk_rect label;
    header.w = NK_MAX(header.w, sym.w + item_spacing.x);
 8021c84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021c88:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8021c8c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c9c:	d506      	bpl.n	8021cac <nk_tree_state_base+0x4f4>
 8021c9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8021ca2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021caa:	e001      	b.n	8021cb0 <nk_tree_state_base+0x4f8>
 8021cac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8021cb0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    label.x = sym.x + sym.w + item_spacing.x;
 8021cb4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8021cb8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8021cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021cc0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8021cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021cc8:	edc7 7a05 	vstr	s15, [r7, #20]
    label.y = sym.y;
 8021ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021cce:	61bb      	str	r3, [r7, #24]
    label.w = header.w - (sym.w + item_spacing.y + style->tab.indent);
 8021cd0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8021cd4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8021cd8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8021cdc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8021ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ce8:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021cec:	edd3 7a00 	vldr	s15, [r3]
 8021cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021cf8:	edc7 7a07 	vstr	s15, [r7, #28]
    label.h = style->font->height;
 8021cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021d00:	681b      	ldr	r3, [r3, #0]
 8021d02:	685b      	ldr	r3, [r3, #4]
 8021d04:	623b      	str	r3, [r7, #32]
    text.text = style->tab.text;
 8021d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d0e:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8021d12:	637b      	str	r3, [r7, #52]	; 0x34
    text.padding = nk_vec2(0,0);
 8021d14:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8021e50 <nk_tree_state_base+0x698>
 8021d18:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8021e50 <nk_tree_state_base+0x698>
 8021d1c:	f7f4 fe44 	bl	80169a8 <nk_vec2>
 8021d20:	eeb0 7a40 	vmov.f32	s14, s0
 8021d24:	eef0 7a60 	vmov.f32	s15, s1
 8021d28:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8021d2c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 8021d30:	6838      	ldr	r0, [r7, #0]
 8021d32:	f000 fcd1 	bl	80226d8 <nk_strlen>
 8021d36:	4601      	mov	r1, r0
        NK_TEXT_LEFT, style->font);}
 8021d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021d3c:	681b      	ldr	r3, [r3, #0]
    nk_widget_text(out, label, title, nk_strlen(title), &text,
 8021d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8021d42:	ed97 6a05 	vldr	s12, [r7, #20]
 8021d46:	edd7 6a06 	vldr	s13, [r7, #24]
 8021d4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8021d4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8021d52:	9301      	str	r3, [sp, #4]
 8021d54:	2311      	movs	r3, #17
 8021d56:	9300      	str	r3, [sp, #0]
 8021d58:	4613      	mov	r3, r2
 8021d5a:	460a      	mov	r2, r1
 8021d5c:	6839      	ldr	r1, [r7, #0]
 8021d5e:	eeb0 0a46 	vmov.f32	s0, s12
 8021d62:	eef0 0a66 	vmov.f32	s1, s13
 8021d66:	eeb0 1a47 	vmov.f32	s2, s14
 8021d6a:	eef0 1a67 	vmov.f32	s3, s15
 8021d6e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8021d72:	f7fd fc07 	bl	801f584 <nk_widget_text>

    /* increase x-axis cursor widget position pointer */
    if (*state == NK_MAXIMIZED) {
 8021d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8021d7a:	781b      	ldrb	r3, [r3, #0]
 8021d7c:	2b01      	cmp	r3, #1
 8021d7e:	d15f      	bne.n	8021e40 <nk_tree_state_base+0x688>
        layout->at_x = header.x + (float)*layout->offset_x + style->tab.indent;
 8021d80:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8021d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021d88:	699b      	ldr	r3, [r3, #24]
 8021d8a:	681b      	ldr	r3, [r3, #0]
 8021d8c:	ee07 3a90 	vmov	s15, r3
 8021d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021da0:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021da4:	edd3 7a00 	vldr	s15, [r3]
 8021da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021db0:	edc3 7a08 	vstr	s15, [r3, #32]
        layout->bounds.w = NK_MAX(layout->bounds.w, style->tab.indent);
 8021db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021db8:	ed93 7a04 	vldr	s14, [r3, #16]
 8021dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dc4:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021dc8:	edd3 7a00 	vldr	s15, [r3]
 8021dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dd4:	d507      	bpl.n	8021de6 <nk_tree_state_base+0x62e>
 8021dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dde:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021de2:	681b      	ldr	r3, [r3, #0]
 8021de4:	e002      	b.n	8021dec <nk_tree_state_base+0x634>
 8021de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021dea:	691b      	ldr	r3, [r3, #16]
 8021dec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021df0:	6113      	str	r3, [r2, #16]
        layout->bounds.w -= (style->tab.indent + style->window.padding.x);
 8021df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021df6:	ed93 7a04 	vldr	s14, [r3, #16]
 8021dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021e02:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8021e06:	edd3 6a00 	vldr	s13, [r3]
 8021e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021e12:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 8021e16:	edd3 7a00 	vldr	s15, [r3]
 8021e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e26:	edc3 7a04 	vstr	s15, [r3, #16]
        layout->row.tree_depth++;
 8021e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8021e32:	1c5a      	adds	r2, r3, #1
 8021e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8021e38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        return nk_true;
 8021e3c:	2301      	movs	r3, #1
 8021e3e:	e000      	b.n	8021e42 <nk_tree_state_base+0x68a>
    } else return nk_false;
 8021e40:	2300      	movs	r3, #0
}
 8021e42:	4618      	mov	r0, r3
 8021e44:	3798      	adds	r7, #152	; 0x98
 8021e46:	46bd      	mov	sp, r7
 8021e48:	bd80      	pop	{r7, pc}
 8021e4a:	bf00      	nop
 8021e4c:	0802abc4 	.word	0x0802abc4
 8021e50:	00000000 	.word	0x00000000

08021e54 <nk_tree_base>:
NK_INTERN int
nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,
    struct nk_image *img, const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 8021e54:	b580      	push	{r7, lr}
 8021e56:	b08a      	sub	sp, #40	; 0x28
 8021e58:	af02      	add	r7, sp, #8
 8021e5a:	60f8      	str	r0, [r7, #12]
 8021e5c:	607a      	str	r2, [r7, #4]
 8021e5e:	603b      	str	r3, [r7, #0]
 8021e60:	460b      	mov	r3, r1
 8021e62:	72fb      	strb	r3, [r7, #11]
    struct nk_window *win = ctx->current;
 8021e64:	68fb      	ldr	r3, [r7, #12]
 8021e66:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021e6a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021e6e:	617b      	str	r3, [r7, #20]
    int title_len = 0;
 8021e70:	2300      	movs	r3, #0
 8021e72:	613b      	str	r3, [r7, #16]
    nk_hash tree_hash = 0;
 8021e74:	2300      	movs	r3, #0
 8021e76:	61fb      	str	r3, [r7, #28]
    nk_uint *state = 0;
 8021e78:	2300      	movs	r3, #0
 8021e7a:	61bb      	str	r3, [r7, #24]

    /* retrieve tree state from internal widget state tables */
    if (!hash) {
 8021e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	d10b      	bne.n	8021e9a <nk_tree_base+0x46>
        title_len = (int)nk_strlen(title);
 8021e82:	6838      	ldr	r0, [r7, #0]
 8021e84:	f000 fc28 	bl	80226d8 <nk_strlen>
 8021e88:	6138      	str	r0, [r7, #16]
        tree_hash = nk_murmur_hash(title, (int)title_len, (nk_hash)line);
 8021e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e8c:	461a      	mov	r2, r3
 8021e8e:	6939      	ldr	r1, [r7, #16]
 8021e90:	6838      	ldr	r0, [r7, #0]
 8021e92:	f001 f899 	bl	8022fc8 <nk_murmur_hash>
 8021e96:	61f8      	str	r0, [r7, #28]
 8021e98:	e006      	b.n	8021ea8 <nk_tree_base+0x54>
    } else tree_hash = nk_murmur_hash(hash, len, (nk_hash)line);
 8021e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e9c:	461a      	mov	r2, r3
 8021e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021ea2:	f001 f891 	bl	8022fc8 <nk_murmur_hash>
 8021ea6:	61f8      	str	r0, [r7, #28]
    state = nk_find_value(win, tree_hash);
 8021ea8:	69f9      	ldr	r1, [r7, #28]
 8021eaa:	6978      	ldr	r0, [r7, #20]
 8021eac:	f7fd fb2e 	bl	801f50c <nk_find_value>
 8021eb0:	61b8      	str	r0, [r7, #24]
    if (!state) {
 8021eb2:	69bb      	ldr	r3, [r7, #24]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d10a      	bne.n	8021ece <nk_tree_base+0x7a>
        state = nk_add_value(ctx, win, tree_hash, 0);
 8021eb8:	2300      	movs	r3, #0
 8021eba:	69fa      	ldr	r2, [r7, #28]
 8021ebc:	6979      	ldr	r1, [r7, #20]
 8021ebe:	68f8      	ldr	r0, [r7, #12]
 8021ec0:	f7fd faaa 	bl	801f418 <nk_add_value>
 8021ec4:	61b8      	str	r0, [r7, #24]
        *state = initial_state;
 8021ec6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021eca:	69bb      	ldr	r3, [r7, #24]
 8021ecc:	601a      	str	r2, [r3, #0]
    }
    return nk_tree_state_base(ctx, type, img, title, (enum nk_collapse_states*)state);
 8021ece:	7af9      	ldrb	r1, [r7, #11]
 8021ed0:	69bb      	ldr	r3, [r7, #24]
 8021ed2:	9300      	str	r3, [sp, #0]
 8021ed4:	683b      	ldr	r3, [r7, #0]
 8021ed6:	687a      	ldr	r2, [r7, #4]
 8021ed8:	68f8      	ldr	r0, [r7, #12]
 8021eda:	f7ff fc6d 	bl	80217b8 <nk_tree_state_base>
 8021ede:	4603      	mov	r3, r0
}
 8021ee0:	4618      	mov	r0, r3
 8021ee2:	3720      	adds	r7, #32
 8021ee4:	46bd      	mov	sp, r7
 8021ee6:	bd80      	pop	{r7, pc}

08021ee8 <nk_tree_state_pop>:
{
    return nk_tree_state_base(ctx, type, &img, title, state);
}
NK_API void
nk_tree_state_pop(struct nk_context *ctx)
{
 8021ee8:	b580      	push	{r7, lr}
 8021eea:	b084      	sub	sp, #16
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	6078      	str	r0, [r7, #4]
    struct nk_window *win = 0;
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	60fb      	str	r3, [r7, #12]
    struct nk_panel *layout = 0;
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	60bb      	str	r3, [r7, #8]

    NK_ASSERT(ctx);
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d105      	bne.n	8021f0a <nk_tree_state_pop+0x22>
 8021efe:	4b43      	ldr	r3, [pc, #268]	; (802200c <nk_tree_state_pop+0x124>)
 8021f00:	4a43      	ldr	r2, [pc, #268]	; (8022010 <nk_tree_state_pop+0x128>)
 8021f02:	21a2      	movs	r1, #162	; 0xa2
 8021f04:	4843      	ldr	r0, [pc, #268]	; (8022014 <nk_tree_state_pop+0x12c>)
 8021f06:	f002 fdf3 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f10:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	d105      	bne.n	8021f24 <nk_tree_state_pop+0x3c>
 8021f18:	4b3f      	ldr	r3, [pc, #252]	; (8022018 <nk_tree_state_pop+0x130>)
 8021f1a:	4a3d      	ldr	r2, [pc, #244]	; (8022010 <nk_tree_state_pop+0x128>)
 8021f1c:	21a3      	movs	r1, #163	; 0xa3
 8021f1e:	483d      	ldr	r0, [pc, #244]	; (8022014 <nk_tree_state_pop+0x12c>)
 8021f20:	f002 fde6 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f2a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021f32:	2b00      	cmp	r3, #0
 8021f34:	d105      	bne.n	8021f42 <nk_tree_state_pop+0x5a>
 8021f36:	4b39      	ldr	r3, [pc, #228]	; (802201c <nk_tree_state_pop+0x134>)
 8021f38:	4a35      	ldr	r2, [pc, #212]	; (8022010 <nk_tree_state_pop+0x128>)
 8021f3a:	21a4      	movs	r1, #164	; 0xa4
 8021f3c:	4835      	ldr	r0, [pc, #212]	; (8022014 <nk_tree_state_pop+0x12c>)
 8021f3e:	f002 fdd7 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	d05c      	beq.n	8022002 <nk_tree_state_pop+0x11a>
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f4e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d055      	beq.n	8022002 <nk_tree_state_pop+0x11a>
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f5c:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d04c      	beq.n	8022002 <nk_tree_state_pop+0x11a>
        return;

    win = ctx->current;
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8021f6e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8021f72:	60fb      	str	r3, [r7, #12]
    layout = win->layout;
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8021f7a:	60bb      	str	r3, [r7, #8]
    layout->at_x -= ctx->style.tab.indent + (float)*layout->offset_x;
 8021f7c:	68bb      	ldr	r3, [r7, #8]
 8021f7e:	ed93 7a08 	vldr	s14, [r3, #32]
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f88:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8021f8c:	edd3 6a00 	vldr	s13, [r3]
 8021f90:	68bb      	ldr	r3, [r7, #8]
 8021f92:	699b      	ldr	r3, [r3, #24]
 8021f94:	681b      	ldr	r3, [r3, #0]
 8021f96:	ee07 3a90 	vmov	s15, r3
 8021f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021fa6:	68bb      	ldr	r3, [r7, #8]
 8021fa8:	edc3 7a08 	vstr	s15, [r3, #32]
    layout->bounds.w += ctx->style.tab.indent + ctx->style.window.padding.x;
 8021fac:	68bb      	ldr	r3, [r7, #8]
 8021fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021fb8:	f203 63d4 	addw	r3, r3, #1748	; 0x6d4
 8021fbc:	edd3 6a00 	vldr	s13, [r3]
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021fc6:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8021fca:	edd3 7a00 	vldr	s15, [r3]
 8021fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021fd6:	68bb      	ldr	r3, [r7, #8]
 8021fd8:	edc3 7a04 	vstr	s15, [r3, #16]
    NK_ASSERT(layout->row.tree_depth);
 8021fdc:	68bb      	ldr	r3, [r7, #8]
 8021fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d105      	bne.n	8021ff2 <nk_tree_state_pop+0x10a>
 8021fe6:	4b0e      	ldr	r3, [pc, #56]	; (8022020 <nk_tree_state_pop+0x138>)
 8021fe8:	4a09      	ldr	r2, [pc, #36]	; (8022010 <nk_tree_state_pop+0x128>)
 8021fea:	21ac      	movs	r1, #172	; 0xac
 8021fec:	4809      	ldr	r0, [pc, #36]	; (8022014 <nk_tree_state_pop+0x12c>)
 8021fee:	f002 fd7f 	bl	8024af0 <__assert_func>
    layout->row.tree_depth--;
 8021ff2:	68bb      	ldr	r3, [r7, #8]
 8021ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8021ff8:	1e5a      	subs	r2, r3, #1
 8021ffa:	68bb      	ldr	r3, [r7, #8]
 8021ffc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8022000:	e000      	b.n	8022004 <nk_tree_state_pop+0x11c>
        return;
 8022002:	bf00      	nop
}
 8022004:	3710      	adds	r7, #16
 8022006:	46bd      	mov	sp, r7
 8022008:	bd80      	pop	{r7, pc}
 802200a:	bf00      	nop
 802200c:	08029368 	.word	0x08029368
 8022010:	0802abdc 	.word	0x0802abdc
 8022014:	0802936c 	.word	0x0802936c
 8022018:	08029388 	.word	0x08029388
 802201c:	08029398 	.word	0x08029398
 8022020:	080293b0 	.word	0x080293b0

08022024 <nk_tree_push_hashed>:
NK_API nk_bool
nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,
    const char *title, enum nk_collapse_states initial_state,
    const char *hash, int len, int line)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	b088      	sub	sp, #32
 8022028:	af04      	add	r7, sp, #16
 802202a:	60f8      	str	r0, [r7, #12]
 802202c:	607a      	str	r2, [r7, #4]
 802202e:	461a      	mov	r2, r3
 8022030:	460b      	mov	r3, r1
 8022032:	72fb      	strb	r3, [r7, #11]
 8022034:	4613      	mov	r3, r2
 8022036:	72bb      	strb	r3, [r7, #10]
    return nk_tree_base(ctx, type, 0, title, initial_state, hash, len, line);
 8022038:	7af9      	ldrb	r1, [r7, #11]
 802203a:	6a3b      	ldr	r3, [r7, #32]
 802203c:	9303      	str	r3, [sp, #12]
 802203e:	69fb      	ldr	r3, [r7, #28]
 8022040:	9302      	str	r3, [sp, #8]
 8022042:	69bb      	ldr	r3, [r7, #24]
 8022044:	9301      	str	r3, [sp, #4]
 8022046:	7abb      	ldrb	r3, [r7, #10]
 8022048:	9300      	str	r3, [sp, #0]
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	2200      	movs	r2, #0
 802204e:	68f8      	ldr	r0, [r7, #12]
 8022050:	f7ff ff00 	bl	8021e54 <nk_tree_base>
 8022054:	4603      	mov	r3, r0
}
 8022056:	4618      	mov	r0, r3
 8022058:	3710      	adds	r7, #16
 802205a:	46bd      	mov	sp, r7
 802205c:	bd80      	pop	{r7, pc}

0802205e <nk_tree_pop>:
{
    return nk_tree_base(ctx, type, &img, title, initial_state, hash, len, seed);
}
NK_API void
nk_tree_pop(struct nk_context *ctx)
{
 802205e:	b580      	push	{r7, lr}
 8022060:	b082      	sub	sp, #8
 8022062:	af00      	add	r7, sp, #0
 8022064:	6078      	str	r0, [r7, #4]
    nk_tree_state_pop(ctx);
 8022066:	6878      	ldr	r0, [r7, #4]
 8022068:	f7ff ff3e 	bl	8021ee8 <nk_tree_state_pop>
}
 802206c:	bf00      	nop
 802206e:	3708      	adds	r7, #8
 8022070:	46bd      	mov	sp, r7
 8022072:	bd80      	pop	{r7, pc}

08022074 <nk_utf_validate>:
NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};
NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};

NK_INTERN int
nk_utf_validate(nk_rune *u, int i)
{
 8022074:	b580      	push	{r7, lr}
 8022076:	b082      	sub	sp, #8
 8022078:	af00      	add	r7, sp, #0
 802207a:	6078      	str	r0, [r7, #4]
 802207c:	6039      	str	r1, [r7, #0]
    NK_ASSERT(u);
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	2b00      	cmp	r3, #0
 8022082:	d105      	bne.n	8022090 <nk_utf_validate+0x1c>
 8022084:	4b1e      	ldr	r3, [pc, #120]	; (8022100 <nk_utf_validate+0x8c>)
 8022086:	4a1f      	ldr	r2, [pc, #124]	; (8022104 <nk_utf_validate+0x90>)
 8022088:	2111      	movs	r1, #17
 802208a:	481f      	ldr	r0, [pc, #124]	; (8022108 <nk_utf_validate+0x94>)
 802208c:	f002 fd30 	bl	8024af0 <__assert_func>
    if (!u) return 0;
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	2b00      	cmp	r3, #0
 8022094:	d101      	bne.n	802209a <nk_utf_validate+0x26>
 8022096:	2300      	movs	r3, #0
 8022098:	e02d      	b.n	80220f6 <nk_utf_validate+0x82>
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 802209a:	4a1c      	ldr	r2, [pc, #112]	; (802210c <nk_utf_validate+0x98>)
 802209c:	683b      	ldr	r3, [r7, #0]
 802209e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	681b      	ldr	r3, [r3, #0]
 80220a6:	429a      	cmp	r2, r3
 80220a8:	d812      	bhi.n	80220d0 <nk_utf_validate+0x5c>
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	681a      	ldr	r2, [r3, #0]
 80220ae:	4918      	ldr	r1, [pc, #96]	; (8022110 <nk_utf_validate+0x9c>)
 80220b0:	683b      	ldr	r3, [r7, #0]
 80220b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80220b6:	429a      	cmp	r2, r3
 80220b8:	d20a      	bcs.n	80220d0 <nk_utf_validate+0x5c>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	681b      	ldr	r3, [r3, #0]
    if (!NK_BETWEEN(*u, nk_utfmin[i], nk_utfmax[i]) ||
 80220be:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80220c2:	d309      	bcc.n	80220d8 <nk_utf_validate+0x64>
         NK_BETWEEN(*u, 0xD800, 0xDFFF))
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	681b      	ldr	r3, [r3, #0]
 80220c8:	f64d 72fe 	movw	r2, #57342	; 0xdffe
 80220cc:	4293      	cmp	r3, r2
 80220ce:	d803      	bhi.n	80220d8 <nk_utf_validate+0x64>
            *u = NK_UTF_INVALID;
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80220d6:	601a      	str	r2, [r3, #0]
    for (i = 1; *u > nk_utfmax[i]; ++i);
 80220d8:	2301      	movs	r3, #1
 80220da:	603b      	str	r3, [r7, #0]
 80220dc:	e002      	b.n	80220e4 <nk_utf_validate+0x70>
 80220de:	683b      	ldr	r3, [r7, #0]
 80220e0:	3301      	adds	r3, #1
 80220e2:	603b      	str	r3, [r7, #0]
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	681a      	ldr	r2, [r3, #0]
 80220e8:	4909      	ldr	r1, [pc, #36]	; (8022110 <nk_utf_validate+0x9c>)
 80220ea:	683b      	ldr	r3, [r7, #0]
 80220ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80220f0:	429a      	cmp	r2, r3
 80220f2:	d8f4      	bhi.n	80220de <nk_utf_validate+0x6a>
    return i;
 80220f4:	683b      	ldr	r3, [r7, #0]
}
 80220f6:	4618      	mov	r0, r3
 80220f8:	3708      	adds	r7, #8
 80220fa:	46bd      	mov	sp, r7
 80220fc:	bd80      	pop	{r7, pc}
 80220fe:	bf00      	nop
 8022100:	080293c8 	.word	0x080293c8
 8022104:	0802ac28 	.word	0x0802ac28
 8022108:	080293cc 	.word	0x080293cc
 802210c:	0802ac00 	.word	0x0802ac00
 8022110:	0802ac14 	.word	0x0802ac14

08022114 <nk_utf_decode_byte>:
NK_INTERN nk_rune
nk_utf_decode_byte(char c, int *i)
{
 8022114:	b580      	push	{r7, lr}
 8022116:	b082      	sub	sp, #8
 8022118:	af00      	add	r7, sp, #0
 802211a:	4603      	mov	r3, r0
 802211c:	6039      	str	r1, [r7, #0]
 802211e:	71fb      	strb	r3, [r7, #7]
    NK_ASSERT(i);
 8022120:	683b      	ldr	r3, [r7, #0]
 8022122:	2b00      	cmp	r3, #0
 8022124:	d105      	bne.n	8022132 <nk_utf_decode_byte+0x1e>
 8022126:	4b1b      	ldr	r3, [pc, #108]	; (8022194 <nk_utf_decode_byte+0x80>)
 8022128:	4a1b      	ldr	r2, [pc, #108]	; (8022198 <nk_utf_decode_byte+0x84>)
 802212a:	211c      	movs	r1, #28
 802212c:	481b      	ldr	r0, [pc, #108]	; (802219c <nk_utf_decode_byte+0x88>)
 802212e:	f002 fcdf 	bl	8024af0 <__assert_func>
    if (!i) return 0;
 8022132:	683b      	ldr	r3, [r7, #0]
 8022134:	2b00      	cmp	r3, #0
 8022136:	d101      	bne.n	802213c <nk_utf_decode_byte+0x28>
 8022138:	2300      	movs	r3, #0
 802213a:	e027      	b.n	802218c <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 802213c:	683b      	ldr	r3, [r7, #0]
 802213e:	2200      	movs	r2, #0
 8022140:	601a      	str	r2, [r3, #0]
 8022142:	e01e      	b.n	8022182 <nk_utf_decode_byte+0x6e>
        if (((nk_byte)c & nk_utfmask[*i]) == nk_utfbyte[*i])
 8022144:	683b      	ldr	r3, [r7, #0]
 8022146:	681b      	ldr	r3, [r3, #0]
 8022148:	4a15      	ldr	r2, [pc, #84]	; (80221a0 <nk_utf_decode_byte+0x8c>)
 802214a:	5cd2      	ldrb	r2, [r2, r3]
 802214c:	79fb      	ldrb	r3, [r7, #7]
 802214e:	4013      	ands	r3, r2
 8022150:	b2da      	uxtb	r2, r3
 8022152:	683b      	ldr	r3, [r7, #0]
 8022154:	681b      	ldr	r3, [r3, #0]
 8022156:	4913      	ldr	r1, [pc, #76]	; (80221a4 <nk_utf_decode_byte+0x90>)
 8022158:	5ccb      	ldrb	r3, [r1, r3]
 802215a:	429a      	cmp	r2, r3
 802215c:	d10c      	bne.n	8022178 <nk_utf_decode_byte+0x64>
            return (nk_byte)(c & ~nk_utfmask[*i]);
 802215e:	683b      	ldr	r3, [r7, #0]
 8022160:	681b      	ldr	r3, [r3, #0]
 8022162:	4a0f      	ldr	r2, [pc, #60]	; (80221a0 <nk_utf_decode_byte+0x8c>)
 8022164:	5cd3      	ldrb	r3, [r2, r3]
 8022166:	b25b      	sxtb	r3, r3
 8022168:	43db      	mvns	r3, r3
 802216a:	b25a      	sxtb	r2, r3
 802216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022170:	4013      	ands	r3, r2
 8022172:	b25b      	sxtb	r3, r3
 8022174:	b2db      	uxtb	r3, r3
 8022176:	e009      	b.n	802218c <nk_utf_decode_byte+0x78>
    for(*i = 0; *i < (int)NK_LEN(nk_utfmask); ++(*i)) {
 8022178:	683b      	ldr	r3, [r7, #0]
 802217a:	681b      	ldr	r3, [r3, #0]
 802217c:	1c5a      	adds	r2, r3, #1
 802217e:	683b      	ldr	r3, [r7, #0]
 8022180:	601a      	str	r2, [r3, #0]
 8022182:	683b      	ldr	r3, [r7, #0]
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	2b04      	cmp	r3, #4
 8022188:	dddc      	ble.n	8022144 <nk_utf_decode_byte+0x30>
    }
    return 0;
 802218a:	2300      	movs	r3, #0
}
 802218c:	4618      	mov	r0, r3
 802218e:	3708      	adds	r7, #8
 8022190:	46bd      	mov	sp, r7
 8022192:	bd80      	pop	{r7, pc}
 8022194:	080293e8 	.word	0x080293e8
 8022198:	0802ac38 	.word	0x0802ac38
 802219c:	080293cc 	.word	0x080293cc
 80221a0:	0802abf8 	.word	0x0802abf8
 80221a4:	0802abf0 	.word	0x0802abf0

080221a8 <nk_utf_decode>:
NK_API int
nk_utf_decode(const char *c, nk_rune *u, int clen)
{
 80221a8:	b590      	push	{r4, r7, lr}
 80221aa:	b08b      	sub	sp, #44	; 0x2c
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	60f8      	str	r0, [r7, #12]
 80221b0:	60b9      	str	r1, [r7, #8]
 80221b2:	607a      	str	r2, [r7, #4]
    int i, j, len, type=0;
 80221b4:	2300      	movs	r3, #0
 80221b6:	617b      	str	r3, [r7, #20]
    nk_rune udecoded;

    NK_ASSERT(c);
 80221b8:	68fb      	ldr	r3, [r7, #12]
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d105      	bne.n	80221ca <nk_utf_decode+0x22>
 80221be:	4b35      	ldr	r3, [pc, #212]	; (8022294 <nk_utf_decode+0xec>)
 80221c0:	4a35      	ldr	r2, [pc, #212]	; (8022298 <nk_utf_decode+0xf0>)
 80221c2:	212a      	movs	r1, #42	; 0x2a
 80221c4:	4835      	ldr	r0, [pc, #212]	; (802229c <nk_utf_decode+0xf4>)
 80221c6:	f002 fc93 	bl	8024af0 <__assert_func>
    NK_ASSERT(u);
 80221ca:	68bb      	ldr	r3, [r7, #8]
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d105      	bne.n	80221dc <nk_utf_decode+0x34>
 80221d0:	4b33      	ldr	r3, [pc, #204]	; (80222a0 <nk_utf_decode+0xf8>)
 80221d2:	4a31      	ldr	r2, [pc, #196]	; (8022298 <nk_utf_decode+0xf0>)
 80221d4:	212b      	movs	r1, #43	; 0x2b
 80221d6:	4831      	ldr	r0, [pc, #196]	; (802229c <nk_utf_decode+0xf4>)
 80221d8:	f002 fc8a 	bl	8024af0 <__assert_func>

    if (!c || !u) return 0;
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d002      	beq.n	80221e8 <nk_utf_decode+0x40>
 80221e2:	68bb      	ldr	r3, [r7, #8]
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d101      	bne.n	80221ec <nk_utf_decode+0x44>
 80221e8:	2300      	movs	r3, #0
 80221ea:	e04f      	b.n	802228c <nk_utf_decode+0xe4>
    if (!clen) return 0;
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d101      	bne.n	80221f6 <nk_utf_decode+0x4e>
 80221f2:	2300      	movs	r3, #0
 80221f4:	e04a      	b.n	802228c <nk_utf_decode+0xe4>
    *u = NK_UTF_INVALID;
 80221f6:	68bb      	ldr	r3, [r7, #8]
 80221f8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80221fc:	601a      	str	r2, [r3, #0]

    udecoded = nk_utf_decode_byte(c[0], &len);
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	781b      	ldrb	r3, [r3, #0]
 8022202:	f107 0218 	add.w	r2, r7, #24
 8022206:	4611      	mov	r1, r2
 8022208:	4618      	mov	r0, r3
 802220a:	f7ff ff83 	bl	8022114 <nk_utf_decode_byte>
 802220e:	61f8      	str	r0, [r7, #28]
    if (!NK_BETWEEN(len, 1, NK_UTF_SIZE))
 8022210:	69bb      	ldr	r3, [r7, #24]
 8022212:	2b00      	cmp	r3, #0
 8022214:	dd02      	ble.n	802221c <nk_utf_decode+0x74>
 8022216:	69bb      	ldr	r3, [r7, #24]
 8022218:	2b03      	cmp	r3, #3
 802221a:	dd01      	ble.n	8022220 <nk_utf_decode+0x78>
        return 1;
 802221c:	2301      	movs	r3, #1
 802221e:	e035      	b.n	802228c <nk_utf_decode+0xe4>

    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 8022220:	2301      	movs	r3, #1
 8022222:	627b      	str	r3, [r7, #36]	; 0x24
 8022224:	2301      	movs	r3, #1
 8022226:	623b      	str	r3, [r7, #32]
 8022228:	e019      	b.n	802225e <nk_utf_decode+0xb6>
        udecoded = (udecoded << 6) | nk_utf_decode_byte(c[i], &type);
 802222a:	69fb      	ldr	r3, [r7, #28]
 802222c:	019c      	lsls	r4, r3, #6
 802222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022230:	68fa      	ldr	r2, [r7, #12]
 8022232:	4413      	add	r3, r2
 8022234:	781b      	ldrb	r3, [r3, #0]
 8022236:	f107 0214 	add.w	r2, r7, #20
 802223a:	4611      	mov	r1, r2
 802223c:	4618      	mov	r0, r3
 802223e:	f7ff ff69 	bl	8022114 <nk_utf_decode_byte>
 8022242:	4603      	mov	r3, r0
 8022244:	4323      	orrs	r3, r4
 8022246:	61fb      	str	r3, [r7, #28]
        if (type != 0)
 8022248:	697b      	ldr	r3, [r7, #20]
 802224a:	2b00      	cmp	r3, #0
 802224c:	d001      	beq.n	8022252 <nk_utf_decode+0xaa>
            return j;
 802224e:	6a3b      	ldr	r3, [r7, #32]
 8022250:	e01c      	b.n	802228c <nk_utf_decode+0xe4>
    for (i = 1, j = 1; i < clen && j < len; ++i, ++j) {
 8022252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022254:	3301      	adds	r3, #1
 8022256:	627b      	str	r3, [r7, #36]	; 0x24
 8022258:	6a3b      	ldr	r3, [r7, #32]
 802225a:	3301      	adds	r3, #1
 802225c:	623b      	str	r3, [r7, #32]
 802225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	429a      	cmp	r2, r3
 8022264:	da03      	bge.n	802226e <nk_utf_decode+0xc6>
 8022266:	69bb      	ldr	r3, [r7, #24]
 8022268:	6a3a      	ldr	r2, [r7, #32]
 802226a:	429a      	cmp	r2, r3
 802226c:	dbdd      	blt.n	802222a <nk_utf_decode+0x82>
    }
    if (j < len)
 802226e:	69bb      	ldr	r3, [r7, #24]
 8022270:	6a3a      	ldr	r2, [r7, #32]
 8022272:	429a      	cmp	r2, r3
 8022274:	da01      	bge.n	802227a <nk_utf_decode+0xd2>
        return 0;
 8022276:	2300      	movs	r3, #0
 8022278:	e008      	b.n	802228c <nk_utf_decode+0xe4>
    *u = udecoded;
 802227a:	68bb      	ldr	r3, [r7, #8]
 802227c:	69fa      	ldr	r2, [r7, #28]
 802227e:	601a      	str	r2, [r3, #0]
    nk_utf_validate(u, len);
 8022280:	69bb      	ldr	r3, [r7, #24]
 8022282:	4619      	mov	r1, r3
 8022284:	68b8      	ldr	r0, [r7, #8]
 8022286:	f7ff fef5 	bl	8022074 <nk_utf_validate>
    return len;
 802228a:	69bb      	ldr	r3, [r7, #24]
}
 802228c:	4618      	mov	r0, r3
 802228e:	372c      	adds	r7, #44	; 0x2c
 8022290:	46bd      	mov	sp, r7
 8022292:	bd90      	pop	{r4, r7, pc}
 8022294:	080293ec 	.word	0x080293ec
 8022298:	0802ac4c 	.word	0x0802ac4c
 802229c:	080293cc 	.word	0x080293cc
 80222a0:	080293c8 	.word	0x080293c8

080222a4 <nk_utf_encode_byte>:
NK_INTERN char
nk_utf_encode_byte(nk_rune u, int i)
{
 80222a4:	b480      	push	{r7}
 80222a6:	b083      	sub	sp, #12
 80222a8:	af00      	add	r7, sp, #0
 80222aa:	6078      	str	r0, [r7, #4]
 80222ac:	6039      	str	r1, [r7, #0]
    return (char)((nk_utfbyte[i]) | ((nk_byte)u & ~nk_utfmask[i]));
 80222ae:	4a0c      	ldr	r2, [pc, #48]	; (80222e0 <nk_utf_encode_byte+0x3c>)
 80222b0:	683b      	ldr	r3, [r7, #0]
 80222b2:	4413      	add	r3, r2
 80222b4:	781b      	ldrb	r3, [r3, #0]
 80222b6:	b25a      	sxtb	r2, r3
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	b259      	sxtb	r1, r3
 80222bc:	4809      	ldr	r0, [pc, #36]	; (80222e4 <nk_utf_encode_byte+0x40>)
 80222be:	683b      	ldr	r3, [r7, #0]
 80222c0:	4403      	add	r3, r0
 80222c2:	781b      	ldrb	r3, [r3, #0]
 80222c4:	b25b      	sxtb	r3, r3
 80222c6:	43db      	mvns	r3, r3
 80222c8:	b25b      	sxtb	r3, r3
 80222ca:	400b      	ands	r3, r1
 80222cc:	b25b      	sxtb	r3, r3
 80222ce:	4313      	orrs	r3, r2
 80222d0:	b25b      	sxtb	r3, r3
 80222d2:	b2db      	uxtb	r3, r3
}
 80222d4:	4618      	mov	r0, r3
 80222d6:	370c      	adds	r7, #12
 80222d8:	46bd      	mov	sp, r7
 80222da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222de:	4770      	bx	lr
 80222e0:	0802abf0 	.word	0x0802abf0
 80222e4:	0802abf8 	.word	0x0802abf8

080222e8 <nk_utf_encode>:
NK_API int
nk_utf_encode(nk_rune u, char *c, int clen)
{
 80222e8:	b590      	push	{r4, r7, lr}
 80222ea:	b087      	sub	sp, #28
 80222ec:	af00      	add	r7, sp, #0
 80222ee:	60f8      	str	r0, [r7, #12]
 80222f0:	60b9      	str	r1, [r7, #8]
 80222f2:	607a      	str	r2, [r7, #4]
    int len, i;
    len = nk_utf_validate(&u, 0);
 80222f4:	f107 030c 	add.w	r3, r7, #12
 80222f8:	2100      	movs	r1, #0
 80222fa:	4618      	mov	r0, r3
 80222fc:	f7ff feba 	bl	8022074 <nk_utf_validate>
 8022300:	6138      	str	r0, [r7, #16]
    if (clen < len || !len || len > NK_UTF_SIZE)
 8022302:	687a      	ldr	r2, [r7, #4]
 8022304:	693b      	ldr	r3, [r7, #16]
 8022306:	429a      	cmp	r2, r3
 8022308:	db05      	blt.n	8022316 <nk_utf_encode+0x2e>
 802230a:	693b      	ldr	r3, [r7, #16]
 802230c:	2b00      	cmp	r3, #0
 802230e:	d002      	beq.n	8022316 <nk_utf_encode+0x2e>
 8022310:	693b      	ldr	r3, [r7, #16]
 8022312:	2b04      	cmp	r3, #4
 8022314:	dd01      	ble.n	802231a <nk_utf_encode+0x32>
        return 0;
 8022316:	2300      	movs	r3, #0
 8022318:	e01f      	b.n	802235a <nk_utf_encode+0x72>

    for (i = len - 1; i != 0; --i) {
 802231a:	693b      	ldr	r3, [r7, #16]
 802231c:	3b01      	subs	r3, #1
 802231e:	617b      	str	r3, [r7, #20]
 8022320:	e00e      	b.n	8022340 <nk_utf_encode+0x58>
        c[i] = nk_utf_encode_byte(u, 0);
 8022322:	68f8      	ldr	r0, [r7, #12]
 8022324:	697b      	ldr	r3, [r7, #20]
 8022326:	68ba      	ldr	r2, [r7, #8]
 8022328:	18d4      	adds	r4, r2, r3
 802232a:	2100      	movs	r1, #0
 802232c:	f7ff ffba 	bl	80222a4 <nk_utf_encode_byte>
 8022330:	4603      	mov	r3, r0
 8022332:	7023      	strb	r3, [r4, #0]
        u >>= 6;
 8022334:	68fb      	ldr	r3, [r7, #12]
 8022336:	099b      	lsrs	r3, r3, #6
 8022338:	60fb      	str	r3, [r7, #12]
    for (i = len - 1; i != 0; --i) {
 802233a:	697b      	ldr	r3, [r7, #20]
 802233c:	3b01      	subs	r3, #1
 802233e:	617b      	str	r3, [r7, #20]
 8022340:	697b      	ldr	r3, [r7, #20]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d1ed      	bne.n	8022322 <nk_utf_encode+0x3a>
    }
    c[0] = nk_utf_encode_byte(u, len);
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	6939      	ldr	r1, [r7, #16]
 802234a:	4618      	mov	r0, r3
 802234c:	f7ff ffaa 	bl	80222a4 <nk_utf_encode_byte>
 8022350:	4603      	mov	r3, r0
 8022352:	461a      	mov	r2, r3
 8022354:	68bb      	ldr	r3, [r7, #8]
 8022356:	701a      	strb	r2, [r3, #0]
    return len;
 8022358:	693b      	ldr	r3, [r7, #16]
}
 802235a:	4618      	mov	r0, r3
 802235c:	371c      	adds	r7, #28
 802235e:	46bd      	mov	sp, r7
 8022360:	bd90      	pop	{r4, r7, pc}
	...

08022364 <nk_utf_len>:
NK_API int
nk_utf_len(const char *str, int len)
{
 8022364:	b580      	push	{r7, lr}
 8022366:	b088      	sub	sp, #32
 8022368:	af00      	add	r7, sp, #0
 802236a:	6078      	str	r0, [r7, #4]
 802236c:	6039      	str	r1, [r7, #0]
    const char *text;
    int glyphs = 0;
 802236e:	2300      	movs	r3, #0
 8022370:	61fb      	str	r3, [r7, #28]
    int text_len;
    int glyph_len;
    int src_len = 0;
 8022372:	2300      	movs	r3, #0
 8022374:	617b      	str	r3, [r7, #20]
    nk_rune unicode;

    NK_ASSERT(str);
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	2b00      	cmp	r3, #0
 802237a:	d105      	bne.n	8022388 <nk_utf_len+0x24>
 802237c:	4b1c      	ldr	r3, [pc, #112]	; (80223f0 <nk_utf_len+0x8c>)
 802237e:	4a1d      	ldr	r2, [pc, #116]	; (80223f4 <nk_utf_len+0x90>)
 8022380:	215e      	movs	r1, #94	; 0x5e
 8022382:	481d      	ldr	r0, [pc, #116]	; (80223f8 <nk_utf_len+0x94>)
 8022384:	f002 fbb4 	bl	8024af0 <__assert_func>
    if (!str || !len) return 0;
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	2b00      	cmp	r3, #0
 802238c:	d002      	beq.n	8022394 <nk_utf_len+0x30>
 802238e:	683b      	ldr	r3, [r7, #0]
 8022390:	2b00      	cmp	r3, #0
 8022392:	d101      	bne.n	8022398 <nk_utf_len+0x34>
 8022394:	2300      	movs	r3, #0
 8022396:	e027      	b.n	80223e8 <nk_utf_len+0x84>

    text = str;
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	613b      	str	r3, [r7, #16]
    text_len = len;
 802239c:	683b      	ldr	r3, [r7, #0]
 802239e:	60fb      	str	r3, [r7, #12]
    glyph_len = nk_utf_decode(text, &unicode, text_len);
 80223a0:	f107 0308 	add.w	r3, r7, #8
 80223a4:	68fa      	ldr	r2, [r7, #12]
 80223a6:	4619      	mov	r1, r3
 80223a8:	6938      	ldr	r0, [r7, #16]
 80223aa:	f7ff fefd 	bl	80221a8 <nk_utf_decode>
 80223ae:	61b8      	str	r0, [r7, #24]
    while (glyph_len && src_len < len) {
 80223b0:	e012      	b.n	80223d8 <nk_utf_len+0x74>
        glyphs++;
 80223b2:	69fb      	ldr	r3, [r7, #28]
 80223b4:	3301      	adds	r3, #1
 80223b6:	61fb      	str	r3, [r7, #28]
        src_len = src_len + glyph_len;
 80223b8:	697a      	ldr	r2, [r7, #20]
 80223ba:	69bb      	ldr	r3, [r7, #24]
 80223bc:	4413      	add	r3, r2
 80223be:	617b      	str	r3, [r7, #20]
        glyph_len = nk_utf_decode(text + src_len, &unicode, text_len - src_len);
 80223c0:	697b      	ldr	r3, [r7, #20]
 80223c2:	693a      	ldr	r2, [r7, #16]
 80223c4:	18d0      	adds	r0, r2, r3
 80223c6:	68fa      	ldr	r2, [r7, #12]
 80223c8:	697b      	ldr	r3, [r7, #20]
 80223ca:	1ad2      	subs	r2, r2, r3
 80223cc:	f107 0308 	add.w	r3, r7, #8
 80223d0:	4619      	mov	r1, r3
 80223d2:	f7ff fee9 	bl	80221a8 <nk_utf_decode>
 80223d6:	61b8      	str	r0, [r7, #24]
    while (glyph_len && src_len < len) {
 80223d8:	69bb      	ldr	r3, [r7, #24]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d003      	beq.n	80223e6 <nk_utf_len+0x82>
 80223de:	697a      	ldr	r2, [r7, #20]
 80223e0:	683b      	ldr	r3, [r7, #0]
 80223e2:	429a      	cmp	r2, r3
 80223e4:	dbe5      	blt.n	80223b2 <nk_utf_len+0x4e>
    }
    return glyphs;
 80223e6:	69fb      	ldr	r3, [r7, #28]
}
 80223e8:	4618      	mov	r0, r3
 80223ea:	3720      	adds	r7, #32
 80223ec:	46bd      	mov	sp, r7
 80223ee:	bd80      	pop	{r7, pc}
 80223f0:	080293f0 	.word	0x080293f0
 80223f4:	0802ac5c 	.word	0x0802ac5c
 80223f8:	080293cc 	.word	0x080293cc

080223fc <nk_memcopy>:

//#ifndef NK_MEMCPY
//#define NK_MEMCPY nk_memcopy
NK_LIB void*
nk_memcopy(void *dst0, const void *src0, nk_size length)
{
 80223fc:	b480      	push	{r7}
 80223fe:	b089      	sub	sp, #36	; 0x24
 8022400:	af00      	add	r7, sp, #0
 8022402:	60f8      	str	r0, [r7, #12]
 8022404:	60b9      	str	r1, [r7, #8]
 8022406:	607a      	str	r2, [r7, #4]
    nk_ptr t;
    char *dst = (char*)dst0;
 8022408:	68fb      	ldr	r3, [r7, #12]
 802240a:	61bb      	str	r3, [r7, #24]
    const char *src = (const char*)src0;
 802240c:	68bb      	ldr	r3, [r7, #8]
 802240e:	617b      	str	r3, [r7, #20]
    if (length == 0 || dst == src)
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	2b00      	cmp	r3, #0
 8022414:	f000 80c7 	beq.w	80225a6 <nk_memcopy+0x1aa>
 8022418:	69ba      	ldr	r2, [r7, #24]
 802241a:	697b      	ldr	r3, [r7, #20]
 802241c:	429a      	cmp	r2, r3
 802241e:	f000 80c2 	beq.w	80225a6 <nk_memcopy+0x1aa>
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize-1)
    #define NK_TLOOP(s) if (t) NK_TLOOP1(s)
    #define NK_TLOOP1(s) do { s; } while (--t)

    if (dst < src) {
 8022422:	69ba      	ldr	r2, [r7, #24]
 8022424:	697b      	ldr	r3, [r7, #20]
 8022426:	429a      	cmp	r2, r3
 8022428:	d259      	bcs.n	80224de <nk_memcopy+0xe2>
        t = (nk_ptr)src; /* only need low bits */
 802242a:	697b      	ldr	r3, [r7, #20]
 802242c:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 802242e:	69ba      	ldr	r2, [r7, #24]
 8022430:	69fb      	ldr	r3, [r7, #28]
 8022432:	4313      	orrs	r3, r2
 8022434:	f003 0303 	and.w	r3, r3, #3
 8022438:	2b00      	cmp	r3, #0
 802243a:	d024      	beq.n	8022486 <nk_memcopy+0x8a>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length < nk_wsize)
 802243c:	69ba      	ldr	r2, [r7, #24]
 802243e:	69fb      	ldr	r3, [r7, #28]
 8022440:	4053      	eors	r3, r2
 8022442:	f003 0303 	and.w	r3, r3, #3
 8022446:	2b00      	cmp	r3, #0
 8022448:	d102      	bne.n	8022450 <nk_memcopy+0x54>
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	2b03      	cmp	r3, #3
 802244e:	d802      	bhi.n	8022456 <nk_memcopy+0x5a>
                t = length;
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	61fb      	str	r3, [r7, #28]
 8022454:	e005      	b.n	8022462 <nk_memcopy+0x66>
            else
                t = nk_wsize - (t & nk_wmask);
 8022456:	69fb      	ldr	r3, [r7, #28]
 8022458:	f003 0303 	and.w	r3, r3, #3
 802245c:	f1c3 0304 	rsb	r3, r3, #4
 8022460:	61fb      	str	r3, [r7, #28]
            length -= t;
 8022462:	687a      	ldr	r2, [r7, #4]
 8022464:	69fb      	ldr	r3, [r7, #28]
 8022466:	1ad3      	subs	r3, r2, r3
 8022468:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*dst++ = *src++);
 802246a:	697a      	ldr	r2, [r7, #20]
 802246c:	1c53      	adds	r3, r2, #1
 802246e:	617b      	str	r3, [r7, #20]
 8022470:	69bb      	ldr	r3, [r7, #24]
 8022472:	1c59      	adds	r1, r3, #1
 8022474:	61b9      	str	r1, [r7, #24]
 8022476:	7812      	ldrb	r2, [r2, #0]
 8022478:	701a      	strb	r2, [r3, #0]
 802247a:	69fb      	ldr	r3, [r7, #28]
 802247c:	3b01      	subs	r3, #1
 802247e:	61fb      	str	r3, [r7, #28]
 8022480:	69fb      	ldr	r3, [r7, #28]
 8022482:	2b00      	cmp	r3, #0
 8022484:	d1f1      	bne.n	802246a <nk_memcopy+0x6e>
        }
        t = length / nk_wsize;
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	089b      	lsrs	r3, r3, #2
 802248a:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*(nk_word*)(void*)dst = *(const nk_word*)(const void*)src;
 802248c:	69fb      	ldr	r3, [r7, #28]
 802248e:	2b00      	cmp	r3, #0
 8022490:	d00f      	beq.n	80224b2 <nk_memcopy+0xb6>
 8022492:	697b      	ldr	r3, [r7, #20]
 8022494:	681a      	ldr	r2, [r3, #0]
 8022496:	69bb      	ldr	r3, [r7, #24]
 8022498:	601a      	str	r2, [r3, #0]
 802249a:	697b      	ldr	r3, [r7, #20]
 802249c:	3304      	adds	r3, #4
 802249e:	617b      	str	r3, [r7, #20]
 80224a0:	69bb      	ldr	r3, [r7, #24]
 80224a2:	3304      	adds	r3, #4
 80224a4:	61bb      	str	r3, [r7, #24]
 80224a6:	69fb      	ldr	r3, [r7, #28]
 80224a8:	3b01      	subs	r3, #1
 80224aa:	61fb      	str	r3, [r7, #28]
 80224ac:	69fb      	ldr	r3, [r7, #28]
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d1ef      	bne.n	8022492 <nk_memcopy+0x96>
            src += nk_wsize; dst += nk_wsize);
        t = length & nk_wmask;
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	f003 0303 	and.w	r3, r3, #3
 80224b8:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*dst++ = *src++);
 80224ba:	69fb      	ldr	r3, [r7, #28]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d075      	beq.n	80225ac <nk_memcopy+0x1b0>
 80224c0:	697a      	ldr	r2, [r7, #20]
 80224c2:	1c53      	adds	r3, r2, #1
 80224c4:	617b      	str	r3, [r7, #20]
 80224c6:	69bb      	ldr	r3, [r7, #24]
 80224c8:	1c59      	adds	r1, r3, #1
 80224ca:	61b9      	str	r1, [r7, #24]
 80224cc:	7812      	ldrb	r2, [r2, #0]
 80224ce:	701a      	strb	r2, [r3, #0]
 80224d0:	69fb      	ldr	r3, [r7, #28]
 80224d2:	3b01      	subs	r3, #1
 80224d4:	61fb      	str	r3, [r7, #28]
 80224d6:	69fb      	ldr	r3, [r7, #28]
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d1f1      	bne.n	80224c0 <nk_memcopy+0xc4>
 80224dc:	e066      	b.n	80225ac <nk_memcopy+0x1b0>
    } else {
        src += length;
 80224de:	697a      	ldr	r2, [r7, #20]
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	4413      	add	r3, r2
 80224e4:	617b      	str	r3, [r7, #20]
        dst += length;
 80224e6:	69ba      	ldr	r2, [r7, #24]
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	4413      	add	r3, r2
 80224ec:	61bb      	str	r3, [r7, #24]
        t = (nk_ptr)src;
 80224ee:	697b      	ldr	r3, [r7, #20]
 80224f0:	61fb      	str	r3, [r7, #28]
        if ((t | (nk_ptr)dst) & nk_wmask) {
 80224f2:	69ba      	ldr	r2, [r7, #24]
 80224f4:	69fb      	ldr	r3, [r7, #28]
 80224f6:	4313      	orrs	r3, r2
 80224f8:	f003 0303 	and.w	r3, r3, #3
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	d024      	beq.n	802254a <nk_memcopy+0x14e>
            if ((t ^ (nk_ptr)dst) & nk_wmask || length <= nk_wsize)
 8022500:	69ba      	ldr	r2, [r7, #24]
 8022502:	69fb      	ldr	r3, [r7, #28]
 8022504:	4053      	eors	r3, r2
 8022506:	f003 0303 	and.w	r3, r3, #3
 802250a:	2b00      	cmp	r3, #0
 802250c:	d102      	bne.n	8022514 <nk_memcopy+0x118>
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	2b04      	cmp	r3, #4
 8022512:	d802      	bhi.n	802251a <nk_memcopy+0x11e>
                t = length;
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	61fb      	str	r3, [r7, #28]
 8022518:	e003      	b.n	8022522 <nk_memcopy+0x126>
            else
                t &= nk_wmask;
 802251a:	69fb      	ldr	r3, [r7, #28]
 802251c:	f003 0303 	and.w	r3, r3, #3
 8022520:	61fb      	str	r3, [r7, #28]
            length -= t;
 8022522:	687a      	ldr	r2, [r7, #4]
 8022524:	69fb      	ldr	r3, [r7, #28]
 8022526:	1ad3      	subs	r3, r2, r3
 8022528:	607b      	str	r3, [r7, #4]
            NK_TLOOP1(*--dst = *--src);
 802252a:	697b      	ldr	r3, [r7, #20]
 802252c:	3b01      	subs	r3, #1
 802252e:	617b      	str	r3, [r7, #20]
 8022530:	69bb      	ldr	r3, [r7, #24]
 8022532:	3b01      	subs	r3, #1
 8022534:	61bb      	str	r3, [r7, #24]
 8022536:	697b      	ldr	r3, [r7, #20]
 8022538:	781a      	ldrb	r2, [r3, #0]
 802253a:	69bb      	ldr	r3, [r7, #24]
 802253c:	701a      	strb	r2, [r3, #0]
 802253e:	69fb      	ldr	r3, [r7, #28]
 8022540:	3b01      	subs	r3, #1
 8022542:	61fb      	str	r3, [r7, #28]
 8022544:	69fb      	ldr	r3, [r7, #28]
 8022546:	2b00      	cmp	r3, #0
 8022548:	d1ef      	bne.n	802252a <nk_memcopy+0x12e>
        }
        t = length / nk_wsize;
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	089b      	lsrs	r3, r3, #2
 802254e:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(src -= nk_wsize; dst -= nk_wsize;
 8022550:	69fb      	ldr	r3, [r7, #28]
 8022552:	2b00      	cmp	r3, #0
 8022554:	d00f      	beq.n	8022576 <nk_memcopy+0x17a>
 8022556:	697b      	ldr	r3, [r7, #20]
 8022558:	3b04      	subs	r3, #4
 802255a:	617b      	str	r3, [r7, #20]
 802255c:	69bb      	ldr	r3, [r7, #24]
 802255e:	3b04      	subs	r3, #4
 8022560:	61bb      	str	r3, [r7, #24]
 8022562:	697b      	ldr	r3, [r7, #20]
 8022564:	681a      	ldr	r2, [r3, #0]
 8022566:	69bb      	ldr	r3, [r7, #24]
 8022568:	601a      	str	r2, [r3, #0]
 802256a:	69fb      	ldr	r3, [r7, #28]
 802256c:	3b01      	subs	r3, #1
 802256e:	61fb      	str	r3, [r7, #28]
 8022570:	69fb      	ldr	r3, [r7, #28]
 8022572:	2b00      	cmp	r3, #0
 8022574:	d1ef      	bne.n	8022556 <nk_memcopy+0x15a>
            *(nk_word*)(void*)dst = *(const nk_word*)(const void*)src);
        t = length & nk_wmask;
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	f003 0303 	and.w	r3, r3, #3
 802257c:	61fb      	str	r3, [r7, #28]
        NK_TLOOP(*--dst = *--src);
 802257e:	69fb      	ldr	r3, [r7, #28]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d012      	beq.n	80225aa <nk_memcopy+0x1ae>
 8022584:	697b      	ldr	r3, [r7, #20]
 8022586:	3b01      	subs	r3, #1
 8022588:	617b      	str	r3, [r7, #20]
 802258a:	69bb      	ldr	r3, [r7, #24]
 802258c:	3b01      	subs	r3, #1
 802258e:	61bb      	str	r3, [r7, #24]
 8022590:	697b      	ldr	r3, [r7, #20]
 8022592:	781a      	ldrb	r2, [r3, #0]
 8022594:	69bb      	ldr	r3, [r7, #24]
 8022596:	701a      	strb	r2, [r3, #0]
 8022598:	69fb      	ldr	r3, [r7, #28]
 802259a:	3b01      	subs	r3, #1
 802259c:	61fb      	str	r3, [r7, #28]
 802259e:	69fb      	ldr	r3, [r7, #28]
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d1ef      	bne.n	8022584 <nk_memcopy+0x188>
    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
    #undef NK_TLOOP
    #undef NK_TLOOP1
done:
 80225a4:	e001      	b.n	80225aa <nk_memcopy+0x1ae>
        goto done;
 80225a6:	bf00      	nop
 80225a8:	e000      	b.n	80225ac <nk_memcopy+0x1b0>
done:
 80225aa:	bf00      	nop
    return (dst0);
 80225ac:	68fb      	ldr	r3, [r7, #12]
}
 80225ae:	4618      	mov	r0, r3
 80225b0:	3724      	adds	r7, #36	; 0x24
 80225b2:	46bd      	mov	sp, r7
 80225b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225b8:	4770      	bx	lr

080225ba <nk_memset>:
//#endif
//#ifndef NK_MEMSET
//#define NK_MEMSET nk_memset
NK_LIB void
nk_memset(void *ptr, int c0, nk_size size)
{
 80225ba:	b480      	push	{r7}
 80225bc:	b089      	sub	sp, #36	; 0x24
 80225be:	af00      	add	r7, sp, #0
 80225c0:	60f8      	str	r0, [r7, #12]
 80225c2:	60b9      	str	r1, [r7, #8]
 80225c4:	607a      	str	r2, [r7, #4]
    #define nk_word unsigned
    #define nk_wsize sizeof(nk_word)
    #define nk_wmask (nk_wsize - 1)
    nk_byte *dst = (nk_byte*)ptr;
 80225c6:	68fb      	ldr	r3, [r7, #12]
 80225c8:	61fb      	str	r3, [r7, #28]
    unsigned c = 0;
 80225ca:	2300      	movs	r3, #0
 80225cc:	61bb      	str	r3, [r7, #24]
    nk_size t = 0;
 80225ce:	2300      	movs	r3, #0
 80225d0:	617b      	str	r3, [r7, #20]

    if ((c = (nk_byte)c0) != 0) {
 80225d2:	68bb      	ldr	r3, [r7, #8]
 80225d4:	b2db      	uxtb	r3, r3
 80225d6:	61bb      	str	r3, [r7, #24]
 80225d8:	69bb      	ldr	r3, [r7, #24]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d009      	beq.n	80225f2 <nk_memset+0x38>
        c = (c << 8) | c; /* at least 16-bits  */
 80225de:	69bb      	ldr	r3, [r7, #24]
 80225e0:	021b      	lsls	r3, r3, #8
 80225e2:	69ba      	ldr	r2, [r7, #24]
 80225e4:	4313      	orrs	r3, r2
 80225e6:	61bb      	str	r3, [r7, #24]
        if (sizeof(unsigned int) > 2)
            c = (c << 16) | c; /* at least 32-bits*/
 80225e8:	69bb      	ldr	r3, [r7, #24]
 80225ea:	041b      	lsls	r3, r3, #16
 80225ec:	69ba      	ldr	r2, [r7, #24]
 80225ee:	4313      	orrs	r3, r2
 80225f0:	61bb      	str	r3, [r7, #24]
    }

    /* too small of a word count */
    dst = (nk_byte*)ptr;
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	61fb      	str	r3, [r7, #28]
    if (size < 3 * nk_wsize) {
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	2b0b      	cmp	r3, #11
 80225fa:	d80c      	bhi.n	8022616 <nk_memset+0x5c>
        while (size--) *dst++ = (nk_byte)c0;
 80225fc:	e005      	b.n	802260a <nk_memset+0x50>
 80225fe:	69fb      	ldr	r3, [r7, #28]
 8022600:	1c5a      	adds	r2, r3, #1
 8022602:	61fa      	str	r2, [r7, #28]
 8022604:	68ba      	ldr	r2, [r7, #8]
 8022606:	b2d2      	uxtb	r2, r2
 8022608:	701a      	strb	r2, [r3, #0]
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	1e5a      	subs	r2, r3, #1
 802260e:	607a      	str	r2, [r7, #4]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d1f4      	bne.n	80225fe <nk_memset+0x44>
        return;
 8022614:	e03c      	b.n	8022690 <nk_memset+0xd6>
    }

    /* align destination */
    if ((t = NK_PTR_TO_UINT(dst) & nk_wmask) != 0) {
 8022616:	69fb      	ldr	r3, [r7, #28]
 8022618:	f003 0303 	and.w	r3, r3, #3
 802261c:	617b      	str	r3, [r7, #20]
 802261e:	697b      	ldr	r3, [r7, #20]
 8022620:	2b00      	cmp	r3, #0
 8022622:	d013      	beq.n	802264c <nk_memset+0x92>
        t = nk_wsize -t;
 8022624:	697b      	ldr	r3, [r7, #20]
 8022626:	f1c3 0304 	rsb	r3, r3, #4
 802262a:	617b      	str	r3, [r7, #20]
        size -= t;
 802262c:	687a      	ldr	r2, [r7, #4]
 802262e:	697b      	ldr	r3, [r7, #20]
 8022630:	1ad3      	subs	r3, r2, r3
 8022632:	607b      	str	r3, [r7, #4]
        do {
            *dst++ = (nk_byte)c0;
 8022634:	69fb      	ldr	r3, [r7, #28]
 8022636:	1c5a      	adds	r2, r3, #1
 8022638:	61fa      	str	r2, [r7, #28]
 802263a:	68ba      	ldr	r2, [r7, #8]
 802263c:	b2d2      	uxtb	r2, r2
 802263e:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 8022640:	697b      	ldr	r3, [r7, #20]
 8022642:	3b01      	subs	r3, #1
 8022644:	617b      	str	r3, [r7, #20]
 8022646:	697b      	ldr	r3, [r7, #20]
 8022648:	2b00      	cmp	r3, #0
 802264a:	d1f3      	bne.n	8022634 <nk_memset+0x7a>
    }

    /* fill word */
    t = size / nk_wsize;
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	089b      	lsrs	r3, r3, #2
 8022650:	617b      	str	r3, [r7, #20]
    do {
        *(nk_word*)((void*)dst) = c;
 8022652:	69fb      	ldr	r3, [r7, #28]
 8022654:	69ba      	ldr	r2, [r7, #24]
 8022656:	601a      	str	r2, [r3, #0]
        dst += nk_wsize;
 8022658:	69fb      	ldr	r3, [r7, #28]
 802265a:	3304      	adds	r3, #4
 802265c:	61fb      	str	r3, [r7, #28]
    } while (--t != 0);
 802265e:	697b      	ldr	r3, [r7, #20]
 8022660:	3b01      	subs	r3, #1
 8022662:	617b      	str	r3, [r7, #20]
 8022664:	697b      	ldr	r3, [r7, #20]
 8022666:	2b00      	cmp	r3, #0
 8022668:	d1f3      	bne.n	8022652 <nk_memset+0x98>

    /* fill trailing bytes */
    t = (size & nk_wmask);
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	f003 0303 	and.w	r3, r3, #3
 8022670:	617b      	str	r3, [r7, #20]
    if (t != 0) {
 8022672:	697b      	ldr	r3, [r7, #20]
 8022674:	2b00      	cmp	r3, #0
 8022676:	d00b      	beq.n	8022690 <nk_memset+0xd6>
        do {
            *dst++ = (nk_byte)c0;
 8022678:	69fb      	ldr	r3, [r7, #28]
 802267a:	1c5a      	adds	r2, r3, #1
 802267c:	61fa      	str	r2, [r7, #28]
 802267e:	68ba      	ldr	r2, [r7, #8]
 8022680:	b2d2      	uxtb	r2, r2
 8022682:	701a      	strb	r2, [r3, #0]
        } while (--t != 0);
 8022684:	697b      	ldr	r3, [r7, #20]
 8022686:	3b01      	subs	r3, #1
 8022688:	617b      	str	r3, [r7, #20]
 802268a:	697b      	ldr	r3, [r7, #20]
 802268c:	2b00      	cmp	r3, #0
 802268e:	d1f3      	bne.n	8022678 <nk_memset+0xbe>
    }

    #undef nk_word
    #undef nk_wsize
    #undef nk_wmask
}
 8022690:	3724      	adds	r7, #36	; 0x24
 8022692:	46bd      	mov	sp, r7
 8022694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022698:	4770      	bx	lr
	...

0802269c <nk_zero>:
//#endif
NK_LIB void
nk_zero(void *ptr, nk_size size)
{
 802269c:	b580      	push	{r7, lr}
 802269e:	b082      	sub	sp, #8
 80226a0:	af00      	add	r7, sp, #0
 80226a2:	6078      	str	r0, [r7, #4]
 80226a4:	6039      	str	r1, [r7, #0]
    NK_ASSERT(ptr);
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	d105      	bne.n	80226b8 <nk_zero+0x1c>
 80226ac:	4b07      	ldr	r3, [pc, #28]	; (80226cc <nk_zero+0x30>)
 80226ae:	4a08      	ldr	r2, [pc, #32]	; (80226d0 <nk_zero+0x34>)
 80226b0:	2184      	movs	r1, #132	; 0x84
 80226b2:	4808      	ldr	r0, [pc, #32]	; (80226d4 <nk_zero+0x38>)
 80226b4:	f002 fa1c 	bl	8024af0 <__assert_func>
    NK_MEMSET(ptr, 0, size);
 80226b8:	683a      	ldr	r2, [r7, #0]
 80226ba:	2100      	movs	r1, #0
 80226bc:	6878      	ldr	r0, [r7, #4]
 80226be:	f7ff ff7c 	bl	80225ba <nk_memset>
}
 80226c2:	bf00      	nop
 80226c4:	3708      	adds	r7, #8
 80226c6:	46bd      	mov	sp, r7
 80226c8:	bd80      	pop	{r7, pc}
 80226ca:	bf00      	nop
 80226cc:	08029408 	.word	0x08029408
 80226d0:	0802ac68 	.word	0x0802ac68
 80226d4:	0802940c 	.word	0x0802940c

080226d8 <nk_strlen>:
NK_API int
nk_strlen(const char *str)
{
 80226d8:	b580      	push	{r7, lr}
 80226da:	b084      	sub	sp, #16
 80226dc:	af00      	add	r7, sp, #0
 80226de:	6078      	str	r0, [r7, #4]
    int siz = 0;
 80226e0:	2300      	movs	r3, #0
 80226e2:	60fb      	str	r3, [r7, #12]
    NK_ASSERT(str);
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d108      	bne.n	80226fc <nk_strlen+0x24>
 80226ea:	4b0b      	ldr	r3, [pc, #44]	; (8022718 <nk_strlen+0x40>)
 80226ec:	4a0b      	ldr	r2, [pc, #44]	; (802271c <nk_strlen+0x44>)
 80226ee:	218b      	movs	r1, #139	; 0x8b
 80226f0:	480b      	ldr	r0, [pc, #44]	; (8022720 <nk_strlen+0x48>)
 80226f2:	f002 f9fd 	bl	8024af0 <__assert_func>
    while (str && *str++ != '\0') siz++;
 80226f6:	68fb      	ldr	r3, [r7, #12]
 80226f8:	3301      	adds	r3, #1
 80226fa:	60fb      	str	r3, [r7, #12]
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d005      	beq.n	802270e <nk_strlen+0x36>
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	1c5a      	adds	r2, r3, #1
 8022706:	607a      	str	r2, [r7, #4]
 8022708:	781b      	ldrb	r3, [r3, #0]
 802270a:	2b00      	cmp	r3, #0
 802270c:	d1f3      	bne.n	80226f6 <nk_strlen+0x1e>
    return siz;
 802270e:	68fb      	ldr	r3, [r7, #12]
}
 8022710:	4618      	mov	r0, r3
 8022712:	3710      	adds	r7, #16
 8022714:	46bd      	mov	sp, r7
 8022716:	bd80      	pop	{r7, pc}
 8022718:	08029428 	.word	0x08029428
 802271c:	0802ac70 	.word	0x0802ac70
 8022720:	0802940c 	.word	0x0802940c

08022724 <nk_strtoi>:
NK_API int
nk_strtoi(const char *str, const char **endptr)
{
 8022724:	b580      	push	{r7, lr}
 8022726:	b086      	sub	sp, #24
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
 802272c:	6039      	str	r1, [r7, #0]
    int neg = 1;
 802272e:	2301      	movs	r3, #1
 8022730:	617b      	str	r3, [r7, #20]
    const char *p = str;
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	613b      	str	r3, [r7, #16]
    int value = 0;
 8022736:	2300      	movs	r3, #0
 8022738:	60fb      	str	r3, [r7, #12]

    NK_ASSERT(str);
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	2b00      	cmp	r3, #0
 802273e:	d105      	bne.n	802274c <nk_strtoi+0x28>
 8022740:	4b22      	ldr	r3, [pc, #136]	; (80227cc <nk_strtoi+0xa8>)
 8022742:	4a23      	ldr	r2, [pc, #140]	; (80227d0 <nk_strtoi+0xac>)
 8022744:	2196      	movs	r1, #150	; 0x96
 8022746:	4823      	ldr	r0, [pc, #140]	; (80227d4 <nk_strtoi+0xb0>)
 8022748:	f002 f9d2 	bl	8024af0 <__assert_func>
    if (!str) return 0;
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	2b00      	cmp	r3, #0
 8022750:	d104      	bne.n	802275c <nk_strtoi+0x38>
 8022752:	2300      	movs	r3, #0
 8022754:	e035      	b.n	80227c2 <nk_strtoi+0x9e>

    /* skip whitespace */
    while (*p == ' ') p++;
 8022756:	693b      	ldr	r3, [r7, #16]
 8022758:	3301      	adds	r3, #1
 802275a:	613b      	str	r3, [r7, #16]
 802275c:	693b      	ldr	r3, [r7, #16]
 802275e:	781b      	ldrb	r3, [r3, #0]
 8022760:	2b20      	cmp	r3, #32
 8022762:	d0f8      	beq.n	8022756 <nk_strtoi+0x32>
    if (*p == '-') {
 8022764:	693b      	ldr	r3, [r7, #16]
 8022766:	781b      	ldrb	r3, [r3, #0]
 8022768:	2b2d      	cmp	r3, #45	; 0x2d
 802276a:	d114      	bne.n	8022796 <nk_strtoi+0x72>
        neg = -1;
 802276c:	f04f 33ff 	mov.w	r3, #4294967295
 8022770:	617b      	str	r3, [r7, #20]
        p++;
 8022772:	693b      	ldr	r3, [r7, #16]
 8022774:	3301      	adds	r3, #1
 8022776:	613b      	str	r3, [r7, #16]
    }
    while (*p && *p >= '0' && *p <= '9') {
 8022778:	e00d      	b.n	8022796 <nk_strtoi+0x72>
        value = value * 10 + (int) (*p - '0');
 802277a:	68fa      	ldr	r2, [r7, #12]
 802277c:	4613      	mov	r3, r2
 802277e:	009b      	lsls	r3, r3, #2
 8022780:	4413      	add	r3, r2
 8022782:	005b      	lsls	r3, r3, #1
 8022784:	461a      	mov	r2, r3
 8022786:	693b      	ldr	r3, [r7, #16]
 8022788:	781b      	ldrb	r3, [r3, #0]
 802278a:	3b30      	subs	r3, #48	; 0x30
 802278c:	4413      	add	r3, r2
 802278e:	60fb      	str	r3, [r7, #12]
        p++;
 8022790:	693b      	ldr	r3, [r7, #16]
 8022792:	3301      	adds	r3, #1
 8022794:	613b      	str	r3, [r7, #16]
    while (*p && *p >= '0' && *p <= '9') {
 8022796:	693b      	ldr	r3, [r7, #16]
 8022798:	781b      	ldrb	r3, [r3, #0]
 802279a:	2b00      	cmp	r3, #0
 802279c:	d007      	beq.n	80227ae <nk_strtoi+0x8a>
 802279e:	693b      	ldr	r3, [r7, #16]
 80227a0:	781b      	ldrb	r3, [r3, #0]
 80227a2:	2b2f      	cmp	r3, #47	; 0x2f
 80227a4:	d903      	bls.n	80227ae <nk_strtoi+0x8a>
 80227a6:	693b      	ldr	r3, [r7, #16]
 80227a8:	781b      	ldrb	r3, [r3, #0]
 80227aa:	2b39      	cmp	r3, #57	; 0x39
 80227ac:	d9e5      	bls.n	802277a <nk_strtoi+0x56>
    }
    if (endptr)
 80227ae:	683b      	ldr	r3, [r7, #0]
 80227b0:	2b00      	cmp	r3, #0
 80227b2:	d002      	beq.n	80227ba <nk_strtoi+0x96>
        *endptr = p;
 80227b4:	683b      	ldr	r3, [r7, #0]
 80227b6:	693a      	ldr	r2, [r7, #16]
 80227b8:	601a      	str	r2, [r3, #0]
    return neg*value;
 80227ba:	697b      	ldr	r3, [r7, #20]
 80227bc:	68fa      	ldr	r2, [r7, #12]
 80227be:	fb02 f303 	mul.w	r3, r2, r3
}
 80227c2:	4618      	mov	r0, r3
 80227c4:	3718      	adds	r7, #24
 80227c6:	46bd      	mov	sp, r7
 80227c8:	bd80      	pop	{r7, pc}
 80227ca:	bf00      	nop
 80227cc:	08029428 	.word	0x08029428
 80227d0:	0802ac7c 	.word	0x0802ac7c
 80227d4:	0802940c 	.word	0x0802940c

080227d8 <nk_strtod>:
NK_API double
nk_strtod(const char *str, const char **endptr)
{
 80227d8:	b5b0      	push	{r4, r5, r7, lr}
 80227da:	b090      	sub	sp, #64	; 0x40
 80227dc:	af00      	add	r7, sp, #0
 80227de:	6078      	str	r0, [r7, #4]
 80227e0:	6039      	str	r1, [r7, #0]
    double m;
    double neg = 1.0;
 80227e2:	f04f 0200 	mov.w	r2, #0
 80227e6:	4b8e      	ldr	r3, [pc, #568]	; (8022a20 <nk_strtod+0x248>)
 80227e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const char *p = str;
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    double value = 0;
 80227f0:	f04f 0200 	mov.w	r2, #0
 80227f4:	f04f 0300 	mov.w	r3, #0
 80227f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double number = 0;
 80227fc:	f04f 0200 	mov.w	r2, #0
 8022800:	f04f 0300 	mov.w	r3, #0
 8022804:	e9c7 2302 	strd	r2, r3, [r7, #8]

    NK_ASSERT(str);
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	2b00      	cmp	r3, #0
 802280c:	d105      	bne.n	802281a <nk_strtod+0x42>
 802280e:	4b85      	ldr	r3, [pc, #532]	; (8022a24 <nk_strtod+0x24c>)
 8022810:	4a85      	ldr	r2, [pc, #532]	; (8022a28 <nk_strtod+0x250>)
 8022812:	21b0      	movs	r1, #176	; 0xb0
 8022814:	4885      	ldr	r0, [pc, #532]	; (8022a2c <nk_strtod+0x254>)
 8022816:	f002 f96b 	bl	8024af0 <__assert_func>
    if (!str) return 0;
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	2b00      	cmp	r3, #0
 802281e:	d107      	bne.n	8022830 <nk_strtod+0x58>
 8022820:	f04f 0200 	mov.w	r2, #0
 8022824:	f04f 0300 	mov.w	r3, #0
 8022828:	e0ea      	b.n	8022a00 <nk_strtod+0x228>

    /* skip whitespace */
    while (*p == ' ') p++;
 802282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802282c:	3301      	adds	r3, #1
 802282e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022832:	781b      	ldrb	r3, [r3, #0]
 8022834:	2b20      	cmp	r3, #32
 8022836:	d0f8      	beq.n	802282a <nk_strtod+0x52>
    if (*p == '-') {
 8022838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802283a:	781b      	ldrb	r3, [r3, #0]
 802283c:	2b2d      	cmp	r3, #45	; 0x2d
 802283e:	d126      	bne.n	802288e <nk_strtod+0xb6>
        neg = -1.0;
 8022840:	f04f 0200 	mov.w	r2, #0
 8022844:	4b7a      	ldr	r3, [pc, #488]	; (8022a30 <nk_strtod+0x258>)
 8022846:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        p++;
 802284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802284c:	3301      	adds	r3, #1
 802284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    while (*p && *p != '.' && *p != 'e') {
 8022850:	e01d      	b.n	802288e <nk_strtod+0xb6>
        value = value * 10.0 + (double) (*p - '0');
 8022852:	f04f 0200 	mov.w	r2, #0
 8022856:	4b77      	ldr	r3, [pc, #476]	; (8022a34 <nk_strtod+0x25c>)
 8022858:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802285c:	f7dd fef4 	bl	8000648 <__aeabi_dmul>
 8022860:	4602      	mov	r2, r0
 8022862:	460b      	mov	r3, r1
 8022864:	4614      	mov	r4, r2
 8022866:	461d      	mov	r5, r3
 8022868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802286a:	781b      	ldrb	r3, [r3, #0]
 802286c:	3b30      	subs	r3, #48	; 0x30
 802286e:	4618      	mov	r0, r3
 8022870:	f7dd fe80 	bl	8000574 <__aeabi_i2d>
 8022874:	4602      	mov	r2, r0
 8022876:	460b      	mov	r3, r1
 8022878:	4620      	mov	r0, r4
 802287a:	4629      	mov	r1, r5
 802287c:	f7dd fd2e 	bl	80002dc <__adddf3>
 8022880:	4602      	mov	r2, r0
 8022882:	460b      	mov	r3, r1
 8022884:	e9c7 2308 	strd	r2, r3, [r7, #32]
        p++;
 8022888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802288a:	3301      	adds	r3, #1
 802288c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (*p && *p != '.' && *p != 'e') {
 802288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022890:	781b      	ldrb	r3, [r3, #0]
 8022892:	2b00      	cmp	r3, #0
 8022894:	d007      	beq.n	80228a6 <nk_strtod+0xce>
 8022896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022898:	781b      	ldrb	r3, [r3, #0]
 802289a:	2b2e      	cmp	r3, #46	; 0x2e
 802289c:	d003      	beq.n	80228a6 <nk_strtod+0xce>
 802289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228a0:	781b      	ldrb	r3, [r3, #0]
 80228a2:	2b65      	cmp	r3, #101	; 0x65
 80228a4:	d1d5      	bne.n	8022852 <nk_strtod+0x7a>
    }

    if (*p == '.') {
 80228a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228a8:	781b      	ldrb	r3, [r3, #0]
 80228aa:	2b2e      	cmp	r3, #46	; 0x2e
 80228ac:	d132      	bne.n	8022914 <nk_strtod+0x13c>
        p++;
 80228ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228b0:	3301      	adds	r3, #1
 80228b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 80228b4:	a358      	add	r3, pc, #352	; (adr r3, 8022a18 <nk_strtod+0x240>)
 80228b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80228be:	e021      	b.n	8022904 <nk_strtod+0x12c>
            value = value + (double) (*p - '0') * m;
 80228c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80228c2:	781b      	ldrb	r3, [r3, #0]
 80228c4:	3b30      	subs	r3, #48	; 0x30
 80228c6:	4618      	mov	r0, r3
 80228c8:	f7dd fe54 	bl	8000574 <__aeabi_i2d>
 80228cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80228d0:	f7dd feba 	bl	8000648 <__aeabi_dmul>
 80228d4:	4602      	mov	r2, r0
 80228d6:	460b      	mov	r3, r1
 80228d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80228dc:	f7dd fcfe 	bl	80002dc <__adddf3>
 80228e0:	4602      	mov	r2, r0
 80228e2:	460b      	mov	r3, r1
 80228e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
            m *= 0.1;
 80228e8:	a34b      	add	r3, pc, #300	; (adr r3, 8022a18 <nk_strtod+0x240>)
 80228ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80228f2:	f7dd fea9 	bl	8000648 <__aeabi_dmul>
 80228f6:	4602      	mov	r2, r0
 80228f8:	460b      	mov	r3, r1
 80228fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        for(m = 0.1; *p && *p != 'e'; p++ ) {
 80228fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022900:	3301      	adds	r3, #1
 8022902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022906:	781b      	ldrb	r3, [r3, #0]
 8022908:	2b00      	cmp	r3, #0
 802290a:	d003      	beq.n	8022914 <nk_strtod+0x13c>
 802290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802290e:	781b      	ldrb	r3, [r3, #0]
 8022910:	2b65      	cmp	r3, #101	; 0x65
 8022912:	d1d5      	bne.n	80228c0 <nk_strtod+0xe8>
        }
    }
    if (*p == 'e') {
 8022914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022916:	781b      	ldrb	r3, [r3, #0]
 8022918:	2b65      	cmp	r3, #101	; 0x65
 802291a:	d15f      	bne.n	80229dc <nk_strtod+0x204>
        int i, pow, div;
        p++;
 802291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802291e:	3301      	adds	r3, #1
 8022920:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (*p == '-') {
 8022922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022924:	781b      	ldrb	r3, [r3, #0]
 8022926:	2b2d      	cmp	r3, #45	; 0x2d
 8022928:	d105      	bne.n	8022936 <nk_strtod+0x15e>
            div = nk_true;
 802292a:	2301      	movs	r3, #1
 802292c:	617b      	str	r3, [r7, #20]
            p++;
 802292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022930:	3301      	adds	r3, #1
 8022932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022934:	e00b      	b.n	802294e <nk_strtod+0x176>
        } else if (*p == '+') {
 8022936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022938:	781b      	ldrb	r3, [r3, #0]
 802293a:	2b2b      	cmp	r3, #43	; 0x2b
 802293c:	d105      	bne.n	802294a <nk_strtod+0x172>
            div = nk_false;
 802293e:	2300      	movs	r3, #0
 8022940:	617b      	str	r3, [r7, #20]
            p++;
 8022942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022944:	3301      	adds	r3, #1
 8022946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022948:	e001      	b.n	802294e <nk_strtod+0x176>
        } else div = nk_false;
 802294a:	2300      	movs	r3, #0
 802294c:	617b      	str	r3, [r7, #20]

        for (pow = 0; *p; p++)
 802294e:	2300      	movs	r3, #0
 8022950:	61bb      	str	r3, [r7, #24]
 8022952:	e00d      	b.n	8022970 <nk_strtod+0x198>
            pow = pow * 10 + (int) (*p - '0');
 8022954:	69ba      	ldr	r2, [r7, #24]
 8022956:	4613      	mov	r3, r2
 8022958:	009b      	lsls	r3, r3, #2
 802295a:	4413      	add	r3, r2
 802295c:	005b      	lsls	r3, r3, #1
 802295e:	461a      	mov	r2, r3
 8022960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022962:	781b      	ldrb	r3, [r3, #0]
 8022964:	3b30      	subs	r3, #48	; 0x30
 8022966:	4413      	add	r3, r2
 8022968:	61bb      	str	r3, [r7, #24]
        for (pow = 0; *p; p++)
 802296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802296c:	3301      	adds	r3, #1
 802296e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022972:	781b      	ldrb	r3, [r3, #0]
 8022974:	2b00      	cmp	r3, #0
 8022976:	d1ed      	bne.n	8022954 <nk_strtod+0x17c>

        for (m = 1.0, i = 0; i < pow; i++)
 8022978:	f04f 0200 	mov.w	r2, #0
 802297c:	4b28      	ldr	r3, [pc, #160]	; (8022a20 <nk_strtod+0x248>)
 802297e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8022982:	2300      	movs	r3, #0
 8022984:	61fb      	str	r3, [r7, #28]
 8022986:	e00d      	b.n	80229a4 <nk_strtod+0x1cc>
            m *= 10.0;
 8022988:	f04f 0200 	mov.w	r2, #0
 802298c:	4b29      	ldr	r3, [pc, #164]	; (8022a34 <nk_strtod+0x25c>)
 802298e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8022992:	f7dd fe59 	bl	8000648 <__aeabi_dmul>
 8022996:	4602      	mov	r2, r0
 8022998:	460b      	mov	r3, r1
 802299a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        for (m = 1.0, i = 0; i < pow; i++)
 802299e:	69fb      	ldr	r3, [r7, #28]
 80229a0:	3301      	adds	r3, #1
 80229a2:	61fb      	str	r3, [r7, #28]
 80229a4:	69fa      	ldr	r2, [r7, #28]
 80229a6:	69bb      	ldr	r3, [r7, #24]
 80229a8:	429a      	cmp	r2, r3
 80229aa:	dbed      	blt.n	8022988 <nk_strtod+0x1b0>

        if (div)
 80229ac:	697b      	ldr	r3, [r7, #20]
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	d00a      	beq.n	80229c8 <nk_strtod+0x1f0>
            value /= m;
 80229b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80229b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229ba:	f7dd ff6f 	bl	800089c <__aeabi_ddiv>
 80229be:	4602      	mov	r2, r0
 80229c0:	460b      	mov	r3, r1
 80229c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80229c6:	e009      	b.n	80229dc <nk_strtod+0x204>
        else value *= m;
 80229c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80229cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229d0:	f7dd fe3a 	bl	8000648 <__aeabi_dmul>
 80229d4:	4602      	mov	r2, r0
 80229d6:	460b      	mov	r3, r1
 80229d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    number = value * neg;
 80229dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80229e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80229e4:	f7dd fe30 	bl	8000648 <__aeabi_dmul>
 80229e8:	4602      	mov	r2, r0
 80229ea:	460b      	mov	r3, r1
 80229ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (endptr)
 80229f0:	683b      	ldr	r3, [r7, #0]
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d002      	beq.n	80229fc <nk_strtod+0x224>
        *endptr = p;
 80229f6:	683b      	ldr	r3, [r7, #0]
 80229f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80229fa:	601a      	str	r2, [r3, #0]
    return number;
 80229fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8022a00:	ec43 2b17 	vmov	d7, r2, r3
 8022a04:	eeb0 0a47 	vmov.f32	s0, s14
 8022a08:	eef0 0a67 	vmov.f32	s1, s15
 8022a0c:	3740      	adds	r7, #64	; 0x40
 8022a0e:	46bd      	mov	sp, r7
 8022a10:	bdb0      	pop	{r4, r5, r7, pc}
 8022a12:	bf00      	nop
 8022a14:	f3af 8000 	nop.w
 8022a18:	9999999a 	.word	0x9999999a
 8022a1c:	3fb99999 	.word	0x3fb99999
 8022a20:	3ff00000 	.word	0x3ff00000
 8022a24:	08029428 	.word	0x08029428
 8022a28:	0802ac88 	.word	0x0802ac88
 8022a2c:	0802940c 	.word	0x0802940c
 8022a30:	bff00000 	.word	0xbff00000
 8022a34:	40240000 	.word	0x40240000

08022a38 <nk_strtof>:
NK_API float
nk_strtof(const char *str, const char **endptr)
{
 8022a38:	b580      	push	{r7, lr}
 8022a3a:	b086      	sub	sp, #24
 8022a3c:	af00      	add	r7, sp, #0
 8022a3e:	6078      	str	r0, [r7, #4]
 8022a40:	6039      	str	r1, [r7, #0]
    float float_value;
    double double_value;
    double_value = NK_STRTOD(str, endptr);
 8022a42:	6839      	ldr	r1, [r7, #0]
 8022a44:	6878      	ldr	r0, [r7, #4]
 8022a46:	f7ff fec7 	bl	80227d8 <nk_strtod>
 8022a4a:	ed87 0b04 	vstr	d0, [r7, #16]
    float_value = (float)double_value;
 8022a4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022a52:	f7de f8f1 	bl	8000c38 <__aeabi_d2f>
 8022a56:	4603      	mov	r3, r0
 8022a58:	60fb      	str	r3, [r7, #12]
    return float_value;
 8022a5a:	68fb      	ldr	r3, [r7, #12]
 8022a5c:	ee07 3a90 	vmov	s15, r3
}
 8022a60:	eeb0 0a67 	vmov.f32	s0, s15
 8022a64:	3718      	adds	r7, #24
 8022a66:	46bd      	mov	sp, r7
 8022a68:	bd80      	pop	{r7, pc}
	...

08022a6c <nk_stricmpn>:
    } while (c1);
    return 0;
}
NK_API int
nk_stricmpn(const char *s1, const char *s2, int n)
{
 8022a6c:	b580      	push	{r7, lr}
 8022a6e:	b088      	sub	sp, #32
 8022a70:	af00      	add	r7, sp, #0
 8022a72:	60f8      	str	r0, [r7, #12]
 8022a74:	60b9      	str	r1, [r7, #8]
 8022a76:	607a      	str	r2, [r7, #4]
    int c1,c2,d;
    NK_ASSERT(n >= 0);
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	da06      	bge.n	8022a8c <nk_stricmpn+0x20>
 8022a7e:	4b25      	ldr	r3, [pc, #148]	; (8022b14 <nk_stricmpn+0xa8>)
 8022a80:	4a25      	ldr	r2, [pc, #148]	; (8022b18 <nk_stricmpn+0xac>)
 8022a82:	f240 1103 	movw	r1, #259	; 0x103
 8022a86:	4825      	ldr	r0, [pc, #148]	; (8022b1c <nk_stricmpn+0xb0>)
 8022a88:	f002 f832 	bl	8024af0 <__assert_func>
    do {
        c1 = *s1++;
 8022a8c:	68fb      	ldr	r3, [r7, #12]
 8022a8e:	1c5a      	adds	r2, r3, #1
 8022a90:	60fa      	str	r2, [r7, #12]
 8022a92:	781b      	ldrb	r3, [r3, #0]
 8022a94:	61bb      	str	r3, [r7, #24]
        c2 = *s2++;
 8022a96:	68bb      	ldr	r3, [r7, #8]
 8022a98:	1c5a      	adds	r2, r3, #1
 8022a9a:	60ba      	str	r2, [r7, #8]
 8022a9c:	781b      	ldrb	r3, [r3, #0]
 8022a9e:	617b      	str	r3, [r7, #20]
        if (!n--) return 0;
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	1e5a      	subs	r2, r3, #1
 8022aa4:	607a      	str	r2, [r7, #4]
 8022aa6:	2b00      	cmp	r3, #0
 8022aa8:	d101      	bne.n	8022aae <nk_stricmpn+0x42>
 8022aaa:	2300      	movs	r3, #0
 8022aac:	e02e      	b.n	8022b0c <nk_stricmpn+0xa0>

        d = c1 - c2;
 8022aae:	69ba      	ldr	r2, [r7, #24]
 8022ab0:	697b      	ldr	r3, [r7, #20]
 8022ab2:	1ad3      	subs	r3, r2, r3
 8022ab4:	61fb      	str	r3, [r7, #28]
        while (d) {
 8022ab6:	bf00      	nop
 8022ab8:	69fb      	ldr	r3, [r7, #28]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d022      	beq.n	8022b04 <nk_stricmpn+0x98>
            if (c1 <= 'Z' && c1 >= 'A') {
 8022abe:	69bb      	ldr	r3, [r7, #24]
 8022ac0:	2b5a      	cmp	r3, #90	; 0x5a
 8022ac2:	dc08      	bgt.n	8022ad6 <nk_stricmpn+0x6a>
 8022ac4:	69bb      	ldr	r3, [r7, #24]
 8022ac6:	2b40      	cmp	r3, #64	; 0x40
 8022ac8:	dd05      	ble.n	8022ad6 <nk_stricmpn+0x6a>
                d += ('a' - 'A');
 8022aca:	69fb      	ldr	r3, [r7, #28]
 8022acc:	3320      	adds	r3, #32
 8022ace:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 8022ad0:	69fb      	ldr	r3, [r7, #28]
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d013      	beq.n	8022afe <nk_stricmpn+0x92>
            }
            if (c2 <= 'Z' && c2 >= 'A') {
 8022ad6:	697b      	ldr	r3, [r7, #20]
 8022ad8:	2b5a      	cmp	r3, #90	; 0x5a
 8022ada:	dc08      	bgt.n	8022aee <nk_stricmpn+0x82>
 8022adc:	697b      	ldr	r3, [r7, #20]
 8022ade:	2b40      	cmp	r3, #64	; 0x40
 8022ae0:	dd05      	ble.n	8022aee <nk_stricmpn+0x82>
                d -= ('a' - 'A');
 8022ae2:	69fb      	ldr	r3, [r7, #28]
 8022ae4:	3b20      	subs	r3, #32
 8022ae6:	61fb      	str	r3, [r7, #28]
                if (!d) break;
 8022ae8:	69fb      	ldr	r3, [r7, #28]
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d009      	beq.n	8022b02 <nk_stricmpn+0x96>
            }
            return ((d >= 0) << 1) - 1;
 8022aee:	69fb      	ldr	r3, [r7, #28]
 8022af0:	2b00      	cmp	r3, #0
 8022af2:	db01      	blt.n	8022af8 <nk_stricmpn+0x8c>
 8022af4:	2301      	movs	r3, #1
 8022af6:	e009      	b.n	8022b0c <nk_stricmpn+0xa0>
 8022af8:	f04f 33ff 	mov.w	r3, #4294967295
 8022afc:	e006      	b.n	8022b0c <nk_stricmpn+0xa0>
                if (!d) break;
 8022afe:	bf00      	nop
 8022b00:	e000      	b.n	8022b04 <nk_stricmpn+0x98>
                if (!d) break;
 8022b02:	bf00      	nop
        }
    } while (c1);
 8022b04:	69bb      	ldr	r3, [r7, #24]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d1c0      	bne.n	8022a8c <nk_stricmpn+0x20>
    return 0;
 8022b0a:	2300      	movs	r3, #0
}
 8022b0c:	4618      	mov	r0, r3
 8022b0e:	3720      	adds	r7, #32
 8022b10:	46bd      	mov	sp, r7
 8022b12:	bd80      	pop	{r7, pc}
 8022b14:	0802942c 	.word	0x0802942c
 8022b18:	0802ac94 	.word	0x0802ac94
 8022b1c:	0802940c 	.word	0x0802940c

08022b20 <nk_string_float_limit>:
{
    return nk_strmatch_fuzzy_text(str, nk_strlen(str), pattern, out_score);
}
NK_LIB int
nk_string_float_limit(char *string, int prec)
{
 8022b20:	b480      	push	{r7}
 8022b22:	b085      	sub	sp, #20
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	6078      	str	r0, [r7, #4]
 8022b28:	6039      	str	r1, [r7, #0]
    int dot = 0;
 8022b2a:	2300      	movs	r3, #0
 8022b2c:	60fb      	str	r3, [r7, #12]
    char *c = string;
 8022b2e:	687b      	ldr	r3, [r7, #4]
 8022b30:	60bb      	str	r3, [r7, #8]
    while (*c) {
 8022b32:	e01b      	b.n	8022b6c <nk_string_float_limit+0x4c>
        if (*c == '.') {
 8022b34:	68bb      	ldr	r3, [r7, #8]
 8022b36:	781b      	ldrb	r3, [r3, #0]
 8022b38:	2b2e      	cmp	r3, #46	; 0x2e
 8022b3a:	d105      	bne.n	8022b48 <nk_string_float_limit+0x28>
            dot = 1;
 8022b3c:	2301      	movs	r3, #1
 8022b3e:	60fb      	str	r3, [r7, #12]
            c++;
 8022b40:	68bb      	ldr	r3, [r7, #8]
 8022b42:	3301      	adds	r3, #1
 8022b44:	60bb      	str	r3, [r7, #8]
            continue;
 8022b46:	e011      	b.n	8022b6c <nk_string_float_limit+0x4c>
        }
        if (dot == (prec+1)) {
 8022b48:	683b      	ldr	r3, [r7, #0]
 8022b4a:	3301      	adds	r3, #1
 8022b4c:	68fa      	ldr	r2, [r7, #12]
 8022b4e:	429a      	cmp	r2, r3
 8022b50:	d103      	bne.n	8022b5a <nk_string_float_limit+0x3a>
            *c = 0;
 8022b52:	68bb      	ldr	r3, [r7, #8]
 8022b54:	2200      	movs	r2, #0
 8022b56:	701a      	strb	r2, [r3, #0]
            break;
 8022b58:	e00c      	b.n	8022b74 <nk_string_float_limit+0x54>
        }
        if (dot > 0) dot++;
 8022b5a:	68fb      	ldr	r3, [r7, #12]
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	dd02      	ble.n	8022b66 <nk_string_float_limit+0x46>
 8022b60:	68fb      	ldr	r3, [r7, #12]
 8022b62:	3301      	adds	r3, #1
 8022b64:	60fb      	str	r3, [r7, #12]
        c++;
 8022b66:	68bb      	ldr	r3, [r7, #8]
 8022b68:	3301      	adds	r3, #1
 8022b6a:	60bb      	str	r3, [r7, #8]
    while (*c) {
 8022b6c:	68bb      	ldr	r3, [r7, #8]
 8022b6e:	781b      	ldrb	r3, [r3, #0]
 8022b70:	2b00      	cmp	r3, #0
 8022b72:	d1df      	bne.n	8022b34 <nk_string_float_limit+0x14>
    }
    return (int)(c - string);
 8022b74:	68ba      	ldr	r2, [r7, #8]
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	1ad3      	subs	r3, r2, r3
}
 8022b7a:	4618      	mov	r0, r3
 8022b7c:	3714      	adds	r7, #20
 8022b7e:	46bd      	mov	sp, r7
 8022b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b84:	4770      	bx	lr

08022b86 <nk_strrev_ascii>:
NK_INTERN void
nk_strrev_ascii(char *s)
{
 8022b86:	b580      	push	{r7, lr}
 8022b88:	b086      	sub	sp, #24
 8022b8a:	af00      	add	r7, sp, #0
 8022b8c:	6078      	str	r0, [r7, #4]
    int len = nk_strlen(s);
 8022b8e:	6878      	ldr	r0, [r7, #4]
 8022b90:	f7ff fda2 	bl	80226d8 <nk_strlen>
 8022b94:	6138      	str	r0, [r7, #16]
    int end = len / 2;
 8022b96:	693b      	ldr	r3, [r7, #16]
 8022b98:	0fda      	lsrs	r2, r3, #31
 8022b9a:	4413      	add	r3, r2
 8022b9c:	105b      	asrs	r3, r3, #1
 8022b9e:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8022ba0:	2300      	movs	r3, #0
 8022ba2:	617b      	str	r3, [r7, #20]
    char t;
    for (; i < end; ++i) {
 8022ba4:	e01c      	b.n	8022be0 <nk_strrev_ascii+0x5a>
        t = s[i];
 8022ba6:	697b      	ldr	r3, [r7, #20]
 8022ba8:	687a      	ldr	r2, [r7, #4]
 8022baa:	4413      	add	r3, r2
 8022bac:	781b      	ldrb	r3, [r3, #0]
 8022bae:	72fb      	strb	r3, [r7, #11]
        s[i] = s[len - 1 - i];
 8022bb0:	693b      	ldr	r3, [r7, #16]
 8022bb2:	1e5a      	subs	r2, r3, #1
 8022bb4:	697b      	ldr	r3, [r7, #20]
 8022bb6:	1ad3      	subs	r3, r2, r3
 8022bb8:	461a      	mov	r2, r3
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	441a      	add	r2, r3
 8022bbe:	697b      	ldr	r3, [r7, #20]
 8022bc0:	6879      	ldr	r1, [r7, #4]
 8022bc2:	440b      	add	r3, r1
 8022bc4:	7812      	ldrb	r2, [r2, #0]
 8022bc6:	701a      	strb	r2, [r3, #0]
        s[len -1 - i] = t;
 8022bc8:	693b      	ldr	r3, [r7, #16]
 8022bca:	1e5a      	subs	r2, r3, #1
 8022bcc:	697b      	ldr	r3, [r7, #20]
 8022bce:	1ad3      	subs	r3, r2, r3
 8022bd0:	461a      	mov	r2, r3
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	4413      	add	r3, r2
 8022bd6:	7afa      	ldrb	r2, [r7, #11]
 8022bd8:	701a      	strb	r2, [r3, #0]
    for (; i < end; ++i) {
 8022bda:	697b      	ldr	r3, [r7, #20]
 8022bdc:	3301      	adds	r3, #1
 8022bde:	617b      	str	r3, [r7, #20]
 8022be0:	697a      	ldr	r2, [r7, #20]
 8022be2:	68fb      	ldr	r3, [r7, #12]
 8022be4:	429a      	cmp	r2, r3
 8022be6:	dbde      	blt.n	8022ba6 <nk_strrev_ascii+0x20>
    }
}
 8022be8:	bf00      	nop
 8022bea:	bf00      	nop
 8022bec:	3718      	adds	r7, #24
 8022bee:	46bd      	mov	sp, r7
 8022bf0:	bd80      	pop	{r7, pc}
	...

08022bf4 <nk_itoa>:
NK_LIB char*
nk_itoa(char *s, long n)
{
 8022bf4:	b580      	push	{r7, lr}
 8022bf6:	b084      	sub	sp, #16
 8022bf8:	af00      	add	r7, sp, #0
 8022bfa:	6078      	str	r0, [r7, #4]
 8022bfc:	6039      	str	r1, [r7, #0]
    long i = 0;
 8022bfe:	2300      	movs	r3, #0
 8022c00:	60fb      	str	r3, [r7, #12]
    if (n == 0) {
 8022c02:	683b      	ldr	r3, [r7, #0]
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d10e      	bne.n	8022c26 <nk_itoa+0x32>
        s[i++] = '0';
 8022c08:	68fb      	ldr	r3, [r7, #12]
 8022c0a:	1c5a      	adds	r2, r3, #1
 8022c0c:	60fa      	str	r2, [r7, #12]
 8022c0e:	461a      	mov	r2, r3
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	4413      	add	r3, r2
 8022c14:	2230      	movs	r2, #48	; 0x30
 8022c16:	701a      	strb	r2, [r3, #0]
        s[i] = 0;
 8022c18:	68fb      	ldr	r3, [r7, #12]
 8022c1a:	687a      	ldr	r2, [r7, #4]
 8022c1c:	4413      	add	r3, r2
 8022c1e:	2200      	movs	r2, #0
 8022c20:	701a      	strb	r2, [r3, #0]
        return s;
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	e03f      	b.n	8022ca6 <nk_itoa+0xb2>
    }
    if (n < 0) {
 8022c26:	683b      	ldr	r3, [r7, #0]
 8022c28:	2b00      	cmp	r3, #0
 8022c2a:	da29      	bge.n	8022c80 <nk_itoa+0x8c>
        s[i++] = '-';
 8022c2c:	68fb      	ldr	r3, [r7, #12]
 8022c2e:	1c5a      	adds	r2, r3, #1
 8022c30:	60fa      	str	r2, [r7, #12]
 8022c32:	461a      	mov	r2, r3
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	4413      	add	r3, r2
 8022c38:	222d      	movs	r2, #45	; 0x2d
 8022c3a:	701a      	strb	r2, [r3, #0]
        n = -n;
 8022c3c:	683b      	ldr	r3, [r7, #0]
 8022c3e:	425b      	negs	r3, r3
 8022c40:	603b      	str	r3, [r7, #0]
    }
    while (n > 0) {
 8022c42:	e01d      	b.n	8022c80 <nk_itoa+0x8c>
        s[i++] = (char)('0' + (n % 10));
 8022c44:	683a      	ldr	r2, [r7, #0]
 8022c46:	4b1a      	ldr	r3, [pc, #104]	; (8022cb0 <nk_itoa+0xbc>)
 8022c48:	fb83 1302 	smull	r1, r3, r3, r2
 8022c4c:	1099      	asrs	r1, r3, #2
 8022c4e:	17d3      	asrs	r3, r2, #31
 8022c50:	1ac9      	subs	r1, r1, r3
 8022c52:	460b      	mov	r3, r1
 8022c54:	009b      	lsls	r3, r3, #2
 8022c56:	440b      	add	r3, r1
 8022c58:	005b      	lsls	r3, r3, #1
 8022c5a:	1ad1      	subs	r1, r2, r3
 8022c5c:	b2ca      	uxtb	r2, r1
 8022c5e:	68fb      	ldr	r3, [r7, #12]
 8022c60:	1c59      	adds	r1, r3, #1
 8022c62:	60f9      	str	r1, [r7, #12]
 8022c64:	4619      	mov	r1, r3
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	440b      	add	r3, r1
 8022c6a:	3230      	adds	r2, #48	; 0x30
 8022c6c:	b2d2      	uxtb	r2, r2
 8022c6e:	701a      	strb	r2, [r3, #0]
        n /= 10;
 8022c70:	683b      	ldr	r3, [r7, #0]
 8022c72:	4a0f      	ldr	r2, [pc, #60]	; (8022cb0 <nk_itoa+0xbc>)
 8022c74:	fb82 1203 	smull	r1, r2, r2, r3
 8022c78:	1092      	asrs	r2, r2, #2
 8022c7a:	17db      	asrs	r3, r3, #31
 8022c7c:	1ad3      	subs	r3, r2, r3
 8022c7e:	603b      	str	r3, [r7, #0]
    while (n > 0) {
 8022c80:	683b      	ldr	r3, [r7, #0]
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	dcde      	bgt.n	8022c44 <nk_itoa+0x50>
    }
    s[i] = 0;
 8022c86:	68fb      	ldr	r3, [r7, #12]
 8022c88:	687a      	ldr	r2, [r7, #4]
 8022c8a:	4413      	add	r3, r2
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	701a      	strb	r2, [r3, #0]
    if (s[0] == '-')
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	781b      	ldrb	r3, [r3, #0]
 8022c94:	2b2d      	cmp	r3, #45	; 0x2d
 8022c96:	d102      	bne.n	8022c9e <nk_itoa+0xaa>
        ++s;
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	3301      	adds	r3, #1
 8022c9c:	607b      	str	r3, [r7, #4]

    nk_strrev_ascii(s);
 8022c9e:	6878      	ldr	r0, [r7, #4]
 8022ca0:	f7ff ff71 	bl	8022b86 <nk_strrev_ascii>
    return s;
 8022ca4:	687b      	ldr	r3, [r7, #4]
}
 8022ca6:	4618      	mov	r0, r3
 8022ca8:	3710      	adds	r7, #16
 8022caa:	46bd      	mov	sp, r7
 8022cac:	bd80      	pop	{r7, pc}
 8022cae:	bf00      	nop
 8022cb0:	66666667 	.word	0x66666667
 8022cb4:	00000000 	.word	0x00000000

08022cb8 <nk_dtoa>:

NK_LIB char*
nk_dtoa(char *s, double n)
{
 8022cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cba:	b091      	sub	sp, #68	; 0x44
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	60f8      	str	r0, [r7, #12]
 8022cc0:	ed87 0b00 	vstr	d0, [r7]
    int useExp = 0;
 8022cc4:	2300      	movs	r3, #0
 8022cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    int digit = 0, m = 0, m1 = 0;
 8022cc8:	2300      	movs	r3, #0
 8022cca:	627b      	str	r3, [r7, #36]	; 0x24
 8022ccc:	2300      	movs	r3, #0
 8022cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022cd0:	2300      	movs	r3, #0
 8022cd2:	63bb      	str	r3, [r7, #56]	; 0x38
    char *c = s;
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	637b      	str	r3, [r7, #52]	; 0x34
    int neg = 0;
 8022cd8:	2300      	movs	r3, #0
 8022cda:	623b      	str	r3, [r7, #32]

    NK_ASSERT(s);
 8022cdc:	68fb      	ldr	r3, [r7, #12]
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d106      	bne.n	8022cf0 <nk_dtoa+0x38>
 8022ce2:	4b95      	ldr	r3, [pc, #596]	; (8022f38 <nk_dtoa+0x280>)
 8022ce4:	4a95      	ldr	r2, [pc, #596]	; (8022f3c <nk_dtoa+0x284>)
 8022ce6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8022cea:	4895      	ldr	r0, [pc, #596]	; (8022f40 <nk_dtoa+0x288>)
 8022cec:	f001 ff00 	bl	8024af0 <__assert_func>
    if (!s) return 0;
 8022cf0:	68fb      	ldr	r3, [r7, #12]
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d101      	bne.n	8022cfa <nk_dtoa+0x42>
 8022cf6:	2300      	movs	r3, #0
 8022cf8:	e162      	b.n	8022fc0 <nk_dtoa+0x308>

    if (n == 0.0) {
 8022cfa:	f04f 0200 	mov.w	r2, #0
 8022cfe:	f04f 0300 	mov.w	r3, #0
 8022d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022d06:	f7dd ff07 	bl	8000b18 <__aeabi_dcmpeq>
 8022d0a:	4603      	mov	r3, r0
 8022d0c:	2b00      	cmp	r3, #0
 8022d0e:	d008      	beq.n	8022d22 <nk_dtoa+0x6a>
        s[0] = '0'; s[1] = '\0';
 8022d10:	68fb      	ldr	r3, [r7, #12]
 8022d12:	2230      	movs	r2, #48	; 0x30
 8022d14:	701a      	strb	r2, [r3, #0]
 8022d16:	68fb      	ldr	r3, [r7, #12]
 8022d18:	3301      	adds	r3, #1
 8022d1a:	2200      	movs	r2, #0
 8022d1c:	701a      	strb	r2, [r3, #0]
        return s;
 8022d1e:	68fb      	ldr	r3, [r7, #12]
 8022d20:	e14e      	b.n	8022fc0 <nk_dtoa+0x308>
    }

    neg = (n < 0);
 8022d22:	2301      	movs	r3, #1
 8022d24:	461e      	mov	r6, r3
 8022d26:	f04f 0200 	mov.w	r2, #0
 8022d2a:	f04f 0300 	mov.w	r3, #0
 8022d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022d32:	f7dd fefb 	bl	8000b2c <__aeabi_dcmplt>
 8022d36:	4603      	mov	r3, r0
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d101      	bne.n	8022d40 <nk_dtoa+0x88>
 8022d3c:	2300      	movs	r3, #0
 8022d3e:	461e      	mov	r6, r3
 8022d40:	b2f3      	uxtb	r3, r6
 8022d42:	623b      	str	r3, [r7, #32]
    if (neg) n = -n;
 8022d44:	6a3b      	ldr	r3, [r7, #32]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d005      	beq.n	8022d56 <nk_dtoa+0x9e>
 8022d4a:	683c      	ldr	r4, [r7, #0]
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8022d52:	e9c7 4500 	strd	r4, r5, [r7]

    /* calculate magnitude */
    m = nk_log10(n);
 8022d56:	ed97 0b00 	vldr	d0, [r7]
 8022d5a:	f7f3 fd2b 	bl	80167b4 <nk_log10>
 8022d5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    useExp = (m >= 14 || (neg && m >= 9) || m <= -9);
 8022d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d62:	2b0d      	cmp	r3, #13
 8022d64:	dc09      	bgt.n	8022d7a <nk_dtoa+0xc2>
 8022d66:	6a3b      	ldr	r3, [r7, #32]
 8022d68:	2b00      	cmp	r3, #0
 8022d6a:	d002      	beq.n	8022d72 <nk_dtoa+0xba>
 8022d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d6e:	2b08      	cmp	r3, #8
 8022d70:	dc03      	bgt.n	8022d7a <nk_dtoa+0xc2>
 8022d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d74:	f113 0f08 	cmn.w	r3, #8
 8022d78:	da01      	bge.n	8022d7e <nk_dtoa+0xc6>
 8022d7a:	2301      	movs	r3, #1
 8022d7c:	e000      	b.n	8022d80 <nk_dtoa+0xc8>
 8022d7e:	2300      	movs	r3, #0
 8022d80:	62bb      	str	r3, [r7, #40]	; 0x28
    if (neg) *(c++) = '-';
 8022d82:	6a3b      	ldr	r3, [r7, #32]
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	d004      	beq.n	8022d92 <nk_dtoa+0xda>
 8022d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022d8a:	1c5a      	adds	r2, r3, #1
 8022d8c:	637a      	str	r2, [r7, #52]	; 0x34
 8022d8e:	222d      	movs	r2, #45	; 0x2d
 8022d90:	701a      	strb	r2, [r3, #0]

    /* set up for scientific notation */
    if (useExp) {
 8022d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d018      	beq.n	8022dca <nk_dtoa+0x112>
        if (m < 0)
 8022d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	da02      	bge.n	8022da4 <nk_dtoa+0xec>
           m -= 1;
 8022d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022da0:	3b01      	subs	r3, #1
 8022da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        n = n / (double)nk_pow(10.0, m);
 8022da4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8022da6:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8022f28 <nk_dtoa+0x270>
 8022daa:	f7f3 fc83 	bl	80166b4 <nk_pow>
 8022dae:	ec53 2b10 	vmov	r2, r3, d0
 8022db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022db6:	f7dd fd71 	bl	800089c <__aeabi_ddiv>
 8022dba:	4602      	mov	r2, r0
 8022dbc:	460b      	mov	r3, r1
 8022dbe:	e9c7 2300 	strd	r2, r3, [r7]
        m1 = m;
 8022dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022dc4:	63bb      	str	r3, [r7, #56]	; 0x38
        m = 0;
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (m < 1.0) {
 8022dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022dcc:	2b00      	cmp	r3, #0
 8022dce:	dc52      	bgt.n	8022e76 <nk_dtoa+0x1be>
        m = 0;
 8022dd0:	2300      	movs	r3, #0
 8022dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* convert the number */
    while (n > NK_FLOAT_PRECISION || m >= 0) {
 8022dd4:	e04f      	b.n	8022e76 <nk_dtoa+0x1be>
        double weight = nk_pow(10.0, m);
 8022dd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8022dd8:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8022f28 <nk_dtoa+0x270>
 8022ddc:	f7f3 fc6a 	bl	80166b4 <nk_pow>
 8022de0:	ed87 0b06 	vstr	d0, [r7, #24]
        if (weight > 0) {
 8022de4:	f04f 0200 	mov.w	r2, #0
 8022de8:	f04f 0300 	mov.w	r3, #0
 8022dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022df0:	f7dd feba 	bl	8000b68 <__aeabi_dcmpgt>
 8022df4:	4603      	mov	r3, r0
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d027      	beq.n	8022e4a <nk_dtoa+0x192>
            double t = (double)n / weight;
 8022dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e02:	f7dd fd4b 	bl	800089c <__aeabi_ddiv>
 8022e06:	4602      	mov	r2, r0
 8022e08:	460b      	mov	r3, r1
 8022e0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            digit = nk_ifloord(t);
 8022e0e:	ed97 0b04 	vldr	d0, [r7, #16]
 8022e12:	f7f3 fca3 	bl	801675c <nk_ifloord>
 8022e16:	6278      	str	r0, [r7, #36]	; 0x24
            n -= ((double)digit * weight);
 8022e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022e1a:	f7dd fbab 	bl	8000574 <__aeabi_i2d>
 8022e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022e22:	f7dd fc11 	bl	8000648 <__aeabi_dmul>
 8022e26:	4602      	mov	r2, r0
 8022e28:	460b      	mov	r3, r1
 8022e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e2e:	f7dd fa53 	bl	80002d8 <__aeabi_dsub>
 8022e32:	4602      	mov	r2, r0
 8022e34:	460b      	mov	r3, r1
 8022e36:	e9c7 2300 	strd	r2, r3, [r7]
            *(c++) = (char)('0' + (char)digit);
 8022e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e3c:	b2da      	uxtb	r2, r3
 8022e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e40:	1c59      	adds	r1, r3, #1
 8022e42:	6379      	str	r1, [r7, #52]	; 0x34
 8022e44:	3230      	adds	r2, #48	; 0x30
 8022e46:	b2d2      	uxtb	r2, r2
 8022e48:	701a      	strb	r2, [r3, #0]
        }
        if (m == 0 && n > 0)
 8022e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	d10f      	bne.n	8022e70 <nk_dtoa+0x1b8>
 8022e50:	f04f 0200 	mov.w	r2, #0
 8022e54:	f04f 0300 	mov.w	r3, #0
 8022e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e5c:	f7dd fe84 	bl	8000b68 <__aeabi_dcmpgt>
 8022e60:	4603      	mov	r3, r0
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d004      	beq.n	8022e70 <nk_dtoa+0x1b8>
            *(c++) = '.';
 8022e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e68:	1c5a      	adds	r2, r3, #1
 8022e6a:	637a      	str	r2, [r7, #52]	; 0x34
 8022e6c:	222e      	movs	r2, #46	; 0x2e
 8022e6e:	701a      	strb	r2, [r3, #0]
        m--;
 8022e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022e72:	3b01      	subs	r3, #1
 8022e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (n > NK_FLOAT_PRECISION || m >= 0) {
 8022e76:	a32e      	add	r3, pc, #184	; (adr r3, 8022f30 <nk_dtoa+0x278>)
 8022e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022e80:	f7dd fe72 	bl	8000b68 <__aeabi_dcmpgt>
 8022e84:	4603      	mov	r3, r0
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d1a5      	bne.n	8022dd6 <nk_dtoa+0x11e>
 8022e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	daa2      	bge.n	8022dd6 <nk_dtoa+0x11e>
    }

    if (useExp) {
 8022e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	f000 8090 	beq.w	8022fb8 <nk_dtoa+0x300>
        /* convert the exponent */
        int i, j;
        *(c++) = 'e';
 8022e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e9a:	1c5a      	adds	r2, r3, #1
 8022e9c:	637a      	str	r2, [r7, #52]	; 0x34
 8022e9e:	2265      	movs	r2, #101	; 0x65
 8022ea0:	701a      	strb	r2, [r3, #0]
        if (m1 > 0) {
 8022ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	dd05      	ble.n	8022eb4 <nk_dtoa+0x1fc>
            *(c++) = '+';
 8022ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022eaa:	1c5a      	adds	r2, r3, #1
 8022eac:	637a      	str	r2, [r7, #52]	; 0x34
 8022eae:	222b      	movs	r2, #43	; 0x2b
 8022eb0:	701a      	strb	r2, [r3, #0]
 8022eb2:	e007      	b.n	8022ec4 <nk_dtoa+0x20c>
        } else {
            *(c++) = '-';
 8022eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022eb6:	1c5a      	adds	r2, r3, #1
 8022eb8:	637a      	str	r2, [r7, #52]	; 0x34
 8022eba:	222d      	movs	r2, #45	; 0x2d
 8022ebc:	701a      	strb	r2, [r3, #0]
            m1 = -m1;
 8022ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022ec0:	425b      	negs	r3, r3
 8022ec2:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        m = 0;
 8022ec4:	2300      	movs	r3, #0
 8022ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (m1 > 0) {
 8022ec8:	e01d      	b.n	8022f06 <nk_dtoa+0x24e>
            *(c++) = (char)('0' + (char)(m1 % 10));
 8022eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8022ecc:	4b1d      	ldr	r3, [pc, #116]	; (8022f44 <nk_dtoa+0x28c>)
 8022ece:	fb83 1302 	smull	r1, r3, r3, r2
 8022ed2:	1099      	asrs	r1, r3, #2
 8022ed4:	17d3      	asrs	r3, r2, #31
 8022ed6:	1ac9      	subs	r1, r1, r3
 8022ed8:	460b      	mov	r3, r1
 8022eda:	009b      	lsls	r3, r3, #2
 8022edc:	440b      	add	r3, r1
 8022ede:	005b      	lsls	r3, r3, #1
 8022ee0:	1ad1      	subs	r1, r2, r3
 8022ee2:	b2ca      	uxtb	r2, r1
 8022ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022ee6:	1c59      	adds	r1, r3, #1
 8022ee8:	6379      	str	r1, [r7, #52]	; 0x34
 8022eea:	3230      	adds	r2, #48	; 0x30
 8022eec:	b2d2      	uxtb	r2, r2
 8022eee:	701a      	strb	r2, [r3, #0]
            m1 /= 10;
 8022ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022ef2:	4a14      	ldr	r2, [pc, #80]	; (8022f44 <nk_dtoa+0x28c>)
 8022ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8022ef8:	1092      	asrs	r2, r2, #2
 8022efa:	17db      	asrs	r3, r3, #31
 8022efc:	1ad3      	subs	r3, r2, r3
 8022efe:	63bb      	str	r3, [r7, #56]	; 0x38
            m++;
 8022f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022f02:	3301      	adds	r3, #1
 8022f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (m1 > 0) {
 8022f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	dcde      	bgt.n	8022eca <nk_dtoa+0x212>
        }
        c -= m;
 8022f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022f0e:	425b      	negs	r3, r3
 8022f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f12:	4413      	add	r3, r2
 8022f14:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = 0, j = m-1; i<j; i++, j--) {
 8022f16:	2300      	movs	r3, #0
 8022f18:	633b      	str	r3, [r7, #48]	; 0x30
 8022f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022f1c:	3b01      	subs	r3, #1
 8022f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022f20:	e042      	b.n	8022fa8 <nk_dtoa+0x2f0>
 8022f22:	bf00      	nop
 8022f24:	f3af 8000 	nop.w
 8022f28:	00000000 	.word	0x00000000
 8022f2c:	40240000 	.word	0x40240000
 8022f30:	86a12b9b 	.word	0x86a12b9b
 8022f34:	3d06849b 	.word	0x3d06849b
 8022f38:	0802943c 	.word	0x0802943c
 8022f3c:	0802aca0 	.word	0x0802aca0
 8022f40:	0802940c 	.word	0x0802940c
 8022f44:	66666667 	.word	0x66666667
            /* swap without temporary */
            c[i] ^= c[j];
 8022f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f4c:	4413      	add	r3, r2
 8022f4e:	7819      	ldrb	r1, [r3, #0]
 8022f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f54:	4413      	add	r3, r2
 8022f56:	781a      	ldrb	r2, [r3, #0]
 8022f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022f5c:	4403      	add	r3, r0
 8022f5e:	404a      	eors	r2, r1
 8022f60:	b2d2      	uxtb	r2, r2
 8022f62:	701a      	strb	r2, [r3, #0]
            c[j] ^= c[i];
 8022f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f68:	4413      	add	r3, r2
 8022f6a:	7819      	ldrb	r1, [r3, #0]
 8022f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f70:	4413      	add	r3, r2
 8022f72:	781a      	ldrb	r2, [r3, #0]
 8022f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022f78:	4403      	add	r3, r0
 8022f7a:	404a      	eors	r2, r1
 8022f7c:	b2d2      	uxtb	r2, r2
 8022f7e:	701a      	strb	r2, [r3, #0]
            c[i] ^= c[j];
 8022f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f84:	4413      	add	r3, r2
 8022f86:	7819      	ldrb	r1, [r3, #0]
 8022f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022f8c:	4413      	add	r3, r2
 8022f8e:	781a      	ldrb	r2, [r3, #0]
 8022f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022f94:	4403      	add	r3, r0
 8022f96:	404a      	eors	r2, r1
 8022f98:	b2d2      	uxtb	r2, r2
 8022f9a:	701a      	strb	r2, [r3, #0]
        for (i = 0, j = m-1; i<j; i++, j--) {
 8022f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022f9e:	3301      	adds	r3, #1
 8022fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8022fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022fa4:	3b01      	subs	r3, #1
 8022fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022fac:	429a      	cmp	r2, r3
 8022fae:	dbcb      	blt.n	8022f48 <nk_dtoa+0x290>
        }
        c += m;
 8022fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022fb4:	4413      	add	r3, r2
 8022fb6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    *(c) = '\0';
 8022fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022fba:	2200      	movs	r2, #0
 8022fbc:	701a      	strb	r2, [r3, #0]
    return s;
 8022fbe:	68fb      	ldr	r3, [r7, #12]
}
 8022fc0:	4618      	mov	r0, r3
 8022fc2:	3744      	adds	r7, #68	; 0x44
 8022fc4:	46bd      	mov	sp, r7
 8022fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022fc8 <nk_murmur_hash>:
    return result;
}
#endif
NK_API nk_hash
nk_murmur_hash(const void * key, int len, nk_hash seed)
{
 8022fc8:	b480      	push	{r7}
 8022fca:	b091      	sub	sp, #68	; 0x44
 8022fcc:	af00      	add	r7, sp, #0
 8022fce:	60f8      	str	r0, [r7, #12]
 8022fd0:	60b9      	str	r1, [r7, #8]
 8022fd2:	607a      	str	r2, [r7, #4]
    /* 32-Bit MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3*/
    #define NK_ROTL(x,r) ((x) << (r) | ((x) >> (32 - r)))

    nk_uint h1 = seed;
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_uint k1;
    const nk_byte *data = (const nk_byte*)key;
 8022fd8:	68fb      	ldr	r3, [r7, #12]
 8022fda:	633b      	str	r3, [r7, #48]	; 0x30
    const nk_byte *keyptr = data;
 8022fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fde:	63bb      	str	r3, [r7, #56]	; 0x38
    nk_byte *k1ptr;
    const int bsize = sizeof(k1);
 8022fe0:	2304      	movs	r3, #4
 8022fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int nblocks = len/4;
 8022fe4:	68bb      	ldr	r3, [r7, #8]
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	da00      	bge.n	8022fec <nk_murmur_hash+0x24>
 8022fea:	3303      	adds	r3, #3
 8022fec:	109b      	asrs	r3, r3, #2
 8022fee:	62bb      	str	r3, [r7, #40]	; 0x28

    const nk_uint c1 = 0xcc9e2d51;
 8022ff0:	4b57      	ldr	r3, [pc, #348]	; (8023150 <nk_murmur_hash+0x188>)
 8022ff2:	627b      	str	r3, [r7, #36]	; 0x24
    const nk_uint c2 = 0x1b873593;
 8022ff4:	4b57      	ldr	r3, [pc, #348]	; (8023154 <nk_murmur_hash+0x18c>)
 8022ff6:	623b      	str	r3, [r7, #32]
    const nk_byte *tail;
    int i;

    /* body */
    if (!key) return 0;
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	2b00      	cmp	r3, #0
 8022ffc:	d101      	bne.n	8023002 <nk_murmur_hash+0x3a>
 8022ffe:	2300      	movs	r3, #0
 8023000:	e09f      	b.n	8023142 <nk_murmur_hash+0x17a>
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 8023002:	2300      	movs	r3, #0
 8023004:	637b      	str	r3, [r7, #52]	; 0x34
 8023006:	e03c      	b.n	8023082 <nk_murmur_hash+0xba>
        k1ptr = (nk_byte*)&k1;
 8023008:	f107 0314 	add.w	r3, r7, #20
 802300c:	61bb      	str	r3, [r7, #24]
        k1ptr[0] = keyptr[0];
 802300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023010:	781a      	ldrb	r2, [r3, #0]
 8023012:	69bb      	ldr	r3, [r7, #24]
 8023014:	701a      	strb	r2, [r3, #0]
        k1ptr[1] = keyptr[1];
 8023016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023018:	1c5a      	adds	r2, r3, #1
 802301a:	69bb      	ldr	r3, [r7, #24]
 802301c:	3301      	adds	r3, #1
 802301e:	7812      	ldrb	r2, [r2, #0]
 8023020:	701a      	strb	r2, [r3, #0]
        k1ptr[2] = keyptr[2];
 8023022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023024:	1c9a      	adds	r2, r3, #2
 8023026:	69bb      	ldr	r3, [r7, #24]
 8023028:	3302      	adds	r3, #2
 802302a:	7812      	ldrb	r2, [r2, #0]
 802302c:	701a      	strb	r2, [r3, #0]
        k1ptr[3] = keyptr[3];
 802302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023030:	1cda      	adds	r2, r3, #3
 8023032:	69bb      	ldr	r3, [r7, #24]
 8023034:	3303      	adds	r3, #3
 8023036:	7812      	ldrb	r2, [r2, #0]
 8023038:	701a      	strb	r2, [r3, #0]

        k1 *= c1;
 802303a:	697b      	ldr	r3, [r7, #20]
 802303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802303e:	fb02 f303 	mul.w	r3, r2, r3
 8023042:	617b      	str	r3, [r7, #20]
        k1 = NK_ROTL(k1,15);
 8023044:	697b      	ldr	r3, [r7, #20]
 8023046:	ea4f 4373 	mov.w	r3, r3, ror #17
 802304a:	617b      	str	r3, [r7, #20]
        k1 *= c2;
 802304c:	697b      	ldr	r3, [r7, #20]
 802304e:	6a3a      	ldr	r2, [r7, #32]
 8023050:	fb02 f303 	mul.w	r3, r2, r3
 8023054:	617b      	str	r3, [r7, #20]

        h1 ^= k1;
 8023056:	697b      	ldr	r3, [r7, #20]
 8023058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802305a:	4053      	eors	r3, r2
 802305c:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = NK_ROTL(h1,13);
 802305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023060:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8023064:	63fb      	str	r3, [r7, #60]	; 0x3c
        h1 = h1*5+0xe6546b64;
 8023066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023068:	4613      	mov	r3, r2
 802306a:	009b      	lsls	r3, r3, #2
 802306c:	441a      	add	r2, r3
 802306e:	4b3a      	ldr	r3, [pc, #232]	; (8023158 <nk_murmur_hash+0x190>)
 8023070:	4413      	add	r3, r2
 8023072:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (i = 0; i < nblocks; ++i, keyptr += bsize) {
 8023074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023076:	3301      	adds	r3, #1
 8023078:	637b      	str	r3, [r7, #52]	; 0x34
 802307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802307c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802307e:	4413      	add	r3, r2
 8023080:	63bb      	str	r3, [r7, #56]	; 0x38
 8023082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023086:	429a      	cmp	r2, r3
 8023088:	dbbe      	blt.n	8023008 <nk_murmur_hash+0x40>
    }

    /* tail */
    tail = (const nk_byte*)(data + nblocks*4);
 802308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802308c:	009b      	lsls	r3, r3, #2
 802308e:	461a      	mov	r2, r3
 8023090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023092:	4413      	add	r3, r2
 8023094:	61fb      	str	r3, [r7, #28]
    k1 = 0;
 8023096:	2300      	movs	r3, #0
 8023098:	617b      	str	r3, [r7, #20]
    switch (len & 3) {
 802309a:	68bb      	ldr	r3, [r7, #8]
 802309c:	f003 0303 	and.w	r3, r3, #3
 80230a0:	2b03      	cmp	r3, #3
 80230a2:	d006      	beq.n	80230b2 <nk_murmur_hash+0xea>
 80230a4:	2b03      	cmp	r3, #3
 80230a6:	dc2d      	bgt.n	8023104 <nk_murmur_hash+0x13c>
 80230a8:	2b01      	cmp	r3, #1
 80230aa:	d012      	beq.n	80230d2 <nk_murmur_hash+0x10a>
 80230ac:	2b02      	cmp	r3, #2
 80230ae:	d008      	beq.n	80230c2 <nk_murmur_hash+0xfa>
            k1 *= c1;
            k1 = NK_ROTL(k1,15);
            k1 *= c2;
            h1 ^= k1;
            break;
        default: break;
 80230b0:	e028      	b.n	8023104 <nk_murmur_hash+0x13c>
        case 3: k1 ^= (nk_uint)(tail[2] << 16); /* fallthrough */
 80230b2:	69fb      	ldr	r3, [r7, #28]
 80230b4:	3302      	adds	r3, #2
 80230b6:	781b      	ldrb	r3, [r3, #0]
 80230b8:	041b      	lsls	r3, r3, #16
 80230ba:	461a      	mov	r2, r3
 80230bc:	697b      	ldr	r3, [r7, #20]
 80230be:	4053      	eors	r3, r2
 80230c0:	617b      	str	r3, [r7, #20]
        case 2: k1 ^= (nk_uint)(tail[1] << 8u); /* fallthrough */
 80230c2:	69fb      	ldr	r3, [r7, #28]
 80230c4:	3301      	adds	r3, #1
 80230c6:	781b      	ldrb	r3, [r3, #0]
 80230c8:	021b      	lsls	r3, r3, #8
 80230ca:	461a      	mov	r2, r3
 80230cc:	697b      	ldr	r3, [r7, #20]
 80230ce:	4053      	eors	r3, r2
 80230d0:	617b      	str	r3, [r7, #20]
        case 1: k1 ^= tail[0];
 80230d2:	69fb      	ldr	r3, [r7, #28]
 80230d4:	781b      	ldrb	r3, [r3, #0]
 80230d6:	461a      	mov	r2, r3
 80230d8:	697b      	ldr	r3, [r7, #20]
 80230da:	4053      	eors	r3, r2
 80230dc:	617b      	str	r3, [r7, #20]
            k1 *= c1;
 80230de:	697b      	ldr	r3, [r7, #20]
 80230e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80230e2:	fb02 f303 	mul.w	r3, r2, r3
 80230e6:	617b      	str	r3, [r7, #20]
            k1 = NK_ROTL(k1,15);
 80230e8:	697b      	ldr	r3, [r7, #20]
 80230ea:	ea4f 4373 	mov.w	r3, r3, ror #17
 80230ee:	617b      	str	r3, [r7, #20]
            k1 *= c2;
 80230f0:	697b      	ldr	r3, [r7, #20]
 80230f2:	6a3a      	ldr	r2, [r7, #32]
 80230f4:	fb02 f303 	mul.w	r3, r2, r3
 80230f8:	617b      	str	r3, [r7, #20]
            h1 ^= k1;
 80230fa:	697b      	ldr	r3, [r7, #20]
 80230fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80230fe:	4053      	eors	r3, r2
 8023100:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 8023102:	e000      	b.n	8023106 <nk_murmur_hash+0x13e>
        default: break;
 8023104:	bf00      	nop
    }

    /* finalization */
    h1 ^= (nk_uint)len;
 8023106:	68bb      	ldr	r3, [r7, #8]
 8023108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802310a:	4053      	eors	r3, r2
 802310c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* fmix32 */
    h1 ^= h1 >> 16;
 802310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023110:	0c1b      	lsrs	r3, r3, #16
 8023112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023114:	4053      	eors	r3, r2
 8023116:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0x85ebca6b;
 8023118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802311a:	4a10      	ldr	r2, [pc, #64]	; (802315c <nk_murmur_hash+0x194>)
 802311c:	fb02 f303 	mul.w	r3, r2, r3
 8023120:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 13;
 8023122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023124:	0b5b      	lsrs	r3, r3, #13
 8023126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023128:	4053      	eors	r3, r2
 802312a:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 *= 0xc2b2ae35;
 802312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802312e:	4a0c      	ldr	r2, [pc, #48]	; (8023160 <nk_murmur_hash+0x198>)
 8023130:	fb02 f303 	mul.w	r3, r2, r3
 8023134:	63fb      	str	r3, [r7, #60]	; 0x3c
    h1 ^= h1 >> 16;
 8023136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023138:	0c1b      	lsrs	r3, r3, #16
 802313a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802313c:	4053      	eors	r3, r2
 802313e:	63fb      	str	r3, [r7, #60]	; 0x3c

    #undef NK_ROTL
    return h1;
 8023140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8023142:	4618      	mov	r0, r3
 8023144:	3744      	adds	r7, #68	; 0x44
 8023146:	46bd      	mov	sp, r7
 8023148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802314c:	4770      	bx	lr
 802314e:	bf00      	nop
 8023150:	cc9e2d51 	.word	0xcc9e2d51
 8023154:	1b873593 	.word	0x1b873593
 8023158:	e6546b64 	.word	0xe6546b64
 802315c:	85ebca6b 	.word	0x85ebca6b
 8023160:	c2b2ae35 	.word	0xc2b2ae35

08023164 <nk_text_clamp>:
#endif
NK_LIB int
nk_text_clamp(const struct nk_user_font *font, const char *text,
    int text_len, float space, int *glyphs, float *text_width,
    nk_rune *sep_list, int sep_count)
{
 8023164:	b580      	push	{r7, lr}
 8023166:	b092      	sub	sp, #72	; 0x48
 8023168:	af00      	add	r7, sp, #0
 802316a:	6178      	str	r0, [r7, #20]
 802316c:	6139      	str	r1, [r7, #16]
 802316e:	60fa      	str	r2, [r7, #12]
 8023170:	ed87 0a02 	vstr	s0, [r7, #8]
 8023174:	607b      	str	r3, [r7, #4]
    int i = 0;
 8023176:	2300      	movs	r3, #0
 8023178:	647b      	str	r3, [r7, #68]	; 0x44
    int glyph_len = 0;
 802317a:	2300      	movs	r3, #0
 802317c:	643b      	str	r3, [r7, #64]	; 0x40
    float last_width = 0;
 802317e:	f04f 0300 	mov.w	r3, #0
 8023182:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 8023184:	2300      	movs	r3, #0
 8023186:	61fb      	str	r3, [r7, #28]
    float width = 0;
 8023188:	f04f 0300 	mov.w	r3, #0
 802318c:	63bb      	str	r3, [r7, #56]	; 0x38
    int len = 0;
 802318e:	2300      	movs	r3, #0
 8023190:	637b      	str	r3, [r7, #52]	; 0x34
    int g = 0;
 8023192:	2300      	movs	r3, #0
 8023194:	633b      	str	r3, [r7, #48]	; 0x30
    float s;

    int sep_len = 0;
 8023196:	2300      	movs	r3, #0
 8023198:	62fb      	str	r3, [r7, #44]	; 0x2c
    int sep_g = 0;
 802319a:	2300      	movs	r3, #0
 802319c:	62bb      	str	r3, [r7, #40]	; 0x28
    float sep_width = 0;
 802319e:	f04f 0300 	mov.w	r3, #0
 80231a2:	627b      	str	r3, [r7, #36]	; 0x24
    sep_count = NK_MAX(sep_count,0);
 80231a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80231a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80231aa:	65bb      	str	r3, [r7, #88]	; 0x58

    glyph_len = nk_utf_decode(text, &unicode, text_len);
 80231ac:	f107 031c 	add.w	r3, r7, #28
 80231b0:	68fa      	ldr	r2, [r7, #12]
 80231b2:	4619      	mov	r1, r3
 80231b4:	6938      	ldr	r0, [r7, #16]
 80231b6:	f7fe fff7 	bl	80221a8 <nk_utf_decode>
 80231ba:	6438      	str	r0, [r7, #64]	; 0x40
    while (glyph_len && (width < space) && (len < text_len)) {
 80231bc:	e04a      	b.n	8023254 <nk_text_clamp+0xf0>
        len += glyph_len;
 80231be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80231c2:	4413      	add	r3, r2
 80231c4:	637b      	str	r3, [r7, #52]	; 0x34
        s = font->width(font->userdata, font->height, text, len);
 80231c6:	697b      	ldr	r3, [r7, #20]
 80231c8:	689b      	ldr	r3, [r3, #8]
 80231ca:	697a      	ldr	r2, [r7, #20]
 80231cc:	edd2 7a01 	vldr	s15, [r2, #4]
 80231d0:	6978      	ldr	r0, [r7, #20]
 80231d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80231d4:	6939      	ldr	r1, [r7, #16]
 80231d6:	eeb0 0a67 	vmov.f32	s0, s15
 80231da:	6800      	ldr	r0, [r0, #0]
 80231dc:	4798      	blx	r3
 80231de:	ed87 0a08 	vstr	s0, [r7, #32]
        for (i = 0; i < sep_count; ++i) {
 80231e2:	2300      	movs	r3, #0
 80231e4:	647b      	str	r3, [r7, #68]	; 0x44
 80231e6:	e015      	b.n	8023214 <nk_text_clamp+0xb0>
            if (unicode != sep_list[i]) continue;
 80231e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80231ea:	009b      	lsls	r3, r3, #2
 80231ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80231ee:	4413      	add	r3, r2
 80231f0:	681a      	ldr	r2, [r3, #0]
 80231f2:	69fb      	ldr	r3, [r7, #28]
 80231f4:	429a      	cmp	r2, r3
 80231f6:	d109      	bne.n	802320c <nk_text_clamp+0xa8>
            sep_width = last_width = width;
 80231f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80231fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80231fe:	627b      	str	r3, [r7, #36]	; 0x24
            sep_g = g+1;
 8023200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023202:	3301      	adds	r3, #1
 8023204:	62bb      	str	r3, [r7, #40]	; 0x28
            sep_len = len;
 8023206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023208:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 802320a:	e007      	b.n	802321c <nk_text_clamp+0xb8>
            if (unicode != sep_list[i]) continue;
 802320c:	bf00      	nop
        for (i = 0; i < sep_count; ++i) {
 802320e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023210:	3301      	adds	r3, #1
 8023212:	647b      	str	r3, [r7, #68]	; 0x44
 8023214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023218:	429a      	cmp	r2, r3
 802321a:	dbe5      	blt.n	80231e8 <nk_text_clamp+0x84>
        }
        if (i == sep_count){
 802321c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802321e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8023220:	429a      	cmp	r2, r3
 8023222:	d106      	bne.n	8023232 <nk_text_clamp+0xce>
            last_width = sep_width = width;
 8023224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023226:	627b      	str	r3, [r7, #36]	; 0x24
 8023228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802322a:	63fb      	str	r3, [r7, #60]	; 0x3c
            sep_g = g+1;
 802322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802322e:	3301      	adds	r3, #1
 8023230:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        width = s;
 8023232:	6a3b      	ldr	r3, [r7, #32]
 8023234:	63bb      	str	r3, [r7, #56]	; 0x38
        glyph_len = nk_utf_decode(&text[len], &unicode, text_len - len);
 8023236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023238:	693a      	ldr	r2, [r7, #16]
 802323a:	18d0      	adds	r0, r2, r3
 802323c:	68fa      	ldr	r2, [r7, #12]
 802323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023240:	1ad2      	subs	r2, r2, r3
 8023242:	f107 031c 	add.w	r3, r7, #28
 8023246:	4619      	mov	r1, r3
 8023248:	f7fe ffae 	bl	80221a8 <nk_utf_decode>
 802324c:	6438      	str	r0, [r7, #64]	; 0x40
        g++;
 802324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023250:	3301      	adds	r3, #1
 8023252:	633b      	str	r3, [r7, #48]	; 0x30
    while (glyph_len && (width < space) && (len < text_len)) {
 8023254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023256:	2b00      	cmp	r3, #0
 8023258:	d00c      	beq.n	8023274 <nk_text_clamp+0x110>
 802325a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 802325e:	edd7 7a02 	vldr	s15, [r7, #8]
 8023262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802326a:	d503      	bpl.n	8023274 <nk_text_clamp+0x110>
 802326c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802326e:	68fb      	ldr	r3, [r7, #12]
 8023270:	429a      	cmp	r2, r3
 8023272:	dba4      	blt.n	80231be <nk_text_clamp+0x5a>
    }
    if (len >= text_len) {
 8023274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023276:	68fb      	ldr	r3, [r7, #12]
 8023278:	429a      	cmp	r2, r3
 802327a:	db07      	blt.n	802328c <nk_text_clamp+0x128>
        *glyphs = g;
 802327c:	687b      	ldr	r3, [r7, #4]
 802327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023280:	601a      	str	r2, [r3, #0]
        *text_width = last_width;
 8023282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023286:	601a      	str	r2, [r3, #0]
        return len;
 8023288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802328a:	e00b      	b.n	80232a4 <nk_text_clamp+0x140>
    } else {
        *glyphs = sep_g;
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023290:	601a      	str	r2, [r3, #0]
        *text_width = sep_width;
 8023292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023296:	601a      	str	r2, [r3, #0]
        return (!sep_len) ? len: sep_len;
 8023298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802329a:	2b00      	cmp	r3, #0
 802329c:	d101      	bne.n	80232a2 <nk_text_clamp+0x13e>
 802329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80232a0:	e000      	b.n	80232a4 <nk_text_clamp+0x140>
 80232a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
}
 80232a4:	4618      	mov	r0, r3
 80232a6:	3748      	adds	r7, #72	; 0x48
 80232a8:	46bd      	mov	sp, r7
 80232aa:	bd80      	pop	{r7, pc}

080232ac <nk_text_calculate_text_bounds>:
NK_LIB struct nk_vec2
nk_text_calculate_text_bounds(const struct nk_user_font *font,
    const char *begin, int byte_len, float row_height, const char **remaining,
    struct nk_vec2 *out_offset, int *glyphs, int op)
{
 80232ac:	b580      	push	{r7, lr}
 80232ae:	b092      	sub	sp, #72	; 0x48
 80232b0:	af00      	add	r7, sp, #0
 80232b2:	61f8      	str	r0, [r7, #28]
 80232b4:	61b9      	str	r1, [r7, #24]
 80232b6:	617a      	str	r2, [r7, #20]
 80232b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80232bc:	60fb      	str	r3, [r7, #12]
    float line_height = row_height;
 80232be:	693b      	ldr	r3, [r7, #16]
 80232c0:	637b      	str	r3, [r7, #52]	; 0x34
    struct nk_vec2 text_size = nk_vec2(0,0);
 80232c2:	eddf 0a97 	vldr	s1, [pc, #604]	; 8023520 <nk_text_calculate_text_bounds+0x274>
 80232c6:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8023520 <nk_text_calculate_text_bounds+0x274>
 80232ca:	f7f3 fb6d 	bl	80169a8 <nk_vec2>
 80232ce:	eeb0 7a40 	vmov.f32	s14, s0
 80232d2:	eef0 7a60 	vmov.f32	s15, s1
 80232d6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80232da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float line_width = 0.0f;
 80232de:	f04f 0300 	mov.w	r3, #0
 80232e2:	647b      	str	r3, [r7, #68]	; 0x44

    float glyph_width;
    int glyph_len = 0;
 80232e4:	2300      	movs	r3, #0
 80232e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    nk_rune unicode = 0;
 80232e8:	2300      	movs	r3, #0
 80232ea:	623b      	str	r3, [r7, #32]
    int text_len = 0;
 80232ec:	2300      	movs	r3, #0
 80232ee:	63bb      	str	r3, [r7, #56]	; 0x38
    if (!begin || byte_len <= 0 || !font)
 80232f0:	69bb      	ldr	r3, [r7, #24]
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	d005      	beq.n	8023302 <nk_text_calculate_text_bounds+0x56>
 80232f6:	697b      	ldr	r3, [r7, #20]
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	dd02      	ble.n	8023302 <nk_text_calculate_text_bounds+0x56>
 80232fc:	69fb      	ldr	r3, [r7, #28]
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d10e      	bne.n	8023320 <nk_text_calculate_text_bounds+0x74>
        return nk_vec2(0,row_height);
 8023302:	edd7 0a04 	vldr	s1, [r7, #16]
 8023306:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8023520 <nk_text_calculate_text_bounds+0x274>
 802330a:	f7f3 fb4d 	bl	80169a8 <nk_vec2>
 802330e:	eeb0 7a40 	vmov.f32	s14, s0
 8023312:	eef0 7a60 	vmov.f32	s15, s1
 8023316:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 802331a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 802331e:	e0f1      	b.n	8023504 <nk_text_calculate_text_bounds+0x258>

    glyph_len = nk_utf_decode(begin, &unicode, byte_len);
 8023320:	f107 0320 	add.w	r3, r7, #32
 8023324:	697a      	ldr	r2, [r7, #20]
 8023326:	4619      	mov	r1, r3
 8023328:	69b8      	ldr	r0, [r7, #24]
 802332a:	f7fe ff3d 	bl	80221a8 <nk_utf_decode>
 802332e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (!glyph_len) return text_size;
 8023330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023332:	2b00      	cmp	r3, #0
 8023334:	d108      	bne.n	8023348 <nk_text_calculate_text_bounds+0x9c>
 8023336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802333a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802333e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023342:	e883 0003 	stmia.w	r3, {r0, r1}
 8023346:	e0dd      	b.n	8023504 <nk_text_calculate_text_bounds+0x258>
    glyph_width = font->width(font->userdata, font->height, begin, glyph_len);
 8023348:	69fb      	ldr	r3, [r7, #28]
 802334a:	689b      	ldr	r3, [r3, #8]
 802334c:	69fa      	ldr	r2, [r7, #28]
 802334e:	edd2 7a01 	vldr	s15, [r2, #4]
 8023352:	69f8      	ldr	r0, [r7, #28]
 8023354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023356:	69b9      	ldr	r1, [r7, #24]
 8023358:	eeb0 0a67 	vmov.f32	s0, s15
 802335c:	6800      	ldr	r0, [r0, #0]
 802335e:	4798      	blx	r3
 8023360:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

    *glyphs = 0;
 8023364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023366:	2200      	movs	r2, #0
 8023368:	601a      	str	r2, [r3, #0]
    while ((text_len < byte_len) && glyph_len) {
 802336a:	e078      	b.n	802345e <nk_text_calculate_text_bounds+0x1b2>
        if (unicode == '\n') {
 802336c:	6a3b      	ldr	r3, [r7, #32]
 802336e:	2b0a      	cmp	r3, #10
 8023370:	d12f      	bne.n	80233d2 <nk_text_calculate_text_bounds+0x126>
            text_size.x = NK_MAX(text_size.x, line_width);
 8023372:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023376:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 802337a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023382:	dd01      	ble.n	8023388 <nk_text_calculate_text_bounds+0xdc>
 8023384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023386:	e000      	b.n	802338a <nk_text_calculate_text_bounds+0xde>
 8023388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802338a:	627b      	str	r3, [r7, #36]	; 0x24
            text_size.y += line_height;
 802338c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8023390:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8023394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023398:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            line_width = 0;
 802339c:	f04f 0300 	mov.w	r3, #0
 80233a0:	647b      	str	r3, [r7, #68]	; 0x44
            *glyphs+=1;
 80233a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	1c5a      	adds	r2, r3, #1
 80233a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233aa:	601a      	str	r2, [r3, #0]
            if (op == NK_STOP_ON_NEW_LINE)
 80233ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80233ae:	2b01      	cmp	r3, #1
 80233b0:	d05e      	beq.n	8023470 <nk_text_calculate_text_bounds+0x1c4>
                break;

            text_len++;
 80233b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233b4:	3301      	adds	r3, #1
 80233b6:	63bb      	str	r3, [r7, #56]	; 0x38
            glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 80233b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233ba:	69ba      	ldr	r2, [r7, #24]
 80233bc:	18d0      	adds	r0, r2, r3
 80233be:	697a      	ldr	r2, [r7, #20]
 80233c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233c2:	1ad2      	subs	r2, r2, r3
 80233c4:	f107 0320 	add.w	r3, r7, #32
 80233c8:	4619      	mov	r1, r3
 80233ca:	f7fe feed 	bl	80221a8 <nk_utf_decode>
 80233ce:	63f8      	str	r0, [r7, #60]	; 0x3c
            continue;
 80233d0:	e045      	b.n	802345e <nk_text_calculate_text_bounds+0x1b2>
        }

        if (unicode == '\r') {
 80233d2:	6a3b      	ldr	r3, [r7, #32]
 80233d4:	2b0d      	cmp	r3, #13
 80233d6:	d114      	bne.n	8023402 <nk_text_calculate_text_bounds+0x156>
            text_len++;
 80233d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233da:	3301      	adds	r3, #1
 80233dc:	63bb      	str	r3, [r7, #56]	; 0x38
            *glyphs+=1;
 80233de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	1c5a      	adds	r2, r3, #1
 80233e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80233e6:	601a      	str	r2, [r3, #0]
            glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 80233e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233ea:	69ba      	ldr	r2, [r7, #24]
 80233ec:	18d0      	adds	r0, r2, r3
 80233ee:	697a      	ldr	r2, [r7, #20]
 80233f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80233f2:	1ad2      	subs	r2, r2, r3
 80233f4:	f107 0320 	add.w	r3, r7, #32
 80233f8:	4619      	mov	r1, r3
 80233fa:	f7fe fed5 	bl	80221a8 <nk_utf_decode>
 80233fe:	63f8      	str	r0, [r7, #60]	; 0x3c
            continue;
 8023400:	e02d      	b.n	802345e <nk_text_calculate_text_bounds+0x1b2>
        }

        *glyphs = *glyphs + 1;
 8023402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023404:	681b      	ldr	r3, [r3, #0]
 8023406:	1c5a      	adds	r2, r3, #1
 8023408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802340a:	601a      	str	r2, [r3, #0]
        text_len += glyph_len;
 802340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802340e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023410:	4413      	add	r3, r2
 8023412:	63bb      	str	r3, [r7, #56]	; 0x38
        line_width += (float)glyph_width;
 8023414:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8023418:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 802341c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023420:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        glyph_len = nk_utf_decode(begin + text_len, &unicode, byte_len-text_len);
 8023424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023426:	69ba      	ldr	r2, [r7, #24]
 8023428:	18d0      	adds	r0, r2, r3
 802342a:	697a      	ldr	r2, [r7, #20]
 802342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802342e:	1ad2      	subs	r2, r2, r3
 8023430:	f107 0320 	add.w	r3, r7, #32
 8023434:	4619      	mov	r1, r3
 8023436:	f7fe feb7 	bl	80221a8 <nk_utf_decode>
 802343a:	63f8      	str	r0, [r7, #60]	; 0x3c
        glyph_width = font->width(font->userdata, font->height, begin+text_len, glyph_len);
 802343c:	69fb      	ldr	r3, [r7, #28]
 802343e:	689b      	ldr	r3, [r3, #8]
 8023440:	69fa      	ldr	r2, [r7, #28]
 8023442:	edd2 7a01 	vldr	s15, [r2, #4]
 8023446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023448:	69b9      	ldr	r1, [r7, #24]
 802344a:	4411      	add	r1, r2
 802344c:	69f8      	ldr	r0, [r7, #28]
 802344e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023450:	eeb0 0a67 	vmov.f32	s0, s15
 8023454:	6800      	ldr	r0, [r0, #0]
 8023456:	4798      	blx	r3
 8023458:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        continue;
 802345c:	bf00      	nop
    while ((text_len < byte_len) && glyph_len) {
 802345e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023460:	697b      	ldr	r3, [r7, #20]
 8023462:	429a      	cmp	r2, r3
 8023464:	da05      	bge.n	8023472 <nk_text_calculate_text_bounds+0x1c6>
 8023466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023468:	2b00      	cmp	r3, #0
 802346a:	f47f af7f 	bne.w	802336c <nk_text_calculate_text_bounds+0xc0>
 802346e:	e000      	b.n	8023472 <nk_text_calculate_text_bounds+0x1c6>
                break;
 8023470:	bf00      	nop
    }

    if (text_size.x < line_width)
 8023472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023476:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 802347a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023482:	dd01      	ble.n	8023488 <nk_text_calculate_text_bounds+0x1dc>
        text_size.x = line_width;
 8023484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023486:	627b      	str	r3, [r7, #36]	; 0x24
    if (out_offset)
 8023488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802348a:	2b00      	cmp	r3, #0
 802348c:	d014      	beq.n	80234b8 <nk_text_calculate_text_bounds+0x20c>
        *out_offset = nk_vec2(line_width, text_size.y + line_height);
 802348e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8023492:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8023496:	ee77 7a27 	vadd.f32	s15, s14, s15
 802349a:	eef0 0a67 	vmov.f32	s1, s15
 802349e:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80234a2:	f7f3 fa81 	bl	80169a8 <nk_vec2>
 80234a6:	eeb0 7a40 	vmov.f32	s14, s0
 80234aa:	eef0 7a60 	vmov.f32	s15, s1
 80234ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80234b0:	ed83 7a00 	vstr	s14, [r3]
 80234b4:	edc3 7a01 	vstr	s15, [r3, #4]
    if (line_width > 0 || text_size.y == 0.0f)
 80234b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80234bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80234c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234c4:	dc06      	bgt.n	80234d4 <nk_text_calculate_text_bounds+0x228>
 80234c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80234ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80234ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234d2:	d107      	bne.n	80234e4 <nk_text_calculate_text_bounds+0x238>
        text_size.y += line_height;
 80234d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80234d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80234dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80234e0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if (remaining)
 80234e4:	68fb      	ldr	r3, [r7, #12]
 80234e6:	2b00      	cmp	r3, #0
 80234e8:	d004      	beq.n	80234f4 <nk_text_calculate_text_bounds+0x248>
        *remaining = begin+text_len;
 80234ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80234ec:	69ba      	ldr	r2, [r7, #24]
 80234ee:	441a      	add	r2, r3
 80234f0:	68fb      	ldr	r3, [r7, #12]
 80234f2:	601a      	str	r2, [r3, #0]
    return text_size;
 80234f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80234f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80234fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023500:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8023504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023508:	ee07 2a10 	vmov	s14, r2
 802350c:	ee07 3a90 	vmov	s15, r3
 8023510:	eeb0 0a47 	vmov.f32	s0, s14
 8023514:	eef0 0a67 	vmov.f32	s1, s15
 8023518:	3748      	adds	r7, #72	; 0x48
 802351a:	46bd      	mov	sp, r7
 802351c:	bd80      	pop	{r7, pc}
 802351e:	bf00      	nop
 8023520:	00000000 	.word	0x00000000

08023524 <nk_widget>:
        return 0;
    return nk_input_has_mouse_click_down_in_rect(&ctx->input, btn, bounds, down);
}
NK_API enum nk_widget_layout_states
nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)
{
 8023524:	b590      	push	{r4, r7, lr}
 8023526:	b08f      	sub	sp, #60	; 0x3c
 8023528:	af00      	add	r7, sp, #0
 802352a:	6078      	str	r0, [r7, #4]
 802352c:	6039      	str	r1, [r7, #0]
    struct nk_rect c, v;
    struct nk_window *win;
    struct nk_panel *layout;
    const struct nk_input *in;

    NK_ASSERT(ctx);
 802352e:	683b      	ldr	r3, [r7, #0]
 8023530:	2b00      	cmp	r3, #0
 8023532:	d105      	bne.n	8023540 <nk_widget+0x1c>
 8023534:	4b9d      	ldr	r3, [pc, #628]	; (80237ac <nk_widget+0x288>)
 8023536:	4a9e      	ldr	r2, [pc, #632]	; (80237b0 <nk_widget+0x28c>)
 8023538:	218e      	movs	r1, #142	; 0x8e
 802353a:	489e      	ldr	r0, [pc, #632]	; (80237b4 <nk_widget+0x290>)
 802353c:	f001 fad8 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8023540:	683b      	ldr	r3, [r7, #0]
 8023542:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023546:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802354a:	2b00      	cmp	r3, #0
 802354c:	d105      	bne.n	802355a <nk_widget+0x36>
 802354e:	4b9a      	ldr	r3, [pc, #616]	; (80237b8 <nk_widget+0x294>)
 8023550:	4a97      	ldr	r2, [pc, #604]	; (80237b0 <nk_widget+0x28c>)
 8023552:	218f      	movs	r1, #143	; 0x8f
 8023554:	4897      	ldr	r0, [pc, #604]	; (80237b4 <nk_widget+0x290>)
 8023556:	f001 facb 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 802355a:	683b      	ldr	r3, [r7, #0]
 802355c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023560:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8023568:	2b00      	cmp	r3, #0
 802356a:	d105      	bne.n	8023578 <nk_widget+0x54>
 802356c:	4b93      	ldr	r3, [pc, #588]	; (80237bc <nk_widget+0x298>)
 802356e:	4a90      	ldr	r2, [pc, #576]	; (80237b0 <nk_widget+0x28c>)
 8023570:	2190      	movs	r1, #144	; 0x90
 8023572:	4890      	ldr	r0, [pc, #576]	; (80237b4 <nk_widget+0x290>)
 8023574:	f001 fabc 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 8023578:	683b      	ldr	r3, [r7, #0]
 802357a:	2b00      	cmp	r3, #0
 802357c:	d00f      	beq.n	802359e <nk_widget+0x7a>
 802357e:	683b      	ldr	r3, [r7, #0]
 8023580:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023584:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023588:	2b00      	cmp	r3, #0
 802358a:	d008      	beq.n	802359e <nk_widget+0x7a>
 802358c:	683b      	ldr	r3, [r7, #0]
 802358e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023592:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802359a:	2b00      	cmp	r3, #0
 802359c:	d101      	bne.n	80235a2 <nk_widget+0x7e>
        return NK_WIDGET_INVALID;
 802359e:	2300      	movs	r3, #0
 80235a0:	e167      	b.n	8023872 <nk_widget+0x34e>

    /* allocate space and check if the widget needs to be updated and drawn */
    nk_panel_alloc_space(bounds, ctx);
 80235a2:	6839      	ldr	r1, [r7, #0]
 80235a4:	6878      	ldr	r0, [r7, #4]
 80235a6:	f7f2 ffed 	bl	8016584 <nk_panel_alloc_space>
    win = ctx->current;
 80235aa:	683b      	ldr	r3, [r7, #0]
 80235ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80235b0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80235b4:	637b      	str	r3, [r7, #52]	; 0x34
    layout = win->layout;
 80235b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80235b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80235bc:	633b      	str	r3, [r7, #48]	; 0x30
    in = &ctx->input;
 80235be:	683b      	ldr	r3, [r7, #0]
 80235c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    c = layout->clip;
 80235c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235c4:	f107 041c 	add.w	r4, r7, #28
 80235c8:	333c      	adds	r3, #60	; 0x3c
 80235ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80235cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /*  if one of these triggers you forgot to add an `if` condition around either
        a window, group, popup, combobox or contextual menu `begin` and `end` block.
        Example:
            if (nk_begin(...) {...} nk_end(...); or
            if (nk_group_begin(...) { nk_group_end(...);} */
    NK_ASSERT(!(layout->flags & NK_WINDOW_MINIMIZED));
 80235d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235d2:	685b      	ldr	r3, [r3, #4]
 80235d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d005      	beq.n	80235e8 <nk_widget+0xc4>
 80235dc:	4b78      	ldr	r3, [pc, #480]	; (80237c0 <nk_widget+0x29c>)
 80235de:	4a74      	ldr	r2, [pc, #464]	; (80237b0 <nk_widget+0x28c>)
 80235e0:	21a0      	movs	r1, #160	; 0xa0
 80235e2:	4874      	ldr	r0, [pc, #464]	; (80237b4 <nk_widget+0x290>)
 80235e4:	f001 fa84 	bl	8024af0 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_HIDDEN));
 80235e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80235ea:	685b      	ldr	r3, [r3, #4]
 80235ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d005      	beq.n	8023600 <nk_widget+0xdc>
 80235f4:	4b73      	ldr	r3, [pc, #460]	; (80237c4 <nk_widget+0x2a0>)
 80235f6:	4a6e      	ldr	r2, [pc, #440]	; (80237b0 <nk_widget+0x28c>)
 80235f8:	21a1      	movs	r1, #161	; 0xa1
 80235fa:	486e      	ldr	r0, [pc, #440]	; (80237b4 <nk_widget+0x290>)
 80235fc:	f001 fa78 	bl	8024af0 <__assert_func>
    NK_ASSERT(!(layout->flags & NK_WINDOW_CLOSED));
 8023600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023602:	685b      	ldr	r3, [r3, #4]
 8023604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023608:	2b00      	cmp	r3, #0
 802360a:	d005      	beq.n	8023618 <nk_widget+0xf4>
 802360c:	4b6e      	ldr	r3, [pc, #440]	; (80237c8 <nk_widget+0x2a4>)
 802360e:	4a68      	ldr	r2, [pc, #416]	; (80237b0 <nk_widget+0x28c>)
 8023610:	21a2      	movs	r1, #162	; 0xa2
 8023612:	4868      	ldr	r0, [pc, #416]	; (80237b4 <nk_widget+0x290>)
 8023614:	f001 fa6c 	bl	8024af0 <__assert_func>

    /* need to convert to int here to remove floating point errors */
    bounds->x = (float)((int)bounds->x);
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	edd3 7a00 	vldr	s15, [r3]
 802361e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023626:	687b      	ldr	r3, [r7, #4]
 8023628:	edc3 7a00 	vstr	s15, [r3]
    bounds->y = (float)((int)bounds->y);
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	edd3 7a01 	vldr	s15, [r3, #4]
 8023632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	edc3 7a01 	vstr	s15, [r3, #4]
    bounds->w = (float)((int)bounds->w);
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	edd3 7a02 	vldr	s15, [r3, #8]
 8023646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802364a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	edc3 7a02 	vstr	s15, [r3, #8]
    bounds->h = (float)((int)bounds->h);
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	edd3 7a03 	vldr	s15, [r3, #12]
 802365a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802365e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	edc3 7a03 	vstr	s15, [r3, #12]

    c.x = (float)((int)c.x);
 8023668:	edd7 7a07 	vldr	s15, [r7, #28]
 802366c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023674:	edc7 7a07 	vstr	s15, [r7, #28]
    c.y = (float)((int)c.y);
 8023678:	edd7 7a08 	vldr	s15, [r7, #32]
 802367c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023684:	edc7 7a08 	vstr	s15, [r7, #32]
    c.w = (float)((int)c.w);
 8023688:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802368c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023694:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    c.h = (float)((int)c.h);
 8023698:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802369c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80236a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80236a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    nk_unify(&v, &c, bounds->x, bounds->y, bounds->x + bounds->w, bounds->y + bounds->h);
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	edd3 6a00 	vldr	s13, [r3]
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	ed93 7a00 	vldr	s14, [r3]
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80236c0:	ee77 5a27 	vadd.f32	s11, s14, s15
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80236d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80236d4:	f107 021c 	add.w	r2, r7, #28
 80236d8:	f107 030c 	add.w	r3, r7, #12
 80236dc:	eef0 1a67 	vmov.f32	s3, s15
 80236e0:	eeb0 1a65 	vmov.f32	s2, s11
 80236e4:	eef0 0a46 	vmov.f32	s1, s12
 80236e8:	eeb0 0a66 	vmov.f32	s0, s13
 80236ec:	4611      	mov	r1, r2
 80236ee:	4618      	mov	r0, r3
 80236f0:	f7f3 f97c 	bl	80169ec <nk_unify>
    if (!NK_INTERSECT(c.x, c.y, c.w, c.h, bounds->x, bounds->y, bounds->w, bounds->h))
 80236f4:	687b      	ldr	r3, [r7, #4]
 80236f6:	ed93 7a00 	vldr	s14, [r3]
 80236fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80236fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802370e:	bf4c      	ite	mi
 8023710:	2301      	movmi	r3, #1
 8023712:	2300      	movpl	r3, #0
 8023714:	b2db      	uxtb	r3, r3
 8023716:	f083 0301 	eor.w	r3, r3, #1
 802371a:	b2db      	uxtb	r3, r3
 802371c:	2b00      	cmp	r3, #0
 802371e:	d143      	bne.n	80237a8 <nk_widget+0x284>
 8023720:	ed97 7a07 	vldr	s14, [r7, #28]
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	edd3 6a00 	vldr	s13, [r3]
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	edd3 7a02 	vldr	s15, [r3, #8]
 8023730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802373c:	bf4c      	ite	mi
 802373e:	2301      	movmi	r3, #1
 8023740:	2300      	movpl	r3, #0
 8023742:	b2db      	uxtb	r3, r3
 8023744:	f083 0301 	eor.w	r3, r3, #1
 8023748:	b2db      	uxtb	r3, r3
 802374a:	2b00      	cmp	r3, #0
 802374c:	d12c      	bne.n	80237a8 <nk_widget+0x284>
 802374e:	687b      	ldr	r3, [r7, #4]
 8023750:	ed93 7a01 	vldr	s14, [r3, #4]
 8023754:	edd7 6a08 	vldr	s13, [r7, #32]
 8023758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802375c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023768:	bf4c      	ite	mi
 802376a:	2301      	movmi	r3, #1
 802376c:	2300      	movpl	r3, #0
 802376e:	b2db      	uxtb	r3, r3
 8023770:	f083 0301 	eor.w	r3, r3, #1
 8023774:	b2db      	uxtb	r3, r3
 8023776:	2b00      	cmp	r3, #0
 8023778:	d116      	bne.n	80237a8 <nk_widget+0x284>
 802377a:	ed97 7a08 	vldr	s14, [r7, #32]
 802377e:	687b      	ldr	r3, [r7, #4]
 8023780:	edd3 6a01 	vldr	s13, [r3, #4]
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	edd3 7a03 	vldr	s15, [r3, #12]
 802378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802378e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023796:	bf4c      	ite	mi
 8023798:	2301      	movmi	r3, #1
 802379a:	2300      	movpl	r3, #0
 802379c:	b2db      	uxtb	r3, r3
 802379e:	f083 0301 	eor.w	r3, r3, #1
 80237a2:	b2db      	uxtb	r3, r3
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	d011      	beq.n	80237cc <nk_widget+0x2a8>
        return NK_WIDGET_INVALID;
 80237a8:	2300      	movs	r3, #0
 80237aa:	e062      	b.n	8023872 <nk_widget+0x34e>
 80237ac:	08029520 	.word	0x08029520
 80237b0:	0802aca8 	.word	0x0802aca8
 80237b4:	08029524 	.word	0x08029524
 80237b8:	08029540 	.word	0x08029540
 80237bc:	08029550 	.word	0x08029550
 80237c0:	08029568 	.word	0x08029568
 80237c4:	08029590 	.word	0x08029590
 80237c8:	080295b4 	.word	0x080295b4
    if (!NK_INBOX(in->mouse.pos.x, in->mouse.pos.y, v.x, v.y, v.w, v.h))
 80237cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80237d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237d2:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80237d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80237da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237de:	bf94      	ite	ls
 80237e0:	2301      	movls	r3, #1
 80237e2:	2300      	movhi	r3, #0
 80237e4:	b2db      	uxtb	r3, r3
 80237e6:	f083 0301 	eor.w	r3, r3, #1
 80237ea:	b2db      	uxtb	r3, r3
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	d13d      	bne.n	802386c <nk_widget+0x348>
 80237f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237f2:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 80237f6:	edd7 6a03 	vldr	s13, [r7, #12]
 80237fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80237fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802380a:	bf4c      	ite	mi
 802380c:	2301      	movmi	r3, #1
 802380e:	2300      	movpl	r3, #0
 8023810:	b2db      	uxtb	r3, r3
 8023812:	f083 0301 	eor.w	r3, r3, #1
 8023816:	b2db      	uxtb	r3, r3
 8023818:	2b00      	cmp	r3, #0
 802381a:	d127      	bne.n	802386c <nk_widget+0x348>
 802381c:	ed97 7a04 	vldr	s14, [r7, #16]
 8023820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023822:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8023826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802382e:	bf94      	ite	ls
 8023830:	2301      	movls	r3, #1
 8023832:	2300      	movhi	r3, #0
 8023834:	b2db      	uxtb	r3, r3
 8023836:	f083 0301 	eor.w	r3, r3, #1
 802383a:	b2db      	uxtb	r3, r3
 802383c:	2b00      	cmp	r3, #0
 802383e:	d115      	bne.n	802386c <nk_widget+0x348>
 8023840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023842:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8023846:	edd7 6a04 	vldr	s13, [r7, #16]
 802384a:	edd7 7a06 	vldr	s15, [r7, #24]
 802384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8023852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802385a:	bf4c      	ite	mi
 802385c:	2301      	movmi	r3, #1
 802385e:	2300      	movpl	r3, #0
 8023860:	b2db      	uxtb	r3, r3
 8023862:	f083 0301 	eor.w	r3, r3, #1
 8023866:	b2db      	uxtb	r3, r3
 8023868:	2b00      	cmp	r3, #0
 802386a:	d001      	beq.n	8023870 <nk_widget+0x34c>
        return NK_WIDGET_ROM;
 802386c:	2302      	movs	r3, #2
 802386e:	e000      	b.n	8023872 <nk_widget+0x34e>
    return NK_WIDGET_VALID;
 8023870:	2301      	movs	r3, #1
}
 8023872:	4618      	mov	r0, r3
 8023874:	373c      	adds	r7, #60	; 0x3c
 8023876:	46bd      	mov	sp, r7
 8023878:	bd90      	pop	{r4, r7, pc}
 802387a:	bf00      	nop

0802387c <nk_widget_fitting>:
NK_API enum nk_widget_layout_states
nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,
    struct nk_vec2 item_padding)
{
 802387c:	b580      	push	{r7, lr}
 802387e:	b086      	sub	sp, #24
 8023880:	af00      	add	r7, sp, #0
 8023882:	60f8      	str	r0, [r7, #12]
 8023884:	60b9      	str	r1, [r7, #8]
 8023886:	eeb0 7a40 	vmov.f32	s14, s0
 802388a:	eef0 7a60 	vmov.f32	s15, s1
 802388e:	ed87 7a00 	vstr	s14, [r7]
 8023892:	edc7 7a01 	vstr	s15, [r7, #4]
    /* update the bounds to stand without padding  */
    enum nk_widget_layout_states state;
    NK_UNUSED(item_padding);

    NK_ASSERT(ctx);
 8023896:	68bb      	ldr	r3, [r7, #8]
 8023898:	2b00      	cmp	r3, #0
 802389a:	d105      	bne.n	80238a8 <nk_widget_fitting+0x2c>
 802389c:	4b20      	ldr	r3, [pc, #128]	; (8023920 <nk_widget_fitting+0xa4>)
 802389e:	4a21      	ldr	r2, [pc, #132]	; (8023924 <nk_widget_fitting+0xa8>)
 80238a0:	21be      	movs	r1, #190	; 0xbe
 80238a2:	4821      	ldr	r0, [pc, #132]	; (8023928 <nk_widget_fitting+0xac>)
 80238a4:	f001 f924 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 80238a8:	68bb      	ldr	r3, [r7, #8]
 80238aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238ae:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	d105      	bne.n	80238c2 <nk_widget_fitting+0x46>
 80238b6:	4b1d      	ldr	r3, [pc, #116]	; (802392c <nk_widget_fitting+0xb0>)
 80238b8:	4a1a      	ldr	r2, [pc, #104]	; (8023924 <nk_widget_fitting+0xa8>)
 80238ba:	21bf      	movs	r1, #191	; 0xbf
 80238bc:	481a      	ldr	r0, [pc, #104]	; (8023928 <nk_widget_fitting+0xac>)
 80238be:	f001 f917 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current->layout);
 80238c2:	68bb      	ldr	r3, [r7, #8]
 80238c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238c8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d105      	bne.n	80238e0 <nk_widget_fitting+0x64>
 80238d4:	4b16      	ldr	r3, [pc, #88]	; (8023930 <nk_widget_fitting+0xb4>)
 80238d6:	4a13      	ldr	r2, [pc, #76]	; (8023924 <nk_widget_fitting+0xa8>)
 80238d8:	21c0      	movs	r1, #192	; 0xc0
 80238da:	4813      	ldr	r0, [pc, #76]	; (8023928 <nk_widget_fitting+0xac>)
 80238dc:	f001 f908 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || !ctx->current->layout)
 80238e0:	68bb      	ldr	r3, [r7, #8]
 80238e2:	2b00      	cmp	r3, #0
 80238e4:	d00f      	beq.n	8023906 <nk_widget_fitting+0x8a>
 80238e6:	68bb      	ldr	r3, [r7, #8]
 80238e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238ec:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d008      	beq.n	8023906 <nk_widget_fitting+0x8a>
 80238f4:	68bb      	ldr	r3, [r7, #8]
 80238f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80238fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80238fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8023902:	2b00      	cmp	r3, #0
 8023904:	d101      	bne.n	802390a <nk_widget_fitting+0x8e>
        return NK_WIDGET_INVALID;
 8023906:	2300      	movs	r3, #0
 8023908:	e006      	b.n	8023918 <nk_widget_fitting+0x9c>

    state = nk_widget(bounds, ctx);
 802390a:	68b9      	ldr	r1, [r7, #8]
 802390c:	68f8      	ldr	r0, [r7, #12]
 802390e:	f7ff fe09 	bl	8023524 <nk_widget>
 8023912:	4603      	mov	r3, r0
 8023914:	75fb      	strb	r3, [r7, #23]
    return state;
 8023916:	7dfb      	ldrb	r3, [r7, #23]
}
 8023918:	4618      	mov	r0, r3
 802391a:	3718      	adds	r7, #24
 802391c:	46bd      	mov	sp, r7
 802391e:	bd80      	pop	{r7, pc}
 8023920:	08029520 	.word	0x08029520
 8023924:	0802acb4 	.word	0x0802acb4
 8023928:	08029524 	.word	0x08029524
 802392c:	08029540 	.word	0x08029540
 8023930:	08029550 	.word	0x08029550

08023934 <nk_create_window>:
 *                              WINDOW
 *
 * ===============================================================*/
NK_LIB void*
nk_create_window(struct nk_context *ctx)
{
 8023934:	b580      	push	{r7, lr}
 8023936:	b084      	sub	sp, #16
 8023938:	af00      	add	r7, sp, #0
 802393a:	6078      	str	r0, [r7, #4]
    struct nk_page_element *elem;
    elem = nk_create_page_element(ctx);
 802393c:	6878      	ldr	r0, [r7, #4]
 802393e:	f7f3 fac7 	bl	8016ed0 <nk_create_page_element>
 8023942:	60f8      	str	r0, [r7, #12]
    if (!elem) return 0;
 8023944:	68fb      	ldr	r3, [r7, #12]
 8023946:	2b00      	cmp	r3, #0
 8023948:	d101      	bne.n	802394e <nk_create_window+0x1a>
 802394a:	2300      	movs	r3, #0
 802394c:	e007      	b.n	802395e <nk_create_window+0x2a>
    elem->data.win.seq = ctx->seq;
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023954:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 8023958:	68fb      	ldr	r3, [r7, #12]
 802395a:	601a      	str	r2, [r3, #0]
    return &elem->data.win;
 802395c:	68fb      	ldr	r3, [r7, #12]
}
 802395e:	4618      	mov	r0, r3
 8023960:	3710      	adds	r7, #16
 8023962:	46bd      	mov	sp, r7
 8023964:	bd80      	pop	{r7, pc}

08023966 <nk_free_window>:
NK_LIB void
nk_free_window(struct nk_context *ctx, struct nk_window *win)
{
 8023966:	b580      	push	{r7, lr}
 8023968:	b086      	sub	sp, #24
 802396a:	af00      	add	r7, sp, #0
 802396c:	6078      	str	r0, [r7, #4]
 802396e:	6039      	str	r1, [r7, #0]
    /* unlink windows from list */
    struct nk_table *it = win->tables;
 8023970:	683b      	ldr	r3, [r7, #0]
 8023972:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8023976:	617b      	str	r3, [r7, #20]
    if (win->popup.win) {
 8023978:	683b      	ldr	r3, [r7, #0]
 802397a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802397e:	2b00      	cmp	r3, #0
 8023980:	d00a      	beq.n	8023998 <nk_free_window+0x32>
        nk_free_window(ctx, win->popup.win);
 8023982:	683b      	ldr	r3, [r7, #0]
 8023984:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8023988:	4619      	mov	r1, r3
 802398a:	6878      	ldr	r0, [r7, #4]
 802398c:	f7ff ffeb 	bl	8023966 <nk_free_window>
        win->popup.win = 0;
 8023990:	683b      	ldr	r3, [r7, #0]
 8023992:	2200      	movs	r2, #0
 8023994:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    }
    win->next = 0;
 8023998:	683b      	ldr	r3, [r7, #0]
 802399a:	2200      	movs	r2, #0
 802399c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 80239a0:	683b      	ldr	r3, [r7, #0]
 80239a2:	2200      	movs	r2, #0
 80239a4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    while (it) {
 80239a8:	e017      	b.n	80239da <nk_free_window+0x74>
        /*free window state tables */
        struct nk_table *n = it->next;
 80239aa:	697b      	ldr	r3, [r7, #20]
 80239ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80239b0:	60bb      	str	r3, [r7, #8]
        nk_remove_table(win, it);
 80239b2:	6979      	ldr	r1, [r7, #20]
 80239b4:	6838      	ldr	r0, [r7, #0]
 80239b6:	f7fb fcf6 	bl	801f3a6 <nk_remove_table>
        nk_free_table(ctx, it);
 80239ba:	6979      	ldr	r1, [r7, #20]
 80239bc:	6878      	ldr	r0, [r7, #4]
 80239be:	f7fb fca0 	bl	801f302 <nk_free_table>
        if (it == win->tables)
 80239c2:	683b      	ldr	r3, [r7, #0]
 80239c4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80239c8:	697a      	ldr	r2, [r7, #20]
 80239ca:	429a      	cmp	r2, r3
 80239cc:	d103      	bne.n	80239d6 <nk_free_window+0x70>
            win->tables = n;
 80239ce:	683b      	ldr	r3, [r7, #0]
 80239d0:	68ba      	ldr	r2, [r7, #8]
 80239d2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        it = n;
 80239d6:	68bb      	ldr	r3, [r7, #8]
 80239d8:	617b      	str	r3, [r7, #20]
    while (it) {
 80239da:	697b      	ldr	r3, [r7, #20]
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d1e4      	bne.n	80239aa <nk_free_window+0x44>
    }

    /* link windows into freelist */
    {union nk_page_data *pd = NK_CONTAINER_OF(win, union nk_page_data, win);
 80239e0:	683b      	ldr	r3, [r7, #0]
 80239e2:	613b      	str	r3, [r7, #16]
    struct nk_page_element *pe = NK_CONTAINER_OF(pd, struct nk_page_element, data);
 80239e4:	693b      	ldr	r3, [r7, #16]
 80239e6:	60fb      	str	r3, [r7, #12]
    nk_free_page_element(ctx, pe);}
 80239e8:	68f9      	ldr	r1, [r7, #12]
 80239ea:	6878      	ldr	r0, [r7, #4]
 80239ec:	f7f3 fb07 	bl	8016ffe <nk_free_page_element>
}
 80239f0:	bf00      	nop
 80239f2:	3718      	adds	r7, #24
 80239f4:	46bd      	mov	sp, r7
 80239f6:	bd80      	pop	{r7, pc}

080239f8 <nk_find_window>:
NK_LIB struct nk_window*
nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)
{
 80239f8:	b580      	push	{r7, lr}
 80239fa:	b086      	sub	sp, #24
 80239fc:	af00      	add	r7, sp, #0
 80239fe:	60f8      	str	r0, [r7, #12]
 8023a00:	60b9      	str	r1, [r7, #8]
 8023a02:	607a      	str	r2, [r7, #4]
    struct nk_window *iter;
    iter = ctx->begin;
 8023a04:	68fb      	ldr	r3, [r7, #12]
 8023a06:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023a0a:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023a0e:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023a10:	e026      	b.n	8023a60 <nk_find_window+0x68>
        NK_ASSERT(iter != iter->next);
 8023a12:	697b      	ldr	r3, [r7, #20]
 8023a14:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023a18:	697a      	ldr	r2, [r7, #20]
 8023a1a:	429a      	cmp	r2, r3
 8023a1c:	d105      	bne.n	8023a2a <nk_find_window+0x32>
 8023a1e:	4b14      	ldr	r3, [pc, #80]	; (8023a70 <nk_find_window+0x78>)
 8023a20:	4a14      	ldr	r2, [pc, #80]	; (8023a74 <nk_find_window+0x7c>)
 8023a22:	2133      	movs	r1, #51	; 0x33
 8023a24:	4814      	ldr	r0, [pc, #80]	; (8023a78 <nk_find_window+0x80>)
 8023a26:	f001 f863 	bl	8024af0 <__assert_func>
        if (iter->name == hash) {
 8023a2a:	697b      	ldr	r3, [r7, #20]
 8023a2c:	685b      	ldr	r3, [r3, #4]
 8023a2e:	68ba      	ldr	r2, [r7, #8]
 8023a30:	429a      	cmp	r2, r3
 8023a32:	d111      	bne.n	8023a58 <nk_find_window+0x60>
            int max_len = nk_strlen(iter->name_string);
 8023a34:	697b      	ldr	r3, [r7, #20]
 8023a36:	3308      	adds	r3, #8
 8023a38:	4618      	mov	r0, r3
 8023a3a:	f7fe fe4d 	bl	80226d8 <nk_strlen>
 8023a3e:	6138      	str	r0, [r7, #16]
            if (!nk_stricmpn(iter->name_string, name, max_len))
 8023a40:	697b      	ldr	r3, [r7, #20]
 8023a42:	3308      	adds	r3, #8
 8023a44:	693a      	ldr	r2, [r7, #16]
 8023a46:	6879      	ldr	r1, [r7, #4]
 8023a48:	4618      	mov	r0, r3
 8023a4a:	f7ff f80f 	bl	8022a6c <nk_stricmpn>
 8023a4e:	4603      	mov	r3, r0
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d101      	bne.n	8023a58 <nk_find_window+0x60>
                return iter;
 8023a54:	697b      	ldr	r3, [r7, #20]
 8023a56:	e007      	b.n	8023a68 <nk_find_window+0x70>
        }
        iter = iter->next;
 8023a58:	697b      	ldr	r3, [r7, #20]
 8023a5a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023a5e:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023a60:	697b      	ldr	r3, [r7, #20]
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d1d5      	bne.n	8023a12 <nk_find_window+0x1a>
    }
    return 0;
 8023a66:	2300      	movs	r3, #0
}
 8023a68:	4618      	mov	r0, r3
 8023a6a:	3718      	adds	r7, #24
 8023a6c:	46bd      	mov	sp, r7
 8023a6e:	bd80      	pop	{r7, pc}
 8023a70:	080295d8 	.word	0x080295d8
 8023a74:	0802acc8 	.word	0x0802acc8
 8023a78:	080295ec 	.word	0x080295ec

08023a7c <nk_insert_window>:
NK_LIB void
nk_insert_window(struct nk_context *ctx, struct nk_window *win,
    enum nk_window_insert_location loc)
{
 8023a7c:	b580      	push	{r7, lr}
 8023a7e:	b086      	sub	sp, #24
 8023a80:	af00      	add	r7, sp, #0
 8023a82:	60f8      	str	r0, [r7, #12]
 8023a84:	60b9      	str	r1, [r7, #8]
 8023a86:	4613      	mov	r3, r2
 8023a88:	71fb      	strb	r3, [r7, #7]
    const struct nk_window *iter;
    NK_ASSERT(ctx);
 8023a8a:	68fb      	ldr	r3, [r7, #12]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d105      	bne.n	8023a9c <nk_insert_window+0x20>
 8023a90:	4b6f      	ldr	r3, [pc, #444]	; (8023c50 <nk_insert_window+0x1d4>)
 8023a92:	4a70      	ldr	r2, [pc, #448]	; (8023c54 <nk_insert_window+0x1d8>)
 8023a94:	2142      	movs	r1, #66	; 0x42
 8023a96:	4870      	ldr	r0, [pc, #448]	; (8023c58 <nk_insert_window+0x1dc>)
 8023a98:	f001 f82a 	bl	8024af0 <__assert_func>
    NK_ASSERT(win);
 8023a9c:	68bb      	ldr	r3, [r7, #8]
 8023a9e:	2b00      	cmp	r3, #0
 8023aa0:	d105      	bne.n	8023aae <nk_insert_window+0x32>
 8023aa2:	4b6e      	ldr	r3, [pc, #440]	; (8023c5c <nk_insert_window+0x1e0>)
 8023aa4:	4a6b      	ldr	r2, [pc, #428]	; (8023c54 <nk_insert_window+0x1d8>)
 8023aa6:	2143      	movs	r1, #67	; 0x43
 8023aa8:	486b      	ldr	r0, [pc, #428]	; (8023c58 <nk_insert_window+0x1dc>)
 8023aaa:	f001 f821 	bl	8024af0 <__assert_func>
    if (!win || !ctx) return;
 8023aae:	68bb      	ldr	r3, [r7, #8]
 8023ab0:	2b00      	cmp	r3, #0
 8023ab2:	f000 80c6 	beq.w	8023c42 <nk_insert_window+0x1c6>
 8023ab6:	68fb      	ldr	r3, [r7, #12]
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	f000 80c2 	beq.w	8023c42 <nk_insert_window+0x1c6>

    iter = ctx->begin;
 8023abe:	68fb      	ldr	r3, [r7, #12]
 8023ac0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023ac4:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023ac8:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023aca:	e01e      	b.n	8023b0a <nk_insert_window+0x8e>
        NK_ASSERT(iter != iter->next);
 8023acc:	697b      	ldr	r3, [r7, #20]
 8023ace:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023ad2:	697a      	ldr	r2, [r7, #20]
 8023ad4:	429a      	cmp	r2, r3
 8023ad6:	d105      	bne.n	8023ae4 <nk_insert_window+0x68>
 8023ad8:	4b61      	ldr	r3, [pc, #388]	; (8023c60 <nk_insert_window+0x1e4>)
 8023ada:	4a5e      	ldr	r2, [pc, #376]	; (8023c54 <nk_insert_window+0x1d8>)
 8023adc:	2148      	movs	r1, #72	; 0x48
 8023ade:	485e      	ldr	r0, [pc, #376]	; (8023c58 <nk_insert_window+0x1dc>)
 8023ae0:	f001 f806 	bl	8024af0 <__assert_func>
        NK_ASSERT(iter != win);
 8023ae4:	697a      	ldr	r2, [r7, #20]
 8023ae6:	68bb      	ldr	r3, [r7, #8]
 8023ae8:	429a      	cmp	r2, r3
 8023aea:	d105      	bne.n	8023af8 <nk_insert_window+0x7c>
 8023aec:	4b5d      	ldr	r3, [pc, #372]	; (8023c64 <nk_insert_window+0x1e8>)
 8023aee:	4a59      	ldr	r2, [pc, #356]	; (8023c54 <nk_insert_window+0x1d8>)
 8023af0:	2149      	movs	r1, #73	; 0x49
 8023af2:	4859      	ldr	r0, [pc, #356]	; (8023c58 <nk_insert_window+0x1dc>)
 8023af4:	f000 fffc 	bl	8024af0 <__assert_func>
        if (iter == win) return;
 8023af8:	697a      	ldr	r2, [r7, #20]
 8023afa:	68bb      	ldr	r3, [r7, #8]
 8023afc:	429a      	cmp	r2, r3
 8023afe:	f000 80a2 	beq.w	8023c46 <nk_insert_window+0x1ca>
        iter = iter->next;
 8023b02:	697b      	ldr	r3, [r7, #20]
 8023b04:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023b08:	617b      	str	r3, [r7, #20]
    while (iter) {
 8023b0a:	697b      	ldr	r3, [r7, #20]
 8023b0c:	2b00      	cmp	r3, #0
 8023b0e:	d1dd      	bne.n	8023acc <nk_insert_window+0x50>
    }

    if (!ctx->begin) {
 8023b10:	68fb      	ldr	r3, [r7, #12]
 8023b12:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b16:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023b1a:	2b00      	cmp	r3, #0
 8023b1c:	d11d      	bne.n	8023b5a <nk_insert_window+0xde>
        win->next = 0;
 8023b1e:	68bb      	ldr	r3, [r7, #8]
 8023b20:	2200      	movs	r2, #0
 8023b22:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 8023b26:	68bb      	ldr	r3, [r7, #8]
 8023b28:	2200      	movs	r2, #0
 8023b2a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b34:	461a      	mov	r2, r3
 8023b36:	68bb      	ldr	r3, [r7, #8]
 8023b38:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->end = win;
 8023b3c:	68fb      	ldr	r3, [r7, #12]
 8023b3e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b42:	461a      	mov	r2, r3
 8023b44:	68bb      	ldr	r3, [r7, #8]
 8023b46:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->count = 1;
 8023b4a:	68fb      	ldr	r3, [r7, #12]
 8023b4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b50:	461a      	mov	r2, r3
 8023b52:	2301      	movs	r3, #1
 8023b54:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
        return;
 8023b58:	e076      	b.n	8023c48 <nk_insert_window+0x1cc>
    }
    if (loc == NK_INSERT_BACK) {
 8023b5a:	79fb      	ldrb	r3, [r7, #7]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	d13b      	bne.n	8023bd8 <nk_insert_window+0x15c>
        struct nk_window *end;
        end = ctx->end;
 8023b60:	68fb      	ldr	r3, [r7, #12]
 8023b62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b66:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023b6a:	613b      	str	r3, [r7, #16]
        end->flags |= NK_WINDOW_ROM;
 8023b6c:	693b      	ldr	r3, [r7, #16]
 8023b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8023b74:	693b      	ldr	r3, [r7, #16]
 8023b76:	649a      	str	r2, [r3, #72]	; 0x48
        end->next = win;
 8023b78:	693b      	ldr	r3, [r7, #16]
 8023b7a:	68ba      	ldr	r2, [r7, #8]
 8023b7c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = ctx->end;
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b86:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
 8023b8a:	68bb      	ldr	r3, [r7, #8]
 8023b8c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = 0;
 8023b90:	68bb      	ldr	r3, [r7, #8]
 8023b92:	2200      	movs	r2, #0
 8023b94:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ctx->end = win;
 8023b98:	68fb      	ldr	r3, [r7, #12]
 8023b9a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023b9e:	461a      	mov	r2, r3
 8023ba0:	68bb      	ldr	r3, [r7, #8]
 8023ba2:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        ctx->active = ctx->end;
 8023ba6:	68fb      	ldr	r3, [r7, #12]
 8023ba8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bac:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023bb0:	68fa      	ldr	r2, [r7, #12]
 8023bb2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023bb6:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8023bba:	68fb      	ldr	r3, [r7, #12]
 8023bbc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bc0:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023bc6:	68fb      	ldr	r3, [r7, #12]
 8023bc8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bcc:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023bd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023bd4:	649a      	str	r2, [r3, #72]	; 0x48
 8023bd6:	e028      	b.n	8023c2a <nk_insert_window+0x1ae>
    } else {
        /*ctx->end->flags |= NK_WINDOW_ROM;*/
        ctx->begin->prev = win;
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bde:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023be2:	68ba      	ldr	r2, [r7, #8]
 8023be4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        win->next = ctx->begin;
 8023be8:	68fb      	ldr	r3, [r7, #12]
 8023bea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023bee:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
 8023bf2:	68bb      	ldr	r3, [r7, #8]
 8023bf4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        win->prev = 0;
 8023bf8:	68bb      	ldr	r3, [r7, #8]
 8023bfa:	2200      	movs	r2, #0
 8023bfc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ctx->begin = win;
 8023c00:	68fb      	ldr	r3, [r7, #12]
 8023c02:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c06:	461a      	mov	r2, r3
 8023c08:	68bb      	ldr	r3, [r7, #8]
 8023c0a:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
        ctx->begin->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8023c0e:	68fb      	ldr	r3, [r7, #12]
 8023c10:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c14:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023c1a:	68fb      	ldr	r3, [r7, #12]
 8023c1c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c20:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023c28:	649a      	str	r2, [r3, #72]	; 0x48
    }
    ctx->count++;
 8023c2a:	68fb      	ldr	r3, [r7, #12]
 8023c2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c30:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8023c34:	3301      	adds	r3, #1
 8023c36:	68fa      	ldr	r2, [r7, #12]
 8023c38:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023c3c:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
 8023c40:	e002      	b.n	8023c48 <nk_insert_window+0x1cc>
    if (!win || !ctx) return;
 8023c42:	bf00      	nop
 8023c44:	e000      	b.n	8023c48 <nk_insert_window+0x1cc>
        if (iter == win) return;
 8023c46:	bf00      	nop
}
 8023c48:	3718      	adds	r7, #24
 8023c4a:	46bd      	mov	sp, r7
 8023c4c:	bd80      	pop	{r7, pc}
 8023c4e:	bf00      	nop
 8023c50:	08029608 	.word	0x08029608
 8023c54:	0802acd8 	.word	0x0802acd8
 8023c58:	080295ec 	.word	0x080295ec
 8023c5c:	0802960c 	.word	0x0802960c
 8023c60:	080295d8 	.word	0x080295d8
 8023c64:	08029610 	.word	0x08029610

08023c68 <nk_remove_window>:
NK_LIB void
nk_remove_window(struct nk_context *ctx, struct nk_window *win)
{
 8023c68:	b480      	push	{r7}
 8023c6a:	b083      	sub	sp, #12
 8023c6c:	af00      	add	r7, sp, #0
 8023c6e:	6078      	str	r0, [r7, #4]
 8023c70:	6039      	str	r1, [r7, #0]
    if (win == ctx->begin || win == ctx->end) {
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c78:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c7c:	683a      	ldr	r2, [r7, #0]
 8023c7e:	429a      	cmp	r2, r3
 8023c80:	d007      	beq.n	8023c92 <nk_remove_window+0x2a>
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c88:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023c8c:	683a      	ldr	r2, [r7, #0]
 8023c8e:	429a      	cmp	r2, r3
 8023c90:	d136      	bne.n	8023d00 <nk_remove_window+0x98>
        if (win == ctx->begin) {
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023c98:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8023c9c:	683a      	ldr	r2, [r7, #0]
 8023c9e:	429a      	cmp	r2, r3
 8023ca0:	d112      	bne.n	8023cc8 <nk_remove_window+0x60>
            ctx->begin = win->next;
 8023ca2:	683b      	ldr	r3, [r7, #0]
 8023ca4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023ca8:	687a      	ldr	r2, [r7, #4]
 8023caa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023cae:	f8c2 364c 	str.w	r3, [r2, #1612]	; 0x64c
            if (win->next)
 8023cb2:	683b      	ldr	r3, [r7, #0]
 8023cb4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d005      	beq.n	8023cc8 <nk_remove_window+0x60>
                win->next->prev = 0;
 8023cbc:	683b      	ldr	r3, [r7, #0]
 8023cbe:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023cc2:	2200      	movs	r2, #0
 8023cc4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        }
        if (win == ctx->end) {
 8023cc8:	687b      	ldr	r3, [r7, #4]
 8023cca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023cce:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023cd2:	683a      	ldr	r2, [r7, #0]
 8023cd4:	429a      	cmp	r2, r3
 8023cd6:	d12e      	bne.n	8023d36 <nk_remove_window+0xce>
            ctx->end = win->prev;
 8023cd8:	683b      	ldr	r3, [r7, #0]
 8023cda:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023cde:	687a      	ldr	r2, [r7, #4]
 8023ce0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023ce4:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
            if (win->prev)
 8023ce8:	683b      	ldr	r3, [r7, #0]
 8023cea:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d021      	beq.n	8023d36 <nk_remove_window+0xce>
                win->prev->next = 0;
 8023cf2:	683b      	ldr	r3, [r7, #0]
 8023cf4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023cf8:	2200      	movs	r2, #0
 8023cfa:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        if (win == ctx->end) {
 8023cfe:	e01a      	b.n	8023d36 <nk_remove_window+0xce>
        }
    } else {
        if (win->next)
 8023d00:	683b      	ldr	r3, [r7, #0]
 8023d02:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	d007      	beq.n	8023d1a <nk_remove_window+0xb2>
            win->next->prev = win->prev;
 8023d0a:	683b      	ldr	r3, [r7, #0]
 8023d0c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8023d10:	683a      	ldr	r2, [r7, #0]
 8023d12:	f8d2 217c 	ldr.w	r2, [r2, #380]	; 0x17c
 8023d16:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if (win->prev)
 8023d1a:	683b      	ldr	r3, [r7, #0]
 8023d1c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	d009      	beq.n	8023d38 <nk_remove_window+0xd0>
            win->prev->next = win->next;
 8023d24:	683b      	ldr	r3, [r7, #0]
 8023d26:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8023d2a:	683a      	ldr	r2, [r7, #0]
 8023d2c:	f8d2 2178 	ldr.w	r2, [r2, #376]	; 0x178
 8023d30:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8023d34:	e000      	b.n	8023d38 <nk_remove_window+0xd0>
        if (win == ctx->end) {
 8023d36:	bf00      	nop
    }
    if (win == ctx->active || !ctx->active) {
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d3e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8023d42:	683a      	ldr	r2, [r7, #0]
 8023d44:	429a      	cmp	r2, r3
 8023d46:	d006      	beq.n	8023d56 <nk_remove_window+0xee>
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d4e:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8023d52:	2b00      	cmp	r3, #0
 8023d54:	d11e      	bne.n	8023d94 <nk_remove_window+0x12c>
        ctx->active = ctx->end;
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d5c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d60:	687a      	ldr	r2, [r7, #4]
 8023d62:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023d66:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
        if (ctx->end)
 8023d6a:	687b      	ldr	r3, [r7, #4]
 8023d6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d70:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d74:	2b00      	cmp	r3, #0
 8023d76:	d00d      	beq.n	8023d94 <nk_remove_window+0x12c>
            ctx->end->flags &= ~(nk_flags)NK_WINDOW_ROM;
 8023d78:	687b      	ldr	r3, [r7, #4]
 8023d7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d7e:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023d84:	687b      	ldr	r3, [r7, #4]
 8023d86:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023d8a:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8023d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023d92:	649a      	str	r2, [r3, #72]	; 0x48
    }
    win->next = 0;
 8023d94:	683b      	ldr	r3, [r7, #0]
 8023d96:	2200      	movs	r2, #0
 8023d98:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    win->prev = 0;
 8023d9c:	683b      	ldr	r3, [r7, #0]
 8023d9e:	2200      	movs	r2, #0
 8023da0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    ctx->count--;
 8023da4:	687b      	ldr	r3, [r7, #4]
 8023da6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023daa:	f8d3 3660 	ldr.w	r3, [r3, #1632]	; 0x660
 8023dae:	3b01      	subs	r3, #1
 8023db0:	687a      	ldr	r2, [r7, #4]
 8023db2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8023db6:	f8c2 3660 	str.w	r3, [r2, #1632]	; 0x660
}
 8023dba:	bf00      	nop
 8023dbc:	370c      	adds	r7, #12
 8023dbe:	46bd      	mov	sp, r7
 8023dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dc4:	4770      	bx	lr

08023dc6 <nk_begin>:
NK_API nk_bool
nk_begin(struct nk_context *ctx, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 8023dc6:	b580      	push	{r7, lr}
 8023dc8:	b088      	sub	sp, #32
 8023dca:	af00      	add	r7, sp, #0
 8023dcc:	61f8      	str	r0, [r7, #28]
 8023dce:	61b9      	str	r1, [r7, #24]
 8023dd0:	eeb0 6a40 	vmov.f32	s12, s0
 8023dd4:	eef0 6a60 	vmov.f32	s13, s1
 8023dd8:	eeb0 7a41 	vmov.f32	s14, s2
 8023ddc:	eef0 7a61 	vmov.f32	s15, s3
 8023de0:	607a      	str	r2, [r7, #4]
 8023de2:	ed87 6a02 	vstr	s12, [r7, #8]
 8023de6:	edc7 6a03 	vstr	s13, [r7, #12]
 8023dea:	ed87 7a04 	vstr	s14, [r7, #16]
 8023dee:	edc7 7a05 	vstr	s15, [r7, #20]
    return nk_begin_titled(ctx, title, title, bounds, flags);
 8023df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8023df6:	edd7 6a03 	vldr	s13, [r7, #12]
 8023dfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8023dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	eeb0 0a46 	vmov.f32	s0, s12
 8023e08:	eef0 0a66 	vmov.f32	s1, s13
 8023e0c:	eeb0 1a47 	vmov.f32	s2, s14
 8023e10:	eef0 1a67 	vmov.f32	s3, s15
 8023e14:	69ba      	ldr	r2, [r7, #24]
 8023e16:	69b9      	ldr	r1, [r7, #24]
 8023e18:	69f8      	ldr	r0, [r7, #28]
 8023e1a:	f000 f805 	bl	8023e28 <nk_begin_titled>
 8023e1e:	4603      	mov	r3, r0
}
 8023e20:	4618      	mov	r0, r3
 8023e22:	3720      	adds	r7, #32
 8023e24:	46bd      	mov	sp, r7
 8023e26:	bd80      	pop	{r7, pc}

08023e28 <nk_begin_titled>:
NK_API nk_bool
nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,
    struct nk_rect bounds, nk_flags flags)
{
 8023e28:	b590      	push	{r4, r7, lr}
 8023e2a:	b09f      	sub	sp, #124	; 0x7c
 8023e2c:	af00      	add	r7, sp, #0
 8023e2e:	61f8      	str	r0, [r7, #28]
 8023e30:	61b9      	str	r1, [r7, #24]
 8023e32:	617a      	str	r2, [r7, #20]
 8023e34:	eeb0 6a40 	vmov.f32	s12, s0
 8023e38:	eef0 6a60 	vmov.f32	s13, s1
 8023e3c:	eeb0 7a41 	vmov.f32	s14, s2
 8023e40:	eef0 7a61 	vmov.f32	s15, s3
 8023e44:	603b      	str	r3, [r7, #0]
 8023e46:	ed87 6a01 	vstr	s12, [r7, #4]
 8023e4a:	edc7 6a02 	vstr	s13, [r7, #8]
 8023e4e:	ed87 7a03 	vstr	s14, [r7, #12]
 8023e52:	edc7 7a04 	vstr	s15, [r7, #16]
    struct nk_window *win;
    struct nk_style *style;
    nk_hash name_hash;
    int name_len;
    int ret = 0;
 8023e56:	2300      	movs	r3, #0
 8023e58:	66fb      	str	r3, [r7, #108]	; 0x6c

    NK_ASSERT(ctx);
 8023e5a:	69fb      	ldr	r3, [r7, #28]
 8023e5c:	2b00      	cmp	r3, #0
 8023e5e:	d105      	bne.n	8023e6c <nk_begin_titled+0x44>
 8023e60:	4b8f      	ldr	r3, [pc, #572]	; (80240a0 <nk_begin_titled+0x278>)
 8023e62:	4a90      	ldr	r2, [pc, #576]	; (80240a4 <nk_begin_titled+0x27c>)
 8023e64:	2197      	movs	r1, #151	; 0x97
 8023e66:	4890      	ldr	r0, [pc, #576]	; (80240a8 <nk_begin_titled+0x280>)
 8023e68:	f000 fe42 	bl	8024af0 <__assert_func>
    NK_ASSERT(name);
 8023e6c:	69bb      	ldr	r3, [r7, #24]
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	d105      	bne.n	8023e7e <nk_begin_titled+0x56>
 8023e72:	4b8e      	ldr	r3, [pc, #568]	; (80240ac <nk_begin_titled+0x284>)
 8023e74:	4a8b      	ldr	r2, [pc, #556]	; (80240a4 <nk_begin_titled+0x27c>)
 8023e76:	2198      	movs	r1, #152	; 0x98
 8023e78:	488b      	ldr	r0, [pc, #556]	; (80240a8 <nk_begin_titled+0x280>)
 8023e7a:	f000 fe39 	bl	8024af0 <__assert_func>
    NK_ASSERT(title);
 8023e7e:	697b      	ldr	r3, [r7, #20]
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	d105      	bne.n	8023e90 <nk_begin_titled+0x68>
 8023e84:	4b8a      	ldr	r3, [pc, #552]	; (80240b0 <nk_begin_titled+0x288>)
 8023e86:	4a87      	ldr	r2, [pc, #540]	; (80240a4 <nk_begin_titled+0x27c>)
 8023e88:	2199      	movs	r1, #153	; 0x99
 8023e8a:	4887      	ldr	r0, [pc, #540]	; (80240a8 <nk_begin_titled+0x280>)
 8023e8c:	f000 fe30 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->style.font && ctx->style.font->width && "if this triggers you forgot to add a font");
 8023e90:	69fb      	ldr	r3, [r7, #28]
 8023e92:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d005      	beq.n	8023ea6 <nk_begin_titled+0x7e>
 8023e9a:	69fb      	ldr	r3, [r7, #28]
 8023e9c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8023ea0:	689b      	ldr	r3, [r3, #8]
 8023ea2:	2b00      	cmp	r3, #0
 8023ea4:	d105      	bne.n	8023eb2 <nk_begin_titled+0x8a>
 8023ea6:	4b83      	ldr	r3, [pc, #524]	; (80240b4 <nk_begin_titled+0x28c>)
 8023ea8:	4a7e      	ldr	r2, [pc, #504]	; (80240a4 <nk_begin_titled+0x27c>)
 8023eaa:	219a      	movs	r1, #154	; 0x9a
 8023eac:	487e      	ldr	r0, [pc, #504]	; (80240a8 <nk_begin_titled+0x280>)
 8023eae:	f000 fe1f 	bl	8024af0 <__assert_func>
    NK_ASSERT(!ctx->current && "if this triggers you missed a `nk_end` call");
 8023eb2:	69fb      	ldr	r3, [r7, #28]
 8023eb4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023eb8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d005      	beq.n	8023ecc <nk_begin_titled+0xa4>
 8023ec0:	4b7d      	ldr	r3, [pc, #500]	; (80240b8 <nk_begin_titled+0x290>)
 8023ec2:	4a78      	ldr	r2, [pc, #480]	; (80240a4 <nk_begin_titled+0x27c>)
 8023ec4:	219b      	movs	r1, #155	; 0x9b
 8023ec6:	4878      	ldr	r0, [pc, #480]	; (80240a8 <nk_begin_titled+0x280>)
 8023ec8:	f000 fe12 	bl	8024af0 <__assert_func>
    if (!ctx || ctx->current || !title || !name)
 8023ecc:	69fb      	ldr	r3, [r7, #28]
 8023ece:	2b00      	cmp	r3, #0
 8023ed0:	d00c      	beq.n	8023eec <nk_begin_titled+0xc4>
 8023ed2:	69fb      	ldr	r3, [r7, #28]
 8023ed4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023ed8:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8023edc:	2b00      	cmp	r3, #0
 8023ede:	d105      	bne.n	8023eec <nk_begin_titled+0xc4>
 8023ee0:	697b      	ldr	r3, [r7, #20]
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d002      	beq.n	8023eec <nk_begin_titled+0xc4>
 8023ee6:	69bb      	ldr	r3, [r7, #24]
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	d101      	bne.n	8023ef0 <nk_begin_titled+0xc8>
        return 0;
 8023eec:	2300      	movs	r3, #0
 8023eee:	e3d7      	b.n	80246a0 <nk_begin_titled+0x878>

    /* find or create window */
    style = &ctx->style;
 8023ef0:	69fb      	ldr	r3, [r7, #28]
 8023ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8023ef6:	66bb      	str	r3, [r7, #104]	; 0x68
    name_len = (int)nk_strlen(name);
 8023ef8:	69b8      	ldr	r0, [r7, #24]
 8023efa:	f7fe fbed 	bl	80226d8 <nk_strlen>
 8023efe:	6678      	str	r0, [r7, #100]	; 0x64
    name_hash = nk_murmur_hash(name, (int)name_len, NK_WINDOW_TITLE);
 8023f00:	2240      	movs	r2, #64	; 0x40
 8023f02:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8023f04:	69b8      	ldr	r0, [r7, #24]
 8023f06:	f7ff f85f 	bl	8022fc8 <nk_murmur_hash>
 8023f0a:	6638      	str	r0, [r7, #96]	; 0x60
    win = nk_find_window(ctx, name_hash, name);
 8023f0c:	69ba      	ldr	r2, [r7, #24]
 8023f0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8023f10:	69f8      	ldr	r0, [r7, #28]
 8023f12:	f7ff fd71 	bl	80239f8 <nk_find_window>
 8023f16:	6778      	str	r0, [r7, #116]	; 0x74
    if (!win) {
 8023f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d160      	bne.n	8023fe0 <nk_begin_titled+0x1b8>
        /* create new window */
        nk_size name_length = (nk_size)name_len;
 8023f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023f20:	65fb      	str	r3, [r7, #92]	; 0x5c
        win = (struct nk_window*)nk_create_window(ctx);
 8023f22:	69f8      	ldr	r0, [r7, #28]
 8023f24:	f7ff fd06 	bl	8023934 <nk_create_window>
 8023f28:	6778      	str	r0, [r7, #116]	; 0x74
        NK_ASSERT(win);
 8023f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	d105      	bne.n	8023f3c <nk_begin_titled+0x114>
 8023f30:	4b62      	ldr	r3, [pc, #392]	; (80240bc <nk_begin_titled+0x294>)
 8023f32:	4a5c      	ldr	r2, [pc, #368]	; (80240a4 <nk_begin_titled+0x27c>)
 8023f34:	21a8      	movs	r1, #168	; 0xa8
 8023f36:	485c      	ldr	r0, [pc, #368]	; (80240a8 <nk_begin_titled+0x280>)
 8023f38:	f000 fdda 	bl	8024af0 <__assert_func>
        if (!win) return 0;
 8023f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d101      	bne.n	8023f46 <nk_begin_titled+0x11e>
 8023f42:	2300      	movs	r3, #0
 8023f44:	e3ac      	b.n	80246a0 <nk_begin_titled+0x878>

        if (flags & NK_WINDOW_BACKGROUND)
 8023f46:	683b      	ldr	r3, [r7, #0]
 8023f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d005      	beq.n	8023f5c <nk_begin_titled+0x134>
            nk_insert_window(ctx, win, NK_INSERT_FRONT);
 8023f50:	2201      	movs	r2, #1
 8023f52:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8023f54:	69f8      	ldr	r0, [r7, #28]
 8023f56:	f7ff fd91 	bl	8023a7c <nk_insert_window>
 8023f5a:	e004      	b.n	8023f66 <nk_begin_titled+0x13e>
        else nk_insert_window(ctx, win, NK_INSERT_BACK);
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8023f60:	69f8      	ldr	r0, [r7, #28]
 8023f62:	f7ff fd8b 	bl	8023a7c <nk_insert_window>
        nk_command_buffer_init(&win->buffer, &ctx->memory, NK_CLIPPING_ON);
 8023f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f68:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8023f6c:	69fb      	ldr	r3, [r7, #28]
 8023f6e:	f503 53d4 	add.w	r3, r3, #6784	; 0x1a80
 8023f72:	330c      	adds	r3, #12
 8023f74:	2201      	movs	r2, #1
 8023f76:	4619      	mov	r1, r3
 8023f78:	f7ed fb4c 	bl	8011614 <nk_command_buffer_init>

        win->flags = flags;
 8023f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f7e:	683a      	ldr	r2, [r7, #0]
 8023f80:	649a      	str	r2, [r3, #72]	; 0x48
        win->bounds = bounds;
 8023f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f84:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8023f88:	1d3b      	adds	r3, r7, #4
 8023f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        win->name = name_hash;
 8023f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023f92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023f94:	605a      	str	r2, [r3, #4]
        name_length = NK_MIN(name_length, NK_WINDOW_MAX_NAME-1);
 8023f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023f98:	2b3f      	cmp	r3, #63	; 0x3f
 8023f9a:	bf28      	it	cs
 8023f9c:	233f      	movcs	r3, #63	; 0x3f
 8023f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
        NK_MEMCPY(win->name_string, name, name_length);
 8023fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fa2:	3308      	adds	r3, #8
 8023fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8023fa6:	69b9      	ldr	r1, [r7, #24]
 8023fa8:	4618      	mov	r0, r3
 8023faa:	f7fe fa27 	bl	80223fc <nk_memcopy>
        win->name_string[name_length] = 0;
 8023fae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023fb2:	4413      	add	r3, r2
 8023fb4:	3308      	adds	r3, #8
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	701a      	strb	r2, [r3, #0]
        win->popup.win = 0;
 8023fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fbc:	2200      	movs	r2, #0
 8023fbe:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        if (!ctx->active)
 8023fc2:	69fb      	ldr	r3, [r7, #28]
 8023fc4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023fc8:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d153      	bne.n	8024078 <nk_begin_titled+0x250>
            ctx->active = win;
 8023fd0:	69fb      	ldr	r3, [r7, #28]
 8023fd2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8023fd6:	461a      	mov	r2, r3
 8023fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fda:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
 8023fde:	e04b      	b.n	8024078 <nk_begin_titled+0x250>
    } else {
        /* update window */
        win->flags &= ~(nk_flags)(NK_WINDOW_PRIVATE-1);
 8023fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023fe4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8023fe8:	f023 0307 	bic.w	r3, r3, #7
 8023fec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8023fee:	6493      	str	r3, [r2, #72]	; 0x48
        win->flags |= flags;
 8023ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023ff4:	683b      	ldr	r3, [r7, #0]
 8023ff6:	431a      	orrs	r2, r3
 8023ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023ffa:	649a      	str	r2, [r3, #72]	; 0x48
        if (!(win->flags & (NK_WINDOW_MOVABLE | NK_WINDOW_SCALABLE)))
 8023ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024000:	f003 0306 	and.w	r3, r3, #6
 8024004:	2b00      	cmp	r3, #0
 8024006:	d106      	bne.n	8024016 <nk_begin_titled+0x1ee>
            win->bounds = bounds;
 8024008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802400a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 802400e:	1d3b      	adds	r3, r7, #4
 8024010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         * I.) Have more than one window with the same name or
         * II.) You forgot to actually draw the window.
         *      More specific you did not call `nk_clear` (nk_clear will be
         *      automatically called for you if you are using one of the
         *      provided demo backends). */
        NK_ASSERT(win->seq != ctx->seq);
 8024016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024018:	681a      	ldr	r2, [r3, #0]
 802401a:	69fb      	ldr	r3, [r7, #28]
 802401c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024020:	f8d3 3664 	ldr.w	r3, [r3, #1636]	; 0x664
 8024024:	429a      	cmp	r2, r3
 8024026:	d105      	bne.n	8024034 <nk_begin_titled+0x20c>
 8024028:	4b25      	ldr	r3, [pc, #148]	; (80240c0 <nk_begin_titled+0x298>)
 802402a:	4a1e      	ldr	r2, [pc, #120]	; (80240a4 <nk_begin_titled+0x27c>)
 802402c:	21c6      	movs	r1, #198	; 0xc6
 802402e:	481e      	ldr	r0, [pc, #120]	; (80240a8 <nk_begin_titled+0x280>)
 8024030:	f000 fd5e 	bl	8024af0 <__assert_func>
        win->seq = ctx->seq;
 8024034:	69fb      	ldr	r3, [r7, #28]
 8024036:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802403a:	f8d3 2664 	ldr.w	r2, [r3, #1636]	; 0x664
 802403e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024040:	601a      	str	r2, [r3, #0]
        if (!ctx->active && !(win->flags & NK_WINDOW_HIDDEN)) {
 8024042:	69fb      	ldr	r3, [r7, #28]
 8024044:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024048:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 802404c:	2b00      	cmp	r3, #0
 802404e:	d113      	bne.n	8024078 <nk_begin_titled+0x250>
 8024050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024058:	2b00      	cmp	r3, #0
 802405a:	d10d      	bne.n	8024078 <nk_begin_titled+0x250>
            ctx->active = win;
 802405c:	69fb      	ldr	r3, [r7, #28]
 802405e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024062:	461a      	mov	r2, r3
 8024064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024066:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            ctx->end = win;
 802406a:	69fb      	ldr	r3, [r7, #28]
 802406c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024070:	461a      	mov	r2, r3
 8024072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024074:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
        }
    }
    if (win->flags & NK_WINDOW_HIDDEN) {
 8024078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802407c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024080:	2b00      	cmp	r3, #0
 8024082:	d01f      	beq.n	80240c4 <nk_begin_titled+0x29c>
        ctx->current = win;
 8024084:	69fb      	ldr	r3, [r7, #28]
 8024086:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802408a:	461a      	mov	r2, r3
 802408c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802408e:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        win->layout = 0;
 8024092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024094:	2200      	movs	r2, #0
 8024096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        return 0;
 802409a:	2300      	movs	r3, #0
 802409c:	e300      	b.n	80246a0 <nk_begin_titled+0x878>
 802409e:	bf00      	nop
 80240a0:	08029608 	.word	0x08029608
 80240a4:	0802acec 	.word	0x0802acec
 80240a8:	080295ec 	.word	0x080295ec
 80240ac:	0802961c 	.word	0x0802961c
 80240b0:	08029624 	.word	0x08029624
 80240b4:	0802962c 	.word	0x0802962c
 80240b8:	08029688 	.word	0x08029688
 80240bc:	0802960c 	.word	0x0802960c
 80240c0:	080296c8 	.word	0x080296c8
    } else nk_start(ctx, win);
 80240c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80240c6:	69f8      	ldr	r0, [r7, #28]
 80240c8:	f7ec fdba 	bl	8010c40 <nk_start>

    /* window overlapping */
    if (!(win->flags & NK_WINDOW_HIDDEN) && !(win->flags & NK_WINDOW_NO_INPUT))
 80240cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80240d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	f040 82c2 	bne.w	802465e <nk_begin_titled+0x836>
 80240da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80240de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	f040 82bb 	bne.w	802465e <nk_begin_titled+0x836>
    {
        int inpanel, ishovered;
        struct nk_window *iter = win;
 80240e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240ea:	673b      	str	r3, [r7, #112]	; 0x70
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 80240ec:	69fb      	ldr	r3, [r7, #28]
 80240ee:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80240f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80240f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80240f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80240fc:	f603 0344 	addw	r3, r3, #2116	; 0x844
 8024100:	edd3 7a00 	vldr	s15, [r3]
 8024104:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8024108:	ee37 7a27 	vadd.f32	s14, s14, s15
            (2.0f * style->window.header.label_padding.y);
 802410c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024112:	f603 034c 	addw	r3, r3, #2124	; 0x84c
 8024116:	edd3 7a00 	vldr	s15, [r3]
 802411a:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float h = ctx->style.font->height + 2.0f * style->window.header.padding.y +
 802411e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024122:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        struct nk_rect win_bounds = (!(win->flags & NK_WINDOW_MINIMIZED))?
 8024126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802412a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802412e:	2b00      	cmp	r3, #0
 8024130:	d107      	bne.n	8024142 <nk_begin_titled+0x31a>
 8024132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024134:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8024138:	334c      	adds	r3, #76	; 0x4c
 802413a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802413c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8024140:	e022      	b.n	8024188 <nk_begin_titled+0x360>
            win->bounds: nk_rect(win->bounds.x, win->bounds.y, win->bounds.w, h);
 8024142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024144:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8024148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802414a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 802414e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024150:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8024154:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8024158:	eeb0 1a66 	vmov.f32	s2, s13
 802415c:	eef0 0a47 	vmov.f32	s1, s14
 8024160:	eeb0 0a67 	vmov.f32	s0, s15
 8024164:	f7f2 fb6e 	bl	8016844 <nk_rect>
 8024168:	eeb0 6a40 	vmov.f32	s12, s0
 802416c:	eef0 6a60 	vmov.f32	s13, s1
 8024170:	eeb0 7a41 	vmov.f32	s14, s2
 8024174:	eef0 7a61 	vmov.f32	s15, s3
 8024178:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 802417c:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8024180:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8024184:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        /* activate window if hovered and no other window is overlapping this window */
        inpanel = nk_input_has_mouse_click_down_in_rect(&ctx->input, NK_BUTTON_LEFT, win_bounds, nk_true);
 8024188:	69fb      	ldr	r3, [r7, #28]
 802418a:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 802418e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8024192:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8024196:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 802419a:	2201      	movs	r2, #1
 802419c:	eeb0 0a46 	vmov.f32	s0, s12
 80241a0:	eef0 0a66 	vmov.f32	s1, s13
 80241a4:	eeb0 1a47 	vmov.f32	s2, s14
 80241a8:	eef0 1a67 	vmov.f32	s3, s15
 80241ac:	2100      	movs	r1, #0
 80241ae:	4618      	mov	r0, r3
 80241b0:	f7f1 f8d8 	bl	8015364 <nk_input_has_mouse_click_down_in_rect>
 80241b4:	6578      	str	r0, [r7, #84]	; 0x54
        inpanel = inpanel && ctx->input.mouse.buttons[NK_BUTTON_LEFT].clicked;
 80241b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241b8:	2b00      	cmp	r3, #0
 80241ba:	d006      	beq.n	80241ca <nk_begin_titled+0x3a2>
 80241bc:	69fb      	ldr	r3, [r7, #28]
 80241be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	d001      	beq.n	80241ca <nk_begin_titled+0x3a2>
 80241c6:	2301      	movs	r3, #1
 80241c8:	e000      	b.n	80241cc <nk_begin_titled+0x3a4>
 80241ca:	2300      	movs	r3, #0
 80241cc:	657b      	str	r3, [r7, #84]	; 0x54
        ishovered = nk_input_is_mouse_hovering_rect(&ctx->input, win_bounds);
 80241ce:	69fb      	ldr	r3, [r7, #28]
 80241d0:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 80241d4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80241d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80241dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80241e0:	eeb0 0a46 	vmov.f32	s0, s12
 80241e4:	eef0 0a66 	vmov.f32	s1, s13
 80241e8:	eeb0 1a47 	vmov.f32	s2, s14
 80241ec:	eef0 1a67 	vmov.f32	s3, s15
 80241f0:	4618      	mov	r0, r3
 80241f2:	f7f1 f945 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 80241f6:	6538      	str	r0, [r7, #80]	; 0x50
        if ((win != ctx->active) && ishovered && !ctx->input.mouse.buttons[NK_BUTTON_LEFT].down) {
 80241f8:	69fb      	ldr	r3, [r7, #28]
 80241fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80241fe:	f8d3 3654 	ldr.w	r3, [r3, #1620]	; 0x654
 8024202:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8024204:	429a      	cmp	r2, r3
 8024206:	f000 80de 	beq.w	80243c6 <nk_begin_titled+0x59e>
 802420a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802420c:	2b00      	cmp	r3, #0
 802420e:	f000 80da 	beq.w	80243c6 <nk_begin_titled+0x59e>
 8024212:	69fb      	ldr	r3, [r7, #28]
 8024214:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8024218:	2b00      	cmp	r3, #0
 802421a:	f040 80d4 	bne.w	80243c6 <nk_begin_titled+0x59e>
            iter = win->next;
 802421e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024220:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8024224:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 8024226:	e0c6      	b.n	80243b6 <nk_begin_titled+0x58e>
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 8024228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024230:	2b00      	cmp	r3, #0
 8024232:	d107      	bne.n	8024244 <nk_begin_titled+0x41c>
 8024234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024236:	f107 0430 	add.w	r4, r7, #48	; 0x30
 802423a:	334c      	adds	r3, #76	; 0x4c
 802423c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802423e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8024242:	e022      	b.n	802428a <nk_begin_titled+0x462>
                    iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 8024244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024246:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 802424a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802424c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024252:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8024256:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 802425a:	eeb0 1a66 	vmov.f32	s2, s13
 802425e:	eef0 0a47 	vmov.f32	s1, s14
 8024262:	eeb0 0a67 	vmov.f32	s0, s15
 8024266:	f7f2 faed 	bl	8016844 <nk_rect>
 802426a:	eeb0 6a40 	vmov.f32	s12, s0
 802426e:	eef0 6a60 	vmov.f32	s13, s1
 8024272:	eeb0 7a41 	vmov.f32	s14, s2
 8024276:	eef0 7a61 	vmov.f32	s15, s3
 802427a:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 802427e:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8024282:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8024286:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                if (NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 802428a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 802428e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8024292:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8024296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802429a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242a2:	d52c      	bpl.n	80242fe <nk_begin_titled+0x4d6>
 80242a4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80242a8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80242ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80242b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80242b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80242b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242bc:	d51f      	bpl.n	80242fe <nk_begin_titled+0x4d6>
 80242be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80242c2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80242c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80242ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80242ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80242d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242d6:	d512      	bpl.n	80242fe <nk_begin_titled+0x4d6>
 80242d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80242dc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80242e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80242e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80242e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80242ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242f0:	d505      	bpl.n	80242fe <nk_begin_titled+0x4d6>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    (!(iter->flags & NK_WINDOW_HIDDEN)))
 80242f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80242f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80242f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 80242fa:	2b00      	cmp	r3, #0
 80242fc:	d060      	beq.n	80243c0 <nk_begin_titled+0x598>
                    break;

                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80242fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024300:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024304:	2b00      	cmp	r3, #0
 8024306:	d052      	beq.n	80243ae <nk_begin_titled+0x586>
 8024308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802430a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 802430e:	2b00      	cmp	r3, #0
 8024310:	d04d      	beq.n	80243ae <nk_begin_titled+0x586>
 8024312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802431a:	2b00      	cmp	r3, #0
 802431c:	d147      	bne.n	80243ae <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 802431e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024320:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024324:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802432a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 802432e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8024332:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 8024336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802433e:	d536      	bpl.n	80243ae <nk_begin_titled+0x586>
                    NK_INTERSECT(win->bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8024340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024342:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8024346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024348:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802434c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8024350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024352:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024356:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 802435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802435e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024366:	d522      	bpl.n	80243ae <nk_begin_titled+0x586>
 8024368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802436a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802436e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024372:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8024376:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 802437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802437e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024386:	d512      	bpl.n	80243ae <nk_begin_titled+0x586>
 8024388:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 802438c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802438e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024392:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8024396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024398:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802439c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80243a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80243a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80243a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243ac:	d40a      	bmi.n	80243c4 <nk_begin_titled+0x59c>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 80243ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243b0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80243b4:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 80243b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243b8:	2b00      	cmp	r3, #0
 80243ba:	f47f af35 	bne.w	8024228 <nk_begin_titled+0x400>
 80243be:	e002      	b.n	80243c6 <nk_begin_titled+0x59e>
                    break;
 80243c0:	bf00      	nop
 80243c2:	e000      	b.n	80243c6 <nk_begin_titled+0x59e>
                    break;
 80243c4:	bf00      	nop
            }
        }

        /* activate window if clicked */
        if (iter && inpanel && (win != ctx->end)) {
 80243c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	f000 80db 	beq.w	8024584 <nk_begin_titled+0x75c>
 80243ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80243d0:	2b00      	cmp	r3, #0
 80243d2:	f000 80d7 	beq.w	8024584 <nk_begin_titled+0x75c>
 80243d6:	69fb      	ldr	r3, [r7, #28]
 80243d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80243dc:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 80243e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80243e2:	429a      	cmp	r2, r3
 80243e4:	f000 80ce 	beq.w	8024584 <nk_begin_titled+0x75c>
            iter = win->next;
 80243e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80243ea:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80243ee:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 80243f0:	e0c0      	b.n	8024574 <nk_begin_titled+0x74c>
                /* try to find a panel with higher priority in the same position */
                struct nk_rect iter_bounds = (!(iter->flags & NK_WINDOW_MINIMIZED))?
 80243f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80243f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80243f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d107      	bne.n	802440e <nk_begin_titled+0x5e6>
 80243fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024400:	f107 0420 	add.w	r4, r7, #32
 8024404:	334c      	adds	r3, #76	; 0x4c
 8024406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802440c:	e022      	b.n	8024454 <nk_begin_titled+0x62c>
                iter->bounds: nk_rect(iter->bounds.x, iter->bounds.y, iter->bounds.w, h);
 802440e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024410:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8024414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024416:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 802441a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802441c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8024420:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8024424:	eeb0 1a66 	vmov.f32	s2, s13
 8024428:	eef0 0a47 	vmov.f32	s1, s14
 802442c:	eeb0 0a67 	vmov.f32	s0, s15
 8024430:	f7f2 fa08 	bl	8016844 <nk_rect>
 8024434:	eeb0 6a40 	vmov.f32	s12, s0
 8024438:	eef0 6a60 	vmov.f32	s13, s1
 802443c:	eeb0 7a41 	vmov.f32	s14, s2
 8024440:	eef0 7a61 	vmov.f32	s15, s3
 8024444:	ed87 6a08 	vstr	s12, [r7, #32]
 8024448:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 802444c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8024450:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                if (NK_INBOX(ctx->input.mouse.pos.x, ctx->input.mouse.pos.y,
 8024454:	ed97 7a08 	vldr	s14, [r7, #32]
 8024458:	69fb      	ldr	r3, [r7, #28]
 802445a:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 802445e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024466:	d82b      	bhi.n	80244c0 <nk_begin_titled+0x698>
 8024468:	69fb      	ldr	r3, [r7, #28]
 802446a:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 802446e:	edd7 6a08 	vldr	s13, [r7, #32]
 8024472:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8024476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802447a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024482:	d51d      	bpl.n	80244c0 <nk_begin_titled+0x698>
 8024484:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8024488:	69fb      	ldr	r3, [r7, #28]
 802448a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 802448e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024496:	d813      	bhi.n	80244c0 <nk_begin_titled+0x698>
 8024498:	69fb      	ldr	r3, [r7, #28]
 802449a:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 802449e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80244a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80244a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80244aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80244ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244b2:	d505      	bpl.n	80244c0 <nk_begin_titled+0x698>
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
                    !(iter->flags & NK_WINDOW_HIDDEN))
 80244b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80244b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    iter_bounds.x, iter_bounds.y, iter_bounds.w, iter_bounds.h) &&
 80244bc:	2b00      	cmp	r3, #0
 80244be:	d05e      	beq.n	802457e <nk_begin_titled+0x756>
                    break;
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80244c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d050      	beq.n	802456c <nk_begin_titled+0x744>
 80244ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80244d0:	2b00      	cmp	r3, #0
 80244d2:	d04b      	beq.n	802456c <nk_begin_titled+0x744>
 80244d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80244d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80244dc:	2b00      	cmp	r3, #0
 80244de:	d145      	bne.n	802456c <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 80244e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80244e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80244e6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80244ea:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80244ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80244f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                if (iter->popup.win && iter->popup.active && !(iter->flags & NK_WINDOW_HIDDEN) &&
 80244f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80244fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244fe:	d535      	bpl.n	802456c <nk_begin_titled+0x744>
                    NK_INTERSECT(win_bounds.x, win_bounds.y, win_bounds.w, win_bounds.h,
 8024500:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8024504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024506:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802450a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 802450e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024510:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024514:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8024518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802451c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024524:	d522      	bpl.n	802456c <nk_begin_titled+0x744>
 8024526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024528:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802452c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8024530:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8024534:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8024538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802453c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024544:	d512      	bpl.n	802456c <nk_begin_titled+0x744>
 8024546:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 802454a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802454c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8024550:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8024554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024556:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 802455a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 802455e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802456a:	d40a      	bmi.n	8024582 <nk_begin_titled+0x75a>
                    iter->popup.win->bounds.x, iter->popup.win->bounds.y,
                    iter->popup.win->bounds.w, iter->popup.win->bounds.h))
                    break;
                iter = iter->next;
 802456c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802456e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8024572:	673b      	str	r3, [r7, #112]	; 0x70
            while (iter) {
 8024574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024576:	2b00      	cmp	r3, #0
 8024578:	f47f af3b 	bne.w	80243f2 <nk_begin_titled+0x5ca>
 802457c:	e002      	b.n	8024584 <nk_begin_titled+0x75c>
                    break;
 802457e:	bf00      	nop
 8024580:	e000      	b.n	8024584 <nk_begin_titled+0x75c>
                    break;
 8024582:	bf00      	nop
            }
        }
        if (iter && !(win->flags & NK_WINDOW_ROM) && (win->flags & NK_WINDOW_BACKGROUND)) {
 8024584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8024586:	2b00      	cmp	r3, #0
 8024588:	d02e      	beq.n	80245e8 <nk_begin_titled+0x7c0>
 802458a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802458c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802458e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024592:	2b00      	cmp	r3, #0
 8024594:	d128      	bne.n	80245e8 <nk_begin_titled+0x7c0>
 8024596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d022      	beq.n	80245e8 <nk_begin_titled+0x7c0>
            win->flags |= (nk_flags)NK_WINDOW_ROM;
 80245a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80245a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80245a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80245aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80245ac:	649a      	str	r2, [r3, #72]	; 0x48
            iter->flags &= ~(nk_flags)NK_WINDOW_ROM;
 80245ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80245b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80245b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245b8:	649a      	str	r2, [r3, #72]	; 0x48
            ctx->active = iter;
 80245ba:	69fb      	ldr	r3, [r7, #28]
 80245bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80245c0:	461a      	mov	r2, r3
 80245c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245c4:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 80245c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80245cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	d144      	bne.n	802465e <nk_begin_titled+0x836>
                /* current window is active in that position so transfer to top
                 * at the highest priority in stack */
                nk_remove_window(ctx, iter);
 80245d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80245d6:	69f8      	ldr	r0, [r7, #28]
 80245d8:	f7ff fb46 	bl	8023c68 <nk_remove_window>
                nk_insert_window(ctx, iter, NK_INSERT_BACK);
 80245dc:	2200      	movs	r2, #0
 80245de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80245e0:	69f8      	ldr	r0, [r7, #28]
 80245e2:	f7ff fa4b 	bl	8023a7c <nk_insert_window>
            if (!(iter->flags & NK_WINDOW_BACKGROUND)) {
 80245e6:	e03a      	b.n	802465e <nk_begin_titled+0x836>
            }
        } else {
            if (!iter && ctx->end != win) {
 80245e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80245ea:	2b00      	cmp	r3, #0
 80245ec:	d123      	bne.n	8024636 <nk_begin_titled+0x80e>
 80245ee:	69fb      	ldr	r3, [r7, #28]
 80245f0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80245f4:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 80245f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80245fa:	429a      	cmp	r2, r3
 80245fc:	d01b      	beq.n	8024636 <nk_begin_titled+0x80e>
                if (!(win->flags & NK_WINDOW_BACKGROUND)) {
 80245fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024606:	2b00      	cmp	r3, #0
 8024608:	d108      	bne.n	802461c <nk_begin_titled+0x7f4>
                    /* current window is active in that position so transfer to top
                     * at the highest priority in stack */
                    nk_remove_window(ctx, win);
 802460a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 802460c:	69f8      	ldr	r0, [r7, #28]
 802460e:	f7ff fb2b 	bl	8023c68 <nk_remove_window>
                    nk_insert_window(ctx, win, NK_INSERT_BACK);
 8024612:	2200      	movs	r2, #0
 8024614:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8024616:	69f8      	ldr	r0, [r7, #28]
 8024618:	f7ff fa30 	bl	8023a7c <nk_insert_window>
                }
                win->flags &= ~(nk_flags)NK_WINDOW_ROM;
 802461c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8024624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024626:	649a      	str	r2, [r3, #72]	; 0x48
                ctx->active = win;
 8024628:	69fb      	ldr	r3, [r7, #28]
 802462a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802462e:	461a      	mov	r2, r3
 8024630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024632:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
            }
            if (ctx->end != win && !(win->flags & NK_WINDOW_BACKGROUND))
 8024636:	69fb      	ldr	r3, [r7, #28]
 8024638:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802463c:	f8d3 3650 	ldr.w	r3, [r3, #1616]	; 0x650
 8024640:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8024642:	429a      	cmp	r2, r3
 8024644:	d00b      	beq.n	802465e <nk_begin_titled+0x836>
 8024646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802464e:	2b00      	cmp	r3, #0
 8024650:	d105      	bne.n	802465e <nk_begin_titled+0x836>
                win->flags |= NK_WINDOW_ROM;
 8024652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 802465a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802465c:	649a      	str	r2, [r3, #72]	; 0x48
        }
    }
    win->layout = (struct nk_panel*)nk_create_panel(ctx);
 802465e:	69f8      	ldr	r0, [r7, #28]
 8024660:	f7f2 fd06 	bl	8017070 <nk_create_panel>
 8024664:	4602      	mov	r2, r0
 8024666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    ctx->current = win;
 802466c:	69fb      	ldr	r3, [r7, #28]
 802466e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024672:	461a      	mov	r2, r3
 8024674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024676:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
    ret = nk_panel_begin(ctx, title, NK_PANEL_WINDOW);
 802467a:	2201      	movs	r2, #1
 802467c:	6979      	ldr	r1, [r7, #20]
 802467e:	69f8      	ldr	r0, [r7, #28]
 8024680:	f7f2 ff64 	bl	801754c <nk_panel_begin>
 8024684:	66f8      	str	r0, [r7, #108]	; 0x6c
    win->layout->offset_x = &win->scrollbar.x;
 8024686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802468c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802468e:	325c      	adds	r2, #92	; 0x5c
 8024690:	619a      	str	r2, [r3, #24]
    win->layout->offset_y = &win->scrollbar.y;
 8024692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802469a:	3260      	adds	r2, #96	; 0x60
 802469c:	61da      	str	r2, [r3, #28]
    return ret;
 802469e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80246a0:	4618      	mov	r0, r3
 80246a2:	377c      	adds	r7, #124	; 0x7c
 80246a4:	46bd      	mov	sp, r7
 80246a6:	bd90      	pop	{r4, r7, pc}

080246a8 <nk_end>:
NK_API void
nk_end(struct nk_context *ctx)
{
 80246a8:	b580      	push	{r7, lr}
 80246aa:	b084      	sub	sp, #16
 80246ac:	af00      	add	r7, sp, #0
 80246ae:	6078      	str	r0, [r7, #4]
    struct nk_panel *layout;
    NK_ASSERT(ctx);
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	2b00      	cmp	r3, #0
 80246b4:	d106      	bne.n	80246c4 <nk_end+0x1c>
 80246b6:	4b2d      	ldr	r3, [pc, #180]	; (802476c <nk_end+0xc4>)
 80246b8:	4a2d      	ldr	r2, [pc, #180]	; (8024770 <nk_end+0xc8>)
 80246ba:	f240 112b 	movw	r1, #299	; 0x12b
 80246be:	482d      	ldr	r0, [pc, #180]	; (8024774 <nk_end+0xcc>)
 80246c0:	f000 fa16 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current && "if this triggers you forgot to call `nk_begin`");
 80246c4:	687b      	ldr	r3, [r7, #4]
 80246c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80246ca:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	d106      	bne.n	80246e0 <nk_end+0x38>
 80246d2:	4b29      	ldr	r3, [pc, #164]	; (8024778 <nk_end+0xd0>)
 80246d4:	4a26      	ldr	r2, [pc, #152]	; (8024770 <nk_end+0xc8>)
 80246d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80246da:	4826      	ldr	r0, [pc, #152]	; (8024774 <nk_end+0xcc>)
 80246dc:	f000 fa08 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current)
 80246e0:	687b      	ldr	r3, [r7, #4]
 80246e2:	2b00      	cmp	r3, #0
 80246e4:	d03d      	beq.n	8024762 <nk_end+0xba>
 80246e6:	687b      	ldr	r3, [r7, #4]
 80246e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80246ec:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d036      	beq.n	8024762 <nk_end+0xba>
        return;

    layout = ctx->current->layout;
 80246f4:	687b      	ldr	r3, [r7, #4]
 80246f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80246fa:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80246fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024702:	60fb      	str	r3, [r7, #12]
    if (!layout || (layout->type == NK_PANEL_WINDOW && (ctx->current->flags & NK_WINDOW_HIDDEN))) {
 8024704:	68fb      	ldr	r3, [r7, #12]
 8024706:	2b00      	cmp	r3, #0
 8024708:	d00d      	beq.n	8024726 <nk_end+0x7e>
 802470a:	68fb      	ldr	r3, [r7, #12]
 802470c:	781b      	ldrb	r3, [r3, #0]
 802470e:	2b01      	cmp	r3, #1
 8024710:	d111      	bne.n	8024736 <nk_end+0x8e>
 8024712:	687b      	ldr	r3, [r7, #4]
 8024714:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024718:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 802471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024722:	2b00      	cmp	r3, #0
 8024724:	d007      	beq.n	8024736 <nk_end+0x8e>
        ctx->current = 0;
 8024726:	687b      	ldr	r3, [r7, #4]
 8024728:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802472c:	461a      	mov	r2, r3
 802472e:	2300      	movs	r3, #0
 8024730:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
        return;
 8024734:	e016      	b.n	8024764 <nk_end+0xbc>
    }
    nk_panel_end(ctx);
 8024736:	6878      	ldr	r0, [r7, #4]
 8024738:	f7f3 fe4a 	bl	80183d0 <nk_panel_end>
    nk_free_panel(ctx, ctx->current->layout);
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024742:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8024746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802474a:	4619      	mov	r1, r3
 802474c:	6878      	ldr	r0, [r7, #4]
 802474e:	f7f2 fca6 	bl	801709e <nk_free_panel>
    ctx->current = 0;
 8024752:	687b      	ldr	r3, [r7, #4]
 8024754:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024758:	461a      	mov	r2, r3
 802475a:	2300      	movs	r3, #0
 802475c:	f8c2 3658 	str.w	r3, [r2, #1624]	; 0x658
 8024760:	e000      	b.n	8024764 <nk_end+0xbc>
        return;
 8024762:	bf00      	nop
}
 8024764:	3710      	adds	r7, #16
 8024766:	46bd      	mov	sp, r7
 8024768:	bd80      	pop	{r7, pc}
 802476a:	bf00      	nop
 802476c:	08029608 	.word	0x08029608
 8024770:	0802acfc 	.word	0x0802acfc
 8024774:	080295ec 	.word	0x080295ec
 8024778:	080296e0 	.word	0x080296e0

0802477c <nk_window_is_hovered>:
    if (!ctx || !ctx->current) return 0;
    return ctx->current == ctx->active;
}
NK_API nk_bool
nk_window_is_hovered(struct nk_context *ctx)
{
 802477c:	b590      	push	{r4, r7, lr}
 802477e:	b087      	sub	sp, #28
 8024780:	af00      	add	r7, sp, #0
 8024782:	6078      	str	r0, [r7, #4]
    NK_ASSERT(ctx);
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	2b00      	cmp	r3, #0
 8024788:	d106      	bne.n	8024798 <nk_window_is_hovered+0x1c>
 802478a:	4b31      	ldr	r3, [pc, #196]	; (8024850 <nk_window_is_hovered+0xd4>)
 802478c:	4a31      	ldr	r2, [pc, #196]	; (8024854 <nk_window_is_hovered+0xd8>)
 802478e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8024792:	4831      	ldr	r0, [pc, #196]	; (8024858 <nk_window_is_hovered+0xdc>)
 8024794:	f000 f9ac 	bl	8024af0 <__assert_func>
    NK_ASSERT(ctx->current);
 8024798:	687b      	ldr	r3, [r7, #4]
 802479a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802479e:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	d106      	bne.n	80247b4 <nk_window_is_hovered+0x38>
 80247a6:	4b2d      	ldr	r3, [pc, #180]	; (802485c <nk_window_is_hovered+0xe0>)
 80247a8:	4a2a      	ldr	r2, [pc, #168]	; (8024854 <nk_window_is_hovered+0xd8>)
 80247aa:	f240 11b1 	movw	r1, #433	; 0x1b1
 80247ae:	482a      	ldr	r0, [pc, #168]	; (8024858 <nk_window_is_hovered+0xdc>)
 80247b0:	f000 f99e 	bl	8024af0 <__assert_func>
    if (!ctx || !ctx->current || (ctx->current->flags & NK_WINDOW_HIDDEN))
 80247b4:	687b      	ldr	r3, [r7, #4]
 80247b6:	2b00      	cmp	r3, #0
 80247b8:	d010      	beq.n	80247dc <nk_window_is_hovered+0x60>
 80247ba:	687b      	ldr	r3, [r7, #4]
 80247bc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247c0:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247c4:	2b00      	cmp	r3, #0
 80247c6:	d009      	beq.n	80247dc <nk_window_is_hovered+0x60>
 80247c8:	687b      	ldr	r3, [r7, #4]
 80247ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247ce:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80247d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80247d8:	2b00      	cmp	r3, #0
 80247da:	d001      	beq.n	80247e0 <nk_window_is_hovered+0x64>
        return 0;
 80247dc:	2300      	movs	r3, #0
 80247de:	e032      	b.n	8024846 <nk_window_is_hovered+0xca>
    else {
        struct nk_rect actual_bounds = ctx->current->bounds;
 80247e0:	687b      	ldr	r3, [r7, #4]
 80247e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247e6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 80247ea:	f107 0408 	add.w	r4, r7, #8
 80247ee:	334c      	adds	r3, #76	; 0x4c
 80247f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80247f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (ctx->begin->flags & NK_WINDOW_MINIMIZED) {
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80247fc:	f8d3 364c 	ldr.w	r3, [r3, #1612]	; 0x64c
 8024800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024806:	2b00      	cmp	r3, #0
 8024808:	d008      	beq.n	802481c <nk_window_is_hovered+0xa0>
            actual_bounds.h = ctx->current->layout->header_height;
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024810:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 8024814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8024818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802481a:	617b      	str	r3, [r7, #20]
        }
        return nk_input_is_mouse_hovering_rect(&ctx->input, actual_bounds);
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	ed97 6a02 	vldr	s12, [r7, #8]
 8024822:	edd7 6a03 	vldr	s13, [r7, #12]
 8024826:	ed97 7a04 	vldr	s14, [r7, #16]
 802482a:	edd7 7a05 	vldr	s15, [r7, #20]
 802482e:	eeb0 0a46 	vmov.f32	s0, s12
 8024832:	eef0 0a66 	vmov.f32	s1, s13
 8024836:	eeb0 1a47 	vmov.f32	s2, s14
 802483a:	eef0 1a67 	vmov.f32	s3, s15
 802483e:	4618      	mov	r0, r3
 8024840:	f7f0 fe1e 	bl	8015480 <nk_input_is_mouse_hovering_rect>
 8024844:	4603      	mov	r3, r0
    }
}
 8024846:	4618      	mov	r0, r3
 8024848:	371c      	adds	r7, #28
 802484a:	46bd      	mov	sp, r7
 802484c:	bd90      	pop	{r4, r7, pc}
 802484e:	bf00      	nop
 8024850:	08029608 	.word	0x08029608
 8024854:	0802ad04 	.word	0x0802ad04
 8024858:	080295ec 	.word	0x080295ec
 802485c:	08029724 	.word	0x08029724

08024860 <nk_window_is_collapsed>:
    int any_active = (ctx->last_widget_state & NK_WIDGET_STATE_MODIFIED);
    return any_hovered || any_active;
}
NK_API nk_bool
nk_window_is_collapsed(struct nk_context *ctx, const char *name)
{
 8024860:	b580      	push	{r7, lr}
 8024862:	b086      	sub	sp, #24
 8024864:	af00      	add	r7, sp, #0
 8024866:	6078      	str	r0, [r7, #4]
 8024868:	6039      	str	r1, [r7, #0]
    int title_len;
    nk_hash title_hash;
    struct nk_window *win;
    NK_ASSERT(ctx);
 802486a:	687b      	ldr	r3, [r7, #4]
 802486c:	2b00      	cmp	r3, #0
 802486e:	d106      	bne.n	802487e <nk_window_is_collapsed+0x1e>
 8024870:	4b14      	ldr	r3, [pc, #80]	; (80248c4 <nk_window_is_collapsed+0x64>)
 8024872:	4a15      	ldr	r2, [pc, #84]	; (80248c8 <nk_window_is_collapsed+0x68>)
 8024874:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8024878:	4814      	ldr	r0, [pc, #80]	; (80248cc <nk_window_is_collapsed+0x6c>)
 802487a:	f000 f939 	bl	8024af0 <__assert_func>
    if (!ctx) return 0;
 802487e:	687b      	ldr	r3, [r7, #4]
 8024880:	2b00      	cmp	r3, #0
 8024882:	d101      	bne.n	8024888 <nk_window_is_collapsed+0x28>
 8024884:	2300      	movs	r3, #0
 8024886:	e018      	b.n	80248ba <nk_window_is_collapsed+0x5a>

    title_len = (int)nk_strlen(name);
 8024888:	6838      	ldr	r0, [r7, #0]
 802488a:	f7fd ff25 	bl	80226d8 <nk_strlen>
 802488e:	6178      	str	r0, [r7, #20]
    title_hash = nk_murmur_hash(name, (int)title_len, NK_WINDOW_TITLE);
 8024890:	2240      	movs	r2, #64	; 0x40
 8024892:	6979      	ldr	r1, [r7, #20]
 8024894:	6838      	ldr	r0, [r7, #0]
 8024896:	f7fe fb97 	bl	8022fc8 <nk_murmur_hash>
 802489a:	6138      	str	r0, [r7, #16]
    win = nk_find_window(ctx, title_hash, name);
 802489c:	683a      	ldr	r2, [r7, #0]
 802489e:	6939      	ldr	r1, [r7, #16]
 80248a0:	6878      	ldr	r0, [r7, #4]
 80248a2:	f7ff f8a9 	bl	80239f8 <nk_find_window>
 80248a6:	60f8      	str	r0, [r7, #12]
    if (!win) return 0;
 80248a8:	68fb      	ldr	r3, [r7, #12]
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d101      	bne.n	80248b2 <nk_window_is_collapsed+0x52>
 80248ae:	2300      	movs	r3, #0
 80248b0:	e003      	b.n	80248ba <nk_window_is_collapsed+0x5a>
    return win->flags & NK_WINDOW_MINIMIZED;
 80248b2:	68fb      	ldr	r3, [r7, #12]
 80248b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80248b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
}
 80248ba:	4618      	mov	r0, r3
 80248bc:	3718      	adds	r7, #24
 80248be:	46bd      	mov	sp, r7
 80248c0:	bd80      	pop	{r7, pc}
 80248c2:	bf00      	nop
 80248c4:	08029608 	.word	0x08029608
 80248c8:	0802ad1c 	.word	0x0802ad1c
 80248cc:	080295ec 	.word	0x080295ec

080248d0 <tsc2046_init>:
#include <stdint.h>
#include "tsc2046.h"


void tsc2046_init(tTsc2046* tsc, SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin, float ax, float bx, float ay, float by, int avg )
{
 80248d0:	b580      	push	{r7, lr}
 80248d2:	b088      	sub	sp, #32
 80248d4:	af00      	add	r7, sp, #0
 80248d6:	61f8      	str	r0, [r7, #28]
 80248d8:	61b9      	str	r1, [r7, #24]
 80248da:	617a      	str	r2, [r7, #20]
 80248dc:	ed87 0a03 	vstr	s0, [r7, #12]
 80248e0:	edc7 0a02 	vstr	s1, [r7, #8]
 80248e4:	ed87 1a01 	vstr	s2, [r7, #4]
 80248e8:	edc7 1a00 	vstr	s3, [r7]
 80248ec:	827b      	strh	r3, [r7, #18]
	tsc->spi = spi;
 80248ee:	69fb      	ldr	r3, [r7, #28]
 80248f0:	69ba      	ldr	r2, [r7, #24]
 80248f2:	601a      	str	r2, [r3, #0]
	tsc->cs_port = cs_port;
 80248f4:	69fb      	ldr	r3, [r7, #28]
 80248f6:	697a      	ldr	r2, [r7, #20]
 80248f8:	605a      	str	r2, [r3, #4]
	tsc->cs_pin = cs_pin;
 80248fa:	69fb      	ldr	r3, [r7, #28]
 80248fc:	8a7a      	ldrh	r2, [r7, #18]
 80248fe:	811a      	strh	r2, [r3, #8]
	tsc->ax = ax;
 8024900:	69fb      	ldr	r3, [r7, #28]
 8024902:	68fa      	ldr	r2, [r7, #12]
 8024904:	60da      	str	r2, [r3, #12]
	tsc->bx = bx;
 8024906:	69fb      	ldr	r3, [r7, #28]
 8024908:	68ba      	ldr	r2, [r7, #8]
 802490a:	611a      	str	r2, [r3, #16]
	tsc->ay = ay;
 802490c:	69fb      	ldr	r3, [r7, #28]
 802490e:	687a      	ldr	r2, [r7, #4]
 8024910:	615a      	str	r2, [r3, #20]
	tsc->by = by;
 8024912:	69fb      	ldr	r3, [r7, #28]
 8024914:	683a      	ldr	r2, [r7, #0]
 8024916:	619a      	str	r2, [r3, #24]
	tsc->avg = avg;
 8024918:	69fb      	ldr	r3, [r7, #28]
 802491a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802491c:	61da      	str	r2, [r3, #28]
    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 802491e:	69fb      	ldr	r3, [r7, #28]
 8024920:	6858      	ldr	r0, [r3, #4]
 8024922:	69fb      	ldr	r3, [r7, #28]
 8024924:	891b      	ldrh	r3, [r3, #8]
 8024926:	2201      	movs	r2, #1
 8024928:	4619      	mov	r1, r3
 802492a:	f7e5 fdff 	bl	800a52c <HAL_GPIO_WritePin>
}
 802492e:	bf00      	nop
 8024930:	3720      	adds	r7, #32
 8024932:	46bd      	mov	sp, r7
 8024934:	bd80      	pop	{r7, pc}
	...

08024938 <tsc2046_read_ll>:

void tsc2046_read_ll( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 8024938:	b580      	push	{r7, lr}
 802493a:	b088      	sub	sp, #32
 802493c:	af02      	add	r7, sp, #8
 802493e:	60f8      	str	r0, [r7, #12]
 8024940:	60b9      	str	r1, [r7, #8]
 8024942:	607a      	str	r2, [r7, #4]
	uint8_t buf_tx[3] = {0};
 8024944:	4b2d      	ldr	r3, [pc, #180]	; (80249fc <tsc2046_read_ll+0xc4>)
 8024946:	881b      	ldrh	r3, [r3, #0]
 8024948:	82bb      	strh	r3, [r7, #20]
 802494a:	2300      	movs	r3, #0
 802494c:	75bb      	strb	r3, [r7, #22]
	uint8_t buf_rx[3] = {0};
 802494e:	4b2b      	ldr	r3, [pc, #172]	; (80249fc <tsc2046_read_ll+0xc4>)
 8024950:	881b      	ldrh	r3, [r3, #0]
 8024952:	823b      	strh	r3, [r7, #16]
 8024954:	2300      	movs	r3, #0
 8024956:	74bb      	strb	r3, [r7, #18]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_RESET);
 8024958:	68fb      	ldr	r3, [r7, #12]
 802495a:	6858      	ldr	r0, [r3, #4]
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	891b      	ldrh	r3, [r3, #8]
 8024960:	2200      	movs	r2, #0
 8024962:	4619      	mov	r1, r3
 8024964:	f7e5 fde2 	bl	800a52c <HAL_GPIO_WritePin>

    buf_tx[0] = TSC2046_CHANNEL_X;
 8024968:	2390      	movs	r3, #144	; 0x90
 802496a:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 802496c:	68fb      	ldr	r3, [r7, #12]
 802496e:	6818      	ldr	r0, [r3, #0]
 8024970:	f107 0210 	add.w	r2, r7, #16
 8024974:	f107 0114 	add.w	r1, r7, #20
 8024978:	f04f 33ff 	mov.w	r3, #4294967295
 802497c:	9300      	str	r3, [sp, #0]
 802497e:	2303      	movs	r3, #3
 8024980:	f7e7 fa7d 	bl	800be7e <HAL_SPI_TransmitReceive>
    *x = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 8024984:	7c7b      	ldrb	r3, [r7, #17]
 8024986:	011b      	lsls	r3, r3, #4
 8024988:	b21a      	sxth	r2, r3
 802498a:	7cbb      	ldrb	r3, [r7, #18]
 802498c:	091b      	lsrs	r3, r3, #4
 802498e:	b2db      	uxtb	r3, r3
 8024990:	b21b      	sxth	r3, r3
 8024992:	4313      	orrs	r3, r2
 8024994:	b21b      	sxth	r3, r3
 8024996:	b29a      	uxth	r2, r3
 8024998:	68bb      	ldr	r3, [r7, #8]
 802499a:	801a      	strh	r2, [r3, #0]

    buf_tx[0] = TSC2046_CHANNEL_Y;
 802499c:	23d0      	movs	r3, #208	; 0xd0
 802499e:	753b      	strb	r3, [r7, #20]
    HAL_SPI_TransmitReceive(tsc->spi, buf_tx, buf_rx, 3, HAL_MAX_DELAY);
 80249a0:	68fb      	ldr	r3, [r7, #12]
 80249a2:	6818      	ldr	r0, [r3, #0]
 80249a4:	f107 0210 	add.w	r2, r7, #16
 80249a8:	f107 0114 	add.w	r1, r7, #20
 80249ac:	f04f 33ff 	mov.w	r3, #4294967295
 80249b0:	9300      	str	r3, [sp, #0]
 80249b2:	2303      	movs	r3, #3
 80249b4:	f7e7 fa63 	bl	800be7e <HAL_SPI_TransmitReceive>
    *y = (buf_rx[1] << 4) | (buf_rx[2] >> 4);
 80249b8:	7c7b      	ldrb	r3, [r7, #17]
 80249ba:	011b      	lsls	r3, r3, #4
 80249bc:	b21a      	sxth	r2, r3
 80249be:	7cbb      	ldrb	r3, [r7, #18]
 80249c0:	091b      	lsrs	r3, r3, #4
 80249c2:	b2db      	uxtb	r3, r3
 80249c4:	b21b      	sxth	r3, r3
 80249c6:	4313      	orrs	r3, r2
 80249c8:	b21b      	sxth	r3, r3
 80249ca:	b29a      	uxth	r2, r3
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(tsc->cs_port, tsc->cs_pin, GPIO_PIN_SET);
 80249d0:	68fb      	ldr	r3, [r7, #12]
 80249d2:	6858      	ldr	r0, [r3, #4]
 80249d4:	68fb      	ldr	r3, [r7, #12]
 80249d6:	891b      	ldrh	r3, [r3, #8]
 80249d8:	2201      	movs	r2, #1
 80249da:	4619      	mov	r1, r3
 80249dc:	f7e5 fda6 	bl	800a52c <HAL_GPIO_WritePin>

    if (*x == 2047) {
 80249e0:	68bb      	ldr	r3, [r7, #8]
 80249e2:	881b      	ldrh	r3, [r3, #0]
 80249e4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80249e8:	4293      	cmp	r3, r2
 80249ea:	d102      	bne.n	80249f2 <tsc2046_read_ll+0xba>
        *x = 0;
 80249ec:	68bb      	ldr	r3, [r7, #8]
 80249ee:	2200      	movs	r2, #0
 80249f0:	801a      	strh	r2, [r3, #0]
    }
}
 80249f2:	bf00      	nop
 80249f4:	3718      	adds	r7, #24
 80249f6:	46bd      	mov	sp, r7
 80249f8:	bd80      	pop	{r7, pc}
 80249fa:	bf00      	nop
 80249fc:	080297dc 	.word	0x080297dc

08024a00 <tsc2046_read>:

void tsc2046_read( tTsc2046* tsc, uint16_t* x, uint16_t* y) {
 8024a00:	b580      	push	{r7, lr}
 8024a02:	b088      	sub	sp, #32
 8024a04:	af00      	add	r7, sp, #0
 8024a06:	60f8      	str	r0, [r7, #12]
 8024a08:	60b9      	str	r1, [r7, #8]
 8024a0a:	607a      	str	r2, [r7, #4]
    int32_t x_acc = 0;
 8024a0c:	2300      	movs	r3, #0
 8024a0e:	61fb      	str	r3, [r7, #28]
    int32_t y_acc = 0;
 8024a10:	2300      	movs	r3, #0
 8024a12:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < tsc->avg; i++) {
 8024a14:	2300      	movs	r3, #0
 8024a16:	617b      	str	r3, [r7, #20]
 8024a18:	e023      	b.n	8024a62 <tsc2046_read+0x62>
    	tsc2046_read_ll(tsc, x, y);
 8024a1a:	687a      	ldr	r2, [r7, #4]
 8024a1c:	68b9      	ldr	r1, [r7, #8]
 8024a1e:	68f8      	ldr	r0, [r7, #12]
 8024a20:	f7ff ff8a 	bl	8024938 <tsc2046_read_ll>
        if (*x && *y) {
 8024a24:	68bb      	ldr	r3, [r7, #8]
 8024a26:	881b      	ldrh	r3, [r3, #0]
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	d013      	beq.n	8024a54 <tsc2046_read+0x54>
 8024a2c:	687b      	ldr	r3, [r7, #4]
 8024a2e:	881b      	ldrh	r3, [r3, #0]
 8024a30:	2b00      	cmp	r3, #0
 8024a32:	d00f      	beq.n	8024a54 <tsc2046_read+0x54>
            x_acc += *x;
 8024a34:	68bb      	ldr	r3, [r7, #8]
 8024a36:	881b      	ldrh	r3, [r3, #0]
 8024a38:	461a      	mov	r2, r3
 8024a3a:	69fb      	ldr	r3, [r7, #28]
 8024a3c:	4413      	add	r3, r2
 8024a3e:	61fb      	str	r3, [r7, #28]
            y_acc += *y;
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	881b      	ldrh	r3, [r3, #0]
 8024a44:	461a      	mov	r2, r3
 8024a46:	69bb      	ldr	r3, [r7, #24]
 8024a48:	4413      	add	r3, r2
 8024a4a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < tsc->avg; i++) {
 8024a4c:	697b      	ldr	r3, [r7, #20]
 8024a4e:	3301      	adds	r3, #1
 8024a50:	617b      	str	r3, [r7, #20]
 8024a52:	e006      	b.n	8024a62 <tsc2046_read+0x62>
        } else {
            *x = 0;
 8024a54:	68bb      	ldr	r3, [r7, #8]
 8024a56:	2200      	movs	r2, #0
 8024a58:	801a      	strh	r2, [r3, #0]
            *y = 0;
 8024a5a:	687b      	ldr	r3, [r7, #4]
 8024a5c:	2200      	movs	r2, #0
 8024a5e:	801a      	strh	r2, [r3, #0]
            return;
 8024a60:	e042      	b.n	8024ae8 <tsc2046_read+0xe8>
    for (int i = 0; i < tsc->avg; i++) {
 8024a62:	68fb      	ldr	r3, [r7, #12]
 8024a64:	69db      	ldr	r3, [r3, #28]
 8024a66:	697a      	ldr	r2, [r7, #20]
 8024a68:	429a      	cmp	r2, r3
 8024a6a:	dbd6      	blt.n	8024a1a <tsc2046_read+0x1a>
        }
        //HAL_Delay(1);
    }
    *x = x_acc / tsc->avg;
 8024a6c:	68fb      	ldr	r3, [r7, #12]
 8024a6e:	69db      	ldr	r3, [r3, #28]
 8024a70:	69fa      	ldr	r2, [r7, #28]
 8024a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a76:	b29a      	uxth	r2, r3
 8024a78:	68bb      	ldr	r3, [r7, #8]
 8024a7a:	801a      	strh	r2, [r3, #0]
    *y = y_acc / tsc->avg;
 8024a7c:	68fb      	ldr	r3, [r7, #12]
 8024a7e:	69db      	ldr	r3, [r3, #28]
 8024a80:	69ba      	ldr	r2, [r7, #24]
 8024a82:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a86:	b29a      	uxth	r2, r3
 8024a88:	687b      	ldr	r3, [r7, #4]
 8024a8a:	801a      	strh	r2, [r3, #0]
    *x = tsc->ax * *x + tsc->bx;
 8024a8c:	68fb      	ldr	r3, [r7, #12]
 8024a8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8024a92:	68bb      	ldr	r3, [r7, #8]
 8024a94:	881b      	ldrh	r3, [r3, #0]
 8024a96:	ee07 3a90 	vmov	s15, r3
 8024a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024aa2:	68fb      	ldr	r3, [r7, #12]
 8024aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8024aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024ab0:	ee17 3a90 	vmov	r3, s15
 8024ab4:	b29a      	uxth	r2, r3
 8024ab6:	68bb      	ldr	r3, [r7, #8]
 8024ab8:	801a      	strh	r2, [r3, #0]
    *y = tsc->ay * *y + tsc->by;
 8024aba:	68fb      	ldr	r3, [r7, #12]
 8024abc:	ed93 7a05 	vldr	s14, [r3, #20]
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	881b      	ldrh	r3, [r3, #0]
 8024ac4:	ee07 3a90 	vmov	s15, r3
 8024ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024acc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024ad0:	68fb      	ldr	r3, [r7, #12]
 8024ad2:	edd3 7a06 	vldr	s15, [r3, #24]
 8024ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024ade:	ee17 3a90 	vmov	r3, s15
 8024ae2:	b29a      	uxth	r2, r3
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	801a      	strh	r2, [r3, #0]
}
 8024ae8:	3720      	adds	r7, #32
 8024aea:	46bd      	mov	sp, r7
 8024aec:	bd80      	pop	{r7, pc}
	...

08024af0 <__assert_func>:
 8024af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024af2:	4614      	mov	r4, r2
 8024af4:	461a      	mov	r2, r3
 8024af6:	4b09      	ldr	r3, [pc, #36]	; (8024b1c <__assert_func+0x2c>)
 8024af8:	681b      	ldr	r3, [r3, #0]
 8024afa:	4605      	mov	r5, r0
 8024afc:	68d8      	ldr	r0, [r3, #12]
 8024afe:	b14c      	cbz	r4, 8024b14 <__assert_func+0x24>
 8024b00:	4b07      	ldr	r3, [pc, #28]	; (8024b20 <__assert_func+0x30>)
 8024b02:	9100      	str	r1, [sp, #0]
 8024b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024b08:	4906      	ldr	r1, [pc, #24]	; (8024b24 <__assert_func+0x34>)
 8024b0a:	462b      	mov	r3, r5
 8024b0c:	f000 fd06 	bl	802551c <fiprintf>
 8024b10:	f000 fe24 	bl	802575c <abort>
 8024b14:	4b04      	ldr	r3, [pc, #16]	; (8024b28 <__assert_func+0x38>)
 8024b16:	461c      	mov	r4, r3
 8024b18:	e7f3      	b.n	8024b02 <__assert_func+0x12>
 8024b1a:	bf00      	nop
 8024b1c:	200001f8 	.word	0x200001f8
 8024b20:	0802ad33 	.word	0x0802ad33
 8024b24:	0802ad40 	.word	0x0802ad40
 8024b28:	0802ad6e 	.word	0x0802ad6e

08024b2c <__cvt>:
 8024b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024b30:	ec55 4b10 	vmov	r4, r5, d0
 8024b34:	2d00      	cmp	r5, #0
 8024b36:	460e      	mov	r6, r1
 8024b38:	4619      	mov	r1, r3
 8024b3a:	462b      	mov	r3, r5
 8024b3c:	bfbb      	ittet	lt
 8024b3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024b42:	461d      	movlt	r5, r3
 8024b44:	2300      	movge	r3, #0
 8024b46:	232d      	movlt	r3, #45	; 0x2d
 8024b48:	700b      	strb	r3, [r1, #0]
 8024b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024b4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024b50:	4691      	mov	r9, r2
 8024b52:	f023 0820 	bic.w	r8, r3, #32
 8024b56:	bfbc      	itt	lt
 8024b58:	4622      	movlt	r2, r4
 8024b5a:	4614      	movlt	r4, r2
 8024b5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024b60:	d005      	beq.n	8024b6e <__cvt+0x42>
 8024b62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024b66:	d100      	bne.n	8024b6a <__cvt+0x3e>
 8024b68:	3601      	adds	r6, #1
 8024b6a:	2102      	movs	r1, #2
 8024b6c:	e000      	b.n	8024b70 <__cvt+0x44>
 8024b6e:	2103      	movs	r1, #3
 8024b70:	ab03      	add	r3, sp, #12
 8024b72:	9301      	str	r3, [sp, #4]
 8024b74:	ab02      	add	r3, sp, #8
 8024b76:	9300      	str	r3, [sp, #0]
 8024b78:	ec45 4b10 	vmov	d0, r4, r5
 8024b7c:	4653      	mov	r3, sl
 8024b7e:	4632      	mov	r2, r6
 8024b80:	f000 fe7e 	bl	8025880 <_dtoa_r>
 8024b84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024b88:	4607      	mov	r7, r0
 8024b8a:	d102      	bne.n	8024b92 <__cvt+0x66>
 8024b8c:	f019 0f01 	tst.w	r9, #1
 8024b90:	d022      	beq.n	8024bd8 <__cvt+0xac>
 8024b92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024b96:	eb07 0906 	add.w	r9, r7, r6
 8024b9a:	d110      	bne.n	8024bbe <__cvt+0x92>
 8024b9c:	783b      	ldrb	r3, [r7, #0]
 8024b9e:	2b30      	cmp	r3, #48	; 0x30
 8024ba0:	d10a      	bne.n	8024bb8 <__cvt+0x8c>
 8024ba2:	2200      	movs	r2, #0
 8024ba4:	2300      	movs	r3, #0
 8024ba6:	4620      	mov	r0, r4
 8024ba8:	4629      	mov	r1, r5
 8024baa:	f7db ffb5 	bl	8000b18 <__aeabi_dcmpeq>
 8024bae:	b918      	cbnz	r0, 8024bb8 <__cvt+0x8c>
 8024bb0:	f1c6 0601 	rsb	r6, r6, #1
 8024bb4:	f8ca 6000 	str.w	r6, [sl]
 8024bb8:	f8da 3000 	ldr.w	r3, [sl]
 8024bbc:	4499      	add	r9, r3
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	2300      	movs	r3, #0
 8024bc2:	4620      	mov	r0, r4
 8024bc4:	4629      	mov	r1, r5
 8024bc6:	f7db ffa7 	bl	8000b18 <__aeabi_dcmpeq>
 8024bca:	b108      	cbz	r0, 8024bd0 <__cvt+0xa4>
 8024bcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8024bd0:	2230      	movs	r2, #48	; 0x30
 8024bd2:	9b03      	ldr	r3, [sp, #12]
 8024bd4:	454b      	cmp	r3, r9
 8024bd6:	d307      	bcc.n	8024be8 <__cvt+0xbc>
 8024bd8:	9b03      	ldr	r3, [sp, #12]
 8024bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024bdc:	1bdb      	subs	r3, r3, r7
 8024bde:	4638      	mov	r0, r7
 8024be0:	6013      	str	r3, [r2, #0]
 8024be2:	b004      	add	sp, #16
 8024be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024be8:	1c59      	adds	r1, r3, #1
 8024bea:	9103      	str	r1, [sp, #12]
 8024bec:	701a      	strb	r2, [r3, #0]
 8024bee:	e7f0      	b.n	8024bd2 <__cvt+0xa6>

08024bf0 <__exponent>:
 8024bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024bf2:	4603      	mov	r3, r0
 8024bf4:	2900      	cmp	r1, #0
 8024bf6:	bfb8      	it	lt
 8024bf8:	4249      	neglt	r1, r1
 8024bfa:	f803 2b02 	strb.w	r2, [r3], #2
 8024bfe:	bfb4      	ite	lt
 8024c00:	222d      	movlt	r2, #45	; 0x2d
 8024c02:	222b      	movge	r2, #43	; 0x2b
 8024c04:	2909      	cmp	r1, #9
 8024c06:	7042      	strb	r2, [r0, #1]
 8024c08:	dd2a      	ble.n	8024c60 <__exponent+0x70>
 8024c0a:	f10d 0207 	add.w	r2, sp, #7
 8024c0e:	4617      	mov	r7, r2
 8024c10:	260a      	movs	r6, #10
 8024c12:	4694      	mov	ip, r2
 8024c14:	fb91 f5f6 	sdiv	r5, r1, r6
 8024c18:	fb06 1415 	mls	r4, r6, r5, r1
 8024c1c:	3430      	adds	r4, #48	; 0x30
 8024c1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8024c22:	460c      	mov	r4, r1
 8024c24:	2c63      	cmp	r4, #99	; 0x63
 8024c26:	f102 32ff 	add.w	r2, r2, #4294967295
 8024c2a:	4629      	mov	r1, r5
 8024c2c:	dcf1      	bgt.n	8024c12 <__exponent+0x22>
 8024c2e:	3130      	adds	r1, #48	; 0x30
 8024c30:	f1ac 0402 	sub.w	r4, ip, #2
 8024c34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8024c38:	1c41      	adds	r1, r0, #1
 8024c3a:	4622      	mov	r2, r4
 8024c3c:	42ba      	cmp	r2, r7
 8024c3e:	d30a      	bcc.n	8024c56 <__exponent+0x66>
 8024c40:	f10d 0209 	add.w	r2, sp, #9
 8024c44:	eba2 020c 	sub.w	r2, r2, ip
 8024c48:	42bc      	cmp	r4, r7
 8024c4a:	bf88      	it	hi
 8024c4c:	2200      	movhi	r2, #0
 8024c4e:	4413      	add	r3, r2
 8024c50:	1a18      	subs	r0, r3, r0
 8024c52:	b003      	add	sp, #12
 8024c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024c5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8024c5e:	e7ed      	b.n	8024c3c <__exponent+0x4c>
 8024c60:	2330      	movs	r3, #48	; 0x30
 8024c62:	3130      	adds	r1, #48	; 0x30
 8024c64:	7083      	strb	r3, [r0, #2]
 8024c66:	70c1      	strb	r1, [r0, #3]
 8024c68:	1d03      	adds	r3, r0, #4
 8024c6a:	e7f1      	b.n	8024c50 <__exponent+0x60>

08024c6c <_printf_float>:
 8024c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c70:	ed2d 8b02 	vpush	{d8}
 8024c74:	b08d      	sub	sp, #52	; 0x34
 8024c76:	460c      	mov	r4, r1
 8024c78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8024c7c:	4616      	mov	r6, r2
 8024c7e:	461f      	mov	r7, r3
 8024c80:	4605      	mov	r5, r0
 8024c82:	f000 fce7 	bl	8025654 <_localeconv_r>
 8024c86:	f8d0 a000 	ldr.w	sl, [r0]
 8024c8a:	4650      	mov	r0, sl
 8024c8c:	f7db fb18 	bl	80002c0 <strlen>
 8024c90:	2300      	movs	r3, #0
 8024c92:	930a      	str	r3, [sp, #40]	; 0x28
 8024c94:	6823      	ldr	r3, [r4, #0]
 8024c96:	9305      	str	r3, [sp, #20]
 8024c98:	f8d8 3000 	ldr.w	r3, [r8]
 8024c9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8024ca0:	3307      	adds	r3, #7
 8024ca2:	f023 0307 	bic.w	r3, r3, #7
 8024ca6:	f103 0208 	add.w	r2, r3, #8
 8024caa:	f8c8 2000 	str.w	r2, [r8]
 8024cae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024cb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8024cb6:	9307      	str	r3, [sp, #28]
 8024cb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8024cbc:	ee08 0a10 	vmov	s16, r0
 8024cc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8024cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024cc8:	4b9e      	ldr	r3, [pc, #632]	; (8024f44 <_printf_float+0x2d8>)
 8024cca:	f04f 32ff 	mov.w	r2, #4294967295
 8024cce:	f7db ff55 	bl	8000b7c <__aeabi_dcmpun>
 8024cd2:	bb88      	cbnz	r0, 8024d38 <_printf_float+0xcc>
 8024cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024cd8:	4b9a      	ldr	r3, [pc, #616]	; (8024f44 <_printf_float+0x2d8>)
 8024cda:	f04f 32ff 	mov.w	r2, #4294967295
 8024cde:	f7db ff2f 	bl	8000b40 <__aeabi_dcmple>
 8024ce2:	bb48      	cbnz	r0, 8024d38 <_printf_float+0xcc>
 8024ce4:	2200      	movs	r2, #0
 8024ce6:	2300      	movs	r3, #0
 8024ce8:	4640      	mov	r0, r8
 8024cea:	4649      	mov	r1, r9
 8024cec:	f7db ff1e 	bl	8000b2c <__aeabi_dcmplt>
 8024cf0:	b110      	cbz	r0, 8024cf8 <_printf_float+0x8c>
 8024cf2:	232d      	movs	r3, #45	; 0x2d
 8024cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024cf8:	4a93      	ldr	r2, [pc, #588]	; (8024f48 <_printf_float+0x2dc>)
 8024cfa:	4b94      	ldr	r3, [pc, #592]	; (8024f4c <_printf_float+0x2e0>)
 8024cfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8024d00:	bf94      	ite	ls
 8024d02:	4690      	movls	r8, r2
 8024d04:	4698      	movhi	r8, r3
 8024d06:	2303      	movs	r3, #3
 8024d08:	6123      	str	r3, [r4, #16]
 8024d0a:	9b05      	ldr	r3, [sp, #20]
 8024d0c:	f023 0304 	bic.w	r3, r3, #4
 8024d10:	6023      	str	r3, [r4, #0]
 8024d12:	f04f 0900 	mov.w	r9, #0
 8024d16:	9700      	str	r7, [sp, #0]
 8024d18:	4633      	mov	r3, r6
 8024d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8024d1c:	4621      	mov	r1, r4
 8024d1e:	4628      	mov	r0, r5
 8024d20:	f000 f9da 	bl	80250d8 <_printf_common>
 8024d24:	3001      	adds	r0, #1
 8024d26:	f040 8090 	bne.w	8024e4a <_printf_float+0x1de>
 8024d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8024d2e:	b00d      	add	sp, #52	; 0x34
 8024d30:	ecbd 8b02 	vpop	{d8}
 8024d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d38:	4642      	mov	r2, r8
 8024d3a:	464b      	mov	r3, r9
 8024d3c:	4640      	mov	r0, r8
 8024d3e:	4649      	mov	r1, r9
 8024d40:	f7db ff1c 	bl	8000b7c <__aeabi_dcmpun>
 8024d44:	b140      	cbz	r0, 8024d58 <_printf_float+0xec>
 8024d46:	464b      	mov	r3, r9
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	bfbc      	itt	lt
 8024d4c:	232d      	movlt	r3, #45	; 0x2d
 8024d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024d52:	4a7f      	ldr	r2, [pc, #508]	; (8024f50 <_printf_float+0x2e4>)
 8024d54:	4b7f      	ldr	r3, [pc, #508]	; (8024f54 <_printf_float+0x2e8>)
 8024d56:	e7d1      	b.n	8024cfc <_printf_float+0x90>
 8024d58:	6863      	ldr	r3, [r4, #4]
 8024d5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8024d5e:	9206      	str	r2, [sp, #24]
 8024d60:	1c5a      	adds	r2, r3, #1
 8024d62:	d13f      	bne.n	8024de4 <_printf_float+0x178>
 8024d64:	2306      	movs	r3, #6
 8024d66:	6063      	str	r3, [r4, #4]
 8024d68:	9b05      	ldr	r3, [sp, #20]
 8024d6a:	6861      	ldr	r1, [r4, #4]
 8024d6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8024d70:	2300      	movs	r3, #0
 8024d72:	9303      	str	r3, [sp, #12]
 8024d74:	ab0a      	add	r3, sp, #40	; 0x28
 8024d76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8024d7a:	ab09      	add	r3, sp, #36	; 0x24
 8024d7c:	ec49 8b10 	vmov	d0, r8, r9
 8024d80:	9300      	str	r3, [sp, #0]
 8024d82:	6022      	str	r2, [r4, #0]
 8024d84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8024d88:	4628      	mov	r0, r5
 8024d8a:	f7ff fecf 	bl	8024b2c <__cvt>
 8024d8e:	9b06      	ldr	r3, [sp, #24]
 8024d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024d92:	2b47      	cmp	r3, #71	; 0x47
 8024d94:	4680      	mov	r8, r0
 8024d96:	d108      	bne.n	8024daa <_printf_float+0x13e>
 8024d98:	1cc8      	adds	r0, r1, #3
 8024d9a:	db02      	blt.n	8024da2 <_printf_float+0x136>
 8024d9c:	6863      	ldr	r3, [r4, #4]
 8024d9e:	4299      	cmp	r1, r3
 8024da0:	dd41      	ble.n	8024e26 <_printf_float+0x1ba>
 8024da2:	f1ab 0302 	sub.w	r3, fp, #2
 8024da6:	fa5f fb83 	uxtb.w	fp, r3
 8024daa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024dae:	d820      	bhi.n	8024df2 <_printf_float+0x186>
 8024db0:	3901      	subs	r1, #1
 8024db2:	465a      	mov	r2, fp
 8024db4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8024db8:	9109      	str	r1, [sp, #36]	; 0x24
 8024dba:	f7ff ff19 	bl	8024bf0 <__exponent>
 8024dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024dc0:	1813      	adds	r3, r2, r0
 8024dc2:	2a01      	cmp	r2, #1
 8024dc4:	4681      	mov	r9, r0
 8024dc6:	6123      	str	r3, [r4, #16]
 8024dc8:	dc02      	bgt.n	8024dd0 <_printf_float+0x164>
 8024dca:	6822      	ldr	r2, [r4, #0]
 8024dcc:	07d2      	lsls	r2, r2, #31
 8024dce:	d501      	bpl.n	8024dd4 <_printf_float+0x168>
 8024dd0:	3301      	adds	r3, #1
 8024dd2:	6123      	str	r3, [r4, #16]
 8024dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	d09c      	beq.n	8024d16 <_printf_float+0xaa>
 8024ddc:	232d      	movs	r3, #45	; 0x2d
 8024dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024de2:	e798      	b.n	8024d16 <_printf_float+0xaa>
 8024de4:	9a06      	ldr	r2, [sp, #24]
 8024de6:	2a47      	cmp	r2, #71	; 0x47
 8024de8:	d1be      	bne.n	8024d68 <_printf_float+0xfc>
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d1bc      	bne.n	8024d68 <_printf_float+0xfc>
 8024dee:	2301      	movs	r3, #1
 8024df0:	e7b9      	b.n	8024d66 <_printf_float+0xfa>
 8024df2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8024df6:	d118      	bne.n	8024e2a <_printf_float+0x1be>
 8024df8:	2900      	cmp	r1, #0
 8024dfa:	6863      	ldr	r3, [r4, #4]
 8024dfc:	dd0b      	ble.n	8024e16 <_printf_float+0x1aa>
 8024dfe:	6121      	str	r1, [r4, #16]
 8024e00:	b913      	cbnz	r3, 8024e08 <_printf_float+0x19c>
 8024e02:	6822      	ldr	r2, [r4, #0]
 8024e04:	07d0      	lsls	r0, r2, #31
 8024e06:	d502      	bpl.n	8024e0e <_printf_float+0x1a2>
 8024e08:	3301      	adds	r3, #1
 8024e0a:	440b      	add	r3, r1
 8024e0c:	6123      	str	r3, [r4, #16]
 8024e0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8024e10:	f04f 0900 	mov.w	r9, #0
 8024e14:	e7de      	b.n	8024dd4 <_printf_float+0x168>
 8024e16:	b913      	cbnz	r3, 8024e1e <_printf_float+0x1b2>
 8024e18:	6822      	ldr	r2, [r4, #0]
 8024e1a:	07d2      	lsls	r2, r2, #31
 8024e1c:	d501      	bpl.n	8024e22 <_printf_float+0x1b6>
 8024e1e:	3302      	adds	r3, #2
 8024e20:	e7f4      	b.n	8024e0c <_printf_float+0x1a0>
 8024e22:	2301      	movs	r3, #1
 8024e24:	e7f2      	b.n	8024e0c <_printf_float+0x1a0>
 8024e26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8024e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e2c:	4299      	cmp	r1, r3
 8024e2e:	db05      	blt.n	8024e3c <_printf_float+0x1d0>
 8024e30:	6823      	ldr	r3, [r4, #0]
 8024e32:	6121      	str	r1, [r4, #16]
 8024e34:	07d8      	lsls	r0, r3, #31
 8024e36:	d5ea      	bpl.n	8024e0e <_printf_float+0x1a2>
 8024e38:	1c4b      	adds	r3, r1, #1
 8024e3a:	e7e7      	b.n	8024e0c <_printf_float+0x1a0>
 8024e3c:	2900      	cmp	r1, #0
 8024e3e:	bfd4      	ite	le
 8024e40:	f1c1 0202 	rsble	r2, r1, #2
 8024e44:	2201      	movgt	r2, #1
 8024e46:	4413      	add	r3, r2
 8024e48:	e7e0      	b.n	8024e0c <_printf_float+0x1a0>
 8024e4a:	6823      	ldr	r3, [r4, #0]
 8024e4c:	055a      	lsls	r2, r3, #21
 8024e4e:	d407      	bmi.n	8024e60 <_printf_float+0x1f4>
 8024e50:	6923      	ldr	r3, [r4, #16]
 8024e52:	4642      	mov	r2, r8
 8024e54:	4631      	mov	r1, r6
 8024e56:	4628      	mov	r0, r5
 8024e58:	47b8      	blx	r7
 8024e5a:	3001      	adds	r0, #1
 8024e5c:	d12c      	bne.n	8024eb8 <_printf_float+0x24c>
 8024e5e:	e764      	b.n	8024d2a <_printf_float+0xbe>
 8024e60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024e64:	f240 80e0 	bls.w	8025028 <_printf_float+0x3bc>
 8024e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024e6c:	2200      	movs	r2, #0
 8024e6e:	2300      	movs	r3, #0
 8024e70:	f7db fe52 	bl	8000b18 <__aeabi_dcmpeq>
 8024e74:	2800      	cmp	r0, #0
 8024e76:	d034      	beq.n	8024ee2 <_printf_float+0x276>
 8024e78:	4a37      	ldr	r2, [pc, #220]	; (8024f58 <_printf_float+0x2ec>)
 8024e7a:	2301      	movs	r3, #1
 8024e7c:	4631      	mov	r1, r6
 8024e7e:	4628      	mov	r0, r5
 8024e80:	47b8      	blx	r7
 8024e82:	3001      	adds	r0, #1
 8024e84:	f43f af51 	beq.w	8024d2a <_printf_float+0xbe>
 8024e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024e8c:	429a      	cmp	r2, r3
 8024e8e:	db02      	blt.n	8024e96 <_printf_float+0x22a>
 8024e90:	6823      	ldr	r3, [r4, #0]
 8024e92:	07d8      	lsls	r0, r3, #31
 8024e94:	d510      	bpl.n	8024eb8 <_printf_float+0x24c>
 8024e96:	ee18 3a10 	vmov	r3, s16
 8024e9a:	4652      	mov	r2, sl
 8024e9c:	4631      	mov	r1, r6
 8024e9e:	4628      	mov	r0, r5
 8024ea0:	47b8      	blx	r7
 8024ea2:	3001      	adds	r0, #1
 8024ea4:	f43f af41 	beq.w	8024d2a <_printf_float+0xbe>
 8024ea8:	f04f 0800 	mov.w	r8, #0
 8024eac:	f104 091a 	add.w	r9, r4, #26
 8024eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024eb2:	3b01      	subs	r3, #1
 8024eb4:	4543      	cmp	r3, r8
 8024eb6:	dc09      	bgt.n	8024ecc <_printf_float+0x260>
 8024eb8:	6823      	ldr	r3, [r4, #0]
 8024eba:	079b      	lsls	r3, r3, #30
 8024ebc:	f100 8107 	bmi.w	80250ce <_printf_float+0x462>
 8024ec0:	68e0      	ldr	r0, [r4, #12]
 8024ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ec4:	4298      	cmp	r0, r3
 8024ec6:	bfb8      	it	lt
 8024ec8:	4618      	movlt	r0, r3
 8024eca:	e730      	b.n	8024d2e <_printf_float+0xc2>
 8024ecc:	2301      	movs	r3, #1
 8024ece:	464a      	mov	r2, r9
 8024ed0:	4631      	mov	r1, r6
 8024ed2:	4628      	mov	r0, r5
 8024ed4:	47b8      	blx	r7
 8024ed6:	3001      	adds	r0, #1
 8024ed8:	f43f af27 	beq.w	8024d2a <_printf_float+0xbe>
 8024edc:	f108 0801 	add.w	r8, r8, #1
 8024ee0:	e7e6      	b.n	8024eb0 <_printf_float+0x244>
 8024ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	dc39      	bgt.n	8024f5c <_printf_float+0x2f0>
 8024ee8:	4a1b      	ldr	r2, [pc, #108]	; (8024f58 <_printf_float+0x2ec>)
 8024eea:	2301      	movs	r3, #1
 8024eec:	4631      	mov	r1, r6
 8024eee:	4628      	mov	r0, r5
 8024ef0:	47b8      	blx	r7
 8024ef2:	3001      	adds	r0, #1
 8024ef4:	f43f af19 	beq.w	8024d2a <_printf_float+0xbe>
 8024ef8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8024efc:	4313      	orrs	r3, r2
 8024efe:	d102      	bne.n	8024f06 <_printf_float+0x29a>
 8024f00:	6823      	ldr	r3, [r4, #0]
 8024f02:	07d9      	lsls	r1, r3, #31
 8024f04:	d5d8      	bpl.n	8024eb8 <_printf_float+0x24c>
 8024f06:	ee18 3a10 	vmov	r3, s16
 8024f0a:	4652      	mov	r2, sl
 8024f0c:	4631      	mov	r1, r6
 8024f0e:	4628      	mov	r0, r5
 8024f10:	47b8      	blx	r7
 8024f12:	3001      	adds	r0, #1
 8024f14:	f43f af09 	beq.w	8024d2a <_printf_float+0xbe>
 8024f18:	f04f 0900 	mov.w	r9, #0
 8024f1c:	f104 0a1a 	add.w	sl, r4, #26
 8024f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f22:	425b      	negs	r3, r3
 8024f24:	454b      	cmp	r3, r9
 8024f26:	dc01      	bgt.n	8024f2c <_printf_float+0x2c0>
 8024f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f2a:	e792      	b.n	8024e52 <_printf_float+0x1e6>
 8024f2c:	2301      	movs	r3, #1
 8024f2e:	4652      	mov	r2, sl
 8024f30:	4631      	mov	r1, r6
 8024f32:	4628      	mov	r0, r5
 8024f34:	47b8      	blx	r7
 8024f36:	3001      	adds	r0, #1
 8024f38:	f43f aef7 	beq.w	8024d2a <_printf_float+0xbe>
 8024f3c:	f109 0901 	add.w	r9, r9, #1
 8024f40:	e7ee      	b.n	8024f20 <_printf_float+0x2b4>
 8024f42:	bf00      	nop
 8024f44:	7fefffff 	.word	0x7fefffff
 8024f48:	0802ad6f 	.word	0x0802ad6f
 8024f4c:	0802ad73 	.word	0x0802ad73
 8024f50:	0802ad77 	.word	0x0802ad77
 8024f54:	0802ad7b 	.word	0x0802ad7b
 8024f58:	0802ad7f 	.word	0x0802ad7f
 8024f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f60:	429a      	cmp	r2, r3
 8024f62:	bfa8      	it	ge
 8024f64:	461a      	movge	r2, r3
 8024f66:	2a00      	cmp	r2, #0
 8024f68:	4691      	mov	r9, r2
 8024f6a:	dc37      	bgt.n	8024fdc <_printf_float+0x370>
 8024f6c:	f04f 0b00 	mov.w	fp, #0
 8024f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f74:	f104 021a 	add.w	r2, r4, #26
 8024f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f7a:	9305      	str	r3, [sp, #20]
 8024f7c:	eba3 0309 	sub.w	r3, r3, r9
 8024f80:	455b      	cmp	r3, fp
 8024f82:	dc33      	bgt.n	8024fec <_printf_float+0x380>
 8024f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024f88:	429a      	cmp	r2, r3
 8024f8a:	db3b      	blt.n	8025004 <_printf_float+0x398>
 8024f8c:	6823      	ldr	r3, [r4, #0]
 8024f8e:	07da      	lsls	r2, r3, #31
 8024f90:	d438      	bmi.n	8025004 <_printf_float+0x398>
 8024f92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8024f96:	eba2 0903 	sub.w	r9, r2, r3
 8024f9a:	9b05      	ldr	r3, [sp, #20]
 8024f9c:	1ad2      	subs	r2, r2, r3
 8024f9e:	4591      	cmp	r9, r2
 8024fa0:	bfa8      	it	ge
 8024fa2:	4691      	movge	r9, r2
 8024fa4:	f1b9 0f00 	cmp.w	r9, #0
 8024fa8:	dc35      	bgt.n	8025016 <_printf_float+0x3aa>
 8024faa:	f04f 0800 	mov.w	r8, #0
 8024fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024fb2:	f104 0a1a 	add.w	sl, r4, #26
 8024fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8024fba:	1a9b      	subs	r3, r3, r2
 8024fbc:	eba3 0309 	sub.w	r3, r3, r9
 8024fc0:	4543      	cmp	r3, r8
 8024fc2:	f77f af79 	ble.w	8024eb8 <_printf_float+0x24c>
 8024fc6:	2301      	movs	r3, #1
 8024fc8:	4652      	mov	r2, sl
 8024fca:	4631      	mov	r1, r6
 8024fcc:	4628      	mov	r0, r5
 8024fce:	47b8      	blx	r7
 8024fd0:	3001      	adds	r0, #1
 8024fd2:	f43f aeaa 	beq.w	8024d2a <_printf_float+0xbe>
 8024fd6:	f108 0801 	add.w	r8, r8, #1
 8024fda:	e7ec      	b.n	8024fb6 <_printf_float+0x34a>
 8024fdc:	4613      	mov	r3, r2
 8024fde:	4631      	mov	r1, r6
 8024fe0:	4642      	mov	r2, r8
 8024fe2:	4628      	mov	r0, r5
 8024fe4:	47b8      	blx	r7
 8024fe6:	3001      	adds	r0, #1
 8024fe8:	d1c0      	bne.n	8024f6c <_printf_float+0x300>
 8024fea:	e69e      	b.n	8024d2a <_printf_float+0xbe>
 8024fec:	2301      	movs	r3, #1
 8024fee:	4631      	mov	r1, r6
 8024ff0:	4628      	mov	r0, r5
 8024ff2:	9205      	str	r2, [sp, #20]
 8024ff4:	47b8      	blx	r7
 8024ff6:	3001      	adds	r0, #1
 8024ff8:	f43f ae97 	beq.w	8024d2a <_printf_float+0xbe>
 8024ffc:	9a05      	ldr	r2, [sp, #20]
 8024ffe:	f10b 0b01 	add.w	fp, fp, #1
 8025002:	e7b9      	b.n	8024f78 <_printf_float+0x30c>
 8025004:	ee18 3a10 	vmov	r3, s16
 8025008:	4652      	mov	r2, sl
 802500a:	4631      	mov	r1, r6
 802500c:	4628      	mov	r0, r5
 802500e:	47b8      	blx	r7
 8025010:	3001      	adds	r0, #1
 8025012:	d1be      	bne.n	8024f92 <_printf_float+0x326>
 8025014:	e689      	b.n	8024d2a <_printf_float+0xbe>
 8025016:	9a05      	ldr	r2, [sp, #20]
 8025018:	464b      	mov	r3, r9
 802501a:	4442      	add	r2, r8
 802501c:	4631      	mov	r1, r6
 802501e:	4628      	mov	r0, r5
 8025020:	47b8      	blx	r7
 8025022:	3001      	adds	r0, #1
 8025024:	d1c1      	bne.n	8024faa <_printf_float+0x33e>
 8025026:	e680      	b.n	8024d2a <_printf_float+0xbe>
 8025028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802502a:	2a01      	cmp	r2, #1
 802502c:	dc01      	bgt.n	8025032 <_printf_float+0x3c6>
 802502e:	07db      	lsls	r3, r3, #31
 8025030:	d53a      	bpl.n	80250a8 <_printf_float+0x43c>
 8025032:	2301      	movs	r3, #1
 8025034:	4642      	mov	r2, r8
 8025036:	4631      	mov	r1, r6
 8025038:	4628      	mov	r0, r5
 802503a:	47b8      	blx	r7
 802503c:	3001      	adds	r0, #1
 802503e:	f43f ae74 	beq.w	8024d2a <_printf_float+0xbe>
 8025042:	ee18 3a10 	vmov	r3, s16
 8025046:	4652      	mov	r2, sl
 8025048:	4631      	mov	r1, r6
 802504a:	4628      	mov	r0, r5
 802504c:	47b8      	blx	r7
 802504e:	3001      	adds	r0, #1
 8025050:	f43f ae6b 	beq.w	8024d2a <_printf_float+0xbe>
 8025054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025058:	2200      	movs	r2, #0
 802505a:	2300      	movs	r3, #0
 802505c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8025060:	f7db fd5a 	bl	8000b18 <__aeabi_dcmpeq>
 8025064:	b9d8      	cbnz	r0, 802509e <_printf_float+0x432>
 8025066:	f10a 33ff 	add.w	r3, sl, #4294967295
 802506a:	f108 0201 	add.w	r2, r8, #1
 802506e:	4631      	mov	r1, r6
 8025070:	4628      	mov	r0, r5
 8025072:	47b8      	blx	r7
 8025074:	3001      	adds	r0, #1
 8025076:	d10e      	bne.n	8025096 <_printf_float+0x42a>
 8025078:	e657      	b.n	8024d2a <_printf_float+0xbe>
 802507a:	2301      	movs	r3, #1
 802507c:	4652      	mov	r2, sl
 802507e:	4631      	mov	r1, r6
 8025080:	4628      	mov	r0, r5
 8025082:	47b8      	blx	r7
 8025084:	3001      	adds	r0, #1
 8025086:	f43f ae50 	beq.w	8024d2a <_printf_float+0xbe>
 802508a:	f108 0801 	add.w	r8, r8, #1
 802508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025090:	3b01      	subs	r3, #1
 8025092:	4543      	cmp	r3, r8
 8025094:	dcf1      	bgt.n	802507a <_printf_float+0x40e>
 8025096:	464b      	mov	r3, r9
 8025098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802509c:	e6da      	b.n	8024e54 <_printf_float+0x1e8>
 802509e:	f04f 0800 	mov.w	r8, #0
 80250a2:	f104 0a1a 	add.w	sl, r4, #26
 80250a6:	e7f2      	b.n	802508e <_printf_float+0x422>
 80250a8:	2301      	movs	r3, #1
 80250aa:	4642      	mov	r2, r8
 80250ac:	e7df      	b.n	802506e <_printf_float+0x402>
 80250ae:	2301      	movs	r3, #1
 80250b0:	464a      	mov	r2, r9
 80250b2:	4631      	mov	r1, r6
 80250b4:	4628      	mov	r0, r5
 80250b6:	47b8      	blx	r7
 80250b8:	3001      	adds	r0, #1
 80250ba:	f43f ae36 	beq.w	8024d2a <_printf_float+0xbe>
 80250be:	f108 0801 	add.w	r8, r8, #1
 80250c2:	68e3      	ldr	r3, [r4, #12]
 80250c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80250c6:	1a5b      	subs	r3, r3, r1
 80250c8:	4543      	cmp	r3, r8
 80250ca:	dcf0      	bgt.n	80250ae <_printf_float+0x442>
 80250cc:	e6f8      	b.n	8024ec0 <_printf_float+0x254>
 80250ce:	f04f 0800 	mov.w	r8, #0
 80250d2:	f104 0919 	add.w	r9, r4, #25
 80250d6:	e7f4      	b.n	80250c2 <_printf_float+0x456>

080250d8 <_printf_common>:
 80250d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80250dc:	4616      	mov	r6, r2
 80250de:	4699      	mov	r9, r3
 80250e0:	688a      	ldr	r2, [r1, #8]
 80250e2:	690b      	ldr	r3, [r1, #16]
 80250e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80250e8:	4293      	cmp	r3, r2
 80250ea:	bfb8      	it	lt
 80250ec:	4613      	movlt	r3, r2
 80250ee:	6033      	str	r3, [r6, #0]
 80250f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80250f4:	4607      	mov	r7, r0
 80250f6:	460c      	mov	r4, r1
 80250f8:	b10a      	cbz	r2, 80250fe <_printf_common+0x26>
 80250fa:	3301      	adds	r3, #1
 80250fc:	6033      	str	r3, [r6, #0]
 80250fe:	6823      	ldr	r3, [r4, #0]
 8025100:	0699      	lsls	r1, r3, #26
 8025102:	bf42      	ittt	mi
 8025104:	6833      	ldrmi	r3, [r6, #0]
 8025106:	3302      	addmi	r3, #2
 8025108:	6033      	strmi	r3, [r6, #0]
 802510a:	6825      	ldr	r5, [r4, #0]
 802510c:	f015 0506 	ands.w	r5, r5, #6
 8025110:	d106      	bne.n	8025120 <_printf_common+0x48>
 8025112:	f104 0a19 	add.w	sl, r4, #25
 8025116:	68e3      	ldr	r3, [r4, #12]
 8025118:	6832      	ldr	r2, [r6, #0]
 802511a:	1a9b      	subs	r3, r3, r2
 802511c:	42ab      	cmp	r3, r5
 802511e:	dc26      	bgt.n	802516e <_printf_common+0x96>
 8025120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025124:	1e13      	subs	r3, r2, #0
 8025126:	6822      	ldr	r2, [r4, #0]
 8025128:	bf18      	it	ne
 802512a:	2301      	movne	r3, #1
 802512c:	0692      	lsls	r2, r2, #26
 802512e:	d42b      	bmi.n	8025188 <_printf_common+0xb0>
 8025130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025134:	4649      	mov	r1, r9
 8025136:	4638      	mov	r0, r7
 8025138:	47c0      	blx	r8
 802513a:	3001      	adds	r0, #1
 802513c:	d01e      	beq.n	802517c <_printf_common+0xa4>
 802513e:	6823      	ldr	r3, [r4, #0]
 8025140:	6922      	ldr	r2, [r4, #16]
 8025142:	f003 0306 	and.w	r3, r3, #6
 8025146:	2b04      	cmp	r3, #4
 8025148:	bf02      	ittt	eq
 802514a:	68e5      	ldreq	r5, [r4, #12]
 802514c:	6833      	ldreq	r3, [r6, #0]
 802514e:	1aed      	subeq	r5, r5, r3
 8025150:	68a3      	ldr	r3, [r4, #8]
 8025152:	bf0c      	ite	eq
 8025154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025158:	2500      	movne	r5, #0
 802515a:	4293      	cmp	r3, r2
 802515c:	bfc4      	itt	gt
 802515e:	1a9b      	subgt	r3, r3, r2
 8025160:	18ed      	addgt	r5, r5, r3
 8025162:	2600      	movs	r6, #0
 8025164:	341a      	adds	r4, #26
 8025166:	42b5      	cmp	r5, r6
 8025168:	d11a      	bne.n	80251a0 <_printf_common+0xc8>
 802516a:	2000      	movs	r0, #0
 802516c:	e008      	b.n	8025180 <_printf_common+0xa8>
 802516e:	2301      	movs	r3, #1
 8025170:	4652      	mov	r2, sl
 8025172:	4649      	mov	r1, r9
 8025174:	4638      	mov	r0, r7
 8025176:	47c0      	blx	r8
 8025178:	3001      	adds	r0, #1
 802517a:	d103      	bne.n	8025184 <_printf_common+0xac>
 802517c:	f04f 30ff 	mov.w	r0, #4294967295
 8025180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025184:	3501      	adds	r5, #1
 8025186:	e7c6      	b.n	8025116 <_printf_common+0x3e>
 8025188:	18e1      	adds	r1, r4, r3
 802518a:	1c5a      	adds	r2, r3, #1
 802518c:	2030      	movs	r0, #48	; 0x30
 802518e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025192:	4422      	add	r2, r4
 8025194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802519c:	3302      	adds	r3, #2
 802519e:	e7c7      	b.n	8025130 <_printf_common+0x58>
 80251a0:	2301      	movs	r3, #1
 80251a2:	4622      	mov	r2, r4
 80251a4:	4649      	mov	r1, r9
 80251a6:	4638      	mov	r0, r7
 80251a8:	47c0      	blx	r8
 80251aa:	3001      	adds	r0, #1
 80251ac:	d0e6      	beq.n	802517c <_printf_common+0xa4>
 80251ae:	3601      	adds	r6, #1
 80251b0:	e7d9      	b.n	8025166 <_printf_common+0x8e>
	...

080251b4 <_printf_i>:
 80251b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80251b8:	7e0f      	ldrb	r7, [r1, #24]
 80251ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80251bc:	2f78      	cmp	r7, #120	; 0x78
 80251be:	4691      	mov	r9, r2
 80251c0:	4680      	mov	r8, r0
 80251c2:	460c      	mov	r4, r1
 80251c4:	469a      	mov	sl, r3
 80251c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80251ca:	d807      	bhi.n	80251dc <_printf_i+0x28>
 80251cc:	2f62      	cmp	r7, #98	; 0x62
 80251ce:	d80a      	bhi.n	80251e6 <_printf_i+0x32>
 80251d0:	2f00      	cmp	r7, #0
 80251d2:	f000 80d4 	beq.w	802537e <_printf_i+0x1ca>
 80251d6:	2f58      	cmp	r7, #88	; 0x58
 80251d8:	f000 80c0 	beq.w	802535c <_printf_i+0x1a8>
 80251dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80251e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80251e4:	e03a      	b.n	802525c <_printf_i+0xa8>
 80251e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80251ea:	2b15      	cmp	r3, #21
 80251ec:	d8f6      	bhi.n	80251dc <_printf_i+0x28>
 80251ee:	a101      	add	r1, pc, #4	; (adr r1, 80251f4 <_printf_i+0x40>)
 80251f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80251f4:	0802524d 	.word	0x0802524d
 80251f8:	08025261 	.word	0x08025261
 80251fc:	080251dd 	.word	0x080251dd
 8025200:	080251dd 	.word	0x080251dd
 8025204:	080251dd 	.word	0x080251dd
 8025208:	080251dd 	.word	0x080251dd
 802520c:	08025261 	.word	0x08025261
 8025210:	080251dd 	.word	0x080251dd
 8025214:	080251dd 	.word	0x080251dd
 8025218:	080251dd 	.word	0x080251dd
 802521c:	080251dd 	.word	0x080251dd
 8025220:	08025365 	.word	0x08025365
 8025224:	0802528d 	.word	0x0802528d
 8025228:	0802531f 	.word	0x0802531f
 802522c:	080251dd 	.word	0x080251dd
 8025230:	080251dd 	.word	0x080251dd
 8025234:	08025387 	.word	0x08025387
 8025238:	080251dd 	.word	0x080251dd
 802523c:	0802528d 	.word	0x0802528d
 8025240:	080251dd 	.word	0x080251dd
 8025244:	080251dd 	.word	0x080251dd
 8025248:	08025327 	.word	0x08025327
 802524c:	682b      	ldr	r3, [r5, #0]
 802524e:	1d1a      	adds	r2, r3, #4
 8025250:	681b      	ldr	r3, [r3, #0]
 8025252:	602a      	str	r2, [r5, #0]
 8025254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802525c:	2301      	movs	r3, #1
 802525e:	e09f      	b.n	80253a0 <_printf_i+0x1ec>
 8025260:	6820      	ldr	r0, [r4, #0]
 8025262:	682b      	ldr	r3, [r5, #0]
 8025264:	0607      	lsls	r7, r0, #24
 8025266:	f103 0104 	add.w	r1, r3, #4
 802526a:	6029      	str	r1, [r5, #0]
 802526c:	d501      	bpl.n	8025272 <_printf_i+0xbe>
 802526e:	681e      	ldr	r6, [r3, #0]
 8025270:	e003      	b.n	802527a <_printf_i+0xc6>
 8025272:	0646      	lsls	r6, r0, #25
 8025274:	d5fb      	bpl.n	802526e <_printf_i+0xba>
 8025276:	f9b3 6000 	ldrsh.w	r6, [r3]
 802527a:	2e00      	cmp	r6, #0
 802527c:	da03      	bge.n	8025286 <_printf_i+0xd2>
 802527e:	232d      	movs	r3, #45	; 0x2d
 8025280:	4276      	negs	r6, r6
 8025282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025286:	485a      	ldr	r0, [pc, #360]	; (80253f0 <_printf_i+0x23c>)
 8025288:	230a      	movs	r3, #10
 802528a:	e012      	b.n	80252b2 <_printf_i+0xfe>
 802528c:	682b      	ldr	r3, [r5, #0]
 802528e:	6820      	ldr	r0, [r4, #0]
 8025290:	1d19      	adds	r1, r3, #4
 8025292:	6029      	str	r1, [r5, #0]
 8025294:	0605      	lsls	r5, r0, #24
 8025296:	d501      	bpl.n	802529c <_printf_i+0xe8>
 8025298:	681e      	ldr	r6, [r3, #0]
 802529a:	e002      	b.n	80252a2 <_printf_i+0xee>
 802529c:	0641      	lsls	r1, r0, #25
 802529e:	d5fb      	bpl.n	8025298 <_printf_i+0xe4>
 80252a0:	881e      	ldrh	r6, [r3, #0]
 80252a2:	4853      	ldr	r0, [pc, #332]	; (80253f0 <_printf_i+0x23c>)
 80252a4:	2f6f      	cmp	r7, #111	; 0x6f
 80252a6:	bf0c      	ite	eq
 80252a8:	2308      	moveq	r3, #8
 80252aa:	230a      	movne	r3, #10
 80252ac:	2100      	movs	r1, #0
 80252ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80252b2:	6865      	ldr	r5, [r4, #4]
 80252b4:	60a5      	str	r5, [r4, #8]
 80252b6:	2d00      	cmp	r5, #0
 80252b8:	bfa2      	ittt	ge
 80252ba:	6821      	ldrge	r1, [r4, #0]
 80252bc:	f021 0104 	bicge.w	r1, r1, #4
 80252c0:	6021      	strge	r1, [r4, #0]
 80252c2:	b90e      	cbnz	r6, 80252c8 <_printf_i+0x114>
 80252c4:	2d00      	cmp	r5, #0
 80252c6:	d04b      	beq.n	8025360 <_printf_i+0x1ac>
 80252c8:	4615      	mov	r5, r2
 80252ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80252ce:	fb03 6711 	mls	r7, r3, r1, r6
 80252d2:	5dc7      	ldrb	r7, [r0, r7]
 80252d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80252d8:	4637      	mov	r7, r6
 80252da:	42bb      	cmp	r3, r7
 80252dc:	460e      	mov	r6, r1
 80252de:	d9f4      	bls.n	80252ca <_printf_i+0x116>
 80252e0:	2b08      	cmp	r3, #8
 80252e2:	d10b      	bne.n	80252fc <_printf_i+0x148>
 80252e4:	6823      	ldr	r3, [r4, #0]
 80252e6:	07de      	lsls	r6, r3, #31
 80252e8:	d508      	bpl.n	80252fc <_printf_i+0x148>
 80252ea:	6923      	ldr	r3, [r4, #16]
 80252ec:	6861      	ldr	r1, [r4, #4]
 80252ee:	4299      	cmp	r1, r3
 80252f0:	bfde      	ittt	le
 80252f2:	2330      	movle	r3, #48	; 0x30
 80252f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80252f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80252fc:	1b52      	subs	r2, r2, r5
 80252fe:	6122      	str	r2, [r4, #16]
 8025300:	f8cd a000 	str.w	sl, [sp]
 8025304:	464b      	mov	r3, r9
 8025306:	aa03      	add	r2, sp, #12
 8025308:	4621      	mov	r1, r4
 802530a:	4640      	mov	r0, r8
 802530c:	f7ff fee4 	bl	80250d8 <_printf_common>
 8025310:	3001      	adds	r0, #1
 8025312:	d14a      	bne.n	80253aa <_printf_i+0x1f6>
 8025314:	f04f 30ff 	mov.w	r0, #4294967295
 8025318:	b004      	add	sp, #16
 802531a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802531e:	6823      	ldr	r3, [r4, #0]
 8025320:	f043 0320 	orr.w	r3, r3, #32
 8025324:	6023      	str	r3, [r4, #0]
 8025326:	4833      	ldr	r0, [pc, #204]	; (80253f4 <_printf_i+0x240>)
 8025328:	2778      	movs	r7, #120	; 0x78
 802532a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802532e:	6823      	ldr	r3, [r4, #0]
 8025330:	6829      	ldr	r1, [r5, #0]
 8025332:	061f      	lsls	r7, r3, #24
 8025334:	f851 6b04 	ldr.w	r6, [r1], #4
 8025338:	d402      	bmi.n	8025340 <_printf_i+0x18c>
 802533a:	065f      	lsls	r7, r3, #25
 802533c:	bf48      	it	mi
 802533e:	b2b6      	uxthmi	r6, r6
 8025340:	07df      	lsls	r7, r3, #31
 8025342:	bf48      	it	mi
 8025344:	f043 0320 	orrmi.w	r3, r3, #32
 8025348:	6029      	str	r1, [r5, #0]
 802534a:	bf48      	it	mi
 802534c:	6023      	strmi	r3, [r4, #0]
 802534e:	b91e      	cbnz	r6, 8025358 <_printf_i+0x1a4>
 8025350:	6823      	ldr	r3, [r4, #0]
 8025352:	f023 0320 	bic.w	r3, r3, #32
 8025356:	6023      	str	r3, [r4, #0]
 8025358:	2310      	movs	r3, #16
 802535a:	e7a7      	b.n	80252ac <_printf_i+0xf8>
 802535c:	4824      	ldr	r0, [pc, #144]	; (80253f0 <_printf_i+0x23c>)
 802535e:	e7e4      	b.n	802532a <_printf_i+0x176>
 8025360:	4615      	mov	r5, r2
 8025362:	e7bd      	b.n	80252e0 <_printf_i+0x12c>
 8025364:	682b      	ldr	r3, [r5, #0]
 8025366:	6826      	ldr	r6, [r4, #0]
 8025368:	6961      	ldr	r1, [r4, #20]
 802536a:	1d18      	adds	r0, r3, #4
 802536c:	6028      	str	r0, [r5, #0]
 802536e:	0635      	lsls	r5, r6, #24
 8025370:	681b      	ldr	r3, [r3, #0]
 8025372:	d501      	bpl.n	8025378 <_printf_i+0x1c4>
 8025374:	6019      	str	r1, [r3, #0]
 8025376:	e002      	b.n	802537e <_printf_i+0x1ca>
 8025378:	0670      	lsls	r0, r6, #25
 802537a:	d5fb      	bpl.n	8025374 <_printf_i+0x1c0>
 802537c:	8019      	strh	r1, [r3, #0]
 802537e:	2300      	movs	r3, #0
 8025380:	6123      	str	r3, [r4, #16]
 8025382:	4615      	mov	r5, r2
 8025384:	e7bc      	b.n	8025300 <_printf_i+0x14c>
 8025386:	682b      	ldr	r3, [r5, #0]
 8025388:	1d1a      	adds	r2, r3, #4
 802538a:	602a      	str	r2, [r5, #0]
 802538c:	681d      	ldr	r5, [r3, #0]
 802538e:	6862      	ldr	r2, [r4, #4]
 8025390:	2100      	movs	r1, #0
 8025392:	4628      	mov	r0, r5
 8025394:	f7da ff44 	bl	8000220 <memchr>
 8025398:	b108      	cbz	r0, 802539e <_printf_i+0x1ea>
 802539a:	1b40      	subs	r0, r0, r5
 802539c:	6060      	str	r0, [r4, #4]
 802539e:	6863      	ldr	r3, [r4, #4]
 80253a0:	6123      	str	r3, [r4, #16]
 80253a2:	2300      	movs	r3, #0
 80253a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80253a8:	e7aa      	b.n	8025300 <_printf_i+0x14c>
 80253aa:	6923      	ldr	r3, [r4, #16]
 80253ac:	462a      	mov	r2, r5
 80253ae:	4649      	mov	r1, r9
 80253b0:	4640      	mov	r0, r8
 80253b2:	47d0      	blx	sl
 80253b4:	3001      	adds	r0, #1
 80253b6:	d0ad      	beq.n	8025314 <_printf_i+0x160>
 80253b8:	6823      	ldr	r3, [r4, #0]
 80253ba:	079b      	lsls	r3, r3, #30
 80253bc:	d413      	bmi.n	80253e6 <_printf_i+0x232>
 80253be:	68e0      	ldr	r0, [r4, #12]
 80253c0:	9b03      	ldr	r3, [sp, #12]
 80253c2:	4298      	cmp	r0, r3
 80253c4:	bfb8      	it	lt
 80253c6:	4618      	movlt	r0, r3
 80253c8:	e7a6      	b.n	8025318 <_printf_i+0x164>
 80253ca:	2301      	movs	r3, #1
 80253cc:	4632      	mov	r2, r6
 80253ce:	4649      	mov	r1, r9
 80253d0:	4640      	mov	r0, r8
 80253d2:	47d0      	blx	sl
 80253d4:	3001      	adds	r0, #1
 80253d6:	d09d      	beq.n	8025314 <_printf_i+0x160>
 80253d8:	3501      	adds	r5, #1
 80253da:	68e3      	ldr	r3, [r4, #12]
 80253dc:	9903      	ldr	r1, [sp, #12]
 80253de:	1a5b      	subs	r3, r3, r1
 80253e0:	42ab      	cmp	r3, r5
 80253e2:	dcf2      	bgt.n	80253ca <_printf_i+0x216>
 80253e4:	e7eb      	b.n	80253be <_printf_i+0x20a>
 80253e6:	2500      	movs	r5, #0
 80253e8:	f104 0619 	add.w	r6, r4, #25
 80253ec:	e7f5      	b.n	80253da <_printf_i+0x226>
 80253ee:	bf00      	nop
 80253f0:	0802ad81 	.word	0x0802ad81
 80253f4:	0802ad92 	.word	0x0802ad92

080253f8 <std>:
 80253f8:	2300      	movs	r3, #0
 80253fa:	b510      	push	{r4, lr}
 80253fc:	4604      	mov	r4, r0
 80253fe:	e9c0 3300 	strd	r3, r3, [r0]
 8025402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025406:	6083      	str	r3, [r0, #8]
 8025408:	8181      	strh	r1, [r0, #12]
 802540a:	6643      	str	r3, [r0, #100]	; 0x64
 802540c:	81c2      	strh	r2, [r0, #14]
 802540e:	6183      	str	r3, [r0, #24]
 8025410:	4619      	mov	r1, r3
 8025412:	2208      	movs	r2, #8
 8025414:	305c      	adds	r0, #92	; 0x5c
 8025416:	f000 f914 	bl	8025642 <memset>
 802541a:	4b05      	ldr	r3, [pc, #20]	; (8025430 <std+0x38>)
 802541c:	6263      	str	r3, [r4, #36]	; 0x24
 802541e:	4b05      	ldr	r3, [pc, #20]	; (8025434 <std+0x3c>)
 8025420:	62a3      	str	r3, [r4, #40]	; 0x28
 8025422:	4b05      	ldr	r3, [pc, #20]	; (8025438 <std+0x40>)
 8025424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025426:	4b05      	ldr	r3, [pc, #20]	; (802543c <std+0x44>)
 8025428:	6224      	str	r4, [r4, #32]
 802542a:	6323      	str	r3, [r4, #48]	; 0x30
 802542c:	bd10      	pop	{r4, pc}
 802542e:	bf00      	nop
 8025430:	080255bd 	.word	0x080255bd
 8025434:	080255df 	.word	0x080255df
 8025438:	08025617 	.word	0x08025617
 802543c:	0802563b 	.word	0x0802563b

08025440 <stdio_exit_handler>:
 8025440:	4a02      	ldr	r2, [pc, #8]	; (802544c <stdio_exit_handler+0xc>)
 8025442:	4903      	ldr	r1, [pc, #12]	; (8025450 <stdio_exit_handler+0x10>)
 8025444:	4803      	ldr	r0, [pc, #12]	; (8025454 <stdio_exit_handler+0x14>)
 8025446:	f000 b87b 	b.w	8025540 <_fwalk_sglue>
 802544a:	bf00      	nop
 802544c:	200001a0 	.word	0x200001a0
 8025450:	080273a1 	.word	0x080273a1
 8025454:	200001ac 	.word	0x200001ac

08025458 <cleanup_stdio>:
 8025458:	6841      	ldr	r1, [r0, #4]
 802545a:	4b0c      	ldr	r3, [pc, #48]	; (802548c <cleanup_stdio+0x34>)
 802545c:	4299      	cmp	r1, r3
 802545e:	b510      	push	{r4, lr}
 8025460:	4604      	mov	r4, r0
 8025462:	d001      	beq.n	8025468 <cleanup_stdio+0x10>
 8025464:	f001 ff9c 	bl	80273a0 <_fflush_r>
 8025468:	68a1      	ldr	r1, [r4, #8]
 802546a:	4b09      	ldr	r3, [pc, #36]	; (8025490 <cleanup_stdio+0x38>)
 802546c:	4299      	cmp	r1, r3
 802546e:	d002      	beq.n	8025476 <cleanup_stdio+0x1e>
 8025470:	4620      	mov	r0, r4
 8025472:	f001 ff95 	bl	80273a0 <_fflush_r>
 8025476:	68e1      	ldr	r1, [r4, #12]
 8025478:	4b06      	ldr	r3, [pc, #24]	; (8025494 <cleanup_stdio+0x3c>)
 802547a:	4299      	cmp	r1, r3
 802547c:	d004      	beq.n	8025488 <cleanup_stdio+0x30>
 802547e:	4620      	mov	r0, r4
 8025480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025484:	f001 bf8c 	b.w	80273a0 <_fflush_r>
 8025488:	bd10      	pop	{r4, pc}
 802548a:	bf00      	nop
 802548c:	20016958 	.word	0x20016958
 8025490:	200169c0 	.word	0x200169c0
 8025494:	20016a28 	.word	0x20016a28

08025498 <global_stdio_init.part.0>:
 8025498:	b510      	push	{r4, lr}
 802549a:	4b0b      	ldr	r3, [pc, #44]	; (80254c8 <global_stdio_init.part.0+0x30>)
 802549c:	4c0b      	ldr	r4, [pc, #44]	; (80254cc <global_stdio_init.part.0+0x34>)
 802549e:	4a0c      	ldr	r2, [pc, #48]	; (80254d0 <global_stdio_init.part.0+0x38>)
 80254a0:	601a      	str	r2, [r3, #0]
 80254a2:	4620      	mov	r0, r4
 80254a4:	2200      	movs	r2, #0
 80254a6:	2104      	movs	r1, #4
 80254a8:	f7ff ffa6 	bl	80253f8 <std>
 80254ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80254b0:	2201      	movs	r2, #1
 80254b2:	2109      	movs	r1, #9
 80254b4:	f7ff ffa0 	bl	80253f8 <std>
 80254b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80254bc:	2202      	movs	r2, #2
 80254be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254c2:	2112      	movs	r1, #18
 80254c4:	f7ff bf98 	b.w	80253f8 <std>
 80254c8:	20016a90 	.word	0x20016a90
 80254cc:	20016958 	.word	0x20016958
 80254d0:	08025441 	.word	0x08025441

080254d4 <__sfp_lock_acquire>:
 80254d4:	4801      	ldr	r0, [pc, #4]	; (80254dc <__sfp_lock_acquire+0x8>)
 80254d6:	f000 b931 	b.w	802573c <__retarget_lock_acquire_recursive>
 80254da:	bf00      	nop
 80254dc:	20016a99 	.word	0x20016a99

080254e0 <__sfp_lock_release>:
 80254e0:	4801      	ldr	r0, [pc, #4]	; (80254e8 <__sfp_lock_release+0x8>)
 80254e2:	f000 b92c 	b.w	802573e <__retarget_lock_release_recursive>
 80254e6:	bf00      	nop
 80254e8:	20016a99 	.word	0x20016a99

080254ec <__sinit>:
 80254ec:	b510      	push	{r4, lr}
 80254ee:	4604      	mov	r4, r0
 80254f0:	f7ff fff0 	bl	80254d4 <__sfp_lock_acquire>
 80254f4:	6a23      	ldr	r3, [r4, #32]
 80254f6:	b11b      	cbz	r3, 8025500 <__sinit+0x14>
 80254f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80254fc:	f7ff bff0 	b.w	80254e0 <__sfp_lock_release>
 8025500:	4b04      	ldr	r3, [pc, #16]	; (8025514 <__sinit+0x28>)
 8025502:	6223      	str	r3, [r4, #32]
 8025504:	4b04      	ldr	r3, [pc, #16]	; (8025518 <__sinit+0x2c>)
 8025506:	681b      	ldr	r3, [r3, #0]
 8025508:	2b00      	cmp	r3, #0
 802550a:	d1f5      	bne.n	80254f8 <__sinit+0xc>
 802550c:	f7ff ffc4 	bl	8025498 <global_stdio_init.part.0>
 8025510:	e7f2      	b.n	80254f8 <__sinit+0xc>
 8025512:	bf00      	nop
 8025514:	08025459 	.word	0x08025459
 8025518:	20016a90 	.word	0x20016a90

0802551c <fiprintf>:
 802551c:	b40e      	push	{r1, r2, r3}
 802551e:	b503      	push	{r0, r1, lr}
 8025520:	4601      	mov	r1, r0
 8025522:	ab03      	add	r3, sp, #12
 8025524:	4805      	ldr	r0, [pc, #20]	; (802553c <fiprintf+0x20>)
 8025526:	f853 2b04 	ldr.w	r2, [r3], #4
 802552a:	6800      	ldr	r0, [r0, #0]
 802552c:	9301      	str	r3, [sp, #4]
 802552e:	f001 fd97 	bl	8027060 <_vfiprintf_r>
 8025532:	b002      	add	sp, #8
 8025534:	f85d eb04 	ldr.w	lr, [sp], #4
 8025538:	b003      	add	sp, #12
 802553a:	4770      	bx	lr
 802553c:	200001f8 	.word	0x200001f8

08025540 <_fwalk_sglue>:
 8025540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025544:	4607      	mov	r7, r0
 8025546:	4688      	mov	r8, r1
 8025548:	4614      	mov	r4, r2
 802554a:	2600      	movs	r6, #0
 802554c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025550:	f1b9 0901 	subs.w	r9, r9, #1
 8025554:	d505      	bpl.n	8025562 <_fwalk_sglue+0x22>
 8025556:	6824      	ldr	r4, [r4, #0]
 8025558:	2c00      	cmp	r4, #0
 802555a:	d1f7      	bne.n	802554c <_fwalk_sglue+0xc>
 802555c:	4630      	mov	r0, r6
 802555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025562:	89ab      	ldrh	r3, [r5, #12]
 8025564:	2b01      	cmp	r3, #1
 8025566:	d907      	bls.n	8025578 <_fwalk_sglue+0x38>
 8025568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802556c:	3301      	adds	r3, #1
 802556e:	d003      	beq.n	8025578 <_fwalk_sglue+0x38>
 8025570:	4629      	mov	r1, r5
 8025572:	4638      	mov	r0, r7
 8025574:	47c0      	blx	r8
 8025576:	4306      	orrs	r6, r0
 8025578:	3568      	adds	r5, #104	; 0x68
 802557a:	e7e9      	b.n	8025550 <_fwalk_sglue+0x10>

0802557c <siprintf>:
 802557c:	b40e      	push	{r1, r2, r3}
 802557e:	b500      	push	{lr}
 8025580:	b09c      	sub	sp, #112	; 0x70
 8025582:	ab1d      	add	r3, sp, #116	; 0x74
 8025584:	9002      	str	r0, [sp, #8]
 8025586:	9006      	str	r0, [sp, #24]
 8025588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802558c:	4809      	ldr	r0, [pc, #36]	; (80255b4 <siprintf+0x38>)
 802558e:	9107      	str	r1, [sp, #28]
 8025590:	9104      	str	r1, [sp, #16]
 8025592:	4909      	ldr	r1, [pc, #36]	; (80255b8 <siprintf+0x3c>)
 8025594:	f853 2b04 	ldr.w	r2, [r3], #4
 8025598:	9105      	str	r1, [sp, #20]
 802559a:	6800      	ldr	r0, [r0, #0]
 802559c:	9301      	str	r3, [sp, #4]
 802559e:	a902      	add	r1, sp, #8
 80255a0:	f001 fc36 	bl	8026e10 <_svfiprintf_r>
 80255a4:	9b02      	ldr	r3, [sp, #8]
 80255a6:	2200      	movs	r2, #0
 80255a8:	701a      	strb	r2, [r3, #0]
 80255aa:	b01c      	add	sp, #112	; 0x70
 80255ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80255b0:	b003      	add	sp, #12
 80255b2:	4770      	bx	lr
 80255b4:	200001f8 	.word	0x200001f8
 80255b8:	ffff0208 	.word	0xffff0208

080255bc <__sread>:
 80255bc:	b510      	push	{r4, lr}
 80255be:	460c      	mov	r4, r1
 80255c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255c4:	f000 f86c 	bl	80256a0 <_read_r>
 80255c8:	2800      	cmp	r0, #0
 80255ca:	bfab      	itete	ge
 80255cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80255ce:	89a3      	ldrhlt	r3, [r4, #12]
 80255d0:	181b      	addge	r3, r3, r0
 80255d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80255d6:	bfac      	ite	ge
 80255d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80255da:	81a3      	strhlt	r3, [r4, #12]
 80255dc:	bd10      	pop	{r4, pc}

080255de <__swrite>:
 80255de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255e2:	461f      	mov	r7, r3
 80255e4:	898b      	ldrh	r3, [r1, #12]
 80255e6:	05db      	lsls	r3, r3, #23
 80255e8:	4605      	mov	r5, r0
 80255ea:	460c      	mov	r4, r1
 80255ec:	4616      	mov	r6, r2
 80255ee:	d505      	bpl.n	80255fc <__swrite+0x1e>
 80255f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255f4:	2302      	movs	r3, #2
 80255f6:	2200      	movs	r2, #0
 80255f8:	f000 f840 	bl	802567c <_lseek_r>
 80255fc:	89a3      	ldrh	r3, [r4, #12]
 80255fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025606:	81a3      	strh	r3, [r4, #12]
 8025608:	4632      	mov	r2, r6
 802560a:	463b      	mov	r3, r7
 802560c:	4628      	mov	r0, r5
 802560e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025612:	f000 b857 	b.w	80256c4 <_write_r>

08025616 <__sseek>:
 8025616:	b510      	push	{r4, lr}
 8025618:	460c      	mov	r4, r1
 802561a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802561e:	f000 f82d 	bl	802567c <_lseek_r>
 8025622:	1c43      	adds	r3, r0, #1
 8025624:	89a3      	ldrh	r3, [r4, #12]
 8025626:	bf15      	itete	ne
 8025628:	6560      	strne	r0, [r4, #84]	; 0x54
 802562a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802562e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025632:	81a3      	strheq	r3, [r4, #12]
 8025634:	bf18      	it	ne
 8025636:	81a3      	strhne	r3, [r4, #12]
 8025638:	bd10      	pop	{r4, pc}

0802563a <__sclose>:
 802563a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802563e:	f000 b80d 	b.w	802565c <_close_r>

08025642 <memset>:
 8025642:	4402      	add	r2, r0
 8025644:	4603      	mov	r3, r0
 8025646:	4293      	cmp	r3, r2
 8025648:	d100      	bne.n	802564c <memset+0xa>
 802564a:	4770      	bx	lr
 802564c:	f803 1b01 	strb.w	r1, [r3], #1
 8025650:	e7f9      	b.n	8025646 <memset+0x4>
	...

08025654 <_localeconv_r>:
 8025654:	4800      	ldr	r0, [pc, #0]	; (8025658 <_localeconv_r+0x4>)
 8025656:	4770      	bx	lr
 8025658:	200002ec 	.word	0x200002ec

0802565c <_close_r>:
 802565c:	b538      	push	{r3, r4, r5, lr}
 802565e:	4d06      	ldr	r5, [pc, #24]	; (8025678 <_close_r+0x1c>)
 8025660:	2300      	movs	r3, #0
 8025662:	4604      	mov	r4, r0
 8025664:	4608      	mov	r0, r1
 8025666:	602b      	str	r3, [r5, #0]
 8025668:	f7e1 f817 	bl	800669a <_close>
 802566c:	1c43      	adds	r3, r0, #1
 802566e:	d102      	bne.n	8025676 <_close_r+0x1a>
 8025670:	682b      	ldr	r3, [r5, #0]
 8025672:	b103      	cbz	r3, 8025676 <_close_r+0x1a>
 8025674:	6023      	str	r3, [r4, #0]
 8025676:	bd38      	pop	{r3, r4, r5, pc}
 8025678:	20016a94 	.word	0x20016a94

0802567c <_lseek_r>:
 802567c:	b538      	push	{r3, r4, r5, lr}
 802567e:	4d07      	ldr	r5, [pc, #28]	; (802569c <_lseek_r+0x20>)
 8025680:	4604      	mov	r4, r0
 8025682:	4608      	mov	r0, r1
 8025684:	4611      	mov	r1, r2
 8025686:	2200      	movs	r2, #0
 8025688:	602a      	str	r2, [r5, #0]
 802568a:	461a      	mov	r2, r3
 802568c:	f7e1 f82c 	bl	80066e8 <_lseek>
 8025690:	1c43      	adds	r3, r0, #1
 8025692:	d102      	bne.n	802569a <_lseek_r+0x1e>
 8025694:	682b      	ldr	r3, [r5, #0]
 8025696:	b103      	cbz	r3, 802569a <_lseek_r+0x1e>
 8025698:	6023      	str	r3, [r4, #0]
 802569a:	bd38      	pop	{r3, r4, r5, pc}
 802569c:	20016a94 	.word	0x20016a94

080256a0 <_read_r>:
 80256a0:	b538      	push	{r3, r4, r5, lr}
 80256a2:	4d07      	ldr	r5, [pc, #28]	; (80256c0 <_read_r+0x20>)
 80256a4:	4604      	mov	r4, r0
 80256a6:	4608      	mov	r0, r1
 80256a8:	4611      	mov	r1, r2
 80256aa:	2200      	movs	r2, #0
 80256ac:	602a      	str	r2, [r5, #0]
 80256ae:	461a      	mov	r2, r3
 80256b0:	f7e0 ffd6 	bl	8006660 <_read>
 80256b4:	1c43      	adds	r3, r0, #1
 80256b6:	d102      	bne.n	80256be <_read_r+0x1e>
 80256b8:	682b      	ldr	r3, [r5, #0]
 80256ba:	b103      	cbz	r3, 80256be <_read_r+0x1e>
 80256bc:	6023      	str	r3, [r4, #0]
 80256be:	bd38      	pop	{r3, r4, r5, pc}
 80256c0:	20016a94 	.word	0x20016a94

080256c4 <_write_r>:
 80256c4:	b538      	push	{r3, r4, r5, lr}
 80256c6:	4d07      	ldr	r5, [pc, #28]	; (80256e4 <_write_r+0x20>)
 80256c8:	4604      	mov	r4, r0
 80256ca:	4608      	mov	r0, r1
 80256cc:	4611      	mov	r1, r2
 80256ce:	2200      	movs	r2, #0
 80256d0:	602a      	str	r2, [r5, #0]
 80256d2:	461a      	mov	r2, r3
 80256d4:	f7dc f99d 	bl	8001a12 <_write>
 80256d8:	1c43      	adds	r3, r0, #1
 80256da:	d102      	bne.n	80256e2 <_write_r+0x1e>
 80256dc:	682b      	ldr	r3, [r5, #0]
 80256de:	b103      	cbz	r3, 80256e2 <_write_r+0x1e>
 80256e0:	6023      	str	r3, [r4, #0]
 80256e2:	bd38      	pop	{r3, r4, r5, pc}
 80256e4:	20016a94 	.word	0x20016a94

080256e8 <__errno>:
 80256e8:	4b01      	ldr	r3, [pc, #4]	; (80256f0 <__errno+0x8>)
 80256ea:	6818      	ldr	r0, [r3, #0]
 80256ec:	4770      	bx	lr
 80256ee:	bf00      	nop
 80256f0:	200001f8 	.word	0x200001f8

080256f4 <__libc_init_array>:
 80256f4:	b570      	push	{r4, r5, r6, lr}
 80256f6:	4d0d      	ldr	r5, [pc, #52]	; (802572c <__libc_init_array+0x38>)
 80256f8:	4c0d      	ldr	r4, [pc, #52]	; (8025730 <__libc_init_array+0x3c>)
 80256fa:	1b64      	subs	r4, r4, r5
 80256fc:	10a4      	asrs	r4, r4, #2
 80256fe:	2600      	movs	r6, #0
 8025700:	42a6      	cmp	r6, r4
 8025702:	d109      	bne.n	8025718 <__libc_init_array+0x24>
 8025704:	4d0b      	ldr	r5, [pc, #44]	; (8025734 <__libc_init_array+0x40>)
 8025706:	4c0c      	ldr	r4, [pc, #48]	; (8025738 <__libc_init_array+0x44>)
 8025708:	f002 fda0 	bl	802824c <_init>
 802570c:	1b64      	subs	r4, r4, r5
 802570e:	10a4      	asrs	r4, r4, #2
 8025710:	2600      	movs	r6, #0
 8025712:	42a6      	cmp	r6, r4
 8025714:	d105      	bne.n	8025722 <__libc_init_array+0x2e>
 8025716:	bd70      	pop	{r4, r5, r6, pc}
 8025718:	f855 3b04 	ldr.w	r3, [r5], #4
 802571c:	4798      	blx	r3
 802571e:	3601      	adds	r6, #1
 8025720:	e7ee      	b.n	8025700 <__libc_init_array+0xc>
 8025722:	f855 3b04 	ldr.w	r3, [r5], #4
 8025726:	4798      	blx	r3
 8025728:	3601      	adds	r6, #1
 802572a:	e7f2      	b.n	8025712 <__libc_init_array+0x1e>
 802572c:	0802b478 	.word	0x0802b478
 8025730:	0802b478 	.word	0x0802b478
 8025734:	0802b478 	.word	0x0802b478
 8025738:	0802b47c 	.word	0x0802b47c

0802573c <__retarget_lock_acquire_recursive>:
 802573c:	4770      	bx	lr

0802573e <__retarget_lock_release_recursive>:
 802573e:	4770      	bx	lr

08025740 <memcpy>:
 8025740:	440a      	add	r2, r1
 8025742:	4291      	cmp	r1, r2
 8025744:	f100 33ff 	add.w	r3, r0, #4294967295
 8025748:	d100      	bne.n	802574c <memcpy+0xc>
 802574a:	4770      	bx	lr
 802574c:	b510      	push	{r4, lr}
 802574e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025756:	4291      	cmp	r1, r2
 8025758:	d1f9      	bne.n	802574e <memcpy+0xe>
 802575a:	bd10      	pop	{r4, pc}

0802575c <abort>:
 802575c:	b508      	push	{r3, lr}
 802575e:	2006      	movs	r0, #6
 8025760:	f001 ff1e 	bl	80275a0 <raise>
 8025764:	2001      	movs	r0, #1
 8025766:	f7e0 ff71 	bl	800664c <_exit>

0802576a <quorem>:
 802576a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802576e:	6903      	ldr	r3, [r0, #16]
 8025770:	690c      	ldr	r4, [r1, #16]
 8025772:	42a3      	cmp	r3, r4
 8025774:	4607      	mov	r7, r0
 8025776:	db7e      	blt.n	8025876 <quorem+0x10c>
 8025778:	3c01      	subs	r4, #1
 802577a:	f101 0814 	add.w	r8, r1, #20
 802577e:	f100 0514 	add.w	r5, r0, #20
 8025782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025786:	9301      	str	r3, [sp, #4]
 8025788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802578c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025790:	3301      	adds	r3, #1
 8025792:	429a      	cmp	r2, r3
 8025794:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802579c:	fbb2 f6f3 	udiv	r6, r2, r3
 80257a0:	d331      	bcc.n	8025806 <quorem+0x9c>
 80257a2:	f04f 0e00 	mov.w	lr, #0
 80257a6:	4640      	mov	r0, r8
 80257a8:	46ac      	mov	ip, r5
 80257aa:	46f2      	mov	sl, lr
 80257ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80257b0:	b293      	uxth	r3, r2
 80257b2:	fb06 e303 	mla	r3, r6, r3, lr
 80257b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80257ba:	0c1a      	lsrs	r2, r3, #16
 80257bc:	b29b      	uxth	r3, r3
 80257be:	ebaa 0303 	sub.w	r3, sl, r3
 80257c2:	f8dc a000 	ldr.w	sl, [ip]
 80257c6:	fa13 f38a 	uxtah	r3, r3, sl
 80257ca:	fb06 220e 	mla	r2, r6, lr, r2
 80257ce:	9300      	str	r3, [sp, #0]
 80257d0:	9b00      	ldr	r3, [sp, #0]
 80257d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80257d6:	b292      	uxth	r2, r2
 80257d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80257dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80257e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80257e4:	4581      	cmp	r9, r0
 80257e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80257ea:	f84c 3b04 	str.w	r3, [ip], #4
 80257ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80257f2:	d2db      	bcs.n	80257ac <quorem+0x42>
 80257f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80257f8:	b92b      	cbnz	r3, 8025806 <quorem+0x9c>
 80257fa:	9b01      	ldr	r3, [sp, #4]
 80257fc:	3b04      	subs	r3, #4
 80257fe:	429d      	cmp	r5, r3
 8025800:	461a      	mov	r2, r3
 8025802:	d32c      	bcc.n	802585e <quorem+0xf4>
 8025804:	613c      	str	r4, [r7, #16]
 8025806:	4638      	mov	r0, r7
 8025808:	f001 f9a8 	bl	8026b5c <__mcmp>
 802580c:	2800      	cmp	r0, #0
 802580e:	db22      	blt.n	8025856 <quorem+0xec>
 8025810:	3601      	adds	r6, #1
 8025812:	4629      	mov	r1, r5
 8025814:	2000      	movs	r0, #0
 8025816:	f858 2b04 	ldr.w	r2, [r8], #4
 802581a:	f8d1 c000 	ldr.w	ip, [r1]
 802581e:	b293      	uxth	r3, r2
 8025820:	1ac3      	subs	r3, r0, r3
 8025822:	0c12      	lsrs	r2, r2, #16
 8025824:	fa13 f38c 	uxtah	r3, r3, ip
 8025828:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802582c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025830:	b29b      	uxth	r3, r3
 8025832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025836:	45c1      	cmp	r9, r8
 8025838:	f841 3b04 	str.w	r3, [r1], #4
 802583c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8025840:	d2e9      	bcs.n	8025816 <quorem+0xac>
 8025842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802584a:	b922      	cbnz	r2, 8025856 <quorem+0xec>
 802584c:	3b04      	subs	r3, #4
 802584e:	429d      	cmp	r5, r3
 8025850:	461a      	mov	r2, r3
 8025852:	d30a      	bcc.n	802586a <quorem+0x100>
 8025854:	613c      	str	r4, [r7, #16]
 8025856:	4630      	mov	r0, r6
 8025858:	b003      	add	sp, #12
 802585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802585e:	6812      	ldr	r2, [r2, #0]
 8025860:	3b04      	subs	r3, #4
 8025862:	2a00      	cmp	r2, #0
 8025864:	d1ce      	bne.n	8025804 <quorem+0x9a>
 8025866:	3c01      	subs	r4, #1
 8025868:	e7c9      	b.n	80257fe <quorem+0x94>
 802586a:	6812      	ldr	r2, [r2, #0]
 802586c:	3b04      	subs	r3, #4
 802586e:	2a00      	cmp	r2, #0
 8025870:	d1f0      	bne.n	8025854 <quorem+0xea>
 8025872:	3c01      	subs	r4, #1
 8025874:	e7eb      	b.n	802584e <quorem+0xe4>
 8025876:	2000      	movs	r0, #0
 8025878:	e7ee      	b.n	8025858 <quorem+0xee>
 802587a:	0000      	movs	r0, r0
 802587c:	0000      	movs	r0, r0
	...

08025880 <_dtoa_r>:
 8025880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025884:	ed2d 8b04 	vpush	{d8-d9}
 8025888:	69c5      	ldr	r5, [r0, #28]
 802588a:	b093      	sub	sp, #76	; 0x4c
 802588c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025890:	ec57 6b10 	vmov	r6, r7, d0
 8025894:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025898:	9107      	str	r1, [sp, #28]
 802589a:	4604      	mov	r4, r0
 802589c:	920a      	str	r2, [sp, #40]	; 0x28
 802589e:	930d      	str	r3, [sp, #52]	; 0x34
 80258a0:	b975      	cbnz	r5, 80258c0 <_dtoa_r+0x40>
 80258a2:	2010      	movs	r0, #16
 80258a4:	f000 fe2a 	bl	80264fc <malloc>
 80258a8:	4602      	mov	r2, r0
 80258aa:	61e0      	str	r0, [r4, #28]
 80258ac:	b920      	cbnz	r0, 80258b8 <_dtoa_r+0x38>
 80258ae:	4bae      	ldr	r3, [pc, #696]	; (8025b68 <_dtoa_r+0x2e8>)
 80258b0:	21ef      	movs	r1, #239	; 0xef
 80258b2:	48ae      	ldr	r0, [pc, #696]	; (8025b6c <_dtoa_r+0x2ec>)
 80258b4:	f7ff f91c 	bl	8024af0 <__assert_func>
 80258b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80258bc:	6005      	str	r5, [r0, #0]
 80258be:	60c5      	str	r5, [r0, #12]
 80258c0:	69e3      	ldr	r3, [r4, #28]
 80258c2:	6819      	ldr	r1, [r3, #0]
 80258c4:	b151      	cbz	r1, 80258dc <_dtoa_r+0x5c>
 80258c6:	685a      	ldr	r2, [r3, #4]
 80258c8:	604a      	str	r2, [r1, #4]
 80258ca:	2301      	movs	r3, #1
 80258cc:	4093      	lsls	r3, r2
 80258ce:	608b      	str	r3, [r1, #8]
 80258d0:	4620      	mov	r0, r4
 80258d2:	f000 ff07 	bl	80266e4 <_Bfree>
 80258d6:	69e3      	ldr	r3, [r4, #28]
 80258d8:	2200      	movs	r2, #0
 80258da:	601a      	str	r2, [r3, #0]
 80258dc:	1e3b      	subs	r3, r7, #0
 80258de:	bfbb      	ittet	lt
 80258e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80258e4:	9303      	strlt	r3, [sp, #12]
 80258e6:	2300      	movge	r3, #0
 80258e8:	2201      	movlt	r2, #1
 80258ea:	bfac      	ite	ge
 80258ec:	f8c8 3000 	strge.w	r3, [r8]
 80258f0:	f8c8 2000 	strlt.w	r2, [r8]
 80258f4:	4b9e      	ldr	r3, [pc, #632]	; (8025b70 <_dtoa_r+0x2f0>)
 80258f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80258fa:	ea33 0308 	bics.w	r3, r3, r8
 80258fe:	d11b      	bne.n	8025938 <_dtoa_r+0xb8>
 8025900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025902:	f242 730f 	movw	r3, #9999	; 0x270f
 8025906:	6013      	str	r3, [r2, #0]
 8025908:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802590c:	4333      	orrs	r3, r6
 802590e:	f000 8593 	beq.w	8026438 <_dtoa_r+0xbb8>
 8025912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025914:	b963      	cbnz	r3, 8025930 <_dtoa_r+0xb0>
 8025916:	4b97      	ldr	r3, [pc, #604]	; (8025b74 <_dtoa_r+0x2f4>)
 8025918:	e027      	b.n	802596a <_dtoa_r+0xea>
 802591a:	4b97      	ldr	r3, [pc, #604]	; (8025b78 <_dtoa_r+0x2f8>)
 802591c:	9300      	str	r3, [sp, #0]
 802591e:	3308      	adds	r3, #8
 8025920:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025922:	6013      	str	r3, [r2, #0]
 8025924:	9800      	ldr	r0, [sp, #0]
 8025926:	b013      	add	sp, #76	; 0x4c
 8025928:	ecbd 8b04 	vpop	{d8-d9}
 802592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025930:	4b90      	ldr	r3, [pc, #576]	; (8025b74 <_dtoa_r+0x2f4>)
 8025932:	9300      	str	r3, [sp, #0]
 8025934:	3303      	adds	r3, #3
 8025936:	e7f3      	b.n	8025920 <_dtoa_r+0xa0>
 8025938:	ed9d 7b02 	vldr	d7, [sp, #8]
 802593c:	2200      	movs	r2, #0
 802593e:	ec51 0b17 	vmov	r0, r1, d7
 8025942:	eeb0 8a47 	vmov.f32	s16, s14
 8025946:	eef0 8a67 	vmov.f32	s17, s15
 802594a:	2300      	movs	r3, #0
 802594c:	f7db f8e4 	bl	8000b18 <__aeabi_dcmpeq>
 8025950:	4681      	mov	r9, r0
 8025952:	b160      	cbz	r0, 802596e <_dtoa_r+0xee>
 8025954:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025956:	2301      	movs	r3, #1
 8025958:	6013      	str	r3, [r2, #0]
 802595a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802595c:	2b00      	cmp	r3, #0
 802595e:	f000 8568 	beq.w	8026432 <_dtoa_r+0xbb2>
 8025962:	4b86      	ldr	r3, [pc, #536]	; (8025b7c <_dtoa_r+0x2fc>)
 8025964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025966:	6013      	str	r3, [r2, #0]
 8025968:	3b01      	subs	r3, #1
 802596a:	9300      	str	r3, [sp, #0]
 802596c:	e7da      	b.n	8025924 <_dtoa_r+0xa4>
 802596e:	aa10      	add	r2, sp, #64	; 0x40
 8025970:	a911      	add	r1, sp, #68	; 0x44
 8025972:	4620      	mov	r0, r4
 8025974:	eeb0 0a48 	vmov.f32	s0, s16
 8025978:	eef0 0a68 	vmov.f32	s1, s17
 802597c:	f001 f994 	bl	8026ca8 <__d2b>
 8025980:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8025984:	4682      	mov	sl, r0
 8025986:	2d00      	cmp	r5, #0
 8025988:	d07f      	beq.n	8025a8a <_dtoa_r+0x20a>
 802598a:	ee18 3a90 	vmov	r3, s17
 802598e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025992:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8025996:	ec51 0b18 	vmov	r0, r1, d8
 802599a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802599e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80259a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80259a6:	4619      	mov	r1, r3
 80259a8:	2200      	movs	r2, #0
 80259aa:	4b75      	ldr	r3, [pc, #468]	; (8025b80 <_dtoa_r+0x300>)
 80259ac:	f7da fc94 	bl	80002d8 <__aeabi_dsub>
 80259b0:	a367      	add	r3, pc, #412	; (adr r3, 8025b50 <_dtoa_r+0x2d0>)
 80259b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259b6:	f7da fe47 	bl	8000648 <__aeabi_dmul>
 80259ba:	a367      	add	r3, pc, #412	; (adr r3, 8025b58 <_dtoa_r+0x2d8>)
 80259bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259c0:	f7da fc8c 	bl	80002dc <__adddf3>
 80259c4:	4606      	mov	r6, r0
 80259c6:	4628      	mov	r0, r5
 80259c8:	460f      	mov	r7, r1
 80259ca:	f7da fdd3 	bl	8000574 <__aeabi_i2d>
 80259ce:	a364      	add	r3, pc, #400	; (adr r3, 8025b60 <_dtoa_r+0x2e0>)
 80259d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259d4:	f7da fe38 	bl	8000648 <__aeabi_dmul>
 80259d8:	4602      	mov	r2, r0
 80259da:	460b      	mov	r3, r1
 80259dc:	4630      	mov	r0, r6
 80259de:	4639      	mov	r1, r7
 80259e0:	f7da fc7c 	bl	80002dc <__adddf3>
 80259e4:	4606      	mov	r6, r0
 80259e6:	460f      	mov	r7, r1
 80259e8:	f7db f8de 	bl	8000ba8 <__aeabi_d2iz>
 80259ec:	2200      	movs	r2, #0
 80259ee:	4683      	mov	fp, r0
 80259f0:	2300      	movs	r3, #0
 80259f2:	4630      	mov	r0, r6
 80259f4:	4639      	mov	r1, r7
 80259f6:	f7db f899 	bl	8000b2c <__aeabi_dcmplt>
 80259fa:	b148      	cbz	r0, 8025a10 <_dtoa_r+0x190>
 80259fc:	4658      	mov	r0, fp
 80259fe:	f7da fdb9 	bl	8000574 <__aeabi_i2d>
 8025a02:	4632      	mov	r2, r6
 8025a04:	463b      	mov	r3, r7
 8025a06:	f7db f887 	bl	8000b18 <__aeabi_dcmpeq>
 8025a0a:	b908      	cbnz	r0, 8025a10 <_dtoa_r+0x190>
 8025a0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025a10:	f1bb 0f16 	cmp.w	fp, #22
 8025a14:	d857      	bhi.n	8025ac6 <_dtoa_r+0x246>
 8025a16:	4b5b      	ldr	r3, [pc, #364]	; (8025b84 <_dtoa_r+0x304>)
 8025a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a20:	ec51 0b18 	vmov	r0, r1, d8
 8025a24:	f7db f882 	bl	8000b2c <__aeabi_dcmplt>
 8025a28:	2800      	cmp	r0, #0
 8025a2a:	d04e      	beq.n	8025aca <_dtoa_r+0x24a>
 8025a2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025a30:	2300      	movs	r3, #0
 8025a32:	930c      	str	r3, [sp, #48]	; 0x30
 8025a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a36:	1b5b      	subs	r3, r3, r5
 8025a38:	1e5a      	subs	r2, r3, #1
 8025a3a:	bf45      	ittet	mi
 8025a3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8025a40:	9305      	strmi	r3, [sp, #20]
 8025a42:	2300      	movpl	r3, #0
 8025a44:	2300      	movmi	r3, #0
 8025a46:	9206      	str	r2, [sp, #24]
 8025a48:	bf54      	ite	pl
 8025a4a:	9305      	strpl	r3, [sp, #20]
 8025a4c:	9306      	strmi	r3, [sp, #24]
 8025a4e:	f1bb 0f00 	cmp.w	fp, #0
 8025a52:	db3c      	blt.n	8025ace <_dtoa_r+0x24e>
 8025a54:	9b06      	ldr	r3, [sp, #24]
 8025a56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8025a5a:	445b      	add	r3, fp
 8025a5c:	9306      	str	r3, [sp, #24]
 8025a5e:	2300      	movs	r3, #0
 8025a60:	9308      	str	r3, [sp, #32]
 8025a62:	9b07      	ldr	r3, [sp, #28]
 8025a64:	2b09      	cmp	r3, #9
 8025a66:	d868      	bhi.n	8025b3a <_dtoa_r+0x2ba>
 8025a68:	2b05      	cmp	r3, #5
 8025a6a:	bfc4      	itt	gt
 8025a6c:	3b04      	subgt	r3, #4
 8025a6e:	9307      	strgt	r3, [sp, #28]
 8025a70:	9b07      	ldr	r3, [sp, #28]
 8025a72:	f1a3 0302 	sub.w	r3, r3, #2
 8025a76:	bfcc      	ite	gt
 8025a78:	2500      	movgt	r5, #0
 8025a7a:	2501      	movle	r5, #1
 8025a7c:	2b03      	cmp	r3, #3
 8025a7e:	f200 8085 	bhi.w	8025b8c <_dtoa_r+0x30c>
 8025a82:	e8df f003 	tbb	[pc, r3]
 8025a86:	3b2e      	.short	0x3b2e
 8025a88:	5839      	.short	0x5839
 8025a8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8025a8e:	441d      	add	r5, r3
 8025a90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8025a94:	2b20      	cmp	r3, #32
 8025a96:	bfc1      	itttt	gt
 8025a98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025a9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8025aa0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8025aa4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8025aa8:	bfd6      	itet	le
 8025aaa:	f1c3 0320 	rsble	r3, r3, #32
 8025aae:	ea48 0003 	orrgt.w	r0, r8, r3
 8025ab2:	fa06 f003 	lslle.w	r0, r6, r3
 8025ab6:	f7da fd4d 	bl	8000554 <__aeabi_ui2d>
 8025aba:	2201      	movs	r2, #1
 8025abc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8025ac0:	3d01      	subs	r5, #1
 8025ac2:	920e      	str	r2, [sp, #56]	; 0x38
 8025ac4:	e76f      	b.n	80259a6 <_dtoa_r+0x126>
 8025ac6:	2301      	movs	r3, #1
 8025ac8:	e7b3      	b.n	8025a32 <_dtoa_r+0x1b2>
 8025aca:	900c      	str	r0, [sp, #48]	; 0x30
 8025acc:	e7b2      	b.n	8025a34 <_dtoa_r+0x1b4>
 8025ace:	9b05      	ldr	r3, [sp, #20]
 8025ad0:	eba3 030b 	sub.w	r3, r3, fp
 8025ad4:	9305      	str	r3, [sp, #20]
 8025ad6:	f1cb 0300 	rsb	r3, fp, #0
 8025ada:	9308      	str	r3, [sp, #32]
 8025adc:	2300      	movs	r3, #0
 8025ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ae0:	e7bf      	b.n	8025a62 <_dtoa_r+0x1e2>
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8025ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	dc52      	bgt.n	8025b92 <_dtoa_r+0x312>
 8025aec:	2301      	movs	r3, #1
 8025aee:	9301      	str	r3, [sp, #4]
 8025af0:	9304      	str	r3, [sp, #16]
 8025af2:	461a      	mov	r2, r3
 8025af4:	920a      	str	r2, [sp, #40]	; 0x28
 8025af6:	e00b      	b.n	8025b10 <_dtoa_r+0x290>
 8025af8:	2301      	movs	r3, #1
 8025afa:	e7f3      	b.n	8025ae4 <_dtoa_r+0x264>
 8025afc:	2300      	movs	r3, #0
 8025afe:	9309      	str	r3, [sp, #36]	; 0x24
 8025b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b02:	445b      	add	r3, fp
 8025b04:	9301      	str	r3, [sp, #4]
 8025b06:	3301      	adds	r3, #1
 8025b08:	2b01      	cmp	r3, #1
 8025b0a:	9304      	str	r3, [sp, #16]
 8025b0c:	bfb8      	it	lt
 8025b0e:	2301      	movlt	r3, #1
 8025b10:	69e0      	ldr	r0, [r4, #28]
 8025b12:	2100      	movs	r1, #0
 8025b14:	2204      	movs	r2, #4
 8025b16:	f102 0614 	add.w	r6, r2, #20
 8025b1a:	429e      	cmp	r6, r3
 8025b1c:	d93d      	bls.n	8025b9a <_dtoa_r+0x31a>
 8025b1e:	6041      	str	r1, [r0, #4]
 8025b20:	4620      	mov	r0, r4
 8025b22:	f000 fd9f 	bl	8026664 <_Balloc>
 8025b26:	9000      	str	r0, [sp, #0]
 8025b28:	2800      	cmp	r0, #0
 8025b2a:	d139      	bne.n	8025ba0 <_dtoa_r+0x320>
 8025b2c:	4b16      	ldr	r3, [pc, #88]	; (8025b88 <_dtoa_r+0x308>)
 8025b2e:	4602      	mov	r2, r0
 8025b30:	f240 11af 	movw	r1, #431	; 0x1af
 8025b34:	e6bd      	b.n	80258b2 <_dtoa_r+0x32>
 8025b36:	2301      	movs	r3, #1
 8025b38:	e7e1      	b.n	8025afe <_dtoa_r+0x27e>
 8025b3a:	2501      	movs	r5, #1
 8025b3c:	2300      	movs	r3, #0
 8025b3e:	9307      	str	r3, [sp, #28]
 8025b40:	9509      	str	r5, [sp, #36]	; 0x24
 8025b42:	f04f 33ff 	mov.w	r3, #4294967295
 8025b46:	9301      	str	r3, [sp, #4]
 8025b48:	9304      	str	r3, [sp, #16]
 8025b4a:	2200      	movs	r2, #0
 8025b4c:	2312      	movs	r3, #18
 8025b4e:	e7d1      	b.n	8025af4 <_dtoa_r+0x274>
 8025b50:	636f4361 	.word	0x636f4361
 8025b54:	3fd287a7 	.word	0x3fd287a7
 8025b58:	8b60c8b3 	.word	0x8b60c8b3
 8025b5c:	3fc68a28 	.word	0x3fc68a28
 8025b60:	509f79fb 	.word	0x509f79fb
 8025b64:	3fd34413 	.word	0x3fd34413
 8025b68:	0802adb0 	.word	0x0802adb0
 8025b6c:	0802adc7 	.word	0x0802adc7
 8025b70:	7ff00000 	.word	0x7ff00000
 8025b74:	0802adac 	.word	0x0802adac
 8025b78:	0802ada3 	.word	0x0802ada3
 8025b7c:	0802ad80 	.word	0x0802ad80
 8025b80:	3ff80000 	.word	0x3ff80000
 8025b84:	0802aeb8 	.word	0x0802aeb8
 8025b88:	0802ae1f 	.word	0x0802ae1f
 8025b8c:	2301      	movs	r3, #1
 8025b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8025b90:	e7d7      	b.n	8025b42 <_dtoa_r+0x2c2>
 8025b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b94:	9301      	str	r3, [sp, #4]
 8025b96:	9304      	str	r3, [sp, #16]
 8025b98:	e7ba      	b.n	8025b10 <_dtoa_r+0x290>
 8025b9a:	3101      	adds	r1, #1
 8025b9c:	0052      	lsls	r2, r2, #1
 8025b9e:	e7ba      	b.n	8025b16 <_dtoa_r+0x296>
 8025ba0:	69e3      	ldr	r3, [r4, #28]
 8025ba2:	9a00      	ldr	r2, [sp, #0]
 8025ba4:	601a      	str	r2, [r3, #0]
 8025ba6:	9b04      	ldr	r3, [sp, #16]
 8025ba8:	2b0e      	cmp	r3, #14
 8025baa:	f200 80a8 	bhi.w	8025cfe <_dtoa_r+0x47e>
 8025bae:	2d00      	cmp	r5, #0
 8025bb0:	f000 80a5 	beq.w	8025cfe <_dtoa_r+0x47e>
 8025bb4:	f1bb 0f00 	cmp.w	fp, #0
 8025bb8:	dd38      	ble.n	8025c2c <_dtoa_r+0x3ac>
 8025bba:	4bc0      	ldr	r3, [pc, #768]	; (8025ebc <_dtoa_r+0x63c>)
 8025bbc:	f00b 020f 	and.w	r2, fp, #15
 8025bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025bc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8025bc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8025bcc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8025bd0:	d019      	beq.n	8025c06 <_dtoa_r+0x386>
 8025bd2:	4bbb      	ldr	r3, [pc, #748]	; (8025ec0 <_dtoa_r+0x640>)
 8025bd4:	ec51 0b18 	vmov	r0, r1, d8
 8025bd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025bdc:	f7da fe5e 	bl	800089c <__aeabi_ddiv>
 8025be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025be4:	f008 080f 	and.w	r8, r8, #15
 8025be8:	2503      	movs	r5, #3
 8025bea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8025ec0 <_dtoa_r+0x640>
 8025bee:	f1b8 0f00 	cmp.w	r8, #0
 8025bf2:	d10a      	bne.n	8025c0a <_dtoa_r+0x38a>
 8025bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025bf8:	4632      	mov	r2, r6
 8025bfa:	463b      	mov	r3, r7
 8025bfc:	f7da fe4e 	bl	800089c <__aeabi_ddiv>
 8025c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025c04:	e02b      	b.n	8025c5e <_dtoa_r+0x3de>
 8025c06:	2502      	movs	r5, #2
 8025c08:	e7ef      	b.n	8025bea <_dtoa_r+0x36a>
 8025c0a:	f018 0f01 	tst.w	r8, #1
 8025c0e:	d008      	beq.n	8025c22 <_dtoa_r+0x3a2>
 8025c10:	4630      	mov	r0, r6
 8025c12:	4639      	mov	r1, r7
 8025c14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8025c18:	f7da fd16 	bl	8000648 <__aeabi_dmul>
 8025c1c:	3501      	adds	r5, #1
 8025c1e:	4606      	mov	r6, r0
 8025c20:	460f      	mov	r7, r1
 8025c22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8025c26:	f109 0908 	add.w	r9, r9, #8
 8025c2a:	e7e0      	b.n	8025bee <_dtoa_r+0x36e>
 8025c2c:	f000 809f 	beq.w	8025d6e <_dtoa_r+0x4ee>
 8025c30:	f1cb 0600 	rsb	r6, fp, #0
 8025c34:	4ba1      	ldr	r3, [pc, #644]	; (8025ebc <_dtoa_r+0x63c>)
 8025c36:	4fa2      	ldr	r7, [pc, #648]	; (8025ec0 <_dtoa_r+0x640>)
 8025c38:	f006 020f 	and.w	r2, r6, #15
 8025c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c44:	ec51 0b18 	vmov	r0, r1, d8
 8025c48:	f7da fcfe 	bl	8000648 <__aeabi_dmul>
 8025c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025c50:	1136      	asrs	r6, r6, #4
 8025c52:	2300      	movs	r3, #0
 8025c54:	2502      	movs	r5, #2
 8025c56:	2e00      	cmp	r6, #0
 8025c58:	d17e      	bne.n	8025d58 <_dtoa_r+0x4d8>
 8025c5a:	2b00      	cmp	r3, #0
 8025c5c:	d1d0      	bne.n	8025c00 <_dtoa_r+0x380>
 8025c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	f000 8084 	beq.w	8025d72 <_dtoa_r+0x4f2>
 8025c6a:	4b96      	ldr	r3, [pc, #600]	; (8025ec4 <_dtoa_r+0x644>)
 8025c6c:	2200      	movs	r2, #0
 8025c6e:	4640      	mov	r0, r8
 8025c70:	4649      	mov	r1, r9
 8025c72:	f7da ff5b 	bl	8000b2c <__aeabi_dcmplt>
 8025c76:	2800      	cmp	r0, #0
 8025c78:	d07b      	beq.n	8025d72 <_dtoa_r+0x4f2>
 8025c7a:	9b04      	ldr	r3, [sp, #16]
 8025c7c:	2b00      	cmp	r3, #0
 8025c7e:	d078      	beq.n	8025d72 <_dtoa_r+0x4f2>
 8025c80:	9b01      	ldr	r3, [sp, #4]
 8025c82:	2b00      	cmp	r3, #0
 8025c84:	dd39      	ble.n	8025cfa <_dtoa_r+0x47a>
 8025c86:	4b90      	ldr	r3, [pc, #576]	; (8025ec8 <_dtoa_r+0x648>)
 8025c88:	2200      	movs	r2, #0
 8025c8a:	4640      	mov	r0, r8
 8025c8c:	4649      	mov	r1, r9
 8025c8e:	f7da fcdb 	bl	8000648 <__aeabi_dmul>
 8025c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025c96:	9e01      	ldr	r6, [sp, #4]
 8025c98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8025c9c:	3501      	adds	r5, #1
 8025c9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8025ca2:	4628      	mov	r0, r5
 8025ca4:	f7da fc66 	bl	8000574 <__aeabi_i2d>
 8025ca8:	4642      	mov	r2, r8
 8025caa:	464b      	mov	r3, r9
 8025cac:	f7da fccc 	bl	8000648 <__aeabi_dmul>
 8025cb0:	4b86      	ldr	r3, [pc, #536]	; (8025ecc <_dtoa_r+0x64c>)
 8025cb2:	2200      	movs	r2, #0
 8025cb4:	f7da fb12 	bl	80002dc <__adddf3>
 8025cb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8025cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025cc0:	9303      	str	r3, [sp, #12]
 8025cc2:	2e00      	cmp	r6, #0
 8025cc4:	d158      	bne.n	8025d78 <_dtoa_r+0x4f8>
 8025cc6:	4b82      	ldr	r3, [pc, #520]	; (8025ed0 <_dtoa_r+0x650>)
 8025cc8:	2200      	movs	r2, #0
 8025cca:	4640      	mov	r0, r8
 8025ccc:	4649      	mov	r1, r9
 8025cce:	f7da fb03 	bl	80002d8 <__aeabi_dsub>
 8025cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025cd6:	4680      	mov	r8, r0
 8025cd8:	4689      	mov	r9, r1
 8025cda:	f7da ff45 	bl	8000b68 <__aeabi_dcmpgt>
 8025cde:	2800      	cmp	r0, #0
 8025ce0:	f040 8296 	bne.w	8026210 <_dtoa_r+0x990>
 8025ce4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8025ce8:	4640      	mov	r0, r8
 8025cea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025cee:	4649      	mov	r1, r9
 8025cf0:	f7da ff1c 	bl	8000b2c <__aeabi_dcmplt>
 8025cf4:	2800      	cmp	r0, #0
 8025cf6:	f040 8289 	bne.w	802620c <_dtoa_r+0x98c>
 8025cfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8025cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025d00:	2b00      	cmp	r3, #0
 8025d02:	f2c0 814e 	blt.w	8025fa2 <_dtoa_r+0x722>
 8025d06:	f1bb 0f0e 	cmp.w	fp, #14
 8025d0a:	f300 814a 	bgt.w	8025fa2 <_dtoa_r+0x722>
 8025d0e:	4b6b      	ldr	r3, [pc, #428]	; (8025ebc <_dtoa_r+0x63c>)
 8025d10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	f280 80dc 	bge.w	8025ed8 <_dtoa_r+0x658>
 8025d20:	9b04      	ldr	r3, [sp, #16]
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	f300 80d8 	bgt.w	8025ed8 <_dtoa_r+0x658>
 8025d28:	f040 826f 	bne.w	802620a <_dtoa_r+0x98a>
 8025d2c:	4b68      	ldr	r3, [pc, #416]	; (8025ed0 <_dtoa_r+0x650>)
 8025d2e:	2200      	movs	r2, #0
 8025d30:	4640      	mov	r0, r8
 8025d32:	4649      	mov	r1, r9
 8025d34:	f7da fc88 	bl	8000648 <__aeabi_dmul>
 8025d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025d3c:	f7da ff0a 	bl	8000b54 <__aeabi_dcmpge>
 8025d40:	9e04      	ldr	r6, [sp, #16]
 8025d42:	4637      	mov	r7, r6
 8025d44:	2800      	cmp	r0, #0
 8025d46:	f040 8245 	bne.w	80261d4 <_dtoa_r+0x954>
 8025d4a:	9d00      	ldr	r5, [sp, #0]
 8025d4c:	2331      	movs	r3, #49	; 0x31
 8025d4e:	f805 3b01 	strb.w	r3, [r5], #1
 8025d52:	f10b 0b01 	add.w	fp, fp, #1
 8025d56:	e241      	b.n	80261dc <_dtoa_r+0x95c>
 8025d58:	07f2      	lsls	r2, r6, #31
 8025d5a:	d505      	bpl.n	8025d68 <_dtoa_r+0x4e8>
 8025d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025d60:	f7da fc72 	bl	8000648 <__aeabi_dmul>
 8025d64:	3501      	adds	r5, #1
 8025d66:	2301      	movs	r3, #1
 8025d68:	1076      	asrs	r6, r6, #1
 8025d6a:	3708      	adds	r7, #8
 8025d6c:	e773      	b.n	8025c56 <_dtoa_r+0x3d6>
 8025d6e:	2502      	movs	r5, #2
 8025d70:	e775      	b.n	8025c5e <_dtoa_r+0x3de>
 8025d72:	9e04      	ldr	r6, [sp, #16]
 8025d74:	465f      	mov	r7, fp
 8025d76:	e792      	b.n	8025c9e <_dtoa_r+0x41e>
 8025d78:	9900      	ldr	r1, [sp, #0]
 8025d7a:	4b50      	ldr	r3, [pc, #320]	; (8025ebc <_dtoa_r+0x63c>)
 8025d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025d80:	4431      	add	r1, r6
 8025d82:	9102      	str	r1, [sp, #8]
 8025d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025d86:	eeb0 9a47 	vmov.f32	s18, s14
 8025d8a:	eef0 9a67 	vmov.f32	s19, s15
 8025d8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025d92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025d96:	2900      	cmp	r1, #0
 8025d98:	d044      	beq.n	8025e24 <_dtoa_r+0x5a4>
 8025d9a:	494e      	ldr	r1, [pc, #312]	; (8025ed4 <_dtoa_r+0x654>)
 8025d9c:	2000      	movs	r0, #0
 8025d9e:	f7da fd7d 	bl	800089c <__aeabi_ddiv>
 8025da2:	ec53 2b19 	vmov	r2, r3, d9
 8025da6:	f7da fa97 	bl	80002d8 <__aeabi_dsub>
 8025daa:	9d00      	ldr	r5, [sp, #0]
 8025dac:	ec41 0b19 	vmov	d9, r0, r1
 8025db0:	4649      	mov	r1, r9
 8025db2:	4640      	mov	r0, r8
 8025db4:	f7da fef8 	bl	8000ba8 <__aeabi_d2iz>
 8025db8:	4606      	mov	r6, r0
 8025dba:	f7da fbdb 	bl	8000574 <__aeabi_i2d>
 8025dbe:	4602      	mov	r2, r0
 8025dc0:	460b      	mov	r3, r1
 8025dc2:	4640      	mov	r0, r8
 8025dc4:	4649      	mov	r1, r9
 8025dc6:	f7da fa87 	bl	80002d8 <__aeabi_dsub>
 8025dca:	3630      	adds	r6, #48	; 0x30
 8025dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8025dd0:	ec53 2b19 	vmov	r2, r3, d9
 8025dd4:	4680      	mov	r8, r0
 8025dd6:	4689      	mov	r9, r1
 8025dd8:	f7da fea8 	bl	8000b2c <__aeabi_dcmplt>
 8025ddc:	2800      	cmp	r0, #0
 8025dde:	d164      	bne.n	8025eaa <_dtoa_r+0x62a>
 8025de0:	4642      	mov	r2, r8
 8025de2:	464b      	mov	r3, r9
 8025de4:	4937      	ldr	r1, [pc, #220]	; (8025ec4 <_dtoa_r+0x644>)
 8025de6:	2000      	movs	r0, #0
 8025de8:	f7da fa76 	bl	80002d8 <__aeabi_dsub>
 8025dec:	ec53 2b19 	vmov	r2, r3, d9
 8025df0:	f7da fe9c 	bl	8000b2c <__aeabi_dcmplt>
 8025df4:	2800      	cmp	r0, #0
 8025df6:	f040 80b6 	bne.w	8025f66 <_dtoa_r+0x6e6>
 8025dfa:	9b02      	ldr	r3, [sp, #8]
 8025dfc:	429d      	cmp	r5, r3
 8025dfe:	f43f af7c 	beq.w	8025cfa <_dtoa_r+0x47a>
 8025e02:	4b31      	ldr	r3, [pc, #196]	; (8025ec8 <_dtoa_r+0x648>)
 8025e04:	ec51 0b19 	vmov	r0, r1, d9
 8025e08:	2200      	movs	r2, #0
 8025e0a:	f7da fc1d 	bl	8000648 <__aeabi_dmul>
 8025e0e:	4b2e      	ldr	r3, [pc, #184]	; (8025ec8 <_dtoa_r+0x648>)
 8025e10:	ec41 0b19 	vmov	d9, r0, r1
 8025e14:	2200      	movs	r2, #0
 8025e16:	4640      	mov	r0, r8
 8025e18:	4649      	mov	r1, r9
 8025e1a:	f7da fc15 	bl	8000648 <__aeabi_dmul>
 8025e1e:	4680      	mov	r8, r0
 8025e20:	4689      	mov	r9, r1
 8025e22:	e7c5      	b.n	8025db0 <_dtoa_r+0x530>
 8025e24:	ec51 0b17 	vmov	r0, r1, d7
 8025e28:	f7da fc0e 	bl	8000648 <__aeabi_dmul>
 8025e2c:	9b02      	ldr	r3, [sp, #8]
 8025e2e:	9d00      	ldr	r5, [sp, #0]
 8025e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e32:	ec41 0b19 	vmov	d9, r0, r1
 8025e36:	4649      	mov	r1, r9
 8025e38:	4640      	mov	r0, r8
 8025e3a:	f7da feb5 	bl	8000ba8 <__aeabi_d2iz>
 8025e3e:	4606      	mov	r6, r0
 8025e40:	f7da fb98 	bl	8000574 <__aeabi_i2d>
 8025e44:	3630      	adds	r6, #48	; 0x30
 8025e46:	4602      	mov	r2, r0
 8025e48:	460b      	mov	r3, r1
 8025e4a:	4640      	mov	r0, r8
 8025e4c:	4649      	mov	r1, r9
 8025e4e:	f7da fa43 	bl	80002d8 <__aeabi_dsub>
 8025e52:	f805 6b01 	strb.w	r6, [r5], #1
 8025e56:	9b02      	ldr	r3, [sp, #8]
 8025e58:	429d      	cmp	r5, r3
 8025e5a:	4680      	mov	r8, r0
 8025e5c:	4689      	mov	r9, r1
 8025e5e:	f04f 0200 	mov.w	r2, #0
 8025e62:	d124      	bne.n	8025eae <_dtoa_r+0x62e>
 8025e64:	4b1b      	ldr	r3, [pc, #108]	; (8025ed4 <_dtoa_r+0x654>)
 8025e66:	ec51 0b19 	vmov	r0, r1, d9
 8025e6a:	f7da fa37 	bl	80002dc <__adddf3>
 8025e6e:	4602      	mov	r2, r0
 8025e70:	460b      	mov	r3, r1
 8025e72:	4640      	mov	r0, r8
 8025e74:	4649      	mov	r1, r9
 8025e76:	f7da fe77 	bl	8000b68 <__aeabi_dcmpgt>
 8025e7a:	2800      	cmp	r0, #0
 8025e7c:	d173      	bne.n	8025f66 <_dtoa_r+0x6e6>
 8025e7e:	ec53 2b19 	vmov	r2, r3, d9
 8025e82:	4914      	ldr	r1, [pc, #80]	; (8025ed4 <_dtoa_r+0x654>)
 8025e84:	2000      	movs	r0, #0
 8025e86:	f7da fa27 	bl	80002d8 <__aeabi_dsub>
 8025e8a:	4602      	mov	r2, r0
 8025e8c:	460b      	mov	r3, r1
 8025e8e:	4640      	mov	r0, r8
 8025e90:	4649      	mov	r1, r9
 8025e92:	f7da fe4b 	bl	8000b2c <__aeabi_dcmplt>
 8025e96:	2800      	cmp	r0, #0
 8025e98:	f43f af2f 	beq.w	8025cfa <_dtoa_r+0x47a>
 8025e9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025e9e:	1e6b      	subs	r3, r5, #1
 8025ea0:	930f      	str	r3, [sp, #60]	; 0x3c
 8025ea2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025ea6:	2b30      	cmp	r3, #48	; 0x30
 8025ea8:	d0f8      	beq.n	8025e9c <_dtoa_r+0x61c>
 8025eaa:	46bb      	mov	fp, r7
 8025eac:	e04a      	b.n	8025f44 <_dtoa_r+0x6c4>
 8025eae:	4b06      	ldr	r3, [pc, #24]	; (8025ec8 <_dtoa_r+0x648>)
 8025eb0:	f7da fbca 	bl	8000648 <__aeabi_dmul>
 8025eb4:	4680      	mov	r8, r0
 8025eb6:	4689      	mov	r9, r1
 8025eb8:	e7bd      	b.n	8025e36 <_dtoa_r+0x5b6>
 8025eba:	bf00      	nop
 8025ebc:	0802aeb8 	.word	0x0802aeb8
 8025ec0:	0802ae90 	.word	0x0802ae90
 8025ec4:	3ff00000 	.word	0x3ff00000
 8025ec8:	40240000 	.word	0x40240000
 8025ecc:	401c0000 	.word	0x401c0000
 8025ed0:	40140000 	.word	0x40140000
 8025ed4:	3fe00000 	.word	0x3fe00000
 8025ed8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025edc:	9d00      	ldr	r5, [sp, #0]
 8025ede:	4642      	mov	r2, r8
 8025ee0:	464b      	mov	r3, r9
 8025ee2:	4630      	mov	r0, r6
 8025ee4:	4639      	mov	r1, r7
 8025ee6:	f7da fcd9 	bl	800089c <__aeabi_ddiv>
 8025eea:	f7da fe5d 	bl	8000ba8 <__aeabi_d2iz>
 8025eee:	9001      	str	r0, [sp, #4]
 8025ef0:	f7da fb40 	bl	8000574 <__aeabi_i2d>
 8025ef4:	4642      	mov	r2, r8
 8025ef6:	464b      	mov	r3, r9
 8025ef8:	f7da fba6 	bl	8000648 <__aeabi_dmul>
 8025efc:	4602      	mov	r2, r0
 8025efe:	460b      	mov	r3, r1
 8025f00:	4630      	mov	r0, r6
 8025f02:	4639      	mov	r1, r7
 8025f04:	f7da f9e8 	bl	80002d8 <__aeabi_dsub>
 8025f08:	9e01      	ldr	r6, [sp, #4]
 8025f0a:	9f04      	ldr	r7, [sp, #16]
 8025f0c:	3630      	adds	r6, #48	; 0x30
 8025f0e:	f805 6b01 	strb.w	r6, [r5], #1
 8025f12:	9e00      	ldr	r6, [sp, #0]
 8025f14:	1bae      	subs	r6, r5, r6
 8025f16:	42b7      	cmp	r7, r6
 8025f18:	4602      	mov	r2, r0
 8025f1a:	460b      	mov	r3, r1
 8025f1c:	d134      	bne.n	8025f88 <_dtoa_r+0x708>
 8025f1e:	f7da f9dd 	bl	80002dc <__adddf3>
 8025f22:	4642      	mov	r2, r8
 8025f24:	464b      	mov	r3, r9
 8025f26:	4606      	mov	r6, r0
 8025f28:	460f      	mov	r7, r1
 8025f2a:	f7da fe1d 	bl	8000b68 <__aeabi_dcmpgt>
 8025f2e:	b9c8      	cbnz	r0, 8025f64 <_dtoa_r+0x6e4>
 8025f30:	4642      	mov	r2, r8
 8025f32:	464b      	mov	r3, r9
 8025f34:	4630      	mov	r0, r6
 8025f36:	4639      	mov	r1, r7
 8025f38:	f7da fdee 	bl	8000b18 <__aeabi_dcmpeq>
 8025f3c:	b110      	cbz	r0, 8025f44 <_dtoa_r+0x6c4>
 8025f3e:	9b01      	ldr	r3, [sp, #4]
 8025f40:	07db      	lsls	r3, r3, #31
 8025f42:	d40f      	bmi.n	8025f64 <_dtoa_r+0x6e4>
 8025f44:	4651      	mov	r1, sl
 8025f46:	4620      	mov	r0, r4
 8025f48:	f000 fbcc 	bl	80266e4 <_Bfree>
 8025f4c:	2300      	movs	r3, #0
 8025f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025f50:	702b      	strb	r3, [r5, #0]
 8025f52:	f10b 0301 	add.w	r3, fp, #1
 8025f56:	6013      	str	r3, [r2, #0]
 8025f58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	f43f ace2 	beq.w	8025924 <_dtoa_r+0xa4>
 8025f60:	601d      	str	r5, [r3, #0]
 8025f62:	e4df      	b.n	8025924 <_dtoa_r+0xa4>
 8025f64:	465f      	mov	r7, fp
 8025f66:	462b      	mov	r3, r5
 8025f68:	461d      	mov	r5, r3
 8025f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025f6e:	2a39      	cmp	r2, #57	; 0x39
 8025f70:	d106      	bne.n	8025f80 <_dtoa_r+0x700>
 8025f72:	9a00      	ldr	r2, [sp, #0]
 8025f74:	429a      	cmp	r2, r3
 8025f76:	d1f7      	bne.n	8025f68 <_dtoa_r+0x6e8>
 8025f78:	9900      	ldr	r1, [sp, #0]
 8025f7a:	2230      	movs	r2, #48	; 0x30
 8025f7c:	3701      	adds	r7, #1
 8025f7e:	700a      	strb	r2, [r1, #0]
 8025f80:	781a      	ldrb	r2, [r3, #0]
 8025f82:	3201      	adds	r2, #1
 8025f84:	701a      	strb	r2, [r3, #0]
 8025f86:	e790      	b.n	8025eaa <_dtoa_r+0x62a>
 8025f88:	4ba3      	ldr	r3, [pc, #652]	; (8026218 <_dtoa_r+0x998>)
 8025f8a:	2200      	movs	r2, #0
 8025f8c:	f7da fb5c 	bl	8000648 <__aeabi_dmul>
 8025f90:	2200      	movs	r2, #0
 8025f92:	2300      	movs	r3, #0
 8025f94:	4606      	mov	r6, r0
 8025f96:	460f      	mov	r7, r1
 8025f98:	f7da fdbe 	bl	8000b18 <__aeabi_dcmpeq>
 8025f9c:	2800      	cmp	r0, #0
 8025f9e:	d09e      	beq.n	8025ede <_dtoa_r+0x65e>
 8025fa0:	e7d0      	b.n	8025f44 <_dtoa_r+0x6c4>
 8025fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025fa4:	2a00      	cmp	r2, #0
 8025fa6:	f000 80ca 	beq.w	802613e <_dtoa_r+0x8be>
 8025faa:	9a07      	ldr	r2, [sp, #28]
 8025fac:	2a01      	cmp	r2, #1
 8025fae:	f300 80ad 	bgt.w	802610c <_dtoa_r+0x88c>
 8025fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025fb4:	2a00      	cmp	r2, #0
 8025fb6:	f000 80a5 	beq.w	8026104 <_dtoa_r+0x884>
 8025fba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8025fbe:	9e08      	ldr	r6, [sp, #32]
 8025fc0:	9d05      	ldr	r5, [sp, #20]
 8025fc2:	9a05      	ldr	r2, [sp, #20]
 8025fc4:	441a      	add	r2, r3
 8025fc6:	9205      	str	r2, [sp, #20]
 8025fc8:	9a06      	ldr	r2, [sp, #24]
 8025fca:	2101      	movs	r1, #1
 8025fcc:	441a      	add	r2, r3
 8025fce:	4620      	mov	r0, r4
 8025fd0:	9206      	str	r2, [sp, #24]
 8025fd2:	f000 fc3d 	bl	8026850 <__i2b>
 8025fd6:	4607      	mov	r7, r0
 8025fd8:	b165      	cbz	r5, 8025ff4 <_dtoa_r+0x774>
 8025fda:	9b06      	ldr	r3, [sp, #24]
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	dd09      	ble.n	8025ff4 <_dtoa_r+0x774>
 8025fe0:	42ab      	cmp	r3, r5
 8025fe2:	9a05      	ldr	r2, [sp, #20]
 8025fe4:	bfa8      	it	ge
 8025fe6:	462b      	movge	r3, r5
 8025fe8:	1ad2      	subs	r2, r2, r3
 8025fea:	9205      	str	r2, [sp, #20]
 8025fec:	9a06      	ldr	r2, [sp, #24]
 8025fee:	1aed      	subs	r5, r5, r3
 8025ff0:	1ad3      	subs	r3, r2, r3
 8025ff2:	9306      	str	r3, [sp, #24]
 8025ff4:	9b08      	ldr	r3, [sp, #32]
 8025ff6:	b1f3      	cbz	r3, 8026036 <_dtoa_r+0x7b6>
 8025ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ffa:	2b00      	cmp	r3, #0
 8025ffc:	f000 80a3 	beq.w	8026146 <_dtoa_r+0x8c6>
 8026000:	2e00      	cmp	r6, #0
 8026002:	dd10      	ble.n	8026026 <_dtoa_r+0x7a6>
 8026004:	4639      	mov	r1, r7
 8026006:	4632      	mov	r2, r6
 8026008:	4620      	mov	r0, r4
 802600a:	f000 fce1 	bl	80269d0 <__pow5mult>
 802600e:	4652      	mov	r2, sl
 8026010:	4601      	mov	r1, r0
 8026012:	4607      	mov	r7, r0
 8026014:	4620      	mov	r0, r4
 8026016:	f000 fc31 	bl	802687c <__multiply>
 802601a:	4651      	mov	r1, sl
 802601c:	4680      	mov	r8, r0
 802601e:	4620      	mov	r0, r4
 8026020:	f000 fb60 	bl	80266e4 <_Bfree>
 8026024:	46c2      	mov	sl, r8
 8026026:	9b08      	ldr	r3, [sp, #32]
 8026028:	1b9a      	subs	r2, r3, r6
 802602a:	d004      	beq.n	8026036 <_dtoa_r+0x7b6>
 802602c:	4651      	mov	r1, sl
 802602e:	4620      	mov	r0, r4
 8026030:	f000 fcce 	bl	80269d0 <__pow5mult>
 8026034:	4682      	mov	sl, r0
 8026036:	2101      	movs	r1, #1
 8026038:	4620      	mov	r0, r4
 802603a:	f000 fc09 	bl	8026850 <__i2b>
 802603e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026040:	2b00      	cmp	r3, #0
 8026042:	4606      	mov	r6, r0
 8026044:	f340 8081 	ble.w	802614a <_dtoa_r+0x8ca>
 8026048:	461a      	mov	r2, r3
 802604a:	4601      	mov	r1, r0
 802604c:	4620      	mov	r0, r4
 802604e:	f000 fcbf 	bl	80269d0 <__pow5mult>
 8026052:	9b07      	ldr	r3, [sp, #28]
 8026054:	2b01      	cmp	r3, #1
 8026056:	4606      	mov	r6, r0
 8026058:	dd7a      	ble.n	8026150 <_dtoa_r+0x8d0>
 802605a:	f04f 0800 	mov.w	r8, #0
 802605e:	6933      	ldr	r3, [r6, #16]
 8026060:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8026064:	6918      	ldr	r0, [r3, #16]
 8026066:	f000 fba5 	bl	80267b4 <__hi0bits>
 802606a:	f1c0 0020 	rsb	r0, r0, #32
 802606e:	9b06      	ldr	r3, [sp, #24]
 8026070:	4418      	add	r0, r3
 8026072:	f010 001f 	ands.w	r0, r0, #31
 8026076:	f000 8094 	beq.w	80261a2 <_dtoa_r+0x922>
 802607a:	f1c0 0320 	rsb	r3, r0, #32
 802607e:	2b04      	cmp	r3, #4
 8026080:	f340 8085 	ble.w	802618e <_dtoa_r+0x90e>
 8026084:	9b05      	ldr	r3, [sp, #20]
 8026086:	f1c0 001c 	rsb	r0, r0, #28
 802608a:	4403      	add	r3, r0
 802608c:	9305      	str	r3, [sp, #20]
 802608e:	9b06      	ldr	r3, [sp, #24]
 8026090:	4403      	add	r3, r0
 8026092:	4405      	add	r5, r0
 8026094:	9306      	str	r3, [sp, #24]
 8026096:	9b05      	ldr	r3, [sp, #20]
 8026098:	2b00      	cmp	r3, #0
 802609a:	dd05      	ble.n	80260a8 <_dtoa_r+0x828>
 802609c:	4651      	mov	r1, sl
 802609e:	461a      	mov	r2, r3
 80260a0:	4620      	mov	r0, r4
 80260a2:	f000 fcef 	bl	8026a84 <__lshift>
 80260a6:	4682      	mov	sl, r0
 80260a8:	9b06      	ldr	r3, [sp, #24]
 80260aa:	2b00      	cmp	r3, #0
 80260ac:	dd05      	ble.n	80260ba <_dtoa_r+0x83a>
 80260ae:	4631      	mov	r1, r6
 80260b0:	461a      	mov	r2, r3
 80260b2:	4620      	mov	r0, r4
 80260b4:	f000 fce6 	bl	8026a84 <__lshift>
 80260b8:	4606      	mov	r6, r0
 80260ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80260bc:	2b00      	cmp	r3, #0
 80260be:	d072      	beq.n	80261a6 <_dtoa_r+0x926>
 80260c0:	4631      	mov	r1, r6
 80260c2:	4650      	mov	r0, sl
 80260c4:	f000 fd4a 	bl	8026b5c <__mcmp>
 80260c8:	2800      	cmp	r0, #0
 80260ca:	da6c      	bge.n	80261a6 <_dtoa_r+0x926>
 80260cc:	2300      	movs	r3, #0
 80260ce:	4651      	mov	r1, sl
 80260d0:	220a      	movs	r2, #10
 80260d2:	4620      	mov	r0, r4
 80260d4:	f000 fb28 	bl	8026728 <__multadd>
 80260d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80260de:	4682      	mov	sl, r0
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	f000 81b0 	beq.w	8026446 <_dtoa_r+0xbc6>
 80260e6:	2300      	movs	r3, #0
 80260e8:	4639      	mov	r1, r7
 80260ea:	220a      	movs	r2, #10
 80260ec:	4620      	mov	r0, r4
 80260ee:	f000 fb1b 	bl	8026728 <__multadd>
 80260f2:	9b01      	ldr	r3, [sp, #4]
 80260f4:	2b00      	cmp	r3, #0
 80260f6:	4607      	mov	r7, r0
 80260f8:	f300 8096 	bgt.w	8026228 <_dtoa_r+0x9a8>
 80260fc:	9b07      	ldr	r3, [sp, #28]
 80260fe:	2b02      	cmp	r3, #2
 8026100:	dc59      	bgt.n	80261b6 <_dtoa_r+0x936>
 8026102:	e091      	b.n	8026228 <_dtoa_r+0x9a8>
 8026104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802610a:	e758      	b.n	8025fbe <_dtoa_r+0x73e>
 802610c:	9b04      	ldr	r3, [sp, #16]
 802610e:	1e5e      	subs	r6, r3, #1
 8026110:	9b08      	ldr	r3, [sp, #32]
 8026112:	42b3      	cmp	r3, r6
 8026114:	bfbf      	itttt	lt
 8026116:	9b08      	ldrlt	r3, [sp, #32]
 8026118:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802611a:	9608      	strlt	r6, [sp, #32]
 802611c:	1af3      	sublt	r3, r6, r3
 802611e:	bfb4      	ite	lt
 8026120:	18d2      	addlt	r2, r2, r3
 8026122:	1b9e      	subge	r6, r3, r6
 8026124:	9b04      	ldr	r3, [sp, #16]
 8026126:	bfbc      	itt	lt
 8026128:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802612a:	2600      	movlt	r6, #0
 802612c:	2b00      	cmp	r3, #0
 802612e:	bfb7      	itett	lt
 8026130:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8026134:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8026138:	1a9d      	sublt	r5, r3, r2
 802613a:	2300      	movlt	r3, #0
 802613c:	e741      	b.n	8025fc2 <_dtoa_r+0x742>
 802613e:	9e08      	ldr	r6, [sp, #32]
 8026140:	9d05      	ldr	r5, [sp, #20]
 8026142:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026144:	e748      	b.n	8025fd8 <_dtoa_r+0x758>
 8026146:	9a08      	ldr	r2, [sp, #32]
 8026148:	e770      	b.n	802602c <_dtoa_r+0x7ac>
 802614a:	9b07      	ldr	r3, [sp, #28]
 802614c:	2b01      	cmp	r3, #1
 802614e:	dc19      	bgt.n	8026184 <_dtoa_r+0x904>
 8026150:	9b02      	ldr	r3, [sp, #8]
 8026152:	b9bb      	cbnz	r3, 8026184 <_dtoa_r+0x904>
 8026154:	9b03      	ldr	r3, [sp, #12]
 8026156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802615a:	b99b      	cbnz	r3, 8026184 <_dtoa_r+0x904>
 802615c:	9b03      	ldr	r3, [sp, #12]
 802615e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026162:	0d1b      	lsrs	r3, r3, #20
 8026164:	051b      	lsls	r3, r3, #20
 8026166:	b183      	cbz	r3, 802618a <_dtoa_r+0x90a>
 8026168:	9b05      	ldr	r3, [sp, #20]
 802616a:	3301      	adds	r3, #1
 802616c:	9305      	str	r3, [sp, #20]
 802616e:	9b06      	ldr	r3, [sp, #24]
 8026170:	3301      	adds	r3, #1
 8026172:	9306      	str	r3, [sp, #24]
 8026174:	f04f 0801 	mov.w	r8, #1
 8026178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802617a:	2b00      	cmp	r3, #0
 802617c:	f47f af6f 	bne.w	802605e <_dtoa_r+0x7de>
 8026180:	2001      	movs	r0, #1
 8026182:	e774      	b.n	802606e <_dtoa_r+0x7ee>
 8026184:	f04f 0800 	mov.w	r8, #0
 8026188:	e7f6      	b.n	8026178 <_dtoa_r+0x8f8>
 802618a:	4698      	mov	r8, r3
 802618c:	e7f4      	b.n	8026178 <_dtoa_r+0x8f8>
 802618e:	d082      	beq.n	8026096 <_dtoa_r+0x816>
 8026190:	9a05      	ldr	r2, [sp, #20]
 8026192:	331c      	adds	r3, #28
 8026194:	441a      	add	r2, r3
 8026196:	9205      	str	r2, [sp, #20]
 8026198:	9a06      	ldr	r2, [sp, #24]
 802619a:	441a      	add	r2, r3
 802619c:	441d      	add	r5, r3
 802619e:	9206      	str	r2, [sp, #24]
 80261a0:	e779      	b.n	8026096 <_dtoa_r+0x816>
 80261a2:	4603      	mov	r3, r0
 80261a4:	e7f4      	b.n	8026190 <_dtoa_r+0x910>
 80261a6:	9b04      	ldr	r3, [sp, #16]
 80261a8:	2b00      	cmp	r3, #0
 80261aa:	dc37      	bgt.n	802621c <_dtoa_r+0x99c>
 80261ac:	9b07      	ldr	r3, [sp, #28]
 80261ae:	2b02      	cmp	r3, #2
 80261b0:	dd34      	ble.n	802621c <_dtoa_r+0x99c>
 80261b2:	9b04      	ldr	r3, [sp, #16]
 80261b4:	9301      	str	r3, [sp, #4]
 80261b6:	9b01      	ldr	r3, [sp, #4]
 80261b8:	b963      	cbnz	r3, 80261d4 <_dtoa_r+0x954>
 80261ba:	4631      	mov	r1, r6
 80261bc:	2205      	movs	r2, #5
 80261be:	4620      	mov	r0, r4
 80261c0:	f000 fab2 	bl	8026728 <__multadd>
 80261c4:	4601      	mov	r1, r0
 80261c6:	4606      	mov	r6, r0
 80261c8:	4650      	mov	r0, sl
 80261ca:	f000 fcc7 	bl	8026b5c <__mcmp>
 80261ce:	2800      	cmp	r0, #0
 80261d0:	f73f adbb 	bgt.w	8025d4a <_dtoa_r+0x4ca>
 80261d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80261d6:	9d00      	ldr	r5, [sp, #0]
 80261d8:	ea6f 0b03 	mvn.w	fp, r3
 80261dc:	f04f 0800 	mov.w	r8, #0
 80261e0:	4631      	mov	r1, r6
 80261e2:	4620      	mov	r0, r4
 80261e4:	f000 fa7e 	bl	80266e4 <_Bfree>
 80261e8:	2f00      	cmp	r7, #0
 80261ea:	f43f aeab 	beq.w	8025f44 <_dtoa_r+0x6c4>
 80261ee:	f1b8 0f00 	cmp.w	r8, #0
 80261f2:	d005      	beq.n	8026200 <_dtoa_r+0x980>
 80261f4:	45b8      	cmp	r8, r7
 80261f6:	d003      	beq.n	8026200 <_dtoa_r+0x980>
 80261f8:	4641      	mov	r1, r8
 80261fa:	4620      	mov	r0, r4
 80261fc:	f000 fa72 	bl	80266e4 <_Bfree>
 8026200:	4639      	mov	r1, r7
 8026202:	4620      	mov	r0, r4
 8026204:	f000 fa6e 	bl	80266e4 <_Bfree>
 8026208:	e69c      	b.n	8025f44 <_dtoa_r+0x6c4>
 802620a:	2600      	movs	r6, #0
 802620c:	4637      	mov	r7, r6
 802620e:	e7e1      	b.n	80261d4 <_dtoa_r+0x954>
 8026210:	46bb      	mov	fp, r7
 8026212:	4637      	mov	r7, r6
 8026214:	e599      	b.n	8025d4a <_dtoa_r+0x4ca>
 8026216:	bf00      	nop
 8026218:	40240000 	.word	0x40240000
 802621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802621e:	2b00      	cmp	r3, #0
 8026220:	f000 80c8 	beq.w	80263b4 <_dtoa_r+0xb34>
 8026224:	9b04      	ldr	r3, [sp, #16]
 8026226:	9301      	str	r3, [sp, #4]
 8026228:	2d00      	cmp	r5, #0
 802622a:	dd05      	ble.n	8026238 <_dtoa_r+0x9b8>
 802622c:	4639      	mov	r1, r7
 802622e:	462a      	mov	r2, r5
 8026230:	4620      	mov	r0, r4
 8026232:	f000 fc27 	bl	8026a84 <__lshift>
 8026236:	4607      	mov	r7, r0
 8026238:	f1b8 0f00 	cmp.w	r8, #0
 802623c:	d05b      	beq.n	80262f6 <_dtoa_r+0xa76>
 802623e:	6879      	ldr	r1, [r7, #4]
 8026240:	4620      	mov	r0, r4
 8026242:	f000 fa0f 	bl	8026664 <_Balloc>
 8026246:	4605      	mov	r5, r0
 8026248:	b928      	cbnz	r0, 8026256 <_dtoa_r+0x9d6>
 802624a:	4b83      	ldr	r3, [pc, #524]	; (8026458 <_dtoa_r+0xbd8>)
 802624c:	4602      	mov	r2, r0
 802624e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8026252:	f7ff bb2e 	b.w	80258b2 <_dtoa_r+0x32>
 8026256:	693a      	ldr	r2, [r7, #16]
 8026258:	3202      	adds	r2, #2
 802625a:	0092      	lsls	r2, r2, #2
 802625c:	f107 010c 	add.w	r1, r7, #12
 8026260:	300c      	adds	r0, #12
 8026262:	f7ff fa6d 	bl	8025740 <memcpy>
 8026266:	2201      	movs	r2, #1
 8026268:	4629      	mov	r1, r5
 802626a:	4620      	mov	r0, r4
 802626c:	f000 fc0a 	bl	8026a84 <__lshift>
 8026270:	9b00      	ldr	r3, [sp, #0]
 8026272:	3301      	adds	r3, #1
 8026274:	9304      	str	r3, [sp, #16]
 8026276:	e9dd 2300 	ldrd	r2, r3, [sp]
 802627a:	4413      	add	r3, r2
 802627c:	9308      	str	r3, [sp, #32]
 802627e:	9b02      	ldr	r3, [sp, #8]
 8026280:	f003 0301 	and.w	r3, r3, #1
 8026284:	46b8      	mov	r8, r7
 8026286:	9306      	str	r3, [sp, #24]
 8026288:	4607      	mov	r7, r0
 802628a:	9b04      	ldr	r3, [sp, #16]
 802628c:	4631      	mov	r1, r6
 802628e:	3b01      	subs	r3, #1
 8026290:	4650      	mov	r0, sl
 8026292:	9301      	str	r3, [sp, #4]
 8026294:	f7ff fa69 	bl	802576a <quorem>
 8026298:	4641      	mov	r1, r8
 802629a:	9002      	str	r0, [sp, #8]
 802629c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80262a0:	4650      	mov	r0, sl
 80262a2:	f000 fc5b 	bl	8026b5c <__mcmp>
 80262a6:	463a      	mov	r2, r7
 80262a8:	9005      	str	r0, [sp, #20]
 80262aa:	4631      	mov	r1, r6
 80262ac:	4620      	mov	r0, r4
 80262ae:	f000 fc71 	bl	8026b94 <__mdiff>
 80262b2:	68c2      	ldr	r2, [r0, #12]
 80262b4:	4605      	mov	r5, r0
 80262b6:	bb02      	cbnz	r2, 80262fa <_dtoa_r+0xa7a>
 80262b8:	4601      	mov	r1, r0
 80262ba:	4650      	mov	r0, sl
 80262bc:	f000 fc4e 	bl	8026b5c <__mcmp>
 80262c0:	4602      	mov	r2, r0
 80262c2:	4629      	mov	r1, r5
 80262c4:	4620      	mov	r0, r4
 80262c6:	9209      	str	r2, [sp, #36]	; 0x24
 80262c8:	f000 fa0c 	bl	80266e4 <_Bfree>
 80262cc:	9b07      	ldr	r3, [sp, #28]
 80262ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80262d0:	9d04      	ldr	r5, [sp, #16]
 80262d2:	ea43 0102 	orr.w	r1, r3, r2
 80262d6:	9b06      	ldr	r3, [sp, #24]
 80262d8:	4319      	orrs	r1, r3
 80262da:	d110      	bne.n	80262fe <_dtoa_r+0xa7e>
 80262dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80262e0:	d029      	beq.n	8026336 <_dtoa_r+0xab6>
 80262e2:	9b05      	ldr	r3, [sp, #20]
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	dd02      	ble.n	80262ee <_dtoa_r+0xa6e>
 80262e8:	9b02      	ldr	r3, [sp, #8]
 80262ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80262ee:	9b01      	ldr	r3, [sp, #4]
 80262f0:	f883 9000 	strb.w	r9, [r3]
 80262f4:	e774      	b.n	80261e0 <_dtoa_r+0x960>
 80262f6:	4638      	mov	r0, r7
 80262f8:	e7ba      	b.n	8026270 <_dtoa_r+0x9f0>
 80262fa:	2201      	movs	r2, #1
 80262fc:	e7e1      	b.n	80262c2 <_dtoa_r+0xa42>
 80262fe:	9b05      	ldr	r3, [sp, #20]
 8026300:	2b00      	cmp	r3, #0
 8026302:	db04      	blt.n	802630e <_dtoa_r+0xa8e>
 8026304:	9907      	ldr	r1, [sp, #28]
 8026306:	430b      	orrs	r3, r1
 8026308:	9906      	ldr	r1, [sp, #24]
 802630a:	430b      	orrs	r3, r1
 802630c:	d120      	bne.n	8026350 <_dtoa_r+0xad0>
 802630e:	2a00      	cmp	r2, #0
 8026310:	dded      	ble.n	80262ee <_dtoa_r+0xa6e>
 8026312:	4651      	mov	r1, sl
 8026314:	2201      	movs	r2, #1
 8026316:	4620      	mov	r0, r4
 8026318:	f000 fbb4 	bl	8026a84 <__lshift>
 802631c:	4631      	mov	r1, r6
 802631e:	4682      	mov	sl, r0
 8026320:	f000 fc1c 	bl	8026b5c <__mcmp>
 8026324:	2800      	cmp	r0, #0
 8026326:	dc03      	bgt.n	8026330 <_dtoa_r+0xab0>
 8026328:	d1e1      	bne.n	80262ee <_dtoa_r+0xa6e>
 802632a:	f019 0f01 	tst.w	r9, #1
 802632e:	d0de      	beq.n	80262ee <_dtoa_r+0xa6e>
 8026330:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026334:	d1d8      	bne.n	80262e8 <_dtoa_r+0xa68>
 8026336:	9a01      	ldr	r2, [sp, #4]
 8026338:	2339      	movs	r3, #57	; 0x39
 802633a:	7013      	strb	r3, [r2, #0]
 802633c:	462b      	mov	r3, r5
 802633e:	461d      	mov	r5, r3
 8026340:	3b01      	subs	r3, #1
 8026342:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026346:	2a39      	cmp	r2, #57	; 0x39
 8026348:	d06c      	beq.n	8026424 <_dtoa_r+0xba4>
 802634a:	3201      	adds	r2, #1
 802634c:	701a      	strb	r2, [r3, #0]
 802634e:	e747      	b.n	80261e0 <_dtoa_r+0x960>
 8026350:	2a00      	cmp	r2, #0
 8026352:	dd07      	ble.n	8026364 <_dtoa_r+0xae4>
 8026354:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8026358:	d0ed      	beq.n	8026336 <_dtoa_r+0xab6>
 802635a:	9a01      	ldr	r2, [sp, #4]
 802635c:	f109 0301 	add.w	r3, r9, #1
 8026360:	7013      	strb	r3, [r2, #0]
 8026362:	e73d      	b.n	80261e0 <_dtoa_r+0x960>
 8026364:	9b04      	ldr	r3, [sp, #16]
 8026366:	9a08      	ldr	r2, [sp, #32]
 8026368:	f803 9c01 	strb.w	r9, [r3, #-1]
 802636c:	4293      	cmp	r3, r2
 802636e:	d043      	beq.n	80263f8 <_dtoa_r+0xb78>
 8026370:	4651      	mov	r1, sl
 8026372:	2300      	movs	r3, #0
 8026374:	220a      	movs	r2, #10
 8026376:	4620      	mov	r0, r4
 8026378:	f000 f9d6 	bl	8026728 <__multadd>
 802637c:	45b8      	cmp	r8, r7
 802637e:	4682      	mov	sl, r0
 8026380:	f04f 0300 	mov.w	r3, #0
 8026384:	f04f 020a 	mov.w	r2, #10
 8026388:	4641      	mov	r1, r8
 802638a:	4620      	mov	r0, r4
 802638c:	d107      	bne.n	802639e <_dtoa_r+0xb1e>
 802638e:	f000 f9cb 	bl	8026728 <__multadd>
 8026392:	4680      	mov	r8, r0
 8026394:	4607      	mov	r7, r0
 8026396:	9b04      	ldr	r3, [sp, #16]
 8026398:	3301      	adds	r3, #1
 802639a:	9304      	str	r3, [sp, #16]
 802639c:	e775      	b.n	802628a <_dtoa_r+0xa0a>
 802639e:	f000 f9c3 	bl	8026728 <__multadd>
 80263a2:	4639      	mov	r1, r7
 80263a4:	4680      	mov	r8, r0
 80263a6:	2300      	movs	r3, #0
 80263a8:	220a      	movs	r2, #10
 80263aa:	4620      	mov	r0, r4
 80263ac:	f000 f9bc 	bl	8026728 <__multadd>
 80263b0:	4607      	mov	r7, r0
 80263b2:	e7f0      	b.n	8026396 <_dtoa_r+0xb16>
 80263b4:	9b04      	ldr	r3, [sp, #16]
 80263b6:	9301      	str	r3, [sp, #4]
 80263b8:	9d00      	ldr	r5, [sp, #0]
 80263ba:	4631      	mov	r1, r6
 80263bc:	4650      	mov	r0, sl
 80263be:	f7ff f9d4 	bl	802576a <quorem>
 80263c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80263c6:	9b00      	ldr	r3, [sp, #0]
 80263c8:	f805 9b01 	strb.w	r9, [r5], #1
 80263cc:	1aea      	subs	r2, r5, r3
 80263ce:	9b01      	ldr	r3, [sp, #4]
 80263d0:	4293      	cmp	r3, r2
 80263d2:	dd07      	ble.n	80263e4 <_dtoa_r+0xb64>
 80263d4:	4651      	mov	r1, sl
 80263d6:	2300      	movs	r3, #0
 80263d8:	220a      	movs	r2, #10
 80263da:	4620      	mov	r0, r4
 80263dc:	f000 f9a4 	bl	8026728 <__multadd>
 80263e0:	4682      	mov	sl, r0
 80263e2:	e7ea      	b.n	80263ba <_dtoa_r+0xb3a>
 80263e4:	9b01      	ldr	r3, [sp, #4]
 80263e6:	2b00      	cmp	r3, #0
 80263e8:	bfc8      	it	gt
 80263ea:	461d      	movgt	r5, r3
 80263ec:	9b00      	ldr	r3, [sp, #0]
 80263ee:	bfd8      	it	le
 80263f0:	2501      	movle	r5, #1
 80263f2:	441d      	add	r5, r3
 80263f4:	f04f 0800 	mov.w	r8, #0
 80263f8:	4651      	mov	r1, sl
 80263fa:	2201      	movs	r2, #1
 80263fc:	4620      	mov	r0, r4
 80263fe:	f000 fb41 	bl	8026a84 <__lshift>
 8026402:	4631      	mov	r1, r6
 8026404:	4682      	mov	sl, r0
 8026406:	f000 fba9 	bl	8026b5c <__mcmp>
 802640a:	2800      	cmp	r0, #0
 802640c:	dc96      	bgt.n	802633c <_dtoa_r+0xabc>
 802640e:	d102      	bne.n	8026416 <_dtoa_r+0xb96>
 8026410:	f019 0f01 	tst.w	r9, #1
 8026414:	d192      	bne.n	802633c <_dtoa_r+0xabc>
 8026416:	462b      	mov	r3, r5
 8026418:	461d      	mov	r5, r3
 802641a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802641e:	2a30      	cmp	r2, #48	; 0x30
 8026420:	d0fa      	beq.n	8026418 <_dtoa_r+0xb98>
 8026422:	e6dd      	b.n	80261e0 <_dtoa_r+0x960>
 8026424:	9a00      	ldr	r2, [sp, #0]
 8026426:	429a      	cmp	r2, r3
 8026428:	d189      	bne.n	802633e <_dtoa_r+0xabe>
 802642a:	f10b 0b01 	add.w	fp, fp, #1
 802642e:	2331      	movs	r3, #49	; 0x31
 8026430:	e796      	b.n	8026360 <_dtoa_r+0xae0>
 8026432:	4b0a      	ldr	r3, [pc, #40]	; (802645c <_dtoa_r+0xbdc>)
 8026434:	f7ff ba99 	b.w	802596a <_dtoa_r+0xea>
 8026438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802643a:	2b00      	cmp	r3, #0
 802643c:	f47f aa6d 	bne.w	802591a <_dtoa_r+0x9a>
 8026440:	4b07      	ldr	r3, [pc, #28]	; (8026460 <_dtoa_r+0xbe0>)
 8026442:	f7ff ba92 	b.w	802596a <_dtoa_r+0xea>
 8026446:	9b01      	ldr	r3, [sp, #4]
 8026448:	2b00      	cmp	r3, #0
 802644a:	dcb5      	bgt.n	80263b8 <_dtoa_r+0xb38>
 802644c:	9b07      	ldr	r3, [sp, #28]
 802644e:	2b02      	cmp	r3, #2
 8026450:	f73f aeb1 	bgt.w	80261b6 <_dtoa_r+0x936>
 8026454:	e7b0      	b.n	80263b8 <_dtoa_r+0xb38>
 8026456:	bf00      	nop
 8026458:	0802ae1f 	.word	0x0802ae1f
 802645c:	0802ad7f 	.word	0x0802ad7f
 8026460:	0802ada3 	.word	0x0802ada3

08026464 <_free_r>:
 8026464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026466:	2900      	cmp	r1, #0
 8026468:	d044      	beq.n	80264f4 <_free_r+0x90>
 802646a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802646e:	9001      	str	r0, [sp, #4]
 8026470:	2b00      	cmp	r3, #0
 8026472:	f1a1 0404 	sub.w	r4, r1, #4
 8026476:	bfb8      	it	lt
 8026478:	18e4      	addlt	r4, r4, r3
 802647a:	f000 f8e7 	bl	802664c <__malloc_lock>
 802647e:	4a1e      	ldr	r2, [pc, #120]	; (80264f8 <_free_r+0x94>)
 8026480:	9801      	ldr	r0, [sp, #4]
 8026482:	6813      	ldr	r3, [r2, #0]
 8026484:	b933      	cbnz	r3, 8026494 <_free_r+0x30>
 8026486:	6063      	str	r3, [r4, #4]
 8026488:	6014      	str	r4, [r2, #0]
 802648a:	b003      	add	sp, #12
 802648c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026490:	f000 b8e2 	b.w	8026658 <__malloc_unlock>
 8026494:	42a3      	cmp	r3, r4
 8026496:	d908      	bls.n	80264aa <_free_r+0x46>
 8026498:	6825      	ldr	r5, [r4, #0]
 802649a:	1961      	adds	r1, r4, r5
 802649c:	428b      	cmp	r3, r1
 802649e:	bf01      	itttt	eq
 80264a0:	6819      	ldreq	r1, [r3, #0]
 80264a2:	685b      	ldreq	r3, [r3, #4]
 80264a4:	1949      	addeq	r1, r1, r5
 80264a6:	6021      	streq	r1, [r4, #0]
 80264a8:	e7ed      	b.n	8026486 <_free_r+0x22>
 80264aa:	461a      	mov	r2, r3
 80264ac:	685b      	ldr	r3, [r3, #4]
 80264ae:	b10b      	cbz	r3, 80264b4 <_free_r+0x50>
 80264b0:	42a3      	cmp	r3, r4
 80264b2:	d9fa      	bls.n	80264aa <_free_r+0x46>
 80264b4:	6811      	ldr	r1, [r2, #0]
 80264b6:	1855      	adds	r5, r2, r1
 80264b8:	42a5      	cmp	r5, r4
 80264ba:	d10b      	bne.n	80264d4 <_free_r+0x70>
 80264bc:	6824      	ldr	r4, [r4, #0]
 80264be:	4421      	add	r1, r4
 80264c0:	1854      	adds	r4, r2, r1
 80264c2:	42a3      	cmp	r3, r4
 80264c4:	6011      	str	r1, [r2, #0]
 80264c6:	d1e0      	bne.n	802648a <_free_r+0x26>
 80264c8:	681c      	ldr	r4, [r3, #0]
 80264ca:	685b      	ldr	r3, [r3, #4]
 80264cc:	6053      	str	r3, [r2, #4]
 80264ce:	440c      	add	r4, r1
 80264d0:	6014      	str	r4, [r2, #0]
 80264d2:	e7da      	b.n	802648a <_free_r+0x26>
 80264d4:	d902      	bls.n	80264dc <_free_r+0x78>
 80264d6:	230c      	movs	r3, #12
 80264d8:	6003      	str	r3, [r0, #0]
 80264da:	e7d6      	b.n	802648a <_free_r+0x26>
 80264dc:	6825      	ldr	r5, [r4, #0]
 80264de:	1961      	adds	r1, r4, r5
 80264e0:	428b      	cmp	r3, r1
 80264e2:	bf04      	itt	eq
 80264e4:	6819      	ldreq	r1, [r3, #0]
 80264e6:	685b      	ldreq	r3, [r3, #4]
 80264e8:	6063      	str	r3, [r4, #4]
 80264ea:	bf04      	itt	eq
 80264ec:	1949      	addeq	r1, r1, r5
 80264ee:	6021      	streq	r1, [r4, #0]
 80264f0:	6054      	str	r4, [r2, #4]
 80264f2:	e7ca      	b.n	802648a <_free_r+0x26>
 80264f4:	b003      	add	sp, #12
 80264f6:	bd30      	pop	{r4, r5, pc}
 80264f8:	20016a9c 	.word	0x20016a9c

080264fc <malloc>:
 80264fc:	4b02      	ldr	r3, [pc, #8]	; (8026508 <malloc+0xc>)
 80264fe:	4601      	mov	r1, r0
 8026500:	6818      	ldr	r0, [r3, #0]
 8026502:	f000 b823 	b.w	802654c <_malloc_r>
 8026506:	bf00      	nop
 8026508:	200001f8 	.word	0x200001f8

0802650c <sbrk_aligned>:
 802650c:	b570      	push	{r4, r5, r6, lr}
 802650e:	4e0e      	ldr	r6, [pc, #56]	; (8026548 <sbrk_aligned+0x3c>)
 8026510:	460c      	mov	r4, r1
 8026512:	6831      	ldr	r1, [r6, #0]
 8026514:	4605      	mov	r5, r0
 8026516:	b911      	cbnz	r1, 802651e <sbrk_aligned+0x12>
 8026518:	f001 f85e 	bl	80275d8 <_sbrk_r>
 802651c:	6030      	str	r0, [r6, #0]
 802651e:	4621      	mov	r1, r4
 8026520:	4628      	mov	r0, r5
 8026522:	f001 f859 	bl	80275d8 <_sbrk_r>
 8026526:	1c43      	adds	r3, r0, #1
 8026528:	d00a      	beq.n	8026540 <sbrk_aligned+0x34>
 802652a:	1cc4      	adds	r4, r0, #3
 802652c:	f024 0403 	bic.w	r4, r4, #3
 8026530:	42a0      	cmp	r0, r4
 8026532:	d007      	beq.n	8026544 <sbrk_aligned+0x38>
 8026534:	1a21      	subs	r1, r4, r0
 8026536:	4628      	mov	r0, r5
 8026538:	f001 f84e 	bl	80275d8 <_sbrk_r>
 802653c:	3001      	adds	r0, #1
 802653e:	d101      	bne.n	8026544 <sbrk_aligned+0x38>
 8026540:	f04f 34ff 	mov.w	r4, #4294967295
 8026544:	4620      	mov	r0, r4
 8026546:	bd70      	pop	{r4, r5, r6, pc}
 8026548:	20016aa0 	.word	0x20016aa0

0802654c <_malloc_r>:
 802654c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026550:	1ccd      	adds	r5, r1, #3
 8026552:	f025 0503 	bic.w	r5, r5, #3
 8026556:	3508      	adds	r5, #8
 8026558:	2d0c      	cmp	r5, #12
 802655a:	bf38      	it	cc
 802655c:	250c      	movcc	r5, #12
 802655e:	2d00      	cmp	r5, #0
 8026560:	4607      	mov	r7, r0
 8026562:	db01      	blt.n	8026568 <_malloc_r+0x1c>
 8026564:	42a9      	cmp	r1, r5
 8026566:	d905      	bls.n	8026574 <_malloc_r+0x28>
 8026568:	230c      	movs	r3, #12
 802656a:	603b      	str	r3, [r7, #0]
 802656c:	2600      	movs	r6, #0
 802656e:	4630      	mov	r0, r6
 8026570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026574:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8026648 <_malloc_r+0xfc>
 8026578:	f000 f868 	bl	802664c <__malloc_lock>
 802657c:	f8d8 3000 	ldr.w	r3, [r8]
 8026580:	461c      	mov	r4, r3
 8026582:	bb5c      	cbnz	r4, 80265dc <_malloc_r+0x90>
 8026584:	4629      	mov	r1, r5
 8026586:	4638      	mov	r0, r7
 8026588:	f7ff ffc0 	bl	802650c <sbrk_aligned>
 802658c:	1c43      	adds	r3, r0, #1
 802658e:	4604      	mov	r4, r0
 8026590:	d155      	bne.n	802663e <_malloc_r+0xf2>
 8026592:	f8d8 4000 	ldr.w	r4, [r8]
 8026596:	4626      	mov	r6, r4
 8026598:	2e00      	cmp	r6, #0
 802659a:	d145      	bne.n	8026628 <_malloc_r+0xdc>
 802659c:	2c00      	cmp	r4, #0
 802659e:	d048      	beq.n	8026632 <_malloc_r+0xe6>
 80265a0:	6823      	ldr	r3, [r4, #0]
 80265a2:	4631      	mov	r1, r6
 80265a4:	4638      	mov	r0, r7
 80265a6:	eb04 0903 	add.w	r9, r4, r3
 80265aa:	f001 f815 	bl	80275d8 <_sbrk_r>
 80265ae:	4581      	cmp	r9, r0
 80265b0:	d13f      	bne.n	8026632 <_malloc_r+0xe6>
 80265b2:	6821      	ldr	r1, [r4, #0]
 80265b4:	1a6d      	subs	r5, r5, r1
 80265b6:	4629      	mov	r1, r5
 80265b8:	4638      	mov	r0, r7
 80265ba:	f7ff ffa7 	bl	802650c <sbrk_aligned>
 80265be:	3001      	adds	r0, #1
 80265c0:	d037      	beq.n	8026632 <_malloc_r+0xe6>
 80265c2:	6823      	ldr	r3, [r4, #0]
 80265c4:	442b      	add	r3, r5
 80265c6:	6023      	str	r3, [r4, #0]
 80265c8:	f8d8 3000 	ldr.w	r3, [r8]
 80265cc:	2b00      	cmp	r3, #0
 80265ce:	d038      	beq.n	8026642 <_malloc_r+0xf6>
 80265d0:	685a      	ldr	r2, [r3, #4]
 80265d2:	42a2      	cmp	r2, r4
 80265d4:	d12b      	bne.n	802662e <_malloc_r+0xe2>
 80265d6:	2200      	movs	r2, #0
 80265d8:	605a      	str	r2, [r3, #4]
 80265da:	e00f      	b.n	80265fc <_malloc_r+0xb0>
 80265dc:	6822      	ldr	r2, [r4, #0]
 80265de:	1b52      	subs	r2, r2, r5
 80265e0:	d41f      	bmi.n	8026622 <_malloc_r+0xd6>
 80265e2:	2a0b      	cmp	r2, #11
 80265e4:	d917      	bls.n	8026616 <_malloc_r+0xca>
 80265e6:	1961      	adds	r1, r4, r5
 80265e8:	42a3      	cmp	r3, r4
 80265ea:	6025      	str	r5, [r4, #0]
 80265ec:	bf18      	it	ne
 80265ee:	6059      	strne	r1, [r3, #4]
 80265f0:	6863      	ldr	r3, [r4, #4]
 80265f2:	bf08      	it	eq
 80265f4:	f8c8 1000 	streq.w	r1, [r8]
 80265f8:	5162      	str	r2, [r4, r5]
 80265fa:	604b      	str	r3, [r1, #4]
 80265fc:	4638      	mov	r0, r7
 80265fe:	f104 060b 	add.w	r6, r4, #11
 8026602:	f000 f829 	bl	8026658 <__malloc_unlock>
 8026606:	f026 0607 	bic.w	r6, r6, #7
 802660a:	1d23      	adds	r3, r4, #4
 802660c:	1af2      	subs	r2, r6, r3
 802660e:	d0ae      	beq.n	802656e <_malloc_r+0x22>
 8026610:	1b9b      	subs	r3, r3, r6
 8026612:	50a3      	str	r3, [r4, r2]
 8026614:	e7ab      	b.n	802656e <_malloc_r+0x22>
 8026616:	42a3      	cmp	r3, r4
 8026618:	6862      	ldr	r2, [r4, #4]
 802661a:	d1dd      	bne.n	80265d8 <_malloc_r+0x8c>
 802661c:	f8c8 2000 	str.w	r2, [r8]
 8026620:	e7ec      	b.n	80265fc <_malloc_r+0xb0>
 8026622:	4623      	mov	r3, r4
 8026624:	6864      	ldr	r4, [r4, #4]
 8026626:	e7ac      	b.n	8026582 <_malloc_r+0x36>
 8026628:	4634      	mov	r4, r6
 802662a:	6876      	ldr	r6, [r6, #4]
 802662c:	e7b4      	b.n	8026598 <_malloc_r+0x4c>
 802662e:	4613      	mov	r3, r2
 8026630:	e7cc      	b.n	80265cc <_malloc_r+0x80>
 8026632:	230c      	movs	r3, #12
 8026634:	603b      	str	r3, [r7, #0]
 8026636:	4638      	mov	r0, r7
 8026638:	f000 f80e 	bl	8026658 <__malloc_unlock>
 802663c:	e797      	b.n	802656e <_malloc_r+0x22>
 802663e:	6025      	str	r5, [r4, #0]
 8026640:	e7dc      	b.n	80265fc <_malloc_r+0xb0>
 8026642:	605b      	str	r3, [r3, #4]
 8026644:	deff      	udf	#255	; 0xff
 8026646:	bf00      	nop
 8026648:	20016a9c 	.word	0x20016a9c

0802664c <__malloc_lock>:
 802664c:	4801      	ldr	r0, [pc, #4]	; (8026654 <__malloc_lock+0x8>)
 802664e:	f7ff b875 	b.w	802573c <__retarget_lock_acquire_recursive>
 8026652:	bf00      	nop
 8026654:	20016a98 	.word	0x20016a98

08026658 <__malloc_unlock>:
 8026658:	4801      	ldr	r0, [pc, #4]	; (8026660 <__malloc_unlock+0x8>)
 802665a:	f7ff b870 	b.w	802573e <__retarget_lock_release_recursive>
 802665e:	bf00      	nop
 8026660:	20016a98 	.word	0x20016a98

08026664 <_Balloc>:
 8026664:	b570      	push	{r4, r5, r6, lr}
 8026666:	69c6      	ldr	r6, [r0, #28]
 8026668:	4604      	mov	r4, r0
 802666a:	460d      	mov	r5, r1
 802666c:	b976      	cbnz	r6, 802668c <_Balloc+0x28>
 802666e:	2010      	movs	r0, #16
 8026670:	f7ff ff44 	bl	80264fc <malloc>
 8026674:	4602      	mov	r2, r0
 8026676:	61e0      	str	r0, [r4, #28]
 8026678:	b920      	cbnz	r0, 8026684 <_Balloc+0x20>
 802667a:	4b18      	ldr	r3, [pc, #96]	; (80266dc <_Balloc+0x78>)
 802667c:	4818      	ldr	r0, [pc, #96]	; (80266e0 <_Balloc+0x7c>)
 802667e:	216b      	movs	r1, #107	; 0x6b
 8026680:	f7fe fa36 	bl	8024af0 <__assert_func>
 8026684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026688:	6006      	str	r6, [r0, #0]
 802668a:	60c6      	str	r6, [r0, #12]
 802668c:	69e6      	ldr	r6, [r4, #28]
 802668e:	68f3      	ldr	r3, [r6, #12]
 8026690:	b183      	cbz	r3, 80266b4 <_Balloc+0x50>
 8026692:	69e3      	ldr	r3, [r4, #28]
 8026694:	68db      	ldr	r3, [r3, #12]
 8026696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802669a:	b9b8      	cbnz	r0, 80266cc <_Balloc+0x68>
 802669c:	2101      	movs	r1, #1
 802669e:	fa01 f605 	lsl.w	r6, r1, r5
 80266a2:	1d72      	adds	r2, r6, #5
 80266a4:	0092      	lsls	r2, r2, #2
 80266a6:	4620      	mov	r0, r4
 80266a8:	f000 ffa6 	bl	80275f8 <_calloc_r>
 80266ac:	b160      	cbz	r0, 80266c8 <_Balloc+0x64>
 80266ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80266b2:	e00e      	b.n	80266d2 <_Balloc+0x6e>
 80266b4:	2221      	movs	r2, #33	; 0x21
 80266b6:	2104      	movs	r1, #4
 80266b8:	4620      	mov	r0, r4
 80266ba:	f000 ff9d 	bl	80275f8 <_calloc_r>
 80266be:	69e3      	ldr	r3, [r4, #28]
 80266c0:	60f0      	str	r0, [r6, #12]
 80266c2:	68db      	ldr	r3, [r3, #12]
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	d1e4      	bne.n	8026692 <_Balloc+0x2e>
 80266c8:	2000      	movs	r0, #0
 80266ca:	bd70      	pop	{r4, r5, r6, pc}
 80266cc:	6802      	ldr	r2, [r0, #0]
 80266ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80266d2:	2300      	movs	r3, #0
 80266d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80266d8:	e7f7      	b.n	80266ca <_Balloc+0x66>
 80266da:	bf00      	nop
 80266dc:	0802adb0 	.word	0x0802adb0
 80266e0:	0802ae30 	.word	0x0802ae30

080266e4 <_Bfree>:
 80266e4:	b570      	push	{r4, r5, r6, lr}
 80266e6:	69c6      	ldr	r6, [r0, #28]
 80266e8:	4605      	mov	r5, r0
 80266ea:	460c      	mov	r4, r1
 80266ec:	b976      	cbnz	r6, 802670c <_Bfree+0x28>
 80266ee:	2010      	movs	r0, #16
 80266f0:	f7ff ff04 	bl	80264fc <malloc>
 80266f4:	4602      	mov	r2, r0
 80266f6:	61e8      	str	r0, [r5, #28]
 80266f8:	b920      	cbnz	r0, 8026704 <_Bfree+0x20>
 80266fa:	4b09      	ldr	r3, [pc, #36]	; (8026720 <_Bfree+0x3c>)
 80266fc:	4809      	ldr	r0, [pc, #36]	; (8026724 <_Bfree+0x40>)
 80266fe:	218f      	movs	r1, #143	; 0x8f
 8026700:	f7fe f9f6 	bl	8024af0 <__assert_func>
 8026704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026708:	6006      	str	r6, [r0, #0]
 802670a:	60c6      	str	r6, [r0, #12]
 802670c:	b13c      	cbz	r4, 802671e <_Bfree+0x3a>
 802670e:	69eb      	ldr	r3, [r5, #28]
 8026710:	6862      	ldr	r2, [r4, #4]
 8026712:	68db      	ldr	r3, [r3, #12]
 8026714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026718:	6021      	str	r1, [r4, #0]
 802671a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802671e:	bd70      	pop	{r4, r5, r6, pc}
 8026720:	0802adb0 	.word	0x0802adb0
 8026724:	0802ae30 	.word	0x0802ae30

08026728 <__multadd>:
 8026728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802672c:	690d      	ldr	r5, [r1, #16]
 802672e:	4607      	mov	r7, r0
 8026730:	460c      	mov	r4, r1
 8026732:	461e      	mov	r6, r3
 8026734:	f101 0c14 	add.w	ip, r1, #20
 8026738:	2000      	movs	r0, #0
 802673a:	f8dc 3000 	ldr.w	r3, [ip]
 802673e:	b299      	uxth	r1, r3
 8026740:	fb02 6101 	mla	r1, r2, r1, r6
 8026744:	0c1e      	lsrs	r6, r3, #16
 8026746:	0c0b      	lsrs	r3, r1, #16
 8026748:	fb02 3306 	mla	r3, r2, r6, r3
 802674c:	b289      	uxth	r1, r1
 802674e:	3001      	adds	r0, #1
 8026750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026754:	4285      	cmp	r5, r0
 8026756:	f84c 1b04 	str.w	r1, [ip], #4
 802675a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802675e:	dcec      	bgt.n	802673a <__multadd+0x12>
 8026760:	b30e      	cbz	r6, 80267a6 <__multadd+0x7e>
 8026762:	68a3      	ldr	r3, [r4, #8]
 8026764:	42ab      	cmp	r3, r5
 8026766:	dc19      	bgt.n	802679c <__multadd+0x74>
 8026768:	6861      	ldr	r1, [r4, #4]
 802676a:	4638      	mov	r0, r7
 802676c:	3101      	adds	r1, #1
 802676e:	f7ff ff79 	bl	8026664 <_Balloc>
 8026772:	4680      	mov	r8, r0
 8026774:	b928      	cbnz	r0, 8026782 <__multadd+0x5a>
 8026776:	4602      	mov	r2, r0
 8026778:	4b0c      	ldr	r3, [pc, #48]	; (80267ac <__multadd+0x84>)
 802677a:	480d      	ldr	r0, [pc, #52]	; (80267b0 <__multadd+0x88>)
 802677c:	21ba      	movs	r1, #186	; 0xba
 802677e:	f7fe f9b7 	bl	8024af0 <__assert_func>
 8026782:	6922      	ldr	r2, [r4, #16]
 8026784:	3202      	adds	r2, #2
 8026786:	f104 010c 	add.w	r1, r4, #12
 802678a:	0092      	lsls	r2, r2, #2
 802678c:	300c      	adds	r0, #12
 802678e:	f7fe ffd7 	bl	8025740 <memcpy>
 8026792:	4621      	mov	r1, r4
 8026794:	4638      	mov	r0, r7
 8026796:	f7ff ffa5 	bl	80266e4 <_Bfree>
 802679a:	4644      	mov	r4, r8
 802679c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80267a0:	3501      	adds	r5, #1
 80267a2:	615e      	str	r6, [r3, #20]
 80267a4:	6125      	str	r5, [r4, #16]
 80267a6:	4620      	mov	r0, r4
 80267a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267ac:	0802ae1f 	.word	0x0802ae1f
 80267b0:	0802ae30 	.word	0x0802ae30

080267b4 <__hi0bits>:
 80267b4:	0c03      	lsrs	r3, r0, #16
 80267b6:	041b      	lsls	r3, r3, #16
 80267b8:	b9d3      	cbnz	r3, 80267f0 <__hi0bits+0x3c>
 80267ba:	0400      	lsls	r0, r0, #16
 80267bc:	2310      	movs	r3, #16
 80267be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80267c2:	bf04      	itt	eq
 80267c4:	0200      	lsleq	r0, r0, #8
 80267c6:	3308      	addeq	r3, #8
 80267c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80267cc:	bf04      	itt	eq
 80267ce:	0100      	lsleq	r0, r0, #4
 80267d0:	3304      	addeq	r3, #4
 80267d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80267d6:	bf04      	itt	eq
 80267d8:	0080      	lsleq	r0, r0, #2
 80267da:	3302      	addeq	r3, #2
 80267dc:	2800      	cmp	r0, #0
 80267de:	db05      	blt.n	80267ec <__hi0bits+0x38>
 80267e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80267e4:	f103 0301 	add.w	r3, r3, #1
 80267e8:	bf08      	it	eq
 80267ea:	2320      	moveq	r3, #32
 80267ec:	4618      	mov	r0, r3
 80267ee:	4770      	bx	lr
 80267f0:	2300      	movs	r3, #0
 80267f2:	e7e4      	b.n	80267be <__hi0bits+0xa>

080267f4 <__lo0bits>:
 80267f4:	6803      	ldr	r3, [r0, #0]
 80267f6:	f013 0207 	ands.w	r2, r3, #7
 80267fa:	d00c      	beq.n	8026816 <__lo0bits+0x22>
 80267fc:	07d9      	lsls	r1, r3, #31
 80267fe:	d422      	bmi.n	8026846 <__lo0bits+0x52>
 8026800:	079a      	lsls	r2, r3, #30
 8026802:	bf49      	itett	mi
 8026804:	085b      	lsrmi	r3, r3, #1
 8026806:	089b      	lsrpl	r3, r3, #2
 8026808:	6003      	strmi	r3, [r0, #0]
 802680a:	2201      	movmi	r2, #1
 802680c:	bf5c      	itt	pl
 802680e:	6003      	strpl	r3, [r0, #0]
 8026810:	2202      	movpl	r2, #2
 8026812:	4610      	mov	r0, r2
 8026814:	4770      	bx	lr
 8026816:	b299      	uxth	r1, r3
 8026818:	b909      	cbnz	r1, 802681e <__lo0bits+0x2a>
 802681a:	0c1b      	lsrs	r3, r3, #16
 802681c:	2210      	movs	r2, #16
 802681e:	b2d9      	uxtb	r1, r3
 8026820:	b909      	cbnz	r1, 8026826 <__lo0bits+0x32>
 8026822:	3208      	adds	r2, #8
 8026824:	0a1b      	lsrs	r3, r3, #8
 8026826:	0719      	lsls	r1, r3, #28
 8026828:	bf04      	itt	eq
 802682a:	091b      	lsreq	r3, r3, #4
 802682c:	3204      	addeq	r2, #4
 802682e:	0799      	lsls	r1, r3, #30
 8026830:	bf04      	itt	eq
 8026832:	089b      	lsreq	r3, r3, #2
 8026834:	3202      	addeq	r2, #2
 8026836:	07d9      	lsls	r1, r3, #31
 8026838:	d403      	bmi.n	8026842 <__lo0bits+0x4e>
 802683a:	085b      	lsrs	r3, r3, #1
 802683c:	f102 0201 	add.w	r2, r2, #1
 8026840:	d003      	beq.n	802684a <__lo0bits+0x56>
 8026842:	6003      	str	r3, [r0, #0]
 8026844:	e7e5      	b.n	8026812 <__lo0bits+0x1e>
 8026846:	2200      	movs	r2, #0
 8026848:	e7e3      	b.n	8026812 <__lo0bits+0x1e>
 802684a:	2220      	movs	r2, #32
 802684c:	e7e1      	b.n	8026812 <__lo0bits+0x1e>
	...

08026850 <__i2b>:
 8026850:	b510      	push	{r4, lr}
 8026852:	460c      	mov	r4, r1
 8026854:	2101      	movs	r1, #1
 8026856:	f7ff ff05 	bl	8026664 <_Balloc>
 802685a:	4602      	mov	r2, r0
 802685c:	b928      	cbnz	r0, 802686a <__i2b+0x1a>
 802685e:	4b05      	ldr	r3, [pc, #20]	; (8026874 <__i2b+0x24>)
 8026860:	4805      	ldr	r0, [pc, #20]	; (8026878 <__i2b+0x28>)
 8026862:	f240 1145 	movw	r1, #325	; 0x145
 8026866:	f7fe f943 	bl	8024af0 <__assert_func>
 802686a:	2301      	movs	r3, #1
 802686c:	6144      	str	r4, [r0, #20]
 802686e:	6103      	str	r3, [r0, #16]
 8026870:	bd10      	pop	{r4, pc}
 8026872:	bf00      	nop
 8026874:	0802ae1f 	.word	0x0802ae1f
 8026878:	0802ae30 	.word	0x0802ae30

0802687c <__multiply>:
 802687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026880:	4691      	mov	r9, r2
 8026882:	690a      	ldr	r2, [r1, #16]
 8026884:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026888:	429a      	cmp	r2, r3
 802688a:	bfb8      	it	lt
 802688c:	460b      	movlt	r3, r1
 802688e:	460c      	mov	r4, r1
 8026890:	bfbc      	itt	lt
 8026892:	464c      	movlt	r4, r9
 8026894:	4699      	movlt	r9, r3
 8026896:	6927      	ldr	r7, [r4, #16]
 8026898:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802689c:	68a3      	ldr	r3, [r4, #8]
 802689e:	6861      	ldr	r1, [r4, #4]
 80268a0:	eb07 060a 	add.w	r6, r7, sl
 80268a4:	42b3      	cmp	r3, r6
 80268a6:	b085      	sub	sp, #20
 80268a8:	bfb8      	it	lt
 80268aa:	3101      	addlt	r1, #1
 80268ac:	f7ff feda 	bl	8026664 <_Balloc>
 80268b0:	b930      	cbnz	r0, 80268c0 <__multiply+0x44>
 80268b2:	4602      	mov	r2, r0
 80268b4:	4b44      	ldr	r3, [pc, #272]	; (80269c8 <__multiply+0x14c>)
 80268b6:	4845      	ldr	r0, [pc, #276]	; (80269cc <__multiply+0x150>)
 80268b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80268bc:	f7fe f918 	bl	8024af0 <__assert_func>
 80268c0:	f100 0514 	add.w	r5, r0, #20
 80268c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80268c8:	462b      	mov	r3, r5
 80268ca:	2200      	movs	r2, #0
 80268cc:	4543      	cmp	r3, r8
 80268ce:	d321      	bcc.n	8026914 <__multiply+0x98>
 80268d0:	f104 0314 	add.w	r3, r4, #20
 80268d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80268d8:	f109 0314 	add.w	r3, r9, #20
 80268dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80268e0:	9202      	str	r2, [sp, #8]
 80268e2:	1b3a      	subs	r2, r7, r4
 80268e4:	3a15      	subs	r2, #21
 80268e6:	f022 0203 	bic.w	r2, r2, #3
 80268ea:	3204      	adds	r2, #4
 80268ec:	f104 0115 	add.w	r1, r4, #21
 80268f0:	428f      	cmp	r7, r1
 80268f2:	bf38      	it	cc
 80268f4:	2204      	movcc	r2, #4
 80268f6:	9201      	str	r2, [sp, #4]
 80268f8:	9a02      	ldr	r2, [sp, #8]
 80268fa:	9303      	str	r3, [sp, #12]
 80268fc:	429a      	cmp	r2, r3
 80268fe:	d80c      	bhi.n	802691a <__multiply+0x9e>
 8026900:	2e00      	cmp	r6, #0
 8026902:	dd03      	ble.n	802690c <__multiply+0x90>
 8026904:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026908:	2b00      	cmp	r3, #0
 802690a:	d05b      	beq.n	80269c4 <__multiply+0x148>
 802690c:	6106      	str	r6, [r0, #16]
 802690e:	b005      	add	sp, #20
 8026910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026914:	f843 2b04 	str.w	r2, [r3], #4
 8026918:	e7d8      	b.n	80268cc <__multiply+0x50>
 802691a:	f8b3 a000 	ldrh.w	sl, [r3]
 802691e:	f1ba 0f00 	cmp.w	sl, #0
 8026922:	d024      	beq.n	802696e <__multiply+0xf2>
 8026924:	f104 0e14 	add.w	lr, r4, #20
 8026928:	46a9      	mov	r9, r5
 802692a:	f04f 0c00 	mov.w	ip, #0
 802692e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8026932:	f8d9 1000 	ldr.w	r1, [r9]
 8026936:	fa1f fb82 	uxth.w	fp, r2
 802693a:	b289      	uxth	r1, r1
 802693c:	fb0a 110b 	mla	r1, sl, fp, r1
 8026940:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8026944:	f8d9 2000 	ldr.w	r2, [r9]
 8026948:	4461      	add	r1, ip
 802694a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802694e:	fb0a c20b 	mla	r2, sl, fp, ip
 8026952:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8026956:	b289      	uxth	r1, r1
 8026958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802695c:	4577      	cmp	r7, lr
 802695e:	f849 1b04 	str.w	r1, [r9], #4
 8026962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8026966:	d8e2      	bhi.n	802692e <__multiply+0xb2>
 8026968:	9a01      	ldr	r2, [sp, #4]
 802696a:	f845 c002 	str.w	ip, [r5, r2]
 802696e:	9a03      	ldr	r2, [sp, #12]
 8026970:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026974:	3304      	adds	r3, #4
 8026976:	f1b9 0f00 	cmp.w	r9, #0
 802697a:	d021      	beq.n	80269c0 <__multiply+0x144>
 802697c:	6829      	ldr	r1, [r5, #0]
 802697e:	f104 0c14 	add.w	ip, r4, #20
 8026982:	46ae      	mov	lr, r5
 8026984:	f04f 0a00 	mov.w	sl, #0
 8026988:	f8bc b000 	ldrh.w	fp, [ip]
 802698c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026990:	fb09 220b 	mla	r2, r9, fp, r2
 8026994:	4452      	add	r2, sl
 8026996:	b289      	uxth	r1, r1
 8026998:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802699c:	f84e 1b04 	str.w	r1, [lr], #4
 80269a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80269a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80269a8:	f8be 1000 	ldrh.w	r1, [lr]
 80269ac:	fb09 110a 	mla	r1, r9, sl, r1
 80269b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80269b4:	4567      	cmp	r7, ip
 80269b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80269ba:	d8e5      	bhi.n	8026988 <__multiply+0x10c>
 80269bc:	9a01      	ldr	r2, [sp, #4]
 80269be:	50a9      	str	r1, [r5, r2]
 80269c0:	3504      	adds	r5, #4
 80269c2:	e799      	b.n	80268f8 <__multiply+0x7c>
 80269c4:	3e01      	subs	r6, #1
 80269c6:	e79b      	b.n	8026900 <__multiply+0x84>
 80269c8:	0802ae1f 	.word	0x0802ae1f
 80269cc:	0802ae30 	.word	0x0802ae30

080269d0 <__pow5mult>:
 80269d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269d4:	4615      	mov	r5, r2
 80269d6:	f012 0203 	ands.w	r2, r2, #3
 80269da:	4606      	mov	r6, r0
 80269dc:	460f      	mov	r7, r1
 80269de:	d007      	beq.n	80269f0 <__pow5mult+0x20>
 80269e0:	4c25      	ldr	r4, [pc, #148]	; (8026a78 <__pow5mult+0xa8>)
 80269e2:	3a01      	subs	r2, #1
 80269e4:	2300      	movs	r3, #0
 80269e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80269ea:	f7ff fe9d 	bl	8026728 <__multadd>
 80269ee:	4607      	mov	r7, r0
 80269f0:	10ad      	asrs	r5, r5, #2
 80269f2:	d03d      	beq.n	8026a70 <__pow5mult+0xa0>
 80269f4:	69f4      	ldr	r4, [r6, #28]
 80269f6:	b97c      	cbnz	r4, 8026a18 <__pow5mult+0x48>
 80269f8:	2010      	movs	r0, #16
 80269fa:	f7ff fd7f 	bl	80264fc <malloc>
 80269fe:	4602      	mov	r2, r0
 8026a00:	61f0      	str	r0, [r6, #28]
 8026a02:	b928      	cbnz	r0, 8026a10 <__pow5mult+0x40>
 8026a04:	4b1d      	ldr	r3, [pc, #116]	; (8026a7c <__pow5mult+0xac>)
 8026a06:	481e      	ldr	r0, [pc, #120]	; (8026a80 <__pow5mult+0xb0>)
 8026a08:	f240 11b3 	movw	r1, #435	; 0x1b3
 8026a0c:	f7fe f870 	bl	8024af0 <__assert_func>
 8026a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026a14:	6004      	str	r4, [r0, #0]
 8026a16:	60c4      	str	r4, [r0, #12]
 8026a18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8026a1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026a20:	b94c      	cbnz	r4, 8026a36 <__pow5mult+0x66>
 8026a22:	f240 2171 	movw	r1, #625	; 0x271
 8026a26:	4630      	mov	r0, r6
 8026a28:	f7ff ff12 	bl	8026850 <__i2b>
 8026a2c:	2300      	movs	r3, #0
 8026a2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8026a32:	4604      	mov	r4, r0
 8026a34:	6003      	str	r3, [r0, #0]
 8026a36:	f04f 0900 	mov.w	r9, #0
 8026a3a:	07eb      	lsls	r3, r5, #31
 8026a3c:	d50a      	bpl.n	8026a54 <__pow5mult+0x84>
 8026a3e:	4639      	mov	r1, r7
 8026a40:	4622      	mov	r2, r4
 8026a42:	4630      	mov	r0, r6
 8026a44:	f7ff ff1a 	bl	802687c <__multiply>
 8026a48:	4639      	mov	r1, r7
 8026a4a:	4680      	mov	r8, r0
 8026a4c:	4630      	mov	r0, r6
 8026a4e:	f7ff fe49 	bl	80266e4 <_Bfree>
 8026a52:	4647      	mov	r7, r8
 8026a54:	106d      	asrs	r5, r5, #1
 8026a56:	d00b      	beq.n	8026a70 <__pow5mult+0xa0>
 8026a58:	6820      	ldr	r0, [r4, #0]
 8026a5a:	b938      	cbnz	r0, 8026a6c <__pow5mult+0x9c>
 8026a5c:	4622      	mov	r2, r4
 8026a5e:	4621      	mov	r1, r4
 8026a60:	4630      	mov	r0, r6
 8026a62:	f7ff ff0b 	bl	802687c <__multiply>
 8026a66:	6020      	str	r0, [r4, #0]
 8026a68:	f8c0 9000 	str.w	r9, [r0]
 8026a6c:	4604      	mov	r4, r0
 8026a6e:	e7e4      	b.n	8026a3a <__pow5mult+0x6a>
 8026a70:	4638      	mov	r0, r7
 8026a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a76:	bf00      	nop
 8026a78:	0802af80 	.word	0x0802af80
 8026a7c:	0802adb0 	.word	0x0802adb0
 8026a80:	0802ae30 	.word	0x0802ae30

08026a84 <__lshift>:
 8026a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a88:	460c      	mov	r4, r1
 8026a8a:	6849      	ldr	r1, [r1, #4]
 8026a8c:	6923      	ldr	r3, [r4, #16]
 8026a8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026a92:	68a3      	ldr	r3, [r4, #8]
 8026a94:	4607      	mov	r7, r0
 8026a96:	4691      	mov	r9, r2
 8026a98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026a9c:	f108 0601 	add.w	r6, r8, #1
 8026aa0:	42b3      	cmp	r3, r6
 8026aa2:	db0b      	blt.n	8026abc <__lshift+0x38>
 8026aa4:	4638      	mov	r0, r7
 8026aa6:	f7ff fddd 	bl	8026664 <_Balloc>
 8026aaa:	4605      	mov	r5, r0
 8026aac:	b948      	cbnz	r0, 8026ac2 <__lshift+0x3e>
 8026aae:	4602      	mov	r2, r0
 8026ab0:	4b28      	ldr	r3, [pc, #160]	; (8026b54 <__lshift+0xd0>)
 8026ab2:	4829      	ldr	r0, [pc, #164]	; (8026b58 <__lshift+0xd4>)
 8026ab4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8026ab8:	f7fe f81a 	bl	8024af0 <__assert_func>
 8026abc:	3101      	adds	r1, #1
 8026abe:	005b      	lsls	r3, r3, #1
 8026ac0:	e7ee      	b.n	8026aa0 <__lshift+0x1c>
 8026ac2:	2300      	movs	r3, #0
 8026ac4:	f100 0114 	add.w	r1, r0, #20
 8026ac8:	f100 0210 	add.w	r2, r0, #16
 8026acc:	4618      	mov	r0, r3
 8026ace:	4553      	cmp	r3, sl
 8026ad0:	db33      	blt.n	8026b3a <__lshift+0xb6>
 8026ad2:	6920      	ldr	r0, [r4, #16]
 8026ad4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026ad8:	f104 0314 	add.w	r3, r4, #20
 8026adc:	f019 091f 	ands.w	r9, r9, #31
 8026ae0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026ae4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026ae8:	d02b      	beq.n	8026b42 <__lshift+0xbe>
 8026aea:	f1c9 0e20 	rsb	lr, r9, #32
 8026aee:	468a      	mov	sl, r1
 8026af0:	2200      	movs	r2, #0
 8026af2:	6818      	ldr	r0, [r3, #0]
 8026af4:	fa00 f009 	lsl.w	r0, r0, r9
 8026af8:	4310      	orrs	r0, r2
 8026afa:	f84a 0b04 	str.w	r0, [sl], #4
 8026afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b02:	459c      	cmp	ip, r3
 8026b04:	fa22 f20e 	lsr.w	r2, r2, lr
 8026b08:	d8f3      	bhi.n	8026af2 <__lshift+0x6e>
 8026b0a:	ebac 0304 	sub.w	r3, ip, r4
 8026b0e:	3b15      	subs	r3, #21
 8026b10:	f023 0303 	bic.w	r3, r3, #3
 8026b14:	3304      	adds	r3, #4
 8026b16:	f104 0015 	add.w	r0, r4, #21
 8026b1a:	4584      	cmp	ip, r0
 8026b1c:	bf38      	it	cc
 8026b1e:	2304      	movcc	r3, #4
 8026b20:	50ca      	str	r2, [r1, r3]
 8026b22:	b10a      	cbz	r2, 8026b28 <__lshift+0xa4>
 8026b24:	f108 0602 	add.w	r6, r8, #2
 8026b28:	3e01      	subs	r6, #1
 8026b2a:	4638      	mov	r0, r7
 8026b2c:	612e      	str	r6, [r5, #16]
 8026b2e:	4621      	mov	r1, r4
 8026b30:	f7ff fdd8 	bl	80266e4 <_Bfree>
 8026b34:	4628      	mov	r0, r5
 8026b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8026b3e:	3301      	adds	r3, #1
 8026b40:	e7c5      	b.n	8026ace <__lshift+0x4a>
 8026b42:	3904      	subs	r1, #4
 8026b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8026b48:	f841 2f04 	str.w	r2, [r1, #4]!
 8026b4c:	459c      	cmp	ip, r3
 8026b4e:	d8f9      	bhi.n	8026b44 <__lshift+0xc0>
 8026b50:	e7ea      	b.n	8026b28 <__lshift+0xa4>
 8026b52:	bf00      	nop
 8026b54:	0802ae1f 	.word	0x0802ae1f
 8026b58:	0802ae30 	.word	0x0802ae30

08026b5c <__mcmp>:
 8026b5c:	b530      	push	{r4, r5, lr}
 8026b5e:	6902      	ldr	r2, [r0, #16]
 8026b60:	690c      	ldr	r4, [r1, #16]
 8026b62:	1b12      	subs	r2, r2, r4
 8026b64:	d10e      	bne.n	8026b84 <__mcmp+0x28>
 8026b66:	f100 0314 	add.w	r3, r0, #20
 8026b6a:	3114      	adds	r1, #20
 8026b6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026b70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026b74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026b78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026b7c:	42a5      	cmp	r5, r4
 8026b7e:	d003      	beq.n	8026b88 <__mcmp+0x2c>
 8026b80:	d305      	bcc.n	8026b8e <__mcmp+0x32>
 8026b82:	2201      	movs	r2, #1
 8026b84:	4610      	mov	r0, r2
 8026b86:	bd30      	pop	{r4, r5, pc}
 8026b88:	4283      	cmp	r3, r0
 8026b8a:	d3f3      	bcc.n	8026b74 <__mcmp+0x18>
 8026b8c:	e7fa      	b.n	8026b84 <__mcmp+0x28>
 8026b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8026b92:	e7f7      	b.n	8026b84 <__mcmp+0x28>

08026b94 <__mdiff>:
 8026b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b98:	460c      	mov	r4, r1
 8026b9a:	4606      	mov	r6, r0
 8026b9c:	4611      	mov	r1, r2
 8026b9e:	4620      	mov	r0, r4
 8026ba0:	4690      	mov	r8, r2
 8026ba2:	f7ff ffdb 	bl	8026b5c <__mcmp>
 8026ba6:	1e05      	subs	r5, r0, #0
 8026ba8:	d110      	bne.n	8026bcc <__mdiff+0x38>
 8026baa:	4629      	mov	r1, r5
 8026bac:	4630      	mov	r0, r6
 8026bae:	f7ff fd59 	bl	8026664 <_Balloc>
 8026bb2:	b930      	cbnz	r0, 8026bc2 <__mdiff+0x2e>
 8026bb4:	4b3a      	ldr	r3, [pc, #232]	; (8026ca0 <__mdiff+0x10c>)
 8026bb6:	4602      	mov	r2, r0
 8026bb8:	f240 2137 	movw	r1, #567	; 0x237
 8026bbc:	4839      	ldr	r0, [pc, #228]	; (8026ca4 <__mdiff+0x110>)
 8026bbe:	f7fd ff97 	bl	8024af0 <__assert_func>
 8026bc2:	2301      	movs	r3, #1
 8026bc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bcc:	bfa4      	itt	ge
 8026bce:	4643      	movge	r3, r8
 8026bd0:	46a0      	movge	r8, r4
 8026bd2:	4630      	mov	r0, r6
 8026bd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026bd8:	bfa6      	itte	ge
 8026bda:	461c      	movge	r4, r3
 8026bdc:	2500      	movge	r5, #0
 8026bde:	2501      	movlt	r5, #1
 8026be0:	f7ff fd40 	bl	8026664 <_Balloc>
 8026be4:	b920      	cbnz	r0, 8026bf0 <__mdiff+0x5c>
 8026be6:	4b2e      	ldr	r3, [pc, #184]	; (8026ca0 <__mdiff+0x10c>)
 8026be8:	4602      	mov	r2, r0
 8026bea:	f240 2145 	movw	r1, #581	; 0x245
 8026bee:	e7e5      	b.n	8026bbc <__mdiff+0x28>
 8026bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8026bf4:	6926      	ldr	r6, [r4, #16]
 8026bf6:	60c5      	str	r5, [r0, #12]
 8026bf8:	f104 0914 	add.w	r9, r4, #20
 8026bfc:	f108 0514 	add.w	r5, r8, #20
 8026c00:	f100 0e14 	add.w	lr, r0, #20
 8026c04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8026c08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8026c0c:	f108 0210 	add.w	r2, r8, #16
 8026c10:	46f2      	mov	sl, lr
 8026c12:	2100      	movs	r1, #0
 8026c14:	f859 3b04 	ldr.w	r3, [r9], #4
 8026c18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026c1c:	fa11 f88b 	uxtah	r8, r1, fp
 8026c20:	b299      	uxth	r1, r3
 8026c22:	0c1b      	lsrs	r3, r3, #16
 8026c24:	eba8 0801 	sub.w	r8, r8, r1
 8026c28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8026c2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026c30:	fa1f f888 	uxth.w	r8, r8
 8026c34:	1419      	asrs	r1, r3, #16
 8026c36:	454e      	cmp	r6, r9
 8026c38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8026c3c:	f84a 3b04 	str.w	r3, [sl], #4
 8026c40:	d8e8      	bhi.n	8026c14 <__mdiff+0x80>
 8026c42:	1b33      	subs	r3, r6, r4
 8026c44:	3b15      	subs	r3, #21
 8026c46:	f023 0303 	bic.w	r3, r3, #3
 8026c4a:	3304      	adds	r3, #4
 8026c4c:	3415      	adds	r4, #21
 8026c4e:	42a6      	cmp	r6, r4
 8026c50:	bf38      	it	cc
 8026c52:	2304      	movcc	r3, #4
 8026c54:	441d      	add	r5, r3
 8026c56:	4473      	add	r3, lr
 8026c58:	469e      	mov	lr, r3
 8026c5a:	462e      	mov	r6, r5
 8026c5c:	4566      	cmp	r6, ip
 8026c5e:	d30e      	bcc.n	8026c7e <__mdiff+0xea>
 8026c60:	f10c 0203 	add.w	r2, ip, #3
 8026c64:	1b52      	subs	r2, r2, r5
 8026c66:	f022 0203 	bic.w	r2, r2, #3
 8026c6a:	3d03      	subs	r5, #3
 8026c6c:	45ac      	cmp	ip, r5
 8026c6e:	bf38      	it	cc
 8026c70:	2200      	movcc	r2, #0
 8026c72:	4413      	add	r3, r2
 8026c74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8026c78:	b17a      	cbz	r2, 8026c9a <__mdiff+0x106>
 8026c7a:	6107      	str	r7, [r0, #16]
 8026c7c:	e7a4      	b.n	8026bc8 <__mdiff+0x34>
 8026c7e:	f856 8b04 	ldr.w	r8, [r6], #4
 8026c82:	fa11 f288 	uxtah	r2, r1, r8
 8026c86:	1414      	asrs	r4, r2, #16
 8026c88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8026c8c:	b292      	uxth	r2, r2
 8026c8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8026c92:	f84e 2b04 	str.w	r2, [lr], #4
 8026c96:	1421      	asrs	r1, r4, #16
 8026c98:	e7e0      	b.n	8026c5c <__mdiff+0xc8>
 8026c9a:	3f01      	subs	r7, #1
 8026c9c:	e7ea      	b.n	8026c74 <__mdiff+0xe0>
 8026c9e:	bf00      	nop
 8026ca0:	0802ae1f 	.word	0x0802ae1f
 8026ca4:	0802ae30 	.word	0x0802ae30

08026ca8 <__d2b>:
 8026ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026cac:	460f      	mov	r7, r1
 8026cae:	2101      	movs	r1, #1
 8026cb0:	ec59 8b10 	vmov	r8, r9, d0
 8026cb4:	4616      	mov	r6, r2
 8026cb6:	f7ff fcd5 	bl	8026664 <_Balloc>
 8026cba:	4604      	mov	r4, r0
 8026cbc:	b930      	cbnz	r0, 8026ccc <__d2b+0x24>
 8026cbe:	4602      	mov	r2, r0
 8026cc0:	4b24      	ldr	r3, [pc, #144]	; (8026d54 <__d2b+0xac>)
 8026cc2:	4825      	ldr	r0, [pc, #148]	; (8026d58 <__d2b+0xb0>)
 8026cc4:	f240 310f 	movw	r1, #783	; 0x30f
 8026cc8:	f7fd ff12 	bl	8024af0 <__assert_func>
 8026ccc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8026cd4:	bb2d      	cbnz	r5, 8026d22 <__d2b+0x7a>
 8026cd6:	9301      	str	r3, [sp, #4]
 8026cd8:	f1b8 0300 	subs.w	r3, r8, #0
 8026cdc:	d026      	beq.n	8026d2c <__d2b+0x84>
 8026cde:	4668      	mov	r0, sp
 8026ce0:	9300      	str	r3, [sp, #0]
 8026ce2:	f7ff fd87 	bl	80267f4 <__lo0bits>
 8026ce6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026cea:	b1e8      	cbz	r0, 8026d28 <__d2b+0x80>
 8026cec:	f1c0 0320 	rsb	r3, r0, #32
 8026cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8026cf4:	430b      	orrs	r3, r1
 8026cf6:	40c2      	lsrs	r2, r0
 8026cf8:	6163      	str	r3, [r4, #20]
 8026cfa:	9201      	str	r2, [sp, #4]
 8026cfc:	9b01      	ldr	r3, [sp, #4]
 8026cfe:	61a3      	str	r3, [r4, #24]
 8026d00:	2b00      	cmp	r3, #0
 8026d02:	bf14      	ite	ne
 8026d04:	2202      	movne	r2, #2
 8026d06:	2201      	moveq	r2, #1
 8026d08:	6122      	str	r2, [r4, #16]
 8026d0a:	b1bd      	cbz	r5, 8026d3c <__d2b+0x94>
 8026d0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8026d10:	4405      	add	r5, r0
 8026d12:	603d      	str	r5, [r7, #0]
 8026d14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026d18:	6030      	str	r0, [r6, #0]
 8026d1a:	4620      	mov	r0, r4
 8026d1c:	b003      	add	sp, #12
 8026d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026d26:	e7d6      	b.n	8026cd6 <__d2b+0x2e>
 8026d28:	6161      	str	r1, [r4, #20]
 8026d2a:	e7e7      	b.n	8026cfc <__d2b+0x54>
 8026d2c:	a801      	add	r0, sp, #4
 8026d2e:	f7ff fd61 	bl	80267f4 <__lo0bits>
 8026d32:	9b01      	ldr	r3, [sp, #4]
 8026d34:	6163      	str	r3, [r4, #20]
 8026d36:	3020      	adds	r0, #32
 8026d38:	2201      	movs	r2, #1
 8026d3a:	e7e5      	b.n	8026d08 <__d2b+0x60>
 8026d3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026d40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026d44:	6038      	str	r0, [r7, #0]
 8026d46:	6918      	ldr	r0, [r3, #16]
 8026d48:	f7ff fd34 	bl	80267b4 <__hi0bits>
 8026d4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026d50:	e7e2      	b.n	8026d18 <__d2b+0x70>
 8026d52:	bf00      	nop
 8026d54:	0802ae1f 	.word	0x0802ae1f
 8026d58:	0802ae30 	.word	0x0802ae30

08026d5c <__ssputs_r>:
 8026d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026d60:	688e      	ldr	r6, [r1, #8]
 8026d62:	461f      	mov	r7, r3
 8026d64:	42be      	cmp	r6, r7
 8026d66:	680b      	ldr	r3, [r1, #0]
 8026d68:	4682      	mov	sl, r0
 8026d6a:	460c      	mov	r4, r1
 8026d6c:	4690      	mov	r8, r2
 8026d6e:	d82c      	bhi.n	8026dca <__ssputs_r+0x6e>
 8026d70:	898a      	ldrh	r2, [r1, #12]
 8026d72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026d76:	d026      	beq.n	8026dc6 <__ssputs_r+0x6a>
 8026d78:	6965      	ldr	r5, [r4, #20]
 8026d7a:	6909      	ldr	r1, [r1, #16]
 8026d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026d80:	eba3 0901 	sub.w	r9, r3, r1
 8026d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026d88:	1c7b      	adds	r3, r7, #1
 8026d8a:	444b      	add	r3, r9
 8026d8c:	106d      	asrs	r5, r5, #1
 8026d8e:	429d      	cmp	r5, r3
 8026d90:	bf38      	it	cc
 8026d92:	461d      	movcc	r5, r3
 8026d94:	0553      	lsls	r3, r2, #21
 8026d96:	d527      	bpl.n	8026de8 <__ssputs_r+0x8c>
 8026d98:	4629      	mov	r1, r5
 8026d9a:	f7ff fbd7 	bl	802654c <_malloc_r>
 8026d9e:	4606      	mov	r6, r0
 8026da0:	b360      	cbz	r0, 8026dfc <__ssputs_r+0xa0>
 8026da2:	6921      	ldr	r1, [r4, #16]
 8026da4:	464a      	mov	r2, r9
 8026da6:	f7fe fccb 	bl	8025740 <memcpy>
 8026daa:	89a3      	ldrh	r3, [r4, #12]
 8026dac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026db4:	81a3      	strh	r3, [r4, #12]
 8026db6:	6126      	str	r6, [r4, #16]
 8026db8:	6165      	str	r5, [r4, #20]
 8026dba:	444e      	add	r6, r9
 8026dbc:	eba5 0509 	sub.w	r5, r5, r9
 8026dc0:	6026      	str	r6, [r4, #0]
 8026dc2:	60a5      	str	r5, [r4, #8]
 8026dc4:	463e      	mov	r6, r7
 8026dc6:	42be      	cmp	r6, r7
 8026dc8:	d900      	bls.n	8026dcc <__ssputs_r+0x70>
 8026dca:	463e      	mov	r6, r7
 8026dcc:	6820      	ldr	r0, [r4, #0]
 8026dce:	4632      	mov	r2, r6
 8026dd0:	4641      	mov	r1, r8
 8026dd2:	f000 fba3 	bl	802751c <memmove>
 8026dd6:	68a3      	ldr	r3, [r4, #8]
 8026dd8:	1b9b      	subs	r3, r3, r6
 8026dda:	60a3      	str	r3, [r4, #8]
 8026ddc:	6823      	ldr	r3, [r4, #0]
 8026dde:	4433      	add	r3, r6
 8026de0:	6023      	str	r3, [r4, #0]
 8026de2:	2000      	movs	r0, #0
 8026de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026de8:	462a      	mov	r2, r5
 8026dea:	f000 fc2d 	bl	8027648 <_realloc_r>
 8026dee:	4606      	mov	r6, r0
 8026df0:	2800      	cmp	r0, #0
 8026df2:	d1e0      	bne.n	8026db6 <__ssputs_r+0x5a>
 8026df4:	6921      	ldr	r1, [r4, #16]
 8026df6:	4650      	mov	r0, sl
 8026df8:	f7ff fb34 	bl	8026464 <_free_r>
 8026dfc:	230c      	movs	r3, #12
 8026dfe:	f8ca 3000 	str.w	r3, [sl]
 8026e02:	89a3      	ldrh	r3, [r4, #12]
 8026e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026e08:	81a3      	strh	r3, [r4, #12]
 8026e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8026e0e:	e7e9      	b.n	8026de4 <__ssputs_r+0x88>

08026e10 <_svfiprintf_r>:
 8026e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e14:	4698      	mov	r8, r3
 8026e16:	898b      	ldrh	r3, [r1, #12]
 8026e18:	061b      	lsls	r3, r3, #24
 8026e1a:	b09d      	sub	sp, #116	; 0x74
 8026e1c:	4607      	mov	r7, r0
 8026e1e:	460d      	mov	r5, r1
 8026e20:	4614      	mov	r4, r2
 8026e22:	d50e      	bpl.n	8026e42 <_svfiprintf_r+0x32>
 8026e24:	690b      	ldr	r3, [r1, #16]
 8026e26:	b963      	cbnz	r3, 8026e42 <_svfiprintf_r+0x32>
 8026e28:	2140      	movs	r1, #64	; 0x40
 8026e2a:	f7ff fb8f 	bl	802654c <_malloc_r>
 8026e2e:	6028      	str	r0, [r5, #0]
 8026e30:	6128      	str	r0, [r5, #16]
 8026e32:	b920      	cbnz	r0, 8026e3e <_svfiprintf_r+0x2e>
 8026e34:	230c      	movs	r3, #12
 8026e36:	603b      	str	r3, [r7, #0]
 8026e38:	f04f 30ff 	mov.w	r0, #4294967295
 8026e3c:	e0d0      	b.n	8026fe0 <_svfiprintf_r+0x1d0>
 8026e3e:	2340      	movs	r3, #64	; 0x40
 8026e40:	616b      	str	r3, [r5, #20]
 8026e42:	2300      	movs	r3, #0
 8026e44:	9309      	str	r3, [sp, #36]	; 0x24
 8026e46:	2320      	movs	r3, #32
 8026e48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026e50:	2330      	movs	r3, #48	; 0x30
 8026e52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8026ff8 <_svfiprintf_r+0x1e8>
 8026e56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026e5a:	f04f 0901 	mov.w	r9, #1
 8026e5e:	4623      	mov	r3, r4
 8026e60:	469a      	mov	sl, r3
 8026e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026e66:	b10a      	cbz	r2, 8026e6c <_svfiprintf_r+0x5c>
 8026e68:	2a25      	cmp	r2, #37	; 0x25
 8026e6a:	d1f9      	bne.n	8026e60 <_svfiprintf_r+0x50>
 8026e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8026e70:	d00b      	beq.n	8026e8a <_svfiprintf_r+0x7a>
 8026e72:	465b      	mov	r3, fp
 8026e74:	4622      	mov	r2, r4
 8026e76:	4629      	mov	r1, r5
 8026e78:	4638      	mov	r0, r7
 8026e7a:	f7ff ff6f 	bl	8026d5c <__ssputs_r>
 8026e7e:	3001      	adds	r0, #1
 8026e80:	f000 80a9 	beq.w	8026fd6 <_svfiprintf_r+0x1c6>
 8026e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e86:	445a      	add	r2, fp
 8026e88:	9209      	str	r2, [sp, #36]	; 0x24
 8026e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8026e8e:	2b00      	cmp	r3, #0
 8026e90:	f000 80a1 	beq.w	8026fd6 <_svfiprintf_r+0x1c6>
 8026e94:	2300      	movs	r3, #0
 8026e96:	f04f 32ff 	mov.w	r2, #4294967295
 8026e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026e9e:	f10a 0a01 	add.w	sl, sl, #1
 8026ea2:	9304      	str	r3, [sp, #16]
 8026ea4:	9307      	str	r3, [sp, #28]
 8026ea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026eaa:	931a      	str	r3, [sp, #104]	; 0x68
 8026eac:	4654      	mov	r4, sl
 8026eae:	2205      	movs	r2, #5
 8026eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026eb4:	4850      	ldr	r0, [pc, #320]	; (8026ff8 <_svfiprintf_r+0x1e8>)
 8026eb6:	f7d9 f9b3 	bl	8000220 <memchr>
 8026eba:	9a04      	ldr	r2, [sp, #16]
 8026ebc:	b9d8      	cbnz	r0, 8026ef6 <_svfiprintf_r+0xe6>
 8026ebe:	06d0      	lsls	r0, r2, #27
 8026ec0:	bf44      	itt	mi
 8026ec2:	2320      	movmi	r3, #32
 8026ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026ec8:	0711      	lsls	r1, r2, #28
 8026eca:	bf44      	itt	mi
 8026ecc:	232b      	movmi	r3, #43	; 0x2b
 8026ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8026ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8026ed8:	d015      	beq.n	8026f06 <_svfiprintf_r+0xf6>
 8026eda:	9a07      	ldr	r2, [sp, #28]
 8026edc:	4654      	mov	r4, sl
 8026ede:	2000      	movs	r0, #0
 8026ee0:	f04f 0c0a 	mov.w	ip, #10
 8026ee4:	4621      	mov	r1, r4
 8026ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026eea:	3b30      	subs	r3, #48	; 0x30
 8026eec:	2b09      	cmp	r3, #9
 8026eee:	d94d      	bls.n	8026f8c <_svfiprintf_r+0x17c>
 8026ef0:	b1b0      	cbz	r0, 8026f20 <_svfiprintf_r+0x110>
 8026ef2:	9207      	str	r2, [sp, #28]
 8026ef4:	e014      	b.n	8026f20 <_svfiprintf_r+0x110>
 8026ef6:	eba0 0308 	sub.w	r3, r0, r8
 8026efa:	fa09 f303 	lsl.w	r3, r9, r3
 8026efe:	4313      	orrs	r3, r2
 8026f00:	9304      	str	r3, [sp, #16]
 8026f02:	46a2      	mov	sl, r4
 8026f04:	e7d2      	b.n	8026eac <_svfiprintf_r+0x9c>
 8026f06:	9b03      	ldr	r3, [sp, #12]
 8026f08:	1d19      	adds	r1, r3, #4
 8026f0a:	681b      	ldr	r3, [r3, #0]
 8026f0c:	9103      	str	r1, [sp, #12]
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	bfbb      	ittet	lt
 8026f12:	425b      	neglt	r3, r3
 8026f14:	f042 0202 	orrlt.w	r2, r2, #2
 8026f18:	9307      	strge	r3, [sp, #28]
 8026f1a:	9307      	strlt	r3, [sp, #28]
 8026f1c:	bfb8      	it	lt
 8026f1e:	9204      	strlt	r2, [sp, #16]
 8026f20:	7823      	ldrb	r3, [r4, #0]
 8026f22:	2b2e      	cmp	r3, #46	; 0x2e
 8026f24:	d10c      	bne.n	8026f40 <_svfiprintf_r+0x130>
 8026f26:	7863      	ldrb	r3, [r4, #1]
 8026f28:	2b2a      	cmp	r3, #42	; 0x2a
 8026f2a:	d134      	bne.n	8026f96 <_svfiprintf_r+0x186>
 8026f2c:	9b03      	ldr	r3, [sp, #12]
 8026f2e:	1d1a      	adds	r2, r3, #4
 8026f30:	681b      	ldr	r3, [r3, #0]
 8026f32:	9203      	str	r2, [sp, #12]
 8026f34:	2b00      	cmp	r3, #0
 8026f36:	bfb8      	it	lt
 8026f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8026f3c:	3402      	adds	r4, #2
 8026f3e:	9305      	str	r3, [sp, #20]
 8026f40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8027008 <_svfiprintf_r+0x1f8>
 8026f44:	7821      	ldrb	r1, [r4, #0]
 8026f46:	2203      	movs	r2, #3
 8026f48:	4650      	mov	r0, sl
 8026f4a:	f7d9 f969 	bl	8000220 <memchr>
 8026f4e:	b138      	cbz	r0, 8026f60 <_svfiprintf_r+0x150>
 8026f50:	9b04      	ldr	r3, [sp, #16]
 8026f52:	eba0 000a 	sub.w	r0, r0, sl
 8026f56:	2240      	movs	r2, #64	; 0x40
 8026f58:	4082      	lsls	r2, r0
 8026f5a:	4313      	orrs	r3, r2
 8026f5c:	3401      	adds	r4, #1
 8026f5e:	9304      	str	r3, [sp, #16]
 8026f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026f64:	4825      	ldr	r0, [pc, #148]	; (8026ffc <_svfiprintf_r+0x1ec>)
 8026f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026f6a:	2206      	movs	r2, #6
 8026f6c:	f7d9 f958 	bl	8000220 <memchr>
 8026f70:	2800      	cmp	r0, #0
 8026f72:	d038      	beq.n	8026fe6 <_svfiprintf_r+0x1d6>
 8026f74:	4b22      	ldr	r3, [pc, #136]	; (8027000 <_svfiprintf_r+0x1f0>)
 8026f76:	bb1b      	cbnz	r3, 8026fc0 <_svfiprintf_r+0x1b0>
 8026f78:	9b03      	ldr	r3, [sp, #12]
 8026f7a:	3307      	adds	r3, #7
 8026f7c:	f023 0307 	bic.w	r3, r3, #7
 8026f80:	3308      	adds	r3, #8
 8026f82:	9303      	str	r3, [sp, #12]
 8026f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f86:	4433      	add	r3, r6
 8026f88:	9309      	str	r3, [sp, #36]	; 0x24
 8026f8a:	e768      	b.n	8026e5e <_svfiprintf_r+0x4e>
 8026f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026f90:	460c      	mov	r4, r1
 8026f92:	2001      	movs	r0, #1
 8026f94:	e7a6      	b.n	8026ee4 <_svfiprintf_r+0xd4>
 8026f96:	2300      	movs	r3, #0
 8026f98:	3401      	adds	r4, #1
 8026f9a:	9305      	str	r3, [sp, #20]
 8026f9c:	4619      	mov	r1, r3
 8026f9e:	f04f 0c0a 	mov.w	ip, #10
 8026fa2:	4620      	mov	r0, r4
 8026fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026fa8:	3a30      	subs	r2, #48	; 0x30
 8026faa:	2a09      	cmp	r2, #9
 8026fac:	d903      	bls.n	8026fb6 <_svfiprintf_r+0x1a6>
 8026fae:	2b00      	cmp	r3, #0
 8026fb0:	d0c6      	beq.n	8026f40 <_svfiprintf_r+0x130>
 8026fb2:	9105      	str	r1, [sp, #20]
 8026fb4:	e7c4      	b.n	8026f40 <_svfiprintf_r+0x130>
 8026fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8026fba:	4604      	mov	r4, r0
 8026fbc:	2301      	movs	r3, #1
 8026fbe:	e7f0      	b.n	8026fa2 <_svfiprintf_r+0x192>
 8026fc0:	ab03      	add	r3, sp, #12
 8026fc2:	9300      	str	r3, [sp, #0]
 8026fc4:	462a      	mov	r2, r5
 8026fc6:	4b0f      	ldr	r3, [pc, #60]	; (8027004 <_svfiprintf_r+0x1f4>)
 8026fc8:	a904      	add	r1, sp, #16
 8026fca:	4638      	mov	r0, r7
 8026fcc:	f7fd fe4e 	bl	8024c6c <_printf_float>
 8026fd0:	1c42      	adds	r2, r0, #1
 8026fd2:	4606      	mov	r6, r0
 8026fd4:	d1d6      	bne.n	8026f84 <_svfiprintf_r+0x174>
 8026fd6:	89ab      	ldrh	r3, [r5, #12]
 8026fd8:	065b      	lsls	r3, r3, #25
 8026fda:	f53f af2d 	bmi.w	8026e38 <_svfiprintf_r+0x28>
 8026fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026fe0:	b01d      	add	sp, #116	; 0x74
 8026fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026fe6:	ab03      	add	r3, sp, #12
 8026fe8:	9300      	str	r3, [sp, #0]
 8026fea:	462a      	mov	r2, r5
 8026fec:	4b05      	ldr	r3, [pc, #20]	; (8027004 <_svfiprintf_r+0x1f4>)
 8026fee:	a904      	add	r1, sp, #16
 8026ff0:	4638      	mov	r0, r7
 8026ff2:	f7fe f8df 	bl	80251b4 <_printf_i>
 8026ff6:	e7eb      	b.n	8026fd0 <_svfiprintf_r+0x1c0>
 8026ff8:	0802af8c 	.word	0x0802af8c
 8026ffc:	0802af96 	.word	0x0802af96
 8027000:	08024c6d 	.word	0x08024c6d
 8027004:	08026d5d 	.word	0x08026d5d
 8027008:	0802af92 	.word	0x0802af92

0802700c <__sfputc_r>:
 802700c:	6893      	ldr	r3, [r2, #8]
 802700e:	3b01      	subs	r3, #1
 8027010:	2b00      	cmp	r3, #0
 8027012:	b410      	push	{r4}
 8027014:	6093      	str	r3, [r2, #8]
 8027016:	da08      	bge.n	802702a <__sfputc_r+0x1e>
 8027018:	6994      	ldr	r4, [r2, #24]
 802701a:	42a3      	cmp	r3, r4
 802701c:	db01      	blt.n	8027022 <__sfputc_r+0x16>
 802701e:	290a      	cmp	r1, #10
 8027020:	d103      	bne.n	802702a <__sfputc_r+0x1e>
 8027022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027026:	f000 b9e3 	b.w	80273f0 <__swbuf_r>
 802702a:	6813      	ldr	r3, [r2, #0]
 802702c:	1c58      	adds	r0, r3, #1
 802702e:	6010      	str	r0, [r2, #0]
 8027030:	7019      	strb	r1, [r3, #0]
 8027032:	4608      	mov	r0, r1
 8027034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027038:	4770      	bx	lr

0802703a <__sfputs_r>:
 802703a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802703c:	4606      	mov	r6, r0
 802703e:	460f      	mov	r7, r1
 8027040:	4614      	mov	r4, r2
 8027042:	18d5      	adds	r5, r2, r3
 8027044:	42ac      	cmp	r4, r5
 8027046:	d101      	bne.n	802704c <__sfputs_r+0x12>
 8027048:	2000      	movs	r0, #0
 802704a:	e007      	b.n	802705c <__sfputs_r+0x22>
 802704c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027050:	463a      	mov	r2, r7
 8027052:	4630      	mov	r0, r6
 8027054:	f7ff ffda 	bl	802700c <__sfputc_r>
 8027058:	1c43      	adds	r3, r0, #1
 802705a:	d1f3      	bne.n	8027044 <__sfputs_r+0xa>
 802705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027060 <_vfiprintf_r>:
 8027060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027064:	460d      	mov	r5, r1
 8027066:	b09d      	sub	sp, #116	; 0x74
 8027068:	4614      	mov	r4, r2
 802706a:	4698      	mov	r8, r3
 802706c:	4606      	mov	r6, r0
 802706e:	b118      	cbz	r0, 8027078 <_vfiprintf_r+0x18>
 8027070:	6a03      	ldr	r3, [r0, #32]
 8027072:	b90b      	cbnz	r3, 8027078 <_vfiprintf_r+0x18>
 8027074:	f7fe fa3a 	bl	80254ec <__sinit>
 8027078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802707a:	07d9      	lsls	r1, r3, #31
 802707c:	d405      	bmi.n	802708a <_vfiprintf_r+0x2a>
 802707e:	89ab      	ldrh	r3, [r5, #12]
 8027080:	059a      	lsls	r2, r3, #22
 8027082:	d402      	bmi.n	802708a <_vfiprintf_r+0x2a>
 8027084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027086:	f7fe fb59 	bl	802573c <__retarget_lock_acquire_recursive>
 802708a:	89ab      	ldrh	r3, [r5, #12]
 802708c:	071b      	lsls	r3, r3, #28
 802708e:	d501      	bpl.n	8027094 <_vfiprintf_r+0x34>
 8027090:	692b      	ldr	r3, [r5, #16]
 8027092:	b99b      	cbnz	r3, 80270bc <_vfiprintf_r+0x5c>
 8027094:	4629      	mov	r1, r5
 8027096:	4630      	mov	r0, r6
 8027098:	f000 f9e8 	bl	802746c <__swsetup_r>
 802709c:	b170      	cbz	r0, 80270bc <_vfiprintf_r+0x5c>
 802709e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80270a0:	07dc      	lsls	r4, r3, #31
 80270a2:	d504      	bpl.n	80270ae <_vfiprintf_r+0x4e>
 80270a4:	f04f 30ff 	mov.w	r0, #4294967295
 80270a8:	b01d      	add	sp, #116	; 0x74
 80270aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270ae:	89ab      	ldrh	r3, [r5, #12]
 80270b0:	0598      	lsls	r0, r3, #22
 80270b2:	d4f7      	bmi.n	80270a4 <_vfiprintf_r+0x44>
 80270b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80270b6:	f7fe fb42 	bl	802573e <__retarget_lock_release_recursive>
 80270ba:	e7f3      	b.n	80270a4 <_vfiprintf_r+0x44>
 80270bc:	2300      	movs	r3, #0
 80270be:	9309      	str	r3, [sp, #36]	; 0x24
 80270c0:	2320      	movs	r3, #32
 80270c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80270c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80270ca:	2330      	movs	r3, #48	; 0x30
 80270cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8027280 <_vfiprintf_r+0x220>
 80270d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80270d4:	f04f 0901 	mov.w	r9, #1
 80270d8:	4623      	mov	r3, r4
 80270da:	469a      	mov	sl, r3
 80270dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80270e0:	b10a      	cbz	r2, 80270e6 <_vfiprintf_r+0x86>
 80270e2:	2a25      	cmp	r2, #37	; 0x25
 80270e4:	d1f9      	bne.n	80270da <_vfiprintf_r+0x7a>
 80270e6:	ebba 0b04 	subs.w	fp, sl, r4
 80270ea:	d00b      	beq.n	8027104 <_vfiprintf_r+0xa4>
 80270ec:	465b      	mov	r3, fp
 80270ee:	4622      	mov	r2, r4
 80270f0:	4629      	mov	r1, r5
 80270f2:	4630      	mov	r0, r6
 80270f4:	f7ff ffa1 	bl	802703a <__sfputs_r>
 80270f8:	3001      	adds	r0, #1
 80270fa:	f000 80a9 	beq.w	8027250 <_vfiprintf_r+0x1f0>
 80270fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027100:	445a      	add	r2, fp
 8027102:	9209      	str	r2, [sp, #36]	; 0x24
 8027104:	f89a 3000 	ldrb.w	r3, [sl]
 8027108:	2b00      	cmp	r3, #0
 802710a:	f000 80a1 	beq.w	8027250 <_vfiprintf_r+0x1f0>
 802710e:	2300      	movs	r3, #0
 8027110:	f04f 32ff 	mov.w	r2, #4294967295
 8027114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027118:	f10a 0a01 	add.w	sl, sl, #1
 802711c:	9304      	str	r3, [sp, #16]
 802711e:	9307      	str	r3, [sp, #28]
 8027120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027124:	931a      	str	r3, [sp, #104]	; 0x68
 8027126:	4654      	mov	r4, sl
 8027128:	2205      	movs	r2, #5
 802712a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802712e:	4854      	ldr	r0, [pc, #336]	; (8027280 <_vfiprintf_r+0x220>)
 8027130:	f7d9 f876 	bl	8000220 <memchr>
 8027134:	9a04      	ldr	r2, [sp, #16]
 8027136:	b9d8      	cbnz	r0, 8027170 <_vfiprintf_r+0x110>
 8027138:	06d1      	lsls	r1, r2, #27
 802713a:	bf44      	itt	mi
 802713c:	2320      	movmi	r3, #32
 802713e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027142:	0713      	lsls	r3, r2, #28
 8027144:	bf44      	itt	mi
 8027146:	232b      	movmi	r3, #43	; 0x2b
 8027148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802714c:	f89a 3000 	ldrb.w	r3, [sl]
 8027150:	2b2a      	cmp	r3, #42	; 0x2a
 8027152:	d015      	beq.n	8027180 <_vfiprintf_r+0x120>
 8027154:	9a07      	ldr	r2, [sp, #28]
 8027156:	4654      	mov	r4, sl
 8027158:	2000      	movs	r0, #0
 802715a:	f04f 0c0a 	mov.w	ip, #10
 802715e:	4621      	mov	r1, r4
 8027160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027164:	3b30      	subs	r3, #48	; 0x30
 8027166:	2b09      	cmp	r3, #9
 8027168:	d94d      	bls.n	8027206 <_vfiprintf_r+0x1a6>
 802716a:	b1b0      	cbz	r0, 802719a <_vfiprintf_r+0x13a>
 802716c:	9207      	str	r2, [sp, #28]
 802716e:	e014      	b.n	802719a <_vfiprintf_r+0x13a>
 8027170:	eba0 0308 	sub.w	r3, r0, r8
 8027174:	fa09 f303 	lsl.w	r3, r9, r3
 8027178:	4313      	orrs	r3, r2
 802717a:	9304      	str	r3, [sp, #16]
 802717c:	46a2      	mov	sl, r4
 802717e:	e7d2      	b.n	8027126 <_vfiprintf_r+0xc6>
 8027180:	9b03      	ldr	r3, [sp, #12]
 8027182:	1d19      	adds	r1, r3, #4
 8027184:	681b      	ldr	r3, [r3, #0]
 8027186:	9103      	str	r1, [sp, #12]
 8027188:	2b00      	cmp	r3, #0
 802718a:	bfbb      	ittet	lt
 802718c:	425b      	neglt	r3, r3
 802718e:	f042 0202 	orrlt.w	r2, r2, #2
 8027192:	9307      	strge	r3, [sp, #28]
 8027194:	9307      	strlt	r3, [sp, #28]
 8027196:	bfb8      	it	lt
 8027198:	9204      	strlt	r2, [sp, #16]
 802719a:	7823      	ldrb	r3, [r4, #0]
 802719c:	2b2e      	cmp	r3, #46	; 0x2e
 802719e:	d10c      	bne.n	80271ba <_vfiprintf_r+0x15a>
 80271a0:	7863      	ldrb	r3, [r4, #1]
 80271a2:	2b2a      	cmp	r3, #42	; 0x2a
 80271a4:	d134      	bne.n	8027210 <_vfiprintf_r+0x1b0>
 80271a6:	9b03      	ldr	r3, [sp, #12]
 80271a8:	1d1a      	adds	r2, r3, #4
 80271aa:	681b      	ldr	r3, [r3, #0]
 80271ac:	9203      	str	r2, [sp, #12]
 80271ae:	2b00      	cmp	r3, #0
 80271b0:	bfb8      	it	lt
 80271b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80271b6:	3402      	adds	r4, #2
 80271b8:	9305      	str	r3, [sp, #20]
 80271ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8027290 <_vfiprintf_r+0x230>
 80271be:	7821      	ldrb	r1, [r4, #0]
 80271c0:	2203      	movs	r2, #3
 80271c2:	4650      	mov	r0, sl
 80271c4:	f7d9 f82c 	bl	8000220 <memchr>
 80271c8:	b138      	cbz	r0, 80271da <_vfiprintf_r+0x17a>
 80271ca:	9b04      	ldr	r3, [sp, #16]
 80271cc:	eba0 000a 	sub.w	r0, r0, sl
 80271d0:	2240      	movs	r2, #64	; 0x40
 80271d2:	4082      	lsls	r2, r0
 80271d4:	4313      	orrs	r3, r2
 80271d6:	3401      	adds	r4, #1
 80271d8:	9304      	str	r3, [sp, #16]
 80271da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80271de:	4829      	ldr	r0, [pc, #164]	; (8027284 <_vfiprintf_r+0x224>)
 80271e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80271e4:	2206      	movs	r2, #6
 80271e6:	f7d9 f81b 	bl	8000220 <memchr>
 80271ea:	2800      	cmp	r0, #0
 80271ec:	d03f      	beq.n	802726e <_vfiprintf_r+0x20e>
 80271ee:	4b26      	ldr	r3, [pc, #152]	; (8027288 <_vfiprintf_r+0x228>)
 80271f0:	bb1b      	cbnz	r3, 802723a <_vfiprintf_r+0x1da>
 80271f2:	9b03      	ldr	r3, [sp, #12]
 80271f4:	3307      	adds	r3, #7
 80271f6:	f023 0307 	bic.w	r3, r3, #7
 80271fa:	3308      	adds	r3, #8
 80271fc:	9303      	str	r3, [sp, #12]
 80271fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027200:	443b      	add	r3, r7
 8027202:	9309      	str	r3, [sp, #36]	; 0x24
 8027204:	e768      	b.n	80270d8 <_vfiprintf_r+0x78>
 8027206:	fb0c 3202 	mla	r2, ip, r2, r3
 802720a:	460c      	mov	r4, r1
 802720c:	2001      	movs	r0, #1
 802720e:	e7a6      	b.n	802715e <_vfiprintf_r+0xfe>
 8027210:	2300      	movs	r3, #0
 8027212:	3401      	adds	r4, #1
 8027214:	9305      	str	r3, [sp, #20]
 8027216:	4619      	mov	r1, r3
 8027218:	f04f 0c0a 	mov.w	ip, #10
 802721c:	4620      	mov	r0, r4
 802721e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027222:	3a30      	subs	r2, #48	; 0x30
 8027224:	2a09      	cmp	r2, #9
 8027226:	d903      	bls.n	8027230 <_vfiprintf_r+0x1d0>
 8027228:	2b00      	cmp	r3, #0
 802722a:	d0c6      	beq.n	80271ba <_vfiprintf_r+0x15a>
 802722c:	9105      	str	r1, [sp, #20]
 802722e:	e7c4      	b.n	80271ba <_vfiprintf_r+0x15a>
 8027230:	fb0c 2101 	mla	r1, ip, r1, r2
 8027234:	4604      	mov	r4, r0
 8027236:	2301      	movs	r3, #1
 8027238:	e7f0      	b.n	802721c <_vfiprintf_r+0x1bc>
 802723a:	ab03      	add	r3, sp, #12
 802723c:	9300      	str	r3, [sp, #0]
 802723e:	462a      	mov	r2, r5
 8027240:	4b12      	ldr	r3, [pc, #72]	; (802728c <_vfiprintf_r+0x22c>)
 8027242:	a904      	add	r1, sp, #16
 8027244:	4630      	mov	r0, r6
 8027246:	f7fd fd11 	bl	8024c6c <_printf_float>
 802724a:	4607      	mov	r7, r0
 802724c:	1c78      	adds	r0, r7, #1
 802724e:	d1d6      	bne.n	80271fe <_vfiprintf_r+0x19e>
 8027250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027252:	07d9      	lsls	r1, r3, #31
 8027254:	d405      	bmi.n	8027262 <_vfiprintf_r+0x202>
 8027256:	89ab      	ldrh	r3, [r5, #12]
 8027258:	059a      	lsls	r2, r3, #22
 802725a:	d402      	bmi.n	8027262 <_vfiprintf_r+0x202>
 802725c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802725e:	f7fe fa6e 	bl	802573e <__retarget_lock_release_recursive>
 8027262:	89ab      	ldrh	r3, [r5, #12]
 8027264:	065b      	lsls	r3, r3, #25
 8027266:	f53f af1d 	bmi.w	80270a4 <_vfiprintf_r+0x44>
 802726a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802726c:	e71c      	b.n	80270a8 <_vfiprintf_r+0x48>
 802726e:	ab03      	add	r3, sp, #12
 8027270:	9300      	str	r3, [sp, #0]
 8027272:	462a      	mov	r2, r5
 8027274:	4b05      	ldr	r3, [pc, #20]	; (802728c <_vfiprintf_r+0x22c>)
 8027276:	a904      	add	r1, sp, #16
 8027278:	4630      	mov	r0, r6
 802727a:	f7fd ff9b 	bl	80251b4 <_printf_i>
 802727e:	e7e4      	b.n	802724a <_vfiprintf_r+0x1ea>
 8027280:	0802af8c 	.word	0x0802af8c
 8027284:	0802af96 	.word	0x0802af96
 8027288:	08024c6d 	.word	0x08024c6d
 802728c:	0802703b 	.word	0x0802703b
 8027290:	0802af92 	.word	0x0802af92

08027294 <__sflush_r>:
 8027294:	898a      	ldrh	r2, [r1, #12]
 8027296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802729a:	4605      	mov	r5, r0
 802729c:	0710      	lsls	r0, r2, #28
 802729e:	460c      	mov	r4, r1
 80272a0:	d458      	bmi.n	8027354 <__sflush_r+0xc0>
 80272a2:	684b      	ldr	r3, [r1, #4]
 80272a4:	2b00      	cmp	r3, #0
 80272a6:	dc05      	bgt.n	80272b4 <__sflush_r+0x20>
 80272a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	dc02      	bgt.n	80272b4 <__sflush_r+0x20>
 80272ae:	2000      	movs	r0, #0
 80272b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80272b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80272b6:	2e00      	cmp	r6, #0
 80272b8:	d0f9      	beq.n	80272ae <__sflush_r+0x1a>
 80272ba:	2300      	movs	r3, #0
 80272bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80272c0:	682f      	ldr	r7, [r5, #0]
 80272c2:	6a21      	ldr	r1, [r4, #32]
 80272c4:	602b      	str	r3, [r5, #0]
 80272c6:	d032      	beq.n	802732e <__sflush_r+0x9a>
 80272c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80272ca:	89a3      	ldrh	r3, [r4, #12]
 80272cc:	075a      	lsls	r2, r3, #29
 80272ce:	d505      	bpl.n	80272dc <__sflush_r+0x48>
 80272d0:	6863      	ldr	r3, [r4, #4]
 80272d2:	1ac0      	subs	r0, r0, r3
 80272d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80272d6:	b10b      	cbz	r3, 80272dc <__sflush_r+0x48>
 80272d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80272da:	1ac0      	subs	r0, r0, r3
 80272dc:	2300      	movs	r3, #0
 80272de:	4602      	mov	r2, r0
 80272e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80272e2:	6a21      	ldr	r1, [r4, #32]
 80272e4:	4628      	mov	r0, r5
 80272e6:	47b0      	blx	r6
 80272e8:	1c43      	adds	r3, r0, #1
 80272ea:	89a3      	ldrh	r3, [r4, #12]
 80272ec:	d106      	bne.n	80272fc <__sflush_r+0x68>
 80272ee:	6829      	ldr	r1, [r5, #0]
 80272f0:	291d      	cmp	r1, #29
 80272f2:	d82b      	bhi.n	802734c <__sflush_r+0xb8>
 80272f4:	4a29      	ldr	r2, [pc, #164]	; (802739c <__sflush_r+0x108>)
 80272f6:	410a      	asrs	r2, r1
 80272f8:	07d6      	lsls	r6, r2, #31
 80272fa:	d427      	bmi.n	802734c <__sflush_r+0xb8>
 80272fc:	2200      	movs	r2, #0
 80272fe:	6062      	str	r2, [r4, #4]
 8027300:	04d9      	lsls	r1, r3, #19
 8027302:	6922      	ldr	r2, [r4, #16]
 8027304:	6022      	str	r2, [r4, #0]
 8027306:	d504      	bpl.n	8027312 <__sflush_r+0x7e>
 8027308:	1c42      	adds	r2, r0, #1
 802730a:	d101      	bne.n	8027310 <__sflush_r+0x7c>
 802730c:	682b      	ldr	r3, [r5, #0]
 802730e:	b903      	cbnz	r3, 8027312 <__sflush_r+0x7e>
 8027310:	6560      	str	r0, [r4, #84]	; 0x54
 8027312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027314:	602f      	str	r7, [r5, #0]
 8027316:	2900      	cmp	r1, #0
 8027318:	d0c9      	beq.n	80272ae <__sflush_r+0x1a>
 802731a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802731e:	4299      	cmp	r1, r3
 8027320:	d002      	beq.n	8027328 <__sflush_r+0x94>
 8027322:	4628      	mov	r0, r5
 8027324:	f7ff f89e 	bl	8026464 <_free_r>
 8027328:	2000      	movs	r0, #0
 802732a:	6360      	str	r0, [r4, #52]	; 0x34
 802732c:	e7c0      	b.n	80272b0 <__sflush_r+0x1c>
 802732e:	2301      	movs	r3, #1
 8027330:	4628      	mov	r0, r5
 8027332:	47b0      	blx	r6
 8027334:	1c41      	adds	r1, r0, #1
 8027336:	d1c8      	bne.n	80272ca <__sflush_r+0x36>
 8027338:	682b      	ldr	r3, [r5, #0]
 802733a:	2b00      	cmp	r3, #0
 802733c:	d0c5      	beq.n	80272ca <__sflush_r+0x36>
 802733e:	2b1d      	cmp	r3, #29
 8027340:	d001      	beq.n	8027346 <__sflush_r+0xb2>
 8027342:	2b16      	cmp	r3, #22
 8027344:	d101      	bne.n	802734a <__sflush_r+0xb6>
 8027346:	602f      	str	r7, [r5, #0]
 8027348:	e7b1      	b.n	80272ae <__sflush_r+0x1a>
 802734a:	89a3      	ldrh	r3, [r4, #12]
 802734c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027350:	81a3      	strh	r3, [r4, #12]
 8027352:	e7ad      	b.n	80272b0 <__sflush_r+0x1c>
 8027354:	690f      	ldr	r7, [r1, #16]
 8027356:	2f00      	cmp	r7, #0
 8027358:	d0a9      	beq.n	80272ae <__sflush_r+0x1a>
 802735a:	0793      	lsls	r3, r2, #30
 802735c:	680e      	ldr	r6, [r1, #0]
 802735e:	bf08      	it	eq
 8027360:	694b      	ldreq	r3, [r1, #20]
 8027362:	600f      	str	r7, [r1, #0]
 8027364:	bf18      	it	ne
 8027366:	2300      	movne	r3, #0
 8027368:	eba6 0807 	sub.w	r8, r6, r7
 802736c:	608b      	str	r3, [r1, #8]
 802736e:	f1b8 0f00 	cmp.w	r8, #0
 8027372:	dd9c      	ble.n	80272ae <__sflush_r+0x1a>
 8027374:	6a21      	ldr	r1, [r4, #32]
 8027376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027378:	4643      	mov	r3, r8
 802737a:	463a      	mov	r2, r7
 802737c:	4628      	mov	r0, r5
 802737e:	47b0      	blx	r6
 8027380:	2800      	cmp	r0, #0
 8027382:	dc06      	bgt.n	8027392 <__sflush_r+0xfe>
 8027384:	89a3      	ldrh	r3, [r4, #12]
 8027386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802738a:	81a3      	strh	r3, [r4, #12]
 802738c:	f04f 30ff 	mov.w	r0, #4294967295
 8027390:	e78e      	b.n	80272b0 <__sflush_r+0x1c>
 8027392:	4407      	add	r7, r0
 8027394:	eba8 0800 	sub.w	r8, r8, r0
 8027398:	e7e9      	b.n	802736e <__sflush_r+0xda>
 802739a:	bf00      	nop
 802739c:	dfbffffe 	.word	0xdfbffffe

080273a0 <_fflush_r>:
 80273a0:	b538      	push	{r3, r4, r5, lr}
 80273a2:	690b      	ldr	r3, [r1, #16]
 80273a4:	4605      	mov	r5, r0
 80273a6:	460c      	mov	r4, r1
 80273a8:	b913      	cbnz	r3, 80273b0 <_fflush_r+0x10>
 80273aa:	2500      	movs	r5, #0
 80273ac:	4628      	mov	r0, r5
 80273ae:	bd38      	pop	{r3, r4, r5, pc}
 80273b0:	b118      	cbz	r0, 80273ba <_fflush_r+0x1a>
 80273b2:	6a03      	ldr	r3, [r0, #32]
 80273b4:	b90b      	cbnz	r3, 80273ba <_fflush_r+0x1a>
 80273b6:	f7fe f899 	bl	80254ec <__sinit>
 80273ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273be:	2b00      	cmp	r3, #0
 80273c0:	d0f3      	beq.n	80273aa <_fflush_r+0xa>
 80273c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80273c4:	07d0      	lsls	r0, r2, #31
 80273c6:	d404      	bmi.n	80273d2 <_fflush_r+0x32>
 80273c8:	0599      	lsls	r1, r3, #22
 80273ca:	d402      	bmi.n	80273d2 <_fflush_r+0x32>
 80273cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80273ce:	f7fe f9b5 	bl	802573c <__retarget_lock_acquire_recursive>
 80273d2:	4628      	mov	r0, r5
 80273d4:	4621      	mov	r1, r4
 80273d6:	f7ff ff5d 	bl	8027294 <__sflush_r>
 80273da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80273dc:	07da      	lsls	r2, r3, #31
 80273de:	4605      	mov	r5, r0
 80273e0:	d4e4      	bmi.n	80273ac <_fflush_r+0xc>
 80273e2:	89a3      	ldrh	r3, [r4, #12]
 80273e4:	059b      	lsls	r3, r3, #22
 80273e6:	d4e1      	bmi.n	80273ac <_fflush_r+0xc>
 80273e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80273ea:	f7fe f9a8 	bl	802573e <__retarget_lock_release_recursive>
 80273ee:	e7dd      	b.n	80273ac <_fflush_r+0xc>

080273f0 <__swbuf_r>:
 80273f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273f2:	460e      	mov	r6, r1
 80273f4:	4614      	mov	r4, r2
 80273f6:	4605      	mov	r5, r0
 80273f8:	b118      	cbz	r0, 8027402 <__swbuf_r+0x12>
 80273fa:	6a03      	ldr	r3, [r0, #32]
 80273fc:	b90b      	cbnz	r3, 8027402 <__swbuf_r+0x12>
 80273fe:	f7fe f875 	bl	80254ec <__sinit>
 8027402:	69a3      	ldr	r3, [r4, #24]
 8027404:	60a3      	str	r3, [r4, #8]
 8027406:	89a3      	ldrh	r3, [r4, #12]
 8027408:	071a      	lsls	r2, r3, #28
 802740a:	d525      	bpl.n	8027458 <__swbuf_r+0x68>
 802740c:	6923      	ldr	r3, [r4, #16]
 802740e:	b31b      	cbz	r3, 8027458 <__swbuf_r+0x68>
 8027410:	6823      	ldr	r3, [r4, #0]
 8027412:	6922      	ldr	r2, [r4, #16]
 8027414:	1a98      	subs	r0, r3, r2
 8027416:	6963      	ldr	r3, [r4, #20]
 8027418:	b2f6      	uxtb	r6, r6
 802741a:	4283      	cmp	r3, r0
 802741c:	4637      	mov	r7, r6
 802741e:	dc04      	bgt.n	802742a <__swbuf_r+0x3a>
 8027420:	4621      	mov	r1, r4
 8027422:	4628      	mov	r0, r5
 8027424:	f7ff ffbc 	bl	80273a0 <_fflush_r>
 8027428:	b9e0      	cbnz	r0, 8027464 <__swbuf_r+0x74>
 802742a:	68a3      	ldr	r3, [r4, #8]
 802742c:	3b01      	subs	r3, #1
 802742e:	60a3      	str	r3, [r4, #8]
 8027430:	6823      	ldr	r3, [r4, #0]
 8027432:	1c5a      	adds	r2, r3, #1
 8027434:	6022      	str	r2, [r4, #0]
 8027436:	701e      	strb	r6, [r3, #0]
 8027438:	6962      	ldr	r2, [r4, #20]
 802743a:	1c43      	adds	r3, r0, #1
 802743c:	429a      	cmp	r2, r3
 802743e:	d004      	beq.n	802744a <__swbuf_r+0x5a>
 8027440:	89a3      	ldrh	r3, [r4, #12]
 8027442:	07db      	lsls	r3, r3, #31
 8027444:	d506      	bpl.n	8027454 <__swbuf_r+0x64>
 8027446:	2e0a      	cmp	r6, #10
 8027448:	d104      	bne.n	8027454 <__swbuf_r+0x64>
 802744a:	4621      	mov	r1, r4
 802744c:	4628      	mov	r0, r5
 802744e:	f7ff ffa7 	bl	80273a0 <_fflush_r>
 8027452:	b938      	cbnz	r0, 8027464 <__swbuf_r+0x74>
 8027454:	4638      	mov	r0, r7
 8027456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027458:	4621      	mov	r1, r4
 802745a:	4628      	mov	r0, r5
 802745c:	f000 f806 	bl	802746c <__swsetup_r>
 8027460:	2800      	cmp	r0, #0
 8027462:	d0d5      	beq.n	8027410 <__swbuf_r+0x20>
 8027464:	f04f 37ff 	mov.w	r7, #4294967295
 8027468:	e7f4      	b.n	8027454 <__swbuf_r+0x64>
	...

0802746c <__swsetup_r>:
 802746c:	b538      	push	{r3, r4, r5, lr}
 802746e:	4b2a      	ldr	r3, [pc, #168]	; (8027518 <__swsetup_r+0xac>)
 8027470:	4605      	mov	r5, r0
 8027472:	6818      	ldr	r0, [r3, #0]
 8027474:	460c      	mov	r4, r1
 8027476:	b118      	cbz	r0, 8027480 <__swsetup_r+0x14>
 8027478:	6a03      	ldr	r3, [r0, #32]
 802747a:	b90b      	cbnz	r3, 8027480 <__swsetup_r+0x14>
 802747c:	f7fe f836 	bl	80254ec <__sinit>
 8027480:	89a3      	ldrh	r3, [r4, #12]
 8027482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027486:	0718      	lsls	r0, r3, #28
 8027488:	d422      	bmi.n	80274d0 <__swsetup_r+0x64>
 802748a:	06d9      	lsls	r1, r3, #27
 802748c:	d407      	bmi.n	802749e <__swsetup_r+0x32>
 802748e:	2309      	movs	r3, #9
 8027490:	602b      	str	r3, [r5, #0]
 8027492:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027496:	81a3      	strh	r3, [r4, #12]
 8027498:	f04f 30ff 	mov.w	r0, #4294967295
 802749c:	e034      	b.n	8027508 <__swsetup_r+0x9c>
 802749e:	0758      	lsls	r0, r3, #29
 80274a0:	d512      	bpl.n	80274c8 <__swsetup_r+0x5c>
 80274a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80274a4:	b141      	cbz	r1, 80274b8 <__swsetup_r+0x4c>
 80274a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80274aa:	4299      	cmp	r1, r3
 80274ac:	d002      	beq.n	80274b4 <__swsetup_r+0x48>
 80274ae:	4628      	mov	r0, r5
 80274b0:	f7fe ffd8 	bl	8026464 <_free_r>
 80274b4:	2300      	movs	r3, #0
 80274b6:	6363      	str	r3, [r4, #52]	; 0x34
 80274b8:	89a3      	ldrh	r3, [r4, #12]
 80274ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80274be:	81a3      	strh	r3, [r4, #12]
 80274c0:	2300      	movs	r3, #0
 80274c2:	6063      	str	r3, [r4, #4]
 80274c4:	6923      	ldr	r3, [r4, #16]
 80274c6:	6023      	str	r3, [r4, #0]
 80274c8:	89a3      	ldrh	r3, [r4, #12]
 80274ca:	f043 0308 	orr.w	r3, r3, #8
 80274ce:	81a3      	strh	r3, [r4, #12]
 80274d0:	6923      	ldr	r3, [r4, #16]
 80274d2:	b94b      	cbnz	r3, 80274e8 <__swsetup_r+0x7c>
 80274d4:	89a3      	ldrh	r3, [r4, #12]
 80274d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80274da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80274de:	d003      	beq.n	80274e8 <__swsetup_r+0x7c>
 80274e0:	4621      	mov	r1, r4
 80274e2:	4628      	mov	r0, r5
 80274e4:	f000 f912 	bl	802770c <__smakebuf_r>
 80274e8:	89a0      	ldrh	r0, [r4, #12]
 80274ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80274ee:	f010 0301 	ands.w	r3, r0, #1
 80274f2:	d00a      	beq.n	802750a <__swsetup_r+0x9e>
 80274f4:	2300      	movs	r3, #0
 80274f6:	60a3      	str	r3, [r4, #8]
 80274f8:	6963      	ldr	r3, [r4, #20]
 80274fa:	425b      	negs	r3, r3
 80274fc:	61a3      	str	r3, [r4, #24]
 80274fe:	6923      	ldr	r3, [r4, #16]
 8027500:	b943      	cbnz	r3, 8027514 <__swsetup_r+0xa8>
 8027502:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027506:	d1c4      	bne.n	8027492 <__swsetup_r+0x26>
 8027508:	bd38      	pop	{r3, r4, r5, pc}
 802750a:	0781      	lsls	r1, r0, #30
 802750c:	bf58      	it	pl
 802750e:	6963      	ldrpl	r3, [r4, #20]
 8027510:	60a3      	str	r3, [r4, #8]
 8027512:	e7f4      	b.n	80274fe <__swsetup_r+0x92>
 8027514:	2000      	movs	r0, #0
 8027516:	e7f7      	b.n	8027508 <__swsetup_r+0x9c>
 8027518:	200001f8 	.word	0x200001f8

0802751c <memmove>:
 802751c:	4288      	cmp	r0, r1
 802751e:	b510      	push	{r4, lr}
 8027520:	eb01 0402 	add.w	r4, r1, r2
 8027524:	d902      	bls.n	802752c <memmove+0x10>
 8027526:	4284      	cmp	r4, r0
 8027528:	4623      	mov	r3, r4
 802752a:	d807      	bhi.n	802753c <memmove+0x20>
 802752c:	1e43      	subs	r3, r0, #1
 802752e:	42a1      	cmp	r1, r4
 8027530:	d008      	beq.n	8027544 <memmove+0x28>
 8027532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027536:	f803 2f01 	strb.w	r2, [r3, #1]!
 802753a:	e7f8      	b.n	802752e <memmove+0x12>
 802753c:	4402      	add	r2, r0
 802753e:	4601      	mov	r1, r0
 8027540:	428a      	cmp	r2, r1
 8027542:	d100      	bne.n	8027546 <memmove+0x2a>
 8027544:	bd10      	pop	{r4, pc}
 8027546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802754a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802754e:	e7f7      	b.n	8027540 <memmove+0x24>

08027550 <_raise_r>:
 8027550:	291f      	cmp	r1, #31
 8027552:	b538      	push	{r3, r4, r5, lr}
 8027554:	4604      	mov	r4, r0
 8027556:	460d      	mov	r5, r1
 8027558:	d904      	bls.n	8027564 <_raise_r+0x14>
 802755a:	2316      	movs	r3, #22
 802755c:	6003      	str	r3, [r0, #0]
 802755e:	f04f 30ff 	mov.w	r0, #4294967295
 8027562:	bd38      	pop	{r3, r4, r5, pc}
 8027564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8027566:	b112      	cbz	r2, 802756e <_raise_r+0x1e>
 8027568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802756c:	b94b      	cbnz	r3, 8027582 <_raise_r+0x32>
 802756e:	4620      	mov	r0, r4
 8027570:	f000 f830 	bl	80275d4 <_getpid_r>
 8027574:	462a      	mov	r2, r5
 8027576:	4601      	mov	r1, r0
 8027578:	4620      	mov	r0, r4
 802757a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802757e:	f000 b817 	b.w	80275b0 <_kill_r>
 8027582:	2b01      	cmp	r3, #1
 8027584:	d00a      	beq.n	802759c <_raise_r+0x4c>
 8027586:	1c59      	adds	r1, r3, #1
 8027588:	d103      	bne.n	8027592 <_raise_r+0x42>
 802758a:	2316      	movs	r3, #22
 802758c:	6003      	str	r3, [r0, #0]
 802758e:	2001      	movs	r0, #1
 8027590:	e7e7      	b.n	8027562 <_raise_r+0x12>
 8027592:	2400      	movs	r4, #0
 8027594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027598:	4628      	mov	r0, r5
 802759a:	4798      	blx	r3
 802759c:	2000      	movs	r0, #0
 802759e:	e7e0      	b.n	8027562 <_raise_r+0x12>

080275a0 <raise>:
 80275a0:	4b02      	ldr	r3, [pc, #8]	; (80275ac <raise+0xc>)
 80275a2:	4601      	mov	r1, r0
 80275a4:	6818      	ldr	r0, [r3, #0]
 80275a6:	f7ff bfd3 	b.w	8027550 <_raise_r>
 80275aa:	bf00      	nop
 80275ac:	200001f8 	.word	0x200001f8

080275b0 <_kill_r>:
 80275b0:	b538      	push	{r3, r4, r5, lr}
 80275b2:	4d07      	ldr	r5, [pc, #28]	; (80275d0 <_kill_r+0x20>)
 80275b4:	2300      	movs	r3, #0
 80275b6:	4604      	mov	r4, r0
 80275b8:	4608      	mov	r0, r1
 80275ba:	4611      	mov	r1, r2
 80275bc:	602b      	str	r3, [r5, #0]
 80275be:	f7df f835 	bl	800662c <_kill>
 80275c2:	1c43      	adds	r3, r0, #1
 80275c4:	d102      	bne.n	80275cc <_kill_r+0x1c>
 80275c6:	682b      	ldr	r3, [r5, #0]
 80275c8:	b103      	cbz	r3, 80275cc <_kill_r+0x1c>
 80275ca:	6023      	str	r3, [r4, #0]
 80275cc:	bd38      	pop	{r3, r4, r5, pc}
 80275ce:	bf00      	nop
 80275d0:	20016a94 	.word	0x20016a94

080275d4 <_getpid_r>:
 80275d4:	f7df b822 	b.w	800661c <_getpid>

080275d8 <_sbrk_r>:
 80275d8:	b538      	push	{r3, r4, r5, lr}
 80275da:	4d06      	ldr	r5, [pc, #24]	; (80275f4 <_sbrk_r+0x1c>)
 80275dc:	2300      	movs	r3, #0
 80275de:	4604      	mov	r4, r0
 80275e0:	4608      	mov	r0, r1
 80275e2:	602b      	str	r3, [r5, #0]
 80275e4:	f7df f88e 	bl	8006704 <_sbrk>
 80275e8:	1c43      	adds	r3, r0, #1
 80275ea:	d102      	bne.n	80275f2 <_sbrk_r+0x1a>
 80275ec:	682b      	ldr	r3, [r5, #0]
 80275ee:	b103      	cbz	r3, 80275f2 <_sbrk_r+0x1a>
 80275f0:	6023      	str	r3, [r4, #0]
 80275f2:	bd38      	pop	{r3, r4, r5, pc}
 80275f4:	20016a94 	.word	0x20016a94

080275f8 <_calloc_r>:
 80275f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80275fa:	fba1 2402 	umull	r2, r4, r1, r2
 80275fe:	b94c      	cbnz	r4, 8027614 <_calloc_r+0x1c>
 8027600:	4611      	mov	r1, r2
 8027602:	9201      	str	r2, [sp, #4]
 8027604:	f7fe ffa2 	bl	802654c <_malloc_r>
 8027608:	9a01      	ldr	r2, [sp, #4]
 802760a:	4605      	mov	r5, r0
 802760c:	b930      	cbnz	r0, 802761c <_calloc_r+0x24>
 802760e:	4628      	mov	r0, r5
 8027610:	b003      	add	sp, #12
 8027612:	bd30      	pop	{r4, r5, pc}
 8027614:	220c      	movs	r2, #12
 8027616:	6002      	str	r2, [r0, #0]
 8027618:	2500      	movs	r5, #0
 802761a:	e7f8      	b.n	802760e <_calloc_r+0x16>
 802761c:	4621      	mov	r1, r4
 802761e:	f7fe f810 	bl	8025642 <memset>
 8027622:	e7f4      	b.n	802760e <_calloc_r+0x16>

08027624 <__ascii_mbtowc>:
 8027624:	b082      	sub	sp, #8
 8027626:	b901      	cbnz	r1, 802762a <__ascii_mbtowc+0x6>
 8027628:	a901      	add	r1, sp, #4
 802762a:	b142      	cbz	r2, 802763e <__ascii_mbtowc+0x1a>
 802762c:	b14b      	cbz	r3, 8027642 <__ascii_mbtowc+0x1e>
 802762e:	7813      	ldrb	r3, [r2, #0]
 8027630:	600b      	str	r3, [r1, #0]
 8027632:	7812      	ldrb	r2, [r2, #0]
 8027634:	1e10      	subs	r0, r2, #0
 8027636:	bf18      	it	ne
 8027638:	2001      	movne	r0, #1
 802763a:	b002      	add	sp, #8
 802763c:	4770      	bx	lr
 802763e:	4610      	mov	r0, r2
 8027640:	e7fb      	b.n	802763a <__ascii_mbtowc+0x16>
 8027642:	f06f 0001 	mvn.w	r0, #1
 8027646:	e7f8      	b.n	802763a <__ascii_mbtowc+0x16>

08027648 <_realloc_r>:
 8027648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802764c:	4680      	mov	r8, r0
 802764e:	4614      	mov	r4, r2
 8027650:	460e      	mov	r6, r1
 8027652:	b921      	cbnz	r1, 802765e <_realloc_r+0x16>
 8027654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027658:	4611      	mov	r1, r2
 802765a:	f7fe bf77 	b.w	802654c <_malloc_r>
 802765e:	b92a      	cbnz	r2, 802766c <_realloc_r+0x24>
 8027660:	f7fe ff00 	bl	8026464 <_free_r>
 8027664:	4625      	mov	r5, r4
 8027666:	4628      	mov	r0, r5
 8027668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802766c:	f000 f8ac 	bl	80277c8 <_malloc_usable_size_r>
 8027670:	4284      	cmp	r4, r0
 8027672:	4607      	mov	r7, r0
 8027674:	d802      	bhi.n	802767c <_realloc_r+0x34>
 8027676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802767a:	d812      	bhi.n	80276a2 <_realloc_r+0x5a>
 802767c:	4621      	mov	r1, r4
 802767e:	4640      	mov	r0, r8
 8027680:	f7fe ff64 	bl	802654c <_malloc_r>
 8027684:	4605      	mov	r5, r0
 8027686:	2800      	cmp	r0, #0
 8027688:	d0ed      	beq.n	8027666 <_realloc_r+0x1e>
 802768a:	42bc      	cmp	r4, r7
 802768c:	4622      	mov	r2, r4
 802768e:	4631      	mov	r1, r6
 8027690:	bf28      	it	cs
 8027692:	463a      	movcs	r2, r7
 8027694:	f7fe f854 	bl	8025740 <memcpy>
 8027698:	4631      	mov	r1, r6
 802769a:	4640      	mov	r0, r8
 802769c:	f7fe fee2 	bl	8026464 <_free_r>
 80276a0:	e7e1      	b.n	8027666 <_realloc_r+0x1e>
 80276a2:	4635      	mov	r5, r6
 80276a4:	e7df      	b.n	8027666 <_realloc_r+0x1e>

080276a6 <__ascii_wctomb>:
 80276a6:	b149      	cbz	r1, 80276bc <__ascii_wctomb+0x16>
 80276a8:	2aff      	cmp	r2, #255	; 0xff
 80276aa:	bf85      	ittet	hi
 80276ac:	238a      	movhi	r3, #138	; 0x8a
 80276ae:	6003      	strhi	r3, [r0, #0]
 80276b0:	700a      	strbls	r2, [r1, #0]
 80276b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80276b6:	bf98      	it	ls
 80276b8:	2001      	movls	r0, #1
 80276ba:	4770      	bx	lr
 80276bc:	4608      	mov	r0, r1
 80276be:	4770      	bx	lr

080276c0 <__swhatbuf_r>:
 80276c0:	b570      	push	{r4, r5, r6, lr}
 80276c2:	460c      	mov	r4, r1
 80276c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276c8:	2900      	cmp	r1, #0
 80276ca:	b096      	sub	sp, #88	; 0x58
 80276cc:	4615      	mov	r5, r2
 80276ce:	461e      	mov	r6, r3
 80276d0:	da0d      	bge.n	80276ee <__swhatbuf_r+0x2e>
 80276d2:	89a3      	ldrh	r3, [r4, #12]
 80276d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80276d8:	f04f 0100 	mov.w	r1, #0
 80276dc:	bf0c      	ite	eq
 80276de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80276e2:	2340      	movne	r3, #64	; 0x40
 80276e4:	2000      	movs	r0, #0
 80276e6:	6031      	str	r1, [r6, #0]
 80276e8:	602b      	str	r3, [r5, #0]
 80276ea:	b016      	add	sp, #88	; 0x58
 80276ec:	bd70      	pop	{r4, r5, r6, pc}
 80276ee:	466a      	mov	r2, sp
 80276f0:	f000 f848 	bl	8027784 <_fstat_r>
 80276f4:	2800      	cmp	r0, #0
 80276f6:	dbec      	blt.n	80276d2 <__swhatbuf_r+0x12>
 80276f8:	9901      	ldr	r1, [sp, #4]
 80276fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80276fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8027702:	4259      	negs	r1, r3
 8027704:	4159      	adcs	r1, r3
 8027706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802770a:	e7eb      	b.n	80276e4 <__swhatbuf_r+0x24>

0802770c <__smakebuf_r>:
 802770c:	898b      	ldrh	r3, [r1, #12]
 802770e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027710:	079d      	lsls	r5, r3, #30
 8027712:	4606      	mov	r6, r0
 8027714:	460c      	mov	r4, r1
 8027716:	d507      	bpl.n	8027728 <__smakebuf_r+0x1c>
 8027718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802771c:	6023      	str	r3, [r4, #0]
 802771e:	6123      	str	r3, [r4, #16]
 8027720:	2301      	movs	r3, #1
 8027722:	6163      	str	r3, [r4, #20]
 8027724:	b002      	add	sp, #8
 8027726:	bd70      	pop	{r4, r5, r6, pc}
 8027728:	ab01      	add	r3, sp, #4
 802772a:	466a      	mov	r2, sp
 802772c:	f7ff ffc8 	bl	80276c0 <__swhatbuf_r>
 8027730:	9900      	ldr	r1, [sp, #0]
 8027732:	4605      	mov	r5, r0
 8027734:	4630      	mov	r0, r6
 8027736:	f7fe ff09 	bl	802654c <_malloc_r>
 802773a:	b948      	cbnz	r0, 8027750 <__smakebuf_r+0x44>
 802773c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027740:	059a      	lsls	r2, r3, #22
 8027742:	d4ef      	bmi.n	8027724 <__smakebuf_r+0x18>
 8027744:	f023 0303 	bic.w	r3, r3, #3
 8027748:	f043 0302 	orr.w	r3, r3, #2
 802774c:	81a3      	strh	r3, [r4, #12]
 802774e:	e7e3      	b.n	8027718 <__smakebuf_r+0xc>
 8027750:	89a3      	ldrh	r3, [r4, #12]
 8027752:	6020      	str	r0, [r4, #0]
 8027754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027758:	81a3      	strh	r3, [r4, #12]
 802775a:	9b00      	ldr	r3, [sp, #0]
 802775c:	6163      	str	r3, [r4, #20]
 802775e:	9b01      	ldr	r3, [sp, #4]
 8027760:	6120      	str	r0, [r4, #16]
 8027762:	b15b      	cbz	r3, 802777c <__smakebuf_r+0x70>
 8027764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027768:	4630      	mov	r0, r6
 802776a:	f000 f81d 	bl	80277a8 <_isatty_r>
 802776e:	b128      	cbz	r0, 802777c <__smakebuf_r+0x70>
 8027770:	89a3      	ldrh	r3, [r4, #12]
 8027772:	f023 0303 	bic.w	r3, r3, #3
 8027776:	f043 0301 	orr.w	r3, r3, #1
 802777a:	81a3      	strh	r3, [r4, #12]
 802777c:	89a3      	ldrh	r3, [r4, #12]
 802777e:	431d      	orrs	r5, r3
 8027780:	81a5      	strh	r5, [r4, #12]
 8027782:	e7cf      	b.n	8027724 <__smakebuf_r+0x18>

08027784 <_fstat_r>:
 8027784:	b538      	push	{r3, r4, r5, lr}
 8027786:	4d07      	ldr	r5, [pc, #28]	; (80277a4 <_fstat_r+0x20>)
 8027788:	2300      	movs	r3, #0
 802778a:	4604      	mov	r4, r0
 802778c:	4608      	mov	r0, r1
 802778e:	4611      	mov	r1, r2
 8027790:	602b      	str	r3, [r5, #0]
 8027792:	f7de ff8e 	bl	80066b2 <_fstat>
 8027796:	1c43      	adds	r3, r0, #1
 8027798:	d102      	bne.n	80277a0 <_fstat_r+0x1c>
 802779a:	682b      	ldr	r3, [r5, #0]
 802779c:	b103      	cbz	r3, 80277a0 <_fstat_r+0x1c>
 802779e:	6023      	str	r3, [r4, #0]
 80277a0:	bd38      	pop	{r3, r4, r5, pc}
 80277a2:	bf00      	nop
 80277a4:	20016a94 	.word	0x20016a94

080277a8 <_isatty_r>:
 80277a8:	b538      	push	{r3, r4, r5, lr}
 80277aa:	4d06      	ldr	r5, [pc, #24]	; (80277c4 <_isatty_r+0x1c>)
 80277ac:	2300      	movs	r3, #0
 80277ae:	4604      	mov	r4, r0
 80277b0:	4608      	mov	r0, r1
 80277b2:	602b      	str	r3, [r5, #0]
 80277b4:	f7de ff8d 	bl	80066d2 <_isatty>
 80277b8:	1c43      	adds	r3, r0, #1
 80277ba:	d102      	bne.n	80277c2 <_isatty_r+0x1a>
 80277bc:	682b      	ldr	r3, [r5, #0]
 80277be:	b103      	cbz	r3, 80277c2 <_isatty_r+0x1a>
 80277c0:	6023      	str	r3, [r4, #0]
 80277c2:	bd38      	pop	{r3, r4, r5, pc}
 80277c4:	20016a94 	.word	0x20016a94

080277c8 <_malloc_usable_size_r>:
 80277c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80277cc:	1f18      	subs	r0, r3, #4
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	bfbc      	itt	lt
 80277d2:	580b      	ldrlt	r3, [r1, r0]
 80277d4:	18c0      	addlt	r0, r0, r3
 80277d6:	4770      	bx	lr

080277d8 <sinf>:
 80277d8:	ee10 3a10 	vmov	r3, s0
 80277dc:	b507      	push	{r0, r1, r2, lr}
 80277de:	4a1f      	ldr	r2, [pc, #124]	; (802785c <sinf+0x84>)
 80277e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80277e4:	4293      	cmp	r3, r2
 80277e6:	dc07      	bgt.n	80277f8 <sinf+0x20>
 80277e8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8027860 <sinf+0x88>
 80277ec:	2000      	movs	r0, #0
 80277ee:	b003      	add	sp, #12
 80277f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80277f4:	f000 b894 	b.w	8027920 <__kernel_sinf>
 80277f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80277fc:	db04      	blt.n	8027808 <sinf+0x30>
 80277fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8027802:	b003      	add	sp, #12
 8027804:	f85d fb04 	ldr.w	pc, [sp], #4
 8027808:	4668      	mov	r0, sp
 802780a:	f000 f8d1 	bl	80279b0 <__ieee754_rem_pio2f>
 802780e:	f000 0003 	and.w	r0, r0, #3
 8027812:	2801      	cmp	r0, #1
 8027814:	d00a      	beq.n	802782c <sinf+0x54>
 8027816:	2802      	cmp	r0, #2
 8027818:	d00f      	beq.n	802783a <sinf+0x62>
 802781a:	b9c0      	cbnz	r0, 802784e <sinf+0x76>
 802781c:	eddd 0a01 	vldr	s1, [sp, #4]
 8027820:	ed9d 0a00 	vldr	s0, [sp]
 8027824:	2001      	movs	r0, #1
 8027826:	f000 f87b 	bl	8027920 <__kernel_sinf>
 802782a:	e7ea      	b.n	8027802 <sinf+0x2a>
 802782c:	eddd 0a01 	vldr	s1, [sp, #4]
 8027830:	ed9d 0a00 	vldr	s0, [sp]
 8027834:	f000 f816 	bl	8027864 <__kernel_cosf>
 8027838:	e7e3      	b.n	8027802 <sinf+0x2a>
 802783a:	eddd 0a01 	vldr	s1, [sp, #4]
 802783e:	ed9d 0a00 	vldr	s0, [sp]
 8027842:	2001      	movs	r0, #1
 8027844:	f000 f86c 	bl	8027920 <__kernel_sinf>
 8027848:	eeb1 0a40 	vneg.f32	s0, s0
 802784c:	e7d9      	b.n	8027802 <sinf+0x2a>
 802784e:	eddd 0a01 	vldr	s1, [sp, #4]
 8027852:	ed9d 0a00 	vldr	s0, [sp]
 8027856:	f000 f805 	bl	8027864 <__kernel_cosf>
 802785a:	e7f5      	b.n	8027848 <sinf+0x70>
 802785c:	3f490fd8 	.word	0x3f490fd8
 8027860:	00000000 	.word	0x00000000

08027864 <__kernel_cosf>:
 8027864:	ee10 3a10 	vmov	r3, s0
 8027868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802786c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8027870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027874:	da05      	bge.n	8027882 <__kernel_cosf+0x1e>
 8027876:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802787a:	ee17 2a90 	vmov	r2, s15
 802787e:	2a00      	cmp	r2, #0
 8027880:	d03b      	beq.n	80278fa <__kernel_cosf+0x96>
 8027882:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027886:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8027900 <__kernel_cosf+0x9c>
 802788a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8027904 <__kernel_cosf+0xa0>
 802788e:	4a1e      	ldr	r2, [pc, #120]	; (8027908 <__kernel_cosf+0xa4>)
 8027890:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027894:	4293      	cmp	r3, r2
 8027896:	eddf 7a1d 	vldr	s15, [pc, #116]	; 802790c <__kernel_cosf+0xa8>
 802789a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802789e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8027910 <__kernel_cosf+0xac>
 80278a2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80278a6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8027914 <__kernel_cosf+0xb0>
 80278aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80278ae:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8027918 <__kernel_cosf+0xb4>
 80278b2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80278b6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80278ba:	ee26 6a07 	vmul.f32	s12, s12, s14
 80278be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80278c2:	eee7 0a06 	vfma.f32	s1, s14, s12
 80278c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80278ca:	dc04      	bgt.n	80278d6 <__kernel_cosf+0x72>
 80278cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80278d0:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80278d4:	4770      	bx	lr
 80278d6:	4a11      	ldr	r2, [pc, #68]	; (802791c <__kernel_cosf+0xb8>)
 80278d8:	4293      	cmp	r3, r2
 80278da:	bfda      	itte	le
 80278dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80278e0:	ee07 3a10 	vmovle	s14, r3
 80278e4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80278e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80278ec:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80278f0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80278f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80278f8:	4770      	bx	lr
 80278fa:	eeb0 0a66 	vmov.f32	s0, s13
 80278fe:	4770      	bx	lr
 8027900:	ad47d74e 	.word	0xad47d74e
 8027904:	310f74f6 	.word	0x310f74f6
 8027908:	3e999999 	.word	0x3e999999
 802790c:	b493f27c 	.word	0xb493f27c
 8027910:	37d00d01 	.word	0x37d00d01
 8027914:	bab60b61 	.word	0xbab60b61
 8027918:	3d2aaaab 	.word	0x3d2aaaab
 802791c:	3f480000 	.word	0x3f480000

08027920 <__kernel_sinf>:
 8027920:	ee10 3a10 	vmov	r3, s0
 8027924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027928:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802792c:	da04      	bge.n	8027938 <__kernel_sinf+0x18>
 802792e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8027932:	ee17 3a90 	vmov	r3, s15
 8027936:	b35b      	cbz	r3, 8027990 <__kernel_sinf+0x70>
 8027938:	ee20 7a00 	vmul.f32	s14, s0, s0
 802793c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8027994 <__kernel_sinf+0x74>
 8027940:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8027998 <__kernel_sinf+0x78>
 8027944:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027948:	eddf 7a14 	vldr	s15, [pc, #80]	; 802799c <__kernel_sinf+0x7c>
 802794c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027950:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80279a0 <__kernel_sinf+0x80>
 8027954:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027958:	eddf 7a12 	vldr	s15, [pc, #72]	; 80279a4 <__kernel_sinf+0x84>
 802795c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8027960:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027964:	b930      	cbnz	r0, 8027974 <__kernel_sinf+0x54>
 8027966:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80279a8 <__kernel_sinf+0x88>
 802796a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802796e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8027972:	4770      	bx	lr
 8027974:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8027978:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802797c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8027980:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8027984:	eddf 7a09 	vldr	s15, [pc, #36]	; 80279ac <__kernel_sinf+0x8c>
 8027988:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802798c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8027990:	4770      	bx	lr
 8027992:	bf00      	nop
 8027994:	2f2ec9d3 	.word	0x2f2ec9d3
 8027998:	b2d72f34 	.word	0xb2d72f34
 802799c:	3638ef1b 	.word	0x3638ef1b
 80279a0:	b9500d01 	.word	0xb9500d01
 80279a4:	3c088889 	.word	0x3c088889
 80279a8:	be2aaaab 	.word	0xbe2aaaab
 80279ac:	3e2aaaab 	.word	0x3e2aaaab

080279b0 <__ieee754_rem_pio2f>:
 80279b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80279b2:	ee10 6a10 	vmov	r6, s0
 80279b6:	4b86      	ldr	r3, [pc, #536]	; (8027bd0 <__ieee754_rem_pio2f+0x220>)
 80279b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80279bc:	429d      	cmp	r5, r3
 80279be:	b087      	sub	sp, #28
 80279c0:	4604      	mov	r4, r0
 80279c2:	dc05      	bgt.n	80279d0 <__ieee754_rem_pio2f+0x20>
 80279c4:	2300      	movs	r3, #0
 80279c6:	ed80 0a00 	vstr	s0, [r0]
 80279ca:	6043      	str	r3, [r0, #4]
 80279cc:	2000      	movs	r0, #0
 80279ce:	e020      	b.n	8027a12 <__ieee754_rem_pio2f+0x62>
 80279d0:	4b80      	ldr	r3, [pc, #512]	; (8027bd4 <__ieee754_rem_pio2f+0x224>)
 80279d2:	429d      	cmp	r5, r3
 80279d4:	dc38      	bgt.n	8027a48 <__ieee754_rem_pio2f+0x98>
 80279d6:	2e00      	cmp	r6, #0
 80279d8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8027bd8 <__ieee754_rem_pio2f+0x228>
 80279dc:	4b7f      	ldr	r3, [pc, #508]	; (8027bdc <__ieee754_rem_pio2f+0x22c>)
 80279de:	f025 050f 	bic.w	r5, r5, #15
 80279e2:	dd18      	ble.n	8027a16 <__ieee754_rem_pio2f+0x66>
 80279e4:	429d      	cmp	r5, r3
 80279e6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80279ea:	bf09      	itett	eq
 80279ec:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8027be0 <__ieee754_rem_pio2f+0x230>
 80279f0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8027be4 <__ieee754_rem_pio2f+0x234>
 80279f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80279f8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8027be8 <__ieee754_rem_pio2f+0x238>
 80279fc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8027a00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027a04:	edc0 6a00 	vstr	s13, [r0]
 8027a08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027a0c:	edc0 7a01 	vstr	s15, [r0, #4]
 8027a10:	2001      	movs	r0, #1
 8027a12:	b007      	add	sp, #28
 8027a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a16:	429d      	cmp	r5, r3
 8027a18:	ee70 7a07 	vadd.f32	s15, s0, s14
 8027a1c:	bf09      	itett	eq
 8027a1e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8027be0 <__ieee754_rem_pio2f+0x230>
 8027a22:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8027be4 <__ieee754_rem_pio2f+0x234>
 8027a26:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8027a2a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8027be8 <__ieee754_rem_pio2f+0x238>
 8027a2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8027a32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027a36:	edc0 6a00 	vstr	s13, [r0]
 8027a3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027a3e:	edc0 7a01 	vstr	s15, [r0, #4]
 8027a42:	f04f 30ff 	mov.w	r0, #4294967295
 8027a46:	e7e4      	b.n	8027a12 <__ieee754_rem_pio2f+0x62>
 8027a48:	4b68      	ldr	r3, [pc, #416]	; (8027bec <__ieee754_rem_pio2f+0x23c>)
 8027a4a:	429d      	cmp	r5, r3
 8027a4c:	dc71      	bgt.n	8027b32 <__ieee754_rem_pio2f+0x182>
 8027a4e:	f000 f8db 	bl	8027c08 <fabsf>
 8027a52:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8027bf0 <__ieee754_rem_pio2f+0x240>
 8027a56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027a5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027a66:	ee17 0a90 	vmov	r0, s15
 8027a6a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027bd8 <__ieee754_rem_pio2f+0x228>
 8027a6e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8027a72:	281f      	cmp	r0, #31
 8027a74:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8027be4 <__ieee754_rem_pio2f+0x234>
 8027a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027a7c:	eeb1 6a47 	vneg.f32	s12, s14
 8027a80:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027a84:	ee16 2a90 	vmov	r2, s13
 8027a88:	dc1c      	bgt.n	8027ac4 <__ieee754_rem_pio2f+0x114>
 8027a8a:	495a      	ldr	r1, [pc, #360]	; (8027bf4 <__ieee754_rem_pio2f+0x244>)
 8027a8c:	1e47      	subs	r7, r0, #1
 8027a8e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8027a92:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027a96:	428b      	cmp	r3, r1
 8027a98:	d014      	beq.n	8027ac4 <__ieee754_rem_pio2f+0x114>
 8027a9a:	6022      	str	r2, [r4, #0]
 8027a9c:	ed94 7a00 	vldr	s14, [r4]
 8027aa0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8027aa4:	2e00      	cmp	r6, #0
 8027aa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027aaa:	ed84 0a01 	vstr	s0, [r4, #4]
 8027aae:	dab0      	bge.n	8027a12 <__ieee754_rem_pio2f+0x62>
 8027ab0:	eeb1 7a47 	vneg.f32	s14, s14
 8027ab4:	eeb1 0a40 	vneg.f32	s0, s0
 8027ab8:	ed84 7a00 	vstr	s14, [r4]
 8027abc:	ed84 0a01 	vstr	s0, [r4, #4]
 8027ac0:	4240      	negs	r0, r0
 8027ac2:	e7a6      	b.n	8027a12 <__ieee754_rem_pio2f+0x62>
 8027ac4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027ac8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8027acc:	2908      	cmp	r1, #8
 8027ace:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8027ad2:	dde2      	ble.n	8027a9a <__ieee754_rem_pio2f+0xea>
 8027ad4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8027be0 <__ieee754_rem_pio2f+0x230>
 8027ad8:	eef0 6a40 	vmov.f32	s13, s0
 8027adc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027ae0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8027ae4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027ae8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8027be8 <__ieee754_rem_pio2f+0x238>
 8027aec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8027af0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8027af4:	ee15 2a90 	vmov	r2, s11
 8027af8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027afc:	1a5b      	subs	r3, r3, r1
 8027afe:	2b19      	cmp	r3, #25
 8027b00:	dc04      	bgt.n	8027b0c <__ieee754_rem_pio2f+0x15c>
 8027b02:	edc4 5a00 	vstr	s11, [r4]
 8027b06:	eeb0 0a66 	vmov.f32	s0, s13
 8027b0a:	e7c7      	b.n	8027a9c <__ieee754_rem_pio2f+0xec>
 8027b0c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8027bf8 <__ieee754_rem_pio2f+0x248>
 8027b10:	eeb0 0a66 	vmov.f32	s0, s13
 8027b14:	eea6 0a25 	vfma.f32	s0, s12, s11
 8027b18:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8027b1c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8027bfc <__ieee754_rem_pio2f+0x24c>
 8027b20:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027b24:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8027b28:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027b2c:	ed84 7a00 	vstr	s14, [r4]
 8027b30:	e7b4      	b.n	8027a9c <__ieee754_rem_pio2f+0xec>
 8027b32:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8027b36:	db06      	blt.n	8027b46 <__ieee754_rem_pio2f+0x196>
 8027b38:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027b3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8027b40:	edc0 7a00 	vstr	s15, [r0]
 8027b44:	e742      	b.n	80279cc <__ieee754_rem_pio2f+0x1c>
 8027b46:	15ea      	asrs	r2, r5, #23
 8027b48:	3a86      	subs	r2, #134	; 0x86
 8027b4a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8027b4e:	ee07 3a90 	vmov	s15, r3
 8027b52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027b56:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8027c00 <__ieee754_rem_pio2f+0x250>
 8027b5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b62:	ed8d 7a03 	vstr	s14, [sp, #12]
 8027b66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027b6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027b6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b76:	ed8d 7a04 	vstr	s14, [sp, #16]
 8027b7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027b7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8027b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b86:	edcd 7a05 	vstr	s15, [sp, #20]
 8027b8a:	d11e      	bne.n	8027bca <__ieee754_rem_pio2f+0x21a>
 8027b8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8027b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b94:	bf14      	ite	ne
 8027b96:	2302      	movne	r3, #2
 8027b98:	2301      	moveq	r3, #1
 8027b9a:	491a      	ldr	r1, [pc, #104]	; (8027c04 <__ieee754_rem_pio2f+0x254>)
 8027b9c:	9101      	str	r1, [sp, #4]
 8027b9e:	2102      	movs	r1, #2
 8027ba0:	9100      	str	r1, [sp, #0]
 8027ba2:	a803      	add	r0, sp, #12
 8027ba4:	4621      	mov	r1, r4
 8027ba6:	f000 f837 	bl	8027c18 <__kernel_rem_pio2f>
 8027baa:	2e00      	cmp	r6, #0
 8027bac:	f6bf af31 	bge.w	8027a12 <__ieee754_rem_pio2f+0x62>
 8027bb0:	edd4 7a00 	vldr	s15, [r4]
 8027bb4:	eef1 7a67 	vneg.f32	s15, s15
 8027bb8:	edc4 7a00 	vstr	s15, [r4]
 8027bbc:	edd4 7a01 	vldr	s15, [r4, #4]
 8027bc0:	eef1 7a67 	vneg.f32	s15, s15
 8027bc4:	edc4 7a01 	vstr	s15, [r4, #4]
 8027bc8:	e77a      	b.n	8027ac0 <__ieee754_rem_pio2f+0x110>
 8027bca:	2303      	movs	r3, #3
 8027bcc:	e7e5      	b.n	8027b9a <__ieee754_rem_pio2f+0x1ea>
 8027bce:	bf00      	nop
 8027bd0:	3f490fd8 	.word	0x3f490fd8
 8027bd4:	4016cbe3 	.word	0x4016cbe3
 8027bd8:	3fc90f80 	.word	0x3fc90f80
 8027bdc:	3fc90fd0 	.word	0x3fc90fd0
 8027be0:	37354400 	.word	0x37354400
 8027be4:	37354443 	.word	0x37354443
 8027be8:	2e85a308 	.word	0x2e85a308
 8027bec:	43490f80 	.word	0x43490f80
 8027bf0:	3f22f984 	.word	0x3f22f984
 8027bf4:	0802b0a8 	.word	0x0802b0a8
 8027bf8:	2e85a300 	.word	0x2e85a300
 8027bfc:	248d3132 	.word	0x248d3132
 8027c00:	43800000 	.word	0x43800000
 8027c04:	0802b128 	.word	0x0802b128

08027c08 <fabsf>:
 8027c08:	ee10 3a10 	vmov	r3, s0
 8027c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027c10:	ee00 3a10 	vmov	s0, r3
 8027c14:	4770      	bx	lr
	...

08027c18 <__kernel_rem_pio2f>:
 8027c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c1c:	ed2d 8b04 	vpush	{d8-d9}
 8027c20:	b0d9      	sub	sp, #356	; 0x164
 8027c22:	4688      	mov	r8, r1
 8027c24:	9002      	str	r0, [sp, #8]
 8027c26:	49b8      	ldr	r1, [pc, #736]	; (8027f08 <__kernel_rem_pio2f+0x2f0>)
 8027c28:	9866      	ldr	r0, [sp, #408]	; 0x198
 8027c2a:	9301      	str	r3, [sp, #4]
 8027c2c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8027c30:	9901      	ldr	r1, [sp, #4]
 8027c32:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8027c34:	f101 3bff 	add.w	fp, r1, #4294967295
 8027c38:	1d11      	adds	r1, r2, #4
 8027c3a:	db25      	blt.n	8027c88 <__kernel_rem_pio2f+0x70>
 8027c3c:	1ed0      	subs	r0, r2, #3
 8027c3e:	bf48      	it	mi
 8027c40:	1d10      	addmi	r0, r2, #4
 8027c42:	10c0      	asrs	r0, r0, #3
 8027c44:	1c45      	adds	r5, r0, #1
 8027c46:	00e9      	lsls	r1, r5, #3
 8027c48:	eba0 070b 	sub.w	r7, r0, fp
 8027c4c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8027f18 <__kernel_rem_pio2f+0x300>
 8027c50:	9103      	str	r1, [sp, #12]
 8027c52:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8027c56:	eb0a 0c0b 	add.w	ip, sl, fp
 8027c5a:	ae1c      	add	r6, sp, #112	; 0x70
 8027c5c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8027c60:	2400      	movs	r4, #0
 8027c62:	4564      	cmp	r4, ip
 8027c64:	dd12      	ble.n	8027c8c <__kernel_rem_pio2f+0x74>
 8027c66:	9901      	ldr	r1, [sp, #4]
 8027c68:	ac1c      	add	r4, sp, #112	; 0x70
 8027c6a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8027c6e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8027c72:	f04f 0c00 	mov.w	ip, #0
 8027c76:	45d4      	cmp	ip, sl
 8027c78:	dc27      	bgt.n	8027cca <__kernel_rem_pio2f+0xb2>
 8027c7a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8027c7e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8027f18 <__kernel_rem_pio2f+0x300>
 8027c82:	4627      	mov	r7, r4
 8027c84:	2600      	movs	r6, #0
 8027c86:	e016      	b.n	8027cb6 <__kernel_rem_pio2f+0x9e>
 8027c88:	2000      	movs	r0, #0
 8027c8a:	e7db      	b.n	8027c44 <__kernel_rem_pio2f+0x2c>
 8027c8c:	42e7      	cmn	r7, r4
 8027c8e:	bf5d      	ittte	pl
 8027c90:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8027c94:	ee07 1a90 	vmovpl	s15, r1
 8027c98:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8027c9c:	eef0 7a47 	vmovmi.f32	s15, s14
 8027ca0:	ece6 7a01 	vstmia	r6!, {s15}
 8027ca4:	3401      	adds	r4, #1
 8027ca6:	e7dc      	b.n	8027c62 <__kernel_rem_pio2f+0x4a>
 8027ca8:	ecfe 6a01 	vldmia	lr!, {s13}
 8027cac:	ed97 7a00 	vldr	s14, [r7]
 8027cb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027cb4:	3601      	adds	r6, #1
 8027cb6:	455e      	cmp	r6, fp
 8027cb8:	f1a7 0704 	sub.w	r7, r7, #4
 8027cbc:	ddf4      	ble.n	8027ca8 <__kernel_rem_pio2f+0x90>
 8027cbe:	ece9 7a01 	vstmia	r9!, {s15}
 8027cc2:	f10c 0c01 	add.w	ip, ip, #1
 8027cc6:	3404      	adds	r4, #4
 8027cc8:	e7d5      	b.n	8027c76 <__kernel_rem_pio2f+0x5e>
 8027cca:	a908      	add	r1, sp, #32
 8027ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027cd0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8027cd4:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8027f14 <__kernel_rem_pio2f+0x2fc>
 8027cd8:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8027f10 <__kernel_rem_pio2f+0x2f8>
 8027cdc:	9105      	str	r1, [sp, #20]
 8027cde:	9304      	str	r3, [sp, #16]
 8027ce0:	4656      	mov	r6, sl
 8027ce2:	00b3      	lsls	r3, r6, #2
 8027ce4:	9306      	str	r3, [sp, #24]
 8027ce6:	ab58      	add	r3, sp, #352	; 0x160
 8027ce8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8027cec:	ac08      	add	r4, sp, #32
 8027cee:	ab44      	add	r3, sp, #272	; 0x110
 8027cf0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8027cf4:	46a4      	mov	ip, r4
 8027cf6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8027cfa:	4637      	mov	r7, r6
 8027cfc:	2f00      	cmp	r7, #0
 8027cfe:	f1a0 0004 	sub.w	r0, r0, #4
 8027d02:	dc4a      	bgt.n	8027d9a <__kernel_rem_pio2f+0x182>
 8027d04:	4628      	mov	r0, r5
 8027d06:	9207      	str	r2, [sp, #28]
 8027d08:	f000 f9f8 	bl	80280fc <scalbnf>
 8027d0c:	eeb0 8a40 	vmov.f32	s16, s0
 8027d10:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8027d14:	ee28 0a00 	vmul.f32	s0, s16, s0
 8027d18:	f000 fa56 	bl	80281c8 <floorf>
 8027d1c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8027d20:	eea0 8a67 	vfms.f32	s16, s0, s15
 8027d24:	2d00      	cmp	r5, #0
 8027d26:	9a07      	ldr	r2, [sp, #28]
 8027d28:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8027d2c:	ee17 9a90 	vmov	r9, s15
 8027d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027d34:	ee38 8a67 	vsub.f32	s16, s16, s15
 8027d38:	dd41      	ble.n	8027dbe <__kernel_rem_pio2f+0x1a6>
 8027d3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8027d3e:	ab08      	add	r3, sp, #32
 8027d40:	f1c5 0e08 	rsb	lr, r5, #8
 8027d44:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8027d48:	fa47 f00e 	asr.w	r0, r7, lr
 8027d4c:	4481      	add	r9, r0
 8027d4e:	fa00 f00e 	lsl.w	r0, r0, lr
 8027d52:	1a3f      	subs	r7, r7, r0
 8027d54:	f1c5 0007 	rsb	r0, r5, #7
 8027d58:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8027d5c:	4107      	asrs	r7, r0
 8027d5e:	2f00      	cmp	r7, #0
 8027d60:	dd3c      	ble.n	8027ddc <__kernel_rem_pio2f+0x1c4>
 8027d62:	f04f 0e00 	mov.w	lr, #0
 8027d66:	f109 0901 	add.w	r9, r9, #1
 8027d6a:	4671      	mov	r1, lr
 8027d6c:	4576      	cmp	r6, lr
 8027d6e:	dc67      	bgt.n	8027e40 <__kernel_rem_pio2f+0x228>
 8027d70:	2d00      	cmp	r5, #0
 8027d72:	dd03      	ble.n	8027d7c <__kernel_rem_pio2f+0x164>
 8027d74:	2d01      	cmp	r5, #1
 8027d76:	d074      	beq.n	8027e62 <__kernel_rem_pio2f+0x24a>
 8027d78:	2d02      	cmp	r5, #2
 8027d7a:	d07b      	beq.n	8027e74 <__kernel_rem_pio2f+0x25c>
 8027d7c:	2f02      	cmp	r7, #2
 8027d7e:	d12d      	bne.n	8027ddc <__kernel_rem_pio2f+0x1c4>
 8027d80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027d84:	ee30 8a48 	vsub.f32	s16, s0, s16
 8027d88:	b341      	cbz	r1, 8027ddc <__kernel_rem_pio2f+0x1c4>
 8027d8a:	4628      	mov	r0, r5
 8027d8c:	9207      	str	r2, [sp, #28]
 8027d8e:	f000 f9b5 	bl	80280fc <scalbnf>
 8027d92:	9a07      	ldr	r2, [sp, #28]
 8027d94:	ee38 8a40 	vsub.f32	s16, s16, s0
 8027d98:	e020      	b.n	8027ddc <__kernel_rem_pio2f+0x1c4>
 8027d9a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8027d9e:	3f01      	subs	r7, #1
 8027da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027da8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8027dac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027db0:	ecac 0a01 	vstmia	ip!, {s0}
 8027db4:	ed90 0a00 	vldr	s0, [r0]
 8027db8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8027dbc:	e79e      	b.n	8027cfc <__kernel_rem_pio2f+0xe4>
 8027dbe:	d105      	bne.n	8027dcc <__kernel_rem_pio2f+0x1b4>
 8027dc0:	1e70      	subs	r0, r6, #1
 8027dc2:	ab08      	add	r3, sp, #32
 8027dc4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8027dc8:	11ff      	asrs	r7, r7, #7
 8027dca:	e7c8      	b.n	8027d5e <__kernel_rem_pio2f+0x146>
 8027dcc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027dd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8027dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dd8:	da30      	bge.n	8027e3c <__kernel_rem_pio2f+0x224>
 8027dda:	2700      	movs	r7, #0
 8027ddc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8027de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027de4:	f040 809a 	bne.w	8027f1c <__kernel_rem_pio2f+0x304>
 8027de8:	1e74      	subs	r4, r6, #1
 8027dea:	46a4      	mov	ip, r4
 8027dec:	2100      	movs	r1, #0
 8027dee:	45d4      	cmp	ip, sl
 8027df0:	da47      	bge.n	8027e82 <__kernel_rem_pio2f+0x26a>
 8027df2:	2900      	cmp	r1, #0
 8027df4:	d063      	beq.n	8027ebe <__kernel_rem_pio2f+0x2a6>
 8027df6:	ab08      	add	r3, sp, #32
 8027df8:	3d08      	subs	r5, #8
 8027dfa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8027dfe:	2b00      	cmp	r3, #0
 8027e00:	d07f      	beq.n	8027f02 <__kernel_rem_pio2f+0x2ea>
 8027e02:	4628      	mov	r0, r5
 8027e04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027e08:	f000 f978 	bl	80280fc <scalbnf>
 8027e0c:	1c63      	adds	r3, r4, #1
 8027e0e:	aa44      	add	r2, sp, #272	; 0x110
 8027e10:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8027f14 <__kernel_rem_pio2f+0x2fc>
 8027e14:	0099      	lsls	r1, r3, #2
 8027e16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8027e1a:	4623      	mov	r3, r4
 8027e1c:	2b00      	cmp	r3, #0
 8027e1e:	f280 80ad 	bge.w	8027f7c <__kernel_rem_pio2f+0x364>
 8027e22:	4623      	mov	r3, r4
 8027e24:	2b00      	cmp	r3, #0
 8027e26:	f2c0 80cb 	blt.w	8027fc0 <__kernel_rem_pio2f+0x3a8>
 8027e2a:	aa44      	add	r2, sp, #272	; 0x110
 8027e2c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8027e30:	4e36      	ldr	r6, [pc, #216]	; (8027f0c <__kernel_rem_pio2f+0x2f4>)
 8027e32:	eddf 7a39 	vldr	s15, [pc, #228]	; 8027f18 <__kernel_rem_pio2f+0x300>
 8027e36:	2000      	movs	r0, #0
 8027e38:	1ae2      	subs	r2, r4, r3
 8027e3a:	e0b6      	b.n	8027faa <__kernel_rem_pio2f+0x392>
 8027e3c:	2702      	movs	r7, #2
 8027e3e:	e790      	b.n	8027d62 <__kernel_rem_pio2f+0x14a>
 8027e40:	6820      	ldr	r0, [r4, #0]
 8027e42:	b949      	cbnz	r1, 8027e58 <__kernel_rem_pio2f+0x240>
 8027e44:	b118      	cbz	r0, 8027e4e <__kernel_rem_pio2f+0x236>
 8027e46:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8027e4a:	6020      	str	r0, [r4, #0]
 8027e4c:	2001      	movs	r0, #1
 8027e4e:	f10e 0e01 	add.w	lr, lr, #1
 8027e52:	3404      	adds	r4, #4
 8027e54:	4601      	mov	r1, r0
 8027e56:	e789      	b.n	8027d6c <__kernel_rem_pio2f+0x154>
 8027e58:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8027e5c:	6020      	str	r0, [r4, #0]
 8027e5e:	4608      	mov	r0, r1
 8027e60:	e7f5      	b.n	8027e4e <__kernel_rem_pio2f+0x236>
 8027e62:	1e74      	subs	r4, r6, #1
 8027e64:	ab08      	add	r3, sp, #32
 8027e66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8027e6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8027e6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027e72:	e783      	b.n	8027d7c <__kernel_rem_pio2f+0x164>
 8027e74:	1e74      	subs	r4, r6, #1
 8027e76:	ab08      	add	r3, sp, #32
 8027e78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8027e7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8027e80:	e7f5      	b.n	8027e6e <__kernel_rem_pio2f+0x256>
 8027e82:	ab08      	add	r3, sp, #32
 8027e84:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8027e88:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027e8c:	4301      	orrs	r1, r0
 8027e8e:	e7ae      	b.n	8027dee <__kernel_rem_pio2f+0x1d6>
 8027e90:	3001      	adds	r0, #1
 8027e92:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8027e96:	2f00      	cmp	r7, #0
 8027e98:	d0fa      	beq.n	8027e90 <__kernel_rem_pio2f+0x278>
 8027e9a:	9b06      	ldr	r3, [sp, #24]
 8027e9c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8027ea0:	eb0d 0403 	add.w	r4, sp, r3
 8027ea4:	9b01      	ldr	r3, [sp, #4]
 8027ea6:	18f7      	adds	r7, r6, r3
 8027ea8:	ab1c      	add	r3, sp, #112	; 0x70
 8027eaa:	f106 0c01 	add.w	ip, r6, #1
 8027eae:	3c4c      	subs	r4, #76	; 0x4c
 8027eb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027eb4:	4430      	add	r0, r6
 8027eb6:	4560      	cmp	r0, ip
 8027eb8:	da04      	bge.n	8027ec4 <__kernel_rem_pio2f+0x2ac>
 8027eba:	4606      	mov	r6, r0
 8027ebc:	e711      	b.n	8027ce2 <__kernel_rem_pio2f+0xca>
 8027ebe:	9c05      	ldr	r4, [sp, #20]
 8027ec0:	2001      	movs	r0, #1
 8027ec2:	e7e6      	b.n	8027e92 <__kernel_rem_pio2f+0x27a>
 8027ec4:	9b04      	ldr	r3, [sp, #16]
 8027ec6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8027eca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8027ece:	9306      	str	r3, [sp, #24]
 8027ed0:	ee07 3a90 	vmov	s15, r3
 8027ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027ed8:	2600      	movs	r6, #0
 8027eda:	ece7 7a01 	vstmia	r7!, {s15}
 8027ede:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8027f18 <__kernel_rem_pio2f+0x300>
 8027ee2:	46b9      	mov	r9, r7
 8027ee4:	455e      	cmp	r6, fp
 8027ee6:	dd04      	ble.n	8027ef2 <__kernel_rem_pio2f+0x2da>
 8027ee8:	ece4 7a01 	vstmia	r4!, {s15}
 8027eec:	f10c 0c01 	add.w	ip, ip, #1
 8027ef0:	e7e1      	b.n	8027eb6 <__kernel_rem_pio2f+0x29e>
 8027ef2:	ecfe 6a01 	vldmia	lr!, {s13}
 8027ef6:	ed39 7a01 	vldmdb	r9!, {s14}
 8027efa:	3601      	adds	r6, #1
 8027efc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027f00:	e7f0      	b.n	8027ee4 <__kernel_rem_pio2f+0x2cc>
 8027f02:	3c01      	subs	r4, #1
 8027f04:	e777      	b.n	8027df6 <__kernel_rem_pio2f+0x1de>
 8027f06:	bf00      	nop
 8027f08:	0802b46c 	.word	0x0802b46c
 8027f0c:	0802b440 	.word	0x0802b440
 8027f10:	43800000 	.word	0x43800000
 8027f14:	3b800000 	.word	0x3b800000
 8027f18:	00000000 	.word	0x00000000
 8027f1c:	9b03      	ldr	r3, [sp, #12]
 8027f1e:	eeb0 0a48 	vmov.f32	s0, s16
 8027f22:	1a98      	subs	r0, r3, r2
 8027f24:	f000 f8ea 	bl	80280fc <scalbnf>
 8027f28:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8027f10 <__kernel_rem_pio2f+0x2f8>
 8027f2c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8027f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f34:	db19      	blt.n	8027f6a <__kernel_rem_pio2f+0x352>
 8027f36:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8027f14 <__kernel_rem_pio2f+0x2fc>
 8027f3a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8027f3e:	aa08      	add	r2, sp, #32
 8027f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027f44:	1c74      	adds	r4, r6, #1
 8027f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027f4a:	3508      	adds	r5, #8
 8027f4c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8027f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027f54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027f58:	ee10 3a10 	vmov	r3, s0
 8027f5c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8027f60:	ee17 3a90 	vmov	r3, s15
 8027f64:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8027f68:	e74b      	b.n	8027e02 <__kernel_rem_pio2f+0x1ea>
 8027f6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8027f6e:	aa08      	add	r2, sp, #32
 8027f70:	ee10 3a10 	vmov	r3, s0
 8027f74:	4634      	mov	r4, r6
 8027f76:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8027f7a:	e742      	b.n	8027e02 <__kernel_rem_pio2f+0x1ea>
 8027f7c:	a808      	add	r0, sp, #32
 8027f7e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8027f82:	9001      	str	r0, [sp, #4]
 8027f84:	ee07 0a90 	vmov	s15, r0
 8027f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027f8c:	3b01      	subs	r3, #1
 8027f8e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8027f92:	ee20 0a07 	vmul.f32	s0, s0, s14
 8027f96:	ed62 7a01 	vstmdb	r2!, {s15}
 8027f9a:	e73f      	b.n	8027e1c <__kernel_rem_pio2f+0x204>
 8027f9c:	ecf6 6a01 	vldmia	r6!, {s13}
 8027fa0:	ecb5 7a01 	vldmia	r5!, {s14}
 8027fa4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8027fa8:	3001      	adds	r0, #1
 8027faa:	4550      	cmp	r0, sl
 8027fac:	dc01      	bgt.n	8027fb2 <__kernel_rem_pio2f+0x39a>
 8027fae:	4290      	cmp	r0, r2
 8027fb0:	ddf4      	ble.n	8027f9c <__kernel_rem_pio2f+0x384>
 8027fb2:	a858      	add	r0, sp, #352	; 0x160
 8027fb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8027fb8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8027fbc:	3b01      	subs	r3, #1
 8027fbe:	e731      	b.n	8027e24 <__kernel_rem_pio2f+0x20c>
 8027fc0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8027fc2:	2b02      	cmp	r3, #2
 8027fc4:	dc09      	bgt.n	8027fda <__kernel_rem_pio2f+0x3c2>
 8027fc6:	2b00      	cmp	r3, #0
 8027fc8:	dc2b      	bgt.n	8028022 <__kernel_rem_pio2f+0x40a>
 8027fca:	d044      	beq.n	8028056 <__kernel_rem_pio2f+0x43e>
 8027fcc:	f009 0007 	and.w	r0, r9, #7
 8027fd0:	b059      	add	sp, #356	; 0x164
 8027fd2:	ecbd 8b04 	vpop	{d8-d9}
 8027fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fda:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8027fdc:	2b03      	cmp	r3, #3
 8027fde:	d1f5      	bne.n	8027fcc <__kernel_rem_pio2f+0x3b4>
 8027fe0:	aa30      	add	r2, sp, #192	; 0xc0
 8027fe2:	1f0b      	subs	r3, r1, #4
 8027fe4:	4413      	add	r3, r2
 8027fe6:	461a      	mov	r2, r3
 8027fe8:	4620      	mov	r0, r4
 8027fea:	2800      	cmp	r0, #0
 8027fec:	f1a2 0204 	sub.w	r2, r2, #4
 8027ff0:	dc52      	bgt.n	8028098 <__kernel_rem_pio2f+0x480>
 8027ff2:	4622      	mov	r2, r4
 8027ff4:	2a01      	cmp	r2, #1
 8027ff6:	f1a3 0304 	sub.w	r3, r3, #4
 8027ffa:	dc5d      	bgt.n	80280b8 <__kernel_rem_pio2f+0x4a0>
 8027ffc:	ab30      	add	r3, sp, #192	; 0xc0
 8027ffe:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8027f18 <__kernel_rem_pio2f+0x300>
 8028002:	440b      	add	r3, r1
 8028004:	2c01      	cmp	r4, #1
 8028006:	dc67      	bgt.n	80280d8 <__kernel_rem_pio2f+0x4c0>
 8028008:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802800c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8028010:	2f00      	cmp	r7, #0
 8028012:	d167      	bne.n	80280e4 <__kernel_rem_pio2f+0x4cc>
 8028014:	edc8 6a00 	vstr	s13, [r8]
 8028018:	ed88 7a01 	vstr	s14, [r8, #4]
 802801c:	edc8 7a02 	vstr	s15, [r8, #8]
 8028020:	e7d4      	b.n	8027fcc <__kernel_rem_pio2f+0x3b4>
 8028022:	ab30      	add	r3, sp, #192	; 0xc0
 8028024:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8027f18 <__kernel_rem_pio2f+0x300>
 8028028:	440b      	add	r3, r1
 802802a:	4622      	mov	r2, r4
 802802c:	2a00      	cmp	r2, #0
 802802e:	da24      	bge.n	802807a <__kernel_rem_pio2f+0x462>
 8028030:	b34f      	cbz	r7, 8028086 <__kernel_rem_pio2f+0x46e>
 8028032:	eef1 7a47 	vneg.f32	s15, s14
 8028036:	edc8 7a00 	vstr	s15, [r8]
 802803a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802803e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028042:	aa31      	add	r2, sp, #196	; 0xc4
 8028044:	2301      	movs	r3, #1
 8028046:	429c      	cmp	r4, r3
 8028048:	da20      	bge.n	802808c <__kernel_rem_pio2f+0x474>
 802804a:	b10f      	cbz	r7, 8028050 <__kernel_rem_pio2f+0x438>
 802804c:	eef1 7a67 	vneg.f32	s15, s15
 8028050:	edc8 7a01 	vstr	s15, [r8, #4]
 8028054:	e7ba      	b.n	8027fcc <__kernel_rem_pio2f+0x3b4>
 8028056:	ab30      	add	r3, sp, #192	; 0xc0
 8028058:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8027f18 <__kernel_rem_pio2f+0x300>
 802805c:	440b      	add	r3, r1
 802805e:	2c00      	cmp	r4, #0
 8028060:	da05      	bge.n	802806e <__kernel_rem_pio2f+0x456>
 8028062:	b10f      	cbz	r7, 8028068 <__kernel_rem_pio2f+0x450>
 8028064:	eef1 7a67 	vneg.f32	s15, s15
 8028068:	edc8 7a00 	vstr	s15, [r8]
 802806c:	e7ae      	b.n	8027fcc <__kernel_rem_pio2f+0x3b4>
 802806e:	ed33 7a01 	vldmdb	r3!, {s14}
 8028072:	3c01      	subs	r4, #1
 8028074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028078:	e7f1      	b.n	802805e <__kernel_rem_pio2f+0x446>
 802807a:	ed73 7a01 	vldmdb	r3!, {s15}
 802807e:	3a01      	subs	r2, #1
 8028080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8028084:	e7d2      	b.n	802802c <__kernel_rem_pio2f+0x414>
 8028086:	eef0 7a47 	vmov.f32	s15, s14
 802808a:	e7d4      	b.n	8028036 <__kernel_rem_pio2f+0x41e>
 802808c:	ecb2 7a01 	vldmia	r2!, {s14}
 8028090:	3301      	adds	r3, #1
 8028092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028096:	e7d6      	b.n	8028046 <__kernel_rem_pio2f+0x42e>
 8028098:	edd2 7a00 	vldr	s15, [r2]
 802809c:	edd2 6a01 	vldr	s13, [r2, #4]
 80280a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80280a4:	3801      	subs	r0, #1
 80280a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80280aa:	ed82 7a00 	vstr	s14, [r2]
 80280ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80280b2:	edc2 7a01 	vstr	s15, [r2, #4]
 80280b6:	e798      	b.n	8027fea <__kernel_rem_pio2f+0x3d2>
 80280b8:	edd3 7a00 	vldr	s15, [r3]
 80280bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80280c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80280c4:	3a01      	subs	r2, #1
 80280c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80280ca:	ed83 7a00 	vstr	s14, [r3]
 80280ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80280d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80280d6:	e78d      	b.n	8027ff4 <__kernel_rem_pio2f+0x3dc>
 80280d8:	ed33 7a01 	vldmdb	r3!, {s14}
 80280dc:	3c01      	subs	r4, #1
 80280de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80280e2:	e78f      	b.n	8028004 <__kernel_rem_pio2f+0x3ec>
 80280e4:	eef1 6a66 	vneg.f32	s13, s13
 80280e8:	eeb1 7a47 	vneg.f32	s14, s14
 80280ec:	edc8 6a00 	vstr	s13, [r8]
 80280f0:	ed88 7a01 	vstr	s14, [r8, #4]
 80280f4:	eef1 7a67 	vneg.f32	s15, s15
 80280f8:	e790      	b.n	802801c <__kernel_rem_pio2f+0x404>
 80280fa:	bf00      	nop

080280fc <scalbnf>:
 80280fc:	ee10 3a10 	vmov	r3, s0
 8028100:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8028104:	d02b      	beq.n	802815e <scalbnf+0x62>
 8028106:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802810a:	d302      	bcc.n	8028112 <scalbnf+0x16>
 802810c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028110:	4770      	bx	lr
 8028112:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8028116:	d123      	bne.n	8028160 <scalbnf+0x64>
 8028118:	4b24      	ldr	r3, [pc, #144]	; (80281ac <scalbnf+0xb0>)
 802811a:	eddf 7a25 	vldr	s15, [pc, #148]	; 80281b0 <scalbnf+0xb4>
 802811e:	4298      	cmp	r0, r3
 8028120:	ee20 0a27 	vmul.f32	s0, s0, s15
 8028124:	db17      	blt.n	8028156 <scalbnf+0x5a>
 8028126:	ee10 3a10 	vmov	r3, s0
 802812a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802812e:	3a19      	subs	r2, #25
 8028130:	f24c 3150 	movw	r1, #50000	; 0xc350
 8028134:	4288      	cmp	r0, r1
 8028136:	dd15      	ble.n	8028164 <scalbnf+0x68>
 8028138:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80281b4 <scalbnf+0xb8>
 802813c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80281b8 <scalbnf+0xbc>
 8028140:	ee10 3a10 	vmov	r3, s0
 8028144:	eeb0 7a67 	vmov.f32	s14, s15
 8028148:	2b00      	cmp	r3, #0
 802814a:	bfb8      	it	lt
 802814c:	eef0 7a66 	vmovlt.f32	s15, s13
 8028150:	ee27 0a87 	vmul.f32	s0, s15, s14
 8028154:	4770      	bx	lr
 8028156:	eddf 7a19 	vldr	s15, [pc, #100]	; 80281bc <scalbnf+0xc0>
 802815a:	ee27 0a80 	vmul.f32	s0, s15, s0
 802815e:	4770      	bx	lr
 8028160:	0dd2      	lsrs	r2, r2, #23
 8028162:	e7e5      	b.n	8028130 <scalbnf+0x34>
 8028164:	4410      	add	r0, r2
 8028166:	28fe      	cmp	r0, #254	; 0xfe
 8028168:	dce6      	bgt.n	8028138 <scalbnf+0x3c>
 802816a:	2800      	cmp	r0, #0
 802816c:	dd06      	ble.n	802817c <scalbnf+0x80>
 802816e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028172:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8028176:	ee00 3a10 	vmov	s0, r3
 802817a:	4770      	bx	lr
 802817c:	f110 0f16 	cmn.w	r0, #22
 8028180:	da09      	bge.n	8028196 <scalbnf+0x9a>
 8028182:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80281bc <scalbnf+0xc0>
 8028186:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80281c0 <scalbnf+0xc4>
 802818a:	ee10 3a10 	vmov	r3, s0
 802818e:	eeb0 7a67 	vmov.f32	s14, s15
 8028192:	2b00      	cmp	r3, #0
 8028194:	e7d9      	b.n	802814a <scalbnf+0x4e>
 8028196:	3019      	adds	r0, #25
 8028198:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802819c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80281a0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80281c4 <scalbnf+0xc8>
 80281a4:	ee07 3a90 	vmov	s15, r3
 80281a8:	e7d7      	b.n	802815a <scalbnf+0x5e>
 80281aa:	bf00      	nop
 80281ac:	ffff3cb0 	.word	0xffff3cb0
 80281b0:	4c000000 	.word	0x4c000000
 80281b4:	7149f2ca 	.word	0x7149f2ca
 80281b8:	f149f2ca 	.word	0xf149f2ca
 80281bc:	0da24260 	.word	0x0da24260
 80281c0:	8da24260 	.word	0x8da24260
 80281c4:	33000000 	.word	0x33000000

080281c8 <floorf>:
 80281c8:	ee10 3a10 	vmov	r3, s0
 80281cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80281d0:	3a7f      	subs	r2, #127	; 0x7f
 80281d2:	2a16      	cmp	r2, #22
 80281d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80281d8:	dc2a      	bgt.n	8028230 <floorf+0x68>
 80281da:	2a00      	cmp	r2, #0
 80281dc:	da11      	bge.n	8028202 <floorf+0x3a>
 80281de:	eddf 7a18 	vldr	s15, [pc, #96]	; 8028240 <floorf+0x78>
 80281e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80281e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80281ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281ee:	dd05      	ble.n	80281fc <floorf+0x34>
 80281f0:	2b00      	cmp	r3, #0
 80281f2:	da23      	bge.n	802823c <floorf+0x74>
 80281f4:	4a13      	ldr	r2, [pc, #76]	; (8028244 <floorf+0x7c>)
 80281f6:	2900      	cmp	r1, #0
 80281f8:	bf18      	it	ne
 80281fa:	4613      	movne	r3, r2
 80281fc:	ee00 3a10 	vmov	s0, r3
 8028200:	4770      	bx	lr
 8028202:	4911      	ldr	r1, [pc, #68]	; (8028248 <floorf+0x80>)
 8028204:	4111      	asrs	r1, r2
 8028206:	420b      	tst	r3, r1
 8028208:	d0fa      	beq.n	8028200 <floorf+0x38>
 802820a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8028240 <floorf+0x78>
 802820e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8028212:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8028216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802821a:	ddef      	ble.n	80281fc <floorf+0x34>
 802821c:	2b00      	cmp	r3, #0
 802821e:	bfbe      	ittt	lt
 8028220:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8028224:	fa40 f202 	asrlt.w	r2, r0, r2
 8028228:	189b      	addlt	r3, r3, r2
 802822a:	ea23 0301 	bic.w	r3, r3, r1
 802822e:	e7e5      	b.n	80281fc <floorf+0x34>
 8028230:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8028234:	d3e4      	bcc.n	8028200 <floorf+0x38>
 8028236:	ee30 0a00 	vadd.f32	s0, s0, s0
 802823a:	4770      	bx	lr
 802823c:	2300      	movs	r3, #0
 802823e:	e7dd      	b.n	80281fc <floorf+0x34>
 8028240:	7149f2ca 	.word	0x7149f2ca
 8028244:	bf800000 	.word	0xbf800000
 8028248:	007fffff 	.word	0x007fffff

0802824c <_init>:
 802824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802824e:	bf00      	nop
 8028250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028252:	bc08      	pop	{r3}
 8028254:	469e      	mov	lr, r3
 8028256:	4770      	bx	lr

08028258 <_fini>:
 8028258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802825a:	bf00      	nop
 802825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802825e:	bc08      	pop	{r3}
 8028260:	469e      	mov	lr, r3
 8028262:	4770      	bx	lr
